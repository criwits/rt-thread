
rtthread.elf：     文件格式 elf32-littleriscv


Disassembly of section .start:

80000000 <_start>:

  .global   _start
  .section ".start", "ax"
_start:
  // for sifive uart
  lui a0,0x54000000>>12
80000000:	54000537          	lui	a0,0x54000
	// disable interrupts
	li a1,0
80000004:	00000593          	li	a1,0
	sw a1,16(a0)
80000008:	00b52823          	sw	a1,16(a0) # 54000010 <__STACKSIZE__+0x53ffc010>
	// enable tx
	li a1,1
8000000c:	00100593          	li	a1,1
	sw a1,8(a0)
80000010:	00b52423          	sw	a1,8(a0)
	// enable rx
	li a1,1
80000014:	00100593          	li	a1,1
	sw a1,12(a0)
80000018:	00b52623          	sw	a1,12(a0)

	// print START\n
	addi a1,zero,'S'
8000001c:	05300593          	li	a1,83
	addi a2,zero,'T'
80000020:	05400613          	li	a2,84
	addi a3,zero,'A'
80000024:	04100693          	li	a3,65
	addi a4,zero,'R'
80000028:	05200713          	li	a4,82
	addi a5,zero,'T'
8000002c:	05400793          	li	a5,84
	addi a6,zero,'\n'
80000030:	00a00813          	li	a6,10
  sw a1,0(a0)
80000034:	00b52023          	sw	a1,0(a0)
	sw a2,0(a0)
80000038:	00c52023          	sw	a2,0(a0)
	sw a3,0(a0)
8000003c:	00d52023          	sw	a3,0(a0)
	sw a4,0(a0)
80000040:	00e52023          	sw	a4,0(a0)
	sw a5,0(a0)
80000044:	00f52023          	sw	a5,0(a0)
	sw a6,0(a0)
80000048:	01052023          	sw	a6,0(a0)

  # setup stacks per hart
  csrr t0, mhartid                  # read current hart id
8000004c:	f14022f3          	csrr	t0,mhartid
  slli t0, t0, 10                   # shift left the hart id by 1024
80000050:	00a29293          	slli	t0,t0,0xa

  # park harts with id != 0
  csrr a0, mhartid                  # read current hart id
80000054:	f1402573          	csrr	a0,mhartid
  bnez a0, park                     # if we're not on the hart 0
80000058:	04051063          	bnez	a0,80000098 <park>

  csrw SRC_XIE, 0                   # clear Interrupt Registers
8000005c:	30405073          	csrwi	mie,0
  csrw SRC_XIP, 0
80000060:	34405073          	csrwi	mip,0

  la t0, trap_entry
80000064:	00012297          	auipc	t0,0x12
80000068:	2b828293          	addi	t0,t0,696 # 8001231c <trap_entry>
  csrw SRC_XTVEC, t0                # set Trap Vector Base Address Register
8000006c:	30529073          	csrw	mtvec,t0

  /* set to disable FPU */
  li t0, XSTATUS_FS                 # close fpu
80000070:	000062b7          	lui	t0,0x6
  csrc SRC_XSTATUS, t0
80000074:	3002b073          	csrc	mstatus,t0

.option push
.option norelax
  la gp, __global_pointer$
80000078:	0002a197          	auipc	gp,0x2a
8000007c:	cf018193          	addi	gp,gp,-784 # 80029d68 <__global_pointer$>
.option pop

  la   sp, __stack_start__
80000080:	00080117          	auipc	sp,0x80
80000084:	f8010113          	addi	sp,sp,-128 # 80080000 <__STACK_ADDR__>
  li   t0, __STACKSIZE__
80000088:	000042b7          	lui	t0,0x4
  add  sp, sp, t0
8000008c:	00510133          	add	sp,sp,t0
  csrw SRC_XSCRATCH, sp
80000090:	34011073          	csrw	mscratch,sp
  j primary_cpu_entry
80000094:	57d1b06f          	j	8001be10 <primary_cpu_entry>

80000098 <park>:

park:
    wfi
80000098:	10500073          	wfi
    j park
8000009c:	ffdff06f          	j	80000098 <park>

Disassembly of section .text:

800000a0 <rt_hw_interrupt_disable>:
/*
 * rt_base_t rt_hw_interrupt_disable(void);
 */
    .globl rt_hw_interrupt_disable
rt_hw_interrupt_disable:
    csrrci a0, mstatus, 8
800000a0:	30047573          	csrrci	a0,mstatus,8
    ret
800000a4:	00008067          	ret

800000a8 <rt_hw_interrupt_enable>:
/*
 * void rt_hw_interrupt_enable(rt_base_t level);
 */
    .globl rt_hw_interrupt_enable
rt_hw_interrupt_enable:
    csrw mstatus, a0
800000a8:	30051073          	csrw	mstatus,a0
    ret
800000ac:	00008067          	ret

800000b0 <rt_hw_context_switch_to>:
 * a0 --> to
 * a1 --> to_thread
 */
    .globl rt_hw_context_switch_to
rt_hw_context_switch_to:
    LOAD sp, (a0)
800000b0:	00052103          	lw	sp,0(a0)

#ifdef RT_USING_SMP
    mv   a0,   a1
    call  rt_cpus_lock_status_restore
#endif
    LOAD a0,   2 * REGBYTES(sp)
800000b4:	00812503          	lw	a0,8(sp)
    csrw SRC_XSTATUS, a0
800000b8:	30051073          	csrw	mstatus,a0
    j    rt_hw_context_switch_exit
800000bc:	0a00006f          	j	8000015c <rt_hw_context_switch_exit>

800000c0 <rt_hw_context_switch>:
    FSTORE  f29, 29 * FREGBYTES(sp)
    FSTORE  f30, 30 * FREGBYTES(sp)
    FSTORE  f31, 31 * FREGBYTES(sp)

#endif
    addi  sp,  sp, -32 * REGBYTES
800000c0:	f8010113          	addi	sp,sp,-128
    STORE sp,  (a0)
800000c4:	00252023          	sw	sp,0(a0)

    STORE x1,   0 * REGBYTES(sp)
800000c8:	00112023          	sw	ra,0(sp)
    STORE x1,   1 * REGBYTES(sp)
800000cc:	00112223          	sw	ra,4(sp)


    csrr a0, SRC_XSTATUS
800000d0:	30002573          	csrr	a0,mstatus
    andi a0, a0, 8
800000d4:	00857513          	andi	a0,a0,8
    beqz a0, save_mpie
800000d8:	00050463          	beqz	a0,800000e0 <save_mpie>
    li   a0, 0x80
800000dc:	08000513          	li	a0,128

800000e0 <save_mpie>:
save_mpie:
    STORE a0,   2 * REGBYTES(sp)
800000e0:	00a12423          	sw	a0,8(sp)

    STORE x4,   4 * REGBYTES(sp)
800000e4:	00412823          	sw	tp,16(sp)
    STORE x5,   5 * REGBYTES(sp)
800000e8:	00512a23          	sw	t0,20(sp)
    STORE x6,   6 * REGBYTES(sp)
800000ec:	00612c23          	sw	t1,24(sp)
    STORE x7,   7 * REGBYTES(sp)
800000f0:	00712e23          	sw	t2,28(sp)
    STORE x8,   8 * REGBYTES(sp)
800000f4:	02812023          	sw	s0,32(sp)
    STORE x9,   9 * REGBYTES(sp)
800000f8:	02912223          	sw	s1,36(sp)
    STORE x10, 10 * REGBYTES(sp)
800000fc:	02a12423          	sw	a0,40(sp)
    STORE x11, 11 * REGBYTES(sp)
80000100:	02b12623          	sw	a1,44(sp)
    STORE x12, 12 * REGBYTES(sp)
80000104:	02c12823          	sw	a2,48(sp)
    STORE x13, 13 * REGBYTES(sp)
80000108:	02d12a23          	sw	a3,52(sp)
    STORE x14, 14 * REGBYTES(sp)
8000010c:	02e12c23          	sw	a4,56(sp)
    STORE x15, 15 * REGBYTES(sp)
80000110:	02f12e23          	sw	a5,60(sp)
    STORE x16, 16 * REGBYTES(sp)
80000114:	05012023          	sw	a6,64(sp)
    STORE x17, 17 * REGBYTES(sp)
80000118:	05112223          	sw	a7,68(sp)
    STORE x18, 18 * REGBYTES(sp)
8000011c:	05212423          	sw	s2,72(sp)
    STORE x19, 19 * REGBYTES(sp)
80000120:	05312623          	sw	s3,76(sp)
    STORE x20, 20 * REGBYTES(sp)
80000124:	05412823          	sw	s4,80(sp)
    STORE x21, 21 * REGBYTES(sp)
80000128:	05512a23          	sw	s5,84(sp)
    STORE x22, 22 * REGBYTES(sp)
8000012c:	05612c23          	sw	s6,88(sp)
    STORE x23, 23 * REGBYTES(sp)
80000130:	05712e23          	sw	s7,92(sp)
    STORE x24, 24 * REGBYTES(sp)
80000134:	07812023          	sw	s8,96(sp)
    STORE x25, 25 * REGBYTES(sp)
80000138:	07912223          	sw	s9,100(sp)
    STORE x26, 26 * REGBYTES(sp)
8000013c:	07a12423          	sw	s10,104(sp)
    STORE x27, 27 * REGBYTES(sp)
80000140:	07b12623          	sw	s11,108(sp)
    STORE x28, 28 * REGBYTES(sp)
80000144:	07c12823          	sw	t3,112(sp)
    STORE x29, 29 * REGBYTES(sp)
80000148:	07d12a23          	sw	t4,116(sp)
    STORE x30, 30 * REGBYTES(sp)
8000014c:	07e12c23          	sw	t5,120(sp)
    STORE x31, 31 * REGBYTES(sp)
80000150:	07f12e23          	sw	t6,124(sp)
    /* restore to thread context
     * sp(0) -> epc;
     * sp(1) -> ra;
     * sp(i) -> x(i+2)
     */
    LOAD sp,  (a1)
80000154:	0005a103          	lw	sp,0(a1)
#ifdef RT_USING_SMP
    mv   a0,   a2
    call  rt_cpus_lock_status_restore
#endif /*RT_USING_SMP*/

    j rt_hw_context_switch_exit
80000158:	0040006f          	j	8000015c <rt_hw_context_switch_exit>

8000015c <rt_hw_context_switch_exit>:
    call rt_signal_check
    mv sp, a0
#endif
#endif
    /* resw ra to mepc */
    LOAD a0,   0 * REGBYTES(sp)
8000015c:	00012503          	lw	a0,0(sp)
    csrw SRC_XEPC, a0
80000160:	34151073          	csrw	mepc,a0

    LOAD x1,   1 * REGBYTES(sp)
80000164:	00412083          	lw	ra,4(sp)

    li    t0, 0x00007800
80000168:	000082b7          	lui	t0,0x8
8000016c:	80028293          	addi	t0,t0,-2048 # 7800 <__STACKSIZE__+0x3800>
    csrw  mstatus, t0
80000170:	30029073          	csrw	mstatus,t0
    LOAD a0,   2 * REGBYTES(sp)
80000174:	00812503          	lw	a0,8(sp)
    csrs mstatus, a0
80000178:	30052073          	csrs	mstatus,a0

    LOAD x4,   4 * REGBYTES(sp)
8000017c:	01012203          	lw	tp,16(sp)
    LOAD x5,   5 * REGBYTES(sp)
80000180:	01412283          	lw	t0,20(sp)
    LOAD x6,   6 * REGBYTES(sp)
80000184:	01812303          	lw	t1,24(sp)
    LOAD x7,   7 * REGBYTES(sp)
80000188:	01c12383          	lw	t2,28(sp)
    LOAD x8,   8 * REGBYTES(sp)
8000018c:	02012403          	lw	s0,32(sp)
    LOAD x9,   9 * REGBYTES(sp)
80000190:	02412483          	lw	s1,36(sp)
    LOAD x10, 10 * REGBYTES(sp)
80000194:	02812503          	lw	a0,40(sp)
    LOAD x11, 11 * REGBYTES(sp)
80000198:	02c12583          	lw	a1,44(sp)
    LOAD x12, 12 * REGBYTES(sp)
8000019c:	03012603          	lw	a2,48(sp)
    LOAD x13, 13 * REGBYTES(sp)
800001a0:	03412683          	lw	a3,52(sp)
    LOAD x14, 14 * REGBYTES(sp)
800001a4:	03812703          	lw	a4,56(sp)
    LOAD x15, 15 * REGBYTES(sp)
800001a8:	03c12783          	lw	a5,60(sp)
    LOAD x16, 16 * REGBYTES(sp)
800001ac:	04012803          	lw	a6,64(sp)
    LOAD x17, 17 * REGBYTES(sp)
800001b0:	04412883          	lw	a7,68(sp)
    LOAD x18, 18 * REGBYTES(sp)
800001b4:	04812903          	lw	s2,72(sp)
    LOAD x19, 19 * REGBYTES(sp)
800001b8:	04c12983          	lw	s3,76(sp)
    LOAD x20, 20 * REGBYTES(sp)
800001bc:	05012a03          	lw	s4,80(sp)
    LOAD x21, 21 * REGBYTES(sp)
800001c0:	05412a83          	lw	s5,84(sp)
    LOAD x22, 22 * REGBYTES(sp)
800001c4:	05812b03          	lw	s6,88(sp)
    LOAD x23, 23 * REGBYTES(sp)
800001c8:	05c12b83          	lw	s7,92(sp)
    LOAD x24, 24 * REGBYTES(sp)
800001cc:	06012c03          	lw	s8,96(sp)
    LOAD x25, 25 * REGBYTES(sp)
800001d0:	06412c83          	lw	s9,100(sp)
    LOAD x26, 26 * REGBYTES(sp)
800001d4:	06812d03          	lw	s10,104(sp)
    LOAD x27, 27 * REGBYTES(sp)
800001d8:	06c12d83          	lw	s11,108(sp)
    LOAD x28, 28 * REGBYTES(sp)
800001dc:	07012e03          	lw	t3,112(sp)
    LOAD x29, 29 * REGBYTES(sp)
800001e0:	07412e83          	lw	t4,116(sp)
    LOAD x30, 30 * REGBYTES(sp)
800001e4:	07812f03          	lw	t5,120(sp)
    LOAD x31, 31 * REGBYTES(sp)
800001e8:	07c12f83          	lw	t6,124(sp)

    addi sp,  sp, 32 * REGBYTES
800001ec:	08010113          	addi	sp,sp,128
    FLOAD   f31, 31 * FREGBYTES(sp)

    addi    sp, sp, 32 * FREGBYTES
#endif

    XRET
800001f0:	30200073          	mret

800001f4 <memset>:
800001f4:	00f00313          	li	t1,15
800001f8:	00050713          	mv	a4,a0
800001fc:	02c37e63          	bgeu	t1,a2,80000238 <memset+0x44>
80000200:	00f77793          	andi	a5,a4,15
80000204:	0a079063          	bnez	a5,800002a4 <memset+0xb0>
80000208:	08059263          	bnez	a1,8000028c <memset+0x98>
8000020c:	ff067693          	andi	a3,a2,-16
80000210:	00f67613          	andi	a2,a2,15
80000214:	00e686b3          	add	a3,a3,a4
80000218:	00b72023          	sw	a1,0(a4)
8000021c:	00b72223          	sw	a1,4(a4)
80000220:	00b72423          	sw	a1,8(a4)
80000224:	00b72623          	sw	a1,12(a4)
80000228:	01070713          	addi	a4,a4,16
8000022c:	fed766e3          	bltu	a4,a3,80000218 <memset+0x24>
80000230:	00061463          	bnez	a2,80000238 <memset+0x44>
80000234:	00008067          	ret
80000238:	40c306b3          	sub	a3,t1,a2
8000023c:	00269693          	slli	a3,a3,0x2
80000240:	00000297          	auipc	t0,0x0
80000244:	005686b3          	add	a3,a3,t0
80000248:	00c68067          	jr	12(a3)
8000024c:	00b70723          	sb	a1,14(a4)
80000250:	00b706a3          	sb	a1,13(a4)
80000254:	00b70623          	sb	a1,12(a4)
80000258:	00b705a3          	sb	a1,11(a4)
8000025c:	00b70523          	sb	a1,10(a4)
80000260:	00b704a3          	sb	a1,9(a4)
80000264:	00b70423          	sb	a1,8(a4)
80000268:	00b703a3          	sb	a1,7(a4)
8000026c:	00b70323          	sb	a1,6(a4)
80000270:	00b702a3          	sb	a1,5(a4)
80000274:	00b70223          	sb	a1,4(a4)
80000278:	00b701a3          	sb	a1,3(a4)
8000027c:	00b70123          	sb	a1,2(a4)
80000280:	00b700a3          	sb	a1,1(a4)
80000284:	00b70023          	sb	a1,0(a4)
80000288:	00008067          	ret
8000028c:	0ff5f593          	zext.b	a1,a1
80000290:	00859693          	slli	a3,a1,0x8
80000294:	00d5e5b3          	or	a1,a1,a3
80000298:	01059693          	slli	a3,a1,0x10
8000029c:	00d5e5b3          	or	a1,a1,a3
800002a0:	f6dff06f          	j	8000020c <memset+0x18>
800002a4:	00279693          	slli	a3,a5,0x2
800002a8:	00000297          	auipc	t0,0x0
800002ac:	005686b3          	add	a3,a3,t0
800002b0:	00008293          	mv	t0,ra
800002b4:	fa0680e7          	jalr	-96(a3)
800002b8:	00028093          	mv	ra,t0
800002bc:	ff078793          	addi	a5,a5,-16
800002c0:	40f70733          	sub	a4,a4,a5
800002c4:	00f60633          	add	a2,a2,a5
800002c8:	f6c378e3          	bgeu	t1,a2,80000238 <memset+0x44>
800002cc:	f3dff06f          	j	80000208 <memset+0x14>

800002d0 <strcmp>:
800002d0:	00b56733          	or	a4,a0,a1
800002d4:	fff00393          	li	t2,-1
800002d8:	00377713          	andi	a4,a4,3
800002dc:	10071063          	bnez	a4,800003dc <strcmp+0x10c>
800002e0:	7f7f87b7          	lui	a5,0x7f7f8
800002e4:	f7f78793          	addi	a5,a5,-129 # 7f7f7f7f <__STACKSIZE__+0x7f7f3f7f>
800002e8:	00052603          	lw	a2,0(a0)
800002ec:	0005a683          	lw	a3,0(a1)
800002f0:	00f672b3          	and	t0,a2,a5
800002f4:	00f66333          	or	t1,a2,a5
800002f8:	00f282b3          	add	t0,t0,a5
800002fc:	0062e2b3          	or	t0,t0,t1
80000300:	10729263          	bne	t0,t2,80000404 <strcmp+0x134>
80000304:	08d61663          	bne	a2,a3,80000390 <strcmp+0xc0>
80000308:	00452603          	lw	a2,4(a0)
8000030c:	0045a683          	lw	a3,4(a1)
80000310:	00f672b3          	and	t0,a2,a5
80000314:	00f66333          	or	t1,a2,a5
80000318:	00f282b3          	add	t0,t0,a5
8000031c:	0062e2b3          	or	t0,t0,t1
80000320:	0c729e63          	bne	t0,t2,800003fc <strcmp+0x12c>
80000324:	06d61663          	bne	a2,a3,80000390 <strcmp+0xc0>
80000328:	00852603          	lw	a2,8(a0)
8000032c:	0085a683          	lw	a3,8(a1)
80000330:	00f672b3          	and	t0,a2,a5
80000334:	00f66333          	or	t1,a2,a5
80000338:	00f282b3          	add	t0,t0,a5
8000033c:	0062e2b3          	or	t0,t0,t1
80000340:	0c729863          	bne	t0,t2,80000410 <strcmp+0x140>
80000344:	04d61663          	bne	a2,a3,80000390 <strcmp+0xc0>
80000348:	00c52603          	lw	a2,12(a0)
8000034c:	00c5a683          	lw	a3,12(a1)
80000350:	00f672b3          	and	t0,a2,a5
80000354:	00f66333          	or	t1,a2,a5
80000358:	00f282b3          	add	t0,t0,a5
8000035c:	0062e2b3          	or	t0,t0,t1
80000360:	0c729263          	bne	t0,t2,80000424 <strcmp+0x154>
80000364:	02d61663          	bne	a2,a3,80000390 <strcmp+0xc0>
80000368:	01052603          	lw	a2,16(a0)
8000036c:	0105a683          	lw	a3,16(a1)
80000370:	00f672b3          	and	t0,a2,a5
80000374:	00f66333          	or	t1,a2,a5
80000378:	00f282b3          	add	t0,t0,a5
8000037c:	0062e2b3          	or	t0,t0,t1
80000380:	0a729c63          	bne	t0,t2,80000438 <strcmp+0x168>
80000384:	01450513          	addi	a0,a0,20
80000388:	01458593          	addi	a1,a1,20
8000038c:	f4d60ee3          	beq	a2,a3,800002e8 <strcmp+0x18>
80000390:	01061713          	slli	a4,a2,0x10
80000394:	01069793          	slli	a5,a3,0x10
80000398:	00f71e63          	bne	a4,a5,800003b4 <strcmp+0xe4>
8000039c:	01065713          	srli	a4,a2,0x10
800003a0:	0106d793          	srli	a5,a3,0x10
800003a4:	40f70533          	sub	a0,a4,a5
800003a8:	0ff57593          	zext.b	a1,a0
800003ac:	02059063          	bnez	a1,800003cc <strcmp+0xfc>
800003b0:	00008067          	ret
800003b4:	01075713          	srli	a4,a4,0x10
800003b8:	0107d793          	srli	a5,a5,0x10
800003bc:	40f70533          	sub	a0,a4,a5
800003c0:	0ff57593          	zext.b	a1,a0
800003c4:	00059463          	bnez	a1,800003cc <strcmp+0xfc>
800003c8:	00008067          	ret
800003cc:	0ff77713          	zext.b	a4,a4
800003d0:	0ff7f793          	zext.b	a5,a5
800003d4:	40f70533          	sub	a0,a4,a5
800003d8:	00008067          	ret
800003dc:	00054603          	lbu	a2,0(a0)
800003e0:	0005c683          	lbu	a3,0(a1)
800003e4:	00150513          	addi	a0,a0,1
800003e8:	00158593          	addi	a1,a1,1
800003ec:	00d61463          	bne	a2,a3,800003f4 <strcmp+0x124>
800003f0:	fe0616e3          	bnez	a2,800003dc <strcmp+0x10c>
800003f4:	40d60533          	sub	a0,a2,a3
800003f8:	00008067          	ret
800003fc:	00450513          	addi	a0,a0,4
80000400:	00458593          	addi	a1,a1,4
80000404:	fcd61ce3          	bne	a2,a3,800003dc <strcmp+0x10c>
80000408:	00000513          	li	a0,0
8000040c:	00008067          	ret
80000410:	00850513          	addi	a0,a0,8
80000414:	00858593          	addi	a1,a1,8
80000418:	fcd612e3          	bne	a2,a3,800003dc <strcmp+0x10c>
8000041c:	00000513          	li	a0,0
80000420:	00008067          	ret
80000424:	00c50513          	addi	a0,a0,12
80000428:	00c58593          	addi	a1,a1,12
8000042c:	fad618e3          	bne	a2,a3,800003dc <strcmp+0x10c>
80000430:	00000513          	li	a0,0
80000434:	00008067          	ret
80000438:	01050513          	addi	a0,a0,16
8000043c:	01058593          	addi	a1,a1,16
80000440:	f8d61ee3          	bne	a2,a3,800003dc <strcmp+0x10c>
80000444:	00000513          	li	a0,0
80000448:	00008067          	ret

8000044c <__udivdi3>:
8000044c:	00050893          	mv	a7,a0
80000450:	00058313          	mv	t1,a1
80000454:	00060713          	mv	a4,a2
80000458:	00050813          	mv	a6,a0
8000045c:	00058793          	mv	a5,a1
80000460:	28069263          	bnez	a3,800006e4 <__udivdi3+0x298>
80000464:	800285b7          	lui	a1,0x80028
80000468:	da458593          	addi	a1,a1,-604 # 80027da4 <__clz_tab>
8000046c:	0ec37663          	bgeu	t1,a2,80000558 <__udivdi3+0x10c>
80000470:	000106b7          	lui	a3,0x10
80000474:	0cd67863          	bgeu	a2,a3,80000544 <__udivdi3+0xf8>
80000478:	10063693          	sltiu	a3,a2,256
8000047c:	0016c693          	xori	a3,a3,1
80000480:	00369693          	slli	a3,a3,0x3
80000484:	00d65533          	srl	a0,a2,a3
80000488:	00a585b3          	add	a1,a1,a0
8000048c:	0005c583          	lbu	a1,0(a1)
80000490:	02000513          	li	a0,32
80000494:	00d586b3          	add	a3,a1,a3
80000498:	40d505b3          	sub	a1,a0,a3
8000049c:	00d50c63          	beq	a0,a3,800004b4 <__udivdi3+0x68>
800004a0:	00b317b3          	sll	a5,t1,a1
800004a4:	00d8d6b3          	srl	a3,a7,a3
800004a8:	00b61733          	sll	a4,a2,a1
800004ac:	00f6e7b3          	or	a5,a3,a5
800004b0:	00b89833          	sll	a6,a7,a1
800004b4:	01075593          	srli	a1,a4,0x10
800004b8:	02b7d333          	divu	t1,a5,a1
800004bc:	01071613          	slli	a2,a4,0x10
800004c0:	01065613          	srli	a2,a2,0x10
800004c4:	02b7f7b3          	remu	a5,a5,a1
800004c8:	00030513          	mv	a0,t1
800004cc:	026608b3          	mul	a7,a2,t1
800004d0:	01079693          	slli	a3,a5,0x10
800004d4:	01085793          	srli	a5,a6,0x10
800004d8:	00d7e7b3          	or	a5,a5,a3
800004dc:	0117fe63          	bgeu	a5,a7,800004f8 <__udivdi3+0xac>
800004e0:	00f707b3          	add	a5,a4,a5
800004e4:	fff30513          	addi	a0,t1,-1
800004e8:	00e7e863          	bltu	a5,a4,800004f8 <__udivdi3+0xac>
800004ec:	0117f663          	bgeu	a5,a7,800004f8 <__udivdi3+0xac>
800004f0:	ffe30513          	addi	a0,t1,-2
800004f4:	00e787b3          	add	a5,a5,a4
800004f8:	411787b3          	sub	a5,a5,a7
800004fc:	02b7d8b3          	divu	a7,a5,a1
80000500:	01081813          	slli	a6,a6,0x10
80000504:	01085813          	srli	a6,a6,0x10
80000508:	02b7f7b3          	remu	a5,a5,a1
8000050c:	031606b3          	mul	a3,a2,a7
80000510:	01079793          	slli	a5,a5,0x10
80000514:	00f86833          	or	a6,a6,a5
80000518:	00088793          	mv	a5,a7
8000051c:	00d87c63          	bgeu	a6,a3,80000534 <__udivdi3+0xe8>
80000520:	01070833          	add	a6,a4,a6
80000524:	fff88793          	addi	a5,a7,-1
80000528:	00e86663          	bltu	a6,a4,80000534 <__udivdi3+0xe8>
8000052c:	00d87463          	bgeu	a6,a3,80000534 <__udivdi3+0xe8>
80000530:	ffe88793          	addi	a5,a7,-2
80000534:	01051513          	slli	a0,a0,0x10
80000538:	00f56533          	or	a0,a0,a5
8000053c:	00000593          	li	a1,0
80000540:	00008067          	ret
80000544:	01000537          	lui	a0,0x1000
80000548:	01000693          	li	a3,16
8000054c:	f2a66ce3          	bltu	a2,a0,80000484 <__udivdi3+0x38>
80000550:	01800693          	li	a3,24
80000554:	f31ff06f          	j	80000484 <__udivdi3+0x38>
80000558:	00000693          	li	a3,0
8000055c:	00060c63          	beqz	a2,80000574 <__udivdi3+0x128>
80000560:	000107b7          	lui	a5,0x10
80000564:	0cf67063          	bgeu	a2,a5,80000624 <__udivdi3+0x1d8>
80000568:	10063693          	sltiu	a3,a2,256
8000056c:	0016c693          	xori	a3,a3,1
80000570:	00369693          	slli	a3,a3,0x3
80000574:	00d657b3          	srl	a5,a2,a3
80000578:	00f585b3          	add	a1,a1,a5
8000057c:	0005c783          	lbu	a5,0(a1)
80000580:	00d787b3          	add	a5,a5,a3
80000584:	02000693          	li	a3,32
80000588:	40f685b3          	sub	a1,a3,a5
8000058c:	0af69663          	bne	a3,a5,80000638 <__udivdi3+0x1ec>
80000590:	40c307b3          	sub	a5,t1,a2
80000594:	00100593          	li	a1,1
80000598:	01075893          	srli	a7,a4,0x10
8000059c:	0317de33          	divu	t3,a5,a7
800005a0:	01071613          	slli	a2,a4,0x10
800005a4:	01065613          	srli	a2,a2,0x10
800005a8:	01085693          	srli	a3,a6,0x10
800005ac:	0317f7b3          	remu	a5,a5,a7
800005b0:	000e0513          	mv	a0,t3
800005b4:	03c60333          	mul	t1,a2,t3
800005b8:	01079793          	slli	a5,a5,0x10
800005bc:	00f6e7b3          	or	a5,a3,a5
800005c0:	0067fe63          	bgeu	a5,t1,800005dc <__udivdi3+0x190>
800005c4:	00f707b3          	add	a5,a4,a5
800005c8:	fffe0513          	addi	a0,t3,-1
800005cc:	00e7e863          	bltu	a5,a4,800005dc <__udivdi3+0x190>
800005d0:	0067f663          	bgeu	a5,t1,800005dc <__udivdi3+0x190>
800005d4:	ffee0513          	addi	a0,t3,-2
800005d8:	00e787b3          	add	a5,a5,a4
800005dc:	406787b3          	sub	a5,a5,t1
800005e0:	0317d333          	divu	t1,a5,a7
800005e4:	01081813          	slli	a6,a6,0x10
800005e8:	01085813          	srli	a6,a6,0x10
800005ec:	0317f7b3          	remu	a5,a5,a7
800005f0:	026606b3          	mul	a3,a2,t1
800005f4:	01079793          	slli	a5,a5,0x10
800005f8:	00f86833          	or	a6,a6,a5
800005fc:	00030793          	mv	a5,t1
80000600:	00d87c63          	bgeu	a6,a3,80000618 <__udivdi3+0x1cc>
80000604:	01070833          	add	a6,a4,a6
80000608:	fff30793          	addi	a5,t1,-1
8000060c:	00e86663          	bltu	a6,a4,80000618 <__udivdi3+0x1cc>
80000610:	00d87463          	bgeu	a6,a3,80000618 <__udivdi3+0x1cc>
80000614:	ffe30793          	addi	a5,t1,-2
80000618:	01051513          	slli	a0,a0,0x10
8000061c:	00f56533          	or	a0,a0,a5
80000620:	00008067          	ret
80000624:	010007b7          	lui	a5,0x1000
80000628:	01000693          	li	a3,16
8000062c:	f4f664e3          	bltu	a2,a5,80000574 <__udivdi3+0x128>
80000630:	01800693          	li	a3,24
80000634:	f41ff06f          	j	80000574 <__udivdi3+0x128>
80000638:	00b61733          	sll	a4,a2,a1
8000063c:	00f356b3          	srl	a3,t1,a5
80000640:	01075513          	srli	a0,a4,0x10
80000644:	00b31333          	sll	t1,t1,a1
80000648:	00f8d7b3          	srl	a5,a7,a5
8000064c:	0067e7b3          	or	a5,a5,t1
80000650:	02a6d333          	divu	t1,a3,a0
80000654:	01071613          	slli	a2,a4,0x10
80000658:	01065613          	srli	a2,a2,0x10
8000065c:	00b89833          	sll	a6,a7,a1
80000660:	02a6f6b3          	remu	a3,a3,a0
80000664:	026608b3          	mul	a7,a2,t1
80000668:	01069593          	slli	a1,a3,0x10
8000066c:	0107d693          	srli	a3,a5,0x10
80000670:	00b6e6b3          	or	a3,a3,a1
80000674:	00030593          	mv	a1,t1
80000678:	0116fe63          	bgeu	a3,a7,80000694 <__udivdi3+0x248>
8000067c:	00d706b3          	add	a3,a4,a3
80000680:	fff30593          	addi	a1,t1,-1
80000684:	00e6e863          	bltu	a3,a4,80000694 <__udivdi3+0x248>
80000688:	0116f663          	bgeu	a3,a7,80000694 <__udivdi3+0x248>
8000068c:	ffe30593          	addi	a1,t1,-2
80000690:	00e686b3          	add	a3,a3,a4
80000694:	411686b3          	sub	a3,a3,a7
80000698:	02a6d8b3          	divu	a7,a3,a0
8000069c:	01079793          	slli	a5,a5,0x10
800006a0:	0107d793          	srli	a5,a5,0x10
800006a4:	02a6f6b3          	remu	a3,a3,a0
800006a8:	03160633          	mul	a2,a2,a7
800006ac:	01069693          	slli	a3,a3,0x10
800006b0:	00d7e7b3          	or	a5,a5,a3
800006b4:	00088693          	mv	a3,a7
800006b8:	00c7fe63          	bgeu	a5,a2,800006d4 <__udivdi3+0x288>
800006bc:	00f707b3          	add	a5,a4,a5
800006c0:	fff88693          	addi	a3,a7,-1
800006c4:	00e7e863          	bltu	a5,a4,800006d4 <__udivdi3+0x288>
800006c8:	00c7f663          	bgeu	a5,a2,800006d4 <__udivdi3+0x288>
800006cc:	ffe88693          	addi	a3,a7,-2
800006d0:	00e787b3          	add	a5,a5,a4
800006d4:	01059593          	slli	a1,a1,0x10
800006d8:	40c787b3          	sub	a5,a5,a2
800006dc:	00d5e5b3          	or	a1,a1,a3
800006e0:	eb9ff06f          	j	80000598 <__udivdi3+0x14c>
800006e4:	18d5e663          	bltu	a1,a3,80000870 <__udivdi3+0x424>
800006e8:	000107b7          	lui	a5,0x10
800006ec:	04f6f463          	bgeu	a3,a5,80000734 <__udivdi3+0x2e8>
800006f0:	1006b713          	sltiu	a4,a3,256
800006f4:	00174713          	xori	a4,a4,1
800006f8:	00371713          	slli	a4,a4,0x3
800006fc:	800287b7          	lui	a5,0x80028
80000700:	00e6d5b3          	srl	a1,a3,a4
80000704:	da478793          	addi	a5,a5,-604 # 80027da4 <__clz_tab>
80000708:	00b787b3          	add	a5,a5,a1
8000070c:	0007c783          	lbu	a5,0(a5)
80000710:	00e787b3          	add	a5,a5,a4
80000714:	02000713          	li	a4,32
80000718:	40f705b3          	sub	a1,a4,a5
8000071c:	02f71663          	bne	a4,a5,80000748 <__udivdi3+0x2fc>
80000720:	00100513          	li	a0,1
80000724:	e066eee3          	bltu	a3,t1,80000540 <__udivdi3+0xf4>
80000728:	00c8b533          	sltu	a0,a7,a2
8000072c:	00154513          	xori	a0,a0,1
80000730:	00008067          	ret
80000734:	010007b7          	lui	a5,0x1000
80000738:	01000713          	li	a4,16
8000073c:	fcf6e0e3          	bltu	a3,a5,800006fc <__udivdi3+0x2b0>
80000740:	01800713          	li	a4,24
80000744:	fb9ff06f          	j	800006fc <__udivdi3+0x2b0>
80000748:	00f65733          	srl	a4,a2,a5
8000074c:	00b696b3          	sll	a3,a3,a1
80000750:	00d766b3          	or	a3,a4,a3
80000754:	00f35733          	srl	a4,t1,a5
80000758:	00b31333          	sll	t1,t1,a1
8000075c:	00f8d7b3          	srl	a5,a7,a5
80000760:	0067e7b3          	or	a5,a5,t1
80000764:	0106d313          	srli	t1,a3,0x10
80000768:	02675eb3          	divu	t4,a4,t1
8000076c:	01069813          	slli	a6,a3,0x10
80000770:	01085813          	srli	a6,a6,0x10
80000774:	00b61633          	sll	a2,a2,a1
80000778:	02677733          	remu	a4,a4,t1
8000077c:	03d80e33          	mul	t3,a6,t4
80000780:	01071513          	slli	a0,a4,0x10
80000784:	0107d713          	srli	a4,a5,0x10
80000788:	00a76733          	or	a4,a4,a0
8000078c:	000e8513          	mv	a0,t4
80000790:	01c77e63          	bgeu	a4,t3,800007ac <__udivdi3+0x360>
80000794:	00e68733          	add	a4,a3,a4
80000798:	fffe8513          	addi	a0,t4,-1
8000079c:	00d76863          	bltu	a4,a3,800007ac <__udivdi3+0x360>
800007a0:	01c77663          	bgeu	a4,t3,800007ac <__udivdi3+0x360>
800007a4:	ffee8513          	addi	a0,t4,-2
800007a8:	00d70733          	add	a4,a4,a3
800007ac:	41c70733          	sub	a4,a4,t3
800007b0:	02675e33          	divu	t3,a4,t1
800007b4:	01079793          	slli	a5,a5,0x10
800007b8:	0107d793          	srli	a5,a5,0x10
800007bc:	02677733          	remu	a4,a4,t1
800007c0:	03c80833          	mul	a6,a6,t3
800007c4:	01071713          	slli	a4,a4,0x10
800007c8:	00e7e7b3          	or	a5,a5,a4
800007cc:	000e0713          	mv	a4,t3
800007d0:	0107fe63          	bgeu	a5,a6,800007ec <__udivdi3+0x3a0>
800007d4:	00f687b3          	add	a5,a3,a5
800007d8:	fffe0713          	addi	a4,t3,-1
800007dc:	00d7e863          	bltu	a5,a3,800007ec <__udivdi3+0x3a0>
800007e0:	0107f663          	bgeu	a5,a6,800007ec <__udivdi3+0x3a0>
800007e4:	ffee0713          	addi	a4,t3,-2
800007e8:	00d787b3          	add	a5,a5,a3
800007ec:	01051513          	slli	a0,a0,0x10
800007f0:	00010e37          	lui	t3,0x10
800007f4:	00e56533          	or	a0,a0,a4
800007f8:	fffe0693          	addi	a3,t3,-1 # ffff <__STACKSIZE__+0xbfff>
800007fc:	00d57733          	and	a4,a0,a3
80000800:	410787b3          	sub	a5,a5,a6
80000804:	00d676b3          	and	a3,a2,a3
80000808:	01055813          	srli	a6,a0,0x10
8000080c:	01065613          	srli	a2,a2,0x10
80000810:	02d70333          	mul	t1,a4,a3
80000814:	02d806b3          	mul	a3,a6,a3
80000818:	02c70733          	mul	a4,a4,a2
8000081c:	02c80833          	mul	a6,a6,a2
80000820:	00d70633          	add	a2,a4,a3
80000824:	01035713          	srli	a4,t1,0x10
80000828:	00c70733          	add	a4,a4,a2
8000082c:	00d77463          	bgeu	a4,a3,80000834 <__udivdi3+0x3e8>
80000830:	01c80833          	add	a6,a6,t3
80000834:	01075693          	srli	a3,a4,0x10
80000838:	010686b3          	add	a3,a3,a6
8000083c:	02d7e663          	bltu	a5,a3,80000868 <__udivdi3+0x41c>
80000840:	ced79ee3          	bne	a5,a3,8000053c <__udivdi3+0xf0>
80000844:	000107b7          	lui	a5,0x10
80000848:	fff78793          	addi	a5,a5,-1 # ffff <__STACKSIZE__+0xbfff>
8000084c:	00f77733          	and	a4,a4,a5
80000850:	01071713          	slli	a4,a4,0x10
80000854:	00f37333          	and	t1,t1,a5
80000858:	00b898b3          	sll	a7,a7,a1
8000085c:	00670733          	add	a4,a4,t1
80000860:	00000593          	li	a1,0
80000864:	cce8fee3          	bgeu	a7,a4,80000540 <__udivdi3+0xf4>
80000868:	fff50513          	addi	a0,a0,-1 # ffffff <__STACKSIZE__+0xffbfff>
8000086c:	cd1ff06f          	j	8000053c <__udivdi3+0xf0>
80000870:	00000593          	li	a1,0
80000874:	00000513          	li	a0,0
80000878:	00008067          	ret

8000087c <__umoddi3>:
8000087c:	00060813          	mv	a6,a2
80000880:	00050793          	mv	a5,a0
80000884:	00058713          	mv	a4,a1
80000888:	20069663          	bnez	a3,80000a94 <__umoddi3+0x218>
8000088c:	800288b7          	lui	a7,0x80028
80000890:	da488893          	addi	a7,a7,-604 # 80027da4 <__clz_tab>
80000894:	0cc5fc63          	bgeu	a1,a2,8000096c <__umoddi3+0xf0>
80000898:	000106b7          	lui	a3,0x10
8000089c:	0ad67e63          	bgeu	a2,a3,80000958 <__umoddi3+0xdc>
800008a0:	10063693          	sltiu	a3,a2,256
800008a4:	0016c693          	xori	a3,a3,1
800008a8:	00369693          	slli	a3,a3,0x3
800008ac:	00d65333          	srl	t1,a2,a3
800008b0:	006888b3          	add	a7,a7,t1
800008b4:	0008c883          	lbu	a7,0(a7)
800008b8:	02000313          	li	t1,32
800008bc:	00d886b3          	add	a3,a7,a3
800008c0:	40d308b3          	sub	a7,t1,a3
800008c4:	00d30c63          	beq	t1,a3,800008dc <__umoddi3+0x60>
800008c8:	01159733          	sll	a4,a1,a7
800008cc:	00d556b3          	srl	a3,a0,a3
800008d0:	01161833          	sll	a6,a2,a7
800008d4:	00e6e733          	or	a4,a3,a4
800008d8:	011517b3          	sll	a5,a0,a7
800008dc:	01085613          	srli	a2,a6,0x10
800008e0:	02c756b3          	divu	a3,a4,a2
800008e4:	01081513          	slli	a0,a6,0x10
800008e8:	01055513          	srli	a0,a0,0x10
800008ec:	02c77733          	remu	a4,a4,a2
800008f0:	02a686b3          	mul	a3,a3,a0
800008f4:	01071593          	slli	a1,a4,0x10
800008f8:	0107d713          	srli	a4,a5,0x10
800008fc:	00b76733          	or	a4,a4,a1
80000900:	00d77a63          	bgeu	a4,a3,80000914 <__umoddi3+0x98>
80000904:	00e80733          	add	a4,a6,a4
80000908:	01076663          	bltu	a4,a6,80000914 <__umoddi3+0x98>
8000090c:	00d77463          	bgeu	a4,a3,80000914 <__umoddi3+0x98>
80000910:	01070733          	add	a4,a4,a6
80000914:	40d70733          	sub	a4,a4,a3
80000918:	02c756b3          	divu	a3,a4,a2
8000091c:	02c77733          	remu	a4,a4,a2
80000920:	02a686b3          	mul	a3,a3,a0
80000924:	01079793          	slli	a5,a5,0x10
80000928:	01071713          	slli	a4,a4,0x10
8000092c:	0107d793          	srli	a5,a5,0x10
80000930:	00e7e7b3          	or	a5,a5,a4
80000934:	00d7fa63          	bgeu	a5,a3,80000948 <__umoddi3+0xcc>
80000938:	00f807b3          	add	a5,a6,a5
8000093c:	0107e663          	bltu	a5,a6,80000948 <__umoddi3+0xcc>
80000940:	00d7f463          	bgeu	a5,a3,80000948 <__umoddi3+0xcc>
80000944:	010787b3          	add	a5,a5,a6
80000948:	40d787b3          	sub	a5,a5,a3
8000094c:	0117d533          	srl	a0,a5,a7
80000950:	00000593          	li	a1,0
80000954:	00008067          	ret
80000958:	01000337          	lui	t1,0x1000
8000095c:	01000693          	li	a3,16
80000960:	f46666e3          	bltu	a2,t1,800008ac <__umoddi3+0x30>
80000964:	01800693          	li	a3,24
80000968:	f45ff06f          	j	800008ac <__umoddi3+0x30>
8000096c:	00000693          	li	a3,0
80000970:	00060c63          	beqz	a2,80000988 <__umoddi3+0x10c>
80000974:	00010737          	lui	a4,0x10
80000978:	06e67e63          	bgeu	a2,a4,800009f4 <__umoddi3+0x178>
8000097c:	10063693          	sltiu	a3,a2,256
80000980:	0016c693          	xori	a3,a3,1
80000984:	00369693          	slli	a3,a3,0x3
80000988:	00d65733          	srl	a4,a2,a3
8000098c:	00e888b3          	add	a7,a7,a4
80000990:	0008c703          	lbu	a4,0(a7)
80000994:	00d70733          	add	a4,a4,a3
80000998:	02000693          	li	a3,32
8000099c:	40e688b3          	sub	a7,a3,a4
800009a0:	06e69463          	bne	a3,a4,80000a08 <__umoddi3+0x18c>
800009a4:	40c58733          	sub	a4,a1,a2
800009a8:	01085593          	srli	a1,a6,0x10
800009ac:	02b75633          	divu	a2,a4,a1
800009b0:	01081513          	slli	a0,a6,0x10
800009b4:	01055513          	srli	a0,a0,0x10
800009b8:	0107d693          	srli	a3,a5,0x10
800009bc:	02b77733          	remu	a4,a4,a1
800009c0:	02a60633          	mul	a2,a2,a0
800009c4:	01071713          	slli	a4,a4,0x10
800009c8:	00e6e733          	or	a4,a3,a4
800009cc:	00c77a63          	bgeu	a4,a2,800009e0 <__umoddi3+0x164>
800009d0:	00e80733          	add	a4,a6,a4
800009d4:	01076663          	bltu	a4,a6,800009e0 <__umoddi3+0x164>
800009d8:	00c77463          	bgeu	a4,a2,800009e0 <__umoddi3+0x164>
800009dc:	01070733          	add	a4,a4,a6
800009e0:	40c70733          	sub	a4,a4,a2
800009e4:	02b756b3          	divu	a3,a4,a1
800009e8:	02b77733          	remu	a4,a4,a1
800009ec:	02a686b3          	mul	a3,a3,a0
800009f0:	f35ff06f          	j	80000924 <__umoddi3+0xa8>
800009f4:	01000737          	lui	a4,0x1000
800009f8:	01000693          	li	a3,16
800009fc:	f8e666e3          	bltu	a2,a4,80000988 <__umoddi3+0x10c>
80000a00:	01800693          	li	a3,24
80000a04:	f85ff06f          	j	80000988 <__umoddi3+0x10c>
80000a08:	01161833          	sll	a6,a2,a7
80000a0c:	00e5d6b3          	srl	a3,a1,a4
80000a10:	011517b3          	sll	a5,a0,a7
80000a14:	011595b3          	sll	a1,a1,a7
80000a18:	00e55733          	srl	a4,a0,a4
80000a1c:	01085513          	srli	a0,a6,0x10
80000a20:	00b76733          	or	a4,a4,a1
80000a24:	02a6d5b3          	divu	a1,a3,a0
80000a28:	01081313          	slli	t1,a6,0x10
80000a2c:	01035313          	srli	t1,t1,0x10
80000a30:	02a6f6b3          	remu	a3,a3,a0
80000a34:	026585b3          	mul	a1,a1,t1
80000a38:	01069613          	slli	a2,a3,0x10
80000a3c:	01075693          	srli	a3,a4,0x10
80000a40:	00c6e6b3          	or	a3,a3,a2
80000a44:	00b6fa63          	bgeu	a3,a1,80000a58 <__umoddi3+0x1dc>
80000a48:	00d806b3          	add	a3,a6,a3
80000a4c:	0106e663          	bltu	a3,a6,80000a58 <__umoddi3+0x1dc>
80000a50:	00b6f463          	bgeu	a3,a1,80000a58 <__umoddi3+0x1dc>
80000a54:	010686b3          	add	a3,a3,a6
80000a58:	40b686b3          	sub	a3,a3,a1
80000a5c:	02a6d633          	divu	a2,a3,a0
80000a60:	01071713          	slli	a4,a4,0x10
80000a64:	01075713          	srli	a4,a4,0x10
80000a68:	02a6f6b3          	remu	a3,a3,a0
80000a6c:	02660633          	mul	a2,a2,t1
80000a70:	01069693          	slli	a3,a3,0x10
80000a74:	00d76733          	or	a4,a4,a3
80000a78:	00c77a63          	bgeu	a4,a2,80000a8c <__umoddi3+0x210>
80000a7c:	00e80733          	add	a4,a6,a4
80000a80:	01076663          	bltu	a4,a6,80000a8c <__umoddi3+0x210>
80000a84:	00c77463          	bgeu	a4,a2,80000a8c <__umoddi3+0x210>
80000a88:	01070733          	add	a4,a4,a6
80000a8c:	40c70733          	sub	a4,a4,a2
80000a90:	f19ff06f          	j	800009a8 <__umoddi3+0x12c>
80000a94:	1cd5e463          	bltu	a1,a3,80000c5c <__umoddi3+0x3e0>
80000a98:	00010837          	lui	a6,0x10
80000a9c:	0506fe63          	bgeu	a3,a6,80000af8 <__umoddi3+0x27c>
80000aa0:	1006b813          	sltiu	a6,a3,256
80000aa4:	00184813          	xori	a6,a6,1
80000aa8:	00381813          	slli	a6,a6,0x3
80000aac:	800288b7          	lui	a7,0x80028
80000ab0:	0106d333          	srl	t1,a3,a6
80000ab4:	da488893          	addi	a7,a7,-604 # 80027da4 <__clz_tab>
80000ab8:	006888b3          	add	a7,a7,t1
80000abc:	0008c883          	lbu	a7,0(a7)
80000ac0:	02000313          	li	t1,32
80000ac4:	010888b3          	add	a7,a7,a6
80000ac8:	41130833          	sub	a6,t1,a7
80000acc:	05131063          	bne	t1,a7,80000b0c <__umoddi3+0x290>
80000ad0:	00b6e463          	bltu	a3,a1,80000ad8 <__umoddi3+0x25c>
80000ad4:	00c56c63          	bltu	a0,a2,80000aec <__umoddi3+0x270>
80000ad8:	40c50633          	sub	a2,a0,a2
80000adc:	40d586b3          	sub	a3,a1,a3
80000ae0:	00c53733          	sltu	a4,a0,a2
80000ae4:	00060793          	mv	a5,a2
80000ae8:	40e68733          	sub	a4,a3,a4
80000aec:	00078513          	mv	a0,a5
80000af0:	00070593          	mv	a1,a4
80000af4:	00008067          	ret
80000af8:	010008b7          	lui	a7,0x1000
80000afc:	01000813          	li	a6,16
80000b00:	fb16e6e3          	bltu	a3,a7,80000aac <__umoddi3+0x230>
80000b04:	01800813          	li	a6,24
80000b08:	fa5ff06f          	j	80000aac <__umoddi3+0x230>
80000b0c:	011657b3          	srl	a5,a2,a7
80000b10:	010696b3          	sll	a3,a3,a6
80000b14:	00d7e6b3          	or	a3,a5,a3
80000b18:	0115d733          	srl	a4,a1,a7
80000b1c:	0106de13          	srli	t3,a3,0x10
80000b20:	03c75f33          	divu	t5,a4,t3
80000b24:	01069313          	slli	t1,a3,0x10
80000b28:	01035313          	srli	t1,t1,0x10
80000b2c:	010597b3          	sll	a5,a1,a6
80000b30:	011555b3          	srl	a1,a0,a7
80000b34:	00f5e5b3          	or	a1,a1,a5
80000b38:	0105d793          	srli	a5,a1,0x10
80000b3c:	01061633          	sll	a2,a2,a6
80000b40:	01051533          	sll	a0,a0,a6
80000b44:	03c77733          	remu	a4,a4,t3
80000b48:	03e30eb3          	mul	t4,t1,t5
80000b4c:	01071713          	slli	a4,a4,0x10
80000b50:	00e7e7b3          	or	a5,a5,a4
80000b54:	000f0713          	mv	a4,t5
80000b58:	01d7fe63          	bgeu	a5,t4,80000b74 <__umoddi3+0x2f8>
80000b5c:	00f687b3          	add	a5,a3,a5
80000b60:	ffff0713          	addi	a4,t5,-1
80000b64:	00d7e863          	bltu	a5,a3,80000b74 <__umoddi3+0x2f8>
80000b68:	01d7f663          	bgeu	a5,t4,80000b74 <__umoddi3+0x2f8>
80000b6c:	ffef0713          	addi	a4,t5,-2
80000b70:	00d787b3          	add	a5,a5,a3
80000b74:	41d787b3          	sub	a5,a5,t4
80000b78:	03c7deb3          	divu	t4,a5,t3
80000b7c:	01059593          	slli	a1,a1,0x10
80000b80:	0105d593          	srli	a1,a1,0x10
80000b84:	03c7f7b3          	remu	a5,a5,t3
80000b88:	000e8e13          	mv	t3,t4
80000b8c:	03d30333          	mul	t1,t1,t4
80000b90:	01079793          	slli	a5,a5,0x10
80000b94:	00f5e5b3          	or	a1,a1,a5
80000b98:	0065fe63          	bgeu	a1,t1,80000bb4 <__umoddi3+0x338>
80000b9c:	00b685b3          	add	a1,a3,a1
80000ba0:	fffe8e13          	addi	t3,t4,-1
80000ba4:	00d5e863          	bltu	a1,a3,80000bb4 <__umoddi3+0x338>
80000ba8:	0065f663          	bgeu	a1,t1,80000bb4 <__umoddi3+0x338>
80000bac:	ffee8e13          	addi	t3,t4,-2
80000bb0:	00d585b3          	add	a1,a1,a3
80000bb4:	01071793          	slli	a5,a4,0x10
80000bb8:	00010f37          	lui	t5,0x10
80000bbc:	01c7e7b3          	or	a5,a5,t3
80000bc0:	406585b3          	sub	a1,a1,t1
80000bc4:	ffff0313          	addi	t1,t5,-1 # ffff <__STACKSIZE__+0xbfff>
80000bc8:	0067f733          	and	a4,a5,t1
80000bcc:	01065e13          	srli	t3,a2,0x10
80000bd0:	0107d793          	srli	a5,a5,0x10
80000bd4:	00667333          	and	t1,a2,t1
80000bd8:	02670eb3          	mul	t4,a4,t1
80000bdc:	02678333          	mul	t1,a5,t1
80000be0:	03c70733          	mul	a4,a4,t3
80000be4:	03c787b3          	mul	a5,a5,t3
80000be8:	00670e33          	add	t3,a4,t1
80000bec:	010ed713          	srli	a4,t4,0x10
80000bf0:	01c70733          	add	a4,a4,t3
80000bf4:	00677463          	bgeu	a4,t1,80000bfc <__umoddi3+0x380>
80000bf8:	01e787b3          	add	a5,a5,t5
80000bfc:	01075313          	srli	t1,a4,0x10
80000c00:	00f307b3          	add	a5,t1,a5
80000c04:	00010337          	lui	t1,0x10
80000c08:	fff30313          	addi	t1,t1,-1 # ffff <__STACKSIZE__+0xbfff>
80000c0c:	00677733          	and	a4,a4,t1
80000c10:	01071713          	slli	a4,a4,0x10
80000c14:	006efeb3          	and	t4,t4,t1
80000c18:	01d70733          	add	a4,a4,t4
80000c1c:	00f5e663          	bltu	a1,a5,80000c28 <__umoddi3+0x3ac>
80000c20:	00f59e63          	bne	a1,a5,80000c3c <__umoddi3+0x3c0>
80000c24:	00e57c63          	bgeu	a0,a4,80000c3c <__umoddi3+0x3c0>
80000c28:	40c70633          	sub	a2,a4,a2
80000c2c:	00c73333          	sltu	t1,a4,a2
80000c30:	00d306b3          	add	a3,t1,a3
80000c34:	00060713          	mv	a4,a2
80000c38:	40d787b3          	sub	a5,a5,a3
80000c3c:	40e50733          	sub	a4,a0,a4
80000c40:	00e53533          	sltu	a0,a0,a4
80000c44:	40f585b3          	sub	a1,a1,a5
80000c48:	40a585b3          	sub	a1,a1,a0
80000c4c:	011598b3          	sll	a7,a1,a7
80000c50:	01075733          	srl	a4,a4,a6
80000c54:	00e8e533          	or	a0,a7,a4
80000c58:	0105d5b3          	srl	a1,a1,a6
80000c5c:	00008067          	ret

80000c60 <__adddf3>:
80000c60:	00100837          	lui	a6,0x100
80000c64:	fff80813          	addi	a6,a6,-1 # fffff <__STACKSIZE__+0xfbfff>
80000c68:	fe010113          	addi	sp,sp,-32
80000c6c:	00b877b3          	and	a5,a6,a1
80000c70:	00379793          	slli	a5,a5,0x3
80000c74:	01d55713          	srli	a4,a0,0x1d
80000c78:	00d87833          	and	a6,a6,a3
80000c7c:	0146d893          	srli	a7,a3,0x14
80000c80:	00812c23          	sw	s0,24(sp)
80000c84:	0145d413          	srli	s0,a1,0x14
80000c88:	00381813          	slli	a6,a6,0x3
80000c8c:	01212823          	sw	s2,16(sp)
80000c90:	7ff47413          	andi	s0,s0,2047
80000c94:	00f76733          	or	a4,a4,a5
80000c98:	7ff8f893          	andi	a7,a7,2047
80000c9c:	01d65793          	srli	a5,a2,0x1d
80000ca0:	00112e23          	sw	ra,28(sp)
80000ca4:	00912a23          	sw	s1,20(sp)
80000ca8:	01312623          	sw	s3,12(sp)
80000cac:	01f5d913          	srli	s2,a1,0x1f
80000cb0:	01f6d693          	srli	a3,a3,0x1f
80000cb4:	0107e7b3          	or	a5,a5,a6
80000cb8:	00351513          	slli	a0,a0,0x3
80000cbc:	00361613          	slli	a2,a2,0x3
80000cc0:	41140833          	sub	a6,s0,a7
80000cc4:	2ad91463          	bne	s2,a3,80000f6c <__adddf3+0x30c>
80000cc8:	11005e63          	blez	a6,80000de4 <__adddf3+0x184>
80000ccc:	04089063          	bnez	a7,80000d0c <__adddf3+0xac>
80000cd0:	00c7e6b3          	or	a3,a5,a2
80000cd4:	6c068863          	beqz	a3,800013a4 <__adddf3+0x744>
80000cd8:	fff80593          	addi	a1,a6,-1
80000cdc:	00059e63          	bnez	a1,80000cf8 <__adddf3+0x98>
80000ce0:	00c50633          	add	a2,a0,a2
80000ce4:	00f70733          	add	a4,a4,a5
80000ce8:	00a63533          	sltu	a0,a2,a0
80000cec:	00a707b3          	add	a5,a4,a0
80000cf0:	00100413          	li	s0,1
80000cf4:	0740006f          	j	80000d68 <__adddf3+0x108>
80000cf8:	7ff00693          	li	a3,2047
80000cfc:	02d81263          	bne	a6,a3,80000d20 <__adddf3+0xc0>
80000d00:	00070793          	mv	a5,a4
80000d04:	00050613          	mv	a2,a0
80000d08:	1000006f          	j	80000e08 <__adddf3+0x1a8>
80000d0c:	7ff00693          	li	a3,2047
80000d10:	6ad40663          	beq	s0,a3,800013bc <__adddf3+0x75c>
80000d14:	008006b7          	lui	a3,0x800
80000d18:	00d7e7b3          	or	a5,a5,a3
80000d1c:	00080593          	mv	a1,a6
80000d20:	03800693          	li	a3,56
80000d24:	0ab6ca63          	blt	a3,a1,80000dd8 <__adddf3+0x178>
80000d28:	01f00693          	li	a3,31
80000d2c:	06b6cc63          	blt	a3,a1,80000da4 <__adddf3+0x144>
80000d30:	02000813          	li	a6,32
80000d34:	40b80833          	sub	a6,a6,a1
80000d38:	010796b3          	sll	a3,a5,a6
80000d3c:	00b658b3          	srl	a7,a2,a1
80000d40:	01061833          	sll	a6,a2,a6
80000d44:	0116e6b3          	or	a3,a3,a7
80000d48:	01003833          	snez	a6,a6
80000d4c:	0106e6b3          	or	a3,a3,a6
80000d50:	00b7d5b3          	srl	a1,a5,a1
80000d54:	00a68533          	add	a0,a3,a0
80000d58:	00e585b3          	add	a1,a1,a4
80000d5c:	00d536b3          	sltu	a3,a0,a3
80000d60:	00050613          	mv	a2,a0
80000d64:	00d587b3          	add	a5,a1,a3
80000d68:	00879713          	slli	a4,a5,0x8
80000d6c:	18075663          	bgez	a4,80000ef8 <__adddf3+0x298>
80000d70:	00140413          	addi	s0,s0,1
80000d74:	7ff00713          	li	a4,2047
80000d78:	58e40863          	beq	s0,a4,80001308 <__adddf3+0x6a8>
80000d7c:	ff800737          	lui	a4,0xff800
80000d80:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_end+0x7f779843>
80000d84:	00e7f7b3          	and	a5,a5,a4
80000d88:	00165713          	srli	a4,a2,0x1
80000d8c:	00167613          	andi	a2,a2,1
80000d90:	00c76733          	or	a4,a4,a2
80000d94:	01f79613          	slli	a2,a5,0x1f
80000d98:	00e66633          	or	a2,a2,a4
80000d9c:	0017d793          	srli	a5,a5,0x1
80000da0:	1580006f          	j	80000ef8 <__adddf3+0x298>
80000da4:	fe058693          	addi	a3,a1,-32
80000da8:	02000893          	li	a7,32
80000dac:	00d7d6b3          	srl	a3,a5,a3
80000db0:	00000813          	li	a6,0
80000db4:	01158863          	beq	a1,a7,80000dc4 <__adddf3+0x164>
80000db8:	04000813          	li	a6,64
80000dbc:	40b80833          	sub	a6,a6,a1
80000dc0:	01079833          	sll	a6,a5,a6
80000dc4:	00c86833          	or	a6,a6,a2
80000dc8:	01003833          	snez	a6,a6
80000dcc:	0106e6b3          	or	a3,a3,a6
80000dd0:	00000593          	li	a1,0
80000dd4:	f81ff06f          	j	80000d54 <__adddf3+0xf4>
80000dd8:	00c7e6b3          	or	a3,a5,a2
80000ddc:	00d036b3          	snez	a3,a3
80000de0:	ff1ff06f          	j	80000dd0 <__adddf3+0x170>
80000de4:	0c080663          	beqz	a6,80000eb0 <__adddf3+0x250>
80000de8:	408886b3          	sub	a3,a7,s0
80000dec:	02041263          	bnez	s0,80000e10 <__adddf3+0x1b0>
80000df0:	00a765b3          	or	a1,a4,a0
80000df4:	16058863          	beqz	a1,80000f64 <__adddf3+0x304>
80000df8:	fff68593          	addi	a1,a3,-1 # 7fffff <__STACKSIZE__+0x7fbfff>
80000dfc:	ee0582e3          	beqz	a1,80000ce0 <__adddf3+0x80>
80000e00:	7ff00813          	li	a6,2047
80000e04:	03069063          	bne	a3,a6,80000e24 <__adddf3+0x1c4>
80000e08:	7ff00413          	li	s0,2047
80000e0c:	0ec0006f          	j	80000ef8 <__adddf3+0x298>
80000e10:	7ff00593          	li	a1,2047
80000e14:	feb88ae3          	beq	a7,a1,80000e08 <__adddf3+0x1a8>
80000e18:	008005b7          	lui	a1,0x800
80000e1c:	00b76733          	or	a4,a4,a1
80000e20:	00068593          	mv	a1,a3
80000e24:	03800693          	li	a3,56
80000e28:	06b6ce63          	blt	a3,a1,80000ea4 <__adddf3+0x244>
80000e2c:	01f00693          	li	a3,31
80000e30:	04b6c063          	blt	a3,a1,80000e70 <__adddf3+0x210>
80000e34:	02000813          	li	a6,32
80000e38:	40b80833          	sub	a6,a6,a1
80000e3c:	010716b3          	sll	a3,a4,a6
80000e40:	00b55333          	srl	t1,a0,a1
80000e44:	01051833          	sll	a6,a0,a6
80000e48:	0066e6b3          	or	a3,a3,t1
80000e4c:	01003833          	snez	a6,a6
80000e50:	0106e6b3          	or	a3,a3,a6
80000e54:	00b755b3          	srl	a1,a4,a1
80000e58:	00c68633          	add	a2,a3,a2
80000e5c:	00f585b3          	add	a1,a1,a5
80000e60:	00d636b3          	sltu	a3,a2,a3
80000e64:	00d587b3          	add	a5,a1,a3
80000e68:	00088413          	mv	s0,a7
80000e6c:	efdff06f          	j	80000d68 <__adddf3+0x108>
80000e70:	fe058693          	addi	a3,a1,-32 # 7fffe0 <__STACKSIZE__+0x7fbfe0>
80000e74:	02000313          	li	t1,32
80000e78:	00d756b3          	srl	a3,a4,a3
80000e7c:	00000813          	li	a6,0
80000e80:	00658863          	beq	a1,t1,80000e90 <__adddf3+0x230>
80000e84:	04000813          	li	a6,64
80000e88:	40b80833          	sub	a6,a6,a1
80000e8c:	01071833          	sll	a6,a4,a6
80000e90:	00a86833          	or	a6,a6,a0
80000e94:	01003833          	snez	a6,a6
80000e98:	0106e6b3          	or	a3,a3,a6
80000e9c:	00000593          	li	a1,0
80000ea0:	fb9ff06f          	j	80000e58 <__adddf3+0x1f8>
80000ea4:	00a766b3          	or	a3,a4,a0
80000ea8:	00d036b3          	snez	a3,a3
80000eac:	ff1ff06f          	j	80000e9c <__adddf3+0x23c>
80000eb0:	00140693          	addi	a3,s0,1
80000eb4:	7fe6f593          	andi	a1,a3,2046
80000eb8:	08059263          	bnez	a1,80000f3c <__adddf3+0x2dc>
80000ebc:	00a766b3          	or	a3,a4,a0
80000ec0:	06041063          	bnez	s0,80000f20 <__adddf3+0x2c0>
80000ec4:	02068a63          	beqz	a3,80000ef8 <__adddf3+0x298>
80000ec8:	00c7e6b3          	or	a3,a5,a2
80000ecc:	4e068863          	beqz	a3,800013bc <__adddf3+0x75c>
80000ed0:	00c50633          	add	a2,a0,a2
80000ed4:	00f70733          	add	a4,a4,a5
80000ed8:	00a63533          	sltu	a0,a2,a0
80000edc:	00a707b3          	add	a5,a4,a0
80000ee0:	00879713          	slli	a4,a5,0x8
80000ee4:	00075a63          	bgez	a4,80000ef8 <__adddf3+0x298>
80000ee8:	ff800737          	lui	a4,0xff800
80000eec:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_end+0x7f779843>
80000ef0:	00e7f7b3          	and	a5,a5,a4
80000ef4:	00100413          	li	s0,1
80000ef8:	00767713          	andi	a4,a2,7
80000efc:	40070a63          	beqz	a4,80001310 <__adddf3+0x6b0>
80000f00:	00f67713          	andi	a4,a2,15
80000f04:	00400693          	li	a3,4
80000f08:	40d70463          	beq	a4,a3,80001310 <__adddf3+0x6b0>
80000f0c:	00460713          	addi	a4,a2,4
80000f10:	00c736b3          	sltu	a3,a4,a2
80000f14:	00d787b3          	add	a5,a5,a3
80000f18:	00070613          	mv	a2,a4
80000f1c:	3f40006f          	j	80001310 <__adddf3+0x6b0>
80000f20:	ee0684e3          	beqz	a3,80000e08 <__adddf3+0x1a8>
80000f24:	00c7e7b3          	or	a5,a5,a2
80000f28:	dc078ce3          	beqz	a5,80000d00 <__adddf3+0xa0>
80000f2c:	00000913          	li	s2,0
80000f30:	004007b7          	lui	a5,0x400
80000f34:	00000613          	li	a2,0
80000f38:	2a40006f          	j	800011dc <__adddf3+0x57c>
80000f3c:	7ff00593          	li	a1,2047
80000f40:	3cb68263          	beq	a3,a1,80001304 <__adddf3+0x6a4>
80000f44:	00c50633          	add	a2,a0,a2
80000f48:	00f70733          	add	a4,a4,a5
80000f4c:	00a63533          	sltu	a0,a2,a0
80000f50:	00a70733          	add	a4,a4,a0
80000f54:	01f71793          	slli	a5,a4,0x1f
80000f58:	00165613          	srli	a2,a2,0x1
80000f5c:	00c7e633          	or	a2,a5,a2
80000f60:	00175793          	srli	a5,a4,0x1
80000f64:	00068413          	mv	s0,a3
80000f68:	f91ff06f          	j	80000ef8 <__adddf3+0x298>
80000f6c:	0f005863          	blez	a6,8000105c <__adddf3+0x3fc>
80000f70:	08089a63          	bnez	a7,80001004 <__adddf3+0x3a4>
80000f74:	00c7e6b3          	or	a3,a5,a2
80000f78:	42068663          	beqz	a3,800013a4 <__adddf3+0x744>
80000f7c:	fff80693          	addi	a3,a6,-1
80000f80:	00069e63          	bnez	a3,80000f9c <__adddf3+0x33c>
80000f84:	40c50633          	sub	a2,a0,a2
80000f88:	40f70733          	sub	a4,a4,a5
80000f8c:	00c53533          	sltu	a0,a0,a2
80000f90:	40a707b3          	sub	a5,a4,a0
80000f94:	00100413          	li	s0,1
80000f98:	0500006f          	j	80000fe8 <__adddf3+0x388>
80000f9c:	7ff00593          	li	a1,2047
80000fa0:	d6b800e3          	beq	a6,a1,80000d00 <__adddf3+0xa0>
80000fa4:	03800593          	li	a1,56
80000fa8:	0ad5c463          	blt	a1,a3,80001050 <__adddf3+0x3f0>
80000fac:	01f00593          	li	a1,31
80000fb0:	06d5c663          	blt	a1,a3,8000101c <__adddf3+0x3bc>
80000fb4:	02000813          	li	a6,32
80000fb8:	40d80833          	sub	a6,a6,a3
80000fbc:	00d658b3          	srl	a7,a2,a3
80000fc0:	010795b3          	sll	a1,a5,a6
80000fc4:	01061833          	sll	a6,a2,a6
80000fc8:	0115e5b3          	or	a1,a1,a7
80000fcc:	01003833          	snez	a6,a6
80000fd0:	0105e633          	or	a2,a1,a6
80000fd4:	00d7d6b3          	srl	a3,a5,a3
80000fd8:	40c50633          	sub	a2,a0,a2
80000fdc:	40d706b3          	sub	a3,a4,a3
80000fe0:	00c53533          	sltu	a0,a0,a2
80000fe4:	40a687b3          	sub	a5,a3,a0
80000fe8:	00879713          	slli	a4,a5,0x8
80000fec:	f00756e3          	bgez	a4,80000ef8 <__adddf3+0x298>
80000ff0:	008004b7          	lui	s1,0x800
80000ff4:	fff48493          	addi	s1,s1,-1 # 7fffff <__STACKSIZE__+0x7fbfff>
80000ff8:	0097f4b3          	and	s1,a5,s1
80000ffc:	00060993          	mv	s3,a2
80001000:	21c0006f          	j	8000121c <__adddf3+0x5bc>
80001004:	7ff00693          	li	a3,2047
80001008:	3ad40a63          	beq	s0,a3,800013bc <__adddf3+0x75c>
8000100c:	008006b7          	lui	a3,0x800
80001010:	00d7e7b3          	or	a5,a5,a3
80001014:	00080693          	mv	a3,a6
80001018:	f8dff06f          	j	80000fa4 <__adddf3+0x344>
8000101c:	fe068593          	addi	a1,a3,-32 # 7fffe0 <__STACKSIZE__+0x7fbfe0>
80001020:	02000893          	li	a7,32
80001024:	00b7d5b3          	srl	a1,a5,a1
80001028:	00000813          	li	a6,0
8000102c:	01168863          	beq	a3,a7,8000103c <__adddf3+0x3dc>
80001030:	04000813          	li	a6,64
80001034:	40d80833          	sub	a6,a6,a3
80001038:	01079833          	sll	a6,a5,a6
8000103c:	00c86833          	or	a6,a6,a2
80001040:	01003833          	snez	a6,a6
80001044:	0105e633          	or	a2,a1,a6
80001048:	00000693          	li	a3,0
8000104c:	f8dff06f          	j	80000fd8 <__adddf3+0x378>
80001050:	00c7e633          	or	a2,a5,a2
80001054:	00c03633          	snez	a2,a2
80001058:	ff1ff06f          	j	80001048 <__adddf3+0x3e8>
8000105c:	0e080863          	beqz	a6,8000114c <__adddf3+0x4ec>
80001060:	40888833          	sub	a6,a7,s0
80001064:	04041063          	bnez	s0,800010a4 <__adddf3+0x444>
80001068:	00a765b3          	or	a1,a4,a0
8000106c:	34058463          	beqz	a1,800013b4 <__adddf3+0x754>
80001070:	fff80593          	addi	a1,a6,-1
80001074:	02059063          	bnez	a1,80001094 <__adddf3+0x434>
80001078:	40a60533          	sub	a0,a2,a0
8000107c:	00a635b3          	sltu	a1,a2,a0
80001080:	40e78733          	sub	a4,a5,a4
80001084:	00050613          	mv	a2,a0
80001088:	40b707b3          	sub	a5,a4,a1
8000108c:	00068913          	mv	s2,a3
80001090:	f05ff06f          	j	80000f94 <__adddf3+0x334>
80001094:	7ff00313          	li	t1,2047
80001098:	02681063          	bne	a6,t1,800010b8 <__adddf3+0x458>
8000109c:	7ff00413          	li	s0,2047
800010a0:	10c0006f          	j	800011ac <__adddf3+0x54c>
800010a4:	7ff00593          	li	a1,2047
800010a8:	feb88ae3          	beq	a7,a1,8000109c <__adddf3+0x43c>
800010ac:	008005b7          	lui	a1,0x800
800010b0:	00b76733          	or	a4,a4,a1
800010b4:	00080593          	mv	a1,a6
800010b8:	03800813          	li	a6,56
800010bc:	08b84263          	blt	a6,a1,80001140 <__adddf3+0x4e0>
800010c0:	01f00813          	li	a6,31
800010c4:	04b84463          	blt	a6,a1,8000110c <__adddf3+0x4ac>
800010c8:	02000313          	li	t1,32
800010cc:	40b30333          	sub	t1,t1,a1
800010d0:	00b55e33          	srl	t3,a0,a1
800010d4:	00671833          	sll	a6,a4,t1
800010d8:	00651333          	sll	t1,a0,t1
800010dc:	01c86833          	or	a6,a6,t3
800010e0:	00603333          	snez	t1,t1
800010e4:	00686533          	or	a0,a6,t1
800010e8:	00b755b3          	srl	a1,a4,a1
800010ec:	40a60533          	sub	a0,a2,a0
800010f0:	00a63733          	sltu	a4,a2,a0
800010f4:	40b785b3          	sub	a1,a5,a1
800010f8:	00050613          	mv	a2,a0
800010fc:	40e587b3          	sub	a5,a1,a4
80001100:	00088413          	mv	s0,a7
80001104:	00068913          	mv	s2,a3
80001108:	ee1ff06f          	j	80000fe8 <__adddf3+0x388>
8000110c:	fe058813          	addi	a6,a1,-32 # 7fffe0 <__STACKSIZE__+0x7fbfe0>
80001110:	02000e13          	li	t3,32
80001114:	01075833          	srl	a6,a4,a6
80001118:	00000313          	li	t1,0
8000111c:	01c58863          	beq	a1,t3,8000112c <__adddf3+0x4cc>
80001120:	04000313          	li	t1,64
80001124:	40b30333          	sub	t1,t1,a1
80001128:	00671333          	sll	t1,a4,t1
8000112c:	00a36333          	or	t1,t1,a0
80001130:	00603333          	snez	t1,t1
80001134:	00686533          	or	a0,a6,t1
80001138:	00000593          	li	a1,0
8000113c:	fb1ff06f          	j	800010ec <__adddf3+0x48c>
80001140:	00a76533          	or	a0,a4,a0
80001144:	00a03533          	snez	a0,a0
80001148:	ff1ff06f          	j	80001138 <__adddf3+0x4d8>
8000114c:	00140593          	addi	a1,s0,1
80001150:	7fe5f593          	andi	a1,a1,2046
80001154:	08059c63          	bnez	a1,800011ec <__adddf3+0x58c>
80001158:	00a76833          	or	a6,a4,a0
8000115c:	00c7e5b3          	or	a1,a5,a2
80001160:	06041463          	bnez	s0,800011c8 <__adddf3+0x568>
80001164:	00081c63          	bnez	a6,8000117c <__adddf3+0x51c>
80001168:	04059263          	bnez	a1,800011ac <__adddf3+0x54c>
8000116c:	00000793          	li	a5,0
80001170:	00000613          	li	a2,0
80001174:	00000913          	li	s2,0
80001178:	1980006f          	j	80001310 <__adddf3+0x6b0>
8000117c:	24058063          	beqz	a1,800013bc <__adddf3+0x75c>
80001180:	40c50833          	sub	a6,a0,a2
80001184:	010538b3          	sltu	a7,a0,a6
80001188:	40f705b3          	sub	a1,a4,a5
8000118c:	411585b3          	sub	a1,a1,a7
80001190:	00859893          	slli	a7,a1,0x8
80001194:	0208d063          	bgez	a7,800011b4 <__adddf3+0x554>
80001198:	40a60533          	sub	a0,a2,a0
8000119c:	00a635b3          	sltu	a1,a2,a0
800011a0:	40e78733          	sub	a4,a5,a4
800011a4:	00050613          	mv	a2,a0
800011a8:	40b707b3          	sub	a5,a4,a1
800011ac:	00068913          	mv	s2,a3
800011b0:	d49ff06f          	j	80000ef8 <__adddf3+0x298>
800011b4:	00b86633          	or	a2,a6,a1
800011b8:	20060863          	beqz	a2,800013c8 <__adddf3+0x768>
800011bc:	00058793          	mv	a5,a1
800011c0:	00080613          	mv	a2,a6
800011c4:	d35ff06f          	j	80000ef8 <__adddf3+0x298>
800011c8:	00081e63          	bnez	a6,800011e4 <__adddf3+0x584>
800011cc:	20059263          	bnez	a1,800013d0 <__adddf3+0x770>
800011d0:	00000613          	li	a2,0
800011d4:	00000913          	li	s2,0
800011d8:	004007b7          	lui	a5,0x400
800011dc:	7ff00413          	li	s0,2047
800011e0:	1300006f          	j	80001310 <__adddf3+0x6b0>
800011e4:	d40594e3          	bnez	a1,80000f2c <__adddf3+0x2cc>
800011e8:	b19ff06f          	j	80000d00 <__adddf3+0xa0>
800011ec:	40c505b3          	sub	a1,a0,a2
800011f0:	00b53833          	sltu	a6,a0,a1
800011f4:	40f704b3          	sub	s1,a4,a5
800011f8:	410484b3          	sub	s1,s1,a6
800011fc:	00849813          	slli	a6,s1,0x8
80001200:	00058993          	mv	s3,a1
80001204:	08085063          	bgez	a6,80001284 <__adddf3+0x624>
80001208:	40a609b3          	sub	s3,a2,a0
8000120c:	40e784b3          	sub	s1,a5,a4
80001210:	01363633          	sltu	a2,a2,s3
80001214:	40c484b3          	sub	s1,s1,a2
80001218:	00068913          	mv	s2,a3
8000121c:	06048e63          	beqz	s1,80001298 <__adddf3+0x638>
80001220:	00048513          	mv	a0,s1
80001224:	690040ef          	jal	ra,800058b4 <__clzsi2>
80001228:	ff850613          	addi	a2,a0,-8
8000122c:	02000793          	li	a5,32
80001230:	40c787b3          	sub	a5,a5,a2
80001234:	00c494b3          	sll	s1,s1,a2
80001238:	00f9d7b3          	srl	a5,s3,a5
8000123c:	0097e7b3          	or	a5,a5,s1
80001240:	00c994b3          	sll	s1,s3,a2
80001244:	0a864463          	blt	a2,s0,800012ec <__adddf3+0x68c>
80001248:	40860633          	sub	a2,a2,s0
8000124c:	00160693          	addi	a3,a2,1
80001250:	01f00713          	li	a4,31
80001254:	06d74263          	blt	a4,a3,800012b8 <__adddf3+0x658>
80001258:	02000713          	li	a4,32
8000125c:	40d70733          	sub	a4,a4,a3
80001260:	00e79633          	sll	a2,a5,a4
80001264:	00d4d5b3          	srl	a1,s1,a3
80001268:	00e49733          	sll	a4,s1,a4
8000126c:	00b66633          	or	a2,a2,a1
80001270:	00e03733          	snez	a4,a4
80001274:	00e66633          	or	a2,a2,a4
80001278:	00d7d7b3          	srl	a5,a5,a3
8000127c:	00000413          	li	s0,0
80001280:	c79ff06f          	j	80000ef8 <__adddf3+0x298>
80001284:	0095e633          	or	a2,a1,s1
80001288:	f8061ae3          	bnez	a2,8000121c <__adddf3+0x5bc>
8000128c:	00000793          	li	a5,0
80001290:	00000413          	li	s0,0
80001294:	ee1ff06f          	j	80001174 <__adddf3+0x514>
80001298:	00098513          	mv	a0,s3
8000129c:	618040ef          	jal	ra,800058b4 <__clzsi2>
800012a0:	01850613          	addi	a2,a0,24
800012a4:	01f00793          	li	a5,31
800012a8:	f8c7d2e3          	bge	a5,a2,8000122c <__adddf3+0x5cc>
800012ac:	ff850793          	addi	a5,a0,-8
800012b0:	00f997b3          	sll	a5,s3,a5
800012b4:	f91ff06f          	j	80001244 <__adddf3+0x5e4>
800012b8:	fe160613          	addi	a2,a2,-31
800012bc:	02000593          	li	a1,32
800012c0:	00c7d633          	srl	a2,a5,a2
800012c4:	00000713          	li	a4,0
800012c8:	00b68863          	beq	a3,a1,800012d8 <__adddf3+0x678>
800012cc:	04000713          	li	a4,64
800012d0:	40d70733          	sub	a4,a4,a3
800012d4:	00e79733          	sll	a4,a5,a4
800012d8:	00e4e733          	or	a4,s1,a4
800012dc:	00e03733          	snez	a4,a4
800012e0:	00e66633          	or	a2,a2,a4
800012e4:	00000793          	li	a5,0
800012e8:	f95ff06f          	j	8000127c <__adddf3+0x61c>
800012ec:	ff800737          	lui	a4,0xff800
800012f0:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_end+0x7f779843>
800012f4:	40c40433          	sub	s0,s0,a2
800012f8:	00e7f7b3          	and	a5,a5,a4
800012fc:	00048613          	mv	a2,s1
80001300:	bf9ff06f          	j	80000ef8 <__adddf3+0x298>
80001304:	7ff00413          	li	s0,2047
80001308:	00000793          	li	a5,0
8000130c:	00000613          	li	a2,0
80001310:	00879713          	slli	a4,a5,0x8
80001314:	00075e63          	bgez	a4,80001330 <__adddf3+0x6d0>
80001318:	00140413          	addi	s0,s0,1
8000131c:	7ff00713          	li	a4,2047
80001320:	0ae40c63          	beq	s0,a4,800013d8 <__adddf3+0x778>
80001324:	ff800737          	lui	a4,0xff800
80001328:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_end+0x7f779843>
8000132c:	00e7f7b3          	and	a5,a5,a4
80001330:	01d79713          	slli	a4,a5,0x1d
80001334:	00365613          	srli	a2,a2,0x3
80001338:	7ff00693          	li	a3,2047
8000133c:	00c76733          	or	a4,a4,a2
80001340:	0037d793          	srli	a5,a5,0x3
80001344:	00d41e63          	bne	s0,a3,80001360 <__adddf3+0x700>
80001348:	00f76733          	or	a4,a4,a5
8000134c:	00000793          	li	a5,0
80001350:	00070863          	beqz	a4,80001360 <__adddf3+0x700>
80001354:	000807b7          	lui	a5,0x80
80001358:	00000713          	li	a4,0
8000135c:	00000913          	li	s2,0
80001360:	7ff006b7          	lui	a3,0x7ff00
80001364:	01441413          	slli	s0,s0,0x14
80001368:	00c79793          	slli	a5,a5,0xc
8000136c:	00d47433          	and	s0,s0,a3
80001370:	00c7d793          	srli	a5,a5,0xc
80001374:	00f46433          	or	s0,s0,a5
80001378:	01f91793          	slli	a5,s2,0x1f
8000137c:	01c12083          	lw	ra,28(sp)
80001380:	00f466b3          	or	a3,s0,a5
80001384:	01812403          	lw	s0,24(sp)
80001388:	01412483          	lw	s1,20(sp)
8000138c:	01012903          	lw	s2,16(sp)
80001390:	00c12983          	lw	s3,12(sp)
80001394:	00070513          	mv	a0,a4
80001398:	00068593          	mv	a1,a3
8000139c:	02010113          	addi	sp,sp,32
800013a0:	00008067          	ret
800013a4:	00070793          	mv	a5,a4
800013a8:	00050613          	mv	a2,a0
800013ac:	00080413          	mv	s0,a6
800013b0:	b49ff06f          	j	80000ef8 <__adddf3+0x298>
800013b4:	00080413          	mv	s0,a6
800013b8:	df5ff06f          	j	800011ac <__adddf3+0x54c>
800013bc:	00070793          	mv	a5,a4
800013c0:	00050613          	mv	a2,a0
800013c4:	b35ff06f          	j	80000ef8 <__adddf3+0x298>
800013c8:	00000793          	li	a5,0
800013cc:	da9ff06f          	j	80001174 <__adddf3+0x514>
800013d0:	00068913          	mv	s2,a3
800013d4:	a35ff06f          	j	80000e08 <__adddf3+0x1a8>
800013d8:	00000793          	li	a5,0
800013dc:	00000613          	li	a2,0
800013e0:	f51ff06f          	j	80001330 <__adddf3+0x6d0>

800013e4 <__divdf3>:
800013e4:	fd010113          	addi	sp,sp,-48
800013e8:	0145d813          	srli	a6,a1,0x14
800013ec:	02912223          	sw	s1,36(sp)
800013f0:	03212023          	sw	s2,32(sp)
800013f4:	01312e23          	sw	s3,28(sp)
800013f8:	01612823          	sw	s6,16(sp)
800013fc:	01712623          	sw	s7,12(sp)
80001400:	00c59493          	slli	s1,a1,0xc
80001404:	02112623          	sw	ra,44(sp)
80001408:	02812423          	sw	s0,40(sp)
8000140c:	01412c23          	sw	s4,24(sp)
80001410:	01512a23          	sw	s5,20(sp)
80001414:	7ff87813          	andi	a6,a6,2047
80001418:	00050b13          	mv	s6,a0
8000141c:	00060b93          	mv	s7,a2
80001420:	00068913          	mv	s2,a3
80001424:	00c4d493          	srli	s1,s1,0xc
80001428:	01f5d993          	srli	s3,a1,0x1f
8000142c:	0a080063          	beqz	a6,800014cc <__divdf3+0xe8>
80001430:	7ff00793          	li	a5,2047
80001434:	10f80063          	beq	a6,a5,80001534 <__divdf3+0x150>
80001438:	01d55a13          	srli	s4,a0,0x1d
8000143c:	00349493          	slli	s1,s1,0x3
80001440:	009a6a33          	or	s4,s4,s1
80001444:	008007b7          	lui	a5,0x800
80001448:	00fa6a33          	or	s4,s4,a5
8000144c:	00351413          	slli	s0,a0,0x3
80001450:	c0180a93          	addi	s5,a6,-1023
80001454:	00000b13          	li	s6,0
80001458:	01495713          	srli	a4,s2,0x14
8000145c:	00c91493          	slli	s1,s2,0xc
80001460:	7ff77713          	andi	a4,a4,2047
80001464:	00c4d493          	srli	s1,s1,0xc
80001468:	01f95913          	srli	s2,s2,0x1f
8000146c:	10070263          	beqz	a4,80001570 <__divdf3+0x18c>
80001470:	7ff00793          	li	a5,2047
80001474:	16f70663          	beq	a4,a5,800015e0 <__divdf3+0x1fc>
80001478:	00349493          	slli	s1,s1,0x3
8000147c:	01dbd793          	srli	a5,s7,0x1d
80001480:	0097e7b3          	or	a5,a5,s1
80001484:	008004b7          	lui	s1,0x800
80001488:	0097e4b3          	or	s1,a5,s1
8000148c:	003b9f13          	slli	t5,s7,0x3
80001490:	c0170713          	addi	a4,a4,-1023
80001494:	00000793          	li	a5,0
80001498:	40ea8833          	sub	a6,s5,a4
8000149c:	002b1713          	slli	a4,s6,0x2
800014a0:	00f76733          	or	a4,a4,a5
800014a4:	fff70713          	addi	a4,a4,-1
800014a8:	00e00693          	li	a3,14
800014ac:	0129c633          	xor	a2,s3,s2
800014b0:	16e6e463          	bltu	a3,a4,80001618 <__divdf3+0x234>
800014b4:	800286b7          	lui	a3,0x80028
800014b8:	00271713          	slli	a4,a4,0x2
800014bc:	d6868693          	addi	a3,a3,-664 # 80027d68 <raise+0x2174>
800014c0:	00d70733          	add	a4,a4,a3
800014c4:	00072703          	lw	a4,0(a4)
800014c8:	00070067          	jr	a4
800014cc:	00a4ea33          	or	s4,s1,a0
800014d0:	080a0063          	beqz	s4,80001550 <__divdf3+0x16c>
800014d4:	02048e63          	beqz	s1,80001510 <__divdf3+0x12c>
800014d8:	00048513          	mv	a0,s1
800014dc:	3d8040ef          	jal	ra,800058b4 <__clzsi2>
800014e0:	ff550793          	addi	a5,a0,-11
800014e4:	01d00a13          	li	s4,29
800014e8:	ff850713          	addi	a4,a0,-8
800014ec:	40fa0a33          	sub	s4,s4,a5
800014f0:	00e494b3          	sll	s1,s1,a4
800014f4:	014b5a33          	srl	s4,s6,s4
800014f8:	009a6a33          	or	s4,s4,s1
800014fc:	00eb14b3          	sll	s1,s6,a4
80001500:	c0d00813          	li	a6,-1011
80001504:	40a80ab3          	sub	s5,a6,a0
80001508:	00048413          	mv	s0,s1
8000150c:	f49ff06f          	j	80001454 <__divdf3+0x70>
80001510:	3a4040ef          	jal	ra,800058b4 <__clzsi2>
80001514:	00050a13          	mv	s4,a0
80001518:	015a0793          	addi	a5,s4,21
8000151c:	01c00713          	li	a4,28
80001520:	02050513          	addi	a0,a0,32
80001524:	fcf750e3          	bge	a4,a5,800014e4 <__divdf3+0x100>
80001528:	ff8a0a13          	addi	s4,s4,-8
8000152c:	014b1a33          	sll	s4,s6,s4
80001530:	fd1ff06f          	j	80001500 <__divdf3+0x11c>
80001534:	00a4ea33          	or	s4,s1,a0
80001538:	020a0463          	beqz	s4,80001560 <__divdf3+0x17c>
8000153c:	00050413          	mv	s0,a0
80001540:	00048a13          	mv	s4,s1
80001544:	7ff00a93          	li	s5,2047
80001548:	00300b13          	li	s6,3
8000154c:	f0dff06f          	j	80001458 <__divdf3+0x74>
80001550:	00000413          	li	s0,0
80001554:	00000a93          	li	s5,0
80001558:	00100b13          	li	s6,1
8000155c:	efdff06f          	j	80001458 <__divdf3+0x74>
80001560:	00000413          	li	s0,0
80001564:	7ff00a93          	li	s5,2047
80001568:	00200b13          	li	s6,2
8000156c:	eedff06f          	j	80001458 <__divdf3+0x74>
80001570:	0174ef33          	or	t5,s1,s7
80001574:	080f0263          	beqz	t5,800015f8 <__divdf3+0x214>
80001578:	04048063          	beqz	s1,800015b8 <__divdf3+0x1d4>
8000157c:	00048513          	mv	a0,s1
80001580:	334040ef          	jal	ra,800058b4 <__clzsi2>
80001584:	ff550713          	addi	a4,a0,-11
80001588:	01d00793          	li	a5,29
8000158c:	ff850693          	addi	a3,a0,-8
80001590:	40e787b3          	sub	a5,a5,a4
80001594:	00d494b3          	sll	s1,s1,a3
80001598:	00fbd7b3          	srl	a5,s7,a5
8000159c:	0097e7b3          	or	a5,a5,s1
800015a0:	00db94b3          	sll	s1,s7,a3
800015a4:	c0d00713          	li	a4,-1011
800015a8:	00048f13          	mv	t5,s1
800015ac:	40a70733          	sub	a4,a4,a0
800015b0:	00078493          	mv	s1,a5
800015b4:	ee1ff06f          	j	80001494 <__divdf3+0xb0>
800015b8:	000b8513          	mv	a0,s7
800015bc:	2f8040ef          	jal	ra,800058b4 <__clzsi2>
800015c0:	00050793          	mv	a5,a0
800015c4:	01578713          	addi	a4,a5,21 # 800015 <__STACKSIZE__+0x7fc015>
800015c8:	01c00693          	li	a3,28
800015cc:	02050513          	addi	a0,a0,32
800015d0:	fae6dce3          	bge	a3,a4,80001588 <__divdf3+0x1a4>
800015d4:	ff878793          	addi	a5,a5,-8
800015d8:	00fb97b3          	sll	a5,s7,a5
800015dc:	fc9ff06f          	j	800015a4 <__divdf3+0x1c0>
800015e0:	0174ef33          	or	t5,s1,s7
800015e4:	020f0263          	beqz	t5,80001608 <__divdf3+0x224>
800015e8:	000b8f13          	mv	t5,s7
800015ec:	7ff00713          	li	a4,2047
800015f0:	00300793          	li	a5,3
800015f4:	ea5ff06f          	j	80001498 <__divdf3+0xb4>
800015f8:	00000493          	li	s1,0
800015fc:	00000713          	li	a4,0
80001600:	00100793          	li	a5,1
80001604:	e95ff06f          	j	80001498 <__divdf3+0xb4>
80001608:	00000493          	li	s1,0
8000160c:	7ff00713          	li	a4,2047
80001610:	00200793          	li	a5,2
80001614:	e85ff06f          	j	80001498 <__divdf3+0xb4>
80001618:	0144e663          	bltu	s1,s4,80001624 <__divdf3+0x240>
8000161c:	349a1c63          	bne	s4,s1,80001974 <__divdf3+0x590>
80001620:	35e46a63          	bltu	s0,t5,80001974 <__divdf3+0x590>
80001624:	01fa1693          	slli	a3,s4,0x1f
80001628:	00145793          	srli	a5,s0,0x1
8000162c:	01f41713          	slli	a4,s0,0x1f
80001630:	001a5a13          	srli	s4,s4,0x1
80001634:	00f6e433          	or	s0,a3,a5
80001638:	00849893          	slli	a7,s1,0x8
8000163c:	018f5593          	srli	a1,t5,0x18
80001640:	0115e5b3          	or	a1,a1,a7
80001644:	0108d893          	srli	a7,a7,0x10
80001648:	031a5eb3          	divu	t4,s4,a7
8000164c:	01059313          	slli	t1,a1,0x10
80001650:	01035313          	srli	t1,t1,0x10
80001654:	01045793          	srli	a5,s0,0x10
80001658:	008f1513          	slli	a0,t5,0x8
8000165c:	031a7a33          	remu	s4,s4,a7
80001660:	000e8693          	mv	a3,t4
80001664:	03d30e33          	mul	t3,t1,t4
80001668:	010a1a13          	slli	s4,s4,0x10
8000166c:	0147e7b3          	or	a5,a5,s4
80001670:	01c7fe63          	bgeu	a5,t3,8000168c <__divdf3+0x2a8>
80001674:	00f587b3          	add	a5,a1,a5
80001678:	fffe8693          	addi	a3,t4,-1
8000167c:	00b7e863          	bltu	a5,a1,8000168c <__divdf3+0x2a8>
80001680:	01c7f663          	bgeu	a5,t3,8000168c <__divdf3+0x2a8>
80001684:	ffee8693          	addi	a3,t4,-2
80001688:	00b787b3          	add	a5,a5,a1
8000168c:	41c787b3          	sub	a5,a5,t3
80001690:	0317df33          	divu	t5,a5,a7
80001694:	01041413          	slli	s0,s0,0x10
80001698:	01045413          	srli	s0,s0,0x10
8000169c:	0317f7b3          	remu	a5,a5,a7
800016a0:	000f0e13          	mv	t3,t5
800016a4:	03e30eb3          	mul	t4,t1,t5
800016a8:	01079793          	slli	a5,a5,0x10
800016ac:	00f467b3          	or	a5,s0,a5
800016b0:	01d7fe63          	bgeu	a5,t4,800016cc <__divdf3+0x2e8>
800016b4:	00f587b3          	add	a5,a1,a5
800016b8:	ffff0e13          	addi	t3,t5,-1
800016bc:	00b7e863          	bltu	a5,a1,800016cc <__divdf3+0x2e8>
800016c0:	01d7f663          	bgeu	a5,t4,800016cc <__divdf3+0x2e8>
800016c4:	ffef0e13          	addi	t3,t5,-2
800016c8:	00b787b3          	add	a5,a5,a1
800016cc:	01069693          	slli	a3,a3,0x10
800016d0:	00010437          	lui	s0,0x10
800016d4:	01c6e2b3          	or	t0,a3,t3
800016d8:	fff40e13          	addi	t3,s0,-1 # ffff <__STACKSIZE__+0xbfff>
800016dc:	01c2f6b3          	and	a3,t0,t3
800016e0:	0102df93          	srli	t6,t0,0x10
800016e4:	01c57e33          	and	t3,a0,t3
800016e8:	41d787b3          	sub	a5,a5,t4
800016ec:	01055e93          	srli	t4,a0,0x10
800016f0:	02de03b3          	mul	t2,t3,a3
800016f4:	03cf84b3          	mul	s1,t6,t3
800016f8:	02de86b3          	mul	a3,t4,a3
800016fc:	00968f33          	add	t5,a3,s1
80001700:	0103d693          	srli	a3,t2,0x10
80001704:	01e686b3          	add	a3,a3,t5
80001708:	03df8fb3          	mul	t6,t6,t4
8000170c:	0096f463          	bgeu	a3,s1,80001714 <__divdf3+0x330>
80001710:	008f8fb3          	add	t6,t6,s0
80001714:	0106df13          	srli	t5,a3,0x10
80001718:	01ff0f33          	add	t5,t5,t6
8000171c:	00010fb7          	lui	t6,0x10
80001720:	ffff8f93          	addi	t6,t6,-1 # ffff <__STACKSIZE__+0xbfff>
80001724:	01f6f6b3          	and	a3,a3,t6
80001728:	01069693          	slli	a3,a3,0x10
8000172c:	01f3f3b3          	and	t2,t2,t6
80001730:	007686b3          	add	a3,a3,t2
80001734:	01e7e863          	bltu	a5,t5,80001744 <__divdf3+0x360>
80001738:	00028493          	mv	s1,t0
8000173c:	05e79863          	bne	a5,t5,8000178c <__divdf3+0x3a8>
80001740:	04d77663          	bgeu	a4,a3,8000178c <__divdf3+0x3a8>
80001744:	00a70fb3          	add	t6,a4,a0
80001748:	00efb3b3          	sltu	t2,t6,a4
8000174c:	00b38433          	add	s0,t2,a1
80001750:	008787b3          	add	a5,a5,s0
80001754:	fff28493          	addi	s1,t0,-1 # 800002a7 <memset+0xb3>
80001758:	000f8713          	mv	a4,t6
8000175c:	00f5e663          	bltu	a1,a5,80001768 <__divdf3+0x384>
80001760:	02f59663          	bne	a1,a5,8000178c <__divdf3+0x3a8>
80001764:	02039463          	bnez	t2,8000178c <__divdf3+0x3a8>
80001768:	01e7e663          	bltu	a5,t5,80001774 <__divdf3+0x390>
8000176c:	02ff1063          	bne	t5,a5,8000178c <__divdf3+0x3a8>
80001770:	00dffe63          	bgeu	t6,a3,8000178c <__divdf3+0x3a8>
80001774:	01f50fb3          	add	t6,a0,t6
80001778:	000f8713          	mv	a4,t6
8000177c:	00afbfb3          	sltu	t6,t6,a0
80001780:	00bf8fb3          	add	t6,t6,a1
80001784:	ffe28493          	addi	s1,t0,-2
80001788:	01f787b3          	add	a5,a5,t6
8000178c:	40d706b3          	sub	a3,a4,a3
80001790:	41e787b3          	sub	a5,a5,t5
80001794:	00d73733          	sltu	a4,a4,a3
80001798:	40e787b3          	sub	a5,a5,a4
8000179c:	fff00f13          	li	t5,-1
800017a0:	12f58663          	beq	a1,a5,800018cc <__divdf3+0x4e8>
800017a4:	0317dfb3          	divu	t6,a5,a7
800017a8:	0106d713          	srli	a4,a3,0x10
800017ac:	0317f7b3          	remu	a5,a5,a7
800017b0:	03f30f33          	mul	t5,t1,t6
800017b4:	01079793          	slli	a5,a5,0x10
800017b8:	00f767b3          	or	a5,a4,a5
800017bc:	000f8713          	mv	a4,t6
800017c0:	01e7fe63          	bgeu	a5,t5,800017dc <__divdf3+0x3f8>
800017c4:	00f587b3          	add	a5,a1,a5
800017c8:	ffff8713          	addi	a4,t6,-1
800017cc:	00b7e863          	bltu	a5,a1,800017dc <__divdf3+0x3f8>
800017d0:	01e7f663          	bgeu	a5,t5,800017dc <__divdf3+0x3f8>
800017d4:	ffef8713          	addi	a4,t6,-2
800017d8:	00b787b3          	add	a5,a5,a1
800017dc:	41e787b3          	sub	a5,a5,t5
800017e0:	0317df33          	divu	t5,a5,a7
800017e4:	01069693          	slli	a3,a3,0x10
800017e8:	0106d693          	srli	a3,a3,0x10
800017ec:	0317f7b3          	remu	a5,a5,a7
800017f0:	000f0893          	mv	a7,t5
800017f4:	03e30333          	mul	t1,t1,t5
800017f8:	01079793          	slli	a5,a5,0x10
800017fc:	00f6e7b3          	or	a5,a3,a5
80001800:	0067fe63          	bgeu	a5,t1,8000181c <__divdf3+0x438>
80001804:	00f587b3          	add	a5,a1,a5
80001808:	ffff0893          	addi	a7,t5,-1
8000180c:	00b7e863          	bltu	a5,a1,8000181c <__divdf3+0x438>
80001810:	0067f663          	bgeu	a5,t1,8000181c <__divdf3+0x438>
80001814:	ffef0893          	addi	a7,t5,-2
80001818:	00b787b3          	add	a5,a5,a1
8000181c:	01071693          	slli	a3,a4,0x10
80001820:	0116e6b3          	or	a3,a3,a7
80001824:	01069713          	slli	a4,a3,0x10
80001828:	01075713          	srli	a4,a4,0x10
8000182c:	406787b3          	sub	a5,a5,t1
80001830:	0106d313          	srli	t1,a3,0x10
80001834:	03c70f33          	mul	t5,a4,t3
80001838:	03c30e33          	mul	t3,t1,t3
8000183c:	026e8333          	mul	t1,t4,t1
80001840:	02ee8eb3          	mul	t4,t4,a4
80001844:	010f5713          	srli	a4,t5,0x10
80001848:	01ce8eb3          	add	t4,t4,t3
8000184c:	01d70733          	add	a4,a4,t4
80001850:	01c77663          	bgeu	a4,t3,8000185c <__divdf3+0x478>
80001854:	000108b7          	lui	a7,0x10
80001858:	01130333          	add	t1,t1,a7
8000185c:	01075893          	srli	a7,a4,0x10
80001860:	006888b3          	add	a7,a7,t1
80001864:	00010337          	lui	t1,0x10
80001868:	fff30313          	addi	t1,t1,-1 # ffff <__STACKSIZE__+0xbfff>
8000186c:	00677733          	and	a4,a4,t1
80001870:	01071713          	slli	a4,a4,0x10
80001874:	006f7f33          	and	t5,t5,t1
80001878:	01e70733          	add	a4,a4,t5
8000187c:	0117e863          	bltu	a5,a7,8000188c <__divdf3+0x4a8>
80001880:	23179c63          	bne	a5,a7,80001ab8 <__divdf3+0x6d4>
80001884:	00068f13          	mv	t5,a3
80001888:	04070263          	beqz	a4,800018cc <__divdf3+0x4e8>
8000188c:	00f587b3          	add	a5,a1,a5
80001890:	fff68f13          	addi	t5,a3,-1
80001894:	00078313          	mv	t1,a5
80001898:	02b7e463          	bltu	a5,a1,800018c0 <__divdf3+0x4dc>
8000189c:	0117e663          	bltu	a5,a7,800018a8 <__divdf3+0x4c4>
800018a0:	21179a63          	bne	a5,a7,80001ab4 <__divdf3+0x6d0>
800018a4:	02e57063          	bgeu	a0,a4,800018c4 <__divdf3+0x4e0>
800018a8:	ffe68f13          	addi	t5,a3,-2
800018ac:	00151693          	slli	a3,a0,0x1
800018b0:	00a6b333          	sltu	t1,a3,a0
800018b4:	00b30333          	add	t1,t1,a1
800018b8:	00678333          	add	t1,a5,t1
800018bc:	00068513          	mv	a0,a3
800018c0:	01131463          	bne	t1,a7,800018c8 <__divdf3+0x4e4>
800018c4:	00a70463          	beq	a4,a0,800018cc <__divdf3+0x4e8>
800018c8:	001f6f13          	ori	t5,t5,1
800018cc:	3ff80713          	addi	a4,a6,1023
800018d0:	10e05263          	blez	a4,800019d4 <__divdf3+0x5f0>
800018d4:	007f7793          	andi	a5,t5,7
800018d8:	02078063          	beqz	a5,800018f8 <__divdf3+0x514>
800018dc:	00ff7793          	andi	a5,t5,15
800018e0:	00400693          	li	a3,4
800018e4:	00d78a63          	beq	a5,a3,800018f8 <__divdf3+0x514>
800018e8:	004f0793          	addi	a5,t5,4
800018ec:	01e7b6b3          	sltu	a3,a5,t5
800018f0:	00d484b3          	add	s1,s1,a3
800018f4:	00078f13          	mv	t5,a5
800018f8:	00749793          	slli	a5,s1,0x7
800018fc:	0007da63          	bgez	a5,80001910 <__divdf3+0x52c>
80001900:	ff0007b7          	lui	a5,0xff000
80001904:	fff78793          	addi	a5,a5,-1 # feffffff <__bss_end+0x7ef79843>
80001908:	00f4f4b3          	and	s1,s1,a5
8000190c:	40080713          	addi	a4,a6,1024
80001910:	7fe00793          	li	a5,2046
80001914:	08e7ca63          	blt	a5,a4,800019a8 <__divdf3+0x5c4>
80001918:	003f5f13          	srli	t5,t5,0x3
8000191c:	01d49793          	slli	a5,s1,0x1d
80001920:	01e7ef33          	or	t5,a5,t5
80001924:	0034d513          	srli	a0,s1,0x3
80001928:	00c51513          	slli	a0,a0,0xc
8000192c:	02c12083          	lw	ra,44(sp)
80001930:	02812403          	lw	s0,40(sp)
80001934:	00c55513          	srli	a0,a0,0xc
80001938:	01471713          	slli	a4,a4,0x14
8000193c:	00a76733          	or	a4,a4,a0
80001940:	01f61613          	slli	a2,a2,0x1f
80001944:	00c767b3          	or	a5,a4,a2
80001948:	02412483          	lw	s1,36(sp)
8000194c:	02012903          	lw	s2,32(sp)
80001950:	01c12983          	lw	s3,28(sp)
80001954:	01812a03          	lw	s4,24(sp)
80001958:	01412a83          	lw	s5,20(sp)
8000195c:	01012b03          	lw	s6,16(sp)
80001960:	00c12b83          	lw	s7,12(sp)
80001964:	000f0513          	mv	a0,t5
80001968:	00078593          	mv	a1,a5
8000196c:	03010113          	addi	sp,sp,48
80001970:	00008067          	ret
80001974:	fff80813          	addi	a6,a6,-1
80001978:	00000713          	li	a4,0
8000197c:	cbdff06f          	j	80001638 <__divdf3+0x254>
80001980:	00098613          	mv	a2,s3
80001984:	000a0493          	mv	s1,s4
80001988:	00040f13          	mv	t5,s0
8000198c:	000b0793          	mv	a5,s6
80001990:	00300713          	li	a4,3
80001994:	0ee78863          	beq	a5,a4,80001a84 <__divdf3+0x6a0>
80001998:	00100713          	li	a4,1
8000199c:	0ee78e63          	beq	a5,a4,80001a98 <__divdf3+0x6b4>
800019a0:	00200713          	li	a4,2
800019a4:	f2e794e3          	bne	a5,a4,800018cc <__divdf3+0x4e8>
800019a8:	00000513          	li	a0,0
800019ac:	00000f13          	li	t5,0
800019b0:	7ff00713          	li	a4,2047
800019b4:	f75ff06f          	j	80001928 <__divdf3+0x544>
800019b8:	00090613          	mv	a2,s2
800019bc:	fd5ff06f          	j	80001990 <__divdf3+0x5ac>
800019c0:	000804b7          	lui	s1,0x80
800019c4:	00000f13          	li	t5,0
800019c8:	00000613          	li	a2,0
800019cc:	00300793          	li	a5,3
800019d0:	fc1ff06f          	j	80001990 <__divdf3+0x5ac>
800019d4:	00100513          	li	a0,1
800019d8:	40e50533          	sub	a0,a0,a4
800019dc:	03800793          	li	a5,56
800019e0:	0aa7cc63          	blt	a5,a0,80001a98 <__divdf3+0x6b4>
800019e4:	01f00793          	li	a5,31
800019e8:	06a7c463          	blt	a5,a0,80001a50 <__divdf3+0x66c>
800019ec:	41e80813          	addi	a6,a6,1054
800019f0:	010497b3          	sll	a5,s1,a6
800019f4:	00af5733          	srl	a4,t5,a0
800019f8:	010f1833          	sll	a6,t5,a6
800019fc:	00e7e7b3          	or	a5,a5,a4
80001a00:	01003833          	snez	a6,a6
80001a04:	0107e7b3          	or	a5,a5,a6
80001a08:	00a4d533          	srl	a0,s1,a0
80001a0c:	0077f713          	andi	a4,a5,7
80001a10:	02070063          	beqz	a4,80001a30 <__divdf3+0x64c>
80001a14:	00f7f713          	andi	a4,a5,15
80001a18:	00400693          	li	a3,4
80001a1c:	00d70a63          	beq	a4,a3,80001a30 <__divdf3+0x64c>
80001a20:	00478713          	addi	a4,a5,4
80001a24:	00f736b3          	sltu	a3,a4,a5
80001a28:	00d50533          	add	a0,a0,a3
80001a2c:	00070793          	mv	a5,a4
80001a30:	00851713          	slli	a4,a0,0x8
80001a34:	06074863          	bltz	a4,80001aa4 <__divdf3+0x6c0>
80001a38:	01d51f13          	slli	t5,a0,0x1d
80001a3c:	0037d793          	srli	a5,a5,0x3
80001a40:	00ff6f33          	or	t5,t5,a5
80001a44:	00355513          	srli	a0,a0,0x3
80001a48:	00000713          	li	a4,0
80001a4c:	eddff06f          	j	80001928 <__divdf3+0x544>
80001a50:	fe100793          	li	a5,-31
80001a54:	40e787b3          	sub	a5,a5,a4
80001a58:	02000693          	li	a3,32
80001a5c:	00f4d7b3          	srl	a5,s1,a5
80001a60:	00000713          	li	a4,0
80001a64:	00d50663          	beq	a0,a3,80001a70 <__divdf3+0x68c>
80001a68:	43e80713          	addi	a4,a6,1086
80001a6c:	00e49733          	sll	a4,s1,a4
80001a70:	01e76733          	or	a4,a4,t5
80001a74:	00e03733          	snez	a4,a4
80001a78:	00e7e7b3          	or	a5,a5,a4
80001a7c:	00000513          	li	a0,0
80001a80:	f8dff06f          	j	80001a0c <__divdf3+0x628>
80001a84:	00080537          	lui	a0,0x80
80001a88:	00000f13          	li	t5,0
80001a8c:	7ff00713          	li	a4,2047
80001a90:	00000613          	li	a2,0
80001a94:	e95ff06f          	j	80001928 <__divdf3+0x544>
80001a98:	00000513          	li	a0,0
80001a9c:	00000f13          	li	t5,0
80001aa0:	fa9ff06f          	j	80001a48 <__divdf3+0x664>
80001aa4:	00000513          	li	a0,0
80001aa8:	00000f13          	li	t5,0
80001aac:	00100713          	li	a4,1
80001ab0:	e79ff06f          	j	80001928 <__divdf3+0x544>
80001ab4:	000f0693          	mv	a3,t5
80001ab8:	00068f13          	mv	t5,a3
80001abc:	e0dff06f          	j	800018c8 <__divdf3+0x4e4>

80001ac0 <__eqdf2>:
80001ac0:	0145d713          	srli	a4,a1,0x14
80001ac4:	001007b7          	lui	a5,0x100
80001ac8:	fff78793          	addi	a5,a5,-1 # fffff <__STACKSIZE__+0xfbfff>
80001acc:	0146d813          	srli	a6,a3,0x14
80001ad0:	00050313          	mv	t1,a0
80001ad4:	00050e93          	mv	t4,a0
80001ad8:	7ff77713          	andi	a4,a4,2047
80001adc:	7ff00513          	li	a0,2047
80001ae0:	00b7f8b3          	and	a7,a5,a1
80001ae4:	00060f13          	mv	t5,a2
80001ae8:	00d7f7b3          	and	a5,a5,a3
80001aec:	01f5d593          	srli	a1,a1,0x1f
80001af0:	7ff87813          	andi	a6,a6,2047
80001af4:	01f6d693          	srli	a3,a3,0x1f
80001af8:	00a71c63          	bne	a4,a0,80001b10 <__eqdf2+0x50>
80001afc:	0068ee33          	or	t3,a7,t1
80001b00:	00100513          	li	a0,1
80001b04:	000e1463          	bnez	t3,80001b0c <__eqdf2+0x4c>
80001b08:	00e80663          	beq	a6,a4,80001b14 <__eqdf2+0x54>
80001b0c:	00008067          	ret
80001b10:	00a81863          	bne	a6,a0,80001b20 <__eqdf2+0x60>
80001b14:	00c7e633          	or	a2,a5,a2
80001b18:	00100513          	li	a0,1
80001b1c:	fe0618e3          	bnez	a2,80001b0c <__eqdf2+0x4c>
80001b20:	00100513          	li	a0,1
80001b24:	ff0714e3          	bne	a4,a6,80001b0c <__eqdf2+0x4c>
80001b28:	fef892e3          	bne	a7,a5,80001b0c <__eqdf2+0x4c>
80001b2c:	ffee90e3          	bne	t4,t5,80001b0c <__eqdf2+0x4c>
80001b30:	00d58a63          	beq	a1,a3,80001b44 <__eqdf2+0x84>
80001b34:	fc071ce3          	bnez	a4,80001b0c <__eqdf2+0x4c>
80001b38:	0068e8b3          	or	a7,a7,t1
80001b3c:	01103533          	snez	a0,a7
80001b40:	00008067          	ret
80001b44:	00000513          	li	a0,0
80001b48:	00008067          	ret

80001b4c <__gedf2>:
80001b4c:	0145d813          	srli	a6,a1,0x14
80001b50:	001007b7          	lui	a5,0x100
80001b54:	fff78793          	addi	a5,a5,-1 # fffff <__STACKSIZE__+0xfbfff>
80001b58:	0146d893          	srli	a7,a3,0x14
80001b5c:	00050713          	mv	a4,a0
80001b60:	00050e93          	mv	t4,a0
80001b64:	7ff87813          	andi	a6,a6,2047
80001b68:	7ff00513          	li	a0,2047
80001b6c:	00b7f333          	and	t1,a5,a1
80001b70:	00060f13          	mv	t5,a2
80001b74:	00d7f7b3          	and	a5,a5,a3
80001b78:	01f5d593          	srli	a1,a1,0x1f
80001b7c:	7ff8f893          	andi	a7,a7,2047
80001b80:	01f6d693          	srli	a3,a3,0x1f
80001b84:	00a81863          	bne	a6,a0,80001b94 <__gedf2+0x48>
80001b88:	00e36e33          	or	t3,t1,a4
80001b8c:	ffe00513          	li	a0,-2
80001b90:	060e1463          	bnez	t3,80001bf8 <__gedf2+0xac>
80001b94:	7ff00513          	li	a0,2047
80001b98:	00a89863          	bne	a7,a0,80001ba8 <__gedf2+0x5c>
80001b9c:	00c7ee33          	or	t3,a5,a2
80001ba0:	ffe00513          	li	a0,-2
80001ba4:	040e1a63          	bnez	t3,80001bf8 <__gedf2+0xac>
80001ba8:	00000513          	li	a0,0
80001bac:	00081663          	bnez	a6,80001bb8 <__gedf2+0x6c>
80001bb0:	00e36733          	or	a4,t1,a4
80001bb4:	00173513          	seqz	a0,a4
80001bb8:	06089263          	bnez	a7,80001c1c <__gedf2+0xd0>
80001bbc:	00c7e633          	or	a2,a5,a2
80001bc0:	00050e63          	beqz	a0,80001bdc <__gedf2+0x90>
80001bc4:	00000513          	li	a0,0
80001bc8:	02060863          	beqz	a2,80001bf8 <__gedf2+0xac>
80001bcc:	fff00513          	li	a0,-1
80001bd0:	02068463          	beqz	a3,80001bf8 <__gedf2+0xac>
80001bd4:	00068513          	mv	a0,a3
80001bd8:	00008067          	ret
80001bdc:	00058513          	mv	a0,a1
80001be0:	04061263          	bnez	a2,80001c24 <__gedf2+0xd8>
80001be4:	00100513          	li	a0,1
80001be8:	00058863          	beqz	a1,80001bf8 <__gedf2+0xac>
80001bec:	0480006f          	j	80001c34 <__gedf2+0xe8>
80001bf0:	01185663          	bge	a6,a7,80001bfc <__gedf2+0xb0>
80001bf4:	04068063          	beqz	a3,80001c34 <__gedf2+0xe8>
80001bf8:	00008067          	ret
80001bfc:	fe67e4e3          	bltu	a5,t1,80001be4 <__gedf2+0x98>
80001c00:	00f31663          	bne	t1,a5,80001c0c <__gedf2+0xc0>
80001c04:	ffdf60e3          	bltu	t5,t4,80001be4 <__gedf2+0x98>
80001c08:	01eef663          	bgeu	t4,t5,80001c14 <__gedf2+0xc8>
80001c0c:	fe0596e3          	bnez	a1,80001bf8 <__gedf2+0xac>
80001c10:	0240006f          	j	80001c34 <__gedf2+0xe8>
80001c14:	00000513          	li	a0,0
80001c18:	00008067          	ret
80001c1c:	fa0518e3          	bnez	a0,80001bcc <__gedf2+0x80>
80001c20:	00058513          	mv	a0,a1
80001c24:	fcb690e3          	bne	a3,a1,80001be4 <__gedf2+0x98>
80001c28:	fd08d4e3          	bge	a7,a6,80001bf0 <__gedf2+0xa4>
80001c2c:	00100513          	li	a0,1
80001c30:	fc0684e3          	beqz	a3,80001bf8 <__gedf2+0xac>
80001c34:	fff00513          	li	a0,-1
80001c38:	00008067          	ret

80001c3c <__ledf2>:
80001c3c:	0145d813          	srli	a6,a1,0x14
80001c40:	001007b7          	lui	a5,0x100
80001c44:	fff78793          	addi	a5,a5,-1 # fffff <__STACKSIZE__+0xfbfff>
80001c48:	0146d893          	srli	a7,a3,0x14
80001c4c:	00050713          	mv	a4,a0
80001c50:	00050e93          	mv	t4,a0
80001c54:	7ff87813          	andi	a6,a6,2047
80001c58:	7ff00513          	li	a0,2047
80001c5c:	00b7f333          	and	t1,a5,a1
80001c60:	00060f13          	mv	t5,a2
80001c64:	00d7f7b3          	and	a5,a5,a3
80001c68:	01f5d593          	srli	a1,a1,0x1f
80001c6c:	7ff8f893          	andi	a7,a7,2047
80001c70:	01f6d693          	srli	a3,a3,0x1f
80001c74:	00a81863          	bne	a6,a0,80001c84 <__ledf2+0x48>
80001c78:	00e36e33          	or	t3,t1,a4
80001c7c:	00200513          	li	a0,2
80001c80:	060e1463          	bnez	t3,80001ce8 <__ledf2+0xac>
80001c84:	7ff00513          	li	a0,2047
80001c88:	00a89863          	bne	a7,a0,80001c98 <__ledf2+0x5c>
80001c8c:	00c7ee33          	or	t3,a5,a2
80001c90:	00200513          	li	a0,2
80001c94:	040e1a63          	bnez	t3,80001ce8 <__ledf2+0xac>
80001c98:	00000513          	li	a0,0
80001c9c:	00081663          	bnez	a6,80001ca8 <__ledf2+0x6c>
80001ca0:	00e36733          	or	a4,t1,a4
80001ca4:	00173513          	seqz	a0,a4
80001ca8:	06089263          	bnez	a7,80001d0c <__ledf2+0xd0>
80001cac:	00c7e633          	or	a2,a5,a2
80001cb0:	00050e63          	beqz	a0,80001ccc <__ledf2+0x90>
80001cb4:	00000513          	li	a0,0
80001cb8:	02060863          	beqz	a2,80001ce8 <__ledf2+0xac>
80001cbc:	fff00513          	li	a0,-1
80001cc0:	02068463          	beqz	a3,80001ce8 <__ledf2+0xac>
80001cc4:	00068513          	mv	a0,a3
80001cc8:	00008067          	ret
80001ccc:	00058513          	mv	a0,a1
80001cd0:	04061263          	bnez	a2,80001d14 <__ledf2+0xd8>
80001cd4:	00100513          	li	a0,1
80001cd8:	00058863          	beqz	a1,80001ce8 <__ledf2+0xac>
80001cdc:	0480006f          	j	80001d24 <__ledf2+0xe8>
80001ce0:	01185663          	bge	a6,a7,80001cec <__ledf2+0xb0>
80001ce4:	04068063          	beqz	a3,80001d24 <__ledf2+0xe8>
80001ce8:	00008067          	ret
80001cec:	fe67e4e3          	bltu	a5,t1,80001cd4 <__ledf2+0x98>
80001cf0:	00f31663          	bne	t1,a5,80001cfc <__ledf2+0xc0>
80001cf4:	ffdf60e3          	bltu	t5,t4,80001cd4 <__ledf2+0x98>
80001cf8:	01eef663          	bgeu	t4,t5,80001d04 <__ledf2+0xc8>
80001cfc:	fe0596e3          	bnez	a1,80001ce8 <__ledf2+0xac>
80001d00:	0240006f          	j	80001d24 <__ledf2+0xe8>
80001d04:	00000513          	li	a0,0
80001d08:	00008067          	ret
80001d0c:	fa0518e3          	bnez	a0,80001cbc <__ledf2+0x80>
80001d10:	00058513          	mv	a0,a1
80001d14:	fcb690e3          	bne	a3,a1,80001cd4 <__ledf2+0x98>
80001d18:	fd08d4e3          	bge	a7,a6,80001ce0 <__ledf2+0xa4>
80001d1c:	00100513          	li	a0,1
80001d20:	fc0684e3          	beqz	a3,80001ce8 <__ledf2+0xac>
80001d24:	fff00513          	li	a0,-1
80001d28:	00008067          	ret

80001d2c <__muldf3>:
80001d2c:	fd010113          	addi	sp,sp,-48
80001d30:	01512a23          	sw	s5,20(sp)
80001d34:	0145da93          	srli	s5,a1,0x14
80001d38:	02812423          	sw	s0,40(sp)
80001d3c:	02912223          	sw	s1,36(sp)
80001d40:	01312e23          	sw	s3,28(sp)
80001d44:	01412c23          	sw	s4,24(sp)
80001d48:	01612823          	sw	s6,16(sp)
80001d4c:	00c59493          	slli	s1,a1,0xc
80001d50:	02112623          	sw	ra,44(sp)
80001d54:	03212023          	sw	s2,32(sp)
80001d58:	01712623          	sw	s7,12(sp)
80001d5c:	7ffafa93          	andi	s5,s5,2047
80001d60:	00050413          	mv	s0,a0
80001d64:	00060b13          	mv	s6,a2
80001d68:	00068993          	mv	s3,a3
80001d6c:	00c4d493          	srli	s1,s1,0xc
80001d70:	01f5da13          	srli	s4,a1,0x1f
80001d74:	240a8e63          	beqz	s5,80001fd0 <__muldf3+0x2a4>
80001d78:	7ff00793          	li	a5,2047
80001d7c:	2cfa8063          	beq	s5,a5,8000203c <__muldf3+0x310>
80001d80:	00349493          	slli	s1,s1,0x3
80001d84:	01d55793          	srli	a5,a0,0x1d
80001d88:	0097e7b3          	or	a5,a5,s1
80001d8c:	008004b7          	lui	s1,0x800
80001d90:	0097e4b3          	or	s1,a5,s1
80001d94:	00351913          	slli	s2,a0,0x3
80001d98:	c01a8a93          	addi	s5,s5,-1023
80001d9c:	00000b93          	li	s7,0
80001da0:	0149d713          	srli	a4,s3,0x14
80001da4:	00c99413          	slli	s0,s3,0xc
80001da8:	7ff77713          	andi	a4,a4,2047
80001dac:	00c45413          	srli	s0,s0,0xc
80001db0:	01f9d993          	srli	s3,s3,0x1f
80001db4:	2c070063          	beqz	a4,80002074 <__muldf3+0x348>
80001db8:	7ff00793          	li	a5,2047
80001dbc:	32f70463          	beq	a4,a5,800020e4 <__muldf3+0x3b8>
80001dc0:	00341413          	slli	s0,s0,0x3
80001dc4:	01db5793          	srli	a5,s6,0x1d
80001dc8:	0087e7b3          	or	a5,a5,s0
80001dcc:	00800437          	lui	s0,0x800
80001dd0:	0087e433          	or	s0,a5,s0
80001dd4:	c0170693          	addi	a3,a4,-1023
80001dd8:	003b1793          	slli	a5,s6,0x3
80001ddc:	00000713          	li	a4,0
80001de0:	00da8ab3          	add	s5,s5,a3
80001de4:	002b9693          	slli	a3,s7,0x2
80001de8:	00e6e6b3          	or	a3,a3,a4
80001dec:	00a00613          	li	a2,10
80001df0:	013a4833          	xor	a6,s4,s3
80001df4:	001a8593          	addi	a1,s5,1
80001df8:	40d64463          	blt	a2,a3,80002200 <__muldf3+0x4d4>
80001dfc:	00200613          	li	a2,2
80001e00:	30d64e63          	blt	a2,a3,8000211c <__muldf3+0x3f0>
80001e04:	fff68693          	addi	a3,a3,-1
80001e08:	00100613          	li	a2,1
80001e0c:	32d67a63          	bgeu	a2,a3,80002140 <__muldf3+0x414>
80001e10:	00010337          	lui	t1,0x10
80001e14:	fff30e13          	addi	t3,t1,-1 # ffff <__STACKSIZE__+0xbfff>
80001e18:	01095713          	srli	a4,s2,0x10
80001e1c:	0107d893          	srli	a7,a5,0x10
80001e20:	01c97933          	and	s2,s2,t3
80001e24:	01c7ff33          	and	t5,a5,t3
80001e28:	03e907b3          	mul	a5,s2,t5
80001e2c:	03e70eb3          	mul	t4,a4,t5
80001e30:	0107d513          	srli	a0,a5,0x10
80001e34:	03288633          	mul	a2,a7,s2
80001e38:	01d60633          	add	a2,a2,t4
80001e3c:	00c50533          	add	a0,a0,a2
80001e40:	031706b3          	mul	a3,a4,a7
80001e44:	01d57463          	bgeu	a0,t4,80001e4c <__muldf3+0x120>
80001e48:	006686b3          	add	a3,a3,t1
80001e4c:	01055293          	srli	t0,a0,0x10
80001e50:	01c57533          	and	a0,a0,t3
80001e54:	01c7f7b3          	and	a5,a5,t3
80001e58:	01045613          	srli	a2,s0,0x10
80001e5c:	01c47e33          	and	t3,s0,t3
80001e60:	01051513          	slli	a0,a0,0x10
80001e64:	00f50533          	add	a0,a0,a5
80001e68:	03c90eb3          	mul	t4,s2,t3
80001e6c:	03c707b3          	mul	a5,a4,t3
80001e70:	03260933          	mul	s2,a2,s2
80001e74:	02c70333          	mul	t1,a4,a2
80001e78:	00f90933          	add	s2,s2,a5
80001e7c:	010ed713          	srli	a4,t4,0x10
80001e80:	01270733          	add	a4,a4,s2
80001e84:	00f77663          	bgeu	a4,a5,80001e90 <__muldf3+0x164>
80001e88:	000107b7          	lui	a5,0x10
80001e8c:	00f30333          	add	t1,t1,a5
80001e90:	00010437          	lui	s0,0x10
80001e94:	01075793          	srli	a5,a4,0x10
80001e98:	fff40f93          	addi	t6,s0,-1 # ffff <__STACKSIZE__+0xbfff>
80001e9c:	00678333          	add	t1,a5,t1
80001ea0:	01f777b3          	and	a5,a4,t6
80001ea4:	01fefeb3          	and	t4,t4,t6
80001ea8:	01079793          	slli	a5,a5,0x10
80001eac:	01f4ffb3          	and	t6,s1,t6
80001eb0:	01d787b3          	add	a5,a5,t4
80001eb4:	0104de93          	srli	t4,s1,0x10
80001eb8:	03ff03b3          	mul	t2,t5,t6
80001ebc:	00f282b3          	add	t0,t0,a5
80001ec0:	03ee8f33          	mul	t5,t4,t5
80001ec4:	0103d713          	srli	a4,t2,0x10
80001ec8:	03d884b3          	mul	s1,a7,t4
80001ecc:	03f888b3          	mul	a7,a7,t6
80001ed0:	01e888b3          	add	a7,a7,t5
80001ed4:	01170733          	add	a4,a4,a7
80001ed8:	01e77463          	bgeu	a4,t5,80001ee0 <__muldf3+0x1b4>
80001edc:	008484b3          	add	s1,s1,s0
80001ee0:	01075f13          	srli	t5,a4,0x10
80001ee4:	009f0f33          	add	t5,t5,s1
80001ee8:	000104b7          	lui	s1,0x10
80001eec:	fff48413          	addi	s0,s1,-1 # ffff <__STACKSIZE__+0xbfff>
80001ef0:	00877733          	and	a4,a4,s0
80001ef4:	0083f3b3          	and	t2,t2,s0
80001ef8:	01071713          	slli	a4,a4,0x10
80001efc:	007708b3          	add	a7,a4,t2
80001f00:	03fe03b3          	mul	t2,t3,t6
80001f04:	03ce8e33          	mul	t3,t4,t3
80001f08:	03d60eb3          	mul	t4,a2,t4
80001f0c:	03f60633          	mul	a2,a2,t6
80001f10:	0103df93          	srli	t6,t2,0x10
80001f14:	01c60633          	add	a2,a2,t3
80001f18:	00cf8fb3          	add	t6,t6,a2
80001f1c:	01cff463          	bgeu	t6,t3,80001f24 <__muldf3+0x1f8>
80001f20:	009e8eb3          	add	t4,t4,s1
80001f24:	008ff733          	and	a4,t6,s0
80001f28:	0083f3b3          	and	t2,t2,s0
80001f2c:	01071713          	slli	a4,a4,0x10
80001f30:	005686b3          	add	a3,a3,t0
80001f34:	00770733          	add	a4,a4,t2
80001f38:	00670333          	add	t1,a4,t1
80001f3c:	00f6b7b3          	sltu	a5,a3,a5
80001f40:	00f307b3          	add	a5,t1,a5
80001f44:	00e33633          	sltu	a2,t1,a4
80001f48:	011688b3          	add	a7,a3,a7
80001f4c:	0067b333          	sltu	t1,a5,t1
80001f50:	00666633          	or	a2,a2,t1
80001f54:	00d8b6b3          	sltu	a3,a7,a3
80001f58:	01e78333          	add	t1,a5,t5
80001f5c:	00d306b3          	add	a3,t1,a3
80001f60:	00f33733          	sltu	a4,t1,a5
80001f64:	010fdf93          	srli	t6,t6,0x10
80001f68:	0066b333          	sltu	t1,a3,t1
80001f6c:	00989793          	slli	a5,a7,0x9
80001f70:	01f60633          	add	a2,a2,t6
80001f74:	00676733          	or	a4,a4,t1
80001f78:	00c70733          	add	a4,a4,a2
80001f7c:	00a7e7b3          	or	a5,a5,a0
80001f80:	01d70733          	add	a4,a4,t4
80001f84:	00f037b3          	snez	a5,a5
80001f88:	0178d893          	srli	a7,a7,0x17
80001f8c:	00971713          	slli	a4,a4,0x9
80001f90:	0176d413          	srli	s0,a3,0x17
80001f94:	0117e7b3          	or	a5,a5,a7
80001f98:	00969693          	slli	a3,a3,0x9
80001f9c:	00d7e7b3          	or	a5,a5,a3
80001fa0:	00771693          	slli	a3,a4,0x7
80001fa4:	00876433          	or	s0,a4,s0
80001fa8:	0206d063          	bgez	a3,80001fc8 <__muldf3+0x29c>
80001fac:	0017d713          	srli	a4,a5,0x1
80001fb0:	0017f793          	andi	a5,a5,1
80001fb4:	00f76733          	or	a4,a4,a5
80001fb8:	01f41793          	slli	a5,s0,0x1f
80001fbc:	00f767b3          	or	a5,a4,a5
80001fc0:	00145413          	srli	s0,s0,0x1
80001fc4:	00058a93          	mv	s5,a1
80001fc8:	000a8593          	mv	a1,s5
80001fcc:	18c0006f          	j	80002158 <__muldf3+0x42c>
80001fd0:	00a4e933          	or	s2,s1,a0
80001fd4:	08090063          	beqz	s2,80002054 <__muldf3+0x328>
80001fd8:	04048063          	beqz	s1,80002018 <__muldf3+0x2ec>
80001fdc:	00048513          	mv	a0,s1
80001fe0:	0d5030ef          	jal	ra,800058b4 <__clzsi2>
80001fe4:	ff550713          	addi	a4,a0,-11 # 7fff5 <__STACKSIZE__+0x7bff5>
80001fe8:	01d00793          	li	a5,29
80001fec:	ff850693          	addi	a3,a0,-8
80001ff0:	40e787b3          	sub	a5,a5,a4
80001ff4:	00d494b3          	sll	s1,s1,a3
80001ff8:	00f457b3          	srl	a5,s0,a5
80001ffc:	0097e7b3          	or	a5,a5,s1
80002000:	00d414b3          	sll	s1,s0,a3
80002004:	c0d00a93          	li	s5,-1011
80002008:	00048913          	mv	s2,s1
8000200c:	40aa8ab3          	sub	s5,s5,a0
80002010:	00078493          	mv	s1,a5
80002014:	d89ff06f          	j	80001d9c <__muldf3+0x70>
80002018:	09d030ef          	jal	ra,800058b4 <__clzsi2>
8000201c:	00050793          	mv	a5,a0
80002020:	01578713          	addi	a4,a5,21 # 10015 <__STACKSIZE__+0xc015>
80002024:	01c00693          	li	a3,28
80002028:	02050513          	addi	a0,a0,32
8000202c:	fae6dee3          	bge	a3,a4,80001fe8 <__muldf3+0x2bc>
80002030:	ff878793          	addi	a5,a5,-8
80002034:	00f417b3          	sll	a5,s0,a5
80002038:	fcdff06f          	j	80002004 <__muldf3+0x2d8>
8000203c:	00a4e933          	or	s2,s1,a0
80002040:	02090263          	beqz	s2,80002064 <__muldf3+0x338>
80002044:	00050913          	mv	s2,a0
80002048:	7ff00a93          	li	s5,2047
8000204c:	00300b93          	li	s7,3
80002050:	d51ff06f          	j	80001da0 <__muldf3+0x74>
80002054:	00000493          	li	s1,0
80002058:	00000a93          	li	s5,0
8000205c:	00100b93          	li	s7,1
80002060:	d41ff06f          	j	80001da0 <__muldf3+0x74>
80002064:	00000493          	li	s1,0
80002068:	7ff00a93          	li	s5,2047
8000206c:	00200b93          	li	s7,2
80002070:	d31ff06f          	j	80001da0 <__muldf3+0x74>
80002074:	016467b3          	or	a5,s0,s6
80002078:	08078263          	beqz	a5,800020fc <__muldf3+0x3d0>
8000207c:	04040063          	beqz	s0,800020bc <__muldf3+0x390>
80002080:	00040513          	mv	a0,s0
80002084:	031030ef          	jal	ra,800058b4 <__clzsi2>
80002088:	ff550693          	addi	a3,a0,-11
8000208c:	01d00713          	li	a4,29
80002090:	ff850793          	addi	a5,a0,-8
80002094:	40d70733          	sub	a4,a4,a3
80002098:	00f41433          	sll	s0,s0,a5
8000209c:	00eb5733          	srl	a4,s6,a4
800020a0:	00876733          	or	a4,a4,s0
800020a4:	00fb1433          	sll	s0,s6,a5
800020a8:	c0d00693          	li	a3,-1011
800020ac:	00040793          	mv	a5,s0
800020b0:	40a686b3          	sub	a3,a3,a0
800020b4:	00070413          	mv	s0,a4
800020b8:	d25ff06f          	j	80001ddc <__muldf3+0xb0>
800020bc:	000b0513          	mv	a0,s6
800020c0:	7f4030ef          	jal	ra,800058b4 <__clzsi2>
800020c4:	00050793          	mv	a5,a0
800020c8:	01578693          	addi	a3,a5,21
800020cc:	01c00713          	li	a4,28
800020d0:	02050513          	addi	a0,a0,32
800020d4:	fad75ce3          	bge	a4,a3,8000208c <__muldf3+0x360>
800020d8:	ff878793          	addi	a5,a5,-8
800020dc:	00fb1733          	sll	a4,s6,a5
800020e0:	fc9ff06f          	j	800020a8 <__muldf3+0x37c>
800020e4:	016467b3          	or	a5,s0,s6
800020e8:	02078263          	beqz	a5,8000210c <__muldf3+0x3e0>
800020ec:	000b0793          	mv	a5,s6
800020f0:	7ff00693          	li	a3,2047
800020f4:	00300713          	li	a4,3
800020f8:	ce9ff06f          	j	80001de0 <__muldf3+0xb4>
800020fc:	00000413          	li	s0,0
80002100:	00000693          	li	a3,0
80002104:	00100713          	li	a4,1
80002108:	cd9ff06f          	j	80001de0 <__muldf3+0xb4>
8000210c:	00000413          	li	s0,0
80002110:	7ff00693          	li	a3,2047
80002114:	00200713          	li	a4,2
80002118:	cc9ff06f          	j	80001de0 <__muldf3+0xb4>
8000211c:	00100613          	li	a2,1
80002120:	00d61633          	sll	a2,a2,a3
80002124:	53067693          	andi	a3,a2,1328
80002128:	0e069663          	bnez	a3,80002214 <__muldf3+0x4e8>
8000212c:	24067513          	andi	a0,a2,576
80002130:	1a051a63          	bnez	a0,800022e4 <__muldf3+0x5b8>
80002134:	08867613          	andi	a2,a2,136
80002138:	cc060ce3          	beqz	a2,80001e10 <__muldf3+0xe4>
8000213c:	00098813          	mv	a6,s3
80002140:	00200693          	li	a3,2
80002144:	18d70863          	beq	a4,a3,800022d4 <__muldf3+0x5a8>
80002148:	00300693          	li	a3,3
8000214c:	1ad70463          	beq	a4,a3,800022f4 <__muldf3+0x5c8>
80002150:	00100693          	li	a3,1
80002154:	1ad70663          	beq	a4,a3,80002300 <__muldf3+0x5d4>
80002158:	3ff58613          	addi	a2,a1,1023
8000215c:	0cc05463          	blez	a2,80002224 <__muldf3+0x4f8>
80002160:	0077f713          	andi	a4,a5,7
80002164:	02070063          	beqz	a4,80002184 <__muldf3+0x458>
80002168:	00f7f713          	andi	a4,a5,15
8000216c:	00400693          	li	a3,4
80002170:	00d70a63          	beq	a4,a3,80002184 <__muldf3+0x458>
80002174:	00478713          	addi	a4,a5,4
80002178:	00f736b3          	sltu	a3,a4,a5
8000217c:	00d40433          	add	s0,s0,a3
80002180:	00070793          	mv	a5,a4
80002184:	00741713          	slli	a4,s0,0x7
80002188:	00075a63          	bgez	a4,8000219c <__muldf3+0x470>
8000218c:	ff000737          	lui	a4,0xff000
80002190:	fff70713          	addi	a4,a4,-1 # feffffff <__bss_end+0x7ef79843>
80002194:	00e47433          	and	s0,s0,a4
80002198:	40058613          	addi	a2,a1,1024
8000219c:	7fe00713          	li	a4,2046
800021a0:	12c74a63          	blt	a4,a2,800022d4 <__muldf3+0x5a8>
800021a4:	0037d793          	srli	a5,a5,0x3
800021a8:	01d41693          	slli	a3,s0,0x1d
800021ac:	00f6e6b3          	or	a3,a3,a5
800021b0:	00345713          	srli	a4,s0,0x3
800021b4:	00c71713          	slli	a4,a4,0xc
800021b8:	02c12083          	lw	ra,44(sp)
800021bc:	02812403          	lw	s0,40(sp)
800021c0:	01461613          	slli	a2,a2,0x14
800021c4:	00c75713          	srli	a4,a4,0xc
800021c8:	00e66633          	or	a2,a2,a4
800021cc:	01f81813          	slli	a6,a6,0x1f
800021d0:	010667b3          	or	a5,a2,a6
800021d4:	02412483          	lw	s1,36(sp)
800021d8:	02012903          	lw	s2,32(sp)
800021dc:	01c12983          	lw	s3,28(sp)
800021e0:	01812a03          	lw	s4,24(sp)
800021e4:	01412a83          	lw	s5,20(sp)
800021e8:	01012b03          	lw	s6,16(sp)
800021ec:	00c12b83          	lw	s7,12(sp)
800021f0:	00068513          	mv	a0,a3
800021f4:	00078593          	mv	a1,a5
800021f8:	03010113          	addi	sp,sp,48
800021fc:	00008067          	ret
80002200:	00f00613          	li	a2,15
80002204:	0ec68863          	beq	a3,a2,800022f4 <__muldf3+0x5c8>
80002208:	00b00613          	li	a2,11
8000220c:	000a0813          	mv	a6,s4
80002210:	f2c686e3          	beq	a3,a2,8000213c <__muldf3+0x410>
80002214:	00048413          	mv	s0,s1
80002218:	00090793          	mv	a5,s2
8000221c:	000b8713          	mv	a4,s7
80002220:	f21ff06f          	j	80002140 <__muldf3+0x414>
80002224:	00100713          	li	a4,1
80002228:	40c70733          	sub	a4,a4,a2
8000222c:	03800693          	li	a3,56
80002230:	0ce6c863          	blt	a3,a4,80002300 <__muldf3+0x5d4>
80002234:	01f00693          	li	a3,31
80002238:	06e6c463          	blt	a3,a4,800022a0 <__muldf3+0x574>
8000223c:	41e58593          	addi	a1,a1,1054
80002240:	00e7d633          	srl	a2,a5,a4
80002244:	00b416b3          	sll	a3,s0,a1
80002248:	00b795b3          	sll	a1,a5,a1
8000224c:	00c6e6b3          	or	a3,a3,a2
80002250:	00b035b3          	snez	a1,a1
80002254:	00b6e7b3          	or	a5,a3,a1
80002258:	00e45733          	srl	a4,s0,a4
8000225c:	0077f693          	andi	a3,a5,7
80002260:	02068063          	beqz	a3,80002280 <__muldf3+0x554>
80002264:	00f7f693          	andi	a3,a5,15
80002268:	00400613          	li	a2,4
8000226c:	00c68a63          	beq	a3,a2,80002280 <__muldf3+0x554>
80002270:	00478693          	addi	a3,a5,4
80002274:	00f6b633          	sltu	a2,a3,a5
80002278:	00c70733          	add	a4,a4,a2
8000227c:	00068793          	mv	a5,a3
80002280:	00871693          	slli	a3,a4,0x8
80002284:	0806c463          	bltz	a3,8000230c <__muldf3+0x5e0>
80002288:	01d71693          	slli	a3,a4,0x1d
8000228c:	0037d793          	srli	a5,a5,0x3
80002290:	00f6e6b3          	or	a3,a3,a5
80002294:	00375713          	srli	a4,a4,0x3
80002298:	00000613          	li	a2,0
8000229c:	f19ff06f          	j	800021b4 <__muldf3+0x488>
800022a0:	fe100693          	li	a3,-31
800022a4:	40c686b3          	sub	a3,a3,a2
800022a8:	02000513          	li	a0,32
800022ac:	00d456b3          	srl	a3,s0,a3
800022b0:	00000613          	li	a2,0
800022b4:	00a70663          	beq	a4,a0,800022c0 <__muldf3+0x594>
800022b8:	43e58613          	addi	a2,a1,1086
800022bc:	00c41633          	sll	a2,s0,a2
800022c0:	00f66633          	or	a2,a2,a5
800022c4:	00c03633          	snez	a2,a2
800022c8:	00c6e7b3          	or	a5,a3,a2
800022cc:	00000713          	li	a4,0
800022d0:	f8dff06f          	j	8000225c <__muldf3+0x530>
800022d4:	00000713          	li	a4,0
800022d8:	00000693          	li	a3,0
800022dc:	7ff00613          	li	a2,2047
800022e0:	ed5ff06f          	j	800021b4 <__muldf3+0x488>
800022e4:	00080737          	lui	a4,0x80
800022e8:	7ff00613          	li	a2,2047
800022ec:	00000813          	li	a6,0
800022f0:	ec5ff06f          	j	800021b4 <__muldf3+0x488>
800022f4:	00080737          	lui	a4,0x80
800022f8:	00000693          	li	a3,0
800022fc:	fedff06f          	j	800022e8 <__muldf3+0x5bc>
80002300:	00000713          	li	a4,0
80002304:	00000693          	li	a3,0
80002308:	f91ff06f          	j	80002298 <__muldf3+0x56c>
8000230c:	00000713          	li	a4,0
80002310:	00000693          	li	a3,0
80002314:	00100613          	li	a2,1
80002318:	e9dff06f          	j	800021b4 <__muldf3+0x488>

8000231c <__subdf3>:
8000231c:	00100837          	lui	a6,0x100
80002320:	fff80813          	addi	a6,a6,-1 # fffff <__STACKSIZE__+0xfbfff>
80002324:	00b877b3          	and	a5,a6,a1
80002328:	fe010113          	addi	sp,sp,-32
8000232c:	00379793          	slli	a5,a5,0x3
80002330:	01d55713          	srli	a4,a0,0x1d
80002334:	00d87833          	and	a6,a6,a3
80002338:	0146d893          	srli	a7,a3,0x14
8000233c:	00812c23          	sw	s0,24(sp)
80002340:	01212823          	sw	s2,16(sp)
80002344:	0145d413          	srli	s0,a1,0x14
80002348:	01f5d913          	srli	s2,a1,0x1f
8000234c:	00f76733          	or	a4,a4,a5
80002350:	00381813          	slli	a6,a6,0x3
80002354:	01d65793          	srli	a5,a2,0x1d
80002358:	00112e23          	sw	ra,28(sp)
8000235c:	00912a23          	sw	s1,20(sp)
80002360:	01312623          	sw	s3,12(sp)
80002364:	7ff8f893          	andi	a7,a7,2047
80002368:	7ff00593          	li	a1,2047
8000236c:	7ff47413          	andi	s0,s0,2047
80002370:	00351513          	slli	a0,a0,0x3
80002374:	01f6d693          	srli	a3,a3,0x1f
80002378:	0107e7b3          	or	a5,a5,a6
8000237c:	00361613          	slli	a2,a2,0x3
80002380:	00b89663          	bne	a7,a1,8000238c <__subdf3+0x70>
80002384:	00c7e5b3          	or	a1,a5,a2
80002388:	00059463          	bnez	a1,80002390 <__subdf3+0x74>
8000238c:	0016c693          	xori	a3,a3,1
80002390:	41140833          	sub	a6,s0,a7
80002394:	2b269463          	bne	a3,s2,8000263c <__subdf3+0x320>
80002398:	11005e63          	blez	a6,800024b4 <__subdf3+0x198>
8000239c:	04089063          	bnez	a7,800023dc <__subdf3+0xc0>
800023a0:	00c7e6b3          	or	a3,a5,a2
800023a4:	6c068863          	beqz	a3,80002a74 <__subdf3+0x758>
800023a8:	fff80593          	addi	a1,a6,-1
800023ac:	00059e63          	bnez	a1,800023c8 <__subdf3+0xac>
800023b0:	00c50633          	add	a2,a0,a2
800023b4:	00f70733          	add	a4,a4,a5
800023b8:	00a63533          	sltu	a0,a2,a0
800023bc:	00a707b3          	add	a5,a4,a0
800023c0:	00100413          	li	s0,1
800023c4:	0740006f          	j	80002438 <__subdf3+0x11c>
800023c8:	7ff00693          	li	a3,2047
800023cc:	02d81263          	bne	a6,a3,800023f0 <__subdf3+0xd4>
800023d0:	00070793          	mv	a5,a4
800023d4:	00050613          	mv	a2,a0
800023d8:	1000006f          	j	800024d8 <__subdf3+0x1bc>
800023dc:	7ff00693          	li	a3,2047
800023e0:	6ad40663          	beq	s0,a3,80002a8c <__subdf3+0x770>
800023e4:	008006b7          	lui	a3,0x800
800023e8:	00d7e7b3          	or	a5,a5,a3
800023ec:	00080593          	mv	a1,a6
800023f0:	03800693          	li	a3,56
800023f4:	0ab6ca63          	blt	a3,a1,800024a8 <__subdf3+0x18c>
800023f8:	01f00693          	li	a3,31
800023fc:	06b6cc63          	blt	a3,a1,80002474 <__subdf3+0x158>
80002400:	02000813          	li	a6,32
80002404:	40b80833          	sub	a6,a6,a1
80002408:	010796b3          	sll	a3,a5,a6
8000240c:	00b658b3          	srl	a7,a2,a1
80002410:	01061833          	sll	a6,a2,a6
80002414:	0116e6b3          	or	a3,a3,a7
80002418:	01003833          	snez	a6,a6
8000241c:	0106e6b3          	or	a3,a3,a6
80002420:	00b7d5b3          	srl	a1,a5,a1
80002424:	00a68533          	add	a0,a3,a0
80002428:	00e585b3          	add	a1,a1,a4
8000242c:	00d536b3          	sltu	a3,a0,a3
80002430:	00050613          	mv	a2,a0
80002434:	00d587b3          	add	a5,a1,a3
80002438:	00879713          	slli	a4,a5,0x8
8000243c:	18075663          	bgez	a4,800025c8 <__subdf3+0x2ac>
80002440:	00140413          	addi	s0,s0,1
80002444:	7ff00713          	li	a4,2047
80002448:	58e40863          	beq	s0,a4,800029d8 <__subdf3+0x6bc>
8000244c:	ff800737          	lui	a4,0xff800
80002450:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_end+0x7f779843>
80002454:	00e7f7b3          	and	a5,a5,a4
80002458:	00165713          	srli	a4,a2,0x1
8000245c:	00167613          	andi	a2,a2,1
80002460:	00c76733          	or	a4,a4,a2
80002464:	01f79613          	slli	a2,a5,0x1f
80002468:	00e66633          	or	a2,a2,a4
8000246c:	0017d793          	srli	a5,a5,0x1
80002470:	1580006f          	j	800025c8 <__subdf3+0x2ac>
80002474:	fe058693          	addi	a3,a1,-32
80002478:	02000893          	li	a7,32
8000247c:	00d7d6b3          	srl	a3,a5,a3
80002480:	00000813          	li	a6,0
80002484:	01158863          	beq	a1,a7,80002494 <__subdf3+0x178>
80002488:	04000813          	li	a6,64
8000248c:	40b80833          	sub	a6,a6,a1
80002490:	01079833          	sll	a6,a5,a6
80002494:	00c86833          	or	a6,a6,a2
80002498:	01003833          	snez	a6,a6
8000249c:	0106e6b3          	or	a3,a3,a6
800024a0:	00000593          	li	a1,0
800024a4:	f81ff06f          	j	80002424 <__subdf3+0x108>
800024a8:	00c7e6b3          	or	a3,a5,a2
800024ac:	00d036b3          	snez	a3,a3
800024b0:	ff1ff06f          	j	800024a0 <__subdf3+0x184>
800024b4:	0c080663          	beqz	a6,80002580 <__subdf3+0x264>
800024b8:	408886b3          	sub	a3,a7,s0
800024bc:	02041263          	bnez	s0,800024e0 <__subdf3+0x1c4>
800024c0:	00a765b3          	or	a1,a4,a0
800024c4:	16058863          	beqz	a1,80002634 <__subdf3+0x318>
800024c8:	fff68593          	addi	a1,a3,-1 # 7fffff <__STACKSIZE__+0x7fbfff>
800024cc:	ee0582e3          	beqz	a1,800023b0 <__subdf3+0x94>
800024d0:	7ff00813          	li	a6,2047
800024d4:	03069063          	bne	a3,a6,800024f4 <__subdf3+0x1d8>
800024d8:	7ff00413          	li	s0,2047
800024dc:	0ec0006f          	j	800025c8 <__subdf3+0x2ac>
800024e0:	7ff00593          	li	a1,2047
800024e4:	feb88ae3          	beq	a7,a1,800024d8 <__subdf3+0x1bc>
800024e8:	008005b7          	lui	a1,0x800
800024ec:	00b76733          	or	a4,a4,a1
800024f0:	00068593          	mv	a1,a3
800024f4:	03800693          	li	a3,56
800024f8:	06b6ce63          	blt	a3,a1,80002574 <__subdf3+0x258>
800024fc:	01f00693          	li	a3,31
80002500:	04b6c063          	blt	a3,a1,80002540 <__subdf3+0x224>
80002504:	02000813          	li	a6,32
80002508:	40b80833          	sub	a6,a6,a1
8000250c:	010716b3          	sll	a3,a4,a6
80002510:	00b55333          	srl	t1,a0,a1
80002514:	01051833          	sll	a6,a0,a6
80002518:	0066e6b3          	or	a3,a3,t1
8000251c:	01003833          	snez	a6,a6
80002520:	0106e6b3          	or	a3,a3,a6
80002524:	00b755b3          	srl	a1,a4,a1
80002528:	00c68633          	add	a2,a3,a2
8000252c:	00f585b3          	add	a1,a1,a5
80002530:	00d636b3          	sltu	a3,a2,a3
80002534:	00d587b3          	add	a5,a1,a3
80002538:	00088413          	mv	s0,a7
8000253c:	efdff06f          	j	80002438 <__subdf3+0x11c>
80002540:	fe058693          	addi	a3,a1,-32 # 7fffe0 <__STACKSIZE__+0x7fbfe0>
80002544:	02000313          	li	t1,32
80002548:	00d756b3          	srl	a3,a4,a3
8000254c:	00000813          	li	a6,0
80002550:	00658863          	beq	a1,t1,80002560 <__subdf3+0x244>
80002554:	04000813          	li	a6,64
80002558:	40b80833          	sub	a6,a6,a1
8000255c:	01071833          	sll	a6,a4,a6
80002560:	00a86833          	or	a6,a6,a0
80002564:	01003833          	snez	a6,a6
80002568:	0106e6b3          	or	a3,a3,a6
8000256c:	00000593          	li	a1,0
80002570:	fb9ff06f          	j	80002528 <__subdf3+0x20c>
80002574:	00a766b3          	or	a3,a4,a0
80002578:	00d036b3          	snez	a3,a3
8000257c:	ff1ff06f          	j	8000256c <__subdf3+0x250>
80002580:	00140693          	addi	a3,s0,1
80002584:	7fe6f593          	andi	a1,a3,2046
80002588:	08059263          	bnez	a1,8000260c <__subdf3+0x2f0>
8000258c:	00a766b3          	or	a3,a4,a0
80002590:	06041063          	bnez	s0,800025f0 <__subdf3+0x2d4>
80002594:	02068a63          	beqz	a3,800025c8 <__subdf3+0x2ac>
80002598:	00c7e6b3          	or	a3,a5,a2
8000259c:	4e068863          	beqz	a3,80002a8c <__subdf3+0x770>
800025a0:	00c50633          	add	a2,a0,a2
800025a4:	00f70733          	add	a4,a4,a5
800025a8:	00a63533          	sltu	a0,a2,a0
800025ac:	00a707b3          	add	a5,a4,a0
800025b0:	00879713          	slli	a4,a5,0x8
800025b4:	00075a63          	bgez	a4,800025c8 <__subdf3+0x2ac>
800025b8:	ff800737          	lui	a4,0xff800
800025bc:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_end+0x7f779843>
800025c0:	00e7f7b3          	and	a5,a5,a4
800025c4:	00100413          	li	s0,1
800025c8:	00767713          	andi	a4,a2,7
800025cc:	40070a63          	beqz	a4,800029e0 <__subdf3+0x6c4>
800025d0:	00f67713          	andi	a4,a2,15
800025d4:	00400693          	li	a3,4
800025d8:	40d70463          	beq	a4,a3,800029e0 <__subdf3+0x6c4>
800025dc:	00460713          	addi	a4,a2,4
800025e0:	00c736b3          	sltu	a3,a4,a2
800025e4:	00d787b3          	add	a5,a5,a3
800025e8:	00070613          	mv	a2,a4
800025ec:	3f40006f          	j	800029e0 <__subdf3+0x6c4>
800025f0:	ee0684e3          	beqz	a3,800024d8 <__subdf3+0x1bc>
800025f4:	00c7e7b3          	or	a5,a5,a2
800025f8:	dc078ce3          	beqz	a5,800023d0 <__subdf3+0xb4>
800025fc:	00000913          	li	s2,0
80002600:	004007b7          	lui	a5,0x400
80002604:	00000613          	li	a2,0
80002608:	2a40006f          	j	800028ac <__subdf3+0x590>
8000260c:	7ff00593          	li	a1,2047
80002610:	3cb68263          	beq	a3,a1,800029d4 <__subdf3+0x6b8>
80002614:	00c50633          	add	a2,a0,a2
80002618:	00f70733          	add	a4,a4,a5
8000261c:	00a63533          	sltu	a0,a2,a0
80002620:	00a70733          	add	a4,a4,a0
80002624:	01f71793          	slli	a5,a4,0x1f
80002628:	00165613          	srli	a2,a2,0x1
8000262c:	00c7e633          	or	a2,a5,a2
80002630:	00175793          	srli	a5,a4,0x1
80002634:	00068413          	mv	s0,a3
80002638:	f91ff06f          	j	800025c8 <__subdf3+0x2ac>
8000263c:	0f005863          	blez	a6,8000272c <__subdf3+0x410>
80002640:	08089a63          	bnez	a7,800026d4 <__subdf3+0x3b8>
80002644:	00c7e6b3          	or	a3,a5,a2
80002648:	42068663          	beqz	a3,80002a74 <__subdf3+0x758>
8000264c:	fff80693          	addi	a3,a6,-1
80002650:	00069e63          	bnez	a3,8000266c <__subdf3+0x350>
80002654:	40c50633          	sub	a2,a0,a2
80002658:	40f70733          	sub	a4,a4,a5
8000265c:	00c53533          	sltu	a0,a0,a2
80002660:	40a707b3          	sub	a5,a4,a0
80002664:	00100413          	li	s0,1
80002668:	0500006f          	j	800026b8 <__subdf3+0x39c>
8000266c:	7ff00593          	li	a1,2047
80002670:	d6b800e3          	beq	a6,a1,800023d0 <__subdf3+0xb4>
80002674:	03800593          	li	a1,56
80002678:	0ad5c463          	blt	a1,a3,80002720 <__subdf3+0x404>
8000267c:	01f00593          	li	a1,31
80002680:	06d5c663          	blt	a1,a3,800026ec <__subdf3+0x3d0>
80002684:	02000813          	li	a6,32
80002688:	40d80833          	sub	a6,a6,a3
8000268c:	00d658b3          	srl	a7,a2,a3
80002690:	010795b3          	sll	a1,a5,a6
80002694:	01061833          	sll	a6,a2,a6
80002698:	0115e5b3          	or	a1,a1,a7
8000269c:	01003833          	snez	a6,a6
800026a0:	0105e633          	or	a2,a1,a6
800026a4:	00d7d6b3          	srl	a3,a5,a3
800026a8:	40c50633          	sub	a2,a0,a2
800026ac:	40d706b3          	sub	a3,a4,a3
800026b0:	00c53533          	sltu	a0,a0,a2
800026b4:	40a687b3          	sub	a5,a3,a0
800026b8:	00879713          	slli	a4,a5,0x8
800026bc:	f00756e3          	bgez	a4,800025c8 <__subdf3+0x2ac>
800026c0:	008004b7          	lui	s1,0x800
800026c4:	fff48493          	addi	s1,s1,-1 # 7fffff <__STACKSIZE__+0x7fbfff>
800026c8:	0097f4b3          	and	s1,a5,s1
800026cc:	00060993          	mv	s3,a2
800026d0:	21c0006f          	j	800028ec <__subdf3+0x5d0>
800026d4:	7ff00693          	li	a3,2047
800026d8:	3ad40a63          	beq	s0,a3,80002a8c <__subdf3+0x770>
800026dc:	008006b7          	lui	a3,0x800
800026e0:	00d7e7b3          	or	a5,a5,a3
800026e4:	00080693          	mv	a3,a6
800026e8:	f8dff06f          	j	80002674 <__subdf3+0x358>
800026ec:	fe068593          	addi	a1,a3,-32 # 7fffe0 <__STACKSIZE__+0x7fbfe0>
800026f0:	02000893          	li	a7,32
800026f4:	00b7d5b3          	srl	a1,a5,a1
800026f8:	00000813          	li	a6,0
800026fc:	01168863          	beq	a3,a7,8000270c <__subdf3+0x3f0>
80002700:	04000813          	li	a6,64
80002704:	40d80833          	sub	a6,a6,a3
80002708:	01079833          	sll	a6,a5,a6
8000270c:	00c86833          	or	a6,a6,a2
80002710:	01003833          	snez	a6,a6
80002714:	0105e633          	or	a2,a1,a6
80002718:	00000693          	li	a3,0
8000271c:	f8dff06f          	j	800026a8 <__subdf3+0x38c>
80002720:	00c7e633          	or	a2,a5,a2
80002724:	00c03633          	snez	a2,a2
80002728:	ff1ff06f          	j	80002718 <__subdf3+0x3fc>
8000272c:	0e080863          	beqz	a6,8000281c <__subdf3+0x500>
80002730:	40888833          	sub	a6,a7,s0
80002734:	04041063          	bnez	s0,80002774 <__subdf3+0x458>
80002738:	00a765b3          	or	a1,a4,a0
8000273c:	34058463          	beqz	a1,80002a84 <__subdf3+0x768>
80002740:	fff80593          	addi	a1,a6,-1
80002744:	02059063          	bnez	a1,80002764 <__subdf3+0x448>
80002748:	40a60533          	sub	a0,a2,a0
8000274c:	00a635b3          	sltu	a1,a2,a0
80002750:	40e78733          	sub	a4,a5,a4
80002754:	00050613          	mv	a2,a0
80002758:	40b707b3          	sub	a5,a4,a1
8000275c:	00068913          	mv	s2,a3
80002760:	f05ff06f          	j	80002664 <__subdf3+0x348>
80002764:	7ff00313          	li	t1,2047
80002768:	02681063          	bne	a6,t1,80002788 <__subdf3+0x46c>
8000276c:	7ff00413          	li	s0,2047
80002770:	10c0006f          	j	8000287c <__subdf3+0x560>
80002774:	7ff00593          	li	a1,2047
80002778:	feb88ae3          	beq	a7,a1,8000276c <__subdf3+0x450>
8000277c:	008005b7          	lui	a1,0x800
80002780:	00b76733          	or	a4,a4,a1
80002784:	00080593          	mv	a1,a6
80002788:	03800813          	li	a6,56
8000278c:	08b84263          	blt	a6,a1,80002810 <__subdf3+0x4f4>
80002790:	01f00813          	li	a6,31
80002794:	04b84463          	blt	a6,a1,800027dc <__subdf3+0x4c0>
80002798:	02000313          	li	t1,32
8000279c:	40b30333          	sub	t1,t1,a1
800027a0:	00b55e33          	srl	t3,a0,a1
800027a4:	00671833          	sll	a6,a4,t1
800027a8:	00651333          	sll	t1,a0,t1
800027ac:	01c86833          	or	a6,a6,t3
800027b0:	00603333          	snez	t1,t1
800027b4:	00686533          	or	a0,a6,t1
800027b8:	00b755b3          	srl	a1,a4,a1
800027bc:	40a60533          	sub	a0,a2,a0
800027c0:	00a63733          	sltu	a4,a2,a0
800027c4:	40b785b3          	sub	a1,a5,a1
800027c8:	00050613          	mv	a2,a0
800027cc:	40e587b3          	sub	a5,a1,a4
800027d0:	00088413          	mv	s0,a7
800027d4:	00068913          	mv	s2,a3
800027d8:	ee1ff06f          	j	800026b8 <__subdf3+0x39c>
800027dc:	fe058813          	addi	a6,a1,-32 # 7fffe0 <__STACKSIZE__+0x7fbfe0>
800027e0:	02000e13          	li	t3,32
800027e4:	01075833          	srl	a6,a4,a6
800027e8:	00000313          	li	t1,0
800027ec:	01c58863          	beq	a1,t3,800027fc <__subdf3+0x4e0>
800027f0:	04000313          	li	t1,64
800027f4:	40b30333          	sub	t1,t1,a1
800027f8:	00671333          	sll	t1,a4,t1
800027fc:	00a36333          	or	t1,t1,a0
80002800:	00603333          	snez	t1,t1
80002804:	00686533          	or	a0,a6,t1
80002808:	00000593          	li	a1,0
8000280c:	fb1ff06f          	j	800027bc <__subdf3+0x4a0>
80002810:	00a76533          	or	a0,a4,a0
80002814:	00a03533          	snez	a0,a0
80002818:	ff1ff06f          	j	80002808 <__subdf3+0x4ec>
8000281c:	00140593          	addi	a1,s0,1
80002820:	7fe5f593          	andi	a1,a1,2046
80002824:	08059c63          	bnez	a1,800028bc <__subdf3+0x5a0>
80002828:	00c7e5b3          	or	a1,a5,a2
8000282c:	00a76833          	or	a6,a4,a0
80002830:	06041463          	bnez	s0,80002898 <__subdf3+0x57c>
80002834:	00081c63          	bnez	a6,8000284c <__subdf3+0x530>
80002838:	04059263          	bnez	a1,8000287c <__subdf3+0x560>
8000283c:	00000793          	li	a5,0
80002840:	00000613          	li	a2,0
80002844:	00000913          	li	s2,0
80002848:	1980006f          	j	800029e0 <__subdf3+0x6c4>
8000284c:	24058063          	beqz	a1,80002a8c <__subdf3+0x770>
80002850:	40c50833          	sub	a6,a0,a2
80002854:	010538b3          	sltu	a7,a0,a6
80002858:	40f705b3          	sub	a1,a4,a5
8000285c:	411585b3          	sub	a1,a1,a7
80002860:	00859893          	slli	a7,a1,0x8
80002864:	0208d063          	bgez	a7,80002884 <__subdf3+0x568>
80002868:	40a60533          	sub	a0,a2,a0
8000286c:	00a635b3          	sltu	a1,a2,a0
80002870:	40e78733          	sub	a4,a5,a4
80002874:	00050613          	mv	a2,a0
80002878:	40b707b3          	sub	a5,a4,a1
8000287c:	00068913          	mv	s2,a3
80002880:	d49ff06f          	j	800025c8 <__subdf3+0x2ac>
80002884:	00b86633          	or	a2,a6,a1
80002888:	20060863          	beqz	a2,80002a98 <__subdf3+0x77c>
8000288c:	00058793          	mv	a5,a1
80002890:	00080613          	mv	a2,a6
80002894:	d35ff06f          	j	800025c8 <__subdf3+0x2ac>
80002898:	00081e63          	bnez	a6,800028b4 <__subdf3+0x598>
8000289c:	20059263          	bnez	a1,80002aa0 <__subdf3+0x784>
800028a0:	00000613          	li	a2,0
800028a4:	00000913          	li	s2,0
800028a8:	004007b7          	lui	a5,0x400
800028ac:	7ff00413          	li	s0,2047
800028b0:	1300006f          	j	800029e0 <__subdf3+0x6c4>
800028b4:	d40594e3          	bnez	a1,800025fc <__subdf3+0x2e0>
800028b8:	b19ff06f          	j	800023d0 <__subdf3+0xb4>
800028bc:	40c505b3          	sub	a1,a0,a2
800028c0:	00b53833          	sltu	a6,a0,a1
800028c4:	40f704b3          	sub	s1,a4,a5
800028c8:	410484b3          	sub	s1,s1,a6
800028cc:	00849813          	slli	a6,s1,0x8
800028d0:	00058993          	mv	s3,a1
800028d4:	08085063          	bgez	a6,80002954 <__subdf3+0x638>
800028d8:	40a609b3          	sub	s3,a2,a0
800028dc:	40e784b3          	sub	s1,a5,a4
800028e0:	01363633          	sltu	a2,a2,s3
800028e4:	40c484b3          	sub	s1,s1,a2
800028e8:	00068913          	mv	s2,a3
800028ec:	06048e63          	beqz	s1,80002968 <__subdf3+0x64c>
800028f0:	00048513          	mv	a0,s1
800028f4:	7c1020ef          	jal	ra,800058b4 <__clzsi2>
800028f8:	ff850613          	addi	a2,a0,-8
800028fc:	02000793          	li	a5,32
80002900:	40c787b3          	sub	a5,a5,a2
80002904:	00c494b3          	sll	s1,s1,a2
80002908:	00f9d7b3          	srl	a5,s3,a5
8000290c:	0097e7b3          	or	a5,a5,s1
80002910:	00c994b3          	sll	s1,s3,a2
80002914:	0a864463          	blt	a2,s0,800029bc <__subdf3+0x6a0>
80002918:	40860633          	sub	a2,a2,s0
8000291c:	00160693          	addi	a3,a2,1
80002920:	01f00713          	li	a4,31
80002924:	06d74263          	blt	a4,a3,80002988 <__subdf3+0x66c>
80002928:	02000713          	li	a4,32
8000292c:	40d70733          	sub	a4,a4,a3
80002930:	00e79633          	sll	a2,a5,a4
80002934:	00d4d5b3          	srl	a1,s1,a3
80002938:	00e49733          	sll	a4,s1,a4
8000293c:	00b66633          	or	a2,a2,a1
80002940:	00e03733          	snez	a4,a4
80002944:	00e66633          	or	a2,a2,a4
80002948:	00d7d7b3          	srl	a5,a5,a3
8000294c:	00000413          	li	s0,0
80002950:	c79ff06f          	j	800025c8 <__subdf3+0x2ac>
80002954:	0095e633          	or	a2,a1,s1
80002958:	f8061ae3          	bnez	a2,800028ec <__subdf3+0x5d0>
8000295c:	00000793          	li	a5,0
80002960:	00000413          	li	s0,0
80002964:	ee1ff06f          	j	80002844 <__subdf3+0x528>
80002968:	00098513          	mv	a0,s3
8000296c:	749020ef          	jal	ra,800058b4 <__clzsi2>
80002970:	01850613          	addi	a2,a0,24
80002974:	01f00793          	li	a5,31
80002978:	f8c7d2e3          	bge	a5,a2,800028fc <__subdf3+0x5e0>
8000297c:	ff850793          	addi	a5,a0,-8
80002980:	00f997b3          	sll	a5,s3,a5
80002984:	f91ff06f          	j	80002914 <__subdf3+0x5f8>
80002988:	fe160613          	addi	a2,a2,-31
8000298c:	02000593          	li	a1,32
80002990:	00c7d633          	srl	a2,a5,a2
80002994:	00000713          	li	a4,0
80002998:	00b68863          	beq	a3,a1,800029a8 <__subdf3+0x68c>
8000299c:	04000713          	li	a4,64
800029a0:	40d70733          	sub	a4,a4,a3
800029a4:	00e79733          	sll	a4,a5,a4
800029a8:	00e4e733          	or	a4,s1,a4
800029ac:	00e03733          	snez	a4,a4
800029b0:	00e66633          	or	a2,a2,a4
800029b4:	00000793          	li	a5,0
800029b8:	f95ff06f          	j	8000294c <__subdf3+0x630>
800029bc:	ff800737          	lui	a4,0xff800
800029c0:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_end+0x7f779843>
800029c4:	40c40433          	sub	s0,s0,a2
800029c8:	00e7f7b3          	and	a5,a5,a4
800029cc:	00048613          	mv	a2,s1
800029d0:	bf9ff06f          	j	800025c8 <__subdf3+0x2ac>
800029d4:	7ff00413          	li	s0,2047
800029d8:	00000793          	li	a5,0
800029dc:	00000613          	li	a2,0
800029e0:	00879713          	slli	a4,a5,0x8
800029e4:	00075e63          	bgez	a4,80002a00 <__subdf3+0x6e4>
800029e8:	00140413          	addi	s0,s0,1
800029ec:	7ff00713          	li	a4,2047
800029f0:	0ae40c63          	beq	s0,a4,80002aa8 <__subdf3+0x78c>
800029f4:	ff800737          	lui	a4,0xff800
800029f8:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_end+0x7f779843>
800029fc:	00e7f7b3          	and	a5,a5,a4
80002a00:	01d79713          	slli	a4,a5,0x1d
80002a04:	00365613          	srli	a2,a2,0x3
80002a08:	7ff00693          	li	a3,2047
80002a0c:	00c76733          	or	a4,a4,a2
80002a10:	0037d793          	srli	a5,a5,0x3
80002a14:	00d41e63          	bne	s0,a3,80002a30 <__subdf3+0x714>
80002a18:	00f76733          	or	a4,a4,a5
80002a1c:	00000793          	li	a5,0
80002a20:	00070863          	beqz	a4,80002a30 <__subdf3+0x714>
80002a24:	000807b7          	lui	a5,0x80
80002a28:	00000713          	li	a4,0
80002a2c:	00000913          	li	s2,0
80002a30:	7ff006b7          	lui	a3,0x7ff00
80002a34:	01441413          	slli	s0,s0,0x14
80002a38:	00c79793          	slli	a5,a5,0xc
80002a3c:	00d47433          	and	s0,s0,a3
80002a40:	00c7d793          	srli	a5,a5,0xc
80002a44:	00f46433          	or	s0,s0,a5
80002a48:	01f91793          	slli	a5,s2,0x1f
80002a4c:	01c12083          	lw	ra,28(sp)
80002a50:	00f466b3          	or	a3,s0,a5
80002a54:	01812403          	lw	s0,24(sp)
80002a58:	01412483          	lw	s1,20(sp)
80002a5c:	01012903          	lw	s2,16(sp)
80002a60:	00c12983          	lw	s3,12(sp)
80002a64:	00070513          	mv	a0,a4
80002a68:	00068593          	mv	a1,a3
80002a6c:	02010113          	addi	sp,sp,32
80002a70:	00008067          	ret
80002a74:	00070793          	mv	a5,a4
80002a78:	00050613          	mv	a2,a0
80002a7c:	00080413          	mv	s0,a6
80002a80:	b49ff06f          	j	800025c8 <__subdf3+0x2ac>
80002a84:	00080413          	mv	s0,a6
80002a88:	df5ff06f          	j	8000287c <__subdf3+0x560>
80002a8c:	00070793          	mv	a5,a4
80002a90:	00050613          	mv	a2,a0
80002a94:	b35ff06f          	j	800025c8 <__subdf3+0x2ac>
80002a98:	00000793          	li	a5,0
80002a9c:	da9ff06f          	j	80002844 <__subdf3+0x528>
80002aa0:	00068913          	mv	s2,a3
80002aa4:	a35ff06f          	j	800024d8 <__subdf3+0x1bc>
80002aa8:	00000793          	li	a5,0
80002aac:	00000613          	li	a2,0
80002ab0:	f51ff06f          	j	80002a00 <__subdf3+0x6e4>

80002ab4 <__fixdfsi>:
80002ab4:	0145d713          	srli	a4,a1,0x14
80002ab8:	001006b7          	lui	a3,0x100
80002abc:	fff68793          	addi	a5,a3,-1 # fffff <__STACKSIZE__+0xfbfff>
80002ac0:	7ff77713          	andi	a4,a4,2047
80002ac4:	3fe00613          	li	a2,1022
80002ac8:	00b7f7b3          	and	a5,a5,a1
80002acc:	01f5d593          	srli	a1,a1,0x1f
80002ad0:	04e65e63          	bge	a2,a4,80002b2c <__fixdfsi+0x78>
80002ad4:	41d00613          	li	a2,1053
80002ad8:	00e65a63          	bge	a2,a4,80002aec <__fixdfsi+0x38>
80002adc:	80000537          	lui	a0,0x80000
80002ae0:	fff50513          	addi	a0,a0,-1 # 7fffffff <__STACKSIZE__+0x7fffbfff>
80002ae4:	00a58533          	add	a0,a1,a0
80002ae8:	00008067          	ret
80002aec:	00d7e7b3          	or	a5,a5,a3
80002af0:	43300693          	li	a3,1075
80002af4:	40e686b3          	sub	a3,a3,a4
80002af8:	01f00613          	li	a2,31
80002afc:	02d64063          	blt	a2,a3,80002b1c <__fixdfsi+0x68>
80002b00:	bed70713          	addi	a4,a4,-1043
80002b04:	00e797b3          	sll	a5,a5,a4
80002b08:	00d55533          	srl	a0,a0,a3
80002b0c:	00a7e533          	or	a0,a5,a0
80002b10:	02058063          	beqz	a1,80002b30 <__fixdfsi+0x7c>
80002b14:	40a00533          	neg	a0,a0
80002b18:	00008067          	ret
80002b1c:	41300693          	li	a3,1043
80002b20:	40e68733          	sub	a4,a3,a4
80002b24:	00e7d533          	srl	a0,a5,a4
80002b28:	fe9ff06f          	j	80002b10 <__fixdfsi+0x5c>
80002b2c:	00000513          	li	a0,0
80002b30:	00008067          	ret

80002b34 <__floatsidf>:
80002b34:	ff010113          	addi	sp,sp,-16
80002b38:	00112623          	sw	ra,12(sp)
80002b3c:	00812423          	sw	s0,8(sp)
80002b40:	00912223          	sw	s1,4(sp)
80002b44:	08050663          	beqz	a0,80002bd0 <__floatsidf+0x9c>
80002b48:	41f55793          	srai	a5,a0,0x1f
80002b4c:	00a7c433          	xor	s0,a5,a0
80002b50:	40f40433          	sub	s0,s0,a5
80002b54:	01f55493          	srli	s1,a0,0x1f
80002b58:	00040513          	mv	a0,s0
80002b5c:	559020ef          	jal	ra,800058b4 <__clzsi2>
80002b60:	41e00713          	li	a4,1054
80002b64:	00a00793          	li	a5,10
80002b68:	40a70733          	sub	a4,a4,a0
80002b6c:	04a7c863          	blt	a5,a0,80002bbc <__floatsidf+0x88>
80002b70:	00b00793          	li	a5,11
80002b74:	40a787b3          	sub	a5,a5,a0
80002b78:	01550513          	addi	a0,a0,21
80002b7c:	00f457b3          	srl	a5,s0,a5
80002b80:	00a41433          	sll	s0,s0,a0
80002b84:	00048513          	mv	a0,s1
80002b88:	00c79793          	slli	a5,a5,0xc
80002b8c:	00c7d793          	srli	a5,a5,0xc
80002b90:	01471713          	slli	a4,a4,0x14
80002b94:	01f51513          	slli	a0,a0,0x1f
80002b98:	00f76733          	or	a4,a4,a5
80002b9c:	00c12083          	lw	ra,12(sp)
80002ba0:	00a767b3          	or	a5,a4,a0
80002ba4:	00040513          	mv	a0,s0
80002ba8:	00812403          	lw	s0,8(sp)
80002bac:	00412483          	lw	s1,4(sp)
80002bb0:	00078593          	mv	a1,a5
80002bb4:	01010113          	addi	sp,sp,16
80002bb8:	00008067          	ret
80002bbc:	ff550513          	addi	a0,a0,-11
80002bc0:	00a417b3          	sll	a5,s0,a0
80002bc4:	00048513          	mv	a0,s1
80002bc8:	00000413          	li	s0,0
80002bcc:	fbdff06f          	j	80002b88 <__floatsidf+0x54>
80002bd0:	00000713          	li	a4,0
80002bd4:	00000793          	li	a5,0
80002bd8:	ff1ff06f          	j	80002bc8 <__floatsidf+0x94>

80002bdc <__eqtf2>:
80002bdc:	00c52783          	lw	a5,12(a0)
80002be0:	0005af03          	lw	t5,0(a1)
80002be4:	0045af83          	lw	t6,4(a1)
80002be8:	0085a283          	lw	t0,8(a1)
80002bec:	00c5a583          	lw	a1,12(a1)
80002bf0:	00008737          	lui	a4,0x8
80002bf4:	0107d693          	srli	a3,a5,0x10
80002bf8:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
80002bfc:	01079813          	slli	a6,a5,0x10
80002c00:	01059e93          	slli	t4,a1,0x10
80002c04:	01f7d613          	srli	a2,a5,0x1f
80002c08:	00e6f6b3          	and	a3,a3,a4
80002c0c:	0105d793          	srli	a5,a1,0x10
80002c10:	00052883          	lw	a7,0(a0)
80002c14:	00452303          	lw	t1,4(a0)
80002c18:	00852e03          	lw	t3,8(a0)
80002c1c:	ff010113          	addi	sp,sp,-16
80002c20:	01085813          	srli	a6,a6,0x10
80002c24:	010ede93          	srli	t4,t4,0x10
80002c28:	00e7f7b3          	and	a5,a5,a4
80002c2c:	01f5d593          	srli	a1,a1,0x1f
80002c30:	02e69063          	bne	a3,a4,80002c50 <__eqtf2+0x74>
80002c34:	0068e733          	or	a4,a7,t1
80002c38:	01c76733          	or	a4,a4,t3
80002c3c:	01076733          	or	a4,a4,a6
80002c40:	00100513          	li	a0,1
80002c44:	04071a63          	bnez	a4,80002c98 <__eqtf2+0xbc>
80002c48:	04d79863          	bne	a5,a3,80002c98 <__eqtf2+0xbc>
80002c4c:	0080006f          	j	80002c54 <__eqtf2+0x78>
80002c50:	00e79c63          	bne	a5,a4,80002c68 <__eqtf2+0x8c>
80002c54:	01ff6733          	or	a4,t5,t6
80002c58:	00576733          	or	a4,a4,t0
80002c5c:	01d76733          	or	a4,a4,t4
80002c60:	00100513          	li	a0,1
80002c64:	02071a63          	bnez	a4,80002c98 <__eqtf2+0xbc>
80002c68:	00100513          	li	a0,1
80002c6c:	02d79663          	bne	a5,a3,80002c98 <__eqtf2+0xbc>
80002c70:	03e89463          	bne	a7,t5,80002c98 <__eqtf2+0xbc>
80002c74:	03f31263          	bne	t1,t6,80002c98 <__eqtf2+0xbc>
80002c78:	025e1063          	bne	t3,t0,80002c98 <__eqtf2+0xbc>
80002c7c:	01d81e63          	bne	a6,t4,80002c98 <__eqtf2+0xbc>
80002c80:	02b60063          	beq	a2,a1,80002ca0 <__eqtf2+0xc4>
80002c84:	00079a63          	bnez	a5,80002c98 <__eqtf2+0xbc>
80002c88:	0068e533          	or	a0,a7,t1
80002c8c:	01c56533          	or	a0,a0,t3
80002c90:	01056533          	or	a0,a0,a6
80002c94:	00a03533          	snez	a0,a0
80002c98:	01010113          	addi	sp,sp,16
80002c9c:	00008067          	ret
80002ca0:	00000513          	li	a0,0
80002ca4:	ff5ff06f          	j	80002c98 <__eqtf2+0xbc>

80002ca8 <__getf2>:
80002ca8:	00c52783          	lw	a5,12(a0)
80002cac:	00c5a703          	lw	a4,12(a1)
80002cb0:	000086b7          	lui	a3,0x8
80002cb4:	fff68693          	addi	a3,a3,-1 # 7fff <__STACKSIZE__+0x3fff>
80002cb8:	0005ae83          	lw	t4,0(a1)
80002cbc:	0045af03          	lw	t5,4(a1)
80002cc0:	0085af83          	lw	t6,8(a1)
80002cc4:	0107d593          	srli	a1,a5,0x10
80002cc8:	01079293          	slli	t0,a5,0x10
80002ccc:	01071393          	slli	t2,a4,0x10
80002cd0:	01075613          	srli	a2,a4,0x10
80002cd4:	00d5f5b3          	and	a1,a1,a3
80002cd8:	00052883          	lw	a7,0(a0)
80002cdc:	00452303          	lw	t1,4(a0)
80002ce0:	00852e03          	lw	t3,8(a0)
80002ce4:	ff010113          	addi	sp,sp,-16
80002ce8:	0102d293          	srli	t0,t0,0x10
80002cec:	01f7d793          	srli	a5,a5,0x1f
80002cf0:	0103d393          	srli	t2,t2,0x10
80002cf4:	00d67633          	and	a2,a2,a3
80002cf8:	01f75713          	srli	a4,a4,0x1f
80002cfc:	00d59c63          	bne	a1,a3,80002d14 <__getf2+0x6c>
80002d00:	011366b3          	or	a3,t1,a7
80002d04:	01c6e6b3          	or	a3,a3,t3
80002d08:	0056e6b3          	or	a3,a3,t0
80002d0c:	ffe00513          	li	a0,-2
80002d10:	06069263          	bnez	a3,80002d74 <__getf2+0xcc>
80002d14:	000086b7          	lui	a3,0x8
80002d18:	fff68693          	addi	a3,a3,-1 # 7fff <__STACKSIZE__+0x3fff>
80002d1c:	00d61c63          	bne	a2,a3,80002d34 <__getf2+0x8c>
80002d20:	01eee6b3          	or	a3,t4,t5
80002d24:	01f6e6b3          	or	a3,a3,t6
80002d28:	0076e6b3          	or	a3,a3,t2
80002d2c:	ffe00513          	li	a0,-2
80002d30:	04069263          	bnez	a3,80002d74 <__getf2+0xcc>
80002d34:	00000693          	li	a3,0
80002d38:	00059a63          	bnez	a1,80002d4c <__getf2+0xa4>
80002d3c:	011366b3          	or	a3,t1,a7
80002d40:	01c6e6b3          	or	a3,a3,t3
80002d44:	0056e6b3          	or	a3,a3,t0
80002d48:	0016b693          	seqz	a3,a3
80002d4c:	08061063          	bnez	a2,80002dcc <__getf2+0x124>
80002d50:	01eee833          	or	a6,t4,t5
80002d54:	01f86833          	or	a6,a6,t6
80002d58:	00786833          	or	a6,a6,t2
80002d5c:	02068063          	beqz	a3,80002d7c <__getf2+0xd4>
80002d60:	00000513          	li	a0,0
80002d64:	00080863          	beqz	a6,80002d74 <__getf2+0xcc>
80002d68:	fff00513          	li	a0,-1
80002d6c:	00070463          	beqz	a4,80002d74 <__getf2+0xcc>
80002d70:	00070513          	mv	a0,a4
80002d74:	01010113          	addi	sp,sp,16
80002d78:	00008067          	ret
80002d7c:	00078513          	mv	a0,a5
80002d80:	04081a63          	bnez	a6,80002dd4 <__getf2+0x12c>
80002d84:	00100513          	li	a0,1
80002d88:	fe0786e3          	beqz	a5,80002d74 <__getf2+0xcc>
80002d8c:	0580006f          	j	80002de4 <__getf2+0x13c>
80002d90:	00c5d663          	bge	a1,a2,80002d9c <__getf2+0xf4>
80002d94:	fe0710e3          	bnez	a4,80002d74 <__getf2+0xcc>
80002d98:	04c0006f          	j	80002de4 <__getf2+0x13c>
80002d9c:	fe53e4e3          	bltu	t2,t0,80002d84 <__getf2+0xdc>
80002da0:	00729e63          	bne	t0,t2,80002dbc <__getf2+0x114>
80002da4:	ffcfe0e3          	bltu	t6,t3,80002d84 <__getf2+0xdc>
80002da8:	01fe1a63          	bne	t3,t6,80002dbc <__getf2+0x114>
80002dac:	fc6f6ce3          	bltu	t5,t1,80002d84 <__getf2+0xdc>
80002db0:	01e31663          	bne	t1,t5,80002dbc <__getf2+0x114>
80002db4:	fd1ee8e3          	bltu	t4,a7,80002d84 <__getf2+0xdc>
80002db8:	01d8f663          	bgeu	a7,t4,80002dc4 <__getf2+0x11c>
80002dbc:	fa079ce3          	bnez	a5,80002d74 <__getf2+0xcc>
80002dc0:	0240006f          	j	80002de4 <__getf2+0x13c>
80002dc4:	00000513          	li	a0,0
80002dc8:	fadff06f          	j	80002d74 <__getf2+0xcc>
80002dcc:	00078513          	mv	a0,a5
80002dd0:	f8069ce3          	bnez	a3,80002d68 <__getf2+0xc0>
80002dd4:	faf718e3          	bne	a4,a5,80002d84 <__getf2+0xdc>
80002dd8:	fab65ce3          	bge	a2,a1,80002d90 <__getf2+0xe8>
80002ddc:	00100513          	li	a0,1
80002de0:	f8070ae3          	beqz	a4,80002d74 <__getf2+0xcc>
80002de4:	fff00513          	li	a0,-1
80002de8:	f8dff06f          	j	80002d74 <__getf2+0xcc>

80002dec <__letf2>:
80002dec:	00c52783          	lw	a5,12(a0)
80002df0:	00c5a703          	lw	a4,12(a1)
80002df4:	000086b7          	lui	a3,0x8
80002df8:	fff68693          	addi	a3,a3,-1 # 7fff <__STACKSIZE__+0x3fff>
80002dfc:	0005ae83          	lw	t4,0(a1)
80002e00:	0045af03          	lw	t5,4(a1)
80002e04:	0085af83          	lw	t6,8(a1)
80002e08:	0107d593          	srli	a1,a5,0x10
80002e0c:	01079293          	slli	t0,a5,0x10
80002e10:	01071393          	slli	t2,a4,0x10
80002e14:	01075613          	srli	a2,a4,0x10
80002e18:	00d5f5b3          	and	a1,a1,a3
80002e1c:	00052883          	lw	a7,0(a0)
80002e20:	00452303          	lw	t1,4(a0)
80002e24:	00852e03          	lw	t3,8(a0)
80002e28:	ff010113          	addi	sp,sp,-16
80002e2c:	0102d293          	srli	t0,t0,0x10
80002e30:	01f7d793          	srli	a5,a5,0x1f
80002e34:	0103d393          	srli	t2,t2,0x10
80002e38:	00d67633          	and	a2,a2,a3
80002e3c:	01f75713          	srli	a4,a4,0x1f
80002e40:	00d59c63          	bne	a1,a3,80002e58 <__letf2+0x6c>
80002e44:	011366b3          	or	a3,t1,a7
80002e48:	01c6e6b3          	or	a3,a3,t3
80002e4c:	0056e6b3          	or	a3,a3,t0
80002e50:	00200513          	li	a0,2
80002e54:	06069263          	bnez	a3,80002eb8 <__letf2+0xcc>
80002e58:	000086b7          	lui	a3,0x8
80002e5c:	fff68693          	addi	a3,a3,-1 # 7fff <__STACKSIZE__+0x3fff>
80002e60:	00d61c63          	bne	a2,a3,80002e78 <__letf2+0x8c>
80002e64:	01eee6b3          	or	a3,t4,t5
80002e68:	01f6e6b3          	or	a3,a3,t6
80002e6c:	0076e6b3          	or	a3,a3,t2
80002e70:	00200513          	li	a0,2
80002e74:	04069263          	bnez	a3,80002eb8 <__letf2+0xcc>
80002e78:	00000693          	li	a3,0
80002e7c:	00059a63          	bnez	a1,80002e90 <__letf2+0xa4>
80002e80:	011366b3          	or	a3,t1,a7
80002e84:	01c6e6b3          	or	a3,a3,t3
80002e88:	0056e6b3          	or	a3,a3,t0
80002e8c:	0016b693          	seqz	a3,a3
80002e90:	08061063          	bnez	a2,80002f10 <__letf2+0x124>
80002e94:	01eee833          	or	a6,t4,t5
80002e98:	01f86833          	or	a6,a6,t6
80002e9c:	00786833          	or	a6,a6,t2
80002ea0:	02068063          	beqz	a3,80002ec0 <__letf2+0xd4>
80002ea4:	00000513          	li	a0,0
80002ea8:	00080863          	beqz	a6,80002eb8 <__letf2+0xcc>
80002eac:	fff00513          	li	a0,-1
80002eb0:	00070463          	beqz	a4,80002eb8 <__letf2+0xcc>
80002eb4:	00070513          	mv	a0,a4
80002eb8:	01010113          	addi	sp,sp,16
80002ebc:	00008067          	ret
80002ec0:	00078513          	mv	a0,a5
80002ec4:	04081a63          	bnez	a6,80002f18 <__letf2+0x12c>
80002ec8:	00100513          	li	a0,1
80002ecc:	fe0786e3          	beqz	a5,80002eb8 <__letf2+0xcc>
80002ed0:	0580006f          	j	80002f28 <__letf2+0x13c>
80002ed4:	00c5d663          	bge	a1,a2,80002ee0 <__letf2+0xf4>
80002ed8:	fe0710e3          	bnez	a4,80002eb8 <__letf2+0xcc>
80002edc:	04c0006f          	j	80002f28 <__letf2+0x13c>
80002ee0:	fe53e4e3          	bltu	t2,t0,80002ec8 <__letf2+0xdc>
80002ee4:	00729e63          	bne	t0,t2,80002f00 <__letf2+0x114>
80002ee8:	ffcfe0e3          	bltu	t6,t3,80002ec8 <__letf2+0xdc>
80002eec:	01fe1a63          	bne	t3,t6,80002f00 <__letf2+0x114>
80002ef0:	fc6f6ce3          	bltu	t5,t1,80002ec8 <__letf2+0xdc>
80002ef4:	01e31663          	bne	t1,t5,80002f00 <__letf2+0x114>
80002ef8:	fd1ee8e3          	bltu	t4,a7,80002ec8 <__letf2+0xdc>
80002efc:	01d8f663          	bgeu	a7,t4,80002f08 <__letf2+0x11c>
80002f00:	fa079ce3          	bnez	a5,80002eb8 <__letf2+0xcc>
80002f04:	0240006f          	j	80002f28 <__letf2+0x13c>
80002f08:	00000513          	li	a0,0
80002f0c:	fadff06f          	j	80002eb8 <__letf2+0xcc>
80002f10:	00078513          	mv	a0,a5
80002f14:	f8069ce3          	bnez	a3,80002eac <__letf2+0xc0>
80002f18:	faf718e3          	bne	a4,a5,80002ec8 <__letf2+0xdc>
80002f1c:	fab65ce3          	bge	a2,a1,80002ed4 <__letf2+0xe8>
80002f20:	00100513          	li	a0,1
80002f24:	f8070ae3          	beqz	a4,80002eb8 <__letf2+0xcc>
80002f28:	fff00513          	li	a0,-1
80002f2c:	f8dff06f          	j	80002eb8 <__letf2+0xcc>

80002f30 <__multf3>:
80002f30:	f5010113          	addi	sp,sp,-176
80002f34:	09312e23          	sw	s3,156(sp)
80002f38:	00c5a983          	lw	s3,12(a1)
80002f3c:	0005a783          	lw	a5,0(a1)
80002f40:	0085a683          	lw	a3,8(a1)
80002f44:	0a812423          	sw	s0,168(sp)
80002f48:	00050413          	mv	s0,a0
80002f4c:	0045a503          	lw	a0,4(a1)
80002f50:	01099713          	slli	a4,s3,0x10
80002f54:	0b212023          	sw	s2,160(sp)
80002f58:	09412c23          	sw	s4,152(sp)
80002f5c:	00062903          	lw	s2,0(a2)
80002f60:	00c62a03          	lw	s4,12(a2)
80002f64:	09512a23          	sw	s5,148(sp)
80002f68:	09612823          	sw	s6,144(sp)
80002f6c:	00862a83          	lw	s5,8(a2)
80002f70:	00462b03          	lw	s6,4(a2)
80002f74:	00008637          	lui	a2,0x8
80002f78:	0a912223          	sw	s1,164(sp)
80002f7c:	01075713          	srli	a4,a4,0x10
80002f80:	0109d493          	srli	s1,s3,0x10
80002f84:	fff60613          	addi	a2,a2,-1 # 7fff <__STACKSIZE__+0x3fff>
80002f88:	05312e23          	sw	s3,92(sp)
80002f8c:	0a112623          	sw	ra,172(sp)
80002f90:	09712623          	sw	s7,140(sp)
80002f94:	09812423          	sw	s8,136(sp)
80002f98:	09912223          	sw	s9,132(sp)
80002f9c:	09a12023          	sw	s10,128(sp)
80002fa0:	07b12e23          	sw	s11,124(sp)
80002fa4:	04f12823          	sw	a5,80(sp)
80002fa8:	04a12a23          	sw	a0,84(sp)
80002fac:	04d12c23          	sw	a3,88(sp)
80002fb0:	02f12023          	sw	a5,32(sp)
80002fb4:	02a12223          	sw	a0,36(sp)
80002fb8:	02d12423          	sw	a3,40(sp)
80002fbc:	02e12623          	sw	a4,44(sp)
80002fc0:	00c4f4b3          	and	s1,s1,a2
80002fc4:	01f9d993          	srli	s3,s3,0x1f
80002fc8:	080482e3          	beqz	s1,8000384c <__multf3+0x91c>
80002fcc:	1ac48ce3          	beq	s1,a2,80003984 <__multf3+0xa54>
80002fd0:	000106b7          	lui	a3,0x10
80002fd4:	00d76733          	or	a4,a4,a3
80002fd8:	02e12623          	sw	a4,44(sp)
80002fdc:	02010593          	addi	a1,sp,32
80002fe0:	02c10713          	addi	a4,sp,44
80002fe4:	00072683          	lw	a3,0(a4)
80002fe8:	ffc72603          	lw	a2,-4(a4)
80002fec:	ffc70713          	addi	a4,a4,-4
80002ff0:	00369693          	slli	a3,a3,0x3
80002ff4:	01d65613          	srli	a2,a2,0x1d
80002ff8:	00c6e6b3          	or	a3,a3,a2
80002ffc:	00d72223          	sw	a3,4(a4)
80003000:	fee592e3          	bne	a1,a4,80002fe4 <__multf3+0xb4>
80003004:	00379793          	slli	a5,a5,0x3
80003008:	02f12023          	sw	a5,32(sp)
8000300c:	ffffc7b7          	lui	a5,0xffffc
80003010:	00178793          	addi	a5,a5,1 # ffffc001 <__bss_end+0x7ff75845>
80003014:	00f484b3          	add	s1,s1,a5
80003018:	00000b93          	li	s7,0
8000301c:	010a1513          	slli	a0,s4,0x10
80003020:	00008737          	lui	a4,0x8
80003024:	010a5793          	srli	a5,s4,0x10
80003028:	01055513          	srli	a0,a0,0x10
8000302c:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
80003030:	05412e23          	sw	s4,92(sp)
80003034:	05212823          	sw	s2,80(sp)
80003038:	05612a23          	sw	s6,84(sp)
8000303c:	05512c23          	sw	s5,88(sp)
80003040:	03212823          	sw	s2,48(sp)
80003044:	03612a23          	sw	s6,52(sp)
80003048:	03512c23          	sw	s5,56(sp)
8000304c:	02a12e23          	sw	a0,60(sp)
80003050:	00e7f7b3          	and	a5,a5,a4
80003054:	01fa5a13          	srli	s4,s4,0x1f
80003058:	14078ae3          	beqz	a5,800039ac <__multf3+0xa7c>
8000305c:	28e784e3          	beq	a5,a4,80003ae4 <__multf3+0xbb4>
80003060:	00010737          	lui	a4,0x10
80003064:	00e56533          	or	a0,a0,a4
80003068:	02a12e23          	sw	a0,60(sp)
8000306c:	03010593          	addi	a1,sp,48
80003070:	03c10713          	addi	a4,sp,60
80003074:	00072683          	lw	a3,0(a4) # 10000 <__STACKSIZE__+0xc000>
80003078:	ffc72603          	lw	a2,-4(a4)
8000307c:	ffc70713          	addi	a4,a4,-4
80003080:	00369693          	slli	a3,a3,0x3
80003084:	01d65613          	srli	a2,a2,0x1d
80003088:	00c6e6b3          	or	a3,a3,a2
8000308c:	00d72223          	sw	a3,4(a4)
80003090:	fee592e3          	bne	a1,a4,80003074 <__multf3+0x144>
80003094:	ffffc737          	lui	a4,0xffffc
80003098:	00391913          	slli	s2,s2,0x3
8000309c:	00170713          	addi	a4,a4,1 # ffffc001 <__bss_end+0x7ff75845>
800030a0:	03212823          	sw	s2,48(sp)
800030a4:	00e787b3          	add	a5,a5,a4
800030a8:	00000693          	li	a3,0
800030ac:	009787b3          	add	a5,a5,s1
800030b0:	00f12623          	sw	a5,12(sp)
800030b4:	00178793          	addi	a5,a5,1
800030b8:	0149c733          	xor	a4,s3,s4
800030bc:	00f12423          	sw	a5,8(sp)
800030c0:	002b9793          	slli	a5,s7,0x2
800030c4:	00e12223          	sw	a4,4(sp)
800030c8:	00d7e7b3          	or	a5,a5,a3
800030cc:	00a00713          	li	a4,10
800030d0:	26f74ee3          	blt	a4,a5,80003b4c <__multf3+0xc1c>
800030d4:	00200713          	li	a4,2
800030d8:	22f74ae3          	blt	a4,a5,80003b0c <__multf3+0xbdc>
800030dc:	fff78793          	addi	a5,a5,-1
800030e0:	00100713          	li	a4,1
800030e4:	3ef77ee3          	bgeu	a4,a5,80003ce0 <__multf3+0xdb0>
800030e8:	02012883          	lw	a7,32(sp)
800030ec:	03012f03          	lw	t5,48(sp)
800030f0:	000105b7          	lui	a1,0x10
800030f4:	fff58713          	addi	a4,a1,-1 # ffff <__STACKSIZE__+0xbfff>
800030f8:	0108d913          	srli	s2,a7,0x10
800030fc:	010f5493          	srli	s1,t5,0x10
80003100:	00e8f8b3          	and	a7,a7,a4
80003104:	00ef7f33          	and	t5,t5,a4
80003108:	031f0633          	mul	a2,t5,a7
8000310c:	03e90533          	mul	a0,s2,t5
80003110:	01065793          	srli	a5,a2,0x10
80003114:	031486b3          	mul	a3,s1,a7
80003118:	00a686b3          	add	a3,a3,a0
8000311c:	00d787b3          	add	a5,a5,a3
80003120:	02990bb3          	mul	s7,s2,s1
80003124:	00a7f463          	bgeu	a5,a0,8000312c <__multf3+0x1fc>
80003128:	00bb8bb3          	add	s7,s7,a1
8000312c:	03412e83          	lw	t4,52(sp)
80003130:	0107d693          	srli	a3,a5,0x10
80003134:	00e7f7b3          	and	a5,a5,a4
80003138:	00e67633          	and	a2,a2,a4
8000313c:	01079793          	slli	a5,a5,0x10
80003140:	00c787b3          	add	a5,a5,a2
80003144:	010ed293          	srli	t0,t4,0x10
80003148:	00eefeb3          	and	t4,t4,a4
8000314c:	03d90633          	mul	a2,s2,t4
80003150:	00f12823          	sw	a5,16(sp)
80003154:	04f12823          	sw	a5,80(sp)
80003158:	03128733          	mul	a4,t0,a7
8000315c:	031e87b3          	mul	a5,t4,a7
80003160:	00c70733          	add	a4,a4,a2
80003164:	0107d313          	srli	t1,a5,0x10
80003168:	00e30333          	add	t1,t1,a4
8000316c:	02590b33          	mul	s6,s2,t0
80003170:	00c37663          	bgeu	t1,a2,8000317c <__multf3+0x24c>
80003174:	00010737          	lui	a4,0x10
80003178:	00eb0b33          	add	s6,s6,a4
8000317c:	02412803          	lw	a6,36(sp)
80003180:	00010737          	lui	a4,0x10
80003184:	fff70613          	addi	a2,a4,-1 # ffff <__STACKSIZE__+0xbfff>
80003188:	01035513          	srli	a0,t1,0x10
8000318c:	00c37333          	and	t1,t1,a2
80003190:	00c7f7b3          	and	a5,a5,a2
80003194:	01085393          	srli	t2,a6,0x10
80003198:	01031313          	slli	t1,t1,0x10
8000319c:	00c87833          	and	a6,a6,a2
800031a0:	00f30333          	add	t1,t1,a5
800031a4:	03e38fb3          	mul	t6,t2,t5
800031a8:	006686b3          	add	a3,a3,t1
800031ac:	03e807b3          	mul	a5,a6,t5
800031b0:	03048e33          	mul	t3,s1,a6
800031b4:	0107d613          	srli	a2,a5,0x10
800031b8:	01fe0e33          	add	t3,t3,t6
800031bc:	01c60633          	add	a2,a2,t3
800031c0:	027485b3          	mul	a1,s1,t2
800031c4:	01f67463          	bgeu	a2,t6,800031cc <__multf3+0x29c>
800031c8:	00e585b3          	add	a1,a1,a4
800031cc:	01065a93          	srli	s5,a2,0x10
800031d0:	00010737          	lui	a4,0x10
800031d4:	00ba8ab3          	add	s5,s5,a1
800031d8:	fff70593          	addi	a1,a4,-1 # ffff <__STACKSIZE__+0xbfff>
800031dc:	00b7f7b3          	and	a5,a5,a1
800031e0:	00b67633          	and	a2,a2,a1
800031e4:	01061613          	slli	a2,a2,0x10
800031e8:	030e85b3          	mul	a1,t4,a6
800031ec:	00f60633          	add	a2,a2,a5
800031f0:	03d38fb3          	mul	t6,t2,t4
800031f4:	0105d793          	srli	a5,a1,0x10
800031f8:	03028e33          	mul	t3,t0,a6
800031fc:	01fe0e33          	add	t3,t3,t6
80003200:	01c787b3          	add	a5,a5,t3
80003204:	027289b3          	mul	s3,t0,t2
80003208:	01f7f463          	bgeu	a5,t6,80003210 <__multf3+0x2e0>
8000320c:	00e989b3          	add	s3,s3,a4
80003210:	0107d713          	srli	a4,a5,0x10
80003214:	01370733          	add	a4,a4,s3
80003218:	00010a37          	lui	s4,0x10
8000321c:	00e12a23          	sw	a4,20(sp)
80003220:	fffa0713          	addi	a4,s4,-1 # ffff <__STACKSIZE__+0xbfff>
80003224:	03812e03          	lw	t3,56(sp)
80003228:	00e7f7b3          	and	a5,a5,a4
8000322c:	00e5f5b3          	and	a1,a1,a4
80003230:	01079793          	slli	a5,a5,0x10
80003234:	00b787b3          	add	a5,a5,a1
80003238:	00f12c23          	sw	a5,24(sp)
8000323c:	010e5793          	srli	a5,t3,0x10
80003240:	00ee7e33          	and	t3,t3,a4
80003244:	031e05b3          	mul	a1,t3,a7
80003248:	03c90c33          	mul	s8,s2,t3
8000324c:	0105d713          	srli	a4,a1,0x10
80003250:	031789b3          	mul	s3,a5,a7
80003254:	018989b3          	add	s3,s3,s8
80003258:	01370733          	add	a4,a4,s3
8000325c:	02f90fb3          	mul	t6,s2,a5
80003260:	01877463          	bgeu	a4,s8,80003268 <__multf3+0x338>
80003264:	014f8fb3          	add	t6,t6,s4
80003268:	01075993          	srli	s3,a4,0x10
8000326c:	00010cb7          	lui	s9,0x10
80003270:	01f98fb3          	add	t6,s3,t6
80003274:	fffc8993          	addi	s3,s9,-1 # ffff <__STACKSIZE__+0xbfff>
80003278:	01377733          	and	a4,a4,s3
8000327c:	0135f5b3          	and	a1,a1,s3
80003280:	01071713          	slli	a4,a4,0x10
80003284:	00b70733          	add	a4,a4,a1
80003288:	02812583          	lw	a1,40(sp)
8000328c:	01f12e23          	sw	t6,28(sp)
80003290:	0105df93          	srli	t6,a1,0x10
80003294:	0135f5b3          	and	a1,a1,s3
80003298:	03e58a33          	mul	s4,a1,t5
8000329c:	03ef8d33          	mul	s10,t6,t5
800032a0:	010a5d93          	srli	s11,s4,0x10
800032a4:	02b489b3          	mul	s3,s1,a1
800032a8:	01a989b3          	add	s3,s3,s10
800032ac:	013d89b3          	add	s3,s11,s3
800032b0:	03f48c33          	mul	s8,s1,t6
800032b4:	01a9f463          	bgeu	s3,s10,800032bc <__multf3+0x38c>
800032b8:	019c0c33          	add	s8,s8,s9
800032bc:	00db86b3          	add	a3,s7,a3
800032c0:	0066b333          	sltu	t1,a3,t1
800032c4:	0109dd13          	srli	s10,s3,0x10
800032c8:	00650533          	add	a0,a0,t1
800032cc:	00010cb7          	lui	s9,0x10
800032d0:	01650533          	add	a0,a0,s6
800032d4:	018d0d33          	add	s10,s10,s8
800032d8:	00c68633          	add	a2,a3,a2
800032dc:	fffc8c13          	addi	s8,s9,-1 # ffff <__STACKSIZE__+0xbfff>
800032e0:	01550ab3          	add	s5,a0,s5
800032e4:	0189f9b3          	and	s3,s3,s8
800032e8:	00d636b3          	sltu	a3,a2,a3
800032ec:	00da86b3          	add	a3,s5,a3
800032f0:	01099993          	slli	s3,s3,0x10
800032f4:	018a7a33          	and	s4,s4,s8
800032f8:	01498a33          	add	s4,s3,s4
800032fc:	00aab9b3          	sltu	s3,s5,a0
80003300:	0156bab3          	sltu	s5,a3,s5
80003304:	0159e9b3          	or	s3,s3,s5
80003308:	00653533          	sltu	a0,a0,t1
8000330c:	00a98533          	add	a0,s3,a0
80003310:	01812303          	lw	t1,24(sp)
80003314:	01412983          	lw	s3,20(sp)
80003318:	04c12a23          	sw	a2,84(sp)
8000331c:	00668333          	add	t1,a3,t1
80003320:	01350ab3          	add	s5,a0,s3
80003324:	01c12983          	lw	s3,28(sp)
80003328:	00d336b3          	sltu	a3,t1,a3
8000332c:	00da86b3          	add	a3,s5,a3
80003330:	00e30733          	add	a4,t1,a4
80003334:	01368b33          	add	s6,a3,s3
80003338:	00673333          	sltu	t1,a4,t1
8000333c:	006b0333          	add	t1,s6,t1
80003340:	01470a33          	add	s4,a4,s4
80003344:	01a30d33          	add	s10,t1,s10
80003348:	00ea3733          	sltu	a4,s4,a4
8000334c:	00aab533          	sltu	a0,s5,a0
80003350:	00ed0733          	add	a4,s10,a4
80003354:	0156bab3          	sltu	s5,a3,s5
80003358:	00db36b3          	sltu	a3,s6,a3
8000335c:	01633b33          	sltu	s6,t1,s6
80003360:	0166e6b3          	or	a3,a3,s6
80003364:	006d39b3          	sltu	s3,s10,t1
80003368:	01556ab3          	or	s5,a0,s5
8000336c:	01a73d33          	sltu	s10,a4,s10
80003370:	00da8ab3          	add	s5,s5,a3
80003374:	01a9e9b3          	or	s3,s3,s10
80003378:	015989b3          	add	s3,s3,s5
8000337c:	03c12a83          	lw	s5,60(sp)
80003380:	05412c23          	sw	s4,88(sp)
80003384:	010adb13          	srli	s6,s5,0x10
80003388:	018afab3          	and	s5,s5,s8
8000338c:	031a86b3          	mul	a3,s5,a7
80003390:	03590533          	mul	a0,s2,s5
80003394:	031b08b3          	mul	a7,s6,a7
80003398:	00a88333          	add	t1,a7,a0
8000339c:	0106d893          	srli	a7,a3,0x10
800033a0:	006888b3          	add	a7,a7,t1
800033a4:	03690933          	mul	s2,s2,s6
800033a8:	00a8f463          	bgeu	a7,a0,800033b0 <__multf3+0x480>
800033ac:	01990933          	add	s2,s2,s9
800033b0:	02c12b83          	lw	s7,44(sp)
800033b4:	0108d513          	srli	a0,a7,0x10
800033b8:	01250533          	add	a0,a0,s2
800033bc:	00010c37          	lui	s8,0x10
800033c0:	00a12a23          	sw	a0,20(sp)
800033c4:	fffc0513          	addi	a0,s8,-1 # ffff <__STACKSIZE__+0xbfff>
800033c8:	010bd913          	srli	s2,s7,0x10
800033cc:	00abfbb3          	and	s7,s7,a0
800033d0:	00a6f6b3          	and	a3,a3,a0
800033d4:	00a8f8b3          	and	a7,a7,a0
800033d8:	03248333          	mul	t1,s1,s2
800033dc:	01089893          	slli	a7,a7,0x10
800033e0:	00d888b3          	add	a7,a7,a3
800033e4:	03eb8533          	mul	a0,s7,t5
800033e8:	037484b3          	mul	s1,s1,s7
800033ec:	01055693          	srli	a3,a0,0x10
800033f0:	03e90f33          	mul	t5,s2,t5
800033f4:	01e484b3          	add	s1,s1,t5
800033f8:	009686b3          	add	a3,a3,s1
800033fc:	01e6f463          	bgeu	a3,t5,80003404 <__multf3+0x4d4>
80003400:	01830333          	add	t1,t1,s8
80003404:	0106df13          	srli	t5,a3,0x10
80003408:	006f0333          	add	t1,t5,t1
8000340c:	00010cb7          	lui	s9,0x10
80003410:	00612c23          	sw	t1,24(sp)
80003414:	fffc8313          	addi	t1,s9,-1 # ffff <__STACKSIZE__+0xbfff>
80003418:	00657533          	and	a0,a0,t1
8000341c:	0066f6b3          	and	a3,a3,t1
80003420:	03c38f33          	mul	t5,t2,t3
80003424:	01069693          	slli	a3,a3,0x10
80003428:	00a686b3          	add	a3,a3,a0
8000342c:	03c80333          	mul	t1,a6,t3
80003430:	030784b3          	mul	s1,a5,a6
80003434:	01035513          	srli	a0,t1,0x10
80003438:	01e484b3          	add	s1,s1,t5
8000343c:	00950533          	add	a0,a0,s1
80003440:	02f38c33          	mul	s8,t2,a5
80003444:	01e57463          	bgeu	a0,t5,8000344c <__multf3+0x51c>
80003448:	019c0c33          	add	s8,s8,s9
8000344c:	00010d37          	lui	s10,0x10
80003450:	fffd0f13          	addi	t5,s10,-1 # ffff <__STACKSIZE__+0xbfff>
80003454:	01055493          	srli	s1,a0,0x10
80003458:	01e57533          	and	a0,a0,t5
8000345c:	01e37333          	and	t1,t1,t5
80003460:	01051513          	slli	a0,a0,0x10
80003464:	018484b3          	add	s1,s1,s8
80003468:	02b28f33          	mul	t5,t0,a1
8000346c:	00650533          	add	a0,a0,t1
80003470:	03df8c33          	mul	s8,t6,t4
80003474:	02be8333          	mul	t1,t4,a1
80003478:	018f0f33          	add	t5,t5,s8
8000347c:	01035d93          	srli	s11,t1,0x10
80003480:	01ed8f33          	add	t5,s11,t5
80003484:	03f28cb3          	mul	s9,t0,t6
80003488:	018f7463          	bgeu	t5,s8,80003490 <__multf3+0x560>
8000348c:	01ac8cb3          	add	s9,s9,s10
80003490:	010f5c13          	srli	s8,t5,0x10
80003494:	019c0c33          	add	s8,s8,s9
80003498:	00010cb7          	lui	s9,0x10
8000349c:	fffc8d13          	addi	s10,s9,-1 # ffff <__STACKSIZE__+0xbfff>
800034a0:	01af7f33          	and	t5,t5,s10
800034a4:	010f1f13          	slli	t5,t5,0x10
800034a8:	01a37333          	and	t1,t1,s10
800034ac:	006f0333          	add	t1,t5,t1
800034b0:	01412f03          	lw	t5,20(sp)
800034b4:	011708b3          	add	a7,a4,a7
800034b8:	01812d03          	lw	s10,24(sp)
800034bc:	01e98f33          	add	t5,s3,t5
800034c0:	00e8b733          	sltu	a4,a7,a4
800034c4:	00ef0733          	add	a4,t5,a4
800034c8:	00d886b3          	add	a3,a7,a3
800034cc:	01a70d33          	add	s10,a4,s10
800034d0:	0116b8b3          	sltu	a7,a3,a7
800034d4:	011d08b3          	add	a7,s10,a7
800034d8:	00a68533          	add	a0,a3,a0
800034dc:	009884b3          	add	s1,a7,s1
800034e0:	00d536b3          	sltu	a3,a0,a3
800034e4:	00d486b3          	add	a3,s1,a3
800034e8:	013f39b3          	sltu	s3,t5,s3
800034ec:	01e73f33          	sltu	t5,a4,t5
800034f0:	00ed3733          	sltu	a4,s10,a4
800034f4:	01a8bd33          	sltu	s10,a7,s10
800034f8:	01e9ef33          	or	t5,s3,t5
800034fc:	0114b8b3          	sltu	a7,s1,a7
80003500:	01a76733          	or	a4,a4,s10
80003504:	0096b4b3          	sltu	s1,a3,s1
80003508:	01868c33          	add	s8,a3,s8
8000350c:	00ef0733          	add	a4,t5,a4
80003510:	0098e8b3          	or	a7,a7,s1
80003514:	00e884b3          	add	s1,a7,a4
80003518:	03cf8f33          	mul	t5,t6,t3
8000351c:	00dc38b3          	sltu	a7,s8,a3
80003520:	00650333          	add	t1,a0,t1
80003524:	00a33533          	sltu	a0,t1,a0
80003528:	00ac0533          	add	a0,s8,a0
8000352c:	01853c33          	sltu	s8,a0,s8
80003530:	0188e8b3          	or	a7,a7,s8
80003534:	04612e23          	sw	t1,92(sp)
80003538:	009888b3          	add	a7,a7,s1
8000353c:	02be06b3          	mul	a3,t3,a1
80003540:	02b789b3          	mul	s3,a5,a1
80003544:	0106d713          	srli	a4,a3,0x10
80003548:	01e989b3          	add	s3,s3,t5
8000354c:	01370733          	add	a4,a4,s3
80003550:	03f784b3          	mul	s1,a5,t6
80003554:	01e77463          	bgeu	a4,t5,8000355c <__multf3+0x62c>
80003558:	019484b3          	add	s1,s1,s9
8000355c:	01075f13          	srli	t5,a4,0x10
80003560:	009f0f33          	add	t5,t5,s1
80003564:	000104b7          	lui	s1,0x10
80003568:	fff48993          	addi	s3,s1,-1 # ffff <__STACKSIZE__+0xbfff>
8000356c:	01377733          	and	a4,a4,s3
80003570:	0136f6b3          	and	a3,a3,s3
80003574:	01071713          	slli	a4,a4,0x10
80003578:	035389b3          	mul	s3,t2,s5
8000357c:	00d70733          	add	a4,a4,a3
80003580:	030a86b3          	mul	a3,s5,a6
80003584:	030b0833          	mul	a6,s6,a6
80003588:	01380c33          	add	s8,a6,s3
8000358c:	0106d813          	srli	a6,a3,0x10
80003590:	01880833          	add	a6,a6,s8
80003594:	036383b3          	mul	t2,t2,s6
80003598:	01387463          	bgeu	a6,s3,800035a0 <__multf3+0x670>
8000359c:	009383b3          	add	t2,t2,s1
800035a0:	01085493          	srli	s1,a6,0x10
800035a4:	00010c37          	lui	s8,0x10
800035a8:	007483b3          	add	t2,s1,t2
800035ac:	fffc0493          	addi	s1,s8,-1 # ffff <__STACKSIZE__+0xbfff>
800035b0:	0096f6b3          	and	a3,a3,s1
800035b4:	00987833          	and	a6,a6,s1
800035b8:	01081813          	slli	a6,a6,0x10
800035bc:	03db89b3          	mul	s3,s7,t4
800035c0:	00d80833          	add	a6,a6,a3
800035c4:	03d90eb3          	mul	t4,s2,t4
800035c8:	0109d693          	srli	a3,s3,0x10
800035cc:	032284b3          	mul	s1,t0,s2
800035d0:	037282b3          	mul	t0,t0,s7
800035d4:	01d282b3          	add	t0,t0,t4
800035d8:	005686b3          	add	a3,a3,t0
800035dc:	01d6f463          	bgeu	a3,t4,800035e4 <__multf3+0x6b4>
800035e0:	018484b3          	add	s1,s1,s8
800035e4:	0106de93          	srli	t4,a3,0x10
800035e8:	009e8eb3          	add	t4,t4,s1
800035ec:	000104b7          	lui	s1,0x10
800035f0:	fff48293          	addi	t0,s1,-1 # ffff <__STACKSIZE__+0xbfff>
800035f4:	0056f6b3          	and	a3,a3,t0
800035f8:	0059f9b3          	and	s3,s3,t0
800035fc:	01069693          	slli	a3,a3,0x10
80003600:	02ba82b3          	mul	t0,s5,a1
80003604:	013686b3          	add	a3,a3,s3
80003608:	02bb05b3          	mul	a1,s6,a1
8000360c:	035f89b3          	mul	s3,t6,s5
80003610:	01358c33          	add	s8,a1,s3
80003614:	0102d593          	srli	a1,t0,0x10
80003618:	018585b3          	add	a1,a1,s8
8000361c:	036f8fb3          	mul	t6,t6,s6
80003620:	0135f463          	bgeu	a1,s3,80003628 <__multf3+0x6f8>
80003624:	009f8fb3          	add	t6,t6,s1
80003628:	0105d493          	srli	s1,a1,0x10
8000362c:	01f48fb3          	add	t6,s1,t6
80003630:	000104b7          	lui	s1,0x10
80003634:	fff48993          	addi	s3,s1,-1 # ffff <__STACKSIZE__+0xbfff>
80003638:	0135f5b3          	and	a1,a1,s3
8000363c:	0132f2b3          	and	t0,t0,s3
80003640:	01059593          	slli	a1,a1,0x10
80003644:	032789b3          	mul	s3,a5,s2
80003648:	005585b3          	add	a1,a1,t0
8000364c:	037787b3          	mul	a5,a5,s7
80003650:	03cb82b3          	mul	t0,s7,t3
80003654:	03c90e33          	mul	t3,s2,t3
80003658:	0102dc13          	srli	s8,t0,0x10
8000365c:	01c787b3          	add	a5,a5,t3
80003660:	00fc07b3          	add	a5,s8,a5
80003664:	01c7f463          	bgeu	a5,t3,8000366c <__multf3+0x73c>
80003668:	009989b3          	add	s3,s3,s1
8000366c:	00e50733          	add	a4,a0,a4
80003670:	01070833          	add	a6,a4,a6
80003674:	01e88f33          	add	t5,a7,t5
80003678:	00a73533          	sltu	a0,a4,a0
8000367c:	00af0533          	add	a0,t5,a0
80003680:	00d806b3          	add	a3,a6,a3
80003684:	007503b3          	add	t2,a0,t2
80003688:	00e83733          	sltu	a4,a6,a4
8000368c:	06d12023          	sw	a3,96(sp)
80003690:	0106b6b3          	sltu	a3,a3,a6
80003694:	037a8833          	mul	a6,s5,s7
80003698:	00e38733          	add	a4,t2,a4
8000369c:	01d70eb3          	add	t4,a4,t4
800036a0:	00de86b3          	add	a3,t4,a3
800036a4:	0107de13          	srli	t3,a5,0x10
800036a8:	011f38b3          	sltu	a7,t5,a7
800036ac:	000104b7          	lui	s1,0x10
800036b0:	01e53f33          	sltu	t5,a0,t5
800036b4:	00a3b533          	sltu	a0,t2,a0
800036b8:	007733b3          	sltu	t2,a4,t2
800036bc:	03590ab3          	mul	s5,s2,s5
800036c0:	013e0e33          	add	t3,t3,s3
800036c4:	00756533          	or	a0,a0,t2
800036c8:	fff48993          	addi	s3,s1,-1 # ffff <__STACKSIZE__+0xbfff>
800036cc:	00eeb733          	sltu	a4,t4,a4
800036d0:	01e8e8b3          	or	a7,a7,t5
800036d4:	01d6beb3          	sltu	t4,a3,t4
800036d8:	00a888b3          	add	a7,a7,a0
800036dc:	0137f7b3          	and	a5,a5,s3
800036e0:	01d76733          	or	a4,a4,t4
800036e4:	032b0933          	mul	s2,s6,s2
800036e8:	00b685b3          	add	a1,a3,a1
800036ec:	01170733          	add	a4,a4,a7
800036f0:	01079793          	slli	a5,a5,0x10
800036f4:	0132f2b3          	and	t0,t0,s3
800036f8:	01f70fb3          	add	t6,a4,t6
800036fc:	005787b3          	add	a5,a5,t0
80003700:	00d5b6b3          	sltu	a3,a1,a3
80003704:	00df86b3          	add	a3,t6,a3
80003708:	00f587b3          	add	a5,a1,a5
8000370c:	037b0b33          	mul	s6,s6,s7
80003710:	00efb733          	sltu	a4,t6,a4
80003714:	01c68e33          	add	t3,a3,t3
80003718:	01f6bfb3          	sltu	t6,a3,t6
8000371c:	06f12223          	sw	a5,100(sp)
80003720:	00b7b7b3          	sltu	a5,a5,a1
80003724:	01f76533          	or	a0,a4,t6
80003728:	00fe07b3          	add	a5,t3,a5
8000372c:	01085713          	srli	a4,a6,0x10
80003730:	00de36b3          	sltu	a3,t3,a3
80003734:	015b0b33          	add	s6,s6,s5
80003738:	01c7be33          	sltu	t3,a5,t3
8000373c:	01670733          	add	a4,a4,s6
80003740:	01c6e6b3          	or	a3,a3,t3
80003744:	01577463          	bgeu	a4,s5,8000374c <__multf3+0x81c>
80003748:	00990933          	add	s2,s2,s1
8000374c:	01075593          	srli	a1,a4,0x10
80003750:	00a585b3          	add	a1,a1,a0
80003754:	00010537          	lui	a0,0x10
80003758:	fff50513          	addi	a0,a0,-1 # ffff <__STACKSIZE__+0xbfff>
8000375c:	00a77733          	and	a4,a4,a0
80003760:	01071713          	slli	a4,a4,0x10
80003764:	00a87833          	and	a6,a6,a0
80003768:	01070733          	add	a4,a4,a6
8000376c:	00e78733          	add	a4,a5,a4
80003770:	00d586b3          	add	a3,a1,a3
80003774:	00f737b3          	sltu	a5,a4,a5
80003778:	00f687b3          	add	a5,a3,a5
8000377c:	012787b3          	add	a5,a5,s2
80003780:	06f12623          	sw	a5,108(sp)
80003784:	01012783          	lw	a5,16(sp)
80003788:	00d31313          	slli	t1,t1,0xd
8000378c:	06e12423          	sw	a4,104(sp)
80003790:	00c7e7b3          	or	a5,a5,a2
80003794:	0147e7b3          	or	a5,a5,s4
80003798:	00f36333          	or	t1,t1,a5
8000379c:	06010613          	addi	a2,sp,96
800037a0:	05010793          	addi	a5,sp,80
800037a4:	00c7a703          	lw	a4,12(a5)
800037a8:	0107a683          	lw	a3,16(a5)
800037ac:	00478793          	addi	a5,a5,4
800037b0:	01375713          	srli	a4,a4,0x13
800037b4:	00d69693          	slli	a3,a3,0xd
800037b8:	00d76733          	or	a4,a4,a3
800037bc:	fee7ae23          	sw	a4,-4(a5)
800037c0:	fef612e3          	bne	a2,a5,800037a4 <__multf3+0x874>
800037c4:	05012783          	lw	a5,80(sp)
800037c8:	00603333          	snez	t1,t1
800037cc:	05c12703          	lw	a4,92(sp)
800037d0:	00f36333          	or	t1,t1,a5
800037d4:	05812783          	lw	a5,88(sp)
800037d8:	04e12623          	sw	a4,76(sp)
800037dc:	04612023          	sw	t1,64(sp)
800037e0:	04f12423          	sw	a5,72(sp)
800037e4:	05412783          	lw	a5,84(sp)
800037e8:	04f12223          	sw	a5,68(sp)
800037ec:	00b71793          	slli	a5,a4,0xb
800037f0:	0407d863          	bgez	a5,80003840 <__multf3+0x910>
800037f4:	01f31313          	slli	t1,t1,0x1f
800037f8:	04010793          	addi	a5,sp,64
800037fc:	04c10593          	addi	a1,sp,76
80003800:	0007a683          	lw	a3,0(a5)
80003804:	0047a603          	lw	a2,4(a5)
80003808:	00478793          	addi	a5,a5,4
8000380c:	0016d693          	srli	a3,a3,0x1
80003810:	01f61613          	slli	a2,a2,0x1f
80003814:	00c6e6b3          	or	a3,a3,a2
80003818:	fed7ae23          	sw	a3,-4(a5)
8000381c:	fef592e3          	bne	a1,a5,80003800 <__multf3+0x8d0>
80003820:	04012783          	lw	a5,64(sp)
80003824:	00603333          	snez	t1,t1
80003828:	00175713          	srli	a4,a4,0x1
8000382c:	0067e7b3          	or	a5,a5,t1
80003830:	04f12023          	sw	a5,64(sp)
80003834:	00812783          	lw	a5,8(sp)
80003838:	04e12623          	sw	a4,76(sp)
8000383c:	00f12623          	sw	a5,12(sp)
80003840:	00c12783          	lw	a5,12(sp)
80003844:	00f12423          	sw	a5,8(sp)
80003848:	3500006f          	j	80003b98 <__multf3+0xc68>
8000384c:	00a7e633          	or	a2,a5,a0
80003850:	00d66633          	or	a2,a2,a3
80003854:	00e66633          	or	a2,a2,a4
80003858:	14060463          	beqz	a2,800039a0 <__multf3+0xa70>
8000385c:	0a070063          	beqz	a4,800038fc <__multf3+0x9cc>
80003860:	00070513          	mv	a0,a4
80003864:	050020ef          	jal	ra,800058b4 <__clzsi2>
80003868:	ff450713          	addi	a4,a0,-12
8000386c:	40575593          	srai	a1,a4,0x5
80003870:	01f77713          	andi	a4,a4,31
80003874:	0a070e63          	beqz	a4,80003930 <__multf3+0xa00>
80003878:	ffc00693          	li	a3,-4
8000387c:	02d586b3          	mul	a3,a1,a3
80003880:	02000813          	li	a6,32
80003884:	02010313          	addi	t1,sp,32
80003888:	40e80833          	sub	a6,a6,a4
8000388c:	00c68793          	addi	a5,a3,12 # 1000c <__STACKSIZE__+0xc00c>
80003890:	00f307b3          	add	a5,t1,a5
80003894:	40d006b3          	neg	a3,a3
80003898:	0cf31463          	bne	t1,a5,80003960 <__multf3+0xa30>
8000389c:	fff58793          	addi	a5,a1,-1
800038a0:	00259593          	slli	a1,a1,0x2
800038a4:	05058693          	addi	a3,a1,80
800038a8:	02010613          	addi	a2,sp,32
800038ac:	00c685b3          	add	a1,a3,a2
800038b0:	02012683          	lw	a3,32(sp)
800038b4:	00e69733          	sll	a4,a3,a4
800038b8:	fae5a823          	sw	a4,-80(a1)
800038bc:	00178793          	addi	a5,a5,1
800038c0:	00279793          	slli	a5,a5,0x2
800038c4:	00800693          	li	a3,8
800038c8:	02010713          	addi	a4,sp,32
800038cc:	00d7ea63          	bltu	a5,a3,800038e0 <__multf3+0x9b0>
800038d0:	02012023          	sw	zero,32(sp)
800038d4:	00072223          	sw	zero,4(a4)
800038d8:	ff878793          	addi	a5,a5,-8
800038dc:	02810713          	addi	a4,sp,40
800038e0:	00400693          	li	a3,4
800038e4:	00d7e463          	bltu	a5,a3,800038ec <__multf3+0x9bc>
800038e8:	00072023          	sw	zero,0(a4)
800038ec:	ffffc4b7          	lui	s1,0xffffc
800038f0:	01148493          	addi	s1,s1,17 # ffffc011 <__bss_end+0x7ff75855>
800038f4:	40a484b3          	sub	s1,s1,a0
800038f8:	f20ff06f          	j	80003018 <__multf3+0xe8>
800038fc:	00068a63          	beqz	a3,80003910 <__multf3+0x9e0>
80003900:	00068513          	mv	a0,a3
80003904:	7b1010ef          	jal	ra,800058b4 <__clzsi2>
80003908:	02050513          	addi	a0,a0,32
8000390c:	f5dff06f          	j	80003868 <__multf3+0x938>
80003910:	00050863          	beqz	a0,80003920 <__multf3+0x9f0>
80003914:	7a1010ef          	jal	ra,800058b4 <__clzsi2>
80003918:	04050513          	addi	a0,a0,64
8000391c:	f4dff06f          	j	80003868 <__multf3+0x938>
80003920:	00078513          	mv	a0,a5
80003924:	791010ef          	jal	ra,800058b4 <__clzsi2>
80003928:	06050513          	addi	a0,a0,96
8000392c:	f3dff06f          	j	80003868 <__multf3+0x938>
80003930:	ffc00693          	li	a3,-4
80003934:	02d586b3          	mul	a3,a1,a3
80003938:	02c10793          	addi	a5,sp,44
8000393c:	00300713          	li	a4,3
80003940:	00d78633          	add	a2,a5,a3
80003944:	00062603          	lw	a2,0(a2)
80003948:	fff70713          	addi	a4,a4,-1
8000394c:	ffc78793          	addi	a5,a5,-4
80003950:	00c7a223          	sw	a2,4(a5)
80003954:	feb756e3          	bge	a4,a1,80003940 <__multf3+0xa10>
80003958:	fff58793          	addi	a5,a1,-1
8000395c:	f61ff06f          	j	800038bc <__multf3+0x98c>
80003960:	0007a603          	lw	a2,0(a5)
80003964:	ffc7a883          	lw	a7,-4(a5)
80003968:	00d78e33          	add	t3,a5,a3
8000396c:	00e61633          	sll	a2,a2,a4
80003970:	0108d8b3          	srl	a7,a7,a6
80003974:	01166633          	or	a2,a2,a7
80003978:	00ce2023          	sw	a2,0(t3)
8000397c:	ffc78793          	addi	a5,a5,-4
80003980:	f19ff06f          	j	80003898 <__multf3+0x968>
80003984:	00a7e7b3          	or	a5,a5,a0
80003988:	00d7e7b3          	or	a5,a5,a3
8000398c:	00e7e7b3          	or	a5,a5,a4
80003990:	00200b93          	li	s7,2
80003994:	e8078463          	beqz	a5,8000301c <__multf3+0xec>
80003998:	00300b93          	li	s7,3
8000399c:	e80ff06f          	j	8000301c <__multf3+0xec>
800039a0:	00000493          	li	s1,0
800039a4:	00100b93          	li	s7,1
800039a8:	e74ff06f          	j	8000301c <__multf3+0xec>
800039ac:	016967b3          	or	a5,s2,s6
800039b0:	0157e7b3          	or	a5,a5,s5
800039b4:	00a7e7b3          	or	a5,a5,a0
800039b8:	14078463          	beqz	a5,80003b00 <__multf3+0xbd0>
800039bc:	08050e63          	beqz	a0,80003a58 <__multf3+0xb28>
800039c0:	6f5010ef          	jal	ra,800058b4 <__clzsi2>
800039c4:	ff450693          	addi	a3,a0,-12
800039c8:	4056d793          	srai	a5,a3,0x5
800039cc:	01f6f693          	andi	a3,a3,31
800039d0:	0c068063          	beqz	a3,80003a90 <__multf3+0xb60>
800039d4:	ffc00613          	li	a2,-4
800039d8:	02c78633          	mul	a2,a5,a2
800039dc:	02000813          	li	a6,32
800039e0:	03010313          	addi	t1,sp,48
800039e4:	40d80833          	sub	a6,a6,a3
800039e8:	00c60713          	addi	a4,a2,12
800039ec:	00e30733          	add	a4,t1,a4
800039f0:	40c00633          	neg	a2,a2
800039f4:	0ce31663          	bne	t1,a4,80003ac0 <__multf3+0xb90>
800039f8:	fff78713          	addi	a4,a5,-1
800039fc:	00279793          	slli	a5,a5,0x2
80003a00:	02010613          	addi	a2,sp,32
80003a04:	05078793          	addi	a5,a5,80
80003a08:	00c787b3          	add	a5,a5,a2
80003a0c:	03012603          	lw	a2,48(sp)
80003a10:	00d616b3          	sll	a3,a2,a3
80003a14:	fcd7a023          	sw	a3,-64(a5)
80003a18:	00170793          	addi	a5,a4,1
80003a1c:	00279793          	slli	a5,a5,0x2
80003a20:	00800693          	li	a3,8
80003a24:	03010713          	addi	a4,sp,48
80003a28:	00d7ea63          	bltu	a5,a3,80003a3c <__multf3+0xb0c>
80003a2c:	02012823          	sw	zero,48(sp)
80003a30:	00072223          	sw	zero,4(a4)
80003a34:	ff878793          	addi	a5,a5,-8
80003a38:	03810713          	addi	a4,sp,56
80003a3c:	00400693          	li	a3,4
80003a40:	00d7e463          	bltu	a5,a3,80003a48 <__multf3+0xb18>
80003a44:	00072023          	sw	zero,0(a4)
80003a48:	ffffc7b7          	lui	a5,0xffffc
80003a4c:	01178793          	addi	a5,a5,17 # ffffc011 <__bss_end+0x7ff75855>
80003a50:	40a787b3          	sub	a5,a5,a0
80003a54:	e54ff06f          	j	800030a8 <__multf3+0x178>
80003a58:	000a8a63          	beqz	s5,80003a6c <__multf3+0xb3c>
80003a5c:	000a8513          	mv	a0,s5
80003a60:	655010ef          	jal	ra,800058b4 <__clzsi2>
80003a64:	02050513          	addi	a0,a0,32
80003a68:	f5dff06f          	j	800039c4 <__multf3+0xa94>
80003a6c:	000b0a63          	beqz	s6,80003a80 <__multf3+0xb50>
80003a70:	000b0513          	mv	a0,s6
80003a74:	641010ef          	jal	ra,800058b4 <__clzsi2>
80003a78:	04050513          	addi	a0,a0,64
80003a7c:	f49ff06f          	j	800039c4 <__multf3+0xa94>
80003a80:	00090513          	mv	a0,s2
80003a84:	631010ef          	jal	ra,800058b4 <__clzsi2>
80003a88:	06050513          	addi	a0,a0,96
80003a8c:	f39ff06f          	j	800039c4 <__multf3+0xa94>
80003a90:	ffc00613          	li	a2,-4
80003a94:	02c78633          	mul	a2,a5,a2
80003a98:	03c10713          	addi	a4,sp,60
80003a9c:	00300693          	li	a3,3
80003aa0:	00c705b3          	add	a1,a4,a2
80003aa4:	0005a583          	lw	a1,0(a1)
80003aa8:	fff68693          	addi	a3,a3,-1
80003aac:	ffc70713          	addi	a4,a4,-4
80003ab0:	00b72223          	sw	a1,4(a4)
80003ab4:	fef6d6e3          	bge	a3,a5,80003aa0 <__multf3+0xb70>
80003ab8:	fff78713          	addi	a4,a5,-1
80003abc:	f5dff06f          	j	80003a18 <__multf3+0xae8>
80003ac0:	00072583          	lw	a1,0(a4)
80003ac4:	ffc72883          	lw	a7,-4(a4)
80003ac8:	00c70e33          	add	t3,a4,a2
80003acc:	00d595b3          	sll	a1,a1,a3
80003ad0:	0108d8b3          	srl	a7,a7,a6
80003ad4:	0115e5b3          	or	a1,a1,a7
80003ad8:	00be2023          	sw	a1,0(t3)
80003adc:	ffc70713          	addi	a4,a4,-4
80003ae0:	f15ff06f          	j	800039f4 <__multf3+0xac4>
80003ae4:	01696933          	or	s2,s2,s6
80003ae8:	01596933          	or	s2,s2,s5
80003aec:	00a96933          	or	s2,s2,a0
80003af0:	00200693          	li	a3,2
80003af4:	da090c63          	beqz	s2,800030ac <__multf3+0x17c>
80003af8:	00300693          	li	a3,3
80003afc:	db0ff06f          	j	800030ac <__multf3+0x17c>
80003b00:	00000793          	li	a5,0
80003b04:	00100693          	li	a3,1
80003b08:	da4ff06f          	j	800030ac <__multf3+0x17c>
80003b0c:	00100713          	li	a4,1
80003b10:	00f717b3          	sll	a5,a4,a5
80003b14:	5307f713          	andi	a4,a5,1328
80003b18:	04071463          	bnez	a4,80003b60 <__multf3+0xc30>
80003b1c:	0887f713          	andi	a4,a5,136
80003b20:	1a071e63          	bnez	a4,80003cdc <__multf3+0xdac>
80003b24:	2407f793          	andi	a5,a5,576
80003b28:	dc078063          	beqz	a5,800030e8 <__multf3+0x1b8>
80003b2c:	000087b7          	lui	a5,0x8
80003b30:	04f12623          	sw	a5,76(sp)
80003b34:	04012423          	sw	zero,72(sp)
80003b38:	04012223          	sw	zero,68(sp)
80003b3c:	04012023          	sw	zero,64(sp)
80003b40:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
80003b44:	00012223          	sw	zero,4(sp)
80003b48:	11c0006f          	j	80003c64 <__multf3+0xd34>
80003b4c:	00f00713          	li	a4,15
80003b50:	fce78ee3          	beq	a5,a4,80003b2c <__multf3+0xbfc>
80003b54:	00b00713          	li	a4,11
80003b58:	18e78263          	beq	a5,a4,80003cdc <__multf3+0xdac>
80003b5c:	01312223          	sw	s3,4(sp)
80003b60:	02012783          	lw	a5,32(sp)
80003b64:	04f12023          	sw	a5,64(sp)
80003b68:	02412783          	lw	a5,36(sp)
80003b6c:	04f12223          	sw	a5,68(sp)
80003b70:	02812783          	lw	a5,40(sp)
80003b74:	04f12423          	sw	a5,72(sp)
80003b78:	02c12783          	lw	a5,44(sp)
80003b7c:	04f12623          	sw	a5,76(sp)
80003b80:	00200793          	li	a5,2
80003b84:	3afb8663          	beq	s7,a5,80003f30 <__multf3+0x1000>
80003b88:	00300793          	li	a5,3
80003b8c:	fafb80e3          	beq	s7,a5,80003b2c <__multf3+0xbfc>
80003b90:	00100793          	li	a5,1
80003b94:	38fb8463          	beq	s7,a5,80003f1c <__multf3+0xfec>
80003b98:	00812703          	lw	a4,8(sp)
80003b9c:	000047b7          	lui	a5,0x4
80003ba0:	fff78793          	addi	a5,a5,-1 # 3fff <__STACKSIZE__-0x1>
80003ba4:	00f707b3          	add	a5,a4,a5
80003ba8:	16f05a63          	blez	a5,80003d1c <__multf3+0xdec>
80003bac:	04012703          	lw	a4,64(sp)
80003bb0:	00777693          	andi	a3,a4,7
80003bb4:	04068463          	beqz	a3,80003bfc <__multf3+0xccc>
80003bb8:	00f77693          	andi	a3,a4,15
80003bbc:	00400613          	li	a2,4
80003bc0:	02c68e63          	beq	a3,a2,80003bfc <__multf3+0xccc>
80003bc4:	00470713          	addi	a4,a4,4
80003bc8:	00473693          	sltiu	a3,a4,4
80003bcc:	04e12023          	sw	a4,64(sp)
80003bd0:	04412703          	lw	a4,68(sp)
80003bd4:	00e68733          	add	a4,a3,a4
80003bd8:	04e12223          	sw	a4,68(sp)
80003bdc:	00d73733          	sltu	a4,a4,a3
80003be0:	04812683          	lw	a3,72(sp)
80003be4:	00e68733          	add	a4,a3,a4
80003be8:	04e12423          	sw	a4,72(sp)
80003bec:	00d73733          	sltu	a4,a4,a3
80003bf0:	04c12683          	lw	a3,76(sp)
80003bf4:	00d70733          	add	a4,a4,a3
80003bf8:	04e12623          	sw	a4,76(sp)
80003bfc:	04c12703          	lw	a4,76(sp)
80003c00:	00b71693          	slli	a3,a4,0xb
80003c04:	0206d063          	bgez	a3,80003c24 <__multf3+0xcf4>
80003c08:	fff007b7          	lui	a5,0xfff00
80003c0c:	fff78793          	addi	a5,a5,-1 # ffefffff <__bss_end+0x7fe79843>
80003c10:	00f77733          	and	a4,a4,a5
80003c14:	04e12623          	sw	a4,76(sp)
80003c18:	00812703          	lw	a4,8(sp)
80003c1c:	000047b7          	lui	a5,0x4
80003c20:	00f707b3          	add	a5,a4,a5
80003c24:	04010713          	addi	a4,sp,64
80003c28:	04c10593          	addi	a1,sp,76
80003c2c:	00072683          	lw	a3,0(a4)
80003c30:	00472603          	lw	a2,4(a4)
80003c34:	00470713          	addi	a4,a4,4
80003c38:	0036d693          	srli	a3,a3,0x3
80003c3c:	01d61613          	slli	a2,a2,0x1d
80003c40:	00c6e6b3          	or	a3,a3,a2
80003c44:	fed72e23          	sw	a3,-4(a4)
80003c48:	fee592e3          	bne	a1,a4,80003c2c <__multf3+0xcfc>
80003c4c:	000086b7          	lui	a3,0x8
80003c50:	ffe68613          	addi	a2,a3,-2 # 7ffe <__STACKSIZE__+0x3ffe>
80003c54:	04c12703          	lw	a4,76(sp)
80003c58:	0af64663          	blt	a2,a5,80003d04 <__multf3+0xdd4>
80003c5c:	00375713          	srli	a4,a4,0x3
80003c60:	04e12623          	sw	a4,76(sp)
80003c64:	04c12703          	lw	a4,76(sp)
80003c68:	0ac12083          	lw	ra,172(sp)
80003c6c:	00040513          	mv	a0,s0
80003c70:	04e11e23          	sh	a4,92(sp)
80003c74:	00412703          	lw	a4,4(sp)
80003c78:	0a412483          	lw	s1,164(sp)
80003c7c:	0a012903          	lw	s2,160(sp)
80003c80:	00f71713          	slli	a4,a4,0xf
80003c84:	00f767b3          	or	a5,a4,a5
80003c88:	04f11f23          	sh	a5,94(sp)
80003c8c:	04012783          	lw	a5,64(sp)
80003c90:	09c12983          	lw	s3,156(sp)
80003c94:	09812a03          	lw	s4,152(sp)
80003c98:	00f42023          	sw	a5,0(s0)
80003c9c:	04412783          	lw	a5,68(sp)
80003ca0:	09412a83          	lw	s5,148(sp)
80003ca4:	09012b03          	lw	s6,144(sp)
80003ca8:	00f42223          	sw	a5,4(s0)
80003cac:	04812783          	lw	a5,72(sp)
80003cb0:	08c12b83          	lw	s7,140(sp)
80003cb4:	08812c03          	lw	s8,136(sp)
80003cb8:	00f42423          	sw	a5,8(s0)
80003cbc:	05c12783          	lw	a5,92(sp)
80003cc0:	08412c83          	lw	s9,132(sp)
80003cc4:	08012d03          	lw	s10,128(sp)
80003cc8:	00f42623          	sw	a5,12(s0)
80003ccc:	0a812403          	lw	s0,168(sp)
80003cd0:	07c12d83          	lw	s11,124(sp)
80003cd4:	0b010113          	addi	sp,sp,176
80003cd8:	00008067          	ret
80003cdc:	01412223          	sw	s4,4(sp)
80003ce0:	03012783          	lw	a5,48(sp)
80003ce4:	00068b93          	mv	s7,a3
80003ce8:	04f12023          	sw	a5,64(sp)
80003cec:	03412783          	lw	a5,52(sp)
80003cf0:	04f12223          	sw	a5,68(sp)
80003cf4:	03812783          	lw	a5,56(sp)
80003cf8:	04f12423          	sw	a5,72(sp)
80003cfc:	03c12783          	lw	a5,60(sp)
80003d00:	e7dff06f          	j	80003b7c <__multf3+0xc4c>
80003d04:	04012623          	sw	zero,76(sp)
80003d08:	04012423          	sw	zero,72(sp)
80003d0c:	04012223          	sw	zero,68(sp)
80003d10:	04012023          	sw	zero,64(sp)
80003d14:	fff68793          	addi	a5,a3,-1
80003d18:	f4dff06f          	j	80003c64 <__multf3+0xd34>
80003d1c:	00100693          	li	a3,1
80003d20:	40f686b3          	sub	a3,a3,a5
80003d24:	07400793          	li	a5,116
80003d28:	1cd7ca63          	blt	a5,a3,80003efc <__multf3+0xfcc>
80003d2c:	04010613          	addi	a2,sp,64
80003d30:	4056d713          	srai	a4,a3,0x5
80003d34:	00060513          	mv	a0,a2
80003d38:	01f6f693          	andi	a3,a3,31
80003d3c:	00000793          	li	a5,0
80003d40:	00000593          	li	a1,0
80003d44:	02e59e63          	bne	a1,a4,80003d80 <__multf3+0xe50>
80003d48:	00300593          	li	a1,3
80003d4c:	40e585b3          	sub	a1,a1,a4
80003d50:	00271513          	slli	a0,a4,0x2
80003d54:	04069063          	bnez	a3,80003d94 <__multf3+0xe64>
80003d58:	00060813          	mv	a6,a2
80003d5c:	00a808b3          	add	a7,a6,a0
80003d60:	0008a883          	lw	a7,0(a7) # 10000 <__STACKSIZE__+0xc000>
80003d64:	00168693          	addi	a3,a3,1
80003d68:	00480813          	addi	a6,a6,4
80003d6c:	ff182e23          	sw	a7,-4(a6)
80003d70:	fed5d6e3          	bge	a1,a3,80003d5c <__multf3+0xe2c>
80003d74:	00400693          	li	a3,4
80003d78:	40e68733          	sub	a4,a3,a4
80003d7c:	06c0006f          	j	80003de8 <__multf3+0xeb8>
80003d80:	00052803          	lw	a6,0(a0)
80003d84:	00158593          	addi	a1,a1,1
80003d88:	00450513          	addi	a0,a0,4
80003d8c:	0107e7b3          	or	a5,a5,a6
80003d90:	fb5ff06f          	j	80003d44 <__multf3+0xe14>
80003d94:	05050813          	addi	a6,a0,80
80003d98:	02010893          	addi	a7,sp,32
80003d9c:	01180833          	add	a6,a6,a7
80003da0:	fd082803          	lw	a6,-48(a6)
80003da4:	02000313          	li	t1,32
80003da8:	40d30333          	sub	t1,t1,a3
80003dac:	00681833          	sll	a6,a6,t1
80003db0:	0107e7b3          	or	a5,a5,a6
80003db4:	00000e13          	li	t3,0
80003db8:	00a60833          	add	a6,a2,a0
80003dbc:	40a00533          	neg	a0,a0
80003dc0:	0ebe4063          	blt	t3,a1,80003ea0 <__multf3+0xf70>
80003dc4:	00400513          	li	a0,4
80003dc8:	00259593          	slli	a1,a1,0x2
80003dcc:	40e50733          	sub	a4,a0,a4
80003dd0:	05058593          	addi	a1,a1,80
80003dd4:	02010513          	addi	a0,sp,32
80003dd8:	00a585b3          	add	a1,a1,a0
80003ddc:	04c12503          	lw	a0,76(sp)
80003de0:	00d556b3          	srl	a3,a0,a3
80003de4:	fcd5a823          	sw	a3,-48(a1)
80003de8:	00400693          	li	a3,4
80003dec:	40e686b3          	sub	a3,a3,a4
80003df0:	00269693          	slli	a3,a3,0x2
80003df4:	00271713          	slli	a4,a4,0x2
80003df8:	00800593          	li	a1,8
80003dfc:	00e60733          	add	a4,a2,a4
80003e00:	00b6ea63          	bltu	a3,a1,80003e14 <__multf3+0xee4>
80003e04:	00072023          	sw	zero,0(a4)
80003e08:	00072223          	sw	zero,4(a4)
80003e0c:	ff868693          	addi	a3,a3,-8
80003e10:	00870713          	addi	a4,a4,8
80003e14:	00400593          	li	a1,4
80003e18:	00b6e463          	bltu	a3,a1,80003e20 <__multf3+0xef0>
80003e1c:	00072023          	sw	zero,0(a4)
80003e20:	04012703          	lw	a4,64(sp)
80003e24:	00f037b3          	snez	a5,a5
80003e28:	00e7e7b3          	or	a5,a5,a4
80003e2c:	04f12023          	sw	a5,64(sp)
80003e30:	0077f713          	andi	a4,a5,7
80003e34:	04070463          	beqz	a4,80003e7c <__multf3+0xf4c>
80003e38:	00f7f713          	andi	a4,a5,15
80003e3c:	00400693          	li	a3,4
80003e40:	02d70e63          	beq	a4,a3,80003e7c <__multf3+0xf4c>
80003e44:	04412703          	lw	a4,68(sp)
80003e48:	00478793          	addi	a5,a5,4 # 4004 <__STACKSIZE__+0x4>
80003e4c:	04f12023          	sw	a5,64(sp)
80003e50:	0047b793          	sltiu	a5,a5,4
80003e54:	00f707b3          	add	a5,a4,a5
80003e58:	04f12223          	sw	a5,68(sp)
80003e5c:	00e7b7b3          	sltu	a5,a5,a4
80003e60:	04812703          	lw	a4,72(sp)
80003e64:	00f707b3          	add	a5,a4,a5
80003e68:	04f12423          	sw	a5,72(sp)
80003e6c:	00e7b7b3          	sltu	a5,a5,a4
80003e70:	04c12703          	lw	a4,76(sp)
80003e74:	00e787b3          	add	a5,a5,a4
80003e78:	04f12623          	sw	a5,76(sp)
80003e7c:	04c12703          	lw	a4,76(sp)
80003e80:	00c71793          	slli	a5,a4,0xc
80003e84:	0407d263          	bgez	a5,80003ec8 <__multf3+0xf98>
80003e88:	04012623          	sw	zero,76(sp)
80003e8c:	04012423          	sw	zero,72(sp)
80003e90:	04012223          	sw	zero,68(sp)
80003e94:	04012023          	sw	zero,64(sp)
80003e98:	00100793          	li	a5,1
80003e9c:	dc9ff06f          	j	80003c64 <__multf3+0xd34>
80003ea0:	00082883          	lw	a7,0(a6)
80003ea4:	00482e83          	lw	t4,4(a6)
80003ea8:	00a80f33          	add	t5,a6,a0
80003eac:	00d8d8b3          	srl	a7,a7,a3
80003eb0:	006e9eb3          	sll	t4,t4,t1
80003eb4:	01d8e8b3          	or	a7,a7,t4
80003eb8:	011f2023          	sw	a7,0(t5)
80003ebc:	001e0e13          	addi	t3,t3,1
80003ec0:	00480813          	addi	a6,a6,4
80003ec4:	efdff06f          	j	80003dc0 <__multf3+0xe90>
80003ec8:	00c60593          	addi	a1,a2,12
80003ecc:	00062783          	lw	a5,0(a2)
80003ed0:	00462683          	lw	a3,4(a2)
80003ed4:	00460613          	addi	a2,a2,4
80003ed8:	0037d793          	srli	a5,a5,0x3
80003edc:	01d69693          	slli	a3,a3,0x1d
80003ee0:	00d7e7b3          	or	a5,a5,a3
80003ee4:	fef62e23          	sw	a5,-4(a2)
80003ee8:	fec592e3          	bne	a1,a2,80003ecc <__multf3+0xf9c>
80003eec:	00375713          	srli	a4,a4,0x3
80003ef0:	04e12623          	sw	a4,76(sp)
80003ef4:	00000793          	li	a5,0
80003ef8:	d6dff06f          	j	80003c64 <__multf3+0xd34>
80003efc:	04412703          	lw	a4,68(sp)
80003f00:	04012783          	lw	a5,64(sp)
80003f04:	00e7e7b3          	or	a5,a5,a4
80003f08:	04812703          	lw	a4,72(sp)
80003f0c:	00e7e7b3          	or	a5,a5,a4
80003f10:	04c12703          	lw	a4,76(sp)
80003f14:	00e7e7b3          	or	a5,a5,a4
80003f18:	fc078ee3          	beqz	a5,80003ef4 <__multf3+0xfc4>
80003f1c:	04012623          	sw	zero,76(sp)
80003f20:	04012423          	sw	zero,72(sp)
80003f24:	04012223          	sw	zero,68(sp)
80003f28:	04012023          	sw	zero,64(sp)
80003f2c:	fc9ff06f          	j	80003ef4 <__multf3+0xfc4>
80003f30:	000087b7          	lui	a5,0x8
80003f34:	04012623          	sw	zero,76(sp)
80003f38:	04012423          	sw	zero,72(sp)
80003f3c:	04012223          	sw	zero,68(sp)
80003f40:	04012023          	sw	zero,64(sp)
80003f44:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
80003f48:	d1dff06f          	j	80003c64 <__multf3+0xd34>

80003f4c <__subtf3>:
80003f4c:	f9010113          	addi	sp,sp,-112
80003f50:	0085a703          	lw	a4,8(a1)
80003f54:	05512a23          	sw	s5,84(sp)
80003f58:	00c5aa83          	lw	s5,12(a1)
80003f5c:	0005a783          	lw	a5,0(a1)
80003f60:	0045a683          	lw	a3,4(a1)
80003f64:	02e12c23          	sw	a4,56(sp)
80003f68:	00e12c23          	sw	a4,24(sp)
80003f6c:	010a9713          	slli	a4,s5,0x10
80003f70:	06912223          	sw	s1,100(sp)
80003f74:	01075713          	srli	a4,a4,0x10
80003f78:	001a9493          	slli	s1,s5,0x1
80003f7c:	00462803          	lw	a6,4(a2)
80003f80:	00862583          	lw	a1,8(a2)
80003f84:	06812423          	sw	s0,104(sp)
80003f88:	07212023          	sw	s2,96(sp)
80003f8c:	00062403          	lw	s0,0(a2)
80003f90:	00c62903          	lw	s2,12(a2)
80003f94:	05412c23          	sw	s4,88(sp)
80003f98:	03512e23          	sw	s5,60(sp)
80003f9c:	00050a13          	mv	s4,a0
80003fa0:	06112623          	sw	ra,108(sp)
80003fa4:	05312e23          	sw	s3,92(sp)
80003fa8:	05612823          	sw	s6,80(sp)
80003fac:	05712623          	sw	s7,76(sp)
80003fb0:	05812423          	sw	s8,72(sp)
80003fb4:	02f12823          	sw	a5,48(sp)
80003fb8:	02d12a23          	sw	a3,52(sp)
80003fbc:	00f12823          	sw	a5,16(sp)
80003fc0:	00d12a23          	sw	a3,20(sp)
80003fc4:	00e12e23          	sw	a4,28(sp)
80003fc8:	0114d493          	srli	s1,s1,0x11
80003fcc:	01fada93          	srli	s5,s5,0x1f
80003fd0:	01010513          	addi	a0,sp,16
80003fd4:	01c10613          	addi	a2,sp,28
80003fd8:	00062703          	lw	a4,0(a2)
80003fdc:	ffc62683          	lw	a3,-4(a2)
80003fe0:	ffc60613          	addi	a2,a2,-4
80003fe4:	00371713          	slli	a4,a4,0x3
80003fe8:	01d6d693          	srli	a3,a3,0x1d
80003fec:	00d76733          	or	a4,a4,a3
80003ff0:	00e62223          	sw	a4,4(a2)
80003ff4:	fec512e3          	bne	a0,a2,80003fd8 <__subtf3+0x8c>
80003ff8:	01091713          	slli	a4,s2,0x10
80003ffc:	00191b93          	slli	s7,s2,0x1
80004000:	00379793          	slli	a5,a5,0x3
80004004:	01075713          	srli	a4,a4,0x10
80004008:	03012a23          	sw	a6,52(sp)
8000400c:	03212e23          	sw	s2,60(sp)
80004010:	03012223          	sw	a6,36(sp)
80004014:	00f12823          	sw	a5,16(sp)
80004018:	02812823          	sw	s0,48(sp)
8000401c:	02b12c23          	sw	a1,56(sp)
80004020:	02812023          	sw	s0,32(sp)
80004024:	02b12423          	sw	a1,40(sp)
80004028:	02e12623          	sw	a4,44(sp)
8000402c:	011bdb93          	srli	s7,s7,0x11
80004030:	01f95913          	srli	s2,s2,0x1f
80004034:	02010813          	addi	a6,sp,32
80004038:	02c10313          	addi	t1,sp,44
8000403c:	00032703          	lw	a4,0(t1)
80004040:	ffc32683          	lw	a3,-4(t1)
80004044:	ffc30313          	addi	t1,t1,-4
80004048:	00371713          	slli	a4,a4,0x3
8000404c:	01d6d693          	srli	a3,a3,0x1d
80004050:	00d76733          	or	a4,a4,a3
80004054:	00e32223          	sw	a4,4(t1)
80004058:	fe6812e3          	bne	a6,t1,8000403c <__subtf3+0xf0>
8000405c:	00341413          	slli	s0,s0,0x3
80004060:	00008737          	lui	a4,0x8
80004064:	02812023          	sw	s0,32(sp)
80004068:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
8000406c:	02eb9063          	bne	s7,a4,8000408c <__subtf3+0x140>
80004070:	02812683          	lw	a3,40(sp)
80004074:	02412703          	lw	a4,36(sp)
80004078:	00d76733          	or	a4,a4,a3
8000407c:	02c12683          	lw	a3,44(sp)
80004080:	00d76733          	or	a4,a4,a3
80004084:	00876733          	or	a4,a4,s0
80004088:	00071463          	bnez	a4,80004090 <__subtf3+0x144>
8000408c:	00194913          	xori	s2,s2,1
80004090:	417488b3          	sub	a7,s1,s7
80004094:	095916e3          	bne	s2,s5,80004920 <__subtf3+0x9d4>
80004098:	45105263          	blez	a7,800044dc <__subtf3+0x590>
8000409c:	01412903          	lw	s2,20(sp)
800040a0:	01812983          	lw	s3,24(sp)
800040a4:	01c12b03          	lw	s6,28(sp)
800040a8:	0a0b9263          	bnez	s7,8000414c <__subtf3+0x200>
800040ac:	02412683          	lw	a3,36(sp)
800040b0:	02812703          	lw	a4,40(sp)
800040b4:	02c12583          	lw	a1,44(sp)
800040b8:	00e6e633          	or	a2,a3,a4
800040bc:	00b66633          	or	a2,a2,a1
800040c0:	00866633          	or	a2,a2,s0
800040c4:	00061e63          	bnez	a2,800040e0 <__subtf3+0x194>
800040c8:	02f12823          	sw	a5,48(sp)
800040cc:	03212a23          	sw	s2,52(sp)
800040d0:	03312c23          	sw	s3,56(sp)
800040d4:	03612e23          	sw	s6,60(sp)
800040d8:	00088493          	mv	s1,a7
800040dc:	08c0006f          	j	80004168 <__subtf3+0x21c>
800040e0:	fff88613          	addi	a2,a7,-1
800040e4:	04061863          	bnez	a2,80004134 <__subtf3+0x1e8>
800040e8:	00878433          	add	s0,a5,s0
800040ec:	01268933          	add	s2,a3,s2
800040f0:	02812823          	sw	s0,48(sp)
800040f4:	00f43433          	sltu	s0,s0,a5
800040f8:	00890433          	add	s0,s2,s0
800040fc:	02812a23          	sw	s0,52(sp)
80004100:	00d936b3          	sltu	a3,s2,a3
80004104:	01243433          	sltu	s0,s0,s2
80004108:	013709b3          	add	s3,a4,s3
8000410c:	0086e6b3          	or	a3,a3,s0
80004110:	00d986b3          	add	a3,s3,a3
80004114:	02d12c23          	sw	a3,56(sp)
80004118:	00e9b7b3          	sltu	a5,s3,a4
8000411c:	0136b6b3          	sltu	a3,a3,s3
80004120:	00d7e7b3          	or	a5,a5,a3
80004124:	016585b3          	add	a1,a1,s6
80004128:	00b787b3          	add	a5,a5,a1
8000412c:	00100493          	li	s1,1
80004130:	2fc0006f          	j	8000442c <__subtf3+0x4e0>
80004134:	00008737          	lui	a4,0x8
80004138:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
8000413c:	00e88463          	beq	a7,a4,80004144 <__subtf3+0x1f8>
80004140:	24c0106f          	j	8000538c <__subtf3+0x1440>
80004144:	02f12823          	sw	a5,48(sp)
80004148:	4400006f          	j	80004588 <__subtf3+0x63c>
8000414c:	00008737          	lui	a4,0x8
80004150:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
80004154:	16e49a63          	bne	s1,a4,800042c8 <__subtf3+0x37c>
80004158:	02f12823          	sw	a5,48(sp)
8000415c:	03212a23          	sw	s2,52(sp)
80004160:	03312c23          	sw	s3,56(sp)
80004164:	03612e23          	sw	s6,60(sp)
80004168:	03012783          	lw	a5,48(sp)
8000416c:	0077f713          	andi	a4,a5,7
80004170:	04070463          	beqz	a4,800041b8 <__subtf3+0x26c>
80004174:	00f7f713          	andi	a4,a5,15
80004178:	00400693          	li	a3,4
8000417c:	02d70e63          	beq	a4,a3,800041b8 <__subtf3+0x26c>
80004180:	03412703          	lw	a4,52(sp)
80004184:	00478793          	addi	a5,a5,4
80004188:	02f12823          	sw	a5,48(sp)
8000418c:	0047b793          	sltiu	a5,a5,4
80004190:	00f707b3          	add	a5,a4,a5
80004194:	02f12a23          	sw	a5,52(sp)
80004198:	00e7b7b3          	sltu	a5,a5,a4
8000419c:	03812703          	lw	a4,56(sp)
800041a0:	00f707b3          	add	a5,a4,a5
800041a4:	02f12c23          	sw	a5,56(sp)
800041a8:	00e7b7b3          	sltu	a5,a5,a4
800041ac:	03c12703          	lw	a4,60(sp)
800041b0:	00e787b3          	add	a5,a5,a4
800041b4:	02f12e23          	sw	a5,60(sp)
800041b8:	03c12783          	lw	a5,60(sp)
800041bc:	00c79713          	slli	a4,a5,0xc
800041c0:	02075463          	bgez	a4,800041e8 <__subtf3+0x29c>
800041c4:	00008737          	lui	a4,0x8
800041c8:	00148493          	addi	s1,s1,1
800041cc:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
800041d0:	00e49463          	bne	s1,a4,800041d8 <__subtf3+0x28c>
800041d4:	1a40106f          	j	80005378 <__subtf3+0x142c>
800041d8:	fff80737          	lui	a4,0xfff80
800041dc:	fff70713          	addi	a4,a4,-1 # fff7ffff <__bss_end+0x7fef9843>
800041e0:	00e7f7b3          	and	a5,a5,a4
800041e4:	02f12e23          	sw	a5,60(sp)
800041e8:	03010793          	addi	a5,sp,48
800041ec:	03c10613          	addi	a2,sp,60
800041f0:	0007a703          	lw	a4,0(a5)
800041f4:	0047a683          	lw	a3,4(a5)
800041f8:	00478793          	addi	a5,a5,4
800041fc:	00375713          	srli	a4,a4,0x3
80004200:	01d69693          	slli	a3,a3,0x1d
80004204:	00d76733          	or	a4,a4,a3
80004208:	fee7ae23          	sw	a4,-4(a5)
8000420c:	fec792e3          	bne	a5,a2,800041f0 <__subtf3+0x2a4>
80004210:	03c12703          	lw	a4,60(sp)
80004214:	000086b7          	lui	a3,0x8
80004218:	fff68793          	addi	a5,a3,-1 # 7fff <__STACKSIZE__+0x3fff>
8000421c:	00375713          	srli	a4,a4,0x3
80004220:	02e12e23          	sw	a4,60(sp)
80004224:	02f49a63          	bne	s1,a5,80004258 <__subtf3+0x30c>
80004228:	03412603          	lw	a2,52(sp)
8000422c:	03012783          	lw	a5,48(sp)
80004230:	00c7e7b3          	or	a5,a5,a2
80004234:	03812603          	lw	a2,56(sp)
80004238:	00c7e7b3          	or	a5,a5,a2
8000423c:	00e7e7b3          	or	a5,a5,a4
80004240:	00078c63          	beqz	a5,80004258 <__subtf3+0x30c>
80004244:	02d12e23          	sw	a3,60(sp)
80004248:	02012c23          	sw	zero,56(sp)
8000424c:	02012a23          	sw	zero,52(sp)
80004250:	02012823          	sw	zero,48(sp)
80004254:	00000a93          	li	s5,0
80004258:	03c12783          	lw	a5,60(sp)
8000425c:	01149493          	slli	s1,s1,0x11
80004260:	0114d493          	srli	s1,s1,0x11
80004264:	00f11623          	sh	a5,12(sp)
80004268:	03012783          	lw	a5,48(sp)
8000426c:	00fa9a93          	slli	s5,s5,0xf
80004270:	009aeab3          	or	s5,s5,s1
80004274:	00fa2023          	sw	a5,0(s4)
80004278:	03412783          	lw	a5,52(sp)
8000427c:	01511723          	sh	s5,14(sp)
80004280:	06c12083          	lw	ra,108(sp)
80004284:	00fa2223          	sw	a5,4(s4)
80004288:	03812783          	lw	a5,56(sp)
8000428c:	06812403          	lw	s0,104(sp)
80004290:	06412483          	lw	s1,100(sp)
80004294:	00fa2423          	sw	a5,8(s4)
80004298:	00c12783          	lw	a5,12(sp)
8000429c:	06012903          	lw	s2,96(sp)
800042a0:	05c12983          	lw	s3,92(sp)
800042a4:	00fa2623          	sw	a5,12(s4)
800042a8:	05412a83          	lw	s5,84(sp)
800042ac:	05012b03          	lw	s6,80(sp)
800042b0:	04c12b83          	lw	s7,76(sp)
800042b4:	04812c03          	lw	s8,72(sp)
800042b8:	000a0513          	mv	a0,s4
800042bc:	05812a03          	lw	s4,88(sp)
800042c0:	07010113          	addi	sp,sp,112
800042c4:	00008067          	ret
800042c8:	02c12703          	lw	a4,44(sp)
800042cc:	000806b7          	lui	a3,0x80
800042d0:	00d76733          	or	a4,a4,a3
800042d4:	02e12623          	sw	a4,44(sp)
800042d8:	07400713          	li	a4,116
800042dc:	01175463          	bge	a4,a7,800042e4 <__subtf3+0x398>
800042e0:	0b80106f          	j	80005398 <__subtf3+0x144c>
800042e4:	00088613          	mv	a2,a7
800042e8:	40565693          	srai	a3,a2,0x5
800042ec:	00030513          	mv	a0,t1
800042f0:	01f67613          	andi	a2,a2,31
800042f4:	00000713          	li	a4,0
800042f8:	00000593          	li	a1,0
800042fc:	02d59c63          	bne	a1,a3,80004334 <__subtf3+0x3e8>
80004300:	00300593          	li	a1,3
80004304:	40d585b3          	sub	a1,a1,a3
80004308:	00269513          	slli	a0,a3,0x2
8000430c:	02061e63          	bnez	a2,80004348 <__subtf3+0x3fc>
80004310:	00a308b3          	add	a7,t1,a0
80004314:	0008a883          	lw	a7,0(a7)
80004318:	00160613          	addi	a2,a2,1
8000431c:	00430313          	addi	t1,t1,4
80004320:	ff132e23          	sw	a7,-4(t1)
80004324:	fec5d6e3          	bge	a1,a2,80004310 <__subtf3+0x3c4>
80004328:	00400613          	li	a2,4
8000432c:	40d606b3          	sub	a3,a2,a3
80004330:	0640006f          	j	80004394 <__subtf3+0x448>
80004334:	00052883          	lw	a7,0(a0)
80004338:	00158593          	addi	a1,a1,1
8000433c:	00450513          	addi	a0,a0,4
80004340:	01176733          	or	a4,a4,a7
80004344:	fb9ff06f          	j	800042fc <__subtf3+0x3b0>
80004348:	04050893          	addi	a7,a0,64
8000434c:	002888b3          	add	a7,a7,sp
80004350:	fe08a883          	lw	a7,-32(a7)
80004354:	02000e13          	li	t3,32
80004358:	40ce0e33          	sub	t3,t3,a2
8000435c:	01c898b3          	sll	a7,a7,t3
80004360:	01176733          	or	a4,a4,a7
80004364:	00000e93          	li	t4,0
80004368:	00a808b3          	add	a7,a6,a0
8000436c:	40a00533          	neg	a0,a0
80004370:	14bec263          	blt	t4,a1,800044b4 <__subtf3+0x568>
80004374:	00400513          	li	a0,4
80004378:	40d506b3          	sub	a3,a0,a3
8000437c:	02c12503          	lw	a0,44(sp)
80004380:	00259593          	slli	a1,a1,0x2
80004384:	04058593          	addi	a1,a1,64
80004388:	002585b3          	add	a1,a1,sp
8000438c:	00c55633          	srl	a2,a0,a2
80004390:	fec5a023          	sw	a2,-32(a1)
80004394:	00400613          	li	a2,4
80004398:	40d60633          	sub	a2,a2,a3
8000439c:	00261613          	slli	a2,a2,0x2
800043a0:	00269693          	slli	a3,a3,0x2
800043a4:	00800593          	li	a1,8
800043a8:	00d806b3          	add	a3,a6,a3
800043ac:	00b66a63          	bltu	a2,a1,800043c0 <__subtf3+0x474>
800043b0:	0006a023          	sw	zero,0(a3) # 80000 <__STACKSIZE__+0x7c000>
800043b4:	0006a223          	sw	zero,4(a3)
800043b8:	ff860613          	addi	a2,a2,-8
800043bc:	00868693          	addi	a3,a3,8
800043c0:	00400593          	li	a1,4
800043c4:	00b66463          	bltu	a2,a1,800043cc <__subtf3+0x480>
800043c8:	0006a023          	sw	zero,0(a3)
800043cc:	02012683          	lw	a3,32(sp)
800043d0:	00e03733          	snez	a4,a4
800043d4:	00d76733          	or	a4,a4,a3
800043d8:	02412683          	lw	a3,36(sp)
800043dc:	02e12023          	sw	a4,32(sp)
800043e0:	00e78733          	add	a4,a5,a4
800043e4:	01268933          	add	s2,a3,s2
800043e8:	02e12823          	sw	a4,48(sp)
800043ec:	00f73733          	sltu	a4,a4,a5
800043f0:	02812783          	lw	a5,40(sp)
800043f4:	00e90733          	add	a4,s2,a4
800043f8:	02e12a23          	sw	a4,52(sp)
800043fc:	00d936b3          	sltu	a3,s2,a3
80004400:	01273733          	sltu	a4,a4,s2
80004404:	013789b3          	add	s3,a5,s3
80004408:	00e6e733          	or	a4,a3,a4
8000440c:	00e98733          	add	a4,s3,a4
80004410:	02e12c23          	sw	a4,56(sp)
80004414:	00f9b7b3          	sltu	a5,s3,a5
80004418:	01373733          	sltu	a4,a4,s3
8000441c:	00e7e7b3          	or	a5,a5,a4
80004420:	02c12703          	lw	a4,44(sp)
80004424:	00eb0733          	add	a4,s6,a4
80004428:	00e787b3          	add	a5,a5,a4
8000442c:	02f12e23          	sw	a5,60(sp)
80004430:	00c79713          	slli	a4,a5,0xc
80004434:	d2075ae3          	bgez	a4,80004168 <__subtf3+0x21c>
80004438:	03012683          	lw	a3,48(sp)
8000443c:	fff80737          	lui	a4,0xfff80
80004440:	fff70713          	addi	a4,a4,-1 # fff7ffff <__bss_end+0x7fef9843>
80004444:	00e7f7b3          	and	a5,a5,a4
80004448:	02f12e23          	sw	a5,60(sp)
8000444c:	00148493          	addi	s1,s1,1
80004450:	01f69693          	slli	a3,a3,0x1f
80004454:	03010713          	addi	a4,sp,48
80004458:	03c10513          	addi	a0,sp,60
8000445c:	00072603          	lw	a2,0(a4)
80004460:	00472583          	lw	a1,4(a4)
80004464:	00470713          	addi	a4,a4,4
80004468:	00165613          	srli	a2,a2,0x1
8000446c:	01f59593          	slli	a1,a1,0x1f
80004470:	00b66633          	or	a2,a2,a1
80004474:	fec72e23          	sw	a2,-4(a4)
80004478:	fee512e3          	bne	a0,a4,8000445c <__subtf3+0x510>
8000447c:	03012703          	lw	a4,48(sp)
80004480:	0017d793          	srli	a5,a5,0x1
80004484:	02f12e23          	sw	a5,60(sp)
80004488:	00d037b3          	snez	a5,a3
8000448c:	00f767b3          	or	a5,a4,a5
80004490:	02f12823          	sw	a5,48(sp)
80004494:	000087b7          	lui	a5,0x8
80004498:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000449c:	ccf496e3          	bne	s1,a5,80004168 <__subtf3+0x21c>
800044a0:	02012e23          	sw	zero,60(sp)
800044a4:	02012c23          	sw	zero,56(sp)
800044a8:	02012a23          	sw	zero,52(sp)
800044ac:	02012823          	sw	zero,48(sp)
800044b0:	cb9ff06f          	j	80004168 <__subtf3+0x21c>
800044b4:	0008a303          	lw	t1,0(a7)
800044b8:	0048af03          	lw	t5,4(a7)
800044bc:	00a88fb3          	add	t6,a7,a0
800044c0:	00c35333          	srl	t1,t1,a2
800044c4:	01cf1f33          	sll	t5,t5,t3
800044c8:	01e36333          	or	t1,t1,t5
800044cc:	006fa023          	sw	t1,0(t6)
800044d0:	001e8e93          	addi	t4,t4,1
800044d4:	00488893          	addi	a7,a7,4
800044d8:	e99ff06f          	j	80004370 <__subtf3+0x424>
800044dc:	02412903          	lw	s2,36(sp)
800044e0:	02812983          	lw	s3,40(sp)
800044e4:	02c12b03          	lw	s6,44(sp)
800044e8:	26088263          	beqz	a7,8000474c <__subtf3+0x800>
800044ec:	409b8833          	sub	a6,s7,s1
800044f0:	0a049c63          	bnez	s1,800045a8 <__subtf3+0x65c>
800044f4:	01412683          	lw	a3,20(sp)
800044f8:	01812703          	lw	a4,24(sp)
800044fc:	01c12883          	lw	a7,28(sp)
80004500:	00e6e5b3          	or	a1,a3,a4
80004504:	0115e5b3          	or	a1,a1,a7
80004508:	00f5e5b3          	or	a1,a1,a5
8000450c:	00059e63          	bnez	a1,80004528 <__subtf3+0x5dc>
80004510:	02812823          	sw	s0,48(sp)
80004514:	03212a23          	sw	s2,52(sp)
80004518:	03312c23          	sw	s3,56(sp)
8000451c:	03612e23          	sw	s6,60(sp)
80004520:	00080493          	mv	s1,a6
80004524:	c45ff06f          	j	80004168 <__subtf3+0x21c>
80004528:	fff80593          	addi	a1,a6,-1
8000452c:	04059663          	bnez	a1,80004578 <__subtf3+0x62c>
80004530:	00878433          	add	s0,a5,s0
80004534:	01268933          	add	s2,a3,s2
80004538:	02812823          	sw	s0,48(sp)
8000453c:	00f43433          	sltu	s0,s0,a5
80004540:	00890433          	add	s0,s2,s0
80004544:	02812a23          	sw	s0,52(sp)
80004548:	00d936b3          	sltu	a3,s2,a3
8000454c:	01243433          	sltu	s0,s0,s2
80004550:	013709b3          	add	s3,a4,s3
80004554:	0086e6b3          	or	a3,a3,s0
80004558:	00d986b3          	add	a3,s3,a3
8000455c:	02d12c23          	sw	a3,56(sp)
80004560:	00e9b7b3          	sltu	a5,s3,a4
80004564:	0136b6b3          	sltu	a3,a3,s3
80004568:	00d7e7b3          	or	a5,a5,a3
8000456c:	016888b3          	add	a7,a7,s6
80004570:	011787b3          	add	a5,a5,a7
80004574:	bb9ff06f          	j	8000412c <__subtf3+0x1e0>
80004578:	000087b7          	lui	a5,0x8
8000457c:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
80004580:	62f816e3          	bne	a6,a5,800053ac <__subtf3+0x1460>
80004584:	02812823          	sw	s0,48(sp)
80004588:	03212a23          	sw	s2,52(sp)
8000458c:	03312c23          	sw	s3,56(sp)
80004590:	03612e23          	sw	s6,60(sp)
80004594:	000084b7          	lui	s1,0x8
80004598:	fff48493          	addi	s1,s1,-1 # 7fff <__STACKSIZE__+0x3fff>
8000459c:	bcdff06f          	j	80004168 <__subtf3+0x21c>
800045a0:	00078413          	mv	s0,a5
800045a4:	fe1ff06f          	j	80004584 <__subtf3+0x638>
800045a8:	000087b7          	lui	a5,0x8
800045ac:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
800045b0:	fcfb8ae3          	beq	s7,a5,80004584 <__subtf3+0x638>
800045b4:	01c12783          	lw	a5,28(sp)
800045b8:	00080737          	lui	a4,0x80
800045bc:	00e7e7b3          	or	a5,a5,a4
800045c0:	00f12e23          	sw	a5,28(sp)
800045c4:	07400793          	li	a5,116
800045c8:	5f07c6e3          	blt	a5,a6,800053b4 <__subtf3+0x1468>
800045cc:	00080593          	mv	a1,a6
800045d0:	02000713          	li	a4,32
800045d4:	02e5c733          	div	a4,a1,a4
800045d8:	00060693          	mv	a3,a2
800045dc:	00000493          	li	s1,0
800045e0:	00000793          	li	a5,0
800045e4:	02e7ce63          	blt	a5,a4,80004620 <__subtf3+0x6d4>
800045e8:	00300793          	li	a5,3
800045ec:	01f5f893          	andi	a7,a1,31
800045f0:	40e787b3          	sub	a5,a5,a4
800045f4:	00271813          	slli	a6,a4,0x2
800045f8:	02089e63          	bnez	a7,80004634 <__subtf3+0x6e8>
800045fc:	010606b3          	add	a3,a2,a6
80004600:	0006a683          	lw	a3,0(a3)
80004604:	00188893          	addi	a7,a7,1
80004608:	00460613          	addi	a2,a2,4
8000460c:	fed62e23          	sw	a3,-4(a2)
80004610:	ff17d6e3          	bge	a5,a7,800045fc <__subtf3+0x6b0>
80004614:	00400793          	li	a5,4
80004618:	40e78733          	sub	a4,a5,a4
8000461c:	0780006f          	j	80004694 <__subtf3+0x748>
80004620:	0006a803          	lw	a6,0(a3)
80004624:	00178793          	addi	a5,a5,1
80004628:	00468693          	addi	a3,a3,4
8000462c:	0104e4b3          	or	s1,s1,a6
80004630:	fb5ff06f          	j	800045e4 <__subtf3+0x698>
80004634:	02000693          	li	a3,32
80004638:	02d5e5b3          	rem	a1,a1,a3
8000463c:	40b685b3          	sub	a1,a3,a1
80004640:	00070693          	mv	a3,a4
80004644:	00075463          	bgez	a4,8000464c <__subtf3+0x700>
80004648:	00000693          	li	a3,0
8000464c:	00269693          	slli	a3,a3,0x2
80004650:	04068693          	addi	a3,a3,64
80004654:	002686b3          	add	a3,a3,sp
80004658:	fd06a683          	lw	a3,-48(a3)
8000465c:	00000313          	li	t1,0
80004660:	00b696b3          	sll	a3,a3,a1
80004664:	00d4e4b3          	or	s1,s1,a3
80004668:	010506b3          	add	a3,a0,a6
8000466c:	41000833          	neg	a6,a6
80004670:	0af34a63          	blt	t1,a5,80004724 <__subtf3+0x7d8>
80004674:	00400693          	li	a3,4
80004678:	40e68733          	sub	a4,a3,a4
8000467c:	01c12683          	lw	a3,28(sp)
80004680:	00279793          	slli	a5,a5,0x2
80004684:	04078793          	addi	a5,a5,64
80004688:	002787b3          	add	a5,a5,sp
8000468c:	0116d6b3          	srl	a3,a3,a7
80004690:	fcd7a823          	sw	a3,-48(a5)
80004694:	00572793          	slti	a5,a4,5
80004698:	00000613          	li	a2,0
8000469c:	00078863          	beqz	a5,800046ac <__subtf3+0x760>
800046a0:	00400613          	li	a2,4
800046a4:	40e60633          	sub	a2,a2,a4
800046a8:	00261613          	slli	a2,a2,0x2
800046ac:	00271713          	slli	a4,a4,0x2
800046b0:	00e50533          	add	a0,a0,a4
800046b4:	00000593          	li	a1,0
800046b8:	b3dfb0ef          	jal	ra,800001f4 <memset>
800046bc:	01012703          	lw	a4,16(sp)
800046c0:	009037b3          	snez	a5,s1
800046c4:	00e7e7b3          	or	a5,a5,a4
800046c8:	01412683          	lw	a3,20(sp)
800046cc:	00f12823          	sw	a5,16(sp)
800046d0:	00f407b3          	add	a5,s0,a5
800046d4:	01268933          	add	s2,a3,s2
800046d8:	02f12823          	sw	a5,48(sp)
800046dc:	0087b7b3          	sltu	a5,a5,s0
800046e0:	00f90733          	add	a4,s2,a5
800046e4:	01812783          	lw	a5,24(sp)
800046e8:	02e12a23          	sw	a4,52(sp)
800046ec:	00d936b3          	sltu	a3,s2,a3
800046f0:	01273733          	sltu	a4,a4,s2
800046f4:	013789b3          	add	s3,a5,s3
800046f8:	00e6e733          	or	a4,a3,a4
800046fc:	00e98733          	add	a4,s3,a4
80004700:	02e12c23          	sw	a4,56(sp)
80004704:	00f9b7b3          	sltu	a5,s3,a5
80004708:	01373733          	sltu	a4,a4,s3
8000470c:	00e7e7b3          	or	a5,a5,a4
80004710:	01c12703          	lw	a4,28(sp)
80004714:	000b8493          	mv	s1,s7
80004718:	00eb0733          	add	a4,s6,a4
8000471c:	00e787b3          	add	a5,a5,a4
80004720:	d0dff06f          	j	8000442c <__subtf3+0x4e0>
80004724:	0006a603          	lw	a2,0(a3)
80004728:	0046ae03          	lw	t3,4(a3)
8000472c:	01068eb3          	add	t4,a3,a6
80004730:	01165633          	srl	a2,a2,a7
80004734:	00be1e33          	sll	t3,t3,a1
80004738:	01c66633          	or	a2,a2,t3
8000473c:	00cea023          	sw	a2,0(t4)
80004740:	00130313          	addi	t1,t1,1
80004744:	00468693          	addi	a3,a3,4
80004748:	f29ff06f          	j	80004670 <__subtf3+0x724>
8000474c:	00008337          	lui	t1,0x8
80004750:	00148813          	addi	a6,s1,1
80004754:	ffe30893          	addi	a7,t1,-2 # 7ffe <__STACKSIZE__+0x3ffe>
80004758:	011878b3          	and	a7,a6,a7
8000475c:	01412683          	lw	a3,20(sp)
80004760:	01812703          	lw	a4,24(sp)
80004764:	01c12603          	lw	a2,28(sp)
80004768:	03010593          	addi	a1,sp,48
8000476c:	03c10513          	addi	a0,sp,60
80004770:	10089c63          	bnez	a7,80004888 <__subtf3+0x93c>
80004774:	00e6e833          	or	a6,a3,a4
80004778:	00c86833          	or	a6,a6,a2
8000477c:	00f86833          	or	a6,a6,a5
80004780:	0a049863          	bnez	s1,80004830 <__subtf3+0x8e4>
80004784:	00081e63          	bnez	a6,800047a0 <__subtf3+0x854>
80004788:	02812823          	sw	s0,48(sp)
8000478c:	03212a23          	sw	s2,52(sp)
80004790:	03312c23          	sw	s3,56(sp)
80004794:	03612e23          	sw	s6,60(sp)
80004798:	00000493          	li	s1,0
8000479c:	9cdff06f          	j	80004168 <__subtf3+0x21c>
800047a0:	013965b3          	or	a1,s2,s3
800047a4:	0165e5b3          	or	a1,a1,s6
800047a8:	0085e5b3          	or	a1,a1,s0
800047ac:	00059c63          	bnez	a1,800047c4 <__subtf3+0x878>
800047b0:	02f12823          	sw	a5,48(sp)
800047b4:	02d12a23          	sw	a3,52(sp)
800047b8:	02e12c23          	sw	a4,56(sp)
800047bc:	02c12e23          	sw	a2,60(sp)
800047c0:	9a9ff06f          	j	80004168 <__subtf3+0x21c>
800047c4:	00878433          	add	s0,a5,s0
800047c8:	01268933          	add	s2,a3,s2
800047cc:	02812823          	sw	s0,48(sp)
800047d0:	00f43433          	sltu	s0,s0,a5
800047d4:	00890433          	add	s0,s2,s0
800047d8:	02812a23          	sw	s0,52(sp)
800047dc:	00d936b3          	sltu	a3,s2,a3
800047e0:	01243433          	sltu	s0,s0,s2
800047e4:	013709b3          	add	s3,a4,s3
800047e8:	0086e6b3          	or	a3,a3,s0
800047ec:	00d986b3          	add	a3,s3,a3
800047f0:	02d12c23          	sw	a3,56(sp)
800047f4:	00e9b733          	sltu	a4,s3,a4
800047f8:	0136b6b3          	sltu	a3,a3,s3
800047fc:	00d76733          	or	a4,a4,a3
80004800:	01660633          	add	a2,a2,s6
80004804:	00c70733          	add	a4,a4,a2
80004808:	00c71793          	slli	a5,a4,0xc
8000480c:	0007c663          	bltz	a5,80004818 <__subtf3+0x8cc>
80004810:	02e12e23          	sw	a4,60(sp)
80004814:	955ff06f          	j	80004168 <__subtf3+0x21c>
80004818:	fff807b7          	lui	a5,0xfff80
8000481c:	fff78793          	addi	a5,a5,-1 # fff7ffff <__bss_end+0x7fef9843>
80004820:	00f77733          	and	a4,a4,a5
80004824:	02e12e23          	sw	a4,60(sp)
80004828:	00100493          	li	s1,1
8000482c:	93dff06f          	j	80004168 <__subtf3+0x21c>
80004830:	1a080263          	beqz	a6,800049d4 <__subtf3+0xa88>
80004834:	01396933          	or	s2,s2,s3
80004838:	01696933          	or	s2,s2,s6
8000483c:	00896933          	or	s2,s2,s0
80004840:	18090e63          	beqz	s2,800049dc <__subtf3+0xa90>
80004844:	02612e23          	sw	t1,60(sp)
80004848:	02012c23          	sw	zero,56(sp)
8000484c:	02012a23          	sw	zero,52(sp)
80004850:	02012823          	sw	zero,48(sp)
80004854:	00050793          	mv	a5,a0
80004858:	0007a703          	lw	a4,0(a5)
8000485c:	ffc7a683          	lw	a3,-4(a5)
80004860:	ffc78793          	addi	a5,a5,-4
80004864:	00371713          	slli	a4,a4,0x3
80004868:	01d6d693          	srli	a3,a3,0x1d
8000486c:	00d76733          	or	a4,a4,a3
80004870:	00e7a223          	sw	a4,4(a5)
80004874:	fef592e3          	bne	a1,a5,80004858 <__subtf3+0x90c>
80004878:	000084b7          	lui	s1,0x8
8000487c:	fff48493          	addi	s1,s1,-1 # 7fff <__STACKSIZE__+0x3fff>
80004880:	00000a93          	li	s5,0
80004884:	8e5ff06f          	j	80004168 <__subtf3+0x21c>
80004888:	00878433          	add	s0,a5,s0
8000488c:	01268933          	add	s2,a3,s2
80004890:	02812823          	sw	s0,48(sp)
80004894:	00f43433          	sltu	s0,s0,a5
80004898:	00890433          	add	s0,s2,s0
8000489c:	02812a23          	sw	s0,52(sp)
800048a0:	00d936b3          	sltu	a3,s2,a3
800048a4:	01243433          	sltu	s0,s0,s2
800048a8:	013709b3          	add	s3,a4,s3
800048ac:	0086e6b3          	or	a3,a3,s0
800048b0:	00d986b3          	add	a3,s3,a3
800048b4:	02d12c23          	sw	a3,56(sp)
800048b8:	00e9b733          	sltu	a4,s3,a4
800048bc:	0136b6b3          	sltu	a3,a3,s3
800048c0:	00d76733          	or	a4,a4,a3
800048c4:	01660633          	add	a2,a2,s6
800048c8:	00c70733          	add	a4,a4,a2
800048cc:	02e12e23          	sw	a4,60(sp)
800048d0:	00058793          	mv	a5,a1
800048d4:	0007a683          	lw	a3,0(a5)
800048d8:	0047a603          	lw	a2,4(a5)
800048dc:	00478793          	addi	a5,a5,4
800048e0:	0016d693          	srli	a3,a3,0x1
800048e4:	01f61613          	slli	a2,a2,0x1f
800048e8:	00c6e6b3          	or	a3,a3,a2
800048ec:	fed7ae23          	sw	a3,-4(a5)
800048f0:	fef512e3          	bne	a0,a5,800048d4 <__subtf3+0x988>
800048f4:	000087b7          	lui	a5,0x8
800048f8:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
800048fc:	00f80863          	beq	a6,a5,8000490c <__subtf3+0x9c0>
80004900:	00175713          	srli	a4,a4,0x1
80004904:	02e12e23          	sw	a4,60(sp)
80004908:	c19ff06f          	j	80004520 <__subtf3+0x5d4>
8000490c:	02012e23          	sw	zero,60(sp)
80004910:	02012c23          	sw	zero,56(sp)
80004914:	02012a23          	sw	zero,52(sp)
80004918:	02012823          	sw	zero,48(sp)
8000491c:	c05ff06f          	j	80004520 <__subtf3+0x5d4>
80004920:	29105c63          	blez	a7,80004bb8 <__subtf3+0xc6c>
80004924:	01412903          	lw	s2,20(sp)
80004928:	01812983          	lw	s3,24(sp)
8000492c:	01c12b03          	lw	s6,28(sp)
80004930:	0a0b9e63          	bnez	s7,800049ec <__subtf3+0xaa0>
80004934:	02412e03          	lw	t3,36(sp)
80004938:	02812503          	lw	a0,40(sp)
8000493c:	02c12683          	lw	a3,44(sp)
80004940:	00ae6733          	or	a4,t3,a0
80004944:	00d76733          	or	a4,a4,a3
80004948:	00876733          	or	a4,a4,s0
8000494c:	f6070e63          	beqz	a4,800040c8 <__subtf3+0x17c>
80004950:	fff88e93          	addi	t4,a7,-1
80004954:	040e9c63          	bnez	t4,800049ac <__subtf3+0xa60>
80004958:	40878733          	sub	a4,a5,s0
8000495c:	41c90633          	sub	a2,s2,t3
80004960:	00e7b5b3          	sltu	a1,a5,a4
80004964:	00c93833          	sltu	a6,s2,a2
80004968:	40b60633          	sub	a2,a2,a1
8000496c:	00000593          	li	a1,0
80004970:	00e7f663          	bgeu	a5,a4,8000497c <__subtf3+0xa30>
80004974:	412e0e33          	sub	t3,t3,s2
80004978:	001e3593          	seqz	a1,t3
8000497c:	0105e7b3          	or	a5,a1,a6
80004980:	40a985b3          	sub	a1,s3,a0
80004984:	00b9b833          	sltu	a6,s3,a1
80004988:	40f585b3          	sub	a1,a1,a5
8000498c:	00078663          	beqz	a5,80004998 <__subtf3+0xa4c>
80004990:	41350533          	sub	a0,a0,s3
80004994:	00153e93          	seqz	t4,a0
80004998:	40db07b3          	sub	a5,s6,a3
8000499c:	010ee6b3          	or	a3,t4,a6
800049a0:	40d787b3          	sub	a5,a5,a3
800049a4:	00100493          	li	s1,1
800049a8:	1bc0006f          	j	80004b64 <__subtf3+0xc18>
800049ac:	00008737          	lui	a4,0x8
800049b0:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
800049b4:	f8e88863          	beq	a7,a4,80004144 <__subtf3+0x1f8>
800049b8:	07400713          	li	a4,116
800049bc:	05d75c63          	bge	a4,t4,80004a14 <__subtf3+0xac8>
800049c0:	02012623          	sw	zero,44(sp)
800049c4:	02012423          	sw	zero,40(sp)
800049c8:	02012223          	sw	zero,36(sp)
800049cc:	00100713          	li	a4,1
800049d0:	1340006f          	j	80004b04 <__subtf3+0xbb8>
800049d4:	00040793          	mv	a5,s0
800049d8:	f6cff06f          	j	80004144 <__subtf3+0x1f8>
800049dc:	00068913          	mv	s2,a3
800049e0:	00070993          	mv	s3,a4
800049e4:	00060b13          	mv	s6,a2
800049e8:	f5cff06f          	j	80004144 <__subtf3+0x1f8>
800049ec:	00008737          	lui	a4,0x8
800049f0:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
800049f4:	bae486e3          	beq	s1,a4,800045a0 <__subtf3+0x654>
800049f8:	02c12703          	lw	a4,44(sp)
800049fc:	000806b7          	lui	a3,0x80
80004a00:	00d76733          	or	a4,a4,a3
80004a04:	02e12623          	sw	a4,44(sp)
80004a08:	07400713          	li	a4,116
80004a0c:	fb174ae3          	blt	a4,a7,800049c0 <__subtf3+0xa74>
80004a10:	00088e93          	mv	t4,a7
80004a14:	405ed693          	srai	a3,t4,0x5
80004a18:	00030593          	mv	a1,t1
80004a1c:	01fefe93          	andi	t4,t4,31
80004a20:	00000713          	li	a4,0
80004a24:	00000613          	li	a2,0
80004a28:	02d61c63          	bne	a2,a3,80004a60 <__subtf3+0xb14>
80004a2c:	00300613          	li	a2,3
80004a30:	40d60633          	sub	a2,a2,a3
80004a34:	00269593          	slli	a1,a3,0x2
80004a38:	020e9e63          	bnez	t4,80004a74 <__subtf3+0xb28>
80004a3c:	00b30533          	add	a0,t1,a1
80004a40:	00052503          	lw	a0,0(a0)
80004a44:	001e8e93          	addi	t4,t4,1
80004a48:	00430313          	addi	t1,t1,4
80004a4c:	fea32e23          	sw	a0,-4(t1)
80004a50:	ffd656e3          	bge	a2,t4,80004a3c <__subtf3+0xaf0>
80004a54:	00400613          	li	a2,4
80004a58:	40d606b3          	sub	a3,a2,a3
80004a5c:	0640006f          	j	80004ac0 <__subtf3+0xb74>
80004a60:	0005a503          	lw	a0,0(a1)
80004a64:	00160613          	addi	a2,a2,1
80004a68:	00458593          	addi	a1,a1,4
80004a6c:	00a76733          	or	a4,a4,a0
80004a70:	fb9ff06f          	j	80004a28 <__subtf3+0xadc>
80004a74:	04058513          	addi	a0,a1,64
80004a78:	00250533          	add	a0,a0,sp
80004a7c:	fe052503          	lw	a0,-32(a0)
80004a80:	02000313          	li	t1,32
80004a84:	41d30333          	sub	t1,t1,t4
80004a88:	00651533          	sll	a0,a0,t1
80004a8c:	00a76733          	or	a4,a4,a0
80004a90:	00000e13          	li	t3,0
80004a94:	00b80533          	add	a0,a6,a1
80004a98:	40b005b3          	neg	a1,a1
80004a9c:	0ece4a63          	blt	t3,a2,80004b90 <__subtf3+0xc44>
80004aa0:	00400593          	li	a1,4
80004aa4:	40d586b3          	sub	a3,a1,a3
80004aa8:	02c12583          	lw	a1,44(sp)
80004aac:	00261613          	slli	a2,a2,0x2
80004ab0:	04060613          	addi	a2,a2,64
80004ab4:	00260633          	add	a2,a2,sp
80004ab8:	01d5d5b3          	srl	a1,a1,t4
80004abc:	feb62023          	sw	a1,-32(a2)
80004ac0:	00400613          	li	a2,4
80004ac4:	40d60633          	sub	a2,a2,a3
80004ac8:	00261613          	slli	a2,a2,0x2
80004acc:	00269693          	slli	a3,a3,0x2
80004ad0:	00800593          	li	a1,8
80004ad4:	00d806b3          	add	a3,a6,a3
80004ad8:	00b66a63          	bltu	a2,a1,80004aec <__subtf3+0xba0>
80004adc:	0006a023          	sw	zero,0(a3) # 80000 <__STACKSIZE__+0x7c000>
80004ae0:	0006a223          	sw	zero,4(a3)
80004ae4:	ff860613          	addi	a2,a2,-8
80004ae8:	00868693          	addi	a3,a3,8
80004aec:	00400593          	li	a1,4
80004af0:	00b66463          	bltu	a2,a1,80004af8 <__subtf3+0xbac>
80004af4:	0006a023          	sw	zero,0(a3)
80004af8:	02012683          	lw	a3,32(sp)
80004afc:	00e03733          	snez	a4,a4
80004b00:	00d76733          	or	a4,a4,a3
80004b04:	02412583          	lw	a1,36(sp)
80004b08:	02e12023          	sw	a4,32(sp)
80004b0c:	40e78733          	sub	a4,a5,a4
80004b10:	40b90633          	sub	a2,s2,a1
80004b14:	00e7b6b3          	sltu	a3,a5,a4
80004b18:	00c93533          	sltu	a0,s2,a2
80004b1c:	40d60633          	sub	a2,a2,a3
80004b20:	00000693          	li	a3,0
80004b24:	00e7f663          	bgeu	a5,a4,80004b30 <__subtf3+0xbe4>
80004b28:	412585b3          	sub	a1,a1,s2
80004b2c:	0015b693          	seqz	a3,a1
80004b30:	00a6e7b3          	or	a5,a3,a0
80004b34:	02812503          	lw	a0,40(sp)
80004b38:	00000693          	li	a3,0
80004b3c:	40a985b3          	sub	a1,s3,a0
80004b40:	00b9b833          	sltu	a6,s3,a1
80004b44:	40f585b3          	sub	a1,a1,a5
80004b48:	00078663          	beqz	a5,80004b54 <__subtf3+0xc08>
80004b4c:	41350533          	sub	a0,a0,s3
80004b50:	00153693          	seqz	a3,a0
80004b54:	02c12783          	lw	a5,44(sp)
80004b58:	0106e6b3          	or	a3,a3,a6
80004b5c:	40fb07b3          	sub	a5,s6,a5
80004b60:	40d787b3          	sub	a5,a5,a3
80004b64:	02e12823          	sw	a4,48(sp)
80004b68:	02f12e23          	sw	a5,60(sp)
80004b6c:	02b12c23          	sw	a1,56(sp)
80004b70:	02c12a23          	sw	a2,52(sp)
80004b74:	00c79713          	slli	a4,a5,0xc
80004b78:	de075863          	bgez	a4,80004168 <__subtf3+0x21c>
80004b7c:	00080737          	lui	a4,0x80
80004b80:	fff70713          	addi	a4,a4,-1 # 7ffff <__STACKSIZE__+0x7bfff>
80004b84:	00e7f7b3          	and	a5,a5,a4
80004b88:	02f12e23          	sw	a5,60(sp)
80004b8c:	56c0006f          	j	800050f8 <__subtf3+0x11ac>
80004b90:	00052883          	lw	a7,0(a0)
80004b94:	00452f03          	lw	t5,4(a0)
80004b98:	00b50fb3          	add	t6,a0,a1
80004b9c:	01d8d8b3          	srl	a7,a7,t4
80004ba0:	006f1f33          	sll	t5,t5,t1
80004ba4:	01e8e8b3          	or	a7,a7,t5
80004ba8:	011fa023          	sw	a7,0(t6)
80004bac:	001e0e13          	addi	t3,t3,1
80004bb0:	00450513          	addi	a0,a0,4
80004bb4:	ee9ff06f          	j	80004a9c <__subtf3+0xb50>
80004bb8:	02412c03          	lw	s8,36(sp)
80004bbc:	02812b03          	lw	s6,40(sp)
80004bc0:	02c12983          	lw	s3,44(sp)
80004bc4:	28088463          	beqz	a7,80004e4c <__subtf3+0xf00>
80004bc8:	409b8333          	sub	t1,s7,s1
80004bcc:	0a049e63          	bnez	s1,80004c88 <__subtf3+0xd3c>
80004bd0:	01412583          	lw	a1,20(sp)
80004bd4:	01812803          	lw	a6,24(sp)
80004bd8:	01c12683          	lw	a3,28(sp)
80004bdc:	0105e8b3          	or	a7,a1,a6
80004be0:	00d8e8b3          	or	a7,a7,a3
80004be4:	00f8e8b3          	or	a7,a7,a5
80004be8:	02089063          	bnez	a7,80004c08 <__subtf3+0xcbc>
80004bec:	02812823          	sw	s0,48(sp)
80004bf0:	03812a23          	sw	s8,52(sp)
80004bf4:	03612c23          	sw	s6,56(sp)
80004bf8:	03312e23          	sw	s3,60(sp)
80004bfc:	00030493          	mv	s1,t1
80004c00:	00090a93          	mv	s5,s2
80004c04:	d64ff06f          	j	80004168 <__subtf3+0x21c>
80004c08:	fff30893          	addi	a7,t1,-1
80004c0c:	04089c63          	bnez	a7,80004c64 <__subtf3+0xd18>
80004c10:	40f40733          	sub	a4,s0,a5
80004c14:	40bc0633          	sub	a2,s8,a1
80004c18:	00e437b3          	sltu	a5,s0,a4
80004c1c:	00cc3533          	sltu	a0,s8,a2
80004c20:	40f60633          	sub	a2,a2,a5
80004c24:	00000793          	li	a5,0
80004c28:	00e47663          	bgeu	s0,a4,80004c34 <__subtf3+0xce8>
80004c2c:	418585b3          	sub	a1,a1,s8
80004c30:	0015b793          	seqz	a5,a1
80004c34:	00a7e7b3          	or	a5,a5,a0
80004c38:	410b05b3          	sub	a1,s6,a6
80004c3c:	00bb3533          	sltu	a0,s6,a1
80004c40:	40f585b3          	sub	a1,a1,a5
80004c44:	00078663          	beqz	a5,80004c50 <__subtf3+0xd04>
80004c48:	41680833          	sub	a6,a6,s6
80004c4c:	00183893          	seqz	a7,a6
80004c50:	40d987b3          	sub	a5,s3,a3
80004c54:	00a8e6b3          	or	a3,a7,a0
80004c58:	40d787b3          	sub	a5,a5,a3
80004c5c:	00090a93          	mv	s5,s2
80004c60:	d45ff06f          	j	800049a4 <__subtf3+0xa58>
80004c64:	000087b7          	lui	a5,0x8
80004c68:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
80004c6c:	74f31e63          	bne	t1,a5,800053c8 <__subtf3+0x147c>
80004c70:	02812823          	sw	s0,48(sp)
80004c74:	03812a23          	sw	s8,52(sp)
80004c78:	03612c23          	sw	s6,56(sp)
80004c7c:	03312e23          	sw	s3,60(sp)
80004c80:	00090a93          	mv	s5,s2
80004c84:	911ff06f          	j	80004594 <__subtf3+0x648>
80004c88:	000087b7          	lui	a5,0x8
80004c8c:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
80004c90:	fefb80e3          	beq	s7,a5,80004c70 <__subtf3+0xd24>
80004c94:	01c12783          	lw	a5,28(sp)
80004c98:	00080737          	lui	a4,0x80
80004c9c:	00e7e7b3          	or	a5,a5,a4
80004ca0:	00f12e23          	sw	a5,28(sp)
80004ca4:	07400793          	li	a5,116
80004ca8:	1867c863          	blt	a5,t1,80004e38 <__subtf3+0xeec>
80004cac:	02000793          	li	a5,32
80004cb0:	02f347b3          	div	a5,t1,a5
80004cb4:	00060693          	mv	a3,a2
80004cb8:	00000493          	li	s1,0
80004cbc:	00000713          	li	a4,0
80004cc0:	02f74e63          	blt	a4,a5,80004cfc <__subtf3+0xdb0>
80004cc4:	00300713          	li	a4,3
80004cc8:	01f37893          	andi	a7,t1,31
80004ccc:	40f70e33          	sub	t3,a4,a5
80004cd0:	00279593          	slli	a1,a5,0x2
80004cd4:	02089e63          	bnez	a7,80004d10 <__subtf3+0xdc4>
80004cd8:	00b60733          	add	a4,a2,a1
80004cdc:	00072703          	lw	a4,0(a4) # 80000 <__STACKSIZE__+0x7c000>
80004ce0:	00188893          	addi	a7,a7,1
80004ce4:	00460613          	addi	a2,a2,4
80004ce8:	fee62e23          	sw	a4,-4(a2)
80004cec:	ff1e56e3          	bge	t3,a7,80004cd8 <__subtf3+0xd8c>
80004cf0:	00400713          	li	a4,4
80004cf4:	40f707b3          	sub	a5,a4,a5
80004cf8:	0780006f          	j	80004d70 <__subtf3+0xe24>
80004cfc:	0006a583          	lw	a1,0(a3)
80004d00:	00170713          	addi	a4,a4,1
80004d04:	00468693          	addi	a3,a3,4
80004d08:	00b4e4b3          	or	s1,s1,a1
80004d0c:	fb5ff06f          	j	80004cc0 <__subtf3+0xd74>
80004d10:	02000613          	li	a2,32
80004d14:	02c36733          	rem	a4,t1,a2
80004d18:	00078693          	mv	a3,a5
80004d1c:	40e60633          	sub	a2,a2,a4
80004d20:	0007d463          	bgez	a5,80004d28 <__subtf3+0xddc>
80004d24:	00000693          	li	a3,0
80004d28:	00269693          	slli	a3,a3,0x2
80004d2c:	04068713          	addi	a4,a3,64
80004d30:	002706b3          	add	a3,a4,sp
80004d34:	fd06a703          	lw	a4,-48(a3)
80004d38:	00b506b3          	add	a3,a0,a1
80004d3c:	40b005b3          	neg	a1,a1
80004d40:	00c71733          	sll	a4,a4,a2
80004d44:	00e4e4b3          	or	s1,s1,a4
80004d48:	00000713          	li	a4,0
80004d4c:	0dc74263          	blt	a4,t3,80004e10 <__subtf3+0xec4>
80004d50:	01c12683          	lw	a3,28(sp)
80004d54:	00400713          	li	a4,4
80004d58:	40f707b3          	sub	a5,a4,a5
80004d5c:	002e1713          	slli	a4,t3,0x2
80004d60:	04070713          	addi	a4,a4,64
80004d64:	00270733          	add	a4,a4,sp
80004d68:	0116d6b3          	srl	a3,a3,a7
80004d6c:	fcd72823          	sw	a3,-48(a4)
80004d70:	0057a713          	slti	a4,a5,5
80004d74:	00000613          	li	a2,0
80004d78:	00070863          	beqz	a4,80004d88 <__subtf3+0xe3c>
80004d7c:	00400613          	li	a2,4
80004d80:	40f60633          	sub	a2,a2,a5
80004d84:	00261613          	slli	a2,a2,0x2
80004d88:	00279793          	slli	a5,a5,0x2
80004d8c:	00f50533          	add	a0,a0,a5
80004d90:	00000593          	li	a1,0
80004d94:	c60fb0ef          	jal	ra,800001f4 <memset>
80004d98:	01012783          	lw	a5,16(sp)
80004d9c:	00903733          	snez	a4,s1
80004da0:	00f76733          	or	a4,a4,a5
80004da4:	01412683          	lw	a3,20(sp)
80004da8:	00e12823          	sw	a4,16(sp)
80004dac:	40e40733          	sub	a4,s0,a4
80004db0:	40dc0633          	sub	a2,s8,a3
80004db4:	00e437b3          	sltu	a5,s0,a4
80004db8:	00cc35b3          	sltu	a1,s8,a2
80004dbc:	40f60633          	sub	a2,a2,a5
80004dc0:	00000793          	li	a5,0
80004dc4:	00e47663          	bgeu	s0,a4,80004dd0 <__subtf3+0xe84>
80004dc8:	418686b3          	sub	a3,a3,s8
80004dcc:	0016b793          	seqz	a5,a3
80004dd0:	01812503          	lw	a0,24(sp)
80004dd4:	00b7e7b3          	or	a5,a5,a1
80004dd8:	00000693          	li	a3,0
80004ddc:	40ab05b3          	sub	a1,s6,a0
80004de0:	00bb3833          	sltu	a6,s6,a1
80004de4:	40f585b3          	sub	a1,a1,a5
80004de8:	00078663          	beqz	a5,80004df4 <__subtf3+0xea8>
80004dec:	41650533          	sub	a0,a0,s6
80004df0:	00153693          	seqz	a3,a0
80004df4:	01c12783          	lw	a5,28(sp)
80004df8:	0106e6b3          	or	a3,a3,a6
80004dfc:	000b8493          	mv	s1,s7
80004e00:	40f987b3          	sub	a5,s3,a5
80004e04:	40d787b3          	sub	a5,a5,a3
80004e08:	00090a93          	mv	s5,s2
80004e0c:	d59ff06f          	j	80004b64 <__subtf3+0xc18>
80004e10:	0006a803          	lw	a6,0(a3)
80004e14:	0046a303          	lw	t1,4(a3)
80004e18:	00b68eb3          	add	t4,a3,a1
80004e1c:	01185833          	srl	a6,a6,a7
80004e20:	00c31333          	sll	t1,t1,a2
80004e24:	00686833          	or	a6,a6,t1
80004e28:	010ea023          	sw	a6,0(t4)
80004e2c:	00170713          	addi	a4,a4,1
80004e30:	00468693          	addi	a3,a3,4
80004e34:	f19ff06f          	j	80004d4c <__subtf3+0xe00>
80004e38:	00012e23          	sw	zero,28(sp)
80004e3c:	00012c23          	sw	zero,24(sp)
80004e40:	00012a23          	sw	zero,20(sp)
80004e44:	00100713          	li	a4,1
80004e48:	f5dff06f          	j	80004da4 <__subtf3+0xe58>
80004e4c:	00008837          	lui	a6,0x8
80004e50:	00148593          	addi	a1,s1,1
80004e54:	ffe80513          	addi	a0,a6,-2 # 7ffe <__STACKSIZE__+0x3ffe>
80004e58:	00a5f5b3          	and	a1,a1,a0
80004e5c:	01412683          	lw	a3,20(sp)
80004e60:	01812603          	lw	a2,24(sp)
80004e64:	01c12703          	lw	a4,28(sp)
80004e68:	1c059c63          	bnez	a1,80005040 <__subtf3+0x10f4>
80004e6c:	016c6533          	or	a0,s8,s6
80004e70:	00c6e5b3          	or	a1,a3,a2
80004e74:	01356533          	or	a0,a0,s3
80004e78:	00e5e5b3          	or	a1,a1,a4
80004e7c:	00856533          	or	a0,a0,s0
80004e80:	00f5e5b3          	or	a1,a1,a5
80004e84:	10049663          	bnez	s1,80004f90 <__subtf3+0x1044>
80004e88:	02059063          	bnez	a1,80004ea8 <__subtf3+0xf5c>
80004e8c:	02812823          	sw	s0,48(sp)
80004e90:	03812a23          	sw	s8,52(sp)
80004e94:	03612c23          	sw	s6,56(sp)
80004e98:	03312e23          	sw	s3,60(sp)
80004e9c:	d60512e3          	bnez	a0,80004c00 <__subtf3+0xcb4>
80004ea0:	00000493          	li	s1,0
80004ea4:	9ddff06f          	j	80004880 <__subtf3+0x934>
80004ea8:	00051c63          	bnez	a0,80004ec0 <__subtf3+0xf74>
80004eac:	02f12823          	sw	a5,48(sp)
80004eb0:	02d12a23          	sw	a3,52(sp)
80004eb4:	02c12c23          	sw	a2,56(sp)
80004eb8:	02e12e23          	sw	a4,60(sp)
80004ebc:	8ddff06f          	j	80004798 <__subtf3+0x84c>
80004ec0:	40878533          	sub	a0,a5,s0
80004ec4:	41868e33          	sub	t3,a3,s8
80004ec8:	00a7b833          	sltu	a6,a5,a0
80004ecc:	01c6b8b3          	sltu	a7,a3,t3
80004ed0:	410e0833          	sub	a6,t3,a6
80004ed4:	00000593          	li	a1,0
80004ed8:	00a7f463          	bgeu	a5,a0,80004ee0 <__subtf3+0xf94>
80004edc:	001e3593          	seqz	a1,t3
80004ee0:	0115e5b3          	or	a1,a1,a7
80004ee4:	416608b3          	sub	a7,a2,s6
80004ee8:	01163f33          	sltu	t5,a2,a7
80004eec:	40b88eb3          	sub	t4,a7,a1
80004ef0:	00000313          	li	t1,0
80004ef4:	00058463          	beqz	a1,80004efc <__subtf3+0xfb0>
80004ef8:	0018b313          	seqz	t1,a7
80004efc:	01e36333          	or	t1,t1,t5
80004f00:	413705b3          	sub	a1,a4,s3
80004f04:	406585b3          	sub	a1,a1,t1
80004f08:	02b12e23          	sw	a1,60(sp)
80004f0c:	03d12c23          	sw	t4,56(sp)
80004f10:	03012a23          	sw	a6,52(sp)
80004f14:	02a12823          	sw	a0,48(sp)
80004f18:	00c59313          	slli	t1,a1,0xc
80004f1c:	06035063          	bgez	t1,80004f7c <__subtf3+0x1030>
80004f20:	40f407b3          	sub	a5,s0,a5
80004f24:	40dc06b3          	sub	a3,s8,a3
80004f28:	00f435b3          	sltu	a1,s0,a5
80004f2c:	00dc3c33          	sltu	s8,s8,a3
80004f30:	40b686b3          	sub	a3,a3,a1
80004f34:	00000593          	li	a1,0
80004f38:	00f47463          	bgeu	s0,a5,80004f40 <__subtf3+0xff4>
80004f3c:	001e3593          	seqz	a1,t3
80004f40:	40cb0633          	sub	a2,s6,a2
80004f44:	0185ec33          	or	s8,a1,s8
80004f48:	00cb3b33          	sltu	s6,s6,a2
80004f4c:	00000513          	li	a0,0
80004f50:	41860633          	sub	a2,a2,s8
80004f54:	000c0463          	beqz	s8,80004f5c <__subtf3+0x1010>
80004f58:	0018b513          	seqz	a0,a7
80004f5c:	40e98733          	sub	a4,s3,a4
80004f60:	01656533          	or	a0,a0,s6
80004f64:	40a70733          	sub	a4,a4,a0
80004f68:	02e12e23          	sw	a4,60(sp)
80004f6c:	02c12c23          	sw	a2,56(sp)
80004f70:	02d12a23          	sw	a3,52(sp)
80004f74:	02f12823          	sw	a5,48(sp)
80004f78:	c89ff06f          	j	80004c00 <__subtf3+0xcb4>
80004f7c:	01056533          	or	a0,a0,a6
80004f80:	01d56533          	or	a0,a0,t4
80004f84:	00b56533          	or	a0,a0,a1
80004f88:	f0050ce3          	beqz	a0,80004ea0 <__subtf3+0xf54>
80004f8c:	80dff06f          	j	80004798 <__subtf3+0x84c>
80004f90:	03010893          	addi	a7,sp,48
80004f94:	04059e63          	bnez	a1,80004ff0 <__subtf3+0x10a4>
80004f98:	02051e63          	bnez	a0,80004fd4 <__subtf3+0x1088>
80004f9c:	03012e23          	sw	a6,60(sp)
80004fa0:	02012c23          	sw	zero,56(sp)
80004fa4:	02012a23          	sw	zero,52(sp)
80004fa8:	02012823          	sw	zero,48(sp)
80004fac:	03c10793          	addi	a5,sp,60
80004fb0:	0007a703          	lw	a4,0(a5)
80004fb4:	ffc7a683          	lw	a3,-4(a5)
80004fb8:	ffc78793          	addi	a5,a5,-4
80004fbc:	00371713          	slli	a4,a4,0x3
80004fc0:	01d6d693          	srli	a3,a3,0x1d
80004fc4:	00d76733          	or	a4,a4,a3
80004fc8:	00e7a223          	sw	a4,4(a5)
80004fcc:	fef892e3          	bne	a7,a5,80004fb0 <__subtf3+0x1064>
80004fd0:	8a9ff06f          	j	80004878 <__subtf3+0x92c>
80004fd4:	02812823          	sw	s0,48(sp)
80004fd8:	03812a23          	sw	s8,52(sp)
80004fdc:	03612c23          	sw	s6,56(sp)
80004fe0:	03312e23          	sw	s3,60(sp)
80004fe4:	00090a93          	mv	s5,s2
80004fe8:	fff80493          	addi	s1,a6,-1
80004fec:	97cff06f          	j	80004168 <__subtf3+0x21c>
80004ff0:	00051c63          	bnez	a0,80005008 <__subtf3+0x10bc>
80004ff4:	02f12823          	sw	a5,48(sp)
80004ff8:	02d12a23          	sw	a3,52(sp)
80004ffc:	02c12c23          	sw	a2,56(sp)
80005000:	02e12e23          	sw	a4,60(sp)
80005004:	fe5ff06f          	j	80004fe8 <__subtf3+0x109c>
80005008:	03012e23          	sw	a6,60(sp)
8000500c:	02012c23          	sw	zero,56(sp)
80005010:	02012a23          	sw	zero,52(sp)
80005014:	02012823          	sw	zero,48(sp)
80005018:	03c10793          	addi	a5,sp,60
8000501c:	0007a703          	lw	a4,0(a5)
80005020:	ffc7a683          	lw	a3,-4(a5)
80005024:	ffc78793          	addi	a5,a5,-4
80005028:	00371713          	slli	a4,a4,0x3
8000502c:	01d6d693          	srli	a3,a3,0x1d
80005030:	00d76733          	or	a4,a4,a3
80005034:	00e7a223          	sw	a4,4(a5)
80005038:	fef892e3          	bne	a7,a5,8000501c <__subtf3+0x10d0>
8000503c:	83dff06f          	j	80004878 <__subtf3+0x92c>
80005040:	40878533          	sub	a0,a5,s0
80005044:	41868eb3          	sub	t4,a3,s8
80005048:	00a7b833          	sltu	a6,a5,a0
8000504c:	01d6b333          	sltu	t1,a3,t4
80005050:	410e8833          	sub	a6,t4,a6
80005054:	00000593          	li	a1,0
80005058:	00a7f463          	bgeu	a5,a0,80005060 <__subtf3+0x1114>
8000505c:	001eb593          	seqz	a1,t4
80005060:	0065e5b3          	or	a1,a1,t1
80005064:	41660333          	sub	t1,a2,s6
80005068:	00663fb3          	sltu	t6,a2,t1
8000506c:	40b30f33          	sub	t5,t1,a1
80005070:	00000e13          	li	t3,0
80005074:	00058463          	beqz	a1,8000507c <__subtf3+0x1130>
80005078:	00133e13          	seqz	t3,t1
8000507c:	01fe6e33          	or	t3,t3,t6
80005080:	413705b3          	sub	a1,a4,s3
80005084:	41c585b3          	sub	a1,a1,t3
80005088:	02b12e23          	sw	a1,60(sp)
8000508c:	03e12c23          	sw	t5,56(sp)
80005090:	03012a23          	sw	a6,52(sp)
80005094:	02a12823          	sw	a0,48(sp)
80005098:	00c59e13          	slli	t3,a1,0xc
8000509c:	140e5663          	bgez	t3,800051e8 <__subtf3+0x129c>
800050a0:	40f407b3          	sub	a5,s0,a5
800050a4:	40dc06b3          	sub	a3,s8,a3
800050a8:	00f435b3          	sltu	a1,s0,a5
800050ac:	00dc3c33          	sltu	s8,s8,a3
800050b0:	40b686b3          	sub	a3,a3,a1
800050b4:	00000593          	li	a1,0
800050b8:	00f47463          	bgeu	s0,a5,800050c0 <__subtf3+0x1174>
800050bc:	001eb593          	seqz	a1,t4
800050c0:	40cb0633          	sub	a2,s6,a2
800050c4:	0185ec33          	or	s8,a1,s8
800050c8:	00cb3b33          	sltu	s6,s6,a2
800050cc:	41860633          	sub	a2,a2,s8
800050d0:	000c0463          	beqz	s8,800050d8 <__subtf3+0x118c>
800050d4:	00133893          	seqz	a7,t1
800050d8:	40e985b3          	sub	a1,s3,a4
800050dc:	0168e733          	or	a4,a7,s6
800050e0:	40e58733          	sub	a4,a1,a4
800050e4:	02e12e23          	sw	a4,60(sp)
800050e8:	02c12c23          	sw	a2,56(sp)
800050ec:	02d12a23          	sw	a3,52(sp)
800050f0:	02f12823          	sw	a5,48(sp)
800050f4:	00090a93          	mv	s5,s2
800050f8:	03c12503          	lw	a0,60(sp)
800050fc:	10050063          	beqz	a0,800051fc <__subtf3+0x12b0>
80005100:	7b4000ef          	jal	ra,800058b4 <__clzsi2>
80005104:	ff450513          	addi	a0,a0,-12
80005108:	02000713          	li	a4,32
8000510c:	01f57813          	andi	a6,a0,31
80005110:	02e547b3          	div	a5,a0,a4
80005114:	12080063          	beqz	a6,80005234 <__subtf3+0x12e8>
80005118:	03010313          	addi	t1,sp,48
8000511c:	02e566b3          	rem	a3,a0,a4
80005120:	40d70633          	sub	a2,a4,a3
80005124:	ffc00693          	li	a3,-4
80005128:	02d786b3          	mul	a3,a5,a3
8000512c:	00c68713          	addi	a4,a3,12
80005130:	00e30733          	add	a4,t1,a4
80005134:	40d006b3          	neg	a3,a3
80005138:	12e31663          	bne	t1,a4,80005264 <__subtf3+0x1318>
8000513c:	03012683          	lw	a3,48(sp)
80005140:	fff78713          	addi	a4,a5,-1
80005144:	00279793          	slli	a5,a5,0x2
80005148:	04078793          	addi	a5,a5,64
8000514c:	002787b3          	add	a5,a5,sp
80005150:	010696b3          	sll	a3,a3,a6
80005154:	fed7a823          	sw	a3,-16(a5)
80005158:	00170713          	addi	a4,a4,1
8000515c:	03010793          	addi	a5,sp,48
80005160:	00271713          	slli	a4,a4,0x2
80005164:	00800693          	li	a3,8
80005168:	00078893          	mv	a7,a5
8000516c:	00d76a63          	bltu	a4,a3,80005180 <__subtf3+0x1234>
80005170:	02012823          	sw	zero,48(sp)
80005174:	0007a223          	sw	zero,4(a5)
80005178:	ff870713          	addi	a4,a4,-8
8000517c:	03810793          	addi	a5,sp,56
80005180:	00400693          	li	a3,4
80005184:	00d76463          	bltu	a4,a3,8000518c <__subtf3+0x1240>
80005188:	0007a023          	sw	zero,0(a5)
8000518c:	1c954863          	blt	a0,s1,8000535c <__subtf3+0x1410>
80005190:	40950533          	sub	a0,a0,s1
80005194:	00150513          	addi	a0,a0,1
80005198:	40555713          	srai	a4,a0,0x5
8000519c:	01f57793          	andi	a5,a0,31
800051a0:	00088593          	mv	a1,a7
800051a4:	00088613          	mv	a2,a7
800051a8:	00000313          	li	t1,0
800051ac:	00000693          	li	a3,0
800051b0:	0ce69c63          	bne	a3,a4,80005288 <__subtf3+0x133c>
800051b4:	00300693          	li	a3,3
800051b8:	40e686b3          	sub	a3,a3,a4
800051bc:	00271613          	slli	a2,a4,0x2
800051c0:	0c079e63          	bnez	a5,8000529c <__subtf3+0x1350>
800051c4:	00c58533          	add	a0,a1,a2
800051c8:	00052503          	lw	a0,0(a0)
800051cc:	00178793          	addi	a5,a5,1
800051d0:	00458593          	addi	a1,a1,4
800051d4:	fea5ae23          	sw	a0,-4(a1)
800051d8:	fef6d6e3          	bge	a3,a5,800051c4 <__subtf3+0x1278>
800051dc:	00400793          	li	a5,4
800051e0:	40e78733          	sub	a4,a5,a4
800051e4:	1040006f          	j	800052e8 <__subtf3+0x139c>
800051e8:	01056533          	or	a0,a0,a6
800051ec:	01e56533          	or	a0,a0,t5
800051f0:	00b56533          	or	a0,a0,a1
800051f4:	ca0506e3          	beqz	a0,80004ea0 <__subtf3+0xf54>
800051f8:	f01ff06f          	j	800050f8 <__subtf3+0x11ac>
800051fc:	03812503          	lw	a0,56(sp)
80005200:	00050863          	beqz	a0,80005210 <__subtf3+0x12c4>
80005204:	6b0000ef          	jal	ra,800058b4 <__clzsi2>
80005208:	02050513          	addi	a0,a0,32
8000520c:	ef9ff06f          	j	80005104 <__subtf3+0x11b8>
80005210:	03412503          	lw	a0,52(sp)
80005214:	00050863          	beqz	a0,80005224 <__subtf3+0x12d8>
80005218:	69c000ef          	jal	ra,800058b4 <__clzsi2>
8000521c:	04050513          	addi	a0,a0,64
80005220:	ee5ff06f          	j	80005104 <__subtf3+0x11b8>
80005224:	03012503          	lw	a0,48(sp)
80005228:	68c000ef          	jal	ra,800058b4 <__clzsi2>
8000522c:	06050513          	addi	a0,a0,96
80005230:	ed5ff06f          	j	80005104 <__subtf3+0x11b8>
80005234:	ffc00613          	li	a2,-4
80005238:	02c78633          	mul	a2,a5,a2
8000523c:	03c10713          	addi	a4,sp,60
80005240:	00300693          	li	a3,3
80005244:	00c705b3          	add	a1,a4,a2
80005248:	0005a583          	lw	a1,0(a1)
8000524c:	fff68693          	addi	a3,a3,-1
80005250:	ffc70713          	addi	a4,a4,-4
80005254:	00b72223          	sw	a1,4(a4)
80005258:	fef6d6e3          	bge	a3,a5,80005244 <__subtf3+0x12f8>
8000525c:	fff78713          	addi	a4,a5,-1
80005260:	ef9ff06f          	j	80005158 <__subtf3+0x120c>
80005264:	00072583          	lw	a1,0(a4)
80005268:	ffc72883          	lw	a7,-4(a4)
8000526c:	00d70e33          	add	t3,a4,a3
80005270:	010595b3          	sll	a1,a1,a6
80005274:	00c8d8b3          	srl	a7,a7,a2
80005278:	0115e5b3          	or	a1,a1,a7
8000527c:	00be2023          	sw	a1,0(t3)
80005280:	ffc70713          	addi	a4,a4,-4
80005284:	eb5ff06f          	j	80005138 <__subtf3+0x11ec>
80005288:	00062503          	lw	a0,0(a2)
8000528c:	00168693          	addi	a3,a3,1
80005290:	00460613          	addi	a2,a2,4
80005294:	00a36333          	or	t1,t1,a0
80005298:	f19ff06f          	j	800051b0 <__subtf3+0x1264>
8000529c:	04060593          	addi	a1,a2,64
800052a0:	002585b3          	add	a1,a1,sp
800052a4:	ff05a583          	lw	a1,-16(a1)
800052a8:	02000813          	li	a6,32
800052ac:	40f80833          	sub	a6,a6,a5
800052b0:	010595b3          	sll	a1,a1,a6
800052b4:	00b36333          	or	t1,t1,a1
800052b8:	00000e13          	li	t3,0
800052bc:	00c885b3          	add	a1,a7,a2
800052c0:	40c00633          	neg	a2,a2
800052c4:	06de4863          	blt	t3,a3,80005334 <__subtf3+0x13e8>
800052c8:	00400613          	li	a2,4
800052cc:	40e60733          	sub	a4,a2,a4
800052d0:	03c12603          	lw	a2,60(sp)
800052d4:	00269693          	slli	a3,a3,0x2
800052d8:	04068693          	addi	a3,a3,64
800052dc:	002686b3          	add	a3,a3,sp
800052e0:	00f657b3          	srl	a5,a2,a5
800052e4:	fef6a823          	sw	a5,-16(a3)
800052e8:	00400693          	li	a3,4
800052ec:	40e686b3          	sub	a3,a3,a4
800052f0:	00271713          	slli	a4,a4,0x2
800052f4:	00e887b3          	add	a5,a7,a4
800052f8:	00269713          	slli	a4,a3,0x2
800052fc:	00800693          	li	a3,8
80005300:	00d76a63          	bltu	a4,a3,80005314 <__subtf3+0x13c8>
80005304:	0007a023          	sw	zero,0(a5)
80005308:	0007a223          	sw	zero,4(a5)
8000530c:	ff870713          	addi	a4,a4,-8
80005310:	00878793          	addi	a5,a5,8
80005314:	00400693          	li	a3,4
80005318:	00d76463          	bltu	a4,a3,80005320 <__subtf3+0x13d4>
8000531c:	0007a023          	sw	zero,0(a5)
80005320:	03012703          	lw	a4,48(sp)
80005324:	006037b3          	snez	a5,t1
80005328:	00f767b3          	or	a5,a4,a5
8000532c:	02f12823          	sw	a5,48(sp)
80005330:	c68ff06f          	j	80004798 <__subtf3+0x84c>
80005334:	0005a503          	lw	a0,0(a1)
80005338:	0045ae83          	lw	t4,4(a1)
8000533c:	00c58f33          	add	t5,a1,a2
80005340:	00f55533          	srl	a0,a0,a5
80005344:	010e9eb3          	sll	t4,t4,a6
80005348:	01d56533          	or	a0,a0,t4
8000534c:	00af2023          	sw	a0,0(t5)
80005350:	001e0e13          	addi	t3,t3,1
80005354:	00458593          	addi	a1,a1,4
80005358:	f6dff06f          	j	800052c4 <__subtf3+0x1378>
8000535c:	03c12783          	lw	a5,60(sp)
80005360:	fff80737          	lui	a4,0xfff80
80005364:	fff70713          	addi	a4,a4,-1 # fff7ffff <__bss_end+0x7fef9843>
80005368:	00e7f7b3          	and	a5,a5,a4
8000536c:	40a484b3          	sub	s1,s1,a0
80005370:	02f12e23          	sw	a5,60(sp)
80005374:	df5fe06f          	j	80004168 <__subtf3+0x21c>
80005378:	02012e23          	sw	zero,60(sp)
8000537c:	02012c23          	sw	zero,56(sp)
80005380:	02012a23          	sw	zero,52(sp)
80005384:	02012823          	sw	zero,48(sp)
80005388:	e61fe06f          	j	800041e8 <__subtf3+0x29c>
8000538c:	07400713          	li	a4,116
80005390:	00c74463          	blt	a4,a2,80005398 <__subtf3+0x144c>
80005394:	f55fe06f          	j	800042e8 <__subtf3+0x39c>
80005398:	02012623          	sw	zero,44(sp)
8000539c:	02012423          	sw	zero,40(sp)
800053a0:	02012223          	sw	zero,36(sp)
800053a4:	00100713          	li	a4,1
800053a8:	830ff06f          	j	800043d8 <__subtf3+0x48c>
800053ac:	07400793          	li	a5,116
800053b0:	a2b7d063          	bge	a5,a1,800045d0 <__subtf3+0x684>
800053b4:	00012e23          	sw	zero,28(sp)
800053b8:	00012c23          	sw	zero,24(sp)
800053bc:	00012a23          	sw	zero,20(sp)
800053c0:	00100793          	li	a5,1
800053c4:	b04ff06f          	j	800046c8 <__subtf3+0x77c>
800053c8:	07400793          	li	a5,116
800053cc:	a717c6e3          	blt	a5,a7,80004e38 <__subtf3+0xeec>
800053d0:	00088313          	mv	t1,a7
800053d4:	8d9ff06f          	j	80004cac <__subtf3+0xd60>

800053d8 <__unordtf2>:
800053d8:	00052703          	lw	a4,0(a0)
800053dc:	00452e83          	lw	t4,4(a0)
800053e0:	00852e03          	lw	t3,8(a0)
800053e4:	00c52503          	lw	a0,12(a0)
800053e8:	00c5a603          	lw	a2,12(a1)
800053ec:	000086b7          	lui	a3,0x8
800053f0:	fff68693          	addi	a3,a3,-1 # 7fff <__STACKSIZE__+0x3fff>
800053f4:	01055813          	srli	a6,a0,0x10
800053f8:	0005a783          	lw	a5,0(a1)
800053fc:	0045a303          	lw	t1,4(a1)
80005400:	0085a883          	lw	a7,8(a1)
80005404:	00d87833          	and	a6,a6,a3
80005408:	01065593          	srli	a1,a2,0x10
8000540c:	ff010113          	addi	sp,sp,-16
80005410:	00d5f5b3          	and	a1,a1,a3
80005414:	02d81063          	bne	a6,a3,80005434 <__unordtf2+0x5c>
80005418:	01d76733          	or	a4,a4,t4
8000541c:	01051513          	slli	a0,a0,0x10
80005420:	01055513          	srli	a0,a0,0x10
80005424:	01c76733          	or	a4,a4,t3
80005428:	00a76733          	or	a4,a4,a0
8000542c:	00100513          	li	a0,1
80005430:	02071663          	bnez	a4,8000545c <__unordtf2+0x84>
80005434:	00008737          	lui	a4,0x8
80005438:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
8000543c:	00000513          	li	a0,0
80005440:	00e59e63          	bne	a1,a4,8000545c <__unordtf2+0x84>
80005444:	0067e533          	or	a0,a5,t1
80005448:	01061613          	slli	a2,a2,0x10
8000544c:	01156533          	or	a0,a0,a7
80005450:	01065613          	srli	a2,a2,0x10
80005454:	00c56533          	or	a0,a0,a2
80005458:	00a03533          	snez	a0,a0
8000545c:	01010113          	addi	sp,sp,16
80005460:	00008067          	ret

80005464 <__fixtfsi>:
80005464:	00052783          	lw	a5,0(a0)
80005468:	00452683          	lw	a3,4(a0)
8000546c:	00c52703          	lw	a4,12(a0)
80005470:	00852583          	lw	a1,8(a0)
80005474:	fe010113          	addi	sp,sp,-32
80005478:	00f12023          	sw	a5,0(sp)
8000547c:	00d12223          	sw	a3,4(sp)
80005480:	00f12823          	sw	a5,16(sp)
80005484:	00171693          	slli	a3,a4,0x1
80005488:	000047b7          	lui	a5,0x4
8000548c:	00b12423          	sw	a1,8(sp)
80005490:	00e12623          	sw	a4,12(sp)
80005494:	00b12c23          	sw	a1,24(sp)
80005498:	0116d693          	srli	a3,a3,0x11
8000549c:	ffe78613          	addi	a2,a5,-2 # 3ffe <__STACKSIZE__-0x2>
800054a0:	00000513          	li	a0,0
800054a4:	00d65e63          	bge	a2,a3,800054c0 <__fixtfsi+0x5c>
800054a8:	01d78613          	addi	a2,a5,29
800054ac:	01f75813          	srli	a6,a4,0x1f
800054b0:	00d65c63          	bge	a2,a3,800054c8 <__fixtfsi+0x64>
800054b4:	80000537          	lui	a0,0x80000
800054b8:	fff50513          	addi	a0,a0,-1 # 7fffffff <__STACKSIZE__+0x7fffbfff>
800054bc:	00a80533          	add	a0,a6,a0
800054c0:	02010113          	addi	sp,sp,32
800054c4:	00008067          	ret
800054c8:	01071713          	slli	a4,a4,0x10
800054cc:	00010637          	lui	a2,0x10
800054d0:	01075713          	srli	a4,a4,0x10
800054d4:	06f78793          	addi	a5,a5,111
800054d8:	00c76733          	or	a4,a4,a2
800054dc:	40d787b3          	sub	a5,a5,a3
800054e0:	4057d613          	srai	a2,a5,0x5
800054e4:	00e12e23          	sw	a4,28(sp)
800054e8:	01f7f793          	andi	a5,a5,31
800054ec:	02079463          	bnez	a5,80005514 <__fixtfsi+0xb0>
800054f0:	00261613          	slli	a2,a2,0x2
800054f4:	02060793          	addi	a5,a2,32 # 10020 <__STACKSIZE__+0xc020>
800054f8:	00278633          	add	a2,a5,sp
800054fc:	ff062783          	lw	a5,-16(a2)
80005500:	00f12823          	sw	a5,16(sp)
80005504:	01012503          	lw	a0,16(sp)
80005508:	fa080ce3          	beqz	a6,800054c0 <__fixtfsi+0x5c>
8000550c:	40a00533          	neg	a0,a0
80005510:	fb1ff06f          	j	800054c0 <__fixtfsi+0x5c>
80005514:	00200513          	li	a0,2
80005518:	00000693          	li	a3,0
8000551c:	02a61063          	bne	a2,a0,8000553c <__fixtfsi+0xd8>
80005520:	02000693          	li	a3,32
80005524:	40f686b3          	sub	a3,a3,a5
80005528:	00d716b3          	sll	a3,a4,a3
8000552c:	00f5d5b3          	srl	a1,a1,a5
80005530:	00b6e6b3          	or	a3,a3,a1
80005534:	00d12823          	sw	a3,16(sp)
80005538:	00100693          	li	a3,1
8000553c:	00269693          	slli	a3,a3,0x2
80005540:	02068693          	addi	a3,a3,32
80005544:	002686b3          	add	a3,a3,sp
80005548:	00f75733          	srl	a4,a4,a5
8000554c:	fee6a823          	sw	a4,-16(a3)
80005550:	fb5ff06f          	j	80005504 <__fixtfsi+0xa0>

80005554 <__floatsitf>:
80005554:	fd010113          	addi	sp,sp,-48
80005558:	02912223          	sw	s1,36(sp)
8000555c:	02112623          	sw	ra,44(sp)
80005560:	02812423          	sw	s0,40(sp)
80005564:	03212023          	sw	s2,32(sp)
80005568:	00050493          	mv	s1,a0
8000556c:	12058263          	beqz	a1,80005690 <__floatsitf+0x13c>
80005570:	41f5d793          	srai	a5,a1,0x1f
80005574:	00b7c433          	xor	s0,a5,a1
80005578:	40f40433          	sub	s0,s0,a5
8000557c:	00040513          	mv	a0,s0
80005580:	01f5d913          	srli	s2,a1,0x1f
80005584:	330000ef          	jal	ra,800058b4 <__clzsi2>
80005588:	05150793          	addi	a5,a0,81
8000558c:	00004637          	lui	a2,0x4
80005590:	01e60613          	addi	a2,a2,30 # 401e <__STACKSIZE__+0x1e>
80005594:	4057d713          	srai	a4,a5,0x5
80005598:	00812823          	sw	s0,16(sp)
8000559c:	00012a23          	sw	zero,20(sp)
800055a0:	00012c23          	sw	zero,24(sp)
800055a4:	00012e23          	sw	zero,28(sp)
800055a8:	01f7f793          	andi	a5,a5,31
800055ac:	40a60633          	sub	a2,a2,a0
800055b0:	02078c63          	beqz	a5,800055e8 <__floatsitf+0x94>
800055b4:	00200693          	li	a3,2
800055b8:	0cd71863          	bne	a4,a3,80005688 <__floatsitf+0x134>
800055bc:	02000693          	li	a3,32
800055c0:	40f686b3          	sub	a3,a3,a5
800055c4:	00d456b3          	srl	a3,s0,a3
800055c8:	00d12e23          	sw	a3,28(sp)
800055cc:	fff70693          	addi	a3,a4,-1
800055d0:	00271713          	slli	a4,a4,0x2
800055d4:	02070713          	addi	a4,a4,32
800055d8:	00270733          	add	a4,a4,sp
800055dc:	00f41433          	sll	s0,s0,a5
800055e0:	fe872823          	sw	s0,-16(a4)
800055e4:	0340006f          	j	80005618 <__floatsitf+0xc4>
800055e8:	00300793          	li	a5,3
800055ec:	40e787b3          	sub	a5,a5,a4
800055f0:	00279793          	slli	a5,a5,0x2
800055f4:	02078793          	addi	a5,a5,32
800055f8:	002787b3          	add	a5,a5,sp
800055fc:	ff07a783          	lw	a5,-16(a5)
80005600:	00200693          	li	a3,2
80005604:	00f12e23          	sw	a5,28(sp)
80005608:	00200793          	li	a5,2
8000560c:	00f71663          	bne	a4,a5,80005618 <__floatsitf+0xc4>
80005610:	00812c23          	sw	s0,24(sp)
80005614:	00100693          	li	a3,1
80005618:	00269693          	slli	a3,a3,0x2
8000561c:	00012823          	sw	zero,16(sp)
80005620:	00012a23          	sw	zero,20(sp)
80005624:	ffc68693          	addi	a3,a3,-4
80005628:	00400793          	li	a5,4
8000562c:	00f6e463          	bltu	a3,a5,80005634 <__floatsitf+0xe0>
80005630:	00012c23          	sw	zero,24(sp)
80005634:	00090593          	mv	a1,s2
80005638:	01c12783          	lw	a5,28(sp)
8000563c:	00f59413          	slli	s0,a1,0xf
80005640:	00c46433          	or	s0,s0,a2
80005644:	00f11623          	sh	a5,12(sp)
80005648:	01012783          	lw	a5,16(sp)
8000564c:	00811723          	sh	s0,14(sp)
80005650:	02c12083          	lw	ra,44(sp)
80005654:	00f4a023          	sw	a5,0(s1)
80005658:	01412783          	lw	a5,20(sp)
8000565c:	02812403          	lw	s0,40(sp)
80005660:	02012903          	lw	s2,32(sp)
80005664:	00f4a223          	sw	a5,4(s1)
80005668:	01812783          	lw	a5,24(sp)
8000566c:	00048513          	mv	a0,s1
80005670:	00f4a423          	sw	a5,8(s1)
80005674:	00c12783          	lw	a5,12(sp)
80005678:	00f4a623          	sw	a5,12(s1)
8000567c:	02412483          	lw	s1,36(sp)
80005680:	03010113          	addi	sp,sp,48
80005684:	00008067          	ret
80005688:	00300713          	li	a4,3
8000568c:	f41ff06f          	j	800055cc <__floatsitf+0x78>
80005690:	00012e23          	sw	zero,28(sp)
80005694:	00012c23          	sw	zero,24(sp)
80005698:	00012a23          	sw	zero,20(sp)
8000569c:	00012823          	sw	zero,16(sp)
800056a0:	00000613          	li	a2,0
800056a4:	f95ff06f          	j	80005638 <__floatsitf+0xe4>

800056a8 <__extenddftf2>:
800056a8:	01465713          	srli	a4,a2,0x14
800056ac:	00c61793          	slli	a5,a2,0xc
800056b0:	7ff77713          	andi	a4,a4,2047
800056b4:	fd010113          	addi	sp,sp,-48
800056b8:	00c7d793          	srli	a5,a5,0xc
800056bc:	00170693          	addi	a3,a4,1
800056c0:	02812423          	sw	s0,40(sp)
800056c4:	02912223          	sw	s1,36(sp)
800056c8:	03212023          	sw	s2,32(sp)
800056cc:	02112623          	sw	ra,44(sp)
800056d0:	00b12823          	sw	a1,16(sp)
800056d4:	00f12a23          	sw	a5,20(sp)
800056d8:	00012e23          	sw	zero,28(sp)
800056dc:	00012c23          	sw	zero,24(sp)
800056e0:	7fe6f693          	andi	a3,a3,2046
800056e4:	00050913          	mv	s2,a0
800056e8:	00058413          	mv	s0,a1
800056ec:	01f65493          	srli	s1,a2,0x1f
800056f0:	08068263          	beqz	a3,80005774 <__extenddftf2+0xcc>
800056f4:	000046b7          	lui	a3,0x4
800056f8:	c0068693          	addi	a3,a3,-1024 # 3c00 <__STACKSIZE__-0x400>
800056fc:	00d70733          	add	a4,a4,a3
80005700:	0047d693          	srli	a3,a5,0x4
80005704:	00d12e23          	sw	a3,28(sp)
80005708:	01c79793          	slli	a5,a5,0x1c
8000570c:	0045d693          	srli	a3,a1,0x4
80005710:	00d7e7b3          	or	a5,a5,a3
80005714:	01c59413          	slli	s0,a1,0x1c
80005718:	00f12c23          	sw	a5,24(sp)
8000571c:	00812a23          	sw	s0,20(sp)
80005720:	00012823          	sw	zero,16(sp)
80005724:	01c12783          	lw	a5,28(sp)
80005728:	00f49493          	slli	s1,s1,0xf
8000572c:	00e4e4b3          	or	s1,s1,a4
80005730:	00f11623          	sh	a5,12(sp)
80005734:	01012783          	lw	a5,16(sp)
80005738:	00911723          	sh	s1,14(sp)
8000573c:	02c12083          	lw	ra,44(sp)
80005740:	00f92023          	sw	a5,0(s2)
80005744:	01412783          	lw	a5,20(sp)
80005748:	02812403          	lw	s0,40(sp)
8000574c:	02412483          	lw	s1,36(sp)
80005750:	00f92223          	sw	a5,4(s2)
80005754:	01812783          	lw	a5,24(sp)
80005758:	00090513          	mv	a0,s2
8000575c:	00f92423          	sw	a5,8(s2)
80005760:	00c12783          	lw	a5,12(sp)
80005764:	00f92623          	sw	a5,12(s2)
80005768:	02012903          	lw	s2,32(sp)
8000576c:	03010113          	addi	sp,sp,48
80005770:	00008067          	ret
80005774:	00b7e533          	or	a0,a5,a1
80005778:	10071063          	bnez	a4,80005878 <__extenddftf2+0x1d0>
8000577c:	fa0504e3          	beqz	a0,80005724 <__extenddftf2+0x7c>
80005780:	04078e63          	beqz	a5,800057dc <__extenddftf2+0x134>
80005784:	00078513          	mv	a0,a5
80005788:	12c000ef          	jal	ra,800058b4 <__clzsi2>
8000578c:	03150693          	addi	a3,a0,49
80005790:	4056d793          	srai	a5,a3,0x5
80005794:	01f6f693          	andi	a3,a3,31
80005798:	04068863          	beqz	a3,800057e8 <__extenddftf2+0x140>
8000579c:	ffc00613          	li	a2,-4
800057a0:	02c78633          	mul	a2,a5,a2
800057a4:	02000813          	li	a6,32
800057a8:	01010313          	addi	t1,sp,16
800057ac:	40d80833          	sub	a6,a6,a3
800057b0:	00c60713          	addi	a4,a2,12
800057b4:	00e30733          	add	a4,t1,a4
800057b8:	40c00633          	neg	a2,a2
800057bc:	08e31c63          	bne	t1,a4,80005854 <__extenddftf2+0x1ac>
800057c0:	fff78713          	addi	a4,a5,-1
800057c4:	00279793          	slli	a5,a5,0x2
800057c8:	02078793          	addi	a5,a5,32
800057cc:	002787b3          	add	a5,a5,sp
800057d0:	00d416b3          	sll	a3,s0,a3
800057d4:	fed7a823          	sw	a3,-16(a5)
800057d8:	03c0006f          	j	80005814 <__extenddftf2+0x16c>
800057dc:	0d8000ef          	jal	ra,800058b4 <__clzsi2>
800057e0:	02050513          	addi	a0,a0,32
800057e4:	fa9ff06f          	j	8000578c <__extenddftf2+0xe4>
800057e8:	ffc00613          	li	a2,-4
800057ec:	02c78633          	mul	a2,a5,a2
800057f0:	01c10713          	addi	a4,sp,28
800057f4:	00300693          	li	a3,3
800057f8:	00c705b3          	add	a1,a4,a2
800057fc:	0005a583          	lw	a1,0(a1)
80005800:	fff68693          	addi	a3,a3,-1
80005804:	ffc70713          	addi	a4,a4,-4
80005808:	00b72223          	sw	a1,4(a4)
8000580c:	fef6d6e3          	bge	a3,a5,800057f8 <__extenddftf2+0x150>
80005810:	fff78713          	addi	a4,a5,-1
80005814:	00170793          	addi	a5,a4,1
80005818:	00279793          	slli	a5,a5,0x2
8000581c:	00800693          	li	a3,8
80005820:	01010713          	addi	a4,sp,16
80005824:	00d7ea63          	bltu	a5,a3,80005838 <__extenddftf2+0x190>
80005828:	00012823          	sw	zero,16(sp)
8000582c:	00072223          	sw	zero,4(a4)
80005830:	ff878793          	addi	a5,a5,-8
80005834:	01810713          	addi	a4,sp,24
80005838:	00400693          	li	a3,4
8000583c:	00d7e463          	bltu	a5,a3,80005844 <__extenddftf2+0x19c>
80005840:	00072023          	sw	zero,0(a4)
80005844:	00004737          	lui	a4,0x4
80005848:	c0c70713          	addi	a4,a4,-1012 # 3c0c <__STACKSIZE__-0x3f4>
8000584c:	40a70733          	sub	a4,a4,a0
80005850:	ed5ff06f          	j	80005724 <__extenddftf2+0x7c>
80005854:	00072583          	lw	a1,0(a4)
80005858:	ffc72883          	lw	a7,-4(a4)
8000585c:	00c70e33          	add	t3,a4,a2
80005860:	00d595b3          	sll	a1,a1,a3
80005864:	0108d8b3          	srl	a7,a7,a6
80005868:	0115e5b3          	or	a1,a1,a7
8000586c:	00be2023          	sw	a1,0(t3)
80005870:	ffc70713          	addi	a4,a4,-4
80005874:	f49ff06f          	j	800057bc <__extenddftf2+0x114>
80005878:	02050863          	beqz	a0,800058a8 <__extenddftf2+0x200>
8000587c:	01c79713          	slli	a4,a5,0x1c
80005880:	0045d693          	srli	a3,a1,0x4
80005884:	00d76733          	or	a4,a4,a3
80005888:	00e12c23          	sw	a4,24(sp)
8000588c:	0047d793          	srli	a5,a5,0x4
80005890:	00008737          	lui	a4,0x8
80005894:	01c59413          	slli	s0,a1,0x1c
80005898:	00e7e7b3          	or	a5,a5,a4
8000589c:	00812a23          	sw	s0,20(sp)
800058a0:	00012823          	sw	zero,16(sp)
800058a4:	00f12e23          	sw	a5,28(sp)
800058a8:	00008737          	lui	a4,0x8
800058ac:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
800058b0:	e75ff06f          	j	80005724 <__extenddftf2+0x7c>

800058b4 <__clzsi2>:
800058b4:	000107b7          	lui	a5,0x10
800058b8:	02f57a63          	bgeu	a0,a5,800058ec <__clzsi2+0x38>
800058bc:	10053793          	sltiu	a5,a0,256
800058c0:	0017c793          	xori	a5,a5,1
800058c4:	00379793          	slli	a5,a5,0x3
800058c8:	80028737          	lui	a4,0x80028
800058cc:	02000693          	li	a3,32
800058d0:	40f686b3          	sub	a3,a3,a5
800058d4:	00f55533          	srl	a0,a0,a5
800058d8:	da470793          	addi	a5,a4,-604 # 80027da4 <__clz_tab>
800058dc:	00a787b3          	add	a5,a5,a0
800058e0:	0007c503          	lbu	a0,0(a5) # 10000 <__STACKSIZE__+0xc000>
800058e4:	40a68533          	sub	a0,a3,a0
800058e8:	00008067          	ret
800058ec:	01000737          	lui	a4,0x1000
800058f0:	01000793          	li	a5,16
800058f4:	fce56ae3          	bltu	a0,a4,800058c8 <__clzsi2+0x14>
800058f8:	01800793          	li	a5,24
800058fc:	fcdff06f          	j	800058c8 <__clzsi2+0x14>

80005900 <dfs_device_fs_mount>:
    rt_uint16_t read_index;
    rt_uint16_t device_count;
};

int dfs_device_fs_mount(struct dfs_filesystem *fs, unsigned long rwflag, const void *data)
{
80005900:	fe010113          	addi	sp,sp,-32
80005904:	00812e23          	sw	s0,28(sp)
80005908:	02010413          	addi	s0,sp,32
8000590c:	fea42623          	sw	a0,-20(s0)
80005910:	feb42423          	sw	a1,-24(s0)
80005914:	fec42223          	sw	a2,-28(s0)
    return RT_EOK;
80005918:	00000793          	li	a5,0
}
8000591c:	00078513          	mv	a0,a5
80005920:	01c12403          	lw	s0,28(sp)
80005924:	02010113          	addi	sp,sp,32
80005928:	00008067          	ret

8000592c <dfs_device_fs_ioctl>:

int dfs_device_fs_ioctl(struct dfs_fd *file, int cmd, void *args)
{
8000592c:	fd010113          	addi	sp,sp,-48
80005930:	02112623          	sw	ra,44(sp)
80005934:	02812423          	sw	s0,40(sp)
80005938:	03010413          	addi	s0,sp,48
8000593c:	fca42e23          	sw	a0,-36(s0)
80005940:	fcb42c23          	sw	a1,-40(s0)
80005944:	fcc42a23          	sw	a2,-44(s0)
    rt_device_t dev_id;

    RT_ASSERT(file != RT_NULL);

    /* get device handler */
    dev_id = (rt_device_t)file->data;
80005948:	fdc42783          	lw	a5,-36(s0)
8000594c:	0207a783          	lw	a5,32(a5)
80005950:	fef42623          	sw	a5,-20(s0)
    RT_ASSERT(dev_id != RT_NULL);

    /* close device handler */
    result = rt_device_control(dev_id, cmd, args);
80005954:	fd442603          	lw	a2,-44(s0)
80005958:	fd842583          	lw	a1,-40(s0)
8000595c:	fec42503          	lw	a0,-20(s0)
80005960:	3040d0ef          	jal	ra,80012c64 <rt_device_control>
80005964:	fea42423          	sw	a0,-24(s0)
    if (result == RT_EOK)
80005968:	fe842783          	lw	a5,-24(s0)
8000596c:	00079663          	bnez	a5,80005978 <dfs_device_fs_ioctl+0x4c>
        return RT_EOK;
80005970:	00000793          	li	a5,0
80005974:	0080006f          	j	8000597c <dfs_device_fs_ioctl+0x50>

    return result;
80005978:	fe842783          	lw	a5,-24(s0)
}
8000597c:	00078513          	mv	a0,a5
80005980:	02c12083          	lw	ra,44(sp)
80005984:	02812403          	lw	s0,40(sp)
80005988:	03010113          	addi	sp,sp,48
8000598c:	00008067          	ret

80005990 <dfs_device_fs_read>:

int dfs_device_fs_read(struct dfs_fd *file, void *buf, size_t count)
{
80005990:	fd010113          	addi	sp,sp,-48
80005994:	02112623          	sw	ra,44(sp)
80005998:	02812423          	sw	s0,40(sp)
8000599c:	03010413          	addi	s0,sp,48
800059a0:	fca42e23          	sw	a0,-36(s0)
800059a4:	fcb42c23          	sw	a1,-40(s0)
800059a8:	fcc42a23          	sw	a2,-44(s0)
    rt_device_t dev_id;

    RT_ASSERT(file != RT_NULL);

    /* get device handler */
    dev_id = (rt_device_t)file->data;
800059ac:	fdc42783          	lw	a5,-36(s0)
800059b0:	0207a783          	lw	a5,32(a5)
800059b4:	fef42623          	sw	a5,-20(s0)
    RT_ASSERT(dev_id != RT_NULL);

    /* read device data */
    result = rt_device_read(dev_id, file->pos, buf, count);
800059b8:	fdc42783          	lw	a5,-36(s0)
800059bc:	01c7a783          	lw	a5,28(a5)
800059c0:	fd442683          	lw	a3,-44(s0)
800059c4:	fd842603          	lw	a2,-40(s0)
800059c8:	00078593          	mv	a1,a5
800059cc:	fec42503          	lw	a0,-20(s0)
800059d0:	17c0d0ef          	jal	ra,80012b4c <rt_device_read>
800059d4:	00050793          	mv	a5,a0
800059d8:	fef42423          	sw	a5,-24(s0)
    file->pos += result;
800059dc:	fdc42783          	lw	a5,-36(s0)
800059e0:	01c7a703          	lw	a4,28(a5)
800059e4:	fe842783          	lw	a5,-24(s0)
800059e8:	00f70733          	add	a4,a4,a5
800059ec:	fdc42783          	lw	a5,-36(s0)
800059f0:	00e7ae23          	sw	a4,28(a5)

    return result;
800059f4:	fe842783          	lw	a5,-24(s0)
}
800059f8:	00078513          	mv	a0,a5
800059fc:	02c12083          	lw	ra,44(sp)
80005a00:	02812403          	lw	s0,40(sp)
80005a04:	03010113          	addi	sp,sp,48
80005a08:	00008067          	ret

80005a0c <dfs_device_fs_write>:

int dfs_device_fs_write(struct dfs_fd *file, const void *buf, size_t count)
{
80005a0c:	fd010113          	addi	sp,sp,-48
80005a10:	02112623          	sw	ra,44(sp)
80005a14:	02812423          	sw	s0,40(sp)
80005a18:	03010413          	addi	s0,sp,48
80005a1c:	fca42e23          	sw	a0,-36(s0)
80005a20:	fcb42c23          	sw	a1,-40(s0)
80005a24:	fcc42a23          	sw	a2,-44(s0)
    rt_device_t dev_id;

    RT_ASSERT(file != RT_NULL);

    /* get device handler */
    dev_id = (rt_device_t)file->data;
80005a28:	fdc42783          	lw	a5,-36(s0)
80005a2c:	0207a783          	lw	a5,32(a5)
80005a30:	fef42623          	sw	a5,-20(s0)
    RT_ASSERT(dev_id != RT_NULL);

    /* read device data */
    result = rt_device_write(dev_id, file->pos, buf, count);
80005a34:	fdc42783          	lw	a5,-36(s0)
80005a38:	01c7a783          	lw	a5,28(a5)
80005a3c:	fd442683          	lw	a3,-44(s0)
80005a40:	fd842603          	lw	a2,-40(s0)
80005a44:	00078593          	mv	a1,a5
80005a48:	fec42503          	lw	a0,-20(s0)
80005a4c:	18c0d0ef          	jal	ra,80012bd8 <rt_device_write>
80005a50:	00050793          	mv	a5,a0
80005a54:	fef42423          	sw	a5,-24(s0)
    file->pos += result;
80005a58:	fdc42783          	lw	a5,-36(s0)
80005a5c:	01c7a703          	lw	a4,28(a5)
80005a60:	fe842783          	lw	a5,-24(s0)
80005a64:	00f70733          	add	a4,a4,a5
80005a68:	fdc42783          	lw	a5,-36(s0)
80005a6c:	00e7ae23          	sw	a4,28(a5)

    return result;
80005a70:	fe842783          	lw	a5,-24(s0)
}
80005a74:	00078513          	mv	a0,a5
80005a78:	02c12083          	lw	ra,44(sp)
80005a7c:	02812403          	lw	s0,40(sp)
80005a80:	03010113          	addi	sp,sp,48
80005a84:	00008067          	ret

80005a88 <dfs_device_fs_close>:

int dfs_device_fs_close(struct dfs_fd *file)
{
80005a88:	fd010113          	addi	sp,sp,-48
80005a8c:	02112623          	sw	ra,44(sp)
80005a90:	02812423          	sw	s0,40(sp)
80005a94:	03010413          	addi	s0,sp,48
80005a98:	fca42e23          	sw	a0,-36(s0)
    rt_err_t result;
    rt_device_t dev_id;

    RT_ASSERT(file != RT_NULL);

    if (file->type == FT_DIRECTORY)
80005a9c:	fdc42783          	lw	a5,-36(s0)
80005aa0:	0027d703          	lhu	a4,2(a5)
80005aa4:	00200793          	li	a5,2
80005aa8:	02f71063          	bne	a4,a5,80005ac8 <dfs_device_fs_close+0x40>
    {
        struct device_dirent *root_dirent;

        root_dirent = (struct device_dirent *)file->data;
80005aac:	fdc42783          	lw	a5,-36(s0)
80005ab0:	0207a783          	lw	a5,32(a5)
80005ab4:	fef42223          	sw	a5,-28(s0)
        RT_ASSERT(root_dirent != RT_NULL);

        /* release dirent */
        rt_free(root_dirent);
80005ab8:	fe442503          	lw	a0,-28(s0)
80005abc:	35d0f0ef          	jal	ra,80015618 <rt_free>
        return RT_EOK;
80005ac0:	00000793          	li	a5,0
80005ac4:	0380006f          	j	80005afc <dfs_device_fs_close+0x74>
    }

    /* get device handler */
    dev_id = (rt_device_t)file->data;
80005ac8:	fdc42783          	lw	a5,-36(s0)
80005acc:	0207a783          	lw	a5,32(a5)
80005ad0:	fef42623          	sw	a5,-20(s0)
    RT_ASSERT(dev_id != RT_NULL);

    /* close device handler */
    result = rt_device_close(dev_id);
80005ad4:	fec42503          	lw	a0,-20(s0)
80005ad8:	7c90c0ef          	jal	ra,80012aa0 <rt_device_close>
80005adc:	fea42423          	sw	a0,-24(s0)
    if (result == RT_EOK)
80005ae0:	fe842783          	lw	a5,-24(s0)
80005ae4:	00079a63          	bnez	a5,80005af8 <dfs_device_fs_close+0x70>
    {
        file->data = RT_NULL;
80005ae8:	fdc42783          	lw	a5,-36(s0)
80005aec:	0207a023          	sw	zero,32(a5)

        return RT_EOK;
80005af0:	00000793          	li	a5,0
80005af4:	0080006f          	j	80005afc <dfs_device_fs_close+0x74>
    }

    return -EIO;
80005af8:	ffb00793          	li	a5,-5
}
80005afc:	00078513          	mv	a0,a5
80005b00:	02c12083          	lw	ra,44(sp)
80005b04:	02812403          	lw	s0,40(sp)
80005b08:	03010113          	addi	sp,sp,48
80005b0c:	00008067          	ret

80005b10 <dfs_device_fs_open>:

int dfs_device_fs_open(struct dfs_fd *file)
{
80005b10:	fc010113          	addi	sp,sp,-64
80005b14:	02112e23          	sw	ra,60(sp)
80005b18:	02812c23          	sw	s0,56(sp)
80005b1c:	04010413          	addi	s0,sp,64
80005b20:	fca42623          	sw	a0,-52(s0)
    rt_err_t result;
    rt_device_t device;

    /* open root directory */
    if ((file->path[0] == '/') && (file->path[1] == '\0') &&
80005b24:	fcc42783          	lw	a5,-52(s0)
80005b28:	0047a783          	lw	a5,4(a5)
80005b2c:	0007c703          	lbu	a4,0(a5)
80005b30:	02f00793          	li	a5,47
80005b34:	16f71663          	bne	a4,a5,80005ca0 <dfs_device_fs_open+0x190>
80005b38:	fcc42783          	lw	a5,-52(s0)
80005b3c:	0047a783          	lw	a5,4(a5)
80005b40:	00178793          	addi	a5,a5,1
80005b44:	0007c783          	lbu	a5,0(a5)
80005b48:	14079c63          	bnez	a5,80005ca0 <dfs_device_fs_open+0x190>
        (file->flags & O_DIRECTORY))
80005b4c:	fcc42783          	lw	a5,-52(s0)
80005b50:	0147a703          	lw	a4,20(a5)
80005b54:	002007b7          	lui	a5,0x200
80005b58:	00f777b3          	and	a5,a4,a5
    if ((file->path[0] == '/') && (file->path[1] == '\0') &&
80005b5c:	14078263          	beqz	a5,80005ca0 <dfs_device_fs_open+0x190>
    {
        struct rt_object *object;
        struct rt_list_node *node;
        struct rt_object_information *information;
        struct device_dirent *root_dirent;
        rt_uint32_t count = 0;
80005b60:	fe042423          	sw	zero,-24(s0)

        /* lock scheduler */
        rt_enter_critical();
80005b64:	7c4110ef          	jal	ra,80017328 <rt_enter_critical>

        /* traverse device object */
        information = rt_object_get_information(RT_Object_Class_Device);
80005b68:	00900513          	li	a0,9
80005b6c:	405100ef          	jal	ra,80016770 <rt_object_get_information>
80005b70:	fea42223          	sw	a0,-28(s0)
        RT_ASSERT(information != RT_NULL);
        for (node = information->object_list.next; node != &(information->object_list); node = node->next)
80005b74:	fe442783          	lw	a5,-28(s0)
80005b78:	0047a783          	lw	a5,4(a5) # 200004 <__STACKSIZE__+0x1fc004>
80005b7c:	fef42623          	sw	a5,-20(s0)
80005b80:	01c0006f          	j	80005b9c <dfs_device_fs_open+0x8c>
        {
            count ++;
80005b84:	fe842783          	lw	a5,-24(s0)
80005b88:	00178793          	addi	a5,a5,1
80005b8c:	fef42423          	sw	a5,-24(s0)
        for (node = information->object_list.next; node != &(information->object_list); node = node->next)
80005b90:	fec42783          	lw	a5,-20(s0)
80005b94:	0007a783          	lw	a5,0(a5)
80005b98:	fef42623          	sw	a5,-20(s0)
80005b9c:	fe442783          	lw	a5,-28(s0)
80005ba0:	00478793          	addi	a5,a5,4
80005ba4:	fec42703          	lw	a4,-20(s0)
80005ba8:	fcf71ee3          	bne	a4,a5,80005b84 <dfs_device_fs_open+0x74>
        }
        rt_exit_critical();
80005bac:	7e4110ef          	jal	ra,80017390 <rt_exit_critical>

        root_dirent = (struct device_dirent *)rt_malloc(sizeof(struct device_dirent) +
80005bb0:	fe842783          	lw	a5,-24(s0)
80005bb4:	00278793          	addi	a5,a5,2
80005bb8:	00279793          	slli	a5,a5,0x2
80005bbc:	00078513          	mv	a0,a5
80005bc0:	10d0f0ef          	jal	ra,800154cc <rt_malloc>
80005bc4:	fea42023          	sw	a0,-32(s0)
                      count * sizeof(rt_device_t));
        if (root_dirent != RT_NULL)
80005bc8:	fe042783          	lw	a5,-32(s0)
80005bcc:	0c078063          	beqz	a5,80005c8c <dfs_device_fs_open+0x17c>
        {
            /* lock scheduler */
            rt_enter_critical();
80005bd0:	758110ef          	jal	ra,80017328 <rt_enter_critical>

            root_dirent->devices = (rt_device_t *)(root_dirent + 1);
80005bd4:	fe042783          	lw	a5,-32(s0)
80005bd8:	00878713          	addi	a4,a5,8
80005bdc:	fe042783          	lw	a5,-32(s0)
80005be0:	00e7a023          	sw	a4,0(a5)
            root_dirent->read_index = 0;
80005be4:	fe042783          	lw	a5,-32(s0)
80005be8:	00079223          	sh	zero,4(a5)
            root_dirent->device_count = count;
80005bec:	fe842783          	lw	a5,-24(s0)
80005bf0:	01079713          	slli	a4,a5,0x10
80005bf4:	01075713          	srli	a4,a4,0x10
80005bf8:	fe042783          	lw	a5,-32(s0)
80005bfc:	00e79323          	sh	a4,6(a5)
            count = 0;
80005c00:	fe042423          	sw	zero,-24(s0)
            /* get all device node */
            for (node = information->object_list.next; node != &(information->object_list); node = node->next)
80005c04:	fe442783          	lw	a5,-28(s0)
80005c08:	0047a783          	lw	a5,4(a5)
80005c0c:	fef42623          	sw	a5,-20(s0)
80005c10:	0680006f          	j	80005c78 <dfs_device_fs_open+0x168>
            {
                /* avoid memory write through */
                if (count == root_dirent->device_count)
80005c14:	fe042783          	lw	a5,-32(s0)
80005c18:	0067d783          	lhu	a5,6(a5)
80005c1c:	00078713          	mv	a4,a5
80005c20:	fe842783          	lw	a5,-24(s0)
80005c24:	00e79a63          	bne	a5,a4,80005c38 <dfs_device_fs_open+0x128>
                {
                    rt_kprintf("warning: There are newly added devices that are not displayed!");
80005c28:	00020517          	auipc	a0,0x20
80005c2c:	08c50513          	addi	a0,a0,140 # 80025cb4 <raise+0xc0>
80005c30:	5f80f0ef          	jal	ra,80015228 <rt_kprintf>
                    break;
80005c34:	0540006f          	j	80005c88 <dfs_device_fs_open+0x178>
                }
                object = rt_list_entry(node, struct rt_object, list);
80005c38:	fec42783          	lw	a5,-20(s0)
80005c3c:	fe878793          	addi	a5,a5,-24
80005c40:	fcf42e23          	sw	a5,-36(s0)
                root_dirent->devices[count] = (rt_device_t)object;
80005c44:	fe042783          	lw	a5,-32(s0)
80005c48:	0007a703          	lw	a4,0(a5)
80005c4c:	fe842783          	lw	a5,-24(s0)
80005c50:	00279793          	slli	a5,a5,0x2
80005c54:	00f707b3          	add	a5,a4,a5
80005c58:	fdc42703          	lw	a4,-36(s0)
80005c5c:	00e7a023          	sw	a4,0(a5)
                count ++;
80005c60:	fe842783          	lw	a5,-24(s0)
80005c64:	00178793          	addi	a5,a5,1
80005c68:	fef42423          	sw	a5,-24(s0)
            for (node = information->object_list.next; node != &(information->object_list); node = node->next)
80005c6c:	fec42783          	lw	a5,-20(s0)
80005c70:	0007a783          	lw	a5,0(a5)
80005c74:	fef42623          	sw	a5,-20(s0)
80005c78:	fe442783          	lw	a5,-28(s0)
80005c7c:	00478793          	addi	a5,a5,4
80005c80:	fec42703          	lw	a4,-20(s0)
80005c84:	f8f718e3          	bne	a4,a5,80005c14 <dfs_device_fs_open+0x104>
            }
            rt_exit_critical();
80005c88:	708110ef          	jal	ra,80017390 <rt_exit_critical>
        }

        /* set data */
        file->data = root_dirent;
80005c8c:	fcc42783          	lw	a5,-52(s0)
80005c90:	fe042703          	lw	a4,-32(s0)
80005c94:	02e7a023          	sw	a4,32(a5)

        return RT_EOK;
80005c98:	00000793          	li	a5,0
80005c9c:	07c0006f          	j	80005d18 <dfs_device_fs_open+0x208>
    }

    device = rt_device_find(&file->path[1]);
80005ca0:	fcc42783          	lw	a5,-52(s0)
80005ca4:	0047a783          	lw	a5,4(a5)
80005ca8:	00178793          	addi	a5,a5,1
80005cac:	00078513          	mv	a0,a5
80005cb0:	4650c0ef          	jal	ra,80012914 <rt_device_find>
80005cb4:	fca42c23          	sw	a0,-40(s0)
    if (device == RT_NULL)
80005cb8:	fd842783          	lw	a5,-40(s0)
80005cbc:	00079663          	bnez	a5,80005cc8 <dfs_device_fs_open+0x1b8>
        return -ENODEV;
80005cc0:	fed00793          	li	a5,-19
80005cc4:	0540006f          	j	80005d18 <dfs_device_fs_open+0x208>
        }
    }
    else
#endif /* RT_USING_POSIX_DEVIO */
    {
        result = rt_device_open(device, RT_DEVICE_OFLAG_RDWR);
80005cc8:	00300593          	li	a1,3
80005ccc:	fd842503          	lw	a0,-40(s0)
80005cd0:	47d0c0ef          	jal	ra,8001294c <rt_device_open>
80005cd4:	fca42a23          	sw	a0,-44(s0)
        if (result == RT_EOK || result == -RT_ENOSYS)
80005cd8:	fd442783          	lw	a5,-44(s0)
80005cdc:	00078863          	beqz	a5,80005cec <dfs_device_fs_open+0x1dc>
80005ce0:	fd442703          	lw	a4,-44(s0)
80005ce4:	ffa00793          	li	a5,-6
80005ce8:	02f71263          	bne	a4,a5,80005d0c <dfs_device_fs_open+0x1fc>
        {
            file->data = device;
80005cec:	fcc42783          	lw	a5,-52(s0)
80005cf0:	fd842703          	lw	a4,-40(s0)
80005cf4:	02e7a023          	sw	a4,32(a5)
            file->type = FT_DEVICE;
80005cf8:	fcc42783          	lw	a5,-52(s0)
80005cfc:	00400713          	li	a4,4
80005d00:	00e79123          	sh	a4,2(a5)
            return RT_EOK;
80005d04:	00000793          	li	a5,0
80005d08:	0100006f          	j	80005d18 <dfs_device_fs_open+0x208>
        }
    }

    file->data = RT_NULL;
80005d0c:	fcc42783          	lw	a5,-52(s0)
80005d10:	0207a023          	sw	zero,32(a5)
    /* open device failed. */
    return -EIO;
80005d14:	ffb00793          	li	a5,-5
}
80005d18:	00078513          	mv	a0,a5
80005d1c:	03c12083          	lw	ra,60(sp)
80005d20:	03812403          	lw	s0,56(sp)
80005d24:	04010113          	addi	sp,sp,64
80005d28:	00008067          	ret

80005d2c <dfs_device_fs_stat>:

int dfs_device_fs_stat(struct dfs_filesystem *fs, const char *path, struct stat *st)
{
80005d2c:	fd010113          	addi	sp,sp,-48
80005d30:	02112623          	sw	ra,44(sp)
80005d34:	02812423          	sw	s0,40(sp)
80005d38:	03010413          	addi	s0,sp,48
80005d3c:	fca42e23          	sw	a0,-36(s0)
80005d40:	fcb42c23          	sw	a1,-40(s0)
80005d44:	fcc42a23          	sw	a2,-44(s0)
    /* stat root directory */
    if ((path[0] == '/') && (path[1] == '\0'))
80005d48:	fd842783          	lw	a5,-40(s0)
80005d4c:	0007c703          	lbu	a4,0(a5)
80005d50:	02f00793          	li	a5,47
80005d54:	08f71463          	bne	a4,a5,80005ddc <dfs_device_fs_stat+0xb0>
80005d58:	fd842783          	lw	a5,-40(s0)
80005d5c:	00178793          	addi	a5,a5,1
80005d60:	0007c783          	lbu	a5,0(a5)
80005d64:	06079c63          	bnez	a5,80005ddc <dfs_device_fs_stat+0xb0>
    {
        st->st_dev = 0;
80005d68:	fd442783          	lw	a5,-44(s0)
80005d6c:	00079023          	sh	zero,0(a5)

        st->st_mode = S_IFREG | S_IRUSR | S_IRGRP | S_IROTH |
80005d70:	fd442783          	lw	a5,-44(s0)
80005d74:	00008737          	lui	a4,0x8
80005d78:	1b670713          	addi	a4,a4,438 # 81b6 <__STACKSIZE__+0x41b6>
80005d7c:	00e7a223          	sw	a4,4(a5)
                      S_IWUSR | S_IWGRP | S_IWOTH;
        st->st_mode &= ~S_IFREG;
80005d80:	fd442783          	lw	a5,-44(s0)
80005d84:	0047a703          	lw	a4,4(a5)
80005d88:	ffff87b7          	lui	a5,0xffff8
80005d8c:	fff78793          	addi	a5,a5,-1 # ffff7fff <__bss_end+0x7ff71843>
80005d90:	00f77733          	and	a4,a4,a5
80005d94:	fd442783          	lw	a5,-44(s0)
80005d98:	00e7a223          	sw	a4,4(a5)
        st->st_mode |= S_IFDIR | S_IXUSR | S_IXGRP | S_IXOTH;
80005d9c:	fd442783          	lw	a5,-44(s0)
80005da0:	0047a703          	lw	a4,4(a5)
80005da4:	000047b7          	lui	a5,0x4
80005da8:	04978793          	addi	a5,a5,73 # 4049 <__STACKSIZE__+0x49>
80005dac:	00f76733          	or	a4,a4,a5
80005db0:	fd442783          	lw	a5,-44(s0)
80005db4:	00e7a223          	sw	a4,4(a5)

        st->st_size  = 0;
80005db8:	fd442783          	lw	a5,-44(s0)
80005dbc:	0007a823          	sw	zero,16(a5)
        st->st_mtime = 0;
80005dc0:	fd442783          	lw	a5,-44(s0)
80005dc4:	00000693          	li	a3,0
80005dc8:	00000713          	li	a4,0
80005dcc:	02d7a423          	sw	a3,40(a5)
80005dd0:	02e7a623          	sw	a4,44(a5)

        return RT_EOK;
80005dd4:	00000793          	li	a5,0
80005dd8:	0f40006f          	j	80005ecc <dfs_device_fs_stat+0x1a0>
    }
    else
    {
        rt_device_t dev_id;

        dev_id = rt_device_find(&path[1]);
80005ddc:	fd842783          	lw	a5,-40(s0)
80005de0:	00178793          	addi	a5,a5,1
80005de4:	00078513          	mv	a0,a5
80005de8:	32d0c0ef          	jal	ra,80012914 <rt_device_find>
80005dec:	fea42623          	sw	a0,-20(s0)
        if (dev_id != RT_NULL)
80005df0:	fec42783          	lw	a5,-20(s0)
80005df4:	0c078a63          	beqz	a5,80005ec8 <dfs_device_fs_stat+0x19c>
        {
            st->st_dev = 0;
80005df8:	fd442783          	lw	a5,-44(s0)
80005dfc:	00079023          	sh	zero,0(a5)

            st->st_mode = S_IRUSR | S_IRGRP | S_IROTH |
80005e00:	fd442783          	lw	a5,-44(s0)
80005e04:	1b600713          	li	a4,438
80005e08:	00e7a223          	sw	a4,4(a5)
                          S_IWUSR | S_IWGRP | S_IWOTH;

            if (dev_id->type == RT_Device_Class_Char)
80005e0c:	fec42783          	lw	a5,-20(s0)
80005e10:	0207a783          	lw	a5,32(a5)
80005e14:	02079063          	bnez	a5,80005e34 <dfs_device_fs_stat+0x108>
                st->st_mode |= S_IFCHR;
80005e18:	fd442783          	lw	a5,-44(s0)
80005e1c:	0047a703          	lw	a4,4(a5)
80005e20:	000027b7          	lui	a5,0x2
80005e24:	00f76733          	or	a4,a4,a5
80005e28:	fd442783          	lw	a5,-44(s0)
80005e2c:	00e7a223          	sw	a4,4(a5) # 2004 <__STACKSIZE__-0x1ffc>
80005e30:	0740006f          	j	80005ea4 <dfs_device_fs_stat+0x178>
            else if (dev_id->type == RT_Device_Class_Block)
80005e34:	fec42783          	lw	a5,-20(s0)
80005e38:	0207a703          	lw	a4,32(a5)
80005e3c:	00100793          	li	a5,1
80005e40:	02f71063          	bne	a4,a5,80005e60 <dfs_device_fs_stat+0x134>
                st->st_mode |= S_IFBLK;
80005e44:	fd442783          	lw	a5,-44(s0)
80005e48:	0047a703          	lw	a4,4(a5)
80005e4c:	000067b7          	lui	a5,0x6
80005e50:	00f76733          	or	a4,a4,a5
80005e54:	fd442783          	lw	a5,-44(s0)
80005e58:	00e7a223          	sw	a4,4(a5) # 6004 <__STACKSIZE__+0x2004>
80005e5c:	0480006f          	j	80005ea4 <dfs_device_fs_stat+0x178>
            else if (dev_id->type == RT_Device_Class_Pipe)
80005e60:	fec42783          	lw	a5,-20(s0)
80005e64:	0207a703          	lw	a4,32(a5)
80005e68:	01000793          	li	a5,16
80005e6c:	02f71063          	bne	a4,a5,80005e8c <dfs_device_fs_stat+0x160>
                st->st_mode |= S_IFIFO;
80005e70:	fd442783          	lw	a5,-44(s0)
80005e74:	0047a703          	lw	a4,4(a5)
80005e78:	000017b7          	lui	a5,0x1
80005e7c:	00f76733          	or	a4,a4,a5
80005e80:	fd442783          	lw	a5,-44(s0)
80005e84:	00e7a223          	sw	a4,4(a5) # 1004 <__STACKSIZE__-0x2ffc>
80005e88:	01c0006f          	j	80005ea4 <dfs_device_fs_stat+0x178>
            else
                st->st_mode |= S_IFREG;
80005e8c:	fd442783          	lw	a5,-44(s0)
80005e90:	0047a703          	lw	a4,4(a5)
80005e94:	000087b7          	lui	a5,0x8
80005e98:	00f76733          	or	a4,a4,a5
80005e9c:	fd442783          	lw	a5,-44(s0)
80005ea0:	00e7a223          	sw	a4,4(a5) # 8004 <__STACKSIZE__+0x4004>

            st->st_size  = 0;
80005ea4:	fd442783          	lw	a5,-44(s0)
80005ea8:	0007a823          	sw	zero,16(a5)
            st->st_mtime = 0;
80005eac:	fd442783          	lw	a5,-44(s0)
80005eb0:	00000693          	li	a3,0
80005eb4:	00000713          	li	a4,0
80005eb8:	02d7a423          	sw	a3,40(a5)
80005ebc:	02e7a623          	sw	a4,44(a5)

            return RT_EOK;
80005ec0:	00000793          	li	a5,0
80005ec4:	0080006f          	j	80005ecc <dfs_device_fs_stat+0x1a0>
        }
    }

    return -ENOENT;
80005ec8:	ffe00793          	li	a5,-2
}
80005ecc:	00078513          	mv	a0,a5
80005ed0:	02c12083          	lw	ra,44(sp)
80005ed4:	02812403          	lw	s0,40(sp)
80005ed8:	03010113          	addi	sp,sp,48
80005edc:	00008067          	ret

80005ee0 <dfs_device_fs_getdents>:

int dfs_device_fs_getdents(struct dfs_fd *file, struct dirent *dirp, uint32_t count)
{
80005ee0:	fd010113          	addi	sp,sp,-48
80005ee4:	02112623          	sw	ra,44(sp)
80005ee8:	02812423          	sw	s0,40(sp)
80005eec:	03010413          	addi	s0,sp,48
80005ef0:	fca42e23          	sw	a0,-36(s0)
80005ef4:	fcb42c23          	sw	a1,-40(s0)
80005ef8:	fcc42a23          	sw	a2,-44(s0)
    rt_uint32_t index;
    rt_object_t object;
    struct dirent *d;
    struct device_dirent *root_dirent;

    root_dirent = (struct device_dirent *)file->data;
80005efc:	fdc42783          	lw	a5,-36(s0)
80005f00:	0207a783          	lw	a5,32(a5)
80005f04:	fef42423          	sw	a5,-24(s0)
    RT_ASSERT(root_dirent != RT_NULL);

    /* make integer count */
    count = (count / sizeof(struct dirent));
80005f08:	fd442703          	lw	a4,-44(s0)
80005f0c:	10400793          	li	a5,260
80005f10:	02f757b3          	divu	a5,a4,a5
80005f14:	fcf42a23          	sw	a5,-44(s0)
    if (count == 0)
80005f18:	fd442783          	lw	a5,-44(s0)
80005f1c:	00079663          	bnez	a5,80005f28 <dfs_device_fs_getdents+0x48>
        return -EINVAL;
80005f20:	fea00793          	li	a5,-22
80005f24:	1100006f          	j	80006034 <dfs_device_fs_getdents+0x154>

    for (index = 0; index < count && index + root_dirent->read_index < root_dirent->device_count;
80005f28:	fe042623          	sw	zero,-20(s0)
80005f2c:	0a00006f          	j	80005fcc <dfs_device_fs_getdents+0xec>
        index ++)
    {
        object = (rt_object_t)root_dirent->devices[root_dirent->read_index + index];
80005f30:	fe842783          	lw	a5,-24(s0)
80005f34:	0007a703          	lw	a4,0(a5)
80005f38:	fe842783          	lw	a5,-24(s0)
80005f3c:	0047d783          	lhu	a5,4(a5)
80005f40:	00078693          	mv	a3,a5
80005f44:	fec42783          	lw	a5,-20(s0)
80005f48:	00f687b3          	add	a5,a3,a5
80005f4c:	00279793          	slli	a5,a5,0x2
80005f50:	00f707b3          	add	a5,a4,a5
80005f54:	0007a783          	lw	a5,0(a5)
80005f58:	fef42223          	sw	a5,-28(s0)

        d = dirp + index;
80005f5c:	fec42703          	lw	a4,-20(s0)
80005f60:	00070793          	mv	a5,a4
80005f64:	00679793          	slli	a5,a5,0x6
80005f68:	00e787b3          	add	a5,a5,a4
80005f6c:	00279793          	slli	a5,a5,0x2
80005f70:	00078713          	mv	a4,a5
80005f74:	fd842783          	lw	a5,-40(s0)
80005f78:	00e787b3          	add	a5,a5,a4
80005f7c:	fef42023          	sw	a5,-32(s0)
        d->d_type = DT_REG;
80005f80:	fe042783          	lw	a5,-32(s0)
80005f84:	00100713          	li	a4,1
80005f88:	00e78023          	sb	a4,0(a5)
        d->d_namlen = RT_NAME_MAX;
80005f8c:	fe042783          	lw	a5,-32(s0)
80005f90:	01400713          	li	a4,20
80005f94:	00e780a3          	sb	a4,1(a5)
        d->d_reclen = (rt_uint16_t)sizeof(struct dirent);
80005f98:	fe042783          	lw	a5,-32(s0)
80005f9c:	10400713          	li	a4,260
80005fa0:	00e79123          	sh	a4,2(a5)
        rt_strncpy(d->d_name, object->name, RT_NAME_MAX);
80005fa4:	fe042783          	lw	a5,-32(s0)
80005fa8:	00478793          	addi	a5,a5,4
80005fac:	fe442703          	lw	a4,-28(s0)
80005fb0:	01400613          	li	a2,20
80005fb4:	00070593          	mv	a1,a4
80005fb8:	00078513          	mv	a0,a5
80005fbc:	0a80e0ef          	jal	ra,80014064 <rt_strncpy>
        index ++)
80005fc0:	fec42783          	lw	a5,-20(s0)
80005fc4:	00178793          	addi	a5,a5,1
80005fc8:	fef42623          	sw	a5,-20(s0)
    for (index = 0; index < count && index + root_dirent->read_index < root_dirent->device_count;
80005fcc:	fec42703          	lw	a4,-20(s0)
80005fd0:	fd442783          	lw	a5,-44(s0)
80005fd4:	02f77263          	bgeu	a4,a5,80005ff8 <dfs_device_fs_getdents+0x118>
80005fd8:	fe842783          	lw	a5,-24(s0)
80005fdc:	0047d783          	lhu	a5,4(a5)
80005fe0:	00078713          	mv	a4,a5
80005fe4:	fec42783          	lw	a5,-20(s0)
80005fe8:	00f707b3          	add	a5,a4,a5
80005fec:	fe842703          	lw	a4,-24(s0)
80005ff0:	00675703          	lhu	a4,6(a4)
80005ff4:	f2e7eee3          	bltu	a5,a4,80005f30 <dfs_device_fs_getdents+0x50>
    }

    root_dirent->read_index += index;
80005ff8:	fe842783          	lw	a5,-24(s0)
80005ffc:	0047d703          	lhu	a4,4(a5)
80006000:	fec42783          	lw	a5,-20(s0)
80006004:	01079793          	slli	a5,a5,0x10
80006008:	0107d793          	srli	a5,a5,0x10
8000600c:	00f707b3          	add	a5,a4,a5
80006010:	01079713          	slli	a4,a5,0x10
80006014:	01075713          	srli	a4,a4,0x10
80006018:	fe842783          	lw	a5,-24(s0)
8000601c:	00e79223          	sh	a4,4(a5)

    return index * sizeof(struct dirent);
80006020:	fec42703          	lw	a4,-20(s0)
80006024:	00070793          	mv	a5,a4
80006028:	00679793          	slli	a5,a5,0x6
8000602c:	00e787b3          	add	a5,a5,a4
80006030:	00279793          	slli	a5,a5,0x2
}
80006034:	00078513          	mv	a0,a5
80006038:	02c12083          	lw	ra,44(sp)
8000603c:	02812403          	lw	s0,40(sp)
80006040:	03010113          	addi	sp,sp,48
80006044:	00008067          	ret

80006048 <dfs_device_fs_poll>:

static int dfs_device_fs_poll(struct dfs_fd *fd, struct rt_pollreq *req)
{
80006048:	fd010113          	addi	sp,sp,-48
8000604c:	02812623          	sw	s0,44(sp)
80006050:	03010413          	addi	s0,sp,48
80006054:	fca42e23          	sw	a0,-36(s0)
80006058:	fcb42c23          	sw	a1,-40(s0)
    int mask = 0;
8000605c:	fe042623          	sw	zero,-20(s0)

    return mask;
80006060:	fec42783          	lw	a5,-20(s0)
}
80006064:	00078513          	mv	a0,a5
80006068:	02c12403          	lw	s0,44(sp)
8000606c:	03010113          	addi	sp,sp,48
80006070:	00008067          	ret

80006074 <devfs_init>:
    dfs_device_fs_stat,
    RT_NULL, /*rename*/
};

int devfs_init(void)
{
80006074:	ff010113          	addi	sp,sp,-16
80006078:	00112623          	sw	ra,12(sp)
8000607c:	00812423          	sw	s0,8(sp)
80006080:	01010413          	addi	s0,sp,16
    /* register device file system */
    dfs_register(&_device_fs);
80006084:	00022517          	auipc	a0,0x22
80006088:	e4450513          	addi	a0,a0,-444 # 80027ec8 <_device_fs>
8000608c:	051020ef          	jal	ra,800088dc <dfs_register>

    return 0;
80006090:	00000793          	li	a5,0
}
80006094:	00078513          	mv	a0,a5
80006098:	00c12083          	lw	ra,12(sp)
8000609c:	00812403          	lw	s0,8(sp)
800060a0:	01010113          	addi	sp,sp,16
800060a4:	00008067          	ret

800060a8 <dfs_romfs_mount>:
#include <dfs_file.h>

#include "dfs_romfs.h"

int dfs_romfs_mount(struct dfs_filesystem *fs, unsigned long rwflag, const void *data)
{
800060a8:	fd010113          	addi	sp,sp,-48
800060ac:	02812623          	sw	s0,44(sp)
800060b0:	03010413          	addi	s0,sp,48
800060b4:	fca42e23          	sw	a0,-36(s0)
800060b8:	fcb42c23          	sw	a1,-40(s0)
800060bc:	fcc42a23          	sw	a2,-44(s0)
    struct romfs_dirent *root_dirent;

    if (data == NULL)
800060c0:	fd442783          	lw	a5,-44(s0)
800060c4:	00079663          	bnez	a5,800060d0 <dfs_romfs_mount+0x28>
        return -EIO;
800060c8:	ffb00793          	li	a5,-5
800060cc:	01c0006f          	j	800060e8 <dfs_romfs_mount+0x40>

    root_dirent = (struct romfs_dirent *)data;
800060d0:	fd442783          	lw	a5,-44(s0)
800060d4:	fef42623          	sw	a5,-20(s0)
    fs->data = root_dirent;
800060d8:	fdc42783          	lw	a5,-36(s0)
800060dc:	fec42703          	lw	a4,-20(s0)
800060e0:	00e7a623          	sw	a4,12(a5)

    return RT_EOK;
800060e4:	00000793          	li	a5,0
}
800060e8:	00078513          	mv	a0,a5
800060ec:	02c12403          	lw	s0,44(sp)
800060f0:	03010113          	addi	sp,sp,48
800060f4:	00008067          	ret

800060f8 <dfs_romfs_unmount>:

int dfs_romfs_unmount(struct dfs_filesystem *fs)
{
800060f8:	fe010113          	addi	sp,sp,-32
800060fc:	00812e23          	sw	s0,28(sp)
80006100:	02010413          	addi	s0,sp,32
80006104:	fea42623          	sw	a0,-20(s0)
    return RT_EOK;
80006108:	00000793          	li	a5,0
}
8000610c:	00078513          	mv	a0,a5
80006110:	01c12403          	lw	s0,28(sp)
80006114:	02010113          	addi	sp,sp,32
80006118:	00008067          	ret

8000611c <dfs_romfs_ioctl>:

int dfs_romfs_ioctl(struct dfs_fd *file, int cmd, void *args)
{
8000611c:	fe010113          	addi	sp,sp,-32
80006120:	00812e23          	sw	s0,28(sp)
80006124:	02010413          	addi	s0,sp,32
80006128:	fea42623          	sw	a0,-20(s0)
8000612c:	feb42423          	sw	a1,-24(s0)
80006130:	fec42223          	sw	a2,-28(s0)
    return -EIO;
80006134:	ffb00793          	li	a5,-5
}
80006138:	00078513          	mv	a0,a5
8000613c:	01c12403          	lw	s0,28(sp)
80006140:	02010113          	addi	sp,sp,32
80006144:	00008067          	ret

80006148 <check_dirent>:

rt_inline int check_dirent(struct romfs_dirent *dirent)
{
80006148:	fe010113          	addi	sp,sp,-32
8000614c:	00812e23          	sw	s0,28(sp)
80006150:	02010413          	addi	s0,sp,32
80006154:	fea42623          	sw	a0,-20(s0)
    if ((dirent->type != ROMFS_DIRENT_FILE && dirent->type != ROMFS_DIRENT_DIR)
80006158:	fec42783          	lw	a5,-20(s0)
8000615c:	0007a783          	lw	a5,0(a5)
80006160:	00078a63          	beqz	a5,80006174 <check_dirent+0x2c>
80006164:	fec42783          	lw	a5,-20(s0)
80006168:	0007a703          	lw	a4,0(a5)
8000616c:	00100793          	li	a5,1
80006170:	00f71a63          	bne	a4,a5,80006184 <check_dirent+0x3c>
        || dirent->size == ~0U)
80006174:	fec42783          	lw	a5,-20(s0)
80006178:	00c7a703          	lw	a4,12(a5)
8000617c:	fff00793          	li	a5,-1
80006180:	00f71663          	bne	a4,a5,8000618c <check_dirent+0x44>
        return -1;
80006184:	fff00793          	li	a5,-1
80006188:	0080006f          	j	80006190 <check_dirent+0x48>
    return 0;
8000618c:	00000793          	li	a5,0
}
80006190:	00078513          	mv	a0,a5
80006194:	01c12403          	lw	s0,28(sp)
80006198:	02010113          	addi	sp,sp,32
8000619c:	00008067          	ret

800061a0 <dfs_romfs_lookup>:

struct romfs_dirent *dfs_romfs_lookup(struct romfs_dirent *root_dirent, const char *path, rt_size_t *size)
{
800061a0:	fc010113          	addi	sp,sp,-64
800061a4:	02112e23          	sw	ra,60(sp)
800061a8:	02812c23          	sw	s0,56(sp)
800061ac:	04010413          	addi	s0,sp,64
800061b0:	fca42623          	sw	a0,-52(s0)
800061b4:	fcb42423          	sw	a1,-56(s0)
800061b8:	fcc42223          	sw	a2,-60(s0)
    const char *subpath, *subpath_end;
    struct romfs_dirent *dirent;
    rt_size_t dirent_size;

    /* Check the root_dirent. */
    if (check_dirent(root_dirent) != 0)
800061bc:	fcc42503          	lw	a0,-52(s0)
800061c0:	f89ff0ef          	jal	ra,80006148 <check_dirent>
800061c4:	00050793          	mv	a5,a0
800061c8:	00078663          	beqz	a5,800061d4 <dfs_romfs_lookup+0x34>
        return NULL;
800061cc:	00000793          	li	a5,0
800061d0:	2980006f          	j	80006468 <dfs_romfs_lookup+0x2c8>

    if (path[0] == '/' && path[1] == '\0')
800061d4:	fc842783          	lw	a5,-56(s0)
800061d8:	0007c703          	lbu	a4,0(a5)
800061dc:	02f00793          	li	a5,47
800061e0:	02f71663          	bne	a4,a5,8000620c <dfs_romfs_lookup+0x6c>
800061e4:	fc842783          	lw	a5,-56(s0)
800061e8:	00178793          	addi	a5,a5,1
800061ec:	0007c783          	lbu	a5,0(a5)
800061f0:	00079e63          	bnez	a5,8000620c <dfs_romfs_lookup+0x6c>
    {
        *size = root_dirent->size;
800061f4:	fcc42783          	lw	a5,-52(s0)
800061f8:	00c7a703          	lw	a4,12(a5)
800061fc:	fc442783          	lw	a5,-60(s0)
80006200:	00e7a023          	sw	a4,0(a5)
        return root_dirent;
80006204:	fcc42783          	lw	a5,-52(s0)
80006208:	2600006f          	j	80006468 <dfs_romfs_lookup+0x2c8>
    }

    /* goto root directory entries */
    dirent = (struct romfs_dirent *)root_dirent->data;
8000620c:	fcc42783          	lw	a5,-52(s0)
80006210:	0087a783          	lw	a5,8(a5)
80006214:	fcf42e23          	sw	a5,-36(s0)
    dirent_size = root_dirent->size;
80006218:	fcc42783          	lw	a5,-52(s0)
8000621c:	00c7a783          	lw	a5,12(a5)
80006220:	fcf42c23          	sw	a5,-40(s0)

    /* get the end position of this subpath */
    subpath_end = path;
80006224:	fc842783          	lw	a5,-56(s0)
80006228:	fef42023          	sw	a5,-32(s0)
    /* skip /// */
    while (*subpath_end && *subpath_end == '/')
8000622c:	0100006f          	j	8000623c <dfs_romfs_lookup+0x9c>
        subpath_end ++;
80006230:	fe042783          	lw	a5,-32(s0)
80006234:	00178793          	addi	a5,a5,1
80006238:	fef42023          	sw	a5,-32(s0)
    while (*subpath_end && *subpath_end == '/')
8000623c:	fe042783          	lw	a5,-32(s0)
80006240:	0007c783          	lbu	a5,0(a5)
80006244:	00078a63          	beqz	a5,80006258 <dfs_romfs_lookup+0xb8>
80006248:	fe042783          	lw	a5,-32(s0)
8000624c:	0007c703          	lbu	a4,0(a5)
80006250:	02f00793          	li	a5,47
80006254:	fcf70ee3          	beq	a4,a5,80006230 <dfs_romfs_lookup+0x90>
    subpath = subpath_end;
80006258:	fe042783          	lw	a5,-32(s0)
8000625c:	fef42223          	sw	a5,-28(s0)
    while ((*subpath_end != '/') && *subpath_end)
80006260:	0100006f          	j	80006270 <dfs_romfs_lookup+0xd0>
        subpath_end ++;
80006264:	fe042783          	lw	a5,-32(s0)
80006268:	00178793          	addi	a5,a5,1
8000626c:	fef42023          	sw	a5,-32(s0)
    while ((*subpath_end != '/') && *subpath_end)
80006270:	fe042783          	lw	a5,-32(s0)
80006274:	0007c703          	lbu	a4,0(a5)
80006278:	02f00793          	li	a5,47
8000627c:	1cf70c63          	beq	a4,a5,80006454 <dfs_romfs_lookup+0x2b4>
80006280:	fe042783          	lw	a5,-32(s0)
80006284:	0007c783          	lbu	a5,0(a5)
80006288:	fc079ee3          	bnez	a5,80006264 <dfs_romfs_lookup+0xc4>

    while (dirent != NULL)
8000628c:	1c80006f          	j	80006454 <dfs_romfs_lookup+0x2b4>
    {
        found = 0;
80006290:	fe042423          	sw	zero,-24(s0)

        /* search in folder */
        for (index = 0; index < dirent_size; index ++)
80006294:	fe042623          	sw	zero,-20(s0)
80006298:	1a00006f          	j	80006438 <dfs_romfs_lookup+0x298>
        {
            if (check_dirent(&dirent[index]) != 0)
8000629c:	fec42783          	lw	a5,-20(s0)
800062a0:	00479793          	slli	a5,a5,0x4
800062a4:	fdc42703          	lw	a4,-36(s0)
800062a8:	00f707b3          	add	a5,a4,a5
800062ac:	00078513          	mv	a0,a5
800062b0:	e99ff0ef          	jal	ra,80006148 <check_dirent>
800062b4:	00050793          	mv	a5,a0
800062b8:	00078663          	beqz	a5,800062c4 <dfs_romfs_lookup+0x124>
                return NULL;
800062bc:	00000793          	li	a5,0
800062c0:	1a80006f          	j	80006468 <dfs_romfs_lookup+0x2c8>
            if (rt_strlen(dirent[index].name) ==  (rt_size_t)(subpath_end - subpath) &&
800062c4:	fec42783          	lw	a5,-20(s0)
800062c8:	00479793          	slli	a5,a5,0x4
800062cc:	fdc42703          	lw	a4,-36(s0)
800062d0:	00f707b3          	add	a5,a4,a5
800062d4:	0047a783          	lw	a5,4(a5)
800062d8:	00078513          	mv	a0,a5
800062dc:	7350d0ef          	jal	ra,80014210 <rt_strlen>
800062e0:	00050693          	mv	a3,a0
800062e4:	fe042703          	lw	a4,-32(s0)
800062e8:	fe442783          	lw	a5,-28(s0)
800062ec:	40f707b3          	sub	a5,a4,a5
800062f0:	12f69e63          	bne	a3,a5,8000642c <dfs_romfs_lookup+0x28c>
                    rt_strncmp(dirent[index].name, subpath, (subpath_end - subpath)) == 0)
800062f4:	fec42783          	lw	a5,-20(s0)
800062f8:	00479793          	slli	a5,a5,0x4
800062fc:	fdc42703          	lw	a4,-36(s0)
80006300:	00f707b3          	add	a5,a4,a5
80006304:	0047a683          	lw	a3,4(a5)
80006308:	fe042703          	lw	a4,-32(s0)
8000630c:	fe442783          	lw	a5,-28(s0)
80006310:	40f707b3          	sub	a5,a4,a5
80006314:	00078613          	mv	a2,a5
80006318:	fe442583          	lw	a1,-28(s0)
8000631c:	00068513          	mv	a0,a3
80006320:	5f10d0ef          	jal	ra,80014110 <rt_strncmp>
80006324:	00050793          	mv	a5,a0
            if (rt_strlen(dirent[index].name) ==  (rt_size_t)(subpath_end - subpath) &&
80006328:	10079263          	bnez	a5,8000642c <dfs_romfs_lookup+0x28c>
            {
                dirent_size = dirent[index].size;
8000632c:	fec42783          	lw	a5,-20(s0)
80006330:	00479793          	slli	a5,a5,0x4
80006334:	fdc42703          	lw	a4,-36(s0)
80006338:	00f707b3          	add	a5,a4,a5
8000633c:	00c7a783          	lw	a5,12(a5)
80006340:	fcf42c23          	sw	a5,-40(s0)

                /* skip /// */
                while (*subpath_end && *subpath_end == '/')
80006344:	0100006f          	j	80006354 <dfs_romfs_lookup+0x1b4>
                    subpath_end ++;
80006348:	fe042783          	lw	a5,-32(s0)
8000634c:	00178793          	addi	a5,a5,1
80006350:	fef42023          	sw	a5,-32(s0)
                while (*subpath_end && *subpath_end == '/')
80006354:	fe042783          	lw	a5,-32(s0)
80006358:	0007c783          	lbu	a5,0(a5)
8000635c:	00078a63          	beqz	a5,80006370 <dfs_romfs_lookup+0x1d0>
80006360:	fe042783          	lw	a5,-32(s0)
80006364:	0007c703          	lbu	a4,0(a5)
80006368:	02f00793          	li	a5,47
8000636c:	fcf70ee3          	beq	a4,a5,80006348 <dfs_romfs_lookup+0x1a8>
                subpath = subpath_end;
80006370:	fe042783          	lw	a5,-32(s0)
80006374:	fef42223          	sw	a5,-28(s0)
                while ((*subpath_end != '/') && *subpath_end)
80006378:	0100006f          	j	80006388 <dfs_romfs_lookup+0x1e8>
                    subpath_end ++;
8000637c:	fe042783          	lw	a5,-32(s0)
80006380:	00178793          	addi	a5,a5,1
80006384:	fef42023          	sw	a5,-32(s0)
                while ((*subpath_end != '/') && *subpath_end)
80006388:	fe042783          	lw	a5,-32(s0)
8000638c:	0007c703          	lbu	a4,0(a5)
80006390:	02f00793          	li	a5,47
80006394:	00f70863          	beq	a4,a5,800063a4 <dfs_romfs_lookup+0x204>
80006398:	fe042783          	lw	a5,-32(s0)
8000639c:	0007c783          	lbu	a5,0(a5)
800063a0:	fc079ee3          	bnez	a5,8000637c <dfs_romfs_lookup+0x1dc>

                if (!(*subpath))
800063a4:	fe442783          	lw	a5,-28(s0)
800063a8:	0007c783          	lbu	a5,0(a5)
800063ac:	02079263          	bnez	a5,800063d0 <dfs_romfs_lookup+0x230>
                {
                    *size = dirent_size;
800063b0:	fc442783          	lw	a5,-60(s0)
800063b4:	fd842703          	lw	a4,-40(s0)
800063b8:	00e7a023          	sw	a4,0(a5)
                    return &dirent[index];
800063bc:	fec42783          	lw	a5,-20(s0)
800063c0:	00479793          	slli	a5,a5,0x4
800063c4:	fdc42703          	lw	a4,-36(s0)
800063c8:	00f707b3          	add	a5,a4,a5
800063cc:	09c0006f          	j	80006468 <dfs_romfs_lookup+0x2c8>
                }

                if (dirent[index].type == ROMFS_DIRENT_DIR)
800063d0:	fec42783          	lw	a5,-20(s0)
800063d4:	00479793          	slli	a5,a5,0x4
800063d8:	fdc42703          	lw	a4,-36(s0)
800063dc:	00f707b3          	add	a5,a4,a5
800063e0:	0007a703          	lw	a4,0(a5)
800063e4:	00100793          	li	a5,1
800063e8:	02f71463          	bne	a4,a5,80006410 <dfs_romfs_lookup+0x270>
                {
                    /* enter directory */
                    dirent = (struct romfs_dirent *)dirent[index].data;
800063ec:	fec42783          	lw	a5,-20(s0)
800063f0:	00479793          	slli	a5,a5,0x4
800063f4:	fdc42703          	lw	a4,-36(s0)
800063f8:	00f707b3          	add	a5,a4,a5
800063fc:	0087a783          	lw	a5,8(a5)
80006400:	fcf42e23          	sw	a5,-36(s0)
                    found = 1;
80006404:	00100793          	li	a5,1
80006408:	fef42423          	sw	a5,-24(s0)
                    break;
8000640c:	0400006f          	j	8000644c <dfs_romfs_lookup+0x2ac>
                }
                else
                {
                    /* return file dirent */
                    if (subpath != NULL)
80006410:	fe442783          	lw	a5,-28(s0)
80006414:	02079a63          	bnez	a5,80006448 <dfs_romfs_lookup+0x2a8>
                        break; /* not the end of path */

                    return &dirent[index];
80006418:	fec42783          	lw	a5,-20(s0)
8000641c:	00479793          	slli	a5,a5,0x4
80006420:	fdc42703          	lw	a4,-36(s0)
80006424:	00f707b3          	add	a5,a4,a5
80006428:	0400006f          	j	80006468 <dfs_romfs_lookup+0x2c8>
        for (index = 0; index < dirent_size; index ++)
8000642c:	fec42783          	lw	a5,-20(s0)
80006430:	00178793          	addi	a5,a5,1
80006434:	fef42623          	sw	a5,-20(s0)
80006438:	fec42703          	lw	a4,-20(s0)
8000643c:	fd842783          	lw	a5,-40(s0)
80006440:	e4f76ee3          	bltu	a4,a5,8000629c <dfs_romfs_lookup+0xfc>
80006444:	0080006f          	j	8000644c <dfs_romfs_lookup+0x2ac>
                        break; /* not the end of path */
80006448:	00000013          	nop
                }
            }
        }

        if (!found)
8000644c:	fe842783          	lw	a5,-24(s0)
80006450:	00078863          	beqz	a5,80006460 <dfs_romfs_lookup+0x2c0>
    while (dirent != NULL)
80006454:	fdc42783          	lw	a5,-36(s0)
80006458:	e2079ce3          	bnez	a5,80006290 <dfs_romfs_lookup+0xf0>
8000645c:	0080006f          	j	80006464 <dfs_romfs_lookup+0x2c4>
            break; /* not found */
80006460:	00000013          	nop
    }

    /* not found */
    return NULL;
80006464:	00000793          	li	a5,0
}
80006468:	00078513          	mv	a0,a5
8000646c:	03c12083          	lw	ra,60(sp)
80006470:	03812403          	lw	s0,56(sp)
80006474:	04010113          	addi	sp,sp,64
80006478:	00008067          	ret

8000647c <dfs_romfs_read>:

int dfs_romfs_read(struct dfs_fd *file, void *buf, size_t count)
{
8000647c:	fd010113          	addi	sp,sp,-48
80006480:	02112623          	sw	ra,44(sp)
80006484:	02812423          	sw	s0,40(sp)
80006488:	03010413          	addi	s0,sp,48
8000648c:	fca42e23          	sw	a0,-36(s0)
80006490:	fcb42c23          	sw	a1,-40(s0)
80006494:	fcc42a23          	sw	a2,-44(s0)
    rt_size_t length;
    struct romfs_dirent *dirent;

    dirent = (struct romfs_dirent *)file->data;
80006498:	fdc42783          	lw	a5,-36(s0)
8000649c:	0207a783          	lw	a5,32(a5)
800064a0:	fef42423          	sw	a5,-24(s0)
    RT_ASSERT(dirent != NULL);

    if (check_dirent(dirent) != 0)
800064a4:	fe842503          	lw	a0,-24(s0)
800064a8:	ca1ff0ef          	jal	ra,80006148 <check_dirent>
800064ac:	00050793          	mv	a5,a0
800064b0:	00078663          	beqz	a5,800064bc <dfs_romfs_read+0x40>
    {
        return -EIO;
800064b4:	ffb00793          	li	a5,-5
800064b8:	0940006f          	j	8000654c <dfs_romfs_read+0xd0>
    }

    if (count < file->size - file->pos)
800064bc:	fdc42783          	lw	a5,-36(s0)
800064c0:	0187a783          	lw	a5,24(a5)
800064c4:	fdc42703          	lw	a4,-36(s0)
800064c8:	01c72703          	lw	a4,28(a4)
800064cc:	40e787b3          	sub	a5,a5,a4
800064d0:	fd442703          	lw	a4,-44(s0)
800064d4:	00f77863          	bgeu	a4,a5,800064e4 <dfs_romfs_read+0x68>
        length = count;
800064d8:	fd442783          	lw	a5,-44(s0)
800064dc:	fef42623          	sw	a5,-20(s0)
800064e0:	01c0006f          	j	800064fc <dfs_romfs_read+0x80>
    else
        length = file->size - file->pos;
800064e4:	fdc42783          	lw	a5,-36(s0)
800064e8:	0187a783          	lw	a5,24(a5)
800064ec:	fdc42703          	lw	a4,-36(s0)
800064f0:	01c72703          	lw	a4,28(a4)
800064f4:	40e787b3          	sub	a5,a5,a4
800064f8:	fef42623          	sw	a5,-20(s0)

    if (length > 0)
800064fc:	fec42783          	lw	a5,-20(s0)
80006500:	02078463          	beqz	a5,80006528 <dfs_romfs_read+0xac>
        rt_memcpy(buf, &(dirent->data[file->pos]), length);
80006504:	fe842783          	lw	a5,-24(s0)
80006508:	0087a783          	lw	a5,8(a5)
8000650c:	fdc42703          	lw	a4,-36(s0)
80006510:	01c72703          	lw	a4,28(a4)
80006514:	00e787b3          	add	a5,a5,a4
80006518:	fec42603          	lw	a2,-20(s0)
8000651c:	00078593          	mv	a1,a5
80006520:	fd842503          	lw	a0,-40(s0)
80006524:	0c50d0ef          	jal	ra,80013de8 <rt_memcpy>

    /* update file current position */
    file->pos += length;
80006528:	fdc42783          	lw	a5,-36(s0)
8000652c:	01c7a783          	lw	a5,28(a5)
80006530:	00078713          	mv	a4,a5
80006534:	fec42783          	lw	a5,-20(s0)
80006538:	00f707b3          	add	a5,a4,a5
8000653c:	00078713          	mv	a4,a5
80006540:	fdc42783          	lw	a5,-36(s0)
80006544:	00e7ae23          	sw	a4,28(a5)

    return length;
80006548:	fec42783          	lw	a5,-20(s0)
}
8000654c:	00078513          	mv	a0,a5
80006550:	02c12083          	lw	ra,44(sp)
80006554:	02812403          	lw	s0,40(sp)
80006558:	03010113          	addi	sp,sp,48
8000655c:	00008067          	ret

80006560 <dfs_romfs_lseek>:

int dfs_romfs_lseek(struct dfs_fd *file, off_t offset)
{
80006560:	fe010113          	addi	sp,sp,-32
80006564:	00812e23          	sw	s0,28(sp)
80006568:	02010413          	addi	s0,sp,32
8000656c:	fea42623          	sw	a0,-20(s0)
80006570:	feb42423          	sw	a1,-24(s0)
    if (offset >= 0 && (rt_size_t)offset <= file->size)
80006574:	fe842783          	lw	a5,-24(s0)
80006578:	0207c663          	bltz	a5,800065a4 <dfs_romfs_lseek+0x44>
8000657c:	fec42783          	lw	a5,-20(s0)
80006580:	0187a703          	lw	a4,24(a5)
80006584:	fe842783          	lw	a5,-24(s0)
80006588:	00f76e63          	bltu	a4,a5,800065a4 <dfs_romfs_lseek+0x44>
    {
        file->pos = offset;
8000658c:	fec42783          	lw	a5,-20(s0)
80006590:	fe842703          	lw	a4,-24(s0)
80006594:	00e7ae23          	sw	a4,28(a5)
        return file->pos;
80006598:	fec42783          	lw	a5,-20(s0)
8000659c:	01c7a783          	lw	a5,28(a5)
800065a0:	0080006f          	j	800065a8 <dfs_romfs_lseek+0x48>
    }

    return -EIO;
800065a4:	ffb00793          	li	a5,-5
}
800065a8:	00078513          	mv	a0,a5
800065ac:	01c12403          	lw	s0,28(sp)
800065b0:	02010113          	addi	sp,sp,32
800065b4:	00008067          	ret

800065b8 <dfs_romfs_close>:

int dfs_romfs_close(struct dfs_fd *file)
{
800065b8:	fe010113          	addi	sp,sp,-32
800065bc:	00812e23          	sw	s0,28(sp)
800065c0:	02010413          	addi	s0,sp,32
800065c4:	fea42623          	sw	a0,-20(s0)
    file->data = NULL;
800065c8:	fec42783          	lw	a5,-20(s0)
800065cc:	0207a023          	sw	zero,32(a5)
    return RT_EOK;
800065d0:	00000793          	li	a5,0
}
800065d4:	00078513          	mv	a0,a5
800065d8:	01c12403          	lw	s0,28(sp)
800065dc:	02010113          	addi	sp,sp,32
800065e0:	00008067          	ret

800065e4 <dfs_romfs_open>:

int dfs_romfs_open(struct dfs_fd *file)
{
800065e4:	fd010113          	addi	sp,sp,-48
800065e8:	02112623          	sw	ra,44(sp)
800065ec:	02812423          	sw	s0,40(sp)
800065f0:	03010413          	addi	s0,sp,48
800065f4:	fca42e23          	sw	a0,-36(s0)
    rt_size_t size;
    struct romfs_dirent *dirent;
    struct romfs_dirent *root_dirent;
    struct dfs_filesystem *fs;

    fs = (struct dfs_filesystem *)file->data;
800065f8:	fdc42783          	lw	a5,-36(s0)
800065fc:	0207a783          	lw	a5,32(a5)
80006600:	fef42623          	sw	a5,-20(s0)
    root_dirent = (struct romfs_dirent *)fs->data;
80006604:	fec42783          	lw	a5,-20(s0)
80006608:	00c7a783          	lw	a5,12(a5)
8000660c:	fef42423          	sw	a5,-24(s0)

    if (check_dirent(root_dirent) != 0)
80006610:	fe842503          	lw	a0,-24(s0)
80006614:	b35ff0ef          	jal	ra,80006148 <check_dirent>
80006618:	00050793          	mv	a5,a0
8000661c:	00078663          	beqz	a5,80006628 <dfs_romfs_open+0x44>
        return -EIO;
80006620:	ffb00793          	li	a5,-5
80006624:	0b80006f          	j	800066dc <dfs_romfs_open+0xf8>

    if (file->flags & (O_CREAT | O_WRONLY | O_APPEND | O_TRUNC | O_RDWR))
80006628:	fdc42783          	lw	a5,-36(s0)
8000662c:	0147a783          	lw	a5,20(a5)
80006630:	60b7f793          	andi	a5,a5,1547
80006634:	00078663          	beqz	a5,80006640 <dfs_romfs_open+0x5c>
        return -EINVAL;
80006638:	fea00793          	li	a5,-22
8000663c:	0a00006f          	j	800066dc <dfs_romfs_open+0xf8>

    dirent = dfs_romfs_lookup(root_dirent, file->path, &size);
80006640:	fdc42783          	lw	a5,-36(s0)
80006644:	0047a783          	lw	a5,4(a5)
80006648:	fe040713          	addi	a4,s0,-32
8000664c:	00070613          	mv	a2,a4
80006650:	00078593          	mv	a1,a5
80006654:	fe842503          	lw	a0,-24(s0)
80006658:	b49ff0ef          	jal	ra,800061a0 <dfs_romfs_lookup>
8000665c:	fea42223          	sw	a0,-28(s0)
    if (dirent == NULL)
80006660:	fe442783          	lw	a5,-28(s0)
80006664:	00079663          	bnez	a5,80006670 <dfs_romfs_open+0x8c>
        return -ENOENT;
80006668:	ffe00793          	li	a5,-2
8000666c:	0700006f          	j	800066dc <dfs_romfs_open+0xf8>

    /* entry is a directory file type */
    if (dirent->type == ROMFS_DIRENT_DIR)
80006670:	fe442783          	lw	a5,-28(s0)
80006674:	0007a703          	lw	a4,0(a5)
80006678:	00100793          	li	a5,1
8000667c:	02f71063          	bne	a4,a5,8000669c <dfs_romfs_open+0xb8>
    {
        if (!(file->flags & O_DIRECTORY))
80006680:	fdc42783          	lw	a5,-36(s0)
80006684:	0147a703          	lw	a4,20(a5)
80006688:	002007b7          	lui	a5,0x200
8000668c:	00f777b3          	and	a5,a4,a5
80006690:	02079463          	bnez	a5,800066b8 <dfs_romfs_open+0xd4>
            return -ENOENT;
80006694:	ffe00793          	li	a5,-2
80006698:	0440006f          	j	800066dc <dfs_romfs_open+0xf8>
    }
    else
    {
        /* entry is a file, but open it as a directory */
        if (file->flags & O_DIRECTORY)
8000669c:	fdc42783          	lw	a5,-36(s0)
800066a0:	0147a703          	lw	a4,20(a5) # 200014 <__STACKSIZE__+0x1fc014>
800066a4:	002007b7          	lui	a5,0x200
800066a8:	00f777b3          	and	a5,a4,a5
800066ac:	00078663          	beqz	a5,800066b8 <dfs_romfs_open+0xd4>
            return -ENOENT;
800066b0:	ffe00793          	li	a5,-2
800066b4:	0280006f          	j	800066dc <dfs_romfs_open+0xf8>
    }

    file->data = dirent;
800066b8:	fdc42783          	lw	a5,-36(s0)
800066bc:	fe442703          	lw	a4,-28(s0)
800066c0:	02e7a023          	sw	a4,32(a5) # 200020 <__STACKSIZE__+0x1fc020>
    file->size = size;
800066c4:	fe042703          	lw	a4,-32(s0)
800066c8:	fdc42783          	lw	a5,-36(s0)
800066cc:	00e7ac23          	sw	a4,24(a5)
    file->pos = 0;
800066d0:	fdc42783          	lw	a5,-36(s0)
800066d4:	0007ae23          	sw	zero,28(a5)

    return RT_EOK;
800066d8:	00000793          	li	a5,0
}
800066dc:	00078513          	mv	a0,a5
800066e0:	02c12083          	lw	ra,44(sp)
800066e4:	02812403          	lw	s0,40(sp)
800066e8:	03010113          	addi	sp,sp,48
800066ec:	00008067          	ret

800066f0 <dfs_romfs_stat>:

int dfs_romfs_stat(struct dfs_filesystem *fs, const char *path, struct stat *st)
{
800066f0:	fd010113          	addi	sp,sp,-48
800066f4:	02112623          	sw	ra,44(sp)
800066f8:	02812423          	sw	s0,40(sp)
800066fc:	03010413          	addi	s0,sp,48
80006700:	fca42e23          	sw	a0,-36(s0)
80006704:	fcb42c23          	sw	a1,-40(s0)
80006708:	fcc42a23          	sw	a2,-44(s0)
    rt_size_t size;
    struct romfs_dirent *dirent;
    struct romfs_dirent *root_dirent;

    root_dirent = (struct romfs_dirent *)fs->data;
8000670c:	fdc42783          	lw	a5,-36(s0)
80006710:	00c7a783          	lw	a5,12(a5)
80006714:	fef42623          	sw	a5,-20(s0)
    dirent = dfs_romfs_lookup(root_dirent, path, &size);
80006718:	fe440793          	addi	a5,s0,-28
8000671c:	00078613          	mv	a2,a5
80006720:	fd842583          	lw	a1,-40(s0)
80006724:	fec42503          	lw	a0,-20(s0)
80006728:	a79ff0ef          	jal	ra,800061a0 <dfs_romfs_lookup>
8000672c:	fea42423          	sw	a0,-24(s0)

    if (dirent == NULL)
80006730:	fe842783          	lw	a5,-24(s0)
80006734:	00079663          	bnez	a5,80006740 <dfs_romfs_stat+0x50>
        return -ENOENT;
80006738:	ffe00793          	li	a5,-2
8000673c:	0900006f          	j	800067cc <dfs_romfs_stat+0xdc>

    st->st_dev = 0;
80006740:	fd442783          	lw	a5,-44(s0)
80006744:	00079023          	sh	zero,0(a5)
    st->st_mode = S_IFREG | S_IRUSR | S_IRGRP | S_IROTH |
80006748:	fd442783          	lw	a5,-44(s0)
8000674c:	00008737          	lui	a4,0x8
80006750:	1b670713          	addi	a4,a4,438 # 81b6 <__STACKSIZE__+0x41b6>
80006754:	00e7a223          	sw	a4,4(a5)
                  S_IWUSR | S_IWGRP | S_IWOTH;

    if (dirent->type == ROMFS_DIRENT_DIR)
80006758:	fe842783          	lw	a5,-24(s0)
8000675c:	0007a703          	lw	a4,0(a5)
80006760:	00100793          	li	a5,1
80006764:	02f71e63          	bne	a4,a5,800067a0 <dfs_romfs_stat+0xb0>
    {
        st->st_mode &= ~S_IFREG;
80006768:	fd442783          	lw	a5,-44(s0)
8000676c:	0047a703          	lw	a4,4(a5)
80006770:	ffff87b7          	lui	a5,0xffff8
80006774:	fff78793          	addi	a5,a5,-1 # ffff7fff <__bss_end+0x7ff71843>
80006778:	00f77733          	and	a4,a4,a5
8000677c:	fd442783          	lw	a5,-44(s0)
80006780:	00e7a223          	sw	a4,4(a5)
        st->st_mode |= S_IFDIR | S_IXUSR | S_IXGRP | S_IXOTH;
80006784:	fd442783          	lw	a5,-44(s0)
80006788:	0047a703          	lw	a4,4(a5)
8000678c:	000047b7          	lui	a5,0x4
80006790:	04978793          	addi	a5,a5,73 # 4049 <__STACKSIZE__+0x49>
80006794:	00f76733          	or	a4,a4,a5
80006798:	fd442783          	lw	a5,-44(s0)
8000679c:	00e7a223          	sw	a4,4(a5)
    }

    st->st_size = dirent->size;
800067a0:	fe842783          	lw	a5,-24(s0)
800067a4:	00c7a783          	lw	a5,12(a5)
800067a8:	00078713          	mv	a4,a5
800067ac:	fd442783          	lw	a5,-44(s0)
800067b0:	00e7a823          	sw	a4,16(a5)
    st->st_mtime = 0;
800067b4:	fd442783          	lw	a5,-44(s0)
800067b8:	00000693          	li	a3,0
800067bc:	00000713          	li	a4,0
800067c0:	02d7a423          	sw	a3,40(a5)
800067c4:	02e7a623          	sw	a4,44(a5)

    return RT_EOK;
800067c8:	00000793          	li	a5,0
}
800067cc:	00078513          	mv	a0,a5
800067d0:	02c12083          	lw	ra,44(sp)
800067d4:	02812403          	lw	s0,40(sp)
800067d8:	03010113          	addi	sp,sp,48
800067dc:	00008067          	ret

800067e0 <dfs_romfs_getdents>:

int dfs_romfs_getdents(struct dfs_fd *file, struct dirent *dirp, uint32_t count)
{
800067e0:	fc010113          	addi	sp,sp,-64
800067e4:	02112e23          	sw	ra,60(sp)
800067e8:	02812c23          	sw	s0,56(sp)
800067ec:	04010413          	addi	s0,sp,64
800067f0:	fca42623          	sw	a0,-52(s0)
800067f4:	fcb42423          	sw	a1,-56(s0)
800067f8:	fcc42223          	sw	a2,-60(s0)
    rt_size_t len;
    const char *name;
    struct dirent *d;
    struct romfs_dirent *dirent, *sub_dirent;

    dirent = (struct romfs_dirent *)file->data;
800067fc:	fcc42783          	lw	a5,-52(s0)
80006800:	0207a783          	lw	a5,32(a5)
80006804:	fef42423          	sw	a5,-24(s0)
    if (check_dirent(dirent) != 0)
80006808:	fe842503          	lw	a0,-24(s0)
8000680c:	93dff0ef          	jal	ra,80006148 <check_dirent>
80006810:	00050793          	mv	a5,a0
80006814:	00078663          	beqz	a5,80006820 <dfs_romfs_getdents+0x40>
        return -EIO;
80006818:	ffb00793          	li	a5,-5
8000681c:	1480006f          	j	80006964 <dfs_romfs_getdents+0x184>
    RT_ASSERT(dirent->type == ROMFS_DIRENT_DIR);

    /* enter directory */
    dirent = (struct romfs_dirent *)dirent->data;
80006820:	fe842783          	lw	a5,-24(s0)
80006824:	0087a783          	lw	a5,8(a5)
80006828:	fef42423          	sw	a5,-24(s0)

    /* make integer count */
    count = (count / sizeof(struct dirent));
8000682c:	fc442703          	lw	a4,-60(s0)
80006830:	10400793          	li	a5,260
80006834:	02f757b3          	divu	a5,a4,a5
80006838:	fcf42223          	sw	a5,-60(s0)
    if (count == 0)
8000683c:	fc442783          	lw	a5,-60(s0)
80006840:	00079663          	bnez	a5,8000684c <dfs_romfs_getdents+0x6c>
        return -EINVAL;
80006844:	fea00793          	li	a5,-22
80006848:	11c0006f          	j	80006964 <dfs_romfs_getdents+0x184>

    index = 0;
8000684c:	fe042623          	sw	zero,-20(s0)
    for (index = 0; index < count && (rt_size_t)file->pos < file->size; index ++)
80006850:	fe042623          	sw	zero,-20(s0)
80006854:	0d80006f          	j	8000692c <dfs_romfs_getdents+0x14c>
    {
        d = dirp + index;
80006858:	fec42703          	lw	a4,-20(s0)
8000685c:	00070793          	mv	a5,a4
80006860:	00679793          	slli	a5,a5,0x6
80006864:	00e787b3          	add	a5,a5,a4
80006868:	00279793          	slli	a5,a5,0x2
8000686c:	00078713          	mv	a4,a5
80006870:	fc842783          	lw	a5,-56(s0)
80006874:	00e787b3          	add	a5,a5,a4
80006878:	fef42223          	sw	a5,-28(s0)

        sub_dirent = &dirent[file->pos];
8000687c:	fcc42783          	lw	a5,-52(s0)
80006880:	01c7a783          	lw	a5,28(a5)
80006884:	00479793          	slli	a5,a5,0x4
80006888:	fe842703          	lw	a4,-24(s0)
8000688c:	00f707b3          	add	a5,a4,a5
80006890:	fef42023          	sw	a5,-32(s0)
        name = sub_dirent->name;
80006894:	fe042783          	lw	a5,-32(s0)
80006898:	0047a783          	lw	a5,4(a5)
8000689c:	fcf42e23          	sw	a5,-36(s0)

        /* fill dirent */
        if (sub_dirent->type == ROMFS_DIRENT_DIR)
800068a0:	fe042783          	lw	a5,-32(s0)
800068a4:	0007a703          	lw	a4,0(a5)
800068a8:	00100793          	li	a5,1
800068ac:	00f71a63          	bne	a4,a5,800068c0 <dfs_romfs_getdents+0xe0>
            d->d_type = DT_DIR;
800068b0:	fe442783          	lw	a5,-28(s0)
800068b4:	00200713          	li	a4,2
800068b8:	00e78023          	sb	a4,0(a5)
800068bc:	0100006f          	j	800068cc <dfs_romfs_getdents+0xec>
        else
            d->d_type = DT_REG;
800068c0:	fe442783          	lw	a5,-28(s0)
800068c4:	00100713          	li	a4,1
800068c8:	00e78023          	sb	a4,0(a5)

        len = rt_strlen(name);
800068cc:	fdc42503          	lw	a0,-36(s0)
800068d0:	1410d0ef          	jal	ra,80014210 <rt_strlen>
800068d4:	fca42c23          	sw	a0,-40(s0)
        RT_ASSERT(len <= RT_UINT8_MAX);
        d->d_namlen = (rt_uint8_t)len;
800068d8:	fd842783          	lw	a5,-40(s0)
800068dc:	0ff7f713          	zext.b	a4,a5
800068e0:	fe442783          	lw	a5,-28(s0)
800068e4:	00e780a3          	sb	a4,1(a5)
        d->d_reclen = (rt_uint16_t)sizeof(struct dirent);
800068e8:	fe442783          	lw	a5,-28(s0)
800068ec:	10400713          	li	a4,260
800068f0:	00e79123          	sh	a4,2(a5)
        rt_strncpy(d->d_name, name, DFS_PATH_MAX);
800068f4:	fe442783          	lw	a5,-28(s0)
800068f8:	00478793          	addi	a5,a5,4
800068fc:	10000613          	li	a2,256
80006900:	fdc42583          	lw	a1,-36(s0)
80006904:	00078513          	mv	a0,a5
80006908:	75c0d0ef          	jal	ra,80014064 <rt_strncpy>

        /* move to next position */
        ++ file->pos;
8000690c:	fcc42783          	lw	a5,-52(s0)
80006910:	01c7a783          	lw	a5,28(a5)
80006914:	00178713          	addi	a4,a5,1
80006918:	fcc42783          	lw	a5,-52(s0)
8000691c:	00e7ae23          	sw	a4,28(a5)
    for (index = 0; index < count && (rt_size_t)file->pos < file->size; index ++)
80006920:	fec42783          	lw	a5,-20(s0)
80006924:	00178793          	addi	a5,a5,1
80006928:	fef42623          	sw	a5,-20(s0)
8000692c:	fec42703          	lw	a4,-20(s0)
80006930:	fc442783          	lw	a5,-60(s0)
80006934:	00f77e63          	bgeu	a4,a5,80006950 <dfs_romfs_getdents+0x170>
80006938:	fcc42783          	lw	a5,-52(s0)
8000693c:	01c7a783          	lw	a5,28(a5)
80006940:	00078713          	mv	a4,a5
80006944:	fcc42783          	lw	a5,-52(s0)
80006948:	0187a783          	lw	a5,24(a5)
8000694c:	f0f766e3          	bltu	a4,a5,80006858 <dfs_romfs_getdents+0x78>
    }

    return index * sizeof(struct dirent);
80006950:	fec42703          	lw	a4,-20(s0)
80006954:	00070793          	mv	a5,a4
80006958:	00679793          	slli	a5,a5,0x6
8000695c:	00e787b3          	add	a5,a5,a4
80006960:	00279793          	slli	a5,a5,0x2
}
80006964:	00078513          	mv	a0,a5
80006968:	03c12083          	lw	ra,60(sp)
8000696c:	03812403          	lw	s0,56(sp)
80006970:	04010113          	addi	sp,sp,64
80006974:	00008067          	ret

80006978 <dfs_romfs_init>:
    dfs_romfs_stat,
    NULL,
};

int dfs_romfs_init(void)
{
80006978:	ff010113          	addi	sp,sp,-16
8000697c:	00112623          	sw	ra,12(sp)
80006980:	00812423          	sw	s0,8(sp)
80006984:	01010413          	addi	s0,sp,16
    /* register rom file system */
    dfs_register(&_romfs);
80006988:	00021517          	auipc	a0,0x21
8000698c:	58c50513          	addi	a0,a0,1420 # 80027f14 <_romfs>
80006990:	74d010ef          	jal	ra,800088dc <dfs_register>
    return 0;
80006994:	00000793          	li	a5,0
}
80006998:	00078513          	mv	a0,a5
8000699c:	00c12083          	lw	ra,12(sp)
800069a0:	00812403          	lw	s0,8(sp)
800069a4:	01010113          	addi	sp,sp,16
800069a8:	00008067          	ret

800069ac <dfs_init>:

/**
 * this function will initialize device file system.
 */
int dfs_init(void)
{
800069ac:	ff010113          	addi	sp,sp,-16
800069b0:	00112623          	sw	ra,12(sp)
800069b4:	00812423          	sw	s0,8(sp)
800069b8:	01010413          	addi	s0,sp,16
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
800069bc:	0007d797          	auipc	a5,0x7d
800069c0:	65478793          	addi	a5,a5,1620 # 80084010 <init_ok.0>
800069c4:	0007a783          	lw	a5,0(a5)
800069c8:	00078c63          	beqz	a5,800069e0 <dfs_init+0x34>
    {
        rt_kprintf("dfs already init.\n");
800069cc:	0001f517          	auipc	a0,0x1f
800069d0:	33450513          	addi	a0,a0,820 # 80025d00 <raise+0x10c>
800069d4:	0550e0ef          	jal	ra,80015228 <rt_kprintf>
        return 0;
800069d8:	00000793          	li	a5,0
800069dc:	0b40006f          	j	80006a90 <dfs_init+0xe4>
    }

    /* clear filesystem operations table */
    rt_memset((void *)filesystem_operation_table, 0, sizeof(filesystem_operation_table));
800069e0:	00800613          	li	a2,8
800069e4:	00000593          	li	a1,0
800069e8:	0007d517          	auipc	a0,0x7d
800069ec:	61850513          	addi	a0,a0,1560 # 80084000 <filesystem_operation_table>
800069f0:	29c0d0ef          	jal	ra,80013c8c <rt_memset>
    /* clear filesystem table */
    rt_memset(filesystem_table, 0, sizeof(filesystem_table));
800069f4:	02000613          	li	a2,32
800069f8:	00000593          	li	a1,0
800069fc:	0007d517          	auipc	a0,0x7d
80006a00:	6d050513          	addi	a0,a0,1744 # 800840cc <filesystem_table>
80006a04:	2880d0ef          	jal	ra,80013c8c <rt_memset>
    /* clean fd table */
    rt_memset(&_fdtab, 0, sizeof(_fdtab));
80006a08:	00800613          	li	a2,8
80006a0c:	00000593          	li	a1,0
80006a10:	0007d517          	auipc	a0,0x7d
80006a14:	5f850513          	addi	a0,a0,1528 # 80084008 <_fdtab>
80006a18:	2740d0ef          	jal	ra,80013c8c <rt_memset>

    /* create device filesystem lock */
    rt_mutex_init(&fslock, "fslock", RT_IPC_FLAG_PRIO);
80006a1c:	00100613          	li	a2,1
80006a20:	0001f597          	auipc	a1,0x1f
80006a24:	2f458593          	addi	a1,a1,756 # 80025d14 <raise+0x120>
80006a28:	0007d517          	auipc	a0,0x7d
80006a2c:	6c450513          	addi	a0,a0,1732 # 800840ec <fslock>
80006a30:	31d0c0ef          	jal	ra,8001354c <rt_mutex_init>

#ifdef DFS_USING_WORKDIR
    /* set current working directory */
    rt_memset(working_directory, 0, sizeof(working_directory));
80006a34:	10000613          	li	a2,256
80006a38:	00000593          	li	a1,0
80006a3c:	00022517          	auipc	a0,0x22
80006a40:	65c50513          	addi	a0,a0,1628 # 80029098 <working_directory>
80006a44:	2480d0ef          	jal	ra,80013c8c <rt_memset>
    working_directory[0] = '/';
80006a48:	00022797          	auipc	a5,0x22
80006a4c:	65078793          	addi	a5,a5,1616 # 80029098 <working_directory>
80006a50:	02f00713          	li	a4,47
80006a54:	00e78023          	sb	a4,0(a5)
#ifdef RT_USING_DFS_DEVFS
    {
        extern int devfs_init(void);

        /* if enable devfs, initialize and mount it as soon as possible */
        devfs_init();
80006a58:	e1cff0ef          	jal	ra,80006074 <devfs_init>

        dfs_mount(NULL, "/dev", "devfs", 0, 0);
80006a5c:	00000713          	li	a4,0
80006a60:	00000693          	li	a3,0
80006a64:	0001f617          	auipc	a2,0x1f
80006a68:	2b860613          	addi	a2,a2,696 # 80025d1c <raise+0x128>
80006a6c:	0001f597          	auipc	a1,0x1f
80006a70:	2b858593          	addi	a1,a1,696 # 80025d24 <raise+0x130>
80006a74:	00000513          	li	a0,0
80006a78:	078020ef          	jal	ra,80008af0 <dfs_mount>
    }
#endif

    init_ok = RT_TRUE;
80006a7c:	0007d797          	auipc	a5,0x7d
80006a80:	59478793          	addi	a5,a5,1428 # 80084010 <init_ok.0>
80006a84:	00100713          	li	a4,1
80006a88:	00e7a023          	sw	a4,0(a5)

    return 0;
80006a8c:	00000793          	li	a5,0
}
80006a90:	00078513          	mv	a0,a5
80006a94:	00c12083          	lw	ra,12(sp)
80006a98:	00812403          	lw	s0,8(sp)
80006a9c:	01010113          	addi	sp,sp,16
80006aa0:	00008067          	ret

80006aa4 <dfs_lock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_lock(void)
{
80006aa4:	fe010113          	addi	sp,sp,-32
80006aa8:	00112e23          	sw	ra,28(sp)
80006aac:	00812c23          	sw	s0,24(sp)
80006ab0:	02010413          	addi	s0,sp,32
    rt_err_t result = -RT_EBUSY;
80006ab4:	ff900793          	li	a5,-7
80006ab8:	fef42623          	sw	a5,-20(s0)

    while (result == -RT_EBUSY)
80006abc:	0180006f          	j	80006ad4 <dfs_lock+0x30>
    {
        result = rt_mutex_take(&fslock, RT_WAITING_FOREVER);
80006ac0:	fff00593          	li	a1,-1
80006ac4:	0007d517          	auipc	a0,0x7d
80006ac8:	62850513          	addi	a0,a0,1576 # 800840ec <fslock>
80006acc:	30d0c0ef          	jal	ra,800135d8 <rt_mutex_take>
80006ad0:	fea42623          	sw	a0,-20(s0)
    while (result == -RT_EBUSY)
80006ad4:	fec42703          	lw	a4,-20(s0)
80006ad8:	ff900793          	li	a5,-7
80006adc:	fef702e3          	beq	a4,a5,80006ac0 <dfs_lock+0x1c>

    if (result != RT_EOK)
    {
        RT_ASSERT(0);
    }
}
80006ae0:	00000013          	nop
80006ae4:	00000013          	nop
80006ae8:	01c12083          	lw	ra,28(sp)
80006aec:	01812403          	lw	s0,24(sp)
80006af0:	02010113          	addi	sp,sp,32
80006af4:	00008067          	ret

80006af8 <dfs_unlock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_unlock(void)
{
80006af8:	ff010113          	addi	sp,sp,-16
80006afc:	00112623          	sw	ra,12(sp)
80006b00:	00812423          	sw	s0,8(sp)
80006b04:	01010413          	addi	s0,sp,16
    rt_mutex_release(&fslock);
80006b08:	0007d517          	auipc	a0,0x7d
80006b0c:	5e450513          	addi	a0,a0,1508 # 800840ec <fslock>
80006b10:	5110c0ef          	jal	ra,80013820 <rt_mutex_release>
}
80006b14:	00000013          	nop
80006b18:	00c12083          	lw	ra,12(sp)
80006b1c:	00812403          	lw	s0,8(sp)
80006b20:	01010113          	addi	sp,sp,16
80006b24:	00008067          	ret

80006b28 <fd_alloc>:

#ifdef DFS_USING_POSIX
static int fd_alloc(struct dfs_fdtable *fdt, int startfd)
{
80006b28:	fd010113          	addi	sp,sp,-48
80006b2c:	02112623          	sw	ra,44(sp)
80006b30:	02812423          	sw	s0,40(sp)
80006b34:	02912223          	sw	s1,36(sp)
80006b38:	03010413          	addi	s0,sp,48
80006b3c:	fca42e23          	sw	a0,-36(s0)
80006b40:	fcb42c23          	sw	a1,-40(s0)
    int idx;

    /* find an empty fd entry */
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
80006b44:	fd842783          	lw	a5,-40(s0)
80006b48:	fef42623          	sw	a5,-20(s0)
80006b4c:	04c0006f          	j	80006b98 <fd_alloc+0x70>
    {
        if (fdt->fds[idx] == RT_NULL)
80006b50:	fdc42783          	lw	a5,-36(s0)
80006b54:	0047a703          	lw	a4,4(a5)
80006b58:	fec42783          	lw	a5,-20(s0)
80006b5c:	00279793          	slli	a5,a5,0x2
80006b60:	00f707b3          	add	a5,a4,a5
80006b64:	0007a783          	lw	a5,0(a5)
80006b68:	04078463          	beqz	a5,80006bb0 <fd_alloc+0x88>
            break;
        if (fdt->fds[idx]->ref_count == 0)
80006b6c:	fdc42783          	lw	a5,-36(s0)
80006b70:	0047a703          	lw	a4,4(a5)
80006b74:	fec42783          	lw	a5,-20(s0)
80006b78:	00279793          	slli	a5,a5,0x2
80006b7c:	00f707b3          	add	a5,a4,a5
80006b80:	0007a783          	lw	a5,0(a5)
80006b84:	0087a783          	lw	a5,8(a5)
80006b88:	02078863          	beqz	a5,80006bb8 <fd_alloc+0x90>
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
80006b8c:	fec42783          	lw	a5,-20(s0)
80006b90:	00178793          	addi	a5,a5,1
80006b94:	fef42623          	sw	a5,-20(s0)
80006b98:	fdc42783          	lw	a5,-36(s0)
80006b9c:	0007a783          	lw	a5,0(a5)
80006ba0:	00078713          	mv	a4,a5
80006ba4:	fec42783          	lw	a5,-20(s0)
80006ba8:	fae7c4e3          	blt	a5,a4,80006b50 <fd_alloc+0x28>
80006bac:	0100006f          	j	80006bbc <fd_alloc+0x94>
            break;
80006bb0:	00000013          	nop
80006bb4:	0080006f          	j	80006bbc <fd_alloc+0x94>
            break;
80006bb8:	00000013          	nop
    }

    /* allocate a larger FD container */
    if (idx == (int)fdt->maxfd && fdt->maxfd < DFS_FD_MAX)
80006bbc:	fdc42783          	lw	a5,-36(s0)
80006bc0:	0007a783          	lw	a5,0(a5)
80006bc4:	00078713          	mv	a4,a5
80006bc8:	fec42783          	lw	a5,-20(s0)
80006bcc:	0ae79a63          	bne	a5,a4,80006c80 <fd_alloc+0x158>
80006bd0:	fdc42783          	lw	a5,-36(s0)
80006bd4:	0007a703          	lw	a4,0(a5)
80006bd8:	01f00793          	li	a5,31
80006bdc:	0ae7e263          	bltu	a5,a4,80006c80 <fd_alloc+0x158>
    {
        int cnt, index;
        struct dfs_fd **fds;

        /* increase the number of FD with 4 step length */
        cnt = fdt->maxfd + 4;
80006be0:	fdc42783          	lw	a5,-36(s0)
80006be4:	0007a783          	lw	a5,0(a5)
80006be8:	00478793          	addi	a5,a5,4
80006bec:	fef42223          	sw	a5,-28(s0)
        cnt = cnt > DFS_FD_MAX ? DFS_FD_MAX : cnt;
80006bf0:	fe442783          	lw	a5,-28(s0)
80006bf4:	02000713          	li	a4,32
80006bf8:	00f75463          	bge	a4,a5,80006c00 <fd_alloc+0xd8>
80006bfc:	02000793          	li	a5,32
80006c00:	fef42223          	sw	a5,-28(s0)

        fds = (struct dfs_fd **)rt_realloc(fdt->fds, cnt * sizeof(struct dfs_fd *));
80006c04:	fdc42783          	lw	a5,-36(s0)
80006c08:	0047a703          	lw	a4,4(a5)
80006c0c:	fe442783          	lw	a5,-28(s0)
80006c10:	00279793          	slli	a5,a5,0x2
80006c14:	00078593          	mv	a1,a5
80006c18:	00070513          	mv	a0,a4
80006c1c:	1310e0ef          	jal	ra,8001554c <rt_realloc>
80006c20:	fea42023          	sw	a0,-32(s0)
        if (fds == NULL) goto __exit; /* return fdt->maxfd */
80006c24:	fe042783          	lw	a5,-32(s0)
80006c28:	0c078e63          	beqz	a5,80006d04 <fd_alloc+0x1dc>

        /* clean the new allocated fds */
        for (index = (int)fdt->maxfd; index < cnt; index ++)
80006c2c:	fdc42783          	lw	a5,-36(s0)
80006c30:	0007a783          	lw	a5,0(a5)
80006c34:	fef42423          	sw	a5,-24(s0)
80006c38:	0240006f          	j	80006c5c <fd_alloc+0x134>
        {
            fds[index] = NULL;
80006c3c:	fe842783          	lw	a5,-24(s0)
80006c40:	00279793          	slli	a5,a5,0x2
80006c44:	fe042703          	lw	a4,-32(s0)
80006c48:	00f707b3          	add	a5,a4,a5
80006c4c:	0007a023          	sw	zero,0(a5)
        for (index = (int)fdt->maxfd; index < cnt; index ++)
80006c50:	fe842783          	lw	a5,-24(s0)
80006c54:	00178793          	addi	a5,a5,1
80006c58:	fef42423          	sw	a5,-24(s0)
80006c5c:	fe842703          	lw	a4,-24(s0)
80006c60:	fe442783          	lw	a5,-28(s0)
80006c64:	fcf74ce3          	blt	a4,a5,80006c3c <fd_alloc+0x114>
        }

        fdt->fds   = fds;
80006c68:	fdc42783          	lw	a5,-36(s0)
80006c6c:	fe042703          	lw	a4,-32(s0)
80006c70:	00e7a223          	sw	a4,4(a5)
        fdt->maxfd = cnt;
80006c74:	fe442703          	lw	a4,-28(s0)
80006c78:	fdc42783          	lw	a5,-36(s0)
80006c7c:	00e7a023          	sw	a4,0(a5)
    }

    /* allocate  'struct dfs_fd' */
    if (idx < (int)fdt->maxfd && fdt->fds[idx] == RT_NULL)
80006c80:	fdc42783          	lw	a5,-36(s0)
80006c84:	0007a783          	lw	a5,0(a5)
80006c88:	00078713          	mv	a4,a5
80006c8c:	fec42783          	lw	a5,-20(s0)
80006c90:	06e7de63          	bge	a5,a4,80006d0c <fd_alloc+0x1e4>
80006c94:	fdc42783          	lw	a5,-36(s0)
80006c98:	0047a703          	lw	a4,4(a5)
80006c9c:	fec42783          	lw	a5,-20(s0)
80006ca0:	00279793          	slli	a5,a5,0x2
80006ca4:	00f707b3          	add	a5,a4,a5
80006ca8:	0007a783          	lw	a5,0(a5)
80006cac:	06079063          	bnez	a5,80006d0c <fd_alloc+0x1e4>
    {
        fdt->fds[idx] = (struct dfs_fd *)rt_calloc(1, sizeof(struct dfs_fd));
80006cb0:	fdc42783          	lw	a5,-36(s0)
80006cb4:	0047a703          	lw	a4,4(a5)
80006cb8:	fec42783          	lw	a5,-20(s0)
80006cbc:	00279793          	slli	a5,a5,0x2
80006cc0:	00f704b3          	add	s1,a4,a5
80006cc4:	02400593          	li	a1,36
80006cc8:	00100513          	li	a0,1
80006ccc:	0e10e0ef          	jal	ra,800155ac <rt_calloc>
80006cd0:	00050793          	mv	a5,a0
80006cd4:	00f4a023          	sw	a5,0(s1)
        if (fdt->fds[idx] == RT_NULL)
80006cd8:	fdc42783          	lw	a5,-36(s0)
80006cdc:	0047a703          	lw	a4,4(a5)
80006ce0:	fec42783          	lw	a5,-20(s0)
80006ce4:	00279793          	slli	a5,a5,0x2
80006ce8:	00f707b3          	add	a5,a4,a5
80006cec:	0007a783          	lw	a5,0(a5)
80006cf0:	00079e63          	bnez	a5,80006d0c <fd_alloc+0x1e4>
            idx = fdt->maxfd;
80006cf4:	fdc42783          	lw	a5,-36(s0)
80006cf8:	0007a783          	lw	a5,0(a5)
80006cfc:	fef42623          	sw	a5,-20(s0)
80006d00:	0100006f          	j	80006d10 <fd_alloc+0x1e8>
        if (fds == NULL) goto __exit; /* return fdt->maxfd */
80006d04:	00000013          	nop
80006d08:	0080006f          	j	80006d10 <fd_alloc+0x1e8>
    }

__exit:
80006d0c:	00000013          	nop
    return idx;
80006d10:	fec42783          	lw	a5,-20(s0)
}
80006d14:	00078513          	mv	a0,a5
80006d18:	02c12083          	lw	ra,44(sp)
80006d1c:	02812403          	lw	s0,40(sp)
80006d20:	02412483          	lw	s1,36(sp)
80006d24:	03010113          	addi	sp,sp,48
80006d28:	00008067          	ret

80006d2c <fd_new>:
 * This function will allocate a file descriptor.
 *
 * @return -1 on failed or the allocated file descriptor.
 */
int fd_new(void)
{
80006d2c:	fe010113          	addi	sp,sp,-32
80006d30:	00112e23          	sw	ra,28(sp)
80006d34:	00812c23          	sw	s0,24(sp)
80006d38:	02010413          	addi	s0,sp,32
    struct dfs_fd *d;
    int idx;
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
80006d3c:	7a8000ef          	jal	ra,800074e4 <dfs_fdtable_get>
80006d40:	fea42423          	sw	a0,-24(s0)
    /* lock filesystem */
    dfs_lock();
80006d44:	d61ff0ef          	jal	ra,80006aa4 <dfs_lock>

    /* find an empty fd entry */
    idx = fd_alloc(fdt, 0);
80006d48:	00000593          	li	a1,0
80006d4c:	fe842503          	lw	a0,-24(s0)
80006d50:	dd9ff0ef          	jal	ra,80006b28 <fd_alloc>
80006d54:	fea42623          	sw	a0,-20(s0)

    /* can't find an empty fd entry */
    if (idx == (int)fdt->maxfd)
80006d58:	fe842783          	lw	a5,-24(s0)
80006d5c:	0007a783          	lw	a5,0(a5)
80006d60:	00078713          	mv	a4,a5
80006d64:	fec42783          	lw	a5,-20(s0)
80006d68:	00e79863          	bne	a5,a4,80006d78 <fd_new+0x4c>
    {
        idx = -(1 + DFS_FD_OFFSET);
80006d6c:	ffc00793          	li	a5,-4
80006d70:	fef42623          	sw	a5,-20(s0)
        LOG_E("DFS fd new is failed! Could not found an empty fd entry.");
        goto __result;
80006d74:	0380006f          	j	80006dac <fd_new+0x80>
    }

    d = fdt->fds[idx];
80006d78:	fe842783          	lw	a5,-24(s0)
80006d7c:	0047a703          	lw	a4,4(a5)
80006d80:	fec42783          	lw	a5,-20(s0)
80006d84:	00279793          	slli	a5,a5,0x2
80006d88:	00f707b3          	add	a5,a4,a5
80006d8c:	0007a783          	lw	a5,0(a5)
80006d90:	fef42223          	sw	a5,-28(s0)
    d->ref_count = 1;
80006d94:	fe442783          	lw	a5,-28(s0)
80006d98:	00100713          	li	a4,1
80006d9c:	00e7a423          	sw	a4,8(a5)
    d->magic = DFS_FD_MAGIC;
80006da0:	fe442783          	lw	a5,-28(s0)
80006da4:	dfd00713          	li	a4,-515
80006da8:	00e79023          	sh	a4,0(a5)

__result:
    dfs_unlock();
80006dac:	d4dff0ef          	jal	ra,80006af8 <dfs_unlock>
    return idx + DFS_FD_OFFSET;
80006db0:	fec42783          	lw	a5,-20(s0)
80006db4:	00378793          	addi	a5,a5,3
}
80006db8:	00078513          	mv	a0,a5
80006dbc:	01c12083          	lw	ra,28(sp)
80006dc0:	01812403          	lw	s0,24(sp)
80006dc4:	02010113          	addi	sp,sp,32
80006dc8:	00008067          	ret

80006dcc <fd_get>:
 *
 * @return NULL on on this file descriptor or the file descriptor structure
 * pointer.
 */
struct dfs_fd *fd_get(int fd)
{
80006dcc:	fd010113          	addi	sp,sp,-48
80006dd0:	02112623          	sw	ra,44(sp)
80006dd4:	02812423          	sw	s0,40(sp)
80006dd8:	03010413          	addi	s0,sp,48
80006ddc:	fca42e23          	sw	a0,-36(s0)
#ifdef RT_USING_POSIX_STDIO
    if ((0 <= fd) && (fd <= 2))
        fd = libc_stdio_get_console();
#endif /* RT_USING_POSIX_STDIO */

    fdt = dfs_fdtable_get();
80006de0:	704000ef          	jal	ra,800074e4 <dfs_fdtable_get>
80006de4:	fea42623          	sw	a0,-20(s0)
    fd = fd - DFS_FD_OFFSET;
80006de8:	fdc42783          	lw	a5,-36(s0)
80006dec:	ffd78793          	addi	a5,a5,-3
80006df0:	fcf42e23          	sw	a5,-36(s0)
    if (fd < 0 || fd >= (int)fdt->maxfd)
80006df4:	fdc42783          	lw	a5,-36(s0)
80006df8:	0007cc63          	bltz	a5,80006e10 <fd_get+0x44>
80006dfc:	fec42783          	lw	a5,-20(s0)
80006e00:	0007a783          	lw	a5,0(a5)
80006e04:	00078713          	mv	a4,a5
80006e08:	fdc42783          	lw	a5,-36(s0)
80006e0c:	00e7c663          	blt	a5,a4,80006e18 <fd_get+0x4c>
        return NULL;
80006e10:	00000793          	li	a5,0
80006e14:	0680006f          	j	80006e7c <fd_get+0xb0>

    dfs_lock();
80006e18:	c8dff0ef          	jal	ra,80006aa4 <dfs_lock>
    d = fdt->fds[fd];
80006e1c:	fec42783          	lw	a5,-20(s0)
80006e20:	0047a703          	lw	a4,4(a5)
80006e24:	fdc42783          	lw	a5,-36(s0)
80006e28:	00279793          	slli	a5,a5,0x2
80006e2c:	00f707b3          	add	a5,a4,a5
80006e30:	0007a783          	lw	a5,0(a5)
80006e34:	fef42423          	sw	a5,-24(s0)

    /* check dfs_fd valid or not */
    if ((d == NULL) || (d->magic != DFS_FD_MAGIC))
80006e38:	fe842783          	lw	a5,-24(s0)
80006e3c:	00078c63          	beqz	a5,80006e54 <fd_get+0x88>
80006e40:	fe842783          	lw	a5,-24(s0)
80006e44:	0007d703          	lhu	a4,0(a5)
80006e48:	000107b7          	lui	a5,0x10
80006e4c:	dfd78793          	addi	a5,a5,-515 # fdfd <__STACKSIZE__+0xbdfd>
80006e50:	00f70863          	beq	a4,a5,80006e60 <fd_get+0x94>
    {
        dfs_unlock();
80006e54:	ca5ff0ef          	jal	ra,80006af8 <dfs_unlock>
        return NULL;
80006e58:	00000793          	li	a5,0
80006e5c:	0200006f          	j	80006e7c <fd_get+0xb0>
    }

    /* increase the reference count */
    d->ref_count ++;
80006e60:	fe842783          	lw	a5,-24(s0)
80006e64:	0087a783          	lw	a5,8(a5)
80006e68:	00178713          	addi	a4,a5,1
80006e6c:	fe842783          	lw	a5,-24(s0)
80006e70:	00e7a423          	sw	a4,8(a5)
    dfs_unlock();
80006e74:	c85ff0ef          	jal	ra,80006af8 <dfs_unlock>

    return d;
80006e78:	fe842783          	lw	a5,-24(s0)
}
80006e7c:	00078513          	mv	a0,a5
80006e80:	02c12083          	lw	ra,44(sp)
80006e84:	02812403          	lw	s0,40(sp)
80006e88:	03010113          	addi	sp,sp,48
80006e8c:	00008067          	ret

80006e90 <fd_put>:
 * @ingroup Fd
 *
 * This function will put the file descriptor.
 */
void fd_put(struct dfs_fd *fd)
{
80006e90:	fd010113          	addi	sp,sp,-48
80006e94:	02112623          	sw	ra,44(sp)
80006e98:	02812423          	sw	s0,40(sp)
80006e9c:	03010413          	addi	s0,sp,48
80006ea0:	fca42e23          	sw	a0,-36(s0)
    RT_ASSERT(fd != NULL);

    dfs_lock();
80006ea4:	c01ff0ef          	jal	ra,80006aa4 <dfs_lock>

    fd->ref_count --;
80006ea8:	fdc42783          	lw	a5,-36(s0)
80006eac:	0087a783          	lw	a5,8(a5)
80006eb0:	fff78713          	addi	a4,a5,-1
80006eb4:	fdc42783          	lw	a5,-36(s0)
80006eb8:	00e7a423          	sw	a4,8(a5)

    /* clear this fd entry */
    if (fd->ref_count == 0)
80006ebc:	fdc42783          	lw	a5,-36(s0)
80006ec0:	0087a783          	lw	a5,8(a5)
80006ec4:	06079c63          	bnez	a5,80006f3c <fd_put+0xac>
    {
        int index;
        struct dfs_fdtable *fdt;

        fdt = dfs_fdtable_get();
80006ec8:	61c000ef          	jal	ra,800074e4 <dfs_fdtable_get>
80006ecc:	fea42423          	sw	a0,-24(s0)
        for (index = 0; index < (int)fdt->maxfd; index ++)
80006ed0:	fe042623          	sw	zero,-20(s0)
80006ed4:	0540006f          	j	80006f28 <fd_put+0x98>
        {
            if (fdt->fds[index] == fd)
80006ed8:	fe842783          	lw	a5,-24(s0)
80006edc:	0047a703          	lw	a4,4(a5)
80006ee0:	fec42783          	lw	a5,-20(s0)
80006ee4:	00279793          	slli	a5,a5,0x2
80006ee8:	00f707b3          	add	a5,a4,a5
80006eec:	0007a783          	lw	a5,0(a5)
80006ef0:	fdc42703          	lw	a4,-36(s0)
80006ef4:	02f71463          	bne	a4,a5,80006f1c <fd_put+0x8c>
            {
                rt_free(fd);
80006ef8:	fdc42503          	lw	a0,-36(s0)
80006efc:	71c0e0ef          	jal	ra,80015618 <rt_free>
                fdt->fds[index] = 0;
80006f00:	fe842783          	lw	a5,-24(s0)
80006f04:	0047a703          	lw	a4,4(a5)
80006f08:	fec42783          	lw	a5,-20(s0)
80006f0c:	00279793          	slli	a5,a5,0x2
80006f10:	00f707b3          	add	a5,a4,a5
80006f14:	0007a023          	sw	zero,0(a5)
                break;
80006f18:	0240006f          	j	80006f3c <fd_put+0xac>
        for (index = 0; index < (int)fdt->maxfd; index ++)
80006f1c:	fec42783          	lw	a5,-20(s0)
80006f20:	00178793          	addi	a5,a5,1
80006f24:	fef42623          	sw	a5,-20(s0)
80006f28:	fe842783          	lw	a5,-24(s0)
80006f2c:	0007a783          	lw	a5,0(a5)
80006f30:	00078713          	mv	a4,a5
80006f34:	fec42783          	lw	a5,-20(s0)
80006f38:	fae7c0e3          	blt	a5,a4,80006ed8 <fd_put+0x48>
            }
        }
    }
    dfs_unlock();
80006f3c:	bbdff0ef          	jal	ra,80006af8 <dfs_unlock>
}
80006f40:	00000013          	nop
80006f44:	02c12083          	lw	ra,44(sp)
80006f48:	02812403          	lw	s0,40(sp)
80006f4c:	03010113          	addi	sp,sp,48
80006f50:	00008067          	ret

80006f54 <fd_is_open>:
 * @param pathname the file path name.
 *
 * @return 0 on file has been open successfully, -1 on open failed.
 */
int fd_is_open(const char *pathname)
{
80006f54:	fc010113          	addi	sp,sp,-64
80006f58:	02112e23          	sw	ra,60(sp)
80006f5c:	02812c23          	sw	s0,56(sp)
80006f60:	04010413          	addi	s0,sp,64
80006f64:	fca42623          	sw	a0,-52(s0)
    unsigned int index;
    struct dfs_filesystem *fs;
    struct dfs_fd *fd;
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
80006f68:	57c000ef          	jal	ra,800074e4 <dfs_fdtable_get>
80006f6c:	fea42223          	sw	a0,-28(s0)
    fullpath = dfs_normalize_path(NULL, pathname);
80006f70:	fcc42583          	lw	a1,-52(s0)
80006f74:	00000513          	li	a0,0
80006f78:	1f0000ef          	jal	ra,80007168 <dfs_normalize_path>
80006f7c:	fea42023          	sw	a0,-32(s0)
    if (fullpath != NULL)
80006f80:	fe042783          	lw	a5,-32(s0)
80006f84:	12078863          	beqz	a5,800070b4 <fd_is_open+0x160>
    {
        char *mountpath;
        fs = dfs_filesystem_lookup(fullpath);
80006f88:	fe042503          	lw	a0,-32(s0)
80006f8c:	245010ef          	jal	ra,800089d0 <dfs_filesystem_lookup>
80006f90:	fca42e23          	sw	a0,-36(s0)
        if (fs == NULL)
80006f94:	fdc42783          	lw	a5,-36(s0)
80006f98:	00079a63          	bnez	a5,80006fac <fd_is_open+0x58>
        {
            /* can't find mounted file system */
            rt_free(fullpath);
80006f9c:	fe042503          	lw	a0,-32(s0)
80006fa0:	6780e0ef          	jal	ra,80015618 <rt_free>

            return -1;
80006fa4:	fff00793          	li	a5,-1
80006fa8:	1100006f          	j	800070b8 <fd_is_open+0x164>
        }

        /* get file path name under mounted file system */
        if (fs->path[0] == '/' && fs->path[1] == '\0')
80006fac:	fdc42783          	lw	a5,-36(s0)
80006fb0:	0047a783          	lw	a5,4(a5)
80006fb4:	0007c703          	lbu	a4,0(a5)
80006fb8:	02f00793          	li	a5,47
80006fbc:	02f71263          	bne	a4,a5,80006fe0 <fd_is_open+0x8c>
80006fc0:	fdc42783          	lw	a5,-36(s0)
80006fc4:	0047a783          	lw	a5,4(a5)
80006fc8:	00178793          	addi	a5,a5,1
80006fcc:	0007c783          	lbu	a5,0(a5)
80006fd0:	00079863          	bnez	a5,80006fe0 <fd_is_open+0x8c>
            mountpath = fullpath;
80006fd4:	fe042783          	lw	a5,-32(s0)
80006fd8:	fef42423          	sw	a5,-24(s0)
80006fdc:	0240006f          	j	80007000 <fd_is_open+0xac>
        else
            mountpath = fullpath + strlen(fs->path);
80006fe0:	fdc42783          	lw	a5,-36(s0)
80006fe4:	0047a783          	lw	a5,4(a5)
80006fe8:	00078513          	mv	a0,a5
80006fec:	218160ef          	jal	ra,8001d204 <strlen>
80006ff0:	00050713          	mv	a4,a0
80006ff4:	fe042783          	lw	a5,-32(s0)
80006ff8:	00e787b3          	add	a5,a5,a4
80006ffc:	fef42423          	sw	a5,-24(s0)

        dfs_lock();
80007000:	aa5ff0ef          	jal	ra,80006aa4 <dfs_lock>

        for (index = 0; index < fdt->maxfd; index++)
80007004:	fe042623          	sw	zero,-20(s0)
80007008:	0900006f          	j	80007098 <fd_is_open+0x144>
        {
            fd = fdt->fds[index];
8000700c:	fe442783          	lw	a5,-28(s0)
80007010:	0047a703          	lw	a4,4(a5)
80007014:	fec42783          	lw	a5,-20(s0)
80007018:	00279793          	slli	a5,a5,0x2
8000701c:	00f707b3          	add	a5,a4,a5
80007020:	0007a783          	lw	a5,0(a5)
80007024:	fcf42c23          	sw	a5,-40(s0)
            if (fd == NULL || fd->fops == NULL || fd->path == NULL) continue;
80007028:	fd842783          	lw	a5,-40(s0)
8000702c:	04078e63          	beqz	a5,80007088 <fd_is_open+0x134>
80007030:	fd842783          	lw	a5,-40(s0)
80007034:	0107a783          	lw	a5,16(a5)
80007038:	04078863          	beqz	a5,80007088 <fd_is_open+0x134>
8000703c:	fd842783          	lw	a5,-40(s0)
80007040:	0047a783          	lw	a5,4(a5)
80007044:	04078263          	beqz	a5,80007088 <fd_is_open+0x134>

            if (fd->fs == fs && strcmp(fd->path, mountpath) == 0)
80007048:	fd842783          	lw	a5,-40(s0)
8000704c:	00c7a783          	lw	a5,12(a5)
80007050:	fdc42703          	lw	a4,-36(s0)
80007054:	02f71c63          	bne	a4,a5,8000708c <fd_is_open+0x138>
80007058:	fd842783          	lw	a5,-40(s0)
8000705c:	0047a783          	lw	a5,4(a5)
80007060:	fe842583          	lw	a1,-24(s0)
80007064:	00078513          	mv	a0,a5
80007068:	a68f90ef          	jal	ra,800002d0 <strcmp>
8000706c:	00050793          	mv	a5,a0
80007070:	00079e63          	bnez	a5,8000708c <fd_is_open+0x138>
            {
                /* found file in file descriptor table */
                rt_free(fullpath);
80007074:	fe042503          	lw	a0,-32(s0)
80007078:	5a00e0ef          	jal	ra,80015618 <rt_free>
                dfs_unlock();
8000707c:	a7dff0ef          	jal	ra,80006af8 <dfs_unlock>

                return 0;
80007080:	00000793          	li	a5,0
80007084:	0340006f          	j	800070b8 <fd_is_open+0x164>
            if (fd == NULL || fd->fops == NULL || fd->path == NULL) continue;
80007088:	00000013          	nop
        for (index = 0; index < fdt->maxfd; index++)
8000708c:	fec42783          	lw	a5,-20(s0)
80007090:	00178793          	addi	a5,a5,1
80007094:	fef42623          	sw	a5,-20(s0)
80007098:	fe442783          	lw	a5,-28(s0)
8000709c:	0007a783          	lw	a5,0(a5)
800070a0:	fec42703          	lw	a4,-20(s0)
800070a4:	f6f764e3          	bltu	a4,a5,8000700c <fd_is_open+0xb8>
            }
        }
        dfs_unlock();
800070a8:	a51ff0ef          	jal	ra,80006af8 <dfs_unlock>

        rt_free(fullpath);
800070ac:	fe042503          	lw	a0,-32(s0)
800070b0:	5680e0ef          	jal	ra,80015618 <rt_free>
    }

    return -1;
800070b4:	fff00793          	li	a5,-1
}
800070b8:	00078513          	mv	a0,a5
800070bc:	03c12083          	lw	ra,60(sp)
800070c0:	03812403          	lw	s0,56(sp)
800070c4:	04010113          	addi	sp,sp,64
800070c8:	00008067          	ret

800070cc <dfs_subdir>:
 * @param filename the filename.
 *
 * @return the subdir pointer in filename
 */
const char *dfs_subdir(const char *directory, const char *filename)
{
800070cc:	fd010113          	addi	sp,sp,-48
800070d0:	02112623          	sw	ra,44(sp)
800070d4:	02812423          	sw	s0,40(sp)
800070d8:	02912223          	sw	s1,36(sp)
800070dc:	03010413          	addi	s0,sp,48
800070e0:	fca42e23          	sw	a0,-36(s0)
800070e4:	fcb42c23          	sw	a1,-40(s0)
    const char *dir;

    if (strlen(directory) == strlen(filename)) /* it's a same path */
800070e8:	fdc42503          	lw	a0,-36(s0)
800070ec:	118160ef          	jal	ra,8001d204 <strlen>
800070f0:	00050493          	mv	s1,a0
800070f4:	fd842503          	lw	a0,-40(s0)
800070f8:	10c160ef          	jal	ra,8001d204 <strlen>
800070fc:	00050793          	mv	a5,a0
80007100:	00f49663          	bne	s1,a5,8000710c <dfs_subdir+0x40>
        return NULL;
80007104:	00000793          	li	a5,0
80007108:	0480006f          	j	80007150 <dfs_subdir+0x84>

    dir = filename + strlen(directory);
8000710c:	fdc42503          	lw	a0,-36(s0)
80007110:	0f4160ef          	jal	ra,8001d204 <strlen>
80007114:	00050713          	mv	a4,a0
80007118:	fd842783          	lw	a5,-40(s0)
8000711c:	00e787b3          	add	a5,a5,a4
80007120:	fef42623          	sw	a5,-20(s0)
    if ((*dir != '/') && (dir != filename))
80007124:	fec42783          	lw	a5,-20(s0)
80007128:	0007c703          	lbu	a4,0(a5)
8000712c:	02f00793          	li	a5,47
80007130:	00f70e63          	beq	a4,a5,8000714c <dfs_subdir+0x80>
80007134:	fec42703          	lw	a4,-20(s0)
80007138:	fd842783          	lw	a5,-40(s0)
8000713c:	00f70863          	beq	a4,a5,8000714c <dfs_subdir+0x80>
    {
        dir --;
80007140:	fec42783          	lw	a5,-20(s0)
80007144:	fff78793          	addi	a5,a5,-1
80007148:	fef42623          	sw	a5,-20(s0)
    }

    return dir;
8000714c:	fec42783          	lw	a5,-20(s0)
}
80007150:	00078513          	mv	a0,a5
80007154:	02c12083          	lw	ra,44(sp)
80007158:	02812403          	lw	s0,40(sp)
8000715c:	02412483          	lw	s1,36(sp)
80007160:	03010113          	addi	sp,sp,48
80007164:	00008067          	ret

80007168 <dfs_normalize_path>:
 * @param filename the file name
 *
 * @return the built full file path (absolute path)
 */
char *dfs_normalize_path(const char *directory, const char *filename)
{
80007168:	fc010113          	addi	sp,sp,-64
8000716c:	02112e23          	sw	ra,60(sp)
80007170:	02812c23          	sw	s0,56(sp)
80007174:	02912a23          	sw	s1,52(sp)
80007178:	04010413          	addi	s0,sp,64
8000717c:	fca42623          	sw	a0,-52(s0)
80007180:	fcb42423          	sw	a1,-56(s0)

    /* check parameters */
    RT_ASSERT(filename != NULL);

#ifdef DFS_USING_WORKDIR
    if (directory == NULL) /* shall use working directory */
80007184:	fcc42783          	lw	a5,-52(s0)
80007188:	00079863          	bnez	a5,80007198 <dfs_normalize_path+0x30>
        directory = &working_directory[0];
8000718c:	00022797          	auipc	a5,0x22
80007190:	f0c78793          	addi	a5,a5,-244 # 80029098 <working_directory>
80007194:	fcf42623          	sw	a5,-52(s0)

        return NULL;
    }
#endif

    if (filename[0] != '/') /* it's a absolute path, use it directly */
80007198:	fc842783          	lw	a5,-56(s0)
8000719c:	0007c703          	lbu	a4,0(a5)
800071a0:	02f00793          	li	a5,47
800071a4:	08f70063          	beq	a4,a5,80007224 <dfs_normalize_path+0xbc>
    {
        fullpath = (char *)rt_malloc(strlen(directory) + strlen(filename) + 2);
800071a8:	fcc42503          	lw	a0,-52(s0)
800071ac:	058160ef          	jal	ra,8001d204 <strlen>
800071b0:	00050493          	mv	s1,a0
800071b4:	fc842503          	lw	a0,-56(s0)
800071b8:	04c160ef          	jal	ra,8001d204 <strlen>
800071bc:	00050793          	mv	a5,a0
800071c0:	00f487b3          	add	a5,s1,a5
800071c4:	00278793          	addi	a5,a5,2
800071c8:	00078513          	mv	a0,a5
800071cc:	3000e0ef          	jal	ra,800154cc <rt_malloc>
800071d0:	fea42623          	sw	a0,-20(s0)

        if (fullpath == NULL)
800071d4:	fec42783          	lw	a5,-20(s0)
800071d8:	00079663          	bnez	a5,800071e4 <dfs_normalize_path+0x7c>
            return NULL;
800071dc:	00000793          	li	a5,0
800071e0:	2ec0006f          	j	800074cc <dfs_normalize_path+0x364>

        /* join path and file name */
        rt_snprintf(fullpath, strlen(directory) + strlen(filename) + 2,
800071e4:	fcc42503          	lw	a0,-52(s0)
800071e8:	01c160ef          	jal	ra,8001d204 <strlen>
800071ec:	00050493          	mv	s1,a0
800071f0:	fc842503          	lw	a0,-56(s0)
800071f4:	010160ef          	jal	ra,8001d204 <strlen>
800071f8:	00050793          	mv	a5,a0
800071fc:	00f487b3          	add	a5,s1,a5
80007200:	00278793          	addi	a5,a5,2
80007204:	fc842703          	lw	a4,-56(s0)
80007208:	fcc42683          	lw	a3,-52(s0)
8000720c:	0001f617          	auipc	a2,0x1f
80007210:	b2060613          	addi	a2,a2,-1248 # 80025d2c <raise+0x138>
80007214:	00078593          	mv	a1,a5
80007218:	fec42503          	lw	a0,-20(s0)
8000721c:	5ed0d0ef          	jal	ra,80015008 <rt_snprintf>
80007220:	0200006f          	j	80007240 <dfs_normalize_path+0xd8>
                    "%s/%s", directory, filename);
    }
    else
    {
        fullpath = rt_strdup(filename); /* copy string */
80007224:	fc842503          	lw	a0,-56(s0)
80007228:	0380d0ef          	jal	ra,80014260 <rt_strdup>
8000722c:	fea42623          	sw	a0,-20(s0)

        if (fullpath == NULL)
80007230:	fec42783          	lw	a5,-20(s0)
80007234:	00079663          	bnez	a5,80007240 <dfs_normalize_path+0xd8>
            return NULL;
80007238:	00000793          	li	a5,0
8000723c:	2900006f          	j	800074cc <dfs_normalize_path+0x364>
    }

    src = fullpath;
80007240:	fec42783          	lw	a5,-20(s0)
80007244:	fef42223          	sw	a5,-28(s0)
    dst = fullpath;
80007248:	fec42783          	lw	a5,-20(s0)
8000724c:	fef42423          	sw	a5,-24(s0)

    dst0 = dst;
80007250:	fe842783          	lw	a5,-24(s0)
80007254:	fcf42e23          	sw	a5,-36(s0)
    while (1)
    {
        char c = *src;
80007258:	fe442783          	lw	a5,-28(s0)
8000725c:	0007c783          	lbu	a5,0(a5)
80007260:	fef401a3          	sb	a5,-29(s0)

        if (c == '.')
80007264:	fe344703          	lbu	a4,-29(s0)
80007268:	02e00793          	li	a5,46
8000726c:	10f71663          	bne	a4,a5,80007378 <dfs_normalize_path+0x210>
        {
            if (!src[1]) src ++; /* '.' and ends */
80007270:	fe442783          	lw	a5,-28(s0)
80007274:	00178793          	addi	a5,a5,1
80007278:	0007c783          	lbu	a5,0(a5)
8000727c:	00079a63          	bnez	a5,80007290 <dfs_normalize_path+0x128>
80007280:	fe442783          	lw	a5,-28(s0)
80007284:	00178793          	addi	a5,a5,1
80007288:	fef42223          	sw	a5,-28(s0)
8000728c:	0ec0006f          	j	80007378 <dfs_normalize_path+0x210>
            else if (src[1] == '/')
80007290:	fe442783          	lw	a5,-28(s0)
80007294:	00178793          	addi	a5,a5,1
80007298:	0007c703          	lbu	a4,0(a5)
8000729c:	02f00793          	li	a5,47
800072a0:	04f71063          	bne	a4,a5,800072e0 <dfs_normalize_path+0x178>
            {
                /* './' case */
                src += 2;
800072a4:	fe442783          	lw	a5,-28(s0)
800072a8:	00278793          	addi	a5,a5,2
800072ac:	fef42223          	sw	a5,-28(s0)

                while ((*src == '/') && (*src != '\0'))
800072b0:	0100006f          	j	800072c0 <dfs_normalize_path+0x158>
                    src ++;
800072b4:	fe442783          	lw	a5,-28(s0)
800072b8:	00178793          	addi	a5,a5,1
800072bc:	fef42223          	sw	a5,-28(s0)
                while ((*src == '/') && (*src != '\0'))
800072c0:	fe442783          	lw	a5,-28(s0)
800072c4:	0007c703          	lbu	a4,0(a5)
800072c8:	02f00793          	li	a5,47
800072cc:	18f71863          	bne	a4,a5,8000745c <dfs_normalize_path+0x2f4>
800072d0:	fe442783          	lw	a5,-28(s0)
800072d4:	0007c783          	lbu	a5,0(a5)
800072d8:	fc079ee3          	bnez	a5,800072b4 <dfs_normalize_path+0x14c>
                continue;
800072dc:	1800006f          	j	8000745c <dfs_normalize_path+0x2f4>
            }
            else if (src[1] == '.')
800072e0:	fe442783          	lw	a5,-28(s0)
800072e4:	00178793          	addi	a5,a5,1
800072e8:	0007c703          	lbu	a4,0(a5)
800072ec:	02e00793          	li	a5,46
800072f0:	08f71463          	bne	a4,a5,80007378 <dfs_normalize_path+0x210>
            {
                if (!src[2])
800072f4:	fe442783          	lw	a5,-28(s0)
800072f8:	00278793          	addi	a5,a5,2
800072fc:	0007c783          	lbu	a5,0(a5)
80007300:	00079a63          	bnez	a5,80007314 <dfs_normalize_path+0x1ac>
                {
                    /* '..' and ends case */
                    src += 2;
80007304:	fe442783          	lw	a5,-28(s0)
80007308:	00278793          	addi	a5,a5,2
8000730c:	fef42223          	sw	a5,-28(s0)
                    goto up_one;
80007310:	0f40006f          	j	80007404 <dfs_normalize_path+0x29c>
                }
                else if (src[2] == '/')
80007314:	fe442783          	lw	a5,-28(s0)
80007318:	00278793          	addi	a5,a5,2
8000731c:	0007c703          	lbu	a4,0(a5)
80007320:	02f00793          	li	a5,47
80007324:	04f71a63          	bne	a4,a5,80007378 <dfs_normalize_path+0x210>
                {
                    /* '../' case */
                    src += 3;
80007328:	fe442783          	lw	a5,-28(s0)
8000732c:	00378793          	addi	a5,a5,3
80007330:	fef42223          	sw	a5,-28(s0)

                    while ((*src == '/') && (*src != '\0'))
80007334:	0100006f          	j	80007344 <dfs_normalize_path+0x1dc>
                        src ++;
80007338:	fe442783          	lw	a5,-28(s0)
8000733c:	00178793          	addi	a5,a5,1
80007340:	fef42223          	sw	a5,-28(s0)
                    while ((*src == '/') && (*src != '\0'))
80007344:	fe442783          	lw	a5,-28(s0)
80007348:	0007c703          	lbu	a4,0(a5)
8000734c:	02f00793          	li	a5,47
80007350:	0af71863          	bne	a4,a5,80007400 <dfs_normalize_path+0x298>
80007354:	fe442783          	lw	a5,-28(s0)
80007358:	0007c783          	lbu	a5,0(a5)
8000735c:	fc079ee3          	bnez	a5,80007338 <dfs_normalize_path+0x1d0>
                    goto up_one;
80007360:	0a00006f          	j	80007400 <dfs_normalize_path+0x298>
            }
        }

        /* copy up the next '/' and erase all '/' */
        while ((c = *src++) != '\0' && c != '/')
            *dst ++ = c;
80007364:	fe842783          	lw	a5,-24(s0)
80007368:	00178713          	addi	a4,a5,1
8000736c:	fee42423          	sw	a4,-24(s0)
80007370:	fe344703          	lbu	a4,-29(s0)
80007374:	00e78023          	sb	a4,0(a5)
        while ((c = *src++) != '\0' && c != '/')
80007378:	fe442783          	lw	a5,-28(s0)
8000737c:	00178713          	addi	a4,a5,1
80007380:	fee42223          	sw	a4,-28(s0)
80007384:	0007c783          	lbu	a5,0(a5)
80007388:	fef401a3          	sb	a5,-29(s0)
8000738c:	fe344783          	lbu	a5,-29(s0)
80007390:	00078863          	beqz	a5,800073a0 <dfs_normalize_path+0x238>
80007394:	fe344703          	lbu	a4,-29(s0)
80007398:	02f00793          	li	a5,47
8000739c:	fcf714e3          	bne	a4,a5,80007364 <dfs_normalize_path+0x1fc>

        if (c == '/')
800073a0:	fe344703          	lbu	a4,-29(s0)
800073a4:	02f00793          	li	a5,47
800073a8:	04f71663          	bne	a4,a5,800073f4 <dfs_normalize_path+0x28c>
        {
            *dst ++ = '/';
800073ac:	fe842783          	lw	a5,-24(s0)
800073b0:	00178713          	addi	a4,a5,1
800073b4:	fee42423          	sw	a4,-24(s0)
800073b8:	02f00713          	li	a4,47
800073bc:	00e78023          	sb	a4,0(a5)
            while (c == '/')
800073c0:	0180006f          	j	800073d8 <dfs_normalize_path+0x270>
                c = *src++;
800073c4:	fe442783          	lw	a5,-28(s0)
800073c8:	00178713          	addi	a4,a5,1
800073cc:	fee42223          	sw	a4,-28(s0)
800073d0:	0007c783          	lbu	a5,0(a5)
800073d4:	fef401a3          	sb	a5,-29(s0)
            while (c == '/')
800073d8:	fe344703          	lbu	a4,-29(s0)
800073dc:	02f00793          	li	a5,47
800073e0:	fef702e3          	beq	a4,a5,800073c4 <dfs_normalize_path+0x25c>

            src --;
800073e4:	fe442783          	lw	a5,-28(s0)
800073e8:	fff78793          	addi	a5,a5,-1
800073ec:	fef42223          	sw	a5,-28(s0)
        }
        else if (!c)
            break;

        continue;
800073f0:	0740006f          	j	80007464 <dfs_normalize_path+0x2fc>
        else if (!c)
800073f4:	fe344783          	lbu	a5,-29(s0)
800073f8:	06079663          	bnez	a5,80007464 <dfs_normalize_path+0x2fc>
            break;
800073fc:	0700006f          	j	8000746c <dfs_normalize_path+0x304>
                    goto up_one;
80007400:	00000013          	nop

up_one:
        dst --;
80007404:	fe842783          	lw	a5,-24(s0)
80007408:	fff78793          	addi	a5,a5,-1
8000740c:	fef42423          	sw	a5,-24(s0)
        if (dst < dst0)
80007410:	fe842703          	lw	a4,-24(s0)
80007414:	fdc42783          	lw	a5,-36(s0)
80007418:	02f77063          	bgeu	a4,a5,80007438 <dfs_normalize_path+0x2d0>
        {
            rt_free(fullpath);
8000741c:	fec42503          	lw	a0,-20(s0)
80007420:	1f80e0ef          	jal	ra,80015618 <rt_free>
            return NULL;
80007424:	00000793          	li	a5,0
80007428:	0a40006f          	j	800074cc <dfs_normalize_path+0x364>
        }
        while (dst0 < dst && dst[-1] != '/')
            dst --;
8000742c:	fe842783          	lw	a5,-24(s0)
80007430:	fff78793          	addi	a5,a5,-1
80007434:	fef42423          	sw	a5,-24(s0)
        while (dst0 < dst && dst[-1] != '/')
80007438:	fdc42703          	lw	a4,-36(s0)
8000743c:	fe842783          	lw	a5,-24(s0)
80007440:	e0f77ce3          	bgeu	a4,a5,80007258 <dfs_normalize_path+0xf0>
80007444:	fe842783          	lw	a5,-24(s0)
80007448:	fff78793          	addi	a5,a5,-1
8000744c:	0007c703          	lbu	a4,0(a5)
80007450:	02f00793          	li	a5,47
80007454:	fcf71ce3          	bne	a4,a5,8000742c <dfs_normalize_path+0x2c4>
80007458:	e01ff06f          	j	80007258 <dfs_normalize_path+0xf0>
                continue;
8000745c:	00000013          	nop
80007460:	df9ff06f          	j	80007258 <dfs_normalize_path+0xf0>
        continue;
80007464:	00000013          	nop
    {
80007468:	df1ff06f          	j	80007258 <dfs_normalize_path+0xf0>
    }

    *dst = '\0';
8000746c:	fe842783          	lw	a5,-24(s0)
80007470:	00078023          	sb	zero,0(a5)

    /* remove '/' in the end of path if exist */
    dst --;
80007474:	fe842783          	lw	a5,-24(s0)
80007478:	fff78793          	addi	a5,a5,-1
8000747c:	fef42423          	sw	a5,-24(s0)
    if ((dst != fullpath) && (*dst == '/'))
80007480:	fe842703          	lw	a4,-24(s0)
80007484:	fec42783          	lw	a5,-20(s0)
80007488:	00f70e63          	beq	a4,a5,800074a4 <dfs_normalize_path+0x33c>
8000748c:	fe842783          	lw	a5,-24(s0)
80007490:	0007c703          	lbu	a4,0(a5)
80007494:	02f00793          	li	a5,47
80007498:	00f71663          	bne	a4,a5,800074a4 <dfs_normalize_path+0x33c>
        *dst = '\0';
8000749c:	fe842783          	lw	a5,-24(s0)
800074a0:	00078023          	sb	zero,0(a5)

    /* final check fullpath is not empty, for the special path of lwext "/.." */
    if ('\0' == fullpath[0])
800074a4:	fec42783          	lw	a5,-20(s0)
800074a8:	0007c783          	lbu	a5,0(a5)
800074ac:	00079e63          	bnez	a5,800074c8 <dfs_normalize_path+0x360>
    {
        fullpath[0] = '/';
800074b0:	fec42783          	lw	a5,-20(s0)
800074b4:	02f00713          	li	a4,47
800074b8:	00e78023          	sb	a4,0(a5)
        fullpath[1] = '\0';
800074bc:	fec42783          	lw	a5,-20(s0)
800074c0:	00178793          	addi	a5,a5,1
800074c4:	00078023          	sb	zero,0(a5)
    }

    return fullpath;
800074c8:	fec42783          	lw	a5,-20(s0)
}
800074cc:	00078513          	mv	a0,a5
800074d0:	03c12083          	lw	ra,60(sp)
800074d4:	03812403          	lw	s0,56(sp)
800074d8:	03412483          	lw	s1,52(sp)
800074dc:	04010113          	addi	sp,sp,64
800074e0:	00008067          	ret

800074e4 <dfs_fdtable_get>:

/**
 * This function will get the file descriptor table of current process.
 */
struct dfs_fdtable *dfs_fdtable_get(void)
{
800074e4:	fe010113          	addi	sp,sp,-32
800074e8:	00812e23          	sw	s0,28(sp)
800074ec:	02010413          	addi	s0,sp,32
    if (lwp)
        fdt = &lwp->fdt;
    else
        fdt = &_fdtab;
#else
    fdt = &_fdtab;
800074f0:	0007d797          	auipc	a5,0x7d
800074f4:	b1878793          	addi	a5,a5,-1256 # 80084008 <_fdtab>
800074f8:	fef42623          	sw	a5,-20(s0)
#endif

    return fdt;
800074fc:	fec42783          	lw	a5,-20(s0)
}
80007500:	00078513          	mv	a0,a5
80007504:	01c12403          	lw	s0,28(sp)
80007508:	02010113          	addi	sp,sp,32
8000750c:	00008067          	ret

80007510 <list_fd>:

#ifdef RT_USING_FINSH
#include <finsh.h>
int list_fd(void)
{
80007510:	fe010113          	addi	sp,sp,-32
80007514:	00112e23          	sw	ra,28(sp)
80007518:	00812c23          	sw	s0,24(sp)
8000751c:	02010413          	addi	s0,sp,32
    int index;
    struct dfs_fdtable *fd_table;

    fd_table = dfs_fdtable_get();
80007520:	fc5ff0ef          	jal	ra,800074e4 <dfs_fdtable_get>
80007524:	fea42423          	sw	a0,-24(s0)
    if (!fd_table) return -1;
80007528:	fe842783          	lw	a5,-24(s0)
8000752c:	00079663          	bnez	a5,80007538 <list_fd+0x28>
80007530:	fff00793          	li	a5,-1
80007534:	22c0006f          	j	80007760 <list_fd+0x250>

    rt_enter_critical();
80007538:	5f10f0ef          	jal	ra,80017328 <rt_enter_critical>

    rt_kprintf("fd type    ref magic  path\n");
8000753c:	0001e517          	auipc	a0,0x1e
80007540:	7f850513          	addi	a0,a0,2040 # 80025d34 <raise+0x140>
80007544:	4e50d0ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("-- ------  --- ----- ------\n");
80007548:	0001f517          	auipc	a0,0x1f
8000754c:	80850513          	addi	a0,a0,-2040 # 80025d50 <raise+0x15c>
80007550:	4d90d0ef          	jal	ra,80015228 <rt_kprintf>
    for (index = 0; index < (int)fd_table->maxfd; index ++)
80007554:	fe042623          	sw	zero,-20(s0)
80007558:	1ec0006f          	j	80007744 <list_fd+0x234>
    {
        struct dfs_fd *fd = fd_table->fds[index];
8000755c:	fe842783          	lw	a5,-24(s0)
80007560:	0047a703          	lw	a4,4(a5)
80007564:	fec42783          	lw	a5,-20(s0)
80007568:	00279793          	slli	a5,a5,0x2
8000756c:	00f707b3          	add	a5,a4,a5
80007570:	0007a783          	lw	a5,0(a5)
80007574:	fef42223          	sw	a5,-28(s0)

        if (fd && fd->fops)
80007578:	fe442783          	lw	a5,-28(s0)
8000757c:	1a078e63          	beqz	a5,80007738 <list_fd+0x228>
80007580:	fe442783          	lw	a5,-28(s0)
80007584:	0107a783          	lw	a5,16(a5)
80007588:	1a078863          	beqz	a5,80007738 <list_fd+0x228>
        {
            rt_kprintf("%2d ", index + DFS_FD_OFFSET);
8000758c:	fec42783          	lw	a5,-20(s0)
80007590:	00378793          	addi	a5,a5,3
80007594:	00078593          	mv	a1,a5
80007598:	0001e517          	auipc	a0,0x1e
8000759c:	7d850513          	addi	a0,a0,2008 # 80025d70 <raise+0x17c>
800075a0:	4890d0ef          	jal	ra,80015228 <rt_kprintf>
            if (fd->type == FT_DIRECTORY)    rt_kprintf("%-7.7s ", "dir");
800075a4:	fe442783          	lw	a5,-28(s0)
800075a8:	0027d703          	lhu	a4,2(a5)
800075ac:	00200793          	li	a5,2
800075b0:	00f71e63          	bne	a4,a5,800075cc <list_fd+0xbc>
800075b4:	0001e597          	auipc	a1,0x1e
800075b8:	7c458593          	addi	a1,a1,1988 # 80025d78 <raise+0x184>
800075bc:	0001e517          	auipc	a0,0x1e
800075c0:	7c050513          	addi	a0,a0,1984 # 80025d7c <raise+0x188>
800075c4:	4650d0ef          	jal	ra,80015228 <rt_kprintf>
800075c8:	0b40006f          	j	8000767c <list_fd+0x16c>
            else if (fd->type == FT_REGULAR) rt_kprintf("%-7.7s ", "file");
800075cc:	fe442783          	lw	a5,-28(s0)
800075d0:	0027d783          	lhu	a5,2(a5)
800075d4:	00079e63          	bnez	a5,800075f0 <list_fd+0xe0>
800075d8:	0001e597          	auipc	a1,0x1e
800075dc:	7ac58593          	addi	a1,a1,1964 # 80025d84 <raise+0x190>
800075e0:	0001e517          	auipc	a0,0x1e
800075e4:	79c50513          	addi	a0,a0,1948 # 80025d7c <raise+0x188>
800075e8:	4410d0ef          	jal	ra,80015228 <rt_kprintf>
800075ec:	0900006f          	j	8000767c <list_fd+0x16c>
            else if (fd->type == FT_SOCKET)  rt_kprintf("%-7.7s ", "socket");
800075f0:	fe442783          	lw	a5,-28(s0)
800075f4:	0027d703          	lhu	a4,2(a5)
800075f8:	00100793          	li	a5,1
800075fc:	00f71e63          	bne	a4,a5,80007618 <list_fd+0x108>
80007600:	0001e597          	auipc	a1,0x1e
80007604:	78c58593          	addi	a1,a1,1932 # 80025d8c <raise+0x198>
80007608:	0001e517          	auipc	a0,0x1e
8000760c:	77450513          	addi	a0,a0,1908 # 80025d7c <raise+0x188>
80007610:	4190d0ef          	jal	ra,80015228 <rt_kprintf>
80007614:	0680006f          	j	8000767c <list_fd+0x16c>
            else if (fd->type == FT_USER)    rt_kprintf("%-7.7s ", "user");
80007618:	fe442783          	lw	a5,-28(s0)
8000761c:	0027d703          	lhu	a4,2(a5)
80007620:	00300793          	li	a5,3
80007624:	00f71e63          	bne	a4,a5,80007640 <list_fd+0x130>
80007628:	0001e597          	auipc	a1,0x1e
8000762c:	76c58593          	addi	a1,a1,1900 # 80025d94 <raise+0x1a0>
80007630:	0001e517          	auipc	a0,0x1e
80007634:	74c50513          	addi	a0,a0,1868 # 80025d7c <raise+0x188>
80007638:	3f10d0ef          	jal	ra,80015228 <rt_kprintf>
8000763c:	0400006f          	j	8000767c <list_fd+0x16c>
            else if (fd->type == FT_DEVICE)   rt_kprintf("%-7.7s ", "device");
80007640:	fe442783          	lw	a5,-28(s0)
80007644:	0027d703          	lhu	a4,2(a5)
80007648:	00400793          	li	a5,4
8000764c:	00f71e63          	bne	a4,a5,80007668 <list_fd+0x158>
80007650:	0001e597          	auipc	a1,0x1e
80007654:	74c58593          	addi	a1,a1,1868 # 80025d9c <raise+0x1a8>
80007658:	0001e517          	auipc	a0,0x1e
8000765c:	72450513          	addi	a0,a0,1828 # 80025d7c <raise+0x188>
80007660:	3c90d0ef          	jal	ra,80015228 <rt_kprintf>
80007664:	0180006f          	j	8000767c <list_fd+0x16c>
            else rt_kprintf("%-8.8s ", "unknown");
80007668:	0001e597          	auipc	a1,0x1e
8000766c:	73c58593          	addi	a1,a1,1852 # 80025da4 <raise+0x1b0>
80007670:	0001e517          	auipc	a0,0x1e
80007674:	73c50513          	addi	a0,a0,1852 # 80025dac <raise+0x1b8>
80007678:	3b10d0ef          	jal	ra,80015228 <rt_kprintf>
            rt_kprintf("%3d ", fd->ref_count);
8000767c:	fe442783          	lw	a5,-28(s0)
80007680:	0087a783          	lw	a5,8(a5)
80007684:	00078593          	mv	a1,a5
80007688:	0001e517          	auipc	a0,0x1e
8000768c:	72c50513          	addi	a0,a0,1836 # 80025db4 <raise+0x1c0>
80007690:	3990d0ef          	jal	ra,80015228 <rt_kprintf>
            rt_kprintf("%04x  ", fd->magic);
80007694:	fe442783          	lw	a5,-28(s0)
80007698:	0007d783          	lhu	a5,0(a5)
8000769c:	00078593          	mv	a1,a5
800076a0:	0001e517          	auipc	a0,0x1e
800076a4:	71c50513          	addi	a0,a0,1820 # 80025dbc <raise+0x1c8>
800076a8:	3810d0ef          	jal	ra,80015228 <rt_kprintf>
            if (fd->fs && fd->fs->path && rt_strlen(fd->fs->path) > 1)
800076ac:	fe442783          	lw	a5,-28(s0)
800076b0:	00c7a783          	lw	a5,12(a5)
800076b4:	04078863          	beqz	a5,80007704 <list_fd+0x1f4>
800076b8:	fe442783          	lw	a5,-28(s0)
800076bc:	00c7a783          	lw	a5,12(a5)
800076c0:	0047a783          	lw	a5,4(a5)
800076c4:	04078063          	beqz	a5,80007704 <list_fd+0x1f4>
800076c8:	fe442783          	lw	a5,-28(s0)
800076cc:	00c7a783          	lw	a5,12(a5)
800076d0:	0047a783          	lw	a5,4(a5)
800076d4:	00078513          	mv	a0,a5
800076d8:	3390c0ef          	jal	ra,80014210 <rt_strlen>
800076dc:	00050713          	mv	a4,a0
800076e0:	00100793          	li	a5,1
800076e4:	02e7f063          	bgeu	a5,a4,80007704 <list_fd+0x1f4>
            {
                rt_kprintf("%s", fd->fs->path);
800076e8:	fe442783          	lw	a5,-28(s0)
800076ec:	00c7a783          	lw	a5,12(a5)
800076f0:	0047a783          	lw	a5,4(a5)
800076f4:	00078593          	mv	a1,a5
800076f8:	0001e517          	auipc	a0,0x1e
800076fc:	6cc50513          	addi	a0,a0,1740 # 80025dc4 <raise+0x1d0>
80007700:	3290d0ef          	jal	ra,80015228 <rt_kprintf>
            }
            if (fd->path)
80007704:	fe442783          	lw	a5,-28(s0)
80007708:	0047a783          	lw	a5,4(a5)
8000770c:	02078063          	beqz	a5,8000772c <list_fd+0x21c>
            {
                rt_kprintf("%s\n", fd->path);
80007710:	fe442783          	lw	a5,-28(s0)
80007714:	0047a783          	lw	a5,4(a5)
80007718:	00078593          	mv	a1,a5
8000771c:	0001e517          	auipc	a0,0x1e
80007720:	6ac50513          	addi	a0,a0,1708 # 80025dc8 <raise+0x1d4>
80007724:	3050d0ef          	jal	ra,80015228 <rt_kprintf>
80007728:	0100006f          	j	80007738 <list_fd+0x228>
            }
            else
            {
                rt_kprintf("\n");
8000772c:	0001e517          	auipc	a0,0x1e
80007730:	6a050513          	addi	a0,a0,1696 # 80025dcc <raise+0x1d8>
80007734:	2f50d0ef          	jal	ra,80015228 <rt_kprintf>
    for (index = 0; index < (int)fd_table->maxfd; index ++)
80007738:	fec42783          	lw	a5,-20(s0)
8000773c:	00178793          	addi	a5,a5,1
80007740:	fef42623          	sw	a5,-20(s0)
80007744:	fe842783          	lw	a5,-24(s0)
80007748:	0007a783          	lw	a5,0(a5)
8000774c:	00078713          	mv	a4,a5
80007750:	fec42783          	lw	a5,-20(s0)
80007754:	e0e7c4e3          	blt	a5,a4,8000755c <list_fd+0x4c>
            }
        }
    }
    rt_exit_critical();
80007758:	4390f0ef          	jal	ra,80017390 <rt_exit_critical>

    return 0;
8000775c:	00000793          	li	a5,0
}
80007760:	00078513          	mv	a0,a5
80007764:	01c12083          	lw	ra,28(sp)
80007768:	01812403          	lw	s0,24(sp)
8000776c:	02010113          	addi	sp,sp,32
80007770:	00008067          	ret

80007774 <dfs_file_open>:
 * @param flags the flags for open operator.
 *
 * @return 0 on successful, -1 on failed.
 */
int dfs_file_open(struct dfs_fd *fd, const char *path, int flags)
{
80007774:	fd010113          	addi	sp,sp,-48
80007778:	02112623          	sw	ra,44(sp)
8000777c:	02812423          	sw	s0,40(sp)
80007780:	03010413          	addi	s0,sp,48
80007784:	fca42e23          	sw	a0,-36(s0)
80007788:	fcb42c23          	sw	a1,-40(s0)
8000778c:	fcc42a23          	sw	a2,-44(s0)
    struct dfs_filesystem *fs;
    char *fullpath;
    int result;

    /* parameter check */
    if (fd == NULL)
80007790:	fdc42783          	lw	a5,-36(s0)
80007794:	00079663          	bnez	a5,800077a0 <dfs_file_open+0x2c>
        return -EINVAL;
80007798:	fea00793          	li	a5,-22
8000779c:	1e80006f          	j	80007984 <dfs_file_open+0x210>

    /* make sure we have an absolute path */
    fullpath = dfs_normalize_path(NULL, path);
800077a0:	fd842583          	lw	a1,-40(s0)
800077a4:	00000513          	li	a0,0
800077a8:	9c1ff0ef          	jal	ra,80007168 <dfs_normalize_path>
800077ac:	fea42623          	sw	a0,-20(s0)
    if (fullpath == NULL)
800077b0:	fec42783          	lw	a5,-20(s0)
800077b4:	00079663          	bnez	a5,800077c0 <dfs_file_open+0x4c>
    {
        return -ENOMEM;
800077b8:	ff400793          	li	a5,-12
800077bc:	1c80006f          	j	80007984 <dfs_file_open+0x210>
    }

    LOG_D("open file:%s", fullpath);

    /* find filesystem */
    fs = dfs_filesystem_lookup(fullpath);
800077c0:	fec42503          	lw	a0,-20(s0)
800077c4:	20c010ef          	jal	ra,800089d0 <dfs_filesystem_lookup>
800077c8:	fea42423          	sw	a0,-24(s0)
    if (fs == NULL)
800077cc:	fe842783          	lw	a5,-24(s0)
800077d0:	00079a63          	bnez	a5,800077e4 <dfs_file_open+0x70>
    {
        rt_free(fullpath); /* release path */
800077d4:	fec42503          	lw	a0,-20(s0)
800077d8:	6410d0ef          	jal	ra,80015618 <rt_free>

        return -ENOENT;
800077dc:	ffe00793          	li	a5,-2
800077e0:	1a40006f          	j	80007984 <dfs_file_open+0x210>
    }

    LOG_D("open in filesystem:%s", fs->ops->name);
    fd->fs    = fs;             /* set file system */
800077e4:	fdc42783          	lw	a5,-36(s0)
800077e8:	fe842703          	lw	a4,-24(s0)
800077ec:	00e7a623          	sw	a4,12(a5)
    fd->fops  = fs->ops->fops;  /* set file ops */
800077f0:	fe842783          	lw	a5,-24(s0)
800077f4:	0087a783          	lw	a5,8(a5)
800077f8:	0087a703          	lw	a4,8(a5)
800077fc:	fdc42783          	lw	a5,-36(s0)
80007800:	00e7a823          	sw	a4,16(a5)

    /* initialize the fd item */
    fd->type  = FT_REGULAR;
80007804:	fdc42783          	lw	a5,-36(s0)
80007808:	00079123          	sh	zero,2(a5)
    fd->flags = flags;
8000780c:	fd442703          	lw	a4,-44(s0)
80007810:	fdc42783          	lw	a5,-36(s0)
80007814:	00e7aa23          	sw	a4,20(a5)
    fd->size  = 0;
80007818:	fdc42783          	lw	a5,-36(s0)
8000781c:	0007ac23          	sw	zero,24(a5)
    fd->pos   = 0;
80007820:	fdc42783          	lw	a5,-36(s0)
80007824:	0007ae23          	sw	zero,28(a5)
    fd->data  = fs;
80007828:	fdc42783          	lw	a5,-36(s0)
8000782c:	fe842703          	lw	a4,-24(s0)
80007830:	02e7a023          	sw	a4,32(a5)

    if (!(fs->ops->flags & DFS_FS_FLAG_FULLPATH))
80007834:	fe842783          	lw	a5,-24(s0)
80007838:	0087a783          	lw	a5,8(a5)
8000783c:	0047a783          	lw	a5,4(a5)
80007840:	0017f793          	andi	a5,a5,1
80007844:	06079a63          	bnez	a5,800078b8 <dfs_file_open+0x144>
    {
        if (dfs_subdir(fs->path, fullpath) == NULL)
80007848:	fe842783          	lw	a5,-24(s0)
8000784c:	0047a783          	lw	a5,4(a5)
80007850:	fec42583          	lw	a1,-20(s0)
80007854:	00078513          	mv	a0,a5
80007858:	875ff0ef          	jal	ra,800070cc <dfs_subdir>
8000785c:	00050793          	mv	a5,a0
80007860:	02079063          	bnez	a5,80007880 <dfs_file_open+0x10c>
            fd->path = rt_strdup("/");
80007864:	0001e517          	auipc	a0,0x1e
80007868:	56c50513          	addi	a0,a0,1388 # 80025dd0 <raise+0x1dc>
8000786c:	1f50c0ef          	jal	ra,80014260 <rt_strdup>
80007870:	00050713          	mv	a4,a0
80007874:	fdc42783          	lw	a5,-36(s0)
80007878:	00e7a223          	sw	a4,4(a5)
8000787c:	0300006f          	j	800078ac <dfs_file_open+0x138>
        else
            fd->path = rt_strdup(dfs_subdir(fs->path, fullpath));
80007880:	fe842783          	lw	a5,-24(s0)
80007884:	0047a783          	lw	a5,4(a5)
80007888:	fec42583          	lw	a1,-20(s0)
8000788c:	00078513          	mv	a0,a5
80007890:	83dff0ef          	jal	ra,800070cc <dfs_subdir>
80007894:	00050793          	mv	a5,a0
80007898:	00078513          	mv	a0,a5
8000789c:	1c50c0ef          	jal	ra,80014260 <rt_strdup>
800078a0:	00050713          	mv	a4,a0
800078a4:	fdc42783          	lw	a5,-36(s0)
800078a8:	00e7a223          	sw	a4,4(a5)
        rt_free(fullpath);
800078ac:	fec42503          	lw	a0,-20(s0)
800078b0:	5690d0ef          	jal	ra,80015618 <rt_free>
800078b4:	0100006f          	j	800078c4 <dfs_file_open+0x150>
        LOG_D("Actual file path: %s", fd->path);
    }
    else
    {
        fd->path = fullpath;
800078b8:	fdc42783          	lw	a5,-36(s0)
800078bc:	fec42703          	lw	a4,-20(s0)
800078c0:	00e7a223          	sw	a4,4(a5)
    }

    /* specific file system open routine */
    if (fd->fops->open == NULL)
800078c4:	fdc42783          	lw	a5,-36(s0)
800078c8:	0107a783          	lw	a5,16(a5)
800078cc:	0007a783          	lw	a5,0(a5)
800078d0:	02079263          	bnez	a5,800078f4 <dfs_file_open+0x180>
    {
        /* clear fd */
        rt_free(fd->path);
800078d4:	fdc42783          	lw	a5,-36(s0)
800078d8:	0047a783          	lw	a5,4(a5)
800078dc:	00078513          	mv	a0,a5
800078e0:	5390d0ef          	jal	ra,80015618 <rt_free>
        fd->path = NULL;
800078e4:	fdc42783          	lw	a5,-36(s0)
800078e8:	0007a223          	sw	zero,4(a5)

        return -ENOSYS;
800078ec:	fa800793          	li	a5,-88
800078f0:	0940006f          	j	80007984 <dfs_file_open+0x210>
    }

    if ((result = fd->fops->open(fd)) < 0)
800078f4:	fdc42783          	lw	a5,-36(s0)
800078f8:	0107a783          	lw	a5,16(a5)
800078fc:	0007a783          	lw	a5,0(a5)
80007900:	fdc42503          	lw	a0,-36(s0)
80007904:	000780e7          	jalr	a5
80007908:	fea42223          	sw	a0,-28(s0)
8000790c:	fe442783          	lw	a5,-28(s0)
80007910:	0207d263          	bgez	a5,80007934 <dfs_file_open+0x1c0>
    {
        /* clear fd */
        rt_free(fd->path);
80007914:	fdc42783          	lw	a5,-36(s0)
80007918:	0047a783          	lw	a5,4(a5)
8000791c:	00078513          	mv	a0,a5
80007920:	4f90d0ef          	jal	ra,80015618 <rt_free>
        fd->path = NULL;
80007924:	fdc42783          	lw	a5,-36(s0)
80007928:	0007a223          	sw	zero,4(a5)

        LOG_D("%s open failed", fullpath);

        return result;
8000792c:	fe442783          	lw	a5,-28(s0)
80007930:	0540006f          	j	80007984 <dfs_file_open+0x210>
    }

    fd->flags |= DFS_F_OPEN;
80007934:	fdc42783          	lw	a5,-36(s0)
80007938:	0147a703          	lw	a4,20(a5)
8000793c:	010007b7          	lui	a5,0x1000
80007940:	00f76733          	or	a4,a4,a5
80007944:	fdc42783          	lw	a5,-36(s0)
80007948:	00e7aa23          	sw	a4,20(a5) # 1000014 <__STACKSIZE__+0xffc014>
    if (flags & O_DIRECTORY)
8000794c:	fd442703          	lw	a4,-44(s0)
80007950:	002007b7          	lui	a5,0x200
80007954:	00f777b3          	and	a5,a4,a5
80007958:	02078463          	beqz	a5,80007980 <dfs_file_open+0x20c>
    {
        fd->type = FT_DIRECTORY;
8000795c:	fdc42783          	lw	a5,-36(s0)
80007960:	00200713          	li	a4,2
80007964:	00e79123          	sh	a4,2(a5) # 200002 <__STACKSIZE__+0x1fc002>
        fd->flags |= DFS_F_DIRECTORY;
80007968:	fdc42783          	lw	a5,-36(s0)
8000796c:	0147a703          	lw	a4,20(a5)
80007970:	020007b7          	lui	a5,0x2000
80007974:	00f76733          	or	a4,a4,a5
80007978:	fdc42783          	lw	a5,-36(s0)
8000797c:	00e7aa23          	sw	a4,20(a5) # 2000014 <__STACKSIZE__+0x1ffc014>
    }

    LOG_D("open successful");
    return 0;
80007980:	00000793          	li	a5,0
}
80007984:	00078513          	mv	a0,a5
80007988:	02c12083          	lw	ra,44(sp)
8000798c:	02812403          	lw	s0,40(sp)
80007990:	03010113          	addi	sp,sp,48
80007994:	00008067          	ret

80007998 <dfs_file_close>:
 * @param fd the file descriptor to be closed.
 *
 * @return 0 on successful, -1 on failed.
 */
int dfs_file_close(struct dfs_fd *fd)
{
80007998:	fd010113          	addi	sp,sp,-48
8000799c:	02112623          	sw	ra,44(sp)
800079a0:	02812423          	sw	s0,40(sp)
800079a4:	03010413          	addi	s0,sp,48
800079a8:	fca42e23          	sw	a0,-36(s0)
    int result = 0;
800079ac:	fe042623          	sw	zero,-20(s0)

    if (fd == NULL)
800079b0:	fdc42783          	lw	a5,-36(s0)
800079b4:	00079663          	bnez	a5,800079c0 <dfs_file_close+0x28>
        return -ENXIO;
800079b8:	ffa00793          	li	a5,-6
800079bc:	0580006f          	j	80007a14 <dfs_file_close+0x7c>

    if (fd->fops->close != NULL)
800079c0:	fdc42783          	lw	a5,-36(s0)
800079c4:	0107a783          	lw	a5,16(a5)
800079c8:	0047a783          	lw	a5,4(a5)
800079cc:	00078e63          	beqz	a5,800079e8 <dfs_file_close+0x50>
        result = fd->fops->close(fd);
800079d0:	fdc42783          	lw	a5,-36(s0)
800079d4:	0107a783          	lw	a5,16(a5)
800079d8:	0047a783          	lw	a5,4(a5)
800079dc:	fdc42503          	lw	a0,-36(s0)
800079e0:	000780e7          	jalr	a5
800079e4:	fea42623          	sw	a0,-20(s0)

    /* close fd error, return */
    if (result < 0)
800079e8:	fec42783          	lw	a5,-20(s0)
800079ec:	0007d663          	bgez	a5,800079f8 <dfs_file_close+0x60>
        return result;
800079f0:	fec42783          	lw	a5,-20(s0)
800079f4:	0200006f          	j	80007a14 <dfs_file_close+0x7c>

    rt_free(fd->path);
800079f8:	fdc42783          	lw	a5,-36(s0)
800079fc:	0047a783          	lw	a5,4(a5)
80007a00:	00078513          	mv	a0,a5
80007a04:	4150d0ef          	jal	ra,80015618 <rt_free>
    fd->path = NULL;
80007a08:	fdc42783          	lw	a5,-36(s0)
80007a0c:	0007a223          	sw	zero,4(a5)

    return result;
80007a10:	fec42783          	lw	a5,-20(s0)
}
80007a14:	00078513          	mv	a0,a5
80007a18:	02c12083          	lw	ra,44(sp)
80007a1c:	02812403          	lw	s0,40(sp)
80007a20:	03010113          	addi	sp,sp,48
80007a24:	00008067          	ret

80007a28 <dfs_file_read>:
 * @param len the length of data buffer to be read.
 *
 * @return the actual read data bytes or 0 on end of file or failed.
 */
int dfs_file_read(struct dfs_fd *fd, void *buf, size_t len)
{
80007a28:	fd010113          	addi	sp,sp,-48
80007a2c:	02112623          	sw	ra,44(sp)
80007a30:	02812423          	sw	s0,40(sp)
80007a34:	03010413          	addi	s0,sp,48
80007a38:	fca42e23          	sw	a0,-36(s0)
80007a3c:	fcb42c23          	sw	a1,-40(s0)
80007a40:	fcc42a23          	sw	a2,-44(s0)
    int result = 0;
80007a44:	fe042623          	sw	zero,-20(s0)

    if (fd == NULL)
80007a48:	fdc42783          	lw	a5,-36(s0)
80007a4c:	00079663          	bnez	a5,80007a58 <dfs_file_read+0x30>
        return -EINVAL;
80007a50:	fea00793          	li	a5,-22
80007a54:	0600006f          	j	80007ab4 <dfs_file_read+0x8c>

    if (fd->fops->read == NULL)
80007a58:	fdc42783          	lw	a5,-36(s0)
80007a5c:	0107a783          	lw	a5,16(a5)
80007a60:	00c7a783          	lw	a5,12(a5)
80007a64:	00079663          	bnez	a5,80007a70 <dfs_file_read+0x48>
        return -ENOSYS;
80007a68:	fa800793          	li	a5,-88
80007a6c:	0480006f          	j	80007ab4 <dfs_file_read+0x8c>

    if ((result = fd->fops->read(fd, buf, len)) < 0)
80007a70:	fdc42783          	lw	a5,-36(s0)
80007a74:	0107a783          	lw	a5,16(a5)
80007a78:	00c7a783          	lw	a5,12(a5)
80007a7c:	fd442603          	lw	a2,-44(s0)
80007a80:	fd842583          	lw	a1,-40(s0)
80007a84:	fdc42503          	lw	a0,-36(s0)
80007a88:	000780e7          	jalr	a5
80007a8c:	fea42623          	sw	a0,-20(s0)
80007a90:	fec42783          	lw	a5,-20(s0)
80007a94:	0007de63          	bgez	a5,80007ab0 <dfs_file_read+0x88>
        fd->flags |= DFS_F_EOF;
80007a98:	fdc42783          	lw	a5,-36(s0)
80007a9c:	0147a703          	lw	a4,20(a5)
80007aa0:	040007b7          	lui	a5,0x4000
80007aa4:	00f76733          	or	a4,a4,a5
80007aa8:	fdc42783          	lw	a5,-36(s0)
80007aac:	00e7aa23          	sw	a4,20(a5) # 4000014 <__STACKSIZE__+0x3ffc014>

    return result;
80007ab0:	fec42783          	lw	a5,-20(s0)
}
80007ab4:	00078513          	mv	a0,a5
80007ab8:	02c12083          	lw	ra,44(sp)
80007abc:	02812403          	lw	s0,40(sp)
80007ac0:	03010113          	addi	sp,sp,48
80007ac4:	00008067          	ret

80007ac8 <dfs_file_getdents>:
 * @param nbytes the available room in the buffer.
 *
 * @return the read dirent, others on failed.
 */
int dfs_file_getdents(struct dfs_fd *fd, struct dirent *dirp, size_t nbytes)
{
80007ac8:	fe010113          	addi	sp,sp,-32
80007acc:	00112e23          	sw	ra,28(sp)
80007ad0:	00812c23          	sw	s0,24(sp)
80007ad4:	02010413          	addi	s0,sp,32
80007ad8:	fea42623          	sw	a0,-20(s0)
80007adc:	feb42423          	sw	a1,-24(s0)
80007ae0:	fec42223          	sw	a2,-28(s0)
    /* parameter check */
    if (fd == NULL || fd->type != FT_DIRECTORY)
80007ae4:	fec42783          	lw	a5,-20(s0)
80007ae8:	00078a63          	beqz	a5,80007afc <dfs_file_getdents+0x34>
80007aec:	fec42783          	lw	a5,-20(s0)
80007af0:	0027d703          	lhu	a4,2(a5)
80007af4:	00200793          	li	a5,2
80007af8:	00f70663          	beq	a4,a5,80007b04 <dfs_file_getdents+0x3c>
        return -EINVAL;
80007afc:	fea00793          	li	a5,-22
80007b00:	03c0006f          	j	80007b3c <dfs_file_getdents+0x74>

    if (fd->fops->getdents != NULL)
80007b04:	fec42783          	lw	a5,-20(s0)
80007b08:	0107a783          	lw	a5,16(a5)
80007b0c:	01c7a783          	lw	a5,28(a5)
80007b10:	02078463          	beqz	a5,80007b38 <dfs_file_getdents+0x70>
        return fd->fops->getdents(fd, dirp, nbytes);
80007b14:	fec42783          	lw	a5,-20(s0)
80007b18:	0107a783          	lw	a5,16(a5)
80007b1c:	01c7a783          	lw	a5,28(a5)
80007b20:	fe442603          	lw	a2,-28(s0)
80007b24:	fe842583          	lw	a1,-24(s0)
80007b28:	fec42503          	lw	a0,-20(s0)
80007b2c:	000780e7          	jalr	a5
80007b30:	00050793          	mv	a5,a0
80007b34:	0080006f          	j	80007b3c <dfs_file_getdents+0x74>

    return -ENOSYS;
80007b38:	fa800793          	li	a5,-88
}
80007b3c:	00078513          	mv	a0,a5
80007b40:	01c12083          	lw	ra,28(sp)
80007b44:	01812403          	lw	s0,24(sp)
80007b48:	02010113          	addi	sp,sp,32
80007b4c:	00008067          	ret

80007b50 <dfs_file_unlink>:
 * @param path the specified path file to be unlinked.
 *
 * @return 0 on successful, -1 on failed.
 */
int dfs_file_unlink(const char *path)
{
80007b50:	fd010113          	addi	sp,sp,-48
80007b54:	02112623          	sw	ra,44(sp)
80007b58:	02812423          	sw	s0,40(sp)
80007b5c:	02912223          	sw	s1,36(sp)
80007b60:	03010413          	addi	s0,sp,48
80007b64:	fca42e23          	sw	a0,-36(s0)
    int result;
    char *fullpath;
    struct dfs_filesystem *fs;

    /* Make sure we have an absolute path */
    fullpath = dfs_normalize_path(NULL, path);
80007b68:	fdc42583          	lw	a1,-36(s0)
80007b6c:	00000513          	li	a0,0
80007b70:	df8ff0ef          	jal	ra,80007168 <dfs_normalize_path>
80007b74:	fea42423          	sw	a0,-24(s0)
    if (fullpath == NULL)
80007b78:	fe842783          	lw	a5,-24(s0)
80007b7c:	00079663          	bnez	a5,80007b88 <dfs_file_unlink+0x38>
    {
        return -EINVAL;
80007b80:	fea00793          	li	a5,-22
80007b84:	1100006f          	j	80007c94 <dfs_file_unlink+0x144>
    }

    /* get filesystem */
    if ((fs = dfs_filesystem_lookup(fullpath)) == NULL)
80007b88:	fe842503          	lw	a0,-24(s0)
80007b8c:	645000ef          	jal	ra,800089d0 <dfs_filesystem_lookup>
80007b90:	fea42223          	sw	a0,-28(s0)
80007b94:	fe442783          	lw	a5,-28(s0)
80007b98:	00079863          	bnez	a5,80007ba8 <dfs_file_unlink+0x58>
    {
        result = -ENOENT;
80007b9c:	ffe00793          	li	a5,-2
80007ba0:	fef42623          	sw	a5,-20(s0)
        goto __exit;
80007ba4:	0e40006f          	j	80007c88 <dfs_file_unlink+0x138>
    }

    /* Check whether file is already open */
    if (fd_is_open(fullpath) == 0)
80007ba8:	fe842503          	lw	a0,-24(s0)
80007bac:	ba8ff0ef          	jal	ra,80006f54 <fd_is_open>
80007bb0:	00050793          	mv	a5,a0
80007bb4:	00079863          	bnez	a5,80007bc4 <dfs_file_unlink+0x74>
    {
        result = -EBUSY;
80007bb8:	ff000793          	li	a5,-16
80007bbc:	fef42623          	sw	a5,-20(s0)
        goto __exit;
80007bc0:	0c80006f          	j	80007c88 <dfs_file_unlink+0x138>
    }

    if (fs->ops->unlink != NULL)
80007bc4:	fe442783          	lw	a5,-28(s0)
80007bc8:	0087a783          	lw	a5,8(a5)
80007bcc:	01c7a783          	lw	a5,28(a5)
80007bd0:	0a078863          	beqz	a5,80007c80 <dfs_file_unlink+0x130>
    {
        if (!(fs->ops->flags & DFS_FS_FLAG_FULLPATH))
80007bd4:	fe442783          	lw	a5,-28(s0)
80007bd8:	0087a783          	lw	a5,8(a5)
80007bdc:	0047a783          	lw	a5,4(a5)
80007be0:	0017f793          	andi	a5,a5,1
80007be4:	06079e63          	bnez	a5,80007c60 <dfs_file_unlink+0x110>
        {
            if (dfs_subdir(fs->path, fullpath) == NULL)
80007be8:	fe442783          	lw	a5,-28(s0)
80007bec:	0047a783          	lw	a5,4(a5)
80007bf0:	fe842583          	lw	a1,-24(s0)
80007bf4:	00078513          	mv	a0,a5
80007bf8:	cd4ff0ef          	jal	ra,800070cc <dfs_subdir>
80007bfc:	00050793          	mv	a5,a0
80007c00:	02079463          	bnez	a5,80007c28 <dfs_file_unlink+0xd8>
                result = fs->ops->unlink(fs, "/");
80007c04:	fe442783          	lw	a5,-28(s0)
80007c08:	0087a783          	lw	a5,8(a5)
80007c0c:	01c7a783          	lw	a5,28(a5)
80007c10:	0001e597          	auipc	a1,0x1e
80007c14:	1c058593          	addi	a1,a1,448 # 80025dd0 <raise+0x1dc>
80007c18:	fe442503          	lw	a0,-28(s0)
80007c1c:	000780e7          	jalr	a5
80007c20:	fea42623          	sw	a0,-20(s0)
80007c24:	0640006f          	j	80007c88 <dfs_file_unlink+0x138>
            else
                result = fs->ops->unlink(fs, dfs_subdir(fs->path, fullpath));
80007c28:	fe442783          	lw	a5,-28(s0)
80007c2c:	0087a783          	lw	a5,8(a5)
80007c30:	01c7a483          	lw	s1,28(a5)
80007c34:	fe442783          	lw	a5,-28(s0)
80007c38:	0047a783          	lw	a5,4(a5)
80007c3c:	fe842583          	lw	a1,-24(s0)
80007c40:	00078513          	mv	a0,a5
80007c44:	c88ff0ef          	jal	ra,800070cc <dfs_subdir>
80007c48:	00050793          	mv	a5,a0
80007c4c:	00078593          	mv	a1,a5
80007c50:	fe442503          	lw	a0,-28(s0)
80007c54:	000480e7          	jalr	s1
80007c58:	fea42623          	sw	a0,-20(s0)
80007c5c:	02c0006f          	j	80007c88 <dfs_file_unlink+0x138>
        }
        else
            result = fs->ops->unlink(fs, fullpath);
80007c60:	fe442783          	lw	a5,-28(s0)
80007c64:	0087a783          	lw	a5,8(a5)
80007c68:	01c7a783          	lw	a5,28(a5)
80007c6c:	fe842583          	lw	a1,-24(s0)
80007c70:	fe442503          	lw	a0,-28(s0)
80007c74:	000780e7          	jalr	a5
80007c78:	fea42623          	sw	a0,-20(s0)
80007c7c:	00c0006f          	j	80007c88 <dfs_file_unlink+0x138>
    }
    else result = -ENOSYS;
80007c80:	fa800793          	li	a5,-88
80007c84:	fef42623          	sw	a5,-20(s0)

__exit:
    rt_free(fullpath);
80007c88:	fe842503          	lw	a0,-24(s0)
80007c8c:	18d0d0ef          	jal	ra,80015618 <rt_free>
    return result;
80007c90:	fec42783          	lw	a5,-20(s0)
}
80007c94:	00078513          	mv	a0,a5
80007c98:	02c12083          	lw	ra,44(sp)
80007c9c:	02812403          	lw	s0,40(sp)
80007ca0:	02412483          	lw	s1,36(sp)
80007ca4:	03010113          	addi	sp,sp,48
80007ca8:	00008067          	ret

80007cac <dfs_file_write>:
 * @param len the data buffer length
 *
 * @return the actual written data length.
 */
int dfs_file_write(struct dfs_fd *fd, const void *buf, size_t len)
{
80007cac:	fe010113          	addi	sp,sp,-32
80007cb0:	00112e23          	sw	ra,28(sp)
80007cb4:	00812c23          	sw	s0,24(sp)
80007cb8:	02010413          	addi	s0,sp,32
80007cbc:	fea42623          	sw	a0,-20(s0)
80007cc0:	feb42423          	sw	a1,-24(s0)
80007cc4:	fec42223          	sw	a2,-28(s0)
    if (fd == NULL)
80007cc8:	fec42783          	lw	a5,-20(s0)
80007ccc:	00079663          	bnez	a5,80007cd8 <dfs_file_write+0x2c>
        return -EINVAL;
80007cd0:	fea00793          	li	a5,-22
80007cd4:	03c0006f          	j	80007d10 <dfs_file_write+0x64>

    if (fd->fops->write == NULL)
80007cd8:	fec42783          	lw	a5,-20(s0)
80007cdc:	0107a783          	lw	a5,16(a5)
80007ce0:	0107a783          	lw	a5,16(a5)
80007ce4:	00079663          	bnez	a5,80007cf0 <dfs_file_write+0x44>
        return -ENOSYS;
80007ce8:	fa800793          	li	a5,-88
80007cec:	0240006f          	j	80007d10 <dfs_file_write+0x64>

    return fd->fops->write(fd, buf, len);
80007cf0:	fec42783          	lw	a5,-20(s0)
80007cf4:	0107a783          	lw	a5,16(a5)
80007cf8:	0107a783          	lw	a5,16(a5)
80007cfc:	fe442603          	lw	a2,-28(s0)
80007d00:	fe842583          	lw	a1,-24(s0)
80007d04:	fec42503          	lw	a0,-20(s0)
80007d08:	000780e7          	jalr	a5
80007d0c:	00050793          	mv	a5,a0
}
80007d10:	00078513          	mv	a0,a5
80007d14:	01c12083          	lw	ra,28(sp)
80007d18:	01812403          	lw	s0,24(sp)
80007d1c:	02010113          	addi	sp,sp,32
80007d20:	00008067          	ret

80007d24 <dfs_file_lseek>:
 * @param offset the offset to be sought.
 *
 * @return the current position after seek.
 */
int dfs_file_lseek(struct dfs_fd *fd, off_t offset)
{
80007d24:	fd010113          	addi	sp,sp,-48
80007d28:	02112623          	sw	ra,44(sp)
80007d2c:	02812423          	sw	s0,40(sp)
80007d30:	03010413          	addi	s0,sp,48
80007d34:	fca42e23          	sw	a0,-36(s0)
80007d38:	fcb42c23          	sw	a1,-40(s0)
    int result;

    if (fd == NULL)
80007d3c:	fdc42783          	lw	a5,-36(s0)
80007d40:	00079663          	bnez	a5,80007d4c <dfs_file_lseek+0x28>
        return -EINVAL;
80007d44:	fea00793          	li	a5,-22
80007d48:	0500006f          	j	80007d98 <dfs_file_lseek+0x74>

    if (fd->fops->lseek == NULL)
80007d4c:	fdc42783          	lw	a5,-36(s0)
80007d50:	0107a783          	lw	a5,16(a5)
80007d54:	0187a783          	lw	a5,24(a5)
80007d58:	00079663          	bnez	a5,80007d64 <dfs_file_lseek+0x40>
        return -ENOSYS;
80007d5c:	fa800793          	li	a5,-88
80007d60:	0380006f          	j	80007d98 <dfs_file_lseek+0x74>

    result = fd->fops->lseek(fd, offset);
80007d64:	fdc42783          	lw	a5,-36(s0)
80007d68:	0107a783          	lw	a5,16(a5)
80007d6c:	0187a783          	lw	a5,24(a5)
80007d70:	fd842583          	lw	a1,-40(s0)
80007d74:	fdc42503          	lw	a0,-36(s0)
80007d78:	000780e7          	jalr	a5
80007d7c:	fea42623          	sw	a0,-20(s0)

    /* update current position */
    if (result >= 0)
80007d80:	fec42783          	lw	a5,-20(s0)
80007d84:	0007c863          	bltz	a5,80007d94 <dfs_file_lseek+0x70>
        fd->pos = result;
80007d88:	fdc42783          	lw	a5,-36(s0)
80007d8c:	fec42703          	lw	a4,-20(s0)
80007d90:	00e7ae23          	sw	a4,28(a5)

    return result;
80007d94:	fec42783          	lw	a5,-20(s0)
}
80007d98:	00078513          	mv	a0,a5
80007d9c:	02c12083          	lw	ra,44(sp)
80007da0:	02812403          	lw	s0,40(sp)
80007da4:	03010113          	addi	sp,sp,48
80007da8:	00008067          	ret

80007dac <dfs_file_stat>:
 * @param buf the data buffer to save stat description.
 *
 * @return 0 on successful, -1 on failed.
 */
int dfs_file_stat(const char *path, struct stat *buf)
{
80007dac:	fd010113          	addi	sp,sp,-48
80007db0:	02112623          	sw	ra,44(sp)
80007db4:	02812423          	sw	s0,40(sp)
80007db8:	02912223          	sw	s1,36(sp)
80007dbc:	03010413          	addi	s0,sp,48
80007dc0:	fca42e23          	sw	a0,-36(s0)
80007dc4:	fcb42c23          	sw	a1,-40(s0)
    int result;
    char *fullpath;
    struct dfs_filesystem *fs;

    fullpath = dfs_normalize_path(NULL, path);
80007dc8:	fdc42583          	lw	a1,-36(s0)
80007dcc:	00000513          	li	a0,0
80007dd0:	b98ff0ef          	jal	ra,80007168 <dfs_normalize_path>
80007dd4:	fea42423          	sw	a0,-24(s0)
    if (fullpath == NULL)
80007dd8:	fe842783          	lw	a5,-24(s0)
80007ddc:	00079663          	bnez	a5,80007de8 <dfs_file_stat+0x3c>
    {
        return -1;
80007de0:	fff00793          	li	a5,-1
80007de4:	15c0006f          	j	80007f40 <dfs_file_stat+0x194>
    }

    if ((fs = dfs_filesystem_lookup(fullpath)) == NULL)
80007de8:	fe842503          	lw	a0,-24(s0)
80007dec:	3e5000ef          	jal	ra,800089d0 <dfs_filesystem_lookup>
80007df0:	fea42223          	sw	a0,-28(s0)
80007df4:	fe442783          	lw	a5,-28(s0)
80007df8:	00079a63          	bnez	a5,80007e0c <dfs_file_stat+0x60>
    {
        LOG_E("can't find mounted filesystem on this path:%s", fullpath);
        rt_free(fullpath);
80007dfc:	fe842503          	lw	a0,-24(s0)
80007e00:	0190d0ef          	jal	ra,80015618 <rt_free>

        return -ENOENT;
80007e04:	ffe00793          	li	a5,-2
80007e08:	1380006f          	j	80007f40 <dfs_file_stat+0x194>
    }

    if ((fullpath[0] == '/' && fullpath[1] == '\0') ||
80007e0c:	fe842783          	lw	a5,-24(s0)
80007e10:	0007c703          	lbu	a4,0(a5)
80007e14:	02f00793          	li	a5,47
80007e18:	00f71a63          	bne	a4,a5,80007e2c <dfs_file_stat+0x80>
80007e1c:	fe842783          	lw	a5,-24(s0)
80007e20:	00178793          	addi	a5,a5,1
80007e24:	0007c783          	lbu	a5,0(a5)
80007e28:	02078063          	beqz	a5,80007e48 <dfs_file_stat+0x9c>
        (dfs_subdir(fs->path, fullpath) == NULL))
80007e2c:	fe442783          	lw	a5,-28(s0)
80007e30:	0047a783          	lw	a5,4(a5)
80007e34:	fe842583          	lw	a1,-24(s0)
80007e38:	00078513          	mv	a0,a5
80007e3c:	a90ff0ef          	jal	ra,800070cc <dfs_subdir>
80007e40:	00050793          	mv	a5,a0
    if ((fullpath[0] == '/' && fullpath[1] == '\0') ||
80007e44:	06079063          	bnez	a5,80007ea4 <dfs_file_stat+0xf8>
    {
        /* it's the root directory */
        buf->st_dev   = 0;
80007e48:	fd842783          	lw	a5,-40(s0)
80007e4c:	00079023          	sh	zero,0(a5)

        buf->st_mode  = S_IRUSR | S_IRGRP | S_IROTH |
80007e50:	fd842783          	lw	a5,-40(s0)
80007e54:	1b600713          	li	a4,438
80007e58:	00e7a223          	sw	a4,4(a5)
                        S_IWUSR | S_IWGRP | S_IWOTH;
        buf->st_mode |= S_IFDIR | S_IXUSR | S_IXGRP | S_IXOTH;
80007e5c:	fd842783          	lw	a5,-40(s0)
80007e60:	0047a703          	lw	a4,4(a5)
80007e64:	000047b7          	lui	a5,0x4
80007e68:	04978793          	addi	a5,a5,73 # 4049 <__STACKSIZE__+0x49>
80007e6c:	00f76733          	or	a4,a4,a5
80007e70:	fd842783          	lw	a5,-40(s0)
80007e74:	00e7a223          	sw	a4,4(a5)

        buf->st_size    = 0;
80007e78:	fd842783          	lw	a5,-40(s0)
80007e7c:	0007a823          	sw	zero,16(a5)
        buf->st_mtime   = 0;
80007e80:	fd842783          	lw	a5,-40(s0)
80007e84:	00000693          	li	a3,0
80007e88:	00000713          	li	a4,0
80007e8c:	02d7a423          	sw	a3,40(a5)
80007e90:	02e7a623          	sw	a4,44(a5)

        /* release full path */
        rt_free(fullpath);
80007e94:	fe842503          	lw	a0,-24(s0)
80007e98:	7800d0ef          	jal	ra,80015618 <rt_free>

        return RT_EOK;
80007e9c:	00000793          	li	a5,0
80007ea0:	0a00006f          	j	80007f40 <dfs_file_stat+0x194>
    }
    else
    {
        if (fs->ops->stat == NULL)
80007ea4:	fe442783          	lw	a5,-28(s0)
80007ea8:	0087a783          	lw	a5,8(a5)
80007eac:	0207a783          	lw	a5,32(a5)
80007eb0:	00079a63          	bnez	a5,80007ec4 <dfs_file_stat+0x118>
        {
            rt_free(fullpath);
80007eb4:	fe842503          	lw	a0,-24(s0)
80007eb8:	7600d0ef          	jal	ra,80015618 <rt_free>
            LOG_E("the filesystem didn't implement this function");

            return -ENOSYS;
80007ebc:	fa800793          	li	a5,-88
80007ec0:	0800006f          	j	80007f40 <dfs_file_stat+0x194>
        }

        /* get the real file path and get file stat */
        if (fs->ops->flags & DFS_FS_FLAG_FULLPATH)
80007ec4:	fe442783          	lw	a5,-28(s0)
80007ec8:	0087a783          	lw	a5,8(a5)
80007ecc:	0047a783          	lw	a5,4(a5)
80007ed0:	0017f793          	andi	a5,a5,1
80007ed4:	02078463          	beqz	a5,80007efc <dfs_file_stat+0x150>
            result = fs->ops->stat(fs, fullpath, buf);
80007ed8:	fe442783          	lw	a5,-28(s0)
80007edc:	0087a783          	lw	a5,8(a5)
80007ee0:	0207a783          	lw	a5,32(a5)
80007ee4:	fd842603          	lw	a2,-40(s0)
80007ee8:	fe842583          	lw	a1,-24(s0)
80007eec:	fe442503          	lw	a0,-28(s0)
80007ef0:	000780e7          	jalr	a5
80007ef4:	fea42623          	sw	a0,-20(s0)
80007ef8:	03c0006f          	j	80007f34 <dfs_file_stat+0x188>
        else
            result = fs->ops->stat(fs, dfs_subdir(fs->path, fullpath), buf);
80007efc:	fe442783          	lw	a5,-28(s0)
80007f00:	0087a783          	lw	a5,8(a5)
80007f04:	0207a483          	lw	s1,32(a5)
80007f08:	fe442783          	lw	a5,-28(s0)
80007f0c:	0047a783          	lw	a5,4(a5)
80007f10:	fe842583          	lw	a1,-24(s0)
80007f14:	00078513          	mv	a0,a5
80007f18:	9b4ff0ef          	jal	ra,800070cc <dfs_subdir>
80007f1c:	00050793          	mv	a5,a0
80007f20:	fd842603          	lw	a2,-40(s0)
80007f24:	00078593          	mv	a1,a5
80007f28:	fe442503          	lw	a0,-28(s0)
80007f2c:	000480e7          	jalr	s1
80007f30:	fea42623          	sw	a0,-20(s0)
    }

    rt_free(fullpath);
80007f34:	fe842503          	lw	a0,-24(s0)
80007f38:	6e00d0ef          	jal	ra,80015618 <rt_free>

    return result;
80007f3c:	fec42783          	lw	a5,-20(s0)
}
80007f40:	00078513          	mv	a0,a5
80007f44:	02c12083          	lw	ra,44(sp)
80007f48:	02812403          	lw	s0,40(sp)
80007f4c:	02412483          	lw	s1,36(sp)
80007f50:	03010113          	addi	sp,sp,48
80007f54:	00008067          	ret

80007f58 <dfs_file_rename>:
 * @param newpath the new path name.
 *
 * @return 0 on successful, -1 on failed.
 */
int dfs_file_rename(const char *oldpath, const char *newpath)
{
80007f58:	fc010113          	addi	sp,sp,-64
80007f5c:	02112e23          	sw	ra,60(sp)
80007f60:	02812c23          	sw	s0,56(sp)
80007f64:	02912a23          	sw	s1,52(sp)
80007f68:	03212823          	sw	s2,48(sp)
80007f6c:	04010413          	addi	s0,sp,64
80007f70:	fca42623          	sw	a0,-52(s0)
80007f74:	fcb42423          	sw	a1,-56(s0)
    int result;
    struct dfs_filesystem *oldfs, *newfs;
    char *oldfullpath, *newfullpath;

    result = RT_EOK;
80007f78:	fe042623          	sw	zero,-20(s0)
    newfullpath = NULL;
80007f7c:	fe042423          	sw	zero,-24(s0)
    oldfullpath = NULL;
80007f80:	fe042223          	sw	zero,-28(s0)

    oldfullpath = dfs_normalize_path(NULL, oldpath);
80007f84:	fcc42583          	lw	a1,-52(s0)
80007f88:	00000513          	li	a0,0
80007f8c:	9dcff0ef          	jal	ra,80007168 <dfs_normalize_path>
80007f90:	fea42223          	sw	a0,-28(s0)
    if (oldfullpath == NULL)
80007f94:	fe442783          	lw	a5,-28(s0)
80007f98:	00079863          	bnez	a5,80007fa8 <dfs_file_rename+0x50>
    {
        result = -ENOENT;
80007f9c:	ffe00793          	li	a5,-2
80007fa0:	fef42623          	sw	a5,-20(s0)
        goto __exit;
80007fa4:	0fc0006f          	j	800080a0 <dfs_file_rename+0x148>
    }

    newfullpath = dfs_normalize_path(NULL, newpath);
80007fa8:	fc842583          	lw	a1,-56(s0)
80007fac:	00000513          	li	a0,0
80007fb0:	9b8ff0ef          	jal	ra,80007168 <dfs_normalize_path>
80007fb4:	fea42423          	sw	a0,-24(s0)
    if (newfullpath == NULL)
80007fb8:	fe842783          	lw	a5,-24(s0)
80007fbc:	00079863          	bnez	a5,80007fcc <dfs_file_rename+0x74>
    {
        result = -ENOENT;
80007fc0:	ffe00793          	li	a5,-2
80007fc4:	fef42623          	sw	a5,-20(s0)
        goto __exit;
80007fc8:	0d80006f          	j	800080a0 <dfs_file_rename+0x148>
    }

    oldfs = dfs_filesystem_lookup(oldfullpath);
80007fcc:	fe442503          	lw	a0,-28(s0)
80007fd0:	201000ef          	jal	ra,800089d0 <dfs_filesystem_lookup>
80007fd4:	fea42023          	sw	a0,-32(s0)
    newfs = dfs_filesystem_lookup(newfullpath);
80007fd8:	fe842503          	lw	a0,-24(s0)
80007fdc:	1f5000ef          	jal	ra,800089d0 <dfs_filesystem_lookup>
80007fe0:	fca42e23          	sw	a0,-36(s0)

    if (oldfs == newfs)
80007fe4:	fe042703          	lw	a4,-32(s0)
80007fe8:	fdc42783          	lw	a5,-36(s0)
80007fec:	0af71663          	bne	a4,a5,80008098 <dfs_file_rename+0x140>
    {
        if (oldfs->ops->rename == NULL)
80007ff0:	fe042783          	lw	a5,-32(s0)
80007ff4:	0087a783          	lw	a5,8(a5)
80007ff8:	0247a783          	lw	a5,36(a5)
80007ffc:	00079863          	bnez	a5,8000800c <dfs_file_rename+0xb4>
        {
            result = -ENOSYS;
80008000:	fa800793          	li	a5,-88
80008004:	fef42623          	sw	a5,-20(s0)
80008008:	0980006f          	j	800080a0 <dfs_file_rename+0x148>
        }
        else
        {
            if (oldfs->ops->flags & DFS_FS_FLAG_FULLPATH)
8000800c:	fe042783          	lw	a5,-32(s0)
80008010:	0087a783          	lw	a5,8(a5)
80008014:	0047a783          	lw	a5,4(a5)
80008018:	0017f793          	andi	a5,a5,1
8000801c:	02078463          	beqz	a5,80008044 <dfs_file_rename+0xec>
                result = oldfs->ops->rename(oldfs, oldfullpath, newfullpath);
80008020:	fe042783          	lw	a5,-32(s0)
80008024:	0087a783          	lw	a5,8(a5)
80008028:	0247a783          	lw	a5,36(a5)
8000802c:	fe842603          	lw	a2,-24(s0)
80008030:	fe442583          	lw	a1,-28(s0)
80008034:	fe042503          	lw	a0,-32(s0)
80008038:	000780e7          	jalr	a5
8000803c:	fea42623          	sw	a0,-20(s0)
80008040:	0600006f          	j	800080a0 <dfs_file_rename+0x148>
            else
                /* use sub directory to rename in file system */
                result = oldfs->ops->rename(oldfs,
80008044:	fe042783          	lw	a5,-32(s0)
80008048:	0087a783          	lw	a5,8(a5)
8000804c:	0247a483          	lw	s1,36(a5)
                                            dfs_subdir(oldfs->path, oldfullpath),
80008050:	fe042783          	lw	a5,-32(s0)
80008054:	0047a783          	lw	a5,4(a5)
                result = oldfs->ops->rename(oldfs,
80008058:	fe442583          	lw	a1,-28(s0)
8000805c:	00078513          	mv	a0,a5
80008060:	86cff0ef          	jal	ra,800070cc <dfs_subdir>
80008064:	00050913          	mv	s2,a0
                                            dfs_subdir(newfs->path, newfullpath));
80008068:	fdc42783          	lw	a5,-36(s0)
8000806c:	0047a783          	lw	a5,4(a5)
                result = oldfs->ops->rename(oldfs,
80008070:	fe842583          	lw	a1,-24(s0)
80008074:	00078513          	mv	a0,a5
80008078:	854ff0ef          	jal	ra,800070cc <dfs_subdir>
8000807c:	00050793          	mv	a5,a0
80008080:	00078613          	mv	a2,a5
80008084:	00090593          	mv	a1,s2
80008088:	fe042503          	lw	a0,-32(s0)
8000808c:	000480e7          	jalr	s1
80008090:	fea42623          	sw	a0,-20(s0)
80008094:	00c0006f          	j	800080a0 <dfs_file_rename+0x148>
        }
    }
    else
    {
        result = -EXDEV;
80008098:	fee00793          	li	a5,-18
8000809c:	fef42623          	sw	a5,-20(s0)
    }

__exit:
    rt_free(oldfullpath);
800080a0:	fe442503          	lw	a0,-28(s0)
800080a4:	5740d0ef          	jal	ra,80015618 <rt_free>
    rt_free(newfullpath);
800080a8:	fe842503          	lw	a0,-24(s0)
800080ac:	56c0d0ef          	jal	ra,80015618 <rt_free>

    /* not at same file system, return EXDEV */
    return result;
800080b0:	fec42783          	lw	a5,-20(s0)
}
800080b4:	00078513          	mv	a0,a5
800080b8:	03c12083          	lw	ra,60(sp)
800080bc:	03812403          	lw	s0,56(sp)
800080c0:	03412483          	lw	s1,52(sp)
800080c4:	03012903          	lw	s2,48(sp)
800080c8:	04010113          	addi	sp,sp,64
800080cc:	00008067          	ret

800080d0 <ls>:
#include <finsh.h>

static struct dfs_fd fd;
static struct dirent dirent;
void ls(const char *pathname)
{
800080d0:	f7010113          	addi	sp,sp,-144
800080d4:	08112623          	sw	ra,140(sp)
800080d8:	08812423          	sw	s0,136(sp)
800080dc:	09010413          	addi	s0,sp,144
800080e0:	f6a42e23          	sw	a0,-132(s0)
    struct stat stat;
    int length;
    char *fullpath, *path;

    fullpath = NULL;
800080e4:	fe042423          	sw	zero,-24(s0)
    if (pathname == NULL)
800080e8:	f7c42783          	lw	a5,-132(s0)
800080ec:	02079063          	bnez	a5,8000810c <ls+0x3c>
    {
#ifdef DFS_USING_WORKDIR
        /* open current working directory */
        path = rt_strdup(working_directory);
800080f0:	00021517          	auipc	a0,0x21
800080f4:	fa850513          	addi	a0,a0,-88 # 80029098 <working_directory>
800080f8:	1680c0ef          	jal	ra,80014260 <rt_strdup>
800080fc:	fea42623          	sw	a0,-20(s0)
#else
        path = rt_strdup("/");
#endif
        if (path == NULL)
80008100:	fec42783          	lw	a5,-20(s0)
80008104:	00079863          	bnez	a5,80008114 <ls+0x44>
            return ; /* out of memory */
80008108:	1680006f          	j	80008270 <ls+0x1a0>
    }
    else
    {
        path = (char *)pathname;
8000810c:	f7c42783          	lw	a5,-132(s0)
80008110:	fef42623          	sw	a5,-20(s0)
    }

    /* list directory */
    if (dfs_file_open(&fd, path, O_DIRECTORY) == 0)
80008114:	00200637          	lui	a2,0x200
80008118:	fec42583          	lw	a1,-20(s0)
8000811c:	0007c517          	auipc	a0,0x7c
80008120:	00050513          	mv	a0,a0
80008124:	e50ff0ef          	jal	ra,80007774 <dfs_file_open>
80008128:	00050793          	mv	a5,a0
8000812c:	12079463          	bnez	a5,80008254 <ls+0x184>
    {
        rt_kprintf("Directory %s:\n", path);
80008130:	fec42583          	lw	a1,-20(s0)
80008134:	0001e517          	auipc	a0,0x1e
80008138:	ca050513          	addi	a0,a0,-864 # 80025dd4 <raise+0x1e0>
8000813c:	0ec0d0ef          	jal	ra,80015228 <rt_kprintf>
        do
        {
            rt_memset(&dirent, 0, sizeof(struct dirent));
80008140:	10400613          	li	a2,260
80008144:	00000593          	li	a1,0
80008148:	0007c517          	auipc	a0,0x7c
8000814c:	ff850513          	addi	a0,a0,-8 # 80084140 <dirent>
80008150:	33d0b0ef          	jal	ra,80013c8c <rt_memset>
            length = dfs_file_getdents(&fd, &dirent, sizeof(struct dirent));
80008154:	10400613          	li	a2,260
80008158:	0007c597          	auipc	a1,0x7c
8000815c:	fe858593          	addi	a1,a1,-24 # 80084140 <dirent>
80008160:	0007c517          	auipc	a0,0x7c
80008164:	fbc50513          	addi	a0,a0,-68 # 8008411c <fd>
80008168:	961ff0ef          	jal	ra,80007ac8 <dfs_file_getdents>
8000816c:	fea42223          	sw	a0,-28(s0)
            if (length > 0)
80008170:	fe442783          	lw	a5,-28(s0)
80008174:	0cf05063          	blez	a5,80008234 <ls+0x164>
            {
                rt_memset(&stat, 0, sizeof(struct stat));
80008178:	f8840793          	addi	a5,s0,-120
8000817c:	05800613          	li	a2,88
80008180:	00000593          	li	a1,0
80008184:	00078513          	mv	a0,a5
80008188:	3050b0ef          	jal	ra,80013c8c <rt_memset>

                /* build full path for each file */
                fullpath = dfs_normalize_path(path, dirent.d_name);
8000818c:	0007c597          	auipc	a1,0x7c
80008190:	fb858593          	addi	a1,a1,-72 # 80084144 <dirent+0x4>
80008194:	fec42503          	lw	a0,-20(s0)
80008198:	fd1fe0ef          	jal	ra,80007168 <dfs_normalize_path>
8000819c:	fea42423          	sw	a0,-24(s0)
                if (fullpath == NULL)
800081a0:	fe842783          	lw	a5,-24(s0)
800081a4:	08078e63          	beqz	a5,80008240 <ls+0x170>
                    break;

                if (dfs_file_stat(fullpath, &stat) == 0)
800081a8:	f8840793          	addi	a5,s0,-120
800081ac:	00078593          	mv	a1,a5
800081b0:	fe842503          	lw	a0,-24(s0)
800081b4:	bf9ff0ef          	jal	ra,80007dac <dfs_file_stat>
800081b8:	00050793          	mv	a5,a0
800081bc:	04079e63          	bnez	a5,80008218 <ls+0x148>
                {
                    rt_kprintf("%-20s", dirent.d_name);
800081c0:	0007c597          	auipc	a1,0x7c
800081c4:	f8458593          	addi	a1,a1,-124 # 80084144 <dirent+0x4>
800081c8:	0001e517          	auipc	a0,0x1e
800081cc:	c1c50513          	addi	a0,a0,-996 # 80025de4 <raise+0x1f0>
800081d0:	0580d0ef          	jal	ra,80015228 <rt_kprintf>
                    if (S_ISDIR(stat.st_mode))
800081d4:	f8c42703          	lw	a4,-116(s0)
800081d8:	0000f7b7          	lui	a5,0xf
800081dc:	00f77733          	and	a4,a4,a5
800081e0:	000047b7          	lui	a5,0x4
800081e4:	00f71e63          	bne	a4,a5,80008200 <ls+0x130>
                    {
                        rt_kprintf("%-25s\n", "<DIR>");
800081e8:	0001e597          	auipc	a1,0x1e
800081ec:	c0458593          	addi	a1,a1,-1020 # 80025dec <raise+0x1f8>
800081f0:	0001e517          	auipc	a0,0x1e
800081f4:	c0450513          	addi	a0,a0,-1020 # 80025df4 <raise+0x200>
800081f8:	0300d0ef          	jal	ra,80015228 <rt_kprintf>
800081fc:	0300006f          	j	8000822c <ls+0x15c>
                    }
                    else
                    {
                        rt_kprintf("%-25lu\n", (unsigned long)stat.st_size);
80008200:	f9842783          	lw	a5,-104(s0)
80008204:	00078593          	mv	a1,a5
80008208:	0001e517          	auipc	a0,0x1e
8000820c:	bf450513          	addi	a0,a0,-1036 # 80025dfc <raise+0x208>
80008210:	0180d0ef          	jal	ra,80015228 <rt_kprintf>
80008214:	0180006f          	j	8000822c <ls+0x15c>
                    }
                }
                else
                    rt_kprintf("BAD file: %s\n", dirent.d_name);
80008218:	0007c597          	auipc	a1,0x7c
8000821c:	f2c58593          	addi	a1,a1,-212 # 80084144 <dirent+0x4>
80008220:	0001e517          	auipc	a0,0x1e
80008224:	be450513          	addi	a0,a0,-1052 # 80025e04 <raise+0x210>
80008228:	0000d0ef          	jal	ra,80015228 <rt_kprintf>
                rt_free(fullpath);
8000822c:	fe842503          	lw	a0,-24(s0)
80008230:	3e80d0ef          	jal	ra,80015618 <rt_free>
            }
        }
        while (length > 0);
80008234:	fe442783          	lw	a5,-28(s0)
80008238:	f0f044e3          	bgtz	a5,80008140 <ls+0x70>
8000823c:	0080006f          	j	80008244 <ls+0x174>
                    break;
80008240:	00000013          	nop

        dfs_file_close(&fd);
80008244:	0007c517          	auipc	a0,0x7c
80008248:	ed850513          	addi	a0,a0,-296 # 8008411c <fd>
8000824c:	f4cff0ef          	jal	ra,80007998 <dfs_file_close>
80008250:	0100006f          	j	80008260 <ls+0x190>
    }
    else
    {
        rt_kprintf("No such directory\n");
80008254:	0001e517          	auipc	a0,0x1e
80008258:	bc050513          	addi	a0,a0,-1088 # 80025e14 <raise+0x220>
8000825c:	7cd0c0ef          	jal	ra,80015228 <rt_kprintf>
    }
    if (pathname == NULL)
80008260:	f7c42783          	lw	a5,-132(s0)
80008264:	00079663          	bnez	a5,80008270 <ls+0x1a0>
        rt_free(path);
80008268:	fec42503          	lw	a0,-20(s0)
8000826c:	3ac0d0ef          	jal	ra,80015618 <rt_free>
}
80008270:	08c12083          	lw	ra,140(sp)
80008274:	08812403          	lw	s0,136(sp)
80008278:	09010113          	addi	sp,sp,144
8000827c:	00008067          	ret

80008280 <cat>:
    }
}
FINSH_FUNCTION_EXPORT(rm, remove files or directories);

void cat(const char *filename)
{
80008280:	f8010113          	addi	sp,sp,-128
80008284:	06112e23          	sw	ra,124(sp)
80008288:	06812c23          	sw	s0,120(sp)
8000828c:	08010413          	addi	s0,sp,128
80008290:	f8a42623          	sw	a0,-116(s0)
    uint32_t length;
    char buffer[81];

    if (dfs_file_open(&fd, filename, O_RDONLY) < 0)
80008294:	00000613          	li	a2,0
80008298:	f8c42583          	lw	a1,-116(s0)
8000829c:	0007c517          	auipc	a0,0x7c
800082a0:	e8050513          	addi	a0,a0,-384 # 8008411c <fd>
800082a4:	cd0ff0ef          	jal	ra,80007774 <dfs_file_open>
800082a8:	00050793          	mv	a5,a0
800082ac:	0007dc63          	bgez	a5,800082c4 <cat+0x44>
    {
        rt_kprintf("Open %s failed\n", filename);
800082b0:	f8c42583          	lw	a1,-116(s0)
800082b4:	0001e517          	auipc	a0,0x1e
800082b8:	b8850513          	addi	a0,a0,-1144 # 80025e3c <raise+0x248>
800082bc:	76d0c0ef          	jal	ra,80015228 <rt_kprintf>
800082c0:	0740006f          	j	80008334 <cat+0xb4>
        return;
    }

    do
    {
        rt_memset(buffer, 0, sizeof(buffer));
800082c4:	f9840793          	addi	a5,s0,-104
800082c8:	05100613          	li	a2,81
800082cc:	00000593          	li	a1,0
800082d0:	00078513          	mv	a0,a5
800082d4:	1b90b0ef          	jal	ra,80013c8c <rt_memset>
        length = dfs_file_read(&fd, buffer, sizeof(buffer) - 1);
800082d8:	f9840793          	addi	a5,s0,-104
800082dc:	05000613          	li	a2,80
800082e0:	00078593          	mv	a1,a5
800082e4:	0007c517          	auipc	a0,0x7c
800082e8:	e3850513          	addi	a0,a0,-456 # 8008411c <fd>
800082ec:	f3cff0ef          	jal	ra,80007a28 <dfs_file_read>
800082f0:	00050793          	mv	a5,a0
800082f4:	fef42623          	sw	a5,-20(s0)
        if (length > 0)
800082f8:	fec42783          	lw	a5,-20(s0)
800082fc:	00078c63          	beqz	a5,80008314 <cat+0x94>
        {
            rt_kprintf("%s", buffer);
80008300:	f9840793          	addi	a5,s0,-104
80008304:	00078593          	mv	a1,a5
80008308:	0001e517          	auipc	a0,0x1e
8000830c:	b4450513          	addi	a0,a0,-1212 # 80025e4c <raise+0x258>
80008310:	7190c0ef          	jal	ra,80015228 <rt_kprintf>
        }
    }
    while (length > 0);
80008314:	fec42783          	lw	a5,-20(s0)
80008318:	fa0796e3          	bnez	a5,800082c4 <cat+0x44>
    rt_kprintf("\n");
8000831c:	0001e517          	auipc	a0,0x1e
80008320:	b3450513          	addi	a0,a0,-1228 # 80025e50 <raise+0x25c>
80008324:	7050c0ef          	jal	ra,80015228 <rt_kprintf>

    dfs_file_close(&fd);
80008328:	0007c517          	auipc	a0,0x7c
8000832c:	df450513          	addi	a0,a0,-524 # 8008411c <fd>
80008330:	e68ff0ef          	jal	ra,80007998 <dfs_file_close>
}
80008334:	07c12083          	lw	ra,124(sp)
80008338:	07812403          	lw	s0,120(sp)
8000833c:	08010113          	addi	sp,sp,128
80008340:	00008067          	ret

80008344 <copyfile>:
FINSH_FUNCTION_EXPORT(cat, print file);

#ifdef DFS_USING_POSIX
#define BUF_SZ  4096
static void copyfile(const char *src, const char *dst)
{
80008344:	fb010113          	addi	sp,sp,-80
80008348:	04112623          	sw	ra,76(sp)
8000834c:	04812423          	sw	s0,72(sp)
80008350:	05010413          	addi	s0,sp,80
80008354:	faa42e23          	sw	a0,-68(s0)
80008358:	fab42c23          	sw	a1,-72(s0)
    struct dfs_fd src_fd;
    rt_uint8_t *block_ptr;
    rt_int32_t read_bytes;

    block_ptr = (rt_uint8_t *)rt_malloc(BUF_SZ);
8000835c:	00001537          	lui	a0,0x1
80008360:	16c0d0ef          	jal	ra,800154cc <rt_malloc>
80008364:	fea42623          	sw	a0,-20(s0)
    if (block_ptr == NULL)
80008368:	fec42783          	lw	a5,-20(s0)
8000836c:	00079a63          	bnez	a5,80008380 <copyfile+0x3c>
    {
        rt_kprintf("out of memory\n");
80008370:	0001e517          	auipc	a0,0x1e
80008374:	ae450513          	addi	a0,a0,-1308 # 80025e54 <raise+0x260>
80008378:	6b10c0ef          	jal	ra,80015228 <rt_kprintf>

        return;
8000837c:	1040006f          	j	80008480 <copyfile+0x13c>
    }

    if (dfs_file_open(&src_fd, src, O_RDONLY) < 0)
80008380:	fc040793          	addi	a5,s0,-64
80008384:	00000613          	li	a2,0
80008388:	fbc42583          	lw	a1,-68(s0)
8000838c:	00078513          	mv	a0,a5
80008390:	be4ff0ef          	jal	ra,80007774 <dfs_file_open>
80008394:	00050793          	mv	a5,a0
80008398:	0207d063          	bgez	a5,800083b8 <copyfile+0x74>
    {
        rt_free(block_ptr);
8000839c:	fec42503          	lw	a0,-20(s0)
800083a0:	2780d0ef          	jal	ra,80015618 <rt_free>
        rt_kprintf("Read %s failed\n", src);
800083a4:	fbc42583          	lw	a1,-68(s0)
800083a8:	0001e517          	auipc	a0,0x1e
800083ac:	abc50513          	addi	a0,a0,-1348 # 80025e64 <raise+0x270>
800083b0:	6790c0ef          	jal	ra,80015228 <rt_kprintf>

        return;
800083b4:	0cc0006f          	j	80008480 <copyfile+0x13c>
    }
    if (dfs_file_open(&fd, dst, O_WRONLY | O_CREAT) < 0)
800083b8:	20100613          	li	a2,513
800083bc:	fb842583          	lw	a1,-72(s0)
800083c0:	0007c517          	auipc	a0,0x7c
800083c4:	d5c50513          	addi	a0,a0,-676 # 8008411c <fd>
800083c8:	bacff0ef          	jal	ra,80007774 <dfs_file_open>
800083cc:	00050793          	mv	a5,a0
800083d0:	0207d663          	bgez	a5,800083fc <copyfile+0xb8>
    {
        rt_free(block_ptr);
800083d4:	fec42503          	lw	a0,-20(s0)
800083d8:	2400d0ef          	jal	ra,80015618 <rt_free>
        dfs_file_close(&src_fd);
800083dc:	fc040793          	addi	a5,s0,-64
800083e0:	00078513          	mv	a0,a5
800083e4:	db4ff0ef          	jal	ra,80007998 <dfs_file_close>

        rt_kprintf("Write %s failed\n", dst);
800083e8:	fb842583          	lw	a1,-72(s0)
800083ec:	0001e517          	auipc	a0,0x1e
800083f0:	a8850513          	addi	a0,a0,-1400 # 80025e74 <raise+0x280>
800083f4:	6350c0ef          	jal	ra,80015228 <rt_kprintf>

        return;
800083f8:	0880006f          	j	80008480 <copyfile+0x13c>
    }

    do
    {
        read_bytes = dfs_file_read(&src_fd, block_ptr, BUF_SZ);
800083fc:	fc040793          	addi	a5,s0,-64
80008400:	00001637          	lui	a2,0x1
80008404:	fec42583          	lw	a1,-20(s0)
80008408:	00078513          	mv	a0,a5
8000840c:	e1cff0ef          	jal	ra,80007a28 <dfs_file_read>
80008410:	fea42423          	sw	a0,-24(s0)
        if (read_bytes > 0)
80008414:	fe842783          	lw	a5,-24(s0)
80008418:	04f05063          	blez	a5,80008458 <copyfile+0x114>
        {
            int length;

            length = dfs_file_write(&fd, block_ptr, read_bytes);
8000841c:	fe842783          	lw	a5,-24(s0)
80008420:	00078613          	mv	a2,a5
80008424:	fec42583          	lw	a1,-20(s0)
80008428:	0007c517          	auipc	a0,0x7c
8000842c:	cf450513          	addi	a0,a0,-780 # 8008411c <fd>
80008430:	87dff0ef          	jal	ra,80007cac <dfs_file_write>
80008434:	fea42223          	sw	a0,-28(s0)
            if (length != read_bytes)
80008438:	fe442703          	lw	a4,-28(s0)
8000843c:	fe842783          	lw	a5,-24(s0)
80008440:	00f70c63          	beq	a4,a5,80008458 <copyfile+0x114>
            {
                /* write failed. */
                rt_kprintf("Write file data failed, errno=%d\n", length);
80008444:	fe442583          	lw	a1,-28(s0)
80008448:	0001e517          	auipc	a0,0x1e
8000844c:	a4050513          	addi	a0,a0,-1472 # 80025e88 <raise+0x294>
80008450:	5d90c0ef          	jal	ra,80015228 <rt_kprintf>
                break;
80008454:	00c0006f          	j	80008460 <copyfile+0x11c>
            }
        }
    }
    while (read_bytes > 0);
80008458:	fe842783          	lw	a5,-24(s0)
8000845c:	faf040e3          	bgtz	a5,800083fc <copyfile+0xb8>

    dfs_file_close(&src_fd);
80008460:	fc040793          	addi	a5,s0,-64
80008464:	00078513          	mv	a0,a5
80008468:	d30ff0ef          	jal	ra,80007998 <dfs_file_close>
    dfs_file_close(&fd);
8000846c:	0007c517          	auipc	a0,0x7c
80008470:	cb050513          	addi	a0,a0,-848 # 8008411c <fd>
80008474:	d24ff0ef          	jal	ra,80007998 <dfs_file_close>
    rt_free(block_ptr);
80008478:	fec42503          	lw	a0,-20(s0)
8000847c:	19c0d0ef          	jal	ra,80015618 <rt_free>
}
80008480:	04c12083          	lw	ra,76(sp)
80008484:	04812403          	lw	s0,72(sp)
80008488:	05010113          	addi	sp,sp,80
8000848c:	00008067          	ret

80008490 <copydir>:

extern int mkdir(const char *path, mode_t mode);
static void copydir(const char *src, const char *dst)
{
80008490:	e5010113          	addi	sp,sp,-432
80008494:	1a112623          	sw	ra,428(sp)
80008498:	1a812423          	sw	s0,424(sp)
8000849c:	1b010413          	addi	s0,sp,432
800084a0:	e4a42e23          	sw	a0,-420(s0)
800084a4:	e4b42c23          	sw	a1,-424(s0)
    struct dirent dirent;
    struct stat stat;
    int length;
    struct dfs_fd cpfd;
    if (dfs_file_open(&cpfd, src, O_DIRECTORY) < 0)
800084a8:	e6440793          	addi	a5,s0,-412
800084ac:	00200637          	lui	a2,0x200
800084b0:	e5c42583          	lw	a1,-420(s0)
800084b4:	00078513          	mv	a0,a5
800084b8:	abcff0ef          	jal	ra,80007774 <dfs_file_open>
800084bc:	00050793          	mv	a5,a0
800084c0:	0007dc63          	bgez	a5,800084d8 <copydir+0x48>
    {
        rt_kprintf("open %s failed\n", src);
800084c4:	e5c42583          	lw	a1,-420(s0)
800084c8:	0001e517          	auipc	a0,0x1e
800084cc:	9e450513          	addi	a0,a0,-1564 # 80025eac <raise+0x2b8>
800084d0:	5590c0ef          	jal	ra,80015228 <rt_kprintf>
800084d4:	19c0006f          	j	80008670 <copydir+0x1e0>
        return ;
    }

    do
    {
        rt_memset(&dirent, 0, sizeof(struct dirent));
800084d8:	ee040793          	addi	a5,s0,-288
800084dc:	10400613          	li	a2,260
800084e0:	00000593          	li	a1,0
800084e4:	00078513          	mv	a0,a5
800084e8:	7a40b0ef          	jal	ra,80013c8c <rt_memset>

        length = dfs_file_getdents(&cpfd, &dirent, sizeof(struct dirent));
800084ec:	ee040713          	addi	a4,s0,-288
800084f0:	e6440793          	addi	a5,s0,-412
800084f4:	10400613          	li	a2,260
800084f8:	00070593          	mv	a1,a4
800084fc:	00078513          	mv	a0,a5
80008500:	dc8ff0ef          	jal	ra,80007ac8 <dfs_file_getdents>
80008504:	fea42623          	sw	a0,-20(s0)
        if (length > 0)
80008508:	fec42783          	lw	a5,-20(s0)
8000850c:	14f05863          	blez	a5,8000865c <copydir+0x1cc>
        {
            char *src_entry_full = NULL;
80008510:	fe042423          	sw	zero,-24(s0)
            char *dst_entry_full = NULL;
80008514:	fe042223          	sw	zero,-28(s0)

            if (strcmp(dirent.d_name, "..") == 0 || strcmp(dirent.d_name, ".") == 0)
80008518:	ee040793          	addi	a5,s0,-288
8000851c:	00478793          	addi	a5,a5,4 # 4004 <__STACKSIZE__+0x4>
80008520:	0001e597          	auipc	a1,0x1e
80008524:	99c58593          	addi	a1,a1,-1636 # 80025ebc <raise+0x2c8>
80008528:	00078513          	mv	a0,a5
8000852c:	da5f70ef          	jal	ra,800002d0 <strcmp>
80008530:	00050793          	mv	a5,a0
80008534:	12078263          	beqz	a5,80008658 <copydir+0x1c8>
80008538:	ee040793          	addi	a5,s0,-288
8000853c:	00478793          	addi	a5,a5,4
80008540:	0001e597          	auipc	a1,0x1e
80008544:	98058593          	addi	a1,a1,-1664 # 80025ec0 <raise+0x2cc>
80008548:	00078513          	mv	a0,a5
8000854c:	d85f70ef          	jal	ra,800002d0 <strcmp>
80008550:	00050793          	mv	a5,a0
80008554:	10078263          	beqz	a5,80008658 <copydir+0x1c8>
                continue;

            /* build full path for each file */
            if ((src_entry_full = dfs_normalize_path(src, dirent.d_name)) == NULL)
80008558:	ee040793          	addi	a5,s0,-288
8000855c:	00478793          	addi	a5,a5,4
80008560:	00078593          	mv	a1,a5
80008564:	e5c42503          	lw	a0,-420(s0)
80008568:	c01fe0ef          	jal	ra,80007168 <dfs_normalize_path>
8000856c:	fea42423          	sw	a0,-24(s0)
80008570:	fe842783          	lw	a5,-24(s0)
80008574:	00079a63          	bnez	a5,80008588 <copydir+0xf8>
            {
                rt_kprintf("out of memory!\n");
80008578:	0001e517          	auipc	a0,0x1e
8000857c:	94c50513          	addi	a0,a0,-1716 # 80025ec4 <raise+0x2d0>
80008580:	4a90c0ef          	jal	ra,80015228 <rt_kprintf>
                break;
80008584:	0e00006f          	j	80008664 <copydir+0x1d4>
            }
            if ((dst_entry_full = dfs_normalize_path(dst, dirent.d_name)) == NULL)
80008588:	ee040793          	addi	a5,s0,-288
8000858c:	00478793          	addi	a5,a5,4
80008590:	00078593          	mv	a1,a5
80008594:	e5842503          	lw	a0,-424(s0)
80008598:	bd1fe0ef          	jal	ra,80007168 <dfs_normalize_path>
8000859c:	fea42223          	sw	a0,-28(s0)
800085a0:	fe442783          	lw	a5,-28(s0)
800085a4:	00079e63          	bnez	a5,800085c0 <copydir+0x130>
            {
                rt_kprintf("out of memory!\n");
800085a8:	0001e517          	auipc	a0,0x1e
800085ac:	91c50513          	addi	a0,a0,-1764 # 80025ec4 <raise+0x2d0>
800085b0:	4790c0ef          	jal	ra,80015228 <rt_kprintf>
                rt_free(src_entry_full);
800085b4:	fe842503          	lw	a0,-24(s0)
800085b8:	0600d0ef          	jal	ra,80015618 <rt_free>
                break;
800085bc:	0a80006f          	j	80008664 <copydir+0x1d4>
            }

            rt_memset(&stat, 0, sizeof(struct stat));
800085c0:	e8840793          	addi	a5,s0,-376
800085c4:	05800613          	li	a2,88
800085c8:	00000593          	li	a1,0
800085cc:	00078513          	mv	a0,a5
800085d0:	6bc0b0ef          	jal	ra,80013c8c <rt_memset>
            if (dfs_file_stat(src_entry_full, &stat) != 0)
800085d4:	e8840793          	addi	a5,s0,-376
800085d8:	00078593          	mv	a1,a5
800085dc:	fe842503          	lw	a0,-24(s0)
800085e0:	fccff0ef          	jal	ra,80007dac <dfs_file_stat>
800085e4:	00050793          	mv	a5,a0
800085e8:	02078063          	beqz	a5,80008608 <copydir+0x178>
            {
                rt_kprintf("open file: %s failed\n", dirent.d_name);
800085ec:	ee040793          	addi	a5,s0,-288
800085f0:	00478793          	addi	a5,a5,4
800085f4:	00078593          	mv	a1,a5
800085f8:	0001e517          	auipc	a0,0x1e
800085fc:	8dc50513          	addi	a0,a0,-1828 # 80025ed4 <raise+0x2e0>
80008600:	4290c0ef          	jal	ra,80015228 <rt_kprintf>
                continue;
80008604:	0580006f          	j	8000865c <copydir+0x1cc>
            }

            if (S_ISDIR(stat.st_mode))
80008608:	e8c42703          	lw	a4,-372(s0)
8000860c:	0000f7b7          	lui	a5,0xf
80008610:	00f77733          	and	a4,a4,a5
80008614:	000047b7          	lui	a5,0x4
80008618:	02f71063          	bne	a4,a5,80008638 <copydir+0x1a8>
            {
                mkdir(dst_entry_full, 0);
8000861c:	00000593          	li	a1,0
80008620:	fe442503          	lw	a0,-28(s0)
80008624:	3e0010ef          	jal	ra,80009a04 <mkdir>
                copydir(src_entry_full, dst_entry_full);
80008628:	fe442583          	lw	a1,-28(s0)
8000862c:	fe842503          	lw	a0,-24(s0)
80008630:	e61ff0ef          	jal	ra,80008490 <copydir>
80008634:	0100006f          	j	80008644 <copydir+0x1b4>
            }
            else
            {
                copyfile(src_entry_full, dst_entry_full);
80008638:	fe442583          	lw	a1,-28(s0)
8000863c:	fe842503          	lw	a0,-24(s0)
80008640:	d05ff0ef          	jal	ra,80008344 <copyfile>
            }
            rt_free(src_entry_full);
80008644:	fe842503          	lw	a0,-24(s0)
80008648:	7d10c0ef          	jal	ra,80015618 <rt_free>
            rt_free(dst_entry_full);
8000864c:	fe442503          	lw	a0,-28(s0)
80008650:	7c90c0ef          	jal	ra,80015618 <rt_free>
80008654:	0080006f          	j	8000865c <copydir+0x1cc>
                continue;
80008658:	00000013          	nop
        }
    }
    while (length > 0);
8000865c:	fec42783          	lw	a5,-20(s0)
80008660:	e6f04ce3          	bgtz	a5,800084d8 <copydir+0x48>

    dfs_file_close(&cpfd);
80008664:	e6440793          	addi	a5,s0,-412
80008668:	00078513          	mv	a0,a5
8000866c:	b2cff0ef          	jal	ra,80007998 <dfs_file_close>
}
80008670:	1ac12083          	lw	ra,428(sp)
80008674:	1a812403          	lw	s0,424(sp)
80008678:	1b010113          	addi	sp,sp,432
8000867c:	00008067          	ret

80008680 <_get_path_lastname>:

static const char *_get_path_lastname(const char *path)
{
80008680:	fd010113          	addi	sp,sp,-48
80008684:	02112623          	sw	ra,44(sp)
80008688:	02812423          	sw	s0,40(sp)
8000868c:	03010413          	addi	s0,sp,48
80008690:	fca42e23          	sw	a0,-36(s0)
    char *ptr;
    if ((ptr = (char *)strrchr(path, '/')) == NULL)
80008694:	02f00593          	li	a1,47
80008698:	fdc42503          	lw	a0,-36(s0)
8000869c:	420140ef          	jal	ra,8001cabc <strrchr>
800086a0:	fea42623          	sw	a0,-20(s0)
800086a4:	fec42783          	lw	a5,-20(s0)
800086a8:	00079663          	bnez	a5,800086b4 <_get_path_lastname+0x34>
        return path;
800086ac:	fdc42783          	lw	a5,-36(s0)
800086b0:	0140006f          	j	800086c4 <_get_path_lastname+0x44>

    /* skip the '/' then return */
    return ++ptr;
800086b4:	fec42783          	lw	a5,-20(s0)
800086b8:	00178793          	addi	a5,a5,1 # 4001 <__STACKSIZE__+0x1>
800086bc:	fef42623          	sw	a5,-20(s0)
800086c0:	fec42783          	lw	a5,-20(s0)
}
800086c4:	00078513          	mv	a0,a5
800086c8:	02c12083          	lw	ra,44(sp)
800086cc:	02812403          	lw	s0,40(sp)
800086d0:	03010113          	addi	sp,sp,48
800086d4:	00008067          	ret

800086d8 <copy>:

void copy(const char *src, const char *dst)
{
800086d8:	f7010113          	addi	sp,sp,-144
800086dc:	08112623          	sw	ra,140(sp)
800086e0:	08812423          	sw	s0,136(sp)
800086e4:	09010413          	addi	s0,sp,144
800086e8:	f6a42e23          	sw	a0,-132(s0)
800086ec:	f6b42c23          	sw	a1,-136(s0)
#define FLAG_DST_IS_DIR    0x04
#define FLAG_DST_IS_FILE   0x08
#define FLAG_DST_NON_EXSIT 0x00

    struct stat stat;
    uint32_t flag = 0;
800086f0:	fe042623          	sw	zero,-20(s0)

    /* check the staus of src and dst */
    if (dfs_file_stat(src, &stat) < 0)
800086f4:	f8840793          	addi	a5,s0,-120
800086f8:	00078593          	mv	a1,a5
800086fc:	f7c42503          	lw	a0,-132(s0)
80008700:	eacff0ef          	jal	ra,80007dac <dfs_file_stat>
80008704:	00050793          	mv	a5,a0
80008708:	0007dc63          	bgez	a5,80008720 <copy+0x48>
    {
        rt_kprintf("copy failed, bad %s\n", src);
8000870c:	f7c42583          	lw	a1,-132(s0)
80008710:	0001d517          	auipc	a0,0x1d
80008714:	7dc50513          	addi	a0,a0,2012 # 80025eec <raise+0x2f8>
80008718:	3110c0ef          	jal	ra,80015228 <rt_kprintf>
        return;
8000871c:	1b00006f          	j	800088cc <copy+0x1f4>
    }
    if (S_ISDIR(stat.st_mode))
80008720:	f8c42703          	lw	a4,-116(s0)
80008724:	0000f7b7          	lui	a5,0xf
80008728:	00f77733          	and	a4,a4,a5
8000872c:	000047b7          	lui	a5,0x4
80008730:	00f71a63          	bne	a4,a5,80008744 <copy+0x6c>
        flag |= FLAG_SRC_IS_DIR;
80008734:	fec42783          	lw	a5,-20(s0)
80008738:	0017e793          	ori	a5,a5,1
8000873c:	fef42623          	sw	a5,-20(s0)
80008740:	0100006f          	j	80008750 <copy+0x78>
    else
        flag |= FLAG_SRC_IS_FILE;
80008744:	fec42783          	lw	a5,-20(s0)
80008748:	0027e793          	ori	a5,a5,2
8000874c:	fef42623          	sw	a5,-20(s0)

    if (dfs_file_stat(dst, &stat) < 0)
80008750:	f8840793          	addi	a5,s0,-120
80008754:	00078593          	mv	a1,a5
80008758:	f7842503          	lw	a0,-136(s0)
8000875c:	e50ff0ef          	jal	ra,80007dac <dfs_file_stat>
80008760:	00050793          	mv	a5,a0
80008764:	0207ca63          	bltz	a5,80008798 <copy+0xc0>
    {
        flag |= FLAG_DST_NON_EXSIT;
    }
    else
    {
        if (S_ISDIR(stat.st_mode))
80008768:	f8c42703          	lw	a4,-116(s0)
8000876c:	0000f7b7          	lui	a5,0xf
80008770:	00f77733          	and	a4,a4,a5
80008774:	000047b7          	lui	a5,0x4
80008778:	00f71a63          	bne	a4,a5,8000878c <copy+0xb4>
            flag |= FLAG_DST_IS_DIR;
8000877c:	fec42783          	lw	a5,-20(s0)
80008780:	0047e793          	ori	a5,a5,4
80008784:	fef42623          	sw	a5,-20(s0)
80008788:	0100006f          	j	80008798 <copy+0xc0>
        else
            flag |= FLAG_DST_IS_FILE;
8000878c:	fec42783          	lw	a5,-20(s0)
80008790:	0087e793          	ori	a5,a5,8
80008794:	fef42623          	sw	a5,-20(s0)
    }

    //2. check status
    if ((flag & FLAG_SRC_IS_DIR) && (flag & FLAG_DST_IS_FILE))
80008798:	fec42783          	lw	a5,-20(s0)
8000879c:	0017f793          	andi	a5,a5,1
800087a0:	02078063          	beqz	a5,800087c0 <copy+0xe8>
800087a4:	fec42783          	lw	a5,-20(s0)
800087a8:	0087f793          	andi	a5,a5,8
800087ac:	00078a63          	beqz	a5,800087c0 <copy+0xe8>
    {
        rt_kprintf("cp faild, cp dir to file is not permitted!\n");
800087b0:	0001d517          	auipc	a0,0x1d
800087b4:	75450513          	addi	a0,a0,1876 # 80025f04 <raise+0x310>
800087b8:	2710c0ef          	jal	ra,80015228 <rt_kprintf>
        return ;
800087bc:	1100006f          	j	800088cc <copy+0x1f4>
    }

    //3. do copy
    if (flag & FLAG_SRC_IS_FILE)
800087c0:	fec42783          	lw	a5,-20(s0)
800087c4:	0027f793          	andi	a5,a5,2
800087c8:	06078663          	beqz	a5,80008834 <copy+0x15c>
    {
        if (flag & FLAG_DST_IS_DIR)
800087cc:	fec42783          	lw	a5,-20(s0)
800087d0:	0047f793          	andi	a5,a5,4
800087d4:	04078863          	beqz	a5,80008824 <copy+0x14c>
        {
            char *fdst;
            fdst = dfs_normalize_path(dst, _get_path_lastname(src));
800087d8:	f7c42503          	lw	a0,-132(s0)
800087dc:	ea5ff0ef          	jal	ra,80008680 <_get_path_lastname>
800087e0:	00050793          	mv	a5,a0
800087e4:	00078593          	mv	a1,a5
800087e8:	f7842503          	lw	a0,-136(s0)
800087ec:	97dfe0ef          	jal	ra,80007168 <dfs_normalize_path>
800087f0:	fea42223          	sw	a0,-28(s0)
            if (fdst == NULL)
800087f4:	fe442783          	lw	a5,-28(s0)
800087f8:	00079a63          	bnez	a5,8000880c <copy+0x134>
            {
                rt_kprintf("out of memory\n");
800087fc:	0001d517          	auipc	a0,0x1d
80008800:	65850513          	addi	a0,a0,1624 # 80025e54 <raise+0x260>
80008804:	2250c0ef          	jal	ra,80015228 <rt_kprintf>
                return;
80008808:	0c40006f          	j	800088cc <copy+0x1f4>
            }
            copyfile(src, fdst);
8000880c:	fe442583          	lw	a1,-28(s0)
80008810:	f7c42503          	lw	a0,-132(s0)
80008814:	b31ff0ef          	jal	ra,80008344 <copyfile>
            rt_free(fdst);
80008818:	fe442503          	lw	a0,-28(s0)
8000881c:	5fd0c0ef          	jal	ra,80015618 <rt_free>
80008820:	0ac0006f          	j	800088cc <copy+0x1f4>
        }
        else
        {
            copyfile(src, dst);
80008824:	f7842583          	lw	a1,-136(s0)
80008828:	f7c42503          	lw	a0,-132(s0)
8000882c:	b19ff0ef          	jal	ra,80008344 <copyfile>
80008830:	09c0006f          	j	800088cc <copy+0x1f4>
        }
    }
    else //flag & FLAG_SRC_IS_DIR
    {
        if (flag & FLAG_DST_IS_DIR)
80008834:	fec42783          	lw	a5,-20(s0)
80008838:	0047f793          	andi	a5,a5,4
8000883c:	04078e63          	beqz	a5,80008898 <copy+0x1c0>
        {
            char *fdst;
            fdst = dfs_normalize_path(dst, _get_path_lastname(src));
80008840:	f7c42503          	lw	a0,-132(s0)
80008844:	e3dff0ef          	jal	ra,80008680 <_get_path_lastname>
80008848:	00050793          	mv	a5,a0
8000884c:	00078593          	mv	a1,a5
80008850:	f7842503          	lw	a0,-136(s0)
80008854:	915fe0ef          	jal	ra,80007168 <dfs_normalize_path>
80008858:	fea42423          	sw	a0,-24(s0)
            if (fdst == NULL)
8000885c:	fe842783          	lw	a5,-24(s0)
80008860:	00079a63          	bnez	a5,80008874 <copy+0x19c>
            {
                rt_kprintf("out of memory\n");
80008864:	0001d517          	auipc	a0,0x1d
80008868:	5f050513          	addi	a0,a0,1520 # 80025e54 <raise+0x260>
8000886c:	1bd0c0ef          	jal	ra,80015228 <rt_kprintf>
                return;
80008870:	05c0006f          	j	800088cc <copy+0x1f4>
            }
            mkdir(fdst, 0);
80008874:	00000593          	li	a1,0
80008878:	fe842503          	lw	a0,-24(s0)
8000887c:	188010ef          	jal	ra,80009a04 <mkdir>
            copydir(src, fdst);
80008880:	fe842583          	lw	a1,-24(s0)
80008884:	f7c42503          	lw	a0,-132(s0)
80008888:	c09ff0ef          	jal	ra,80008490 <copydir>
            rt_free(fdst);
8000888c:	fe842503          	lw	a0,-24(s0)
80008890:	5890c0ef          	jal	ra,80015618 <rt_free>
80008894:	0380006f          	j	800088cc <copy+0x1f4>
        }
        else if ((flag & FLAG_DST_TYPE) == FLAG_DST_NON_EXSIT)
80008898:	fec42783          	lw	a5,-20(s0)
8000889c:	00c7f793          	andi	a5,a5,12
800088a0:	02079063          	bnez	a5,800088c0 <copy+0x1e8>
        {
            mkdir(dst, 0);
800088a4:	00000593          	li	a1,0
800088a8:	f7842503          	lw	a0,-136(s0)
800088ac:	158010ef          	jal	ra,80009a04 <mkdir>
            copydir(src, dst);
800088b0:	f7842583          	lw	a1,-136(s0)
800088b4:	f7c42503          	lw	a0,-132(s0)
800088b8:	bd9ff0ef          	jal	ra,80008490 <copydir>
800088bc:	0100006f          	j	800088cc <copy+0x1f4>
        }
        else
        {
            copydir(src, dst);
800088c0:	f7842583          	lw	a1,-136(s0)
800088c4:	f7c42503          	lw	a0,-132(s0)
800088c8:	bc9ff0ef          	jal	ra,80008490 <copydir>
        }
    }
}
800088cc:	08c12083          	lw	ra,140(sp)
800088d0:	08812403          	lw	s0,136(sp)
800088d4:	09010113          	addi	sp,sp,144
800088d8:	00008067          	ret

800088dc <dfs_register>:
 * @param ops the file system instance to be registered.
 *
 * @return 0 on successful, -1 on failed.
 */
int dfs_register(const struct dfs_filesystem_ops *ops)
{
800088dc:	fd010113          	addi	sp,sp,-48
800088e0:	02112623          	sw	ra,44(sp)
800088e4:	02812423          	sw	s0,40(sp)
800088e8:	03010413          	addi	s0,sp,48
800088ec:	fca42e23          	sw	a0,-36(s0)
    int ret = RT_EOK;
800088f0:	fe042623          	sw	zero,-20(s0)
    const struct dfs_filesystem_ops **empty = NULL;
800088f4:	fe042423          	sw	zero,-24(s0)
    const struct dfs_filesystem_ops **iter;

    /* lock filesystem */
    dfs_lock();
800088f8:	9acfe0ef          	jal	ra,80006aa4 <dfs_lock>
    /* check if this filesystem was already registered */
    for (iter = &filesystem_operation_table[0];
800088fc:	0007b797          	auipc	a5,0x7b
80008900:	70478793          	addi	a5,a5,1796 # 80084000 <filesystem_operation_table>
80008904:	fef42223          	sw	a5,-28(s0)
80008908:	06c0006f          	j	80008974 <dfs_register+0x98>
            iter < &filesystem_operation_table[DFS_FILESYSTEM_TYPES_MAX]; iter ++)
    {
        /* find out an empty filesystem type entry */
        if (*iter == NULL)
8000890c:	fe442783          	lw	a5,-28(s0)
80008910:	0007a783          	lw	a5,0(a5)
80008914:	00079c63          	bnez	a5,8000892c <dfs_register+0x50>
            (empty == NULL) ? (empty = iter) : 0;
80008918:	fe842783          	lw	a5,-24(s0)
8000891c:	04079663          	bnez	a5,80008968 <dfs_register+0x8c>
80008920:	fe442783          	lw	a5,-28(s0)
80008924:	fef42423          	sw	a5,-24(s0)
80008928:	0400006f          	j	80008968 <dfs_register+0x8c>
        else if (strcmp((*iter)->name, ops->name) == 0)
8000892c:	fe442783          	lw	a5,-28(s0)
80008930:	0007a783          	lw	a5,0(a5)
80008934:	0007a703          	lw	a4,0(a5)
80008938:	fdc42783          	lw	a5,-36(s0)
8000893c:	0007a783          	lw	a5,0(a5)
80008940:	00078593          	mv	a1,a5
80008944:	00070513          	mv	a0,a4
80008948:	989f70ef          	jal	ra,800002d0 <strcmp>
8000894c:	00050793          	mv	a5,a0
80008950:	00079c63          	bnez	a5,80008968 <dfs_register+0x8c>
        {
            rt_set_errno(-EEXIST);
80008954:	fef00513          	li	a0,-17
80008958:	2600b0ef          	jal	ra,80013bb8 <rt_set_errno>
            ret = -1;
8000895c:	fff00793          	li	a5,-1
80008960:	fef42623          	sw	a5,-20(s0)
            break;
80008964:	0200006f          	j	80008984 <dfs_register+0xa8>
            iter < &filesystem_operation_table[DFS_FILESYSTEM_TYPES_MAX]; iter ++)
80008968:	fe442783          	lw	a5,-28(s0)
8000896c:	00478793          	addi	a5,a5,4
80008970:	fef42223          	sw	a5,-28(s0)
80008974:	fe442703          	lw	a4,-28(s0)
80008978:	0007b797          	auipc	a5,0x7b
8000897c:	69078793          	addi	a5,a5,1680 # 80084008 <_fdtab>
80008980:	f8f766e3          	bltu	a4,a5,8000890c <dfs_register+0x30>
        }
    }

    /* save the filesystem's operations */
    if (empty == NULL)
80008984:	fe842783          	lw	a5,-24(s0)
80008988:	00079c63          	bnez	a5,800089a0 <dfs_register+0xc4>
    {
        rt_set_errno(-ENOSPC);
8000898c:	fe400513          	li	a0,-28
80008990:	2280b0ef          	jal	ra,80013bb8 <rt_set_errno>
        LOG_E("There is no space to register this file system (%s).", ops->name);
        ret = -1;
80008994:	fff00793          	li	a5,-1
80008998:	fef42623          	sw	a5,-20(s0)
8000899c:	0180006f          	j	800089b4 <dfs_register+0xd8>
    }
    else if (ret == RT_EOK)
800089a0:	fec42783          	lw	a5,-20(s0)
800089a4:	00079863          	bnez	a5,800089b4 <dfs_register+0xd8>
    {
        *empty = ops;
800089a8:	fe842783          	lw	a5,-24(s0)
800089ac:	fdc42703          	lw	a4,-36(s0)
800089b0:	00e7a023          	sw	a4,0(a5)
    }

    dfs_unlock();
800089b4:	944fe0ef          	jal	ra,80006af8 <dfs_unlock>
    return ret;
800089b8:	fec42783          	lw	a5,-20(s0)
}
800089bc:	00078513          	mv	a0,a5
800089c0:	02c12083          	lw	ra,44(sp)
800089c4:	02812403          	lw	s0,40(sp)
800089c8:	03010113          	addi	sp,sp,48
800089cc:	00008067          	ret

800089d0 <dfs_filesystem_lookup>:
 *
 * @return the found file system or NULL if no file system mounted on
 * specified path
 */
struct dfs_filesystem *dfs_filesystem_lookup(const char *path)
{
800089d0:	fd010113          	addi	sp,sp,-48
800089d4:	02112623          	sw	ra,44(sp)
800089d8:	02812423          	sw	s0,40(sp)
800089dc:	03010413          	addi	s0,sp,48
800089e0:	fca42e23          	sw	a0,-36(s0)
    struct dfs_filesystem *iter;
    struct dfs_filesystem *fs = NULL;
800089e4:	fe042423          	sw	zero,-24(s0)
    uint32_t fspath, prefixlen;

    prefixlen = 0;
800089e8:	fe042223          	sw	zero,-28(s0)

    RT_ASSERT(path);

    /* lock filesystem */
    dfs_lock();
800089ec:	8b8fe0ef          	jal	ra,80006aa4 <dfs_lock>

    /* lookup it in the filesystem table */
    for (iter = &filesystem_table[0];
800089f0:	0007b797          	auipc	a5,0x7b
800089f4:	6dc78793          	addi	a5,a5,1756 # 800840cc <filesystem_table>
800089f8:	fef42623          	sw	a5,-20(s0)
800089fc:	0c80006f          	j	80008ac4 <dfs_filesystem_lookup+0xf4>
            iter < &filesystem_table[DFS_FILESYSTEMS_MAX]; iter++)
    {
        if ((iter->path == NULL) || (iter->ops == NULL))
80008a00:	fec42783          	lw	a5,-20(s0)
80008a04:	0047a783          	lw	a5,4(a5)
80008a08:	08078e63          	beqz	a5,80008aa4 <dfs_filesystem_lookup+0xd4>
80008a0c:	fec42783          	lw	a5,-20(s0)
80008a10:	0087a783          	lw	a5,8(a5)
80008a14:	08078863          	beqz	a5,80008aa4 <dfs_filesystem_lookup+0xd4>
            continue;

        fspath = strlen(iter->path);
80008a18:	fec42783          	lw	a5,-20(s0)
80008a1c:	0047a783          	lw	a5,4(a5)
80008a20:	00078513          	mv	a0,a5
80008a24:	7e0140ef          	jal	ra,8001d204 <strlen>
80008a28:	fea42023          	sw	a0,-32(s0)
        if ((fspath < prefixlen)
80008a2c:	fe042703          	lw	a4,-32(s0)
80008a30:	fe442783          	lw	a5,-28(s0)
80008a34:	06f76c63          	bltu	a4,a5,80008aac <dfs_filesystem_lookup+0xdc>
            || (strncmp(iter->path, path, fspath) != 0))
80008a38:	fec42783          	lw	a5,-20(s0)
80008a3c:	0047a783          	lw	a5,4(a5)
80008a40:	fe042603          	lw	a2,-32(s0)
80008a44:	fdc42583          	lw	a1,-36(s0)
80008a48:	00078513          	mv	a0,a5
80008a4c:	6fd130ef          	jal	ra,8001c948 <strncmp>
80008a50:	00050793          	mv	a5,a0
80008a54:	04079c63          	bnez	a5,80008aac <dfs_filesystem_lookup+0xdc>
            continue;

        /* check next path separator */
        if (fspath > 1 && (strlen(path) > fspath) && (path[fspath] != '/'))
80008a58:	fe042703          	lw	a4,-32(s0)
80008a5c:	00100793          	li	a5,1
80008a60:	02e7f863          	bgeu	a5,a4,80008a90 <dfs_filesystem_lookup+0xc0>
80008a64:	fdc42503          	lw	a0,-36(s0)
80008a68:	79c140ef          	jal	ra,8001d204 <strlen>
80008a6c:	00050713          	mv	a4,a0
80008a70:	fe042783          	lw	a5,-32(s0)
80008a74:	00e7fe63          	bgeu	a5,a4,80008a90 <dfs_filesystem_lookup+0xc0>
80008a78:	fdc42703          	lw	a4,-36(s0)
80008a7c:	fe042783          	lw	a5,-32(s0)
80008a80:	00f707b3          	add	a5,a4,a5
80008a84:	0007c703          	lbu	a4,0(a5)
80008a88:	02f00793          	li	a5,47
80008a8c:	02f71463          	bne	a4,a5,80008ab4 <dfs_filesystem_lookup+0xe4>
            continue;

        fs = iter;
80008a90:	fec42783          	lw	a5,-20(s0)
80008a94:	fef42423          	sw	a5,-24(s0)
        prefixlen = fspath;
80008a98:	fe042783          	lw	a5,-32(s0)
80008a9c:	fef42223          	sw	a5,-28(s0)
80008aa0:	0180006f          	j	80008ab8 <dfs_filesystem_lookup+0xe8>
            continue;
80008aa4:	00000013          	nop
80008aa8:	0100006f          	j	80008ab8 <dfs_filesystem_lookup+0xe8>
            continue;
80008aac:	00000013          	nop
80008ab0:	0080006f          	j	80008ab8 <dfs_filesystem_lookup+0xe8>
            continue;
80008ab4:	00000013          	nop
            iter < &filesystem_table[DFS_FILESYSTEMS_MAX]; iter++)
80008ab8:	fec42783          	lw	a5,-20(s0)
80008abc:	01078793          	addi	a5,a5,16
80008ac0:	fef42623          	sw	a5,-20(s0)
80008ac4:	fec42703          	lw	a4,-20(s0)
80008ac8:	0007b797          	auipc	a5,0x7b
80008acc:	62478793          	addi	a5,a5,1572 # 800840ec <fslock>
80008ad0:	f2f768e3          	bltu	a4,a5,80008a00 <dfs_filesystem_lookup+0x30>
    }

    dfs_unlock();
80008ad4:	824fe0ef          	jal	ra,80006af8 <dfs_unlock>

    return fs;
80008ad8:	fe842783          	lw	a5,-24(s0)
}
80008adc:	00078513          	mv	a0,a5
80008ae0:	02c12083          	lw	ra,44(sp)
80008ae4:	02812403          	lw	s0,40(sp)
80008ae8:	03010113          	addi	sp,sp,48
80008aec:	00008067          	ret

80008af0 <dfs_mount>:
int dfs_mount(const char   *device_name,
              const char   *path,
              const char   *filesystemtype,
              unsigned long rwflag,
              const void   *data)
{
80008af0:	f9010113          	addi	sp,sp,-112
80008af4:	06112623          	sw	ra,108(sp)
80008af8:	06812423          	sw	s0,104(sp)
80008afc:	07010413          	addi	s0,sp,112
80008b00:	faa42623          	sw	a0,-84(s0)
80008b04:	fab42423          	sw	a1,-88(s0)
80008b08:	fac42223          	sw	a2,-92(s0)
80008b0c:	fad42023          	sw	a3,-96(s0)
80008b10:	f8e42e23          	sw	a4,-100(s0)
    const struct dfs_filesystem_ops **ops;
    struct dfs_filesystem *iter;
    struct dfs_filesystem *fs = NULL;
80008b14:	fe042223          	sw	zero,-28(s0)
    char *fullpath = NULL;
80008b18:	fc042e23          	sw	zero,-36(s0)
    rt_device_t dev_id;

    /* open specific device */
    if (device_name == NULL)
80008b1c:	fac42783          	lw	a5,-84(s0)
80008b20:	00079663          	bnez	a5,80008b2c <dfs_mount+0x3c>
    {
        /* which is a non-device filesystem mount */
        dev_id = NULL;
80008b24:	fe042023          	sw	zero,-32(s0)
80008b28:	0280006f          	j	80008b50 <dfs_mount+0x60>
    }
    else if ((dev_id = rt_device_find(device_name)) == NULL)
80008b2c:	fac42503          	lw	a0,-84(s0)
80008b30:	5e5090ef          	jal	ra,80012914 <rt_device_find>
80008b34:	fea42023          	sw	a0,-32(s0)
80008b38:	fe042783          	lw	a5,-32(s0)
80008b3c:	00079a63          	bnez	a5,80008b50 <dfs_mount+0x60>
    {
        /* no this device */
        rt_set_errno(-ENODEV);
80008b40:	fed00513          	li	a0,-19
80008b44:	0740b0ef          	jal	ra,80013bb8 <rt_set_errno>
        return -1;
80008b48:	fff00793          	li	a5,-1
80008b4c:	2c00006f          	j	80008e0c <dfs_mount+0x31c>
    }

    /* find out the specific filesystem */
    dfs_lock();
80008b50:	f55fd0ef          	jal	ra,80006aa4 <dfs_lock>

    for (ops = &filesystem_operation_table[0];
80008b54:	0007b797          	auipc	a5,0x7b
80008b58:	4ac78793          	addi	a5,a5,1196 # 80084000 <filesystem_operation_table>
80008b5c:	fef42623          	sw	a5,-20(s0)
80008b60:	03c0006f          	j	80008b9c <dfs_mount+0xac>
            ops < &filesystem_operation_table[DFS_FILESYSTEM_TYPES_MAX]; ops++)
        if ((*ops != NULL) && (strcmp((*ops)->name, filesystemtype) == 0))
80008b64:	fec42783          	lw	a5,-20(s0)
80008b68:	0007a783          	lw	a5,0(a5)
80008b6c:	02078263          	beqz	a5,80008b90 <dfs_mount+0xa0>
80008b70:	fec42783          	lw	a5,-20(s0)
80008b74:	0007a783          	lw	a5,0(a5)
80008b78:	0007a783          	lw	a5,0(a5)
80008b7c:	fa442583          	lw	a1,-92(s0)
80008b80:	00078513          	mv	a0,a5
80008b84:	f4cf70ef          	jal	ra,800002d0 <strcmp>
80008b88:	00050793          	mv	a5,a0
80008b8c:	02078263          	beqz	a5,80008bb0 <dfs_mount+0xc0>
            ops < &filesystem_operation_table[DFS_FILESYSTEM_TYPES_MAX]; ops++)
80008b90:	fec42783          	lw	a5,-20(s0)
80008b94:	00478793          	addi	a5,a5,4
80008b98:	fef42623          	sw	a5,-20(s0)
80008b9c:	fec42703          	lw	a4,-20(s0)
80008ba0:	0007b797          	auipc	a5,0x7b
80008ba4:	46878793          	addi	a5,a5,1128 # 80084008 <_fdtab>
80008ba8:	faf76ee3          	bltu	a4,a5,80008b64 <dfs_mount+0x74>
80008bac:	0080006f          	j	80008bb4 <dfs_mount+0xc4>
            break;
80008bb0:	00000013          	nop

    dfs_unlock();
80008bb4:	f45fd0ef          	jal	ra,80006af8 <dfs_unlock>

    if (ops == &filesystem_operation_table[DFS_FILESYSTEM_TYPES_MAX])
80008bb8:	fec42703          	lw	a4,-20(s0)
80008bbc:	0007b797          	auipc	a5,0x7b
80008bc0:	44c78793          	addi	a5,a5,1100 # 80084008 <_fdtab>
80008bc4:	00f71a63          	bne	a4,a5,80008bd8 <dfs_mount+0xe8>
    {
        /* can't find filesystem */
        rt_set_errno(-ENODEV);
80008bc8:	fed00513          	li	a0,-19
80008bcc:	7ed0a0ef          	jal	ra,80013bb8 <rt_set_errno>
        return -1;
80008bd0:	fff00793          	li	a5,-1
80008bd4:	2380006f          	j	80008e0c <dfs_mount+0x31c>
    }

    /* check if there is mount implementation */
    if ((*ops == NULL) || ((*ops)->mount == NULL))
80008bd8:	fec42783          	lw	a5,-20(s0)
80008bdc:	0007a783          	lw	a5,0(a5)
80008be0:	00078a63          	beqz	a5,80008bf4 <dfs_mount+0x104>
80008be4:	fec42783          	lw	a5,-20(s0)
80008be8:	0007a783          	lw	a5,0(a5)
80008bec:	00c7a783          	lw	a5,12(a5)
80008bf0:	00079a63          	bnez	a5,80008c04 <dfs_mount+0x114>
    {
        rt_set_errno(-ENOSYS);
80008bf4:	fa800513          	li	a0,-88
80008bf8:	7c10a0ef          	jal	ra,80013bb8 <rt_set_errno>
        return -1;
80008bfc:	fff00793          	li	a5,-1
80008c00:	20c0006f          	j	80008e0c <dfs_mount+0x31c>
    }

    /* make full path for special file */
    fullpath = dfs_normalize_path(NULL, path);
80008c04:	fa842583          	lw	a1,-88(s0)
80008c08:	00000513          	li	a0,0
80008c0c:	d5cfe0ef          	jal	ra,80007168 <dfs_normalize_path>
80008c10:	fca42e23          	sw	a0,-36(s0)
    if (fullpath == NULL) /* not an abstract path */
80008c14:	fdc42783          	lw	a5,-36(s0)
80008c18:	00079a63          	bnez	a5,80008c2c <dfs_mount+0x13c>
    {
        rt_set_errno(-ENOTDIR);
80008c1c:	fec00513          	li	a0,-20
80008c20:	7990a0ef          	jal	ra,80013bb8 <rt_set_errno>
        return -1;
80008c24:	fff00793          	li	a5,-1
80008c28:	1e40006f          	j	80008e0c <dfs_mount+0x31c>
    }

    /* Check if the path exists or not, raw APIs call, fixme */
    if ((strcmp(fullpath, "/") != 0) && (strcmp(fullpath, "/dev") != 0))
80008c2c:	0001d597          	auipc	a1,0x1d
80008c30:	34458593          	addi	a1,a1,836 # 80025f70 <raise+0x37c>
80008c34:	fdc42503          	lw	a0,-36(s0)
80008c38:	e98f70ef          	jal	ra,800002d0 <strcmp>
80008c3c:	00050793          	mv	a5,a0
80008c40:	04078e63          	beqz	a5,80008c9c <dfs_mount+0x1ac>
80008c44:	0001d597          	auipc	a1,0x1d
80008c48:	33058593          	addi	a1,a1,816 # 80025f74 <raise+0x380>
80008c4c:	fdc42503          	lw	a0,-36(s0)
80008c50:	e80f70ef          	jal	ra,800002d0 <strcmp>
80008c54:	00050793          	mv	a5,a0
80008c58:	04078263          	beqz	a5,80008c9c <dfs_mount+0x1ac>
    {
        struct dfs_fd fd;

        if (dfs_file_open(&fd, fullpath, O_RDONLY | O_DIRECTORY) < 0)
80008c5c:	fb840793          	addi	a5,s0,-72
80008c60:	00200637          	lui	a2,0x200
80008c64:	fdc42583          	lw	a1,-36(s0)
80008c68:	00078513          	mv	a0,a5
80008c6c:	b09fe0ef          	jal	ra,80007774 <dfs_file_open>
80008c70:	00050793          	mv	a5,a0
80008c74:	0007de63          	bgez	a5,80008c90 <dfs_mount+0x1a0>
        {
            rt_free(fullpath);
80008c78:	fdc42503          	lw	a0,-36(s0)
80008c7c:	19d0c0ef          	jal	ra,80015618 <rt_free>
            rt_set_errno(-ENOTDIR);
80008c80:	fec00513          	li	a0,-20
80008c84:	7350a0ef          	jal	ra,80013bb8 <rt_set_errno>

            return -1;
80008c88:	fff00793          	li	a5,-1
80008c8c:	1800006f          	j	80008e0c <dfs_mount+0x31c>
        }
        dfs_file_close(&fd);
80008c90:	fb840793          	addi	a5,s0,-72
80008c94:	00078513          	mv	a0,a5
80008c98:	d01fe0ef          	jal	ra,80007998 <dfs_file_close>
    }

    /* check whether the file system mounted or not  in the filesystem table
     * if it is unmounted yet, find out an empty entry */
    dfs_lock();
80008c9c:	e09fd0ef          	jal	ra,80006aa4 <dfs_lock>

    for (iter = &filesystem_table[0];
80008ca0:	0007b797          	auipc	a5,0x7b
80008ca4:	42c78793          	addi	a5,a5,1068 # 800840cc <filesystem_table>
80008ca8:	fef42423          	sw	a5,-24(s0)
80008cac:	0580006f          	j	80008d04 <dfs_mount+0x214>
            iter < &filesystem_table[DFS_FILESYSTEMS_MAX]; iter++)
    {
        /* check if it is an empty filesystem table entry? if it is, save fs */
        if (iter->ops == NULL)
80008cb0:	fe842783          	lw	a5,-24(s0)
80008cb4:	0087a783          	lw	a5,8(a5)
80008cb8:	00079c63          	bnez	a5,80008cd0 <dfs_mount+0x1e0>
            (fs == NULL) ? (fs = iter) : 0;
80008cbc:	fe442783          	lw	a5,-28(s0)
80008cc0:	02079c63          	bnez	a5,80008cf8 <dfs_mount+0x208>
80008cc4:	fe842783          	lw	a5,-24(s0)
80008cc8:	fef42223          	sw	a5,-28(s0)
80008ccc:	02c0006f          	j	80008cf8 <dfs_mount+0x208>
        /* check if the PATH is mounted */
        else if (strcmp(iter->path, path) == 0)
80008cd0:	fe842783          	lw	a5,-24(s0)
80008cd4:	0047a783          	lw	a5,4(a5)
80008cd8:	fa842583          	lw	a1,-88(s0)
80008cdc:	00078513          	mv	a0,a5
80008ce0:	df0f70ef          	jal	ra,800002d0 <strcmp>
80008ce4:	00050793          	mv	a5,a0
80008ce8:	00079863          	bnez	a5,80008cf8 <dfs_mount+0x208>
        {
            rt_set_errno(-EINVAL);
80008cec:	fea00513          	li	a0,-22
80008cf0:	6c90a0ef          	jal	ra,80013bb8 <rt_set_errno>
            goto err1;
80008cf4:	1080006f          	j	80008dfc <dfs_mount+0x30c>
            iter < &filesystem_table[DFS_FILESYSTEMS_MAX]; iter++)
80008cf8:	fe842783          	lw	a5,-24(s0)
80008cfc:	01078793          	addi	a5,a5,16
80008d00:	fef42423          	sw	a5,-24(s0)
80008d04:	fe842703          	lw	a4,-24(s0)
80008d08:	0007b797          	auipc	a5,0x7b
80008d0c:	3e478793          	addi	a5,a5,996 # 800840ec <fslock>
80008d10:	faf760e3          	bltu	a4,a5,80008cb0 <dfs_mount+0x1c0>
        }
    }

    if ((fs == NULL) && (iter == &filesystem_table[DFS_FILESYSTEMS_MAX]))
80008d14:	fe442783          	lw	a5,-28(s0)
80008d18:	02079063          	bnez	a5,80008d38 <dfs_mount+0x248>
80008d1c:	fe842703          	lw	a4,-24(s0)
80008d20:	0007b797          	auipc	a5,0x7b
80008d24:	3cc78793          	addi	a5,a5,972 # 800840ec <fslock>
80008d28:	00f71863          	bne	a4,a5,80008d38 <dfs_mount+0x248>
    {
        rt_set_errno(-ENOSPC);
80008d2c:	fe400513          	li	a0,-28
80008d30:	6890a0ef          	jal	ra,80013bb8 <rt_set_errno>
        LOG_E("There is no space to mount this file system (%s).", filesystemtype);
        goto err1;
80008d34:	0c80006f          	j	80008dfc <dfs_mount+0x30c>
    }

    /* register file system */
    fs->path   = fullpath;
80008d38:	fe442783          	lw	a5,-28(s0)
80008d3c:	fdc42703          	lw	a4,-36(s0)
80008d40:	00e7a223          	sw	a4,4(a5)
    fs->ops    = *ops;
80008d44:	fec42783          	lw	a5,-20(s0)
80008d48:	0007a703          	lw	a4,0(a5)
80008d4c:	fe442783          	lw	a5,-28(s0)
80008d50:	00e7a423          	sw	a4,8(a5)
    fs->dev_id = dev_id;
80008d54:	fe442783          	lw	a5,-28(s0)
80008d58:	fe042703          	lw	a4,-32(s0)
80008d5c:	00e7a023          	sw	a4,0(a5)
    /* release filesystem_table lock */
    dfs_unlock();
80008d60:	d99fd0ef          	jal	ra,80006af8 <dfs_unlock>

    /* open device, but do not check the status of device */
    if (dev_id != NULL)
80008d64:	fe042783          	lw	a5,-32(s0)
80008d68:	02078c63          	beqz	a5,80008da0 <dfs_mount+0x2b0>
    {
        if (rt_device_open(fs->dev_id,
80008d6c:	fe442783          	lw	a5,-28(s0)
80008d70:	0007a783          	lw	a5,0(a5)
80008d74:	00300593          	li	a1,3
80008d78:	00078513          	mv	a0,a5
80008d7c:	3d1090ef          	jal	ra,8001294c <rt_device_open>
80008d80:	00050793          	mv	a5,a0
80008d84:	00078e63          	beqz	a5,80008da0 <dfs_mount+0x2b0>
                           RT_DEVICE_OFLAG_RDWR) != RT_EOK)
        {
            /* The underlying device has error, clear the entry. */
            dfs_lock();
80008d88:	d1dfd0ef          	jal	ra,80006aa4 <dfs_lock>
            rt_memset(fs, 0, sizeof(struct dfs_filesystem));
80008d8c:	01000613          	li	a2,16
80008d90:	00000593          	li	a1,0
80008d94:	fe442503          	lw	a0,-28(s0)
80008d98:	6f50a0ef          	jal	ra,80013c8c <rt_memset>

            goto err1;
80008d9c:	0600006f          	j	80008dfc <dfs_mount+0x30c>
        }
    }

    /* call mount of this filesystem */
    if ((*ops)->mount(fs, rwflag, data) < 0)
80008da0:	fec42783          	lw	a5,-20(s0)
80008da4:	0007a783          	lw	a5,0(a5)
80008da8:	00c7a783          	lw	a5,12(a5)
80008dac:	f9c42603          	lw	a2,-100(s0)
80008db0:	fa042583          	lw	a1,-96(s0)
80008db4:	fe442503          	lw	a0,-28(s0)
80008db8:	000780e7          	jalr	a5
80008dbc:	00050793          	mv	a5,a0
80008dc0:	0207da63          	bgez	a5,80008df4 <dfs_mount+0x304>
    {
        /* close device */
        if (dev_id != NULL)
80008dc4:	fe042783          	lw	a5,-32(s0)
80008dc8:	00078a63          	beqz	a5,80008ddc <dfs_mount+0x2ec>
            rt_device_close(fs->dev_id);
80008dcc:	fe442783          	lw	a5,-28(s0)
80008dd0:	0007a783          	lw	a5,0(a5)
80008dd4:	00078513          	mv	a0,a5
80008dd8:	4c9090ef          	jal	ra,80012aa0 <rt_device_close>

        /* mount failed */
        dfs_lock();
80008ddc:	cc9fd0ef          	jal	ra,80006aa4 <dfs_lock>
        /* clear filesystem table entry */
        rt_memset(fs, 0, sizeof(struct dfs_filesystem));
80008de0:	01000613          	li	a2,16
80008de4:	00000593          	li	a1,0
80008de8:	fe442503          	lw	a0,-28(s0)
80008dec:	6a10a0ef          	jal	ra,80013c8c <rt_memset>

        goto err1;
80008df0:	00c0006f          	j	80008dfc <dfs_mount+0x30c>
    }

    return 0;
80008df4:	00000793          	li	a5,0
80008df8:	0140006f          	j	80008e0c <dfs_mount+0x31c>

err1:
    dfs_unlock();
80008dfc:	cfdfd0ef          	jal	ra,80006af8 <dfs_unlock>
    rt_free(fullpath);
80008e00:	fdc42503          	lw	a0,-36(s0)
80008e04:	0150c0ef          	jal	ra,80015618 <rt_free>

    return -1;
80008e08:	fff00793          	li	a5,-1
}
80008e0c:	00078513          	mv	a0,a5
80008e10:	06c12083          	lw	ra,108(sp)
80008e14:	06812403          	lw	s0,104(sp)
80008e18:	07010113          	addi	sp,sp,112
80008e1c:	00008067          	ret

80008e20 <dfs_unmount>:
 * @param specialfile the specified path which mounted a file system.
 *
 * @return 0 on successful or -1 on failed.
 */
int dfs_unmount(const char *specialfile)
{
80008e20:	fd010113          	addi	sp,sp,-48
80008e24:	02112623          	sw	ra,44(sp)
80008e28:	02812423          	sw	s0,40(sp)
80008e2c:	03010413          	addi	s0,sp,48
80008e30:	fca42e23          	sw	a0,-36(s0)
    char *fullpath;
    struct dfs_filesystem *iter;
    struct dfs_filesystem *fs = NULL;
80008e34:	fe042423          	sw	zero,-24(s0)

    fullpath = dfs_normalize_path(NULL, specialfile);
80008e38:	fdc42583          	lw	a1,-36(s0)
80008e3c:	00000513          	li	a0,0
80008e40:	b28fe0ef          	jal	ra,80007168 <dfs_normalize_path>
80008e44:	fea42223          	sw	a0,-28(s0)
    if (fullpath == NULL)
80008e48:	fe442783          	lw	a5,-28(s0)
80008e4c:	00079a63          	bnez	a5,80008e60 <dfs_unmount+0x40>
    {
        rt_set_errno(-ENOTDIR);
80008e50:	fec00513          	li	a0,-20
80008e54:	5650a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
80008e58:	fff00793          	li	a5,-1
80008e5c:	10c0006f          	j	80008f68 <dfs_unmount+0x148>
    }

    /* lock filesystem */
    dfs_lock();
80008e60:	c45fd0ef          	jal	ra,80006aa4 <dfs_lock>

    for (iter = &filesystem_table[0];
80008e64:	0007b797          	auipc	a5,0x7b
80008e68:	26878793          	addi	a5,a5,616 # 800840cc <filesystem_table>
80008e6c:	fef42623          	sw	a5,-20(s0)
80008e70:	0440006f          	j	80008eb4 <dfs_unmount+0x94>
            iter < &filesystem_table[DFS_FILESYSTEMS_MAX]; iter++)
    {
        /* check if the PATH is mounted */
        if ((iter->path != NULL) && (strcmp(iter->path, fullpath) == 0))
80008e74:	fec42783          	lw	a5,-20(s0)
80008e78:	0047a783          	lw	a5,4(a5)
80008e7c:	02078663          	beqz	a5,80008ea8 <dfs_unmount+0x88>
80008e80:	fec42783          	lw	a5,-20(s0)
80008e84:	0047a783          	lw	a5,4(a5)
80008e88:	fe442583          	lw	a1,-28(s0)
80008e8c:	00078513          	mv	a0,a5
80008e90:	c40f70ef          	jal	ra,800002d0 <strcmp>
80008e94:	00050793          	mv	a5,a0
80008e98:	00079863          	bnez	a5,80008ea8 <dfs_unmount+0x88>
        {
            fs = iter;
80008e9c:	fec42783          	lw	a5,-20(s0)
80008ea0:	fef42423          	sw	a5,-24(s0)
            break;
80008ea4:	0200006f          	j	80008ec4 <dfs_unmount+0xa4>
            iter < &filesystem_table[DFS_FILESYSTEMS_MAX]; iter++)
80008ea8:	fec42783          	lw	a5,-20(s0)
80008eac:	01078793          	addi	a5,a5,16
80008eb0:	fef42623          	sw	a5,-20(s0)
80008eb4:	fec42703          	lw	a4,-20(s0)
80008eb8:	0007b797          	auipc	a5,0x7b
80008ebc:	23478793          	addi	a5,a5,564 # 800840ec <fslock>
80008ec0:	faf76ae3          	bltu	a4,a5,80008e74 <dfs_unmount+0x54>
        }
    }

    if (fs == NULL ||
80008ec4:	fe842783          	lw	a5,-24(s0)
80008ec8:	08078663          	beqz	a5,80008f54 <dfs_unmount+0x134>
        fs->ops->unmount == NULL ||
80008ecc:	fe842783          	lw	a5,-24(s0)
80008ed0:	0087a783          	lw	a5,8(a5)
80008ed4:	0107a783          	lw	a5,16(a5)
    if (fs == NULL ||
80008ed8:	06078e63          	beqz	a5,80008f54 <dfs_unmount+0x134>
        fs->ops->unmount(fs) < 0)
80008edc:	fe842783          	lw	a5,-24(s0)
80008ee0:	0087a783          	lw	a5,8(a5)
80008ee4:	0107a783          	lw	a5,16(a5)
80008ee8:	fe842503          	lw	a0,-24(s0)
80008eec:	000780e7          	jalr	a5
80008ef0:	00050793          	mv	a5,a0
        fs->ops->unmount == NULL ||
80008ef4:	0607c063          	bltz	a5,80008f54 <dfs_unmount+0x134>
    {
        goto err1;
    }

    /* close device, but do not check the status of device */
    if (fs->dev_id != NULL)
80008ef8:	fe842783          	lw	a5,-24(s0)
80008efc:	0007a783          	lw	a5,0(a5)
80008f00:	00078a63          	beqz	a5,80008f14 <dfs_unmount+0xf4>
        rt_device_close(fs->dev_id);
80008f04:	fe842783          	lw	a5,-24(s0)
80008f08:	0007a783          	lw	a5,0(a5)
80008f0c:	00078513          	mv	a0,a5
80008f10:	391090ef          	jal	ra,80012aa0 <rt_device_close>

    if (fs->path != NULL)
80008f14:	fe842783          	lw	a5,-24(s0)
80008f18:	0047a783          	lw	a5,4(a5)
80008f1c:	00078a63          	beqz	a5,80008f30 <dfs_unmount+0x110>
        rt_free(fs->path);
80008f20:	fe842783          	lw	a5,-24(s0)
80008f24:	0047a783          	lw	a5,4(a5)
80008f28:	00078513          	mv	a0,a5
80008f2c:	6ec0c0ef          	jal	ra,80015618 <rt_free>

    /* clear this filesystem table entry */
    rt_memset(fs, 0, sizeof(struct dfs_filesystem));
80008f30:	01000613          	li	a2,16
80008f34:	00000593          	li	a1,0
80008f38:	fe842503          	lw	a0,-24(s0)
80008f3c:	5510a0ef          	jal	ra,80013c8c <rt_memset>

    dfs_unlock();
80008f40:	bb9fd0ef          	jal	ra,80006af8 <dfs_unlock>
    rt_free(fullpath);
80008f44:	fe442503          	lw	a0,-28(s0)
80008f48:	6d00c0ef          	jal	ra,80015618 <rt_free>

    return 0;
80008f4c:	00000793          	li	a5,0
80008f50:	0180006f          	j	80008f68 <dfs_unmount+0x148>
        goto err1;
80008f54:	00000013          	nop

err1:
    dfs_unlock();
80008f58:	ba1fd0ef          	jal	ra,80006af8 <dfs_unlock>
    rt_free(fullpath);
80008f5c:	fe442503          	lw	a0,-28(s0)
80008f60:	6b80c0ef          	jal	ra,80015618 <rt_free>

    return -1;
80008f64:	fff00793          	li	a5,-1
}
80008f68:	00078513          	mv	a0,a5
80008f6c:	02c12083          	lw	ra,44(sp)
80008f70:	02812403          	lw	s0,40(sp)
80008f74:	03010113          	addi	sp,sp,48
80008f78:	00008067          	ret

80008f7c <dfs_mkfs>:
 * @param device_name the special device name
 *
 * @return 0 on successful, otherwise failed.
 */
int dfs_mkfs(const char *fs_name, const char *device_name)
{
80008f7c:	fd010113          	addi	sp,sp,-48
80008f80:	02112623          	sw	ra,44(sp)
80008f84:	02812423          	sw	s0,40(sp)
80008f88:	03010413          	addi	s0,sp,48
80008f8c:	fca42e23          	sw	a0,-36(s0)
80008f90:	fcb42c23          	sw	a1,-40(s0)
    int index;
    rt_device_t dev_id = NULL;
80008f94:	fe042423          	sw	zero,-24(s0)

    /* check device name, and it should not be NULL */
    if (device_name != NULL)
80008f98:	fd842783          	lw	a5,-40(s0)
80008f9c:	00078863          	beqz	a5,80008fac <dfs_mkfs+0x30>
        dev_id = rt_device_find(device_name);
80008fa0:	fd842503          	lw	a0,-40(s0)
80008fa4:	171090ef          	jal	ra,80012914 <rt_device_find>
80008fa8:	fea42423          	sw	a0,-24(s0)

    if (dev_id == NULL)
80008fac:	fe842783          	lw	a5,-24(s0)
80008fb0:	00079a63          	bnez	a5,80008fc4 <dfs_mkfs+0x48>
    {
        rt_set_errno(-ENODEV);
80008fb4:	fed00513          	li	a0,-19
80008fb8:	4010a0ef          	jal	ra,80013bb8 <rt_set_errno>
        LOG_E("Device (%s) was not found", device_name);
        return -1;
80008fbc:	fff00793          	li	a5,-1
80008fc0:	0e00006f          	j	800090a0 <dfs_mkfs+0x124>
    }

    /* lock file system */
    dfs_lock();
80008fc4:	ae1fd0ef          	jal	ra,80006aa4 <dfs_lock>
    /* find the file system operations */
    for (index = 0; index < DFS_FILESYSTEM_TYPES_MAX; index ++)
80008fc8:	fe042623          	sw	zero,-20(s0)
80008fcc:	05c0006f          	j	80009028 <dfs_mkfs+0xac>
    {
        if (filesystem_operation_table[index] != NULL &&
80008fd0:	0007b717          	auipc	a4,0x7b
80008fd4:	03070713          	addi	a4,a4,48 # 80084000 <filesystem_operation_table>
80008fd8:	fec42783          	lw	a5,-20(s0)
80008fdc:	00279793          	slli	a5,a5,0x2
80008fe0:	00f707b3          	add	a5,a4,a5
80008fe4:	0007a783          	lw	a5,0(a5)
80008fe8:	02078a63          	beqz	a5,8000901c <dfs_mkfs+0xa0>
            strcmp(filesystem_operation_table[index]->name, fs_name) == 0)
80008fec:	0007b717          	auipc	a4,0x7b
80008ff0:	01470713          	addi	a4,a4,20 # 80084000 <filesystem_operation_table>
80008ff4:	fec42783          	lw	a5,-20(s0)
80008ff8:	00279793          	slli	a5,a5,0x2
80008ffc:	00f707b3          	add	a5,a4,a5
80009000:	0007a783          	lw	a5,0(a5)
80009004:	0007a783          	lw	a5,0(a5)
80009008:	fdc42583          	lw	a1,-36(s0)
8000900c:	00078513          	mv	a0,a5
80009010:	ac0f70ef          	jal	ra,800002d0 <strcmp>
80009014:	00050793          	mv	a5,a0
        if (filesystem_operation_table[index] != NULL &&
80009018:	02078063          	beqz	a5,80009038 <dfs_mkfs+0xbc>
    for (index = 0; index < DFS_FILESYSTEM_TYPES_MAX; index ++)
8000901c:	fec42783          	lw	a5,-20(s0)
80009020:	00178793          	addi	a5,a5,1
80009024:	fef42623          	sw	a5,-20(s0)
80009028:	fec42703          	lw	a4,-20(s0)
8000902c:	00100793          	li	a5,1
80009030:	fae7d0e3          	bge	a5,a4,80008fd0 <dfs_mkfs+0x54>
80009034:	0080006f          	j	8000903c <dfs_mkfs+0xc0>
            break;
80009038:	00000013          	nop
    }
    dfs_unlock();
8000903c:	abdfd0ef          	jal	ra,80006af8 <dfs_unlock>

    if (index < DFS_FILESYSTEM_TYPES_MAX)
80009040:	fec42703          	lw	a4,-20(s0)
80009044:	00100793          	li	a5,1
80009048:	04e7ca63          	blt	a5,a4,8000909c <dfs_mkfs+0x120>
    {
        /* find file system operation */
        const struct dfs_filesystem_ops *ops = filesystem_operation_table[index];
8000904c:	0007b717          	auipc	a4,0x7b
80009050:	fb470713          	addi	a4,a4,-76 # 80084000 <filesystem_operation_table>
80009054:	fec42783          	lw	a5,-20(s0)
80009058:	00279793          	slli	a5,a5,0x2
8000905c:	00f707b3          	add	a5,a4,a5
80009060:	0007a783          	lw	a5,0(a5)
80009064:	fef42223          	sw	a5,-28(s0)
        if (ops->mkfs == NULL)
80009068:	fe442783          	lw	a5,-28(s0)
8000906c:	0147a783          	lw	a5,20(a5)
80009070:	00079a63          	bnez	a5,80009084 <dfs_mkfs+0x108>
        {
            LOG_E("The file system (%s) mkfs function was not implement", fs_name);
            rt_set_errno(-ENOSYS);
80009074:	fa800513          	li	a0,-88
80009078:	3410a0ef          	jal	ra,80013bb8 <rt_set_errno>
            return -1;
8000907c:	fff00793          	li	a5,-1
80009080:	0200006f          	j	800090a0 <dfs_mkfs+0x124>
        }

        return ops->mkfs(dev_id);
80009084:	fe442783          	lw	a5,-28(s0)
80009088:	0147a783          	lw	a5,20(a5)
8000908c:	fe842503          	lw	a0,-24(s0)
80009090:	000780e7          	jalr	a5
80009094:	00050793          	mv	a5,a0
80009098:	0080006f          	j	800090a0 <dfs_mkfs+0x124>
    }

    LOG_E("File system (%s) was not found.", fs_name);

    return -1;
8000909c:	fff00793          	li	a5,-1
}
800090a0:	00078513          	mv	a0,a5
800090a4:	02c12083          	lw	ra,44(sp)
800090a8:	02812403          	lw	s0,40(sp)
800090ac:	03010113          	addi	sp,sp,48
800090b0:	00008067          	ret

800090b4 <dfs_statfs>:
 * @param buffer the buffer to save the returned information.
 *
 * @return 0 on successful, others on failed.
 */
int dfs_statfs(const char *path, struct statfs *buffer)
{
800090b4:	fd010113          	addi	sp,sp,-48
800090b8:	02112623          	sw	ra,44(sp)
800090bc:	02812423          	sw	s0,40(sp)
800090c0:	03010413          	addi	s0,sp,48
800090c4:	fca42e23          	sw	a0,-36(s0)
800090c8:	fcb42c23          	sw	a1,-40(s0)
    struct dfs_filesystem *fs;

    fs = dfs_filesystem_lookup(path);
800090cc:	fdc42503          	lw	a0,-36(s0)
800090d0:	901ff0ef          	jal	ra,800089d0 <dfs_filesystem_lookup>
800090d4:	fea42623          	sw	a0,-20(s0)
    if (fs != NULL)
800090d8:	fec42783          	lw	a5,-20(s0)
800090dc:	02078a63          	beqz	a5,80009110 <dfs_statfs+0x5c>
    {
        if (fs->ops->statfs != NULL)
800090e0:	fec42783          	lw	a5,-20(s0)
800090e4:	0087a783          	lw	a5,8(a5)
800090e8:	0187a783          	lw	a5,24(a5)
800090ec:	02078263          	beqz	a5,80009110 <dfs_statfs+0x5c>
            return fs->ops->statfs(fs, buffer);
800090f0:	fec42783          	lw	a5,-20(s0)
800090f4:	0087a783          	lw	a5,8(a5)
800090f8:	0187a783          	lw	a5,24(a5)
800090fc:	fd842583          	lw	a1,-40(s0)
80009100:	fec42503          	lw	a0,-20(s0)
80009104:	000780e7          	jalr	a5
80009108:	00050793          	mv	a5,a0
8000910c:	0080006f          	j	80009114 <dfs_statfs+0x60>
    }

    return -1;
80009110:	fff00793          	li	a5,-1
}
80009114:	00078513          	mv	a0,a5
80009118:	02c12083          	lw	ra,44(sp)
8000911c:	02812403          	lw	s0,40(sp)
80009120:	03010113          	addi	sp,sp,48
80009124:	00008067          	ret

80009128 <df>:
    dfs_mkfs(fs_name, device_name);
}
FINSH_FUNCTION_EXPORT(mkfs, make a file system);

int df(const char *path)
{
80009128:	f3010113          	addi	sp,sp,-208
8000912c:	0c112623          	sw	ra,204(sp)
80009130:	0c812423          	sw	s0,200(sp)
80009134:	0d212223          	sw	s2,196(sp)
80009138:	0d312023          	sw	s3,192(sp)
8000913c:	0b412e23          	sw	s4,188(sp)
80009140:	0b512c23          	sw	s5,184(sp)
80009144:	0b612a23          	sw	s6,180(sp)
80009148:	0b712823          	sw	s7,176(sp)
8000914c:	0b812623          	sw	s8,172(sp)
80009150:	0b912423          	sw	s9,168(sp)
80009154:	0ba12223          	sw	s10,164(sp)
80009158:	0bb12023          	sw	s11,160(sp)
8000915c:	0d010413          	addi	s0,sp,208
80009160:	f8a42e23          	sw	a0,-100(s0)
    int result;
    int minor = 0;
80009164:	fc042623          	sw	zero,-52(s0)
    long long cap;
    struct statfs buffer;

    int unit_index = 0;
80009168:	fa042e23          	sw	zero,-68(s0)
    char *unit_str[] = {"KB", "MB", "GB"};
8000916c:	0001d797          	auipc	a5,0x1d
80009170:	e1078793          	addi	a5,a5,-496 # 80025f7c <raise+0x388>
80009174:	faf42023          	sw	a5,-96(s0)
80009178:	0001d797          	auipc	a5,0x1d
8000917c:	e0878793          	addi	a5,a5,-504 # 80025f80 <raise+0x38c>
80009180:	faf42223          	sw	a5,-92(s0)
80009184:	0001d797          	auipc	a5,0x1d
80009188:	e0078793          	addi	a5,a5,-512 # 80025f84 <raise+0x390>
8000918c:	faf42423          	sw	a5,-88(s0)

    result = dfs_statfs(path ? path : NULL, &buffer);
80009190:	fac40793          	addi	a5,s0,-84
80009194:	00078593          	mv	a1,a5
80009198:	f9c42503          	lw	a0,-100(s0)
8000919c:	f19ff0ef          	jal	ra,800090b4 <dfs_statfs>
800091a0:	faa42c23          	sw	a0,-72(s0)
    if (result != 0)
800091a4:	fb842783          	lw	a5,-72(s0)
800091a8:	00078c63          	beqz	a5,800091c0 <df+0x98>
    {
        rt_kprintf("dfs_statfs failed.\n");
800091ac:	0001d517          	auipc	a0,0x1d
800091b0:	ddc50513          	addi	a0,a0,-548 # 80025f88 <raise+0x394>
800091b4:	0740c0ef          	jal	ra,80015228 <rt_kprintf>
        return -1;
800091b8:	fff00793          	li	a5,-1
800091bc:	3700006f          	j	8000952c <df+0x404>
    }

    cap = ((long long)buffer.f_bsize) * ((long long)buffer.f_bfree) / 1024LL;
800091c0:	fac42783          	lw	a5,-84(s0)
800091c4:	00078c13          	mv	s8,a5
800091c8:	00000c93          	li	s9,0
800091cc:	fb442783          	lw	a5,-76(s0)
800091d0:	00078b13          	mv	s6,a5
800091d4:	00000b93          	li	s7,0
800091d8:	036c8733          	mul	a4,s9,s6
800091dc:	038b87b3          	mul	a5,s7,s8
800091e0:	00f70733          	add	a4,a4,a5
800091e4:	036c07b3          	mul	a5,s8,s6
800091e8:	036c3ab3          	mulhu	s5,s8,s6
800091ec:	00078a13          	mv	s4,a5
800091f0:	015707b3          	add	a5,a4,s5
800091f4:	00078a93          	mv	s5,a5
800091f8:	41fad793          	srai	a5,s5,0x1f
800091fc:	f6f42423          	sw	a5,-152(s0)
80009200:	41fad793          	srai	a5,s5,0x1f
80009204:	f6f42623          	sw	a5,-148(s0)
80009208:	f6842683          	lw	a3,-152(s0)
8000920c:	f6c42703          	lw	a4,-148(s0)
80009210:	00068793          	mv	a5,a3
80009214:	3ff7fd13          	andi	s10,a5,1023
80009218:	00070793          	mv	a5,a4
8000921c:	0007fd93          	andi	s11,a5,0
80009220:	014d0733          	add	a4,s10,s4
80009224:	00070693          	mv	a3,a4
80009228:	01a6b6b3          	sltu	a3,a3,s10
8000922c:	015d87b3          	add	a5,s11,s5
80009230:	00f686b3          	add	a3,a3,a5
80009234:	00068793          	mv	a5,a3
80009238:	01679693          	slli	a3,a5,0x16
8000923c:	00a75613          	srli	a2,a4,0xa
80009240:	f8c42823          	sw	a2,-112(s0)
80009244:	f9042603          	lw	a2,-112(s0)
80009248:	00c6e6b3          	or	a3,a3,a2
8000924c:	f8d42823          	sw	a3,-112(s0)
80009250:	40a7d793          	srai	a5,a5,0xa
80009254:	f8f42a23          	sw	a5,-108(s0)
80009258:	f9042783          	lw	a5,-112(s0)
8000925c:	f9442803          	lw	a6,-108(s0)
80009260:	fcf42023          	sw	a5,-64(s0)
80009264:	fd042223          	sw	a6,-60(s0)
    for (unit_index = 0; unit_index < 2; unit_index ++)
80009268:	fa042e23          	sw	zero,-68(s0)
8000926c:	2780006f          	j	800094e4 <df+0x3bc>
    {
        if (cap < 1024) break;
80009270:	fc442783          	lw	a5,-60(s0)
80009274:	00f04c63          	bgtz	a5,8000928c <df+0x164>
80009278:	fc442783          	lw	a5,-60(s0)
8000927c:	26079c63          	bnez	a5,800094f4 <df+0x3cc>
80009280:	fc042703          	lw	a4,-64(s0)
80009284:	3ff00793          	li	a5,1023
80009288:	26e7f663          	bgeu	a5,a4,800094f4 <df+0x3cc>

        minor = (cap % 1024) * 10 / 1024; /* only one decimal point */
8000928c:	fc042703          	lw	a4,-64(s0)
80009290:	fc442783          	lw	a5,-60(s0)
80009294:	41f7d913          	srai	s2,a5,0x1f
80009298:	41f7d993          	srai	s3,a5,0x1f
8000929c:	012746b3          	xor	a3,a4,s2
800092a0:	f6d42023          	sw	a3,-160(s0)
800092a4:	0137c7b3          	xor	a5,a5,s3
800092a8:	f6f42223          	sw	a5,-156(s0)
800092ac:	f6042503          	lw	a0,-160(s0)
800092b0:	f6442583          	lw	a1,-156(s0)
800092b4:	00050693          	mv	a3,a0
800092b8:	41268733          	sub	a4,a3,s2
800092bc:	00070693          	mv	a3,a4
800092c0:	00050613          	mv	a2,a0
800092c4:	00d636b3          	sltu	a3,a2,a3
800092c8:	00058613          	mv	a2,a1
800092cc:	413607b3          	sub	a5,a2,s3
800092d0:	40d786b3          	sub	a3,a5,a3
800092d4:	00068793          	mv	a5,a3
800092d8:	3ff77693          	andi	a3,a4,1023
800092dc:	f4d42c23          	sw	a3,-168(s0)
800092e0:	0007f793          	andi	a5,a5,0
800092e4:	f4f42e23          	sw	a5,-164(s0)
800092e8:	f5842683          	lw	a3,-168(s0)
800092ec:	f5c42703          	lw	a4,-164(s0)
800092f0:	00068793          	mv	a5,a3
800092f4:	0127c7b3          	xor	a5,a5,s2
800092f8:	f4f42823          	sw	a5,-176(s0)
800092fc:	00070793          	mv	a5,a4
80009300:	0137c7b3          	xor	a5,a5,s3
80009304:	f4f42a23          	sw	a5,-172(s0)
80009308:	f5042503          	lw	a0,-176(s0)
8000930c:	f5442583          	lw	a1,-172(s0)
80009310:	00050693          	mv	a3,a0
80009314:	41268733          	sub	a4,a3,s2
80009318:	00070693          	mv	a3,a4
8000931c:	00050613          	mv	a2,a0
80009320:	00d636b3          	sltu	a3,a2,a3
80009324:	00058613          	mv	a2,a1
80009328:	413607b3          	sub	a5,a2,s3
8000932c:	40d786b3          	sub	a3,a5,a3
80009330:	00068793          	mv	a5,a3
80009334:	00070813          	mv	a6,a4
80009338:	00078893          	mv	a7,a5
8000933c:	00080713          	mv	a4,a6
80009340:	00088793          	mv	a5,a7
80009344:	01e75693          	srli	a3,a4,0x1e
80009348:	00279613          	slli	a2,a5,0x2
8000934c:	f8c42623          	sw	a2,-116(s0)
80009350:	f8c42603          	lw	a2,-116(s0)
80009354:	00c6e6b3          	or	a3,a3,a2
80009358:	f8d42623          	sw	a3,-116(s0)
8000935c:	00271793          	slli	a5,a4,0x2
80009360:	f8f42423          	sw	a5,-120(s0)
80009364:	f8842703          	lw	a4,-120(s0)
80009368:	f8c42783          	lw	a5,-116(s0)
8000936c:	01070533          	add	a0,a4,a6
80009370:	00050693          	mv	a3,a0
80009374:	00e6b6b3          	sltu	a3,a3,a4
80009378:	011785b3          	add	a1,a5,a7
8000937c:	00b687b3          	add	a5,a3,a1
80009380:	00078593          	mv	a1,a5
80009384:	00050713          	mv	a4,a0
80009388:	00058793          	mv	a5,a1
8000938c:	01f75693          	srli	a3,a4,0x1f
80009390:	00179613          	slli	a2,a5,0x1
80009394:	f8c42223          	sw	a2,-124(s0)
80009398:	f8442603          	lw	a2,-124(s0)
8000939c:	00c6e6b3          	or	a3,a3,a2
800093a0:	f8d42223          	sw	a3,-124(s0)
800093a4:	00171793          	slli	a5,a4,0x1
800093a8:	f8f42023          	sw	a5,-128(s0)
800093ac:	f8042703          	lw	a4,-128(s0)
800093b0:	f8442783          	lw	a5,-124(s0)
800093b4:	00070613          	mv	a2,a4
800093b8:	00078693          	mv	a3,a5
800093bc:	41f6d793          	srai	a5,a3,0x1f
800093c0:	f4f42423          	sw	a5,-184(s0)
800093c4:	41f6d793          	srai	a5,a3,0x1f
800093c8:	f4f42623          	sw	a5,-180(s0)
800093cc:	f4842503          	lw	a0,-184(s0)
800093d0:	f4c42583          	lw	a1,-180(s0)
800093d4:	00050793          	mv	a5,a0
800093d8:	3ff7f793          	andi	a5,a5,1023
800093dc:	f4f42023          	sw	a5,-192(s0)
800093e0:	00058793          	mv	a5,a1
800093e4:	0007f793          	andi	a5,a5,0
800093e8:	f4f42223          	sw	a5,-188(s0)
800093ec:	f4042803          	lw	a6,-192(s0)
800093f0:	f4442883          	lw	a7,-188(s0)
800093f4:	00080593          	mv	a1,a6
800093f8:	00c58733          	add	a4,a1,a2
800093fc:	00070593          	mv	a1,a4
80009400:	00080513          	mv	a0,a6
80009404:	00a5b5b3          	sltu	a1,a1,a0
80009408:	00088513          	mv	a0,a7
8000940c:	00d507b3          	add	a5,a0,a3
80009410:	00f586b3          	add	a3,a1,a5
80009414:	00068793          	mv	a5,a3
80009418:	01679693          	slli	a3,a5,0x16
8000941c:	00a75613          	srli	a2,a4,0xa
80009420:	f6c42c23          	sw	a2,-136(s0)
80009424:	f7842603          	lw	a2,-136(s0)
80009428:	00c6e6b3          	or	a3,a3,a2
8000942c:	f6d42c23          	sw	a3,-136(s0)
80009430:	40a7d793          	srai	a5,a5,0xa
80009434:	f6f42e23          	sw	a5,-132(s0)
80009438:	f7842703          	lw	a4,-136(s0)
8000943c:	f7c42783          	lw	a5,-132(s0)
80009440:	fce42623          	sw	a4,-52(s0)
        cap = cap / 1024;
80009444:	fc042603          	lw	a2,-64(s0)
80009448:	fc442683          	lw	a3,-60(s0)
8000944c:	41f6d793          	srai	a5,a3,0x1f
80009450:	f2f42c23          	sw	a5,-200(s0)
80009454:	41f6d793          	srai	a5,a3,0x1f
80009458:	f2f42e23          	sw	a5,-196(s0)
8000945c:	f3842503          	lw	a0,-200(s0)
80009460:	f3c42583          	lw	a1,-196(s0)
80009464:	00050793          	mv	a5,a0
80009468:	3ff7f793          	andi	a5,a5,1023
8000946c:	f2f42823          	sw	a5,-208(s0)
80009470:	00058793          	mv	a5,a1
80009474:	0007f793          	andi	a5,a5,0
80009478:	f2f42a23          	sw	a5,-204(s0)
8000947c:	f3042803          	lw	a6,-208(s0)
80009480:	f3442883          	lw	a7,-204(s0)
80009484:	00080593          	mv	a1,a6
80009488:	00c58733          	add	a4,a1,a2
8000948c:	00070593          	mv	a1,a4
80009490:	00080513          	mv	a0,a6
80009494:	00a5b5b3          	sltu	a1,a1,a0
80009498:	00088513          	mv	a0,a7
8000949c:	00d507b3          	add	a5,a0,a3
800094a0:	00f586b3          	add	a3,a1,a5
800094a4:	00068793          	mv	a5,a3
800094a8:	01679693          	slli	a3,a5,0x16
800094ac:	00a75613          	srli	a2,a4,0xa
800094b0:	f6c42823          	sw	a2,-144(s0)
800094b4:	f7042603          	lw	a2,-144(s0)
800094b8:	00c6e6b3          	or	a3,a3,a2
800094bc:	f6d42823          	sw	a3,-144(s0)
800094c0:	40a7d793          	srai	a5,a5,0xa
800094c4:	f6f42a23          	sw	a5,-140(s0)
800094c8:	f7042783          	lw	a5,-144(s0)
800094cc:	f7442803          	lw	a6,-140(s0)
800094d0:	fcf42023          	sw	a5,-64(s0)
800094d4:	fd042223          	sw	a6,-60(s0)
    for (unit_index = 0; unit_index < 2; unit_index ++)
800094d8:	fbc42783          	lw	a5,-68(s0)
800094dc:	00178793          	addi	a5,a5,1
800094e0:	faf42e23          	sw	a5,-68(s0)
800094e4:	fbc42703          	lw	a4,-68(s0)
800094e8:	00100793          	li	a5,1
800094ec:	d8e7d2e3          	bge	a5,a4,80009270 <df+0x148>
800094f0:	0080006f          	j	800094f8 <df+0x3d0>
        if (cap < 1024) break;
800094f4:	00000013          	nop
    }

    rt_kprintf("disk free: %d.%d %s [ %d block, %d bytes per block ]\n",
800094f8:	fc042583          	lw	a1,-64(s0)
800094fc:	fbc42783          	lw	a5,-68(s0)
80009500:	00279793          	slli	a5,a5,0x2
80009504:	fd078793          	addi	a5,a5,-48
80009508:	008787b3          	add	a5,a5,s0
8000950c:	fd07a683          	lw	a3,-48(a5)
80009510:	fb442703          	lw	a4,-76(s0)
80009514:	fac42783          	lw	a5,-84(s0)
80009518:	fcc42603          	lw	a2,-52(s0)
8000951c:	0001d517          	auipc	a0,0x1d
80009520:	a8050513          	addi	a0,a0,-1408 # 80025f9c <raise+0x3a8>
80009524:	5050b0ef          	jal	ra,80015228 <rt_kprintf>
               (unsigned long)cap, minor, unit_str[unit_index], buffer.f_bfree, buffer.f_bsize);
    return 0;
80009528:	00000793          	li	a5,0
}
8000952c:	00078513          	mv	a0,a5
80009530:	0cc12083          	lw	ra,204(sp)
80009534:	0c812403          	lw	s0,200(sp)
80009538:	0c412903          	lw	s2,196(sp)
8000953c:	0c012983          	lw	s3,192(sp)
80009540:	0bc12a03          	lw	s4,188(sp)
80009544:	0b812a83          	lw	s5,184(sp)
80009548:	0b412b03          	lw	s6,180(sp)
8000954c:	0b012b83          	lw	s7,176(sp)
80009550:	0ac12c03          	lw	s8,172(sp)
80009554:	0a812c83          	lw	s9,168(sp)
80009558:	0a412d03          	lw	s10,164(sp)
8000955c:	0a012d83          	lw	s11,160(sp)
80009560:	0d010113          	addi	sp,sp,208
80009564:	00008067          	ret

80009568 <open>:
 * @param flags the file open flags.
 *
 * @return the non-negative integer on successful open, others for failed.
 */
int open(const char *file, int flags, ...)
{
80009568:	fb010113          	addi	sp,sp,-80
8000956c:	02112623          	sw	ra,44(sp)
80009570:	02812423          	sw	s0,40(sp)
80009574:	03010413          	addi	s0,sp,48
80009578:	fca42e23          	sw	a0,-36(s0)
8000957c:	fcb42c23          	sw	a1,-40(s0)
80009580:	00c42423          	sw	a2,8(s0)
80009584:	00d42623          	sw	a3,12(s0)
80009588:	00e42823          	sw	a4,16(s0)
8000958c:	00f42a23          	sw	a5,20(s0)
80009590:	01042c23          	sw	a6,24(s0)
80009594:	01142e23          	sw	a7,28(s0)
    int fd, result;
    struct dfs_fd *d;

    /* allocate a fd */
    fd = fd_new();
80009598:	f94fd0ef          	jal	ra,80006d2c <fd_new>
8000959c:	fea42623          	sw	a0,-20(s0)
    if (fd < 0)
800095a0:	fec42783          	lw	a5,-20(s0)
800095a4:	0007da63          	bgez	a5,800095b8 <open+0x50>
    {
        rt_set_errno(-ENOMEM);
800095a8:	ff400513          	li	a0,-12
800095ac:	60c0a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
800095b0:	fff00793          	li	a5,-1
800095b4:	0580006f          	j	8000960c <open+0xa4>
    }
    d = fd_get(fd);
800095b8:	fec42503          	lw	a0,-20(s0)
800095bc:	811fd0ef          	jal	ra,80006dcc <fd_get>
800095c0:	fea42423          	sw	a0,-24(s0)

    result = dfs_file_open(d, file, flags);
800095c4:	fd842603          	lw	a2,-40(s0)
800095c8:	fdc42583          	lw	a1,-36(s0)
800095cc:	fe842503          	lw	a0,-24(s0)
800095d0:	9a4fe0ef          	jal	ra,80007774 <dfs_file_open>
800095d4:	fea42223          	sw	a0,-28(s0)
    if (result < 0)
800095d8:	fe442783          	lw	a5,-28(s0)
800095dc:	0207d263          	bgez	a5,80009600 <open+0x98>
    {
        /* release the ref-count of fd */
        fd_put(d);
800095e0:	fe842503          	lw	a0,-24(s0)
800095e4:	8adfd0ef          	jal	ra,80006e90 <fd_put>
        fd_put(d);
800095e8:	fe842503          	lw	a0,-24(s0)
800095ec:	8a5fd0ef          	jal	ra,80006e90 <fd_put>

        rt_set_errno(result);
800095f0:	fe442503          	lw	a0,-28(s0)
800095f4:	5c40a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
800095f8:	fff00793          	li	a5,-1
800095fc:	0100006f          	j	8000960c <open+0xa4>
    }

    /* release the ref-count of fd */
    fd_put(d);
80009600:	fe842503          	lw	a0,-24(s0)
80009604:	88dfd0ef          	jal	ra,80006e90 <fd_put>

    return fd;
80009608:	fec42783          	lw	a5,-20(s0)
}
8000960c:	00078513          	mv	a0,a5
80009610:	02c12083          	lw	ra,44(sp)
80009614:	02812403          	lw	s0,40(sp)
80009618:	05010113          	addi	sp,sp,80
8000961c:	00008067          	ret

80009620 <close>:
 * @param fd the file descriptor.
 *
 * @return 0 on successful, -1 on failed.
 */
int close(int fd)
{
80009620:	fd010113          	addi	sp,sp,-48
80009624:	02112623          	sw	ra,44(sp)
80009628:	02812423          	sw	s0,40(sp)
8000962c:	03010413          	addi	s0,sp,48
80009630:	fca42e23          	sw	a0,-36(s0)
    int result;
    struct dfs_fd *d;

    d = fd_get(fd);
80009634:	fdc42503          	lw	a0,-36(s0)
80009638:	f94fd0ef          	jal	ra,80006dcc <fd_get>
8000963c:	fea42623          	sw	a0,-20(s0)
    if (d == NULL)
80009640:	fec42783          	lw	a5,-20(s0)
80009644:	00079a63          	bnez	a5,80009658 <close+0x38>
    {
        rt_set_errno(-EBADF);
80009648:	ff700513          	li	a0,-9
8000964c:	56c0a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
80009650:	fff00793          	li	a5,-1
80009654:	03c0006f          	j	80009690 <close+0x70>
    }

    result = dfs_file_close(d);
80009658:	fec42503          	lw	a0,-20(s0)
8000965c:	b3cfe0ef          	jal	ra,80007998 <dfs_file_close>
80009660:	fea42423          	sw	a0,-24(s0)
    fd_put(d);
80009664:	fec42503          	lw	a0,-20(s0)
80009668:	829fd0ef          	jal	ra,80006e90 <fd_put>

    if (result < 0)
8000966c:	fe842783          	lw	a5,-24(s0)
80009670:	0007da63          	bgez	a5,80009684 <close+0x64>
    {
        rt_set_errno(result);
80009674:	fe842503          	lw	a0,-24(s0)
80009678:	5400a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
8000967c:	fff00793          	li	a5,-1
80009680:	0100006f          	j	80009690 <close+0x70>
    }

    fd_put(d);
80009684:	fec42503          	lw	a0,-20(s0)
80009688:	809fd0ef          	jal	ra,80006e90 <fd_put>

    return 0;
8000968c:	00000793          	li	a5,0
}
80009690:	00078513          	mv	a0,a5
80009694:	02c12083          	lw	ra,44(sp)
80009698:	02812403          	lw	s0,40(sp)
8000969c:	03010113          	addi	sp,sp,48
800096a0:	00008067          	ret

800096a4 <read>:
#ifdef _READ_WRITE_RETURN_TYPE
_READ_WRITE_RETURN_TYPE read(int fd, void *buf, size_t len) /* some gcc tool chains will use different data structure */
#else
ssize_t read(int fd, void *buf, size_t len)
#endif
{
800096a4:	fd010113          	addi	sp,sp,-48
800096a8:	02112623          	sw	ra,44(sp)
800096ac:	02812423          	sw	s0,40(sp)
800096b0:	03010413          	addi	s0,sp,48
800096b4:	fca42e23          	sw	a0,-36(s0)
800096b8:	fcb42c23          	sw	a1,-40(s0)
800096bc:	fcc42a23          	sw	a2,-44(s0)
    int result;
    struct dfs_fd *d;

    /* get the fd */
    d = fd_get(fd);
800096c0:	fdc42503          	lw	a0,-36(s0)
800096c4:	f08fd0ef          	jal	ra,80006dcc <fd_get>
800096c8:	fea42623          	sw	a0,-20(s0)
    if (d == NULL)
800096cc:	fec42783          	lw	a5,-20(s0)
800096d0:	00079a63          	bnez	a5,800096e4 <read+0x40>
    {
        rt_set_errno(-EBADF);
800096d4:	ff700513          	li	a0,-9
800096d8:	4e00a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
800096dc:	fff00793          	li	a5,-1
800096e0:	0440006f          	j	80009724 <read+0x80>
    }

    result = dfs_file_read(d, buf, len);
800096e4:	fd442603          	lw	a2,-44(s0)
800096e8:	fd842583          	lw	a1,-40(s0)
800096ec:	fec42503          	lw	a0,-20(s0)
800096f0:	b38fe0ef          	jal	ra,80007a28 <dfs_file_read>
800096f4:	fea42423          	sw	a0,-24(s0)
    if (result < 0)
800096f8:	fe842783          	lw	a5,-24(s0)
800096fc:	0007de63          	bgez	a5,80009718 <read+0x74>
    {
        fd_put(d);
80009700:	fec42503          	lw	a0,-20(s0)
80009704:	f8cfd0ef          	jal	ra,80006e90 <fd_put>
        rt_set_errno(result);
80009708:	fe842503          	lw	a0,-24(s0)
8000970c:	4ac0a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
80009710:	fff00793          	li	a5,-1
80009714:	0100006f          	j	80009724 <read+0x80>
    }

    /* release the ref-count of fd */
    fd_put(d);
80009718:	fec42503          	lw	a0,-20(s0)
8000971c:	f74fd0ef          	jal	ra,80006e90 <fd_put>

    return result;
80009720:	fe842783          	lw	a5,-24(s0)
}
80009724:	00078513          	mv	a0,a5
80009728:	02c12083          	lw	ra,44(sp)
8000972c:	02812403          	lw	s0,40(sp)
80009730:	03010113          	addi	sp,sp,48
80009734:	00008067          	ret

80009738 <write>:
#ifdef _READ_WRITE_RETURN_TYPE
_READ_WRITE_RETURN_TYPE write(int fd, const void *buf, size_t len) /* some gcc tool chains will use different data structure */
#else
ssize_t write(int fd, const void *buf, size_t len)
#endif
{
80009738:	fd010113          	addi	sp,sp,-48
8000973c:	02112623          	sw	ra,44(sp)
80009740:	02812423          	sw	s0,40(sp)
80009744:	03010413          	addi	s0,sp,48
80009748:	fca42e23          	sw	a0,-36(s0)
8000974c:	fcb42c23          	sw	a1,-40(s0)
80009750:	fcc42a23          	sw	a2,-44(s0)
    int result;
    struct dfs_fd *d;

    /* get the fd */
    d = fd_get(fd);
80009754:	fdc42503          	lw	a0,-36(s0)
80009758:	e74fd0ef          	jal	ra,80006dcc <fd_get>
8000975c:	fea42623          	sw	a0,-20(s0)
    if (d == NULL)
80009760:	fec42783          	lw	a5,-20(s0)
80009764:	00079a63          	bnez	a5,80009778 <write+0x40>
    {
        rt_set_errno(-EBADF);
80009768:	ff700513          	li	a0,-9
8000976c:	44c0a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
80009770:	fff00793          	li	a5,-1
80009774:	0440006f          	j	800097b8 <write+0x80>
    }

    result = dfs_file_write(d, buf, len);
80009778:	fd442603          	lw	a2,-44(s0)
8000977c:	fd842583          	lw	a1,-40(s0)
80009780:	fec42503          	lw	a0,-20(s0)
80009784:	d28fe0ef          	jal	ra,80007cac <dfs_file_write>
80009788:	fea42423          	sw	a0,-24(s0)
    if (result < 0)
8000978c:	fe842783          	lw	a5,-24(s0)
80009790:	0007de63          	bgez	a5,800097ac <write+0x74>
    {
        fd_put(d);
80009794:	fec42503          	lw	a0,-20(s0)
80009798:	ef8fd0ef          	jal	ra,80006e90 <fd_put>
        rt_set_errno(result);
8000979c:	fe842503          	lw	a0,-24(s0)
800097a0:	4180a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
800097a4:	fff00793          	li	a5,-1
800097a8:	0100006f          	j	800097b8 <write+0x80>
    }

    /* release the ref-count of fd */
    fd_put(d);
800097ac:	fec42503          	lw	a0,-20(s0)
800097b0:	ee0fd0ef          	jal	ra,80006e90 <fd_put>

    return result;
800097b4:	fe842783          	lw	a5,-24(s0)
}
800097b8:	00078513          	mv	a0,a5
800097bc:	02c12083          	lw	ra,44(sp)
800097c0:	02812403          	lw	s0,40(sp)
800097c4:	03010113          	addi	sp,sp,48
800097c8:	00008067          	ret

800097cc <lseek>:
 * @param whence the directory of seek.
 *
 * @return the current read/write position in the file, or -1 on failed.
 */
off_t lseek(int fd, off_t offset, int whence)
{
800097cc:	fd010113          	addi	sp,sp,-48
800097d0:	02112623          	sw	ra,44(sp)
800097d4:	02812423          	sw	s0,40(sp)
800097d8:	03010413          	addi	s0,sp,48
800097dc:	fca42e23          	sw	a0,-36(s0)
800097e0:	fcb42c23          	sw	a1,-40(s0)
800097e4:	fcc42a23          	sw	a2,-44(s0)
    int result;
    struct dfs_fd *d;

    d = fd_get(fd);
800097e8:	fdc42503          	lw	a0,-36(s0)
800097ec:	de0fd0ef          	jal	ra,80006dcc <fd_get>
800097f0:	fea42623          	sw	a0,-20(s0)
    if (d == NULL)
800097f4:	fec42783          	lw	a5,-20(s0)
800097f8:	00079a63          	bnez	a5,8000980c <lseek+0x40>
    {
        rt_set_errno(-EBADF);
800097fc:	ff700513          	li	a0,-9
80009800:	3b80a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
80009804:	fff00793          	li	a5,-1
80009808:	0e80006f          	j	800098f0 <lseek+0x124>
    }

    switch (whence)
8000980c:	fd442703          	lw	a4,-44(s0)
80009810:	00200793          	li	a5,2
80009814:	02f70e63          	beq	a4,a5,80009850 <lseek+0x84>
80009818:	fd442703          	lw	a4,-44(s0)
8000981c:	00200793          	li	a5,2
80009820:	04e7c463          	blt	a5,a4,80009868 <lseek+0x9c>
80009824:	fd442783          	lw	a5,-44(s0)
80009828:	04078c63          	beqz	a5,80009880 <lseek+0xb4>
8000982c:	fd442703          	lw	a4,-44(s0)
80009830:	00100793          	li	a5,1
80009834:	02f71a63          	bne	a4,a5,80009868 <lseek+0x9c>
    {
    case SEEK_SET:
        break;

    case SEEK_CUR:
        offset += d->pos;
80009838:	fec42783          	lw	a5,-20(s0)
8000983c:	01c7a783          	lw	a5,28(a5)
80009840:	fd842703          	lw	a4,-40(s0)
80009844:	00f707b3          	add	a5,a4,a5
80009848:	fcf42c23          	sw	a5,-40(s0)
        break;
8000984c:	0380006f          	j	80009884 <lseek+0xb8>

    case SEEK_END:
        offset += d->size;
80009850:	fec42783          	lw	a5,-20(s0)
80009854:	0187a703          	lw	a4,24(a5)
80009858:	fd842783          	lw	a5,-40(s0)
8000985c:	00f707b3          	add	a5,a4,a5
80009860:	fcf42c23          	sw	a5,-40(s0)
        break;
80009864:	0200006f          	j	80009884 <lseek+0xb8>

    default:
        fd_put(d);
80009868:	fec42503          	lw	a0,-20(s0)
8000986c:	e24fd0ef          	jal	ra,80006e90 <fd_put>
        rt_set_errno(-EINVAL);
80009870:	fea00513          	li	a0,-22
80009874:	3440a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
80009878:	fff00793          	li	a5,-1
8000987c:	0740006f          	j	800098f0 <lseek+0x124>
        break;
80009880:	00000013          	nop
    }

    if (offset < 0)
80009884:	fd842783          	lw	a5,-40(s0)
80009888:	0007de63          	bgez	a5,800098a4 <lseek+0xd8>
    {
        fd_put(d);
8000988c:	fec42503          	lw	a0,-20(s0)
80009890:	e00fd0ef          	jal	ra,80006e90 <fd_put>
        rt_set_errno(-EINVAL);
80009894:	fea00513          	li	a0,-22
80009898:	3200a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
8000989c:	fff00793          	li	a5,-1
800098a0:	0500006f          	j	800098f0 <lseek+0x124>
    }
    if(offset != d->pos)
800098a4:	fec42783          	lw	a5,-20(s0)
800098a8:	01c7a783          	lw	a5,28(a5)
800098ac:	fd842703          	lw	a4,-40(s0)
800098b0:	02f70a63          	beq	a4,a5,800098e4 <lseek+0x118>
    {
        result = dfs_file_lseek(d, offset);
800098b4:	fd842583          	lw	a1,-40(s0)
800098b8:	fec42503          	lw	a0,-20(s0)
800098bc:	c68fe0ef          	jal	ra,80007d24 <dfs_file_lseek>
800098c0:	fea42423          	sw	a0,-24(s0)
        if (result < 0)
800098c4:	fe842783          	lw	a5,-24(s0)
800098c8:	0007de63          	bgez	a5,800098e4 <lseek+0x118>
        {
            fd_put(d);
800098cc:	fec42503          	lw	a0,-20(s0)
800098d0:	dc0fd0ef          	jal	ra,80006e90 <fd_put>
            rt_set_errno(result);
800098d4:	fe842503          	lw	a0,-24(s0)
800098d8:	2e00a0ef          	jal	ra,80013bb8 <rt_set_errno>

            return -1;
800098dc:	fff00793          	li	a5,-1
800098e0:	0100006f          	j	800098f0 <lseek+0x124>
        }
    }
    /* release the ref-count of fd */
    fd_put(d);
800098e4:	fec42503          	lw	a0,-20(s0)
800098e8:	da8fd0ef          	jal	ra,80006e90 <fd_put>

    return offset;
800098ec:	fd842783          	lw	a5,-40(s0)
}
800098f0:	00078513          	mv	a0,a5
800098f4:	02c12083          	lw	ra,44(sp)
800098f8:	02812403          	lw	s0,40(sp)
800098fc:	03010113          	addi	sp,sp,48
80009900:	00008067          	ret

80009904 <rename>:
 * @return 0 on successful, -1 on failed.
 *
 * note: the old and new file name must be belong to a same file system.
 */
int rename(const char *old_file, const char *new_file)
{
80009904:	fd010113          	addi	sp,sp,-48
80009908:	02112623          	sw	ra,44(sp)
8000990c:	02812423          	sw	s0,40(sp)
80009910:	03010413          	addi	s0,sp,48
80009914:	fca42e23          	sw	a0,-36(s0)
80009918:	fcb42c23          	sw	a1,-40(s0)
    int result;

    result = dfs_file_rename(old_file, new_file);
8000991c:	fd842583          	lw	a1,-40(s0)
80009920:	fdc42503          	lw	a0,-36(s0)
80009924:	e34fe0ef          	jal	ra,80007f58 <dfs_file_rename>
80009928:	fea42623          	sw	a0,-20(s0)
    if (result < 0)
8000992c:	fec42783          	lw	a5,-20(s0)
80009930:	0007da63          	bgez	a5,80009944 <rename+0x40>
    {
        rt_set_errno(result);
80009934:	fec42503          	lw	a0,-20(s0)
80009938:	2800a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
8000993c:	fff00793          	li	a5,-1
80009940:	0080006f          	j	80009948 <rename+0x44>
    }

    return 0;
80009944:	00000793          	li	a5,0
}
80009948:	00078513          	mv	a0,a5
8000994c:	02c12083          	lw	ra,44(sp)
80009950:	02812403          	lw	s0,40(sp)
80009954:	03010113          	addi	sp,sp,48
80009958:	00008067          	ret

8000995c <unlink>:
 * @param pathname the specified path name to be unlinked.
 *
 * @return 0 on successful, -1 on failed.
 */
int unlink(const char *pathname)
{
8000995c:	fd010113          	addi	sp,sp,-48
80009960:	02112623          	sw	ra,44(sp)
80009964:	02812423          	sw	s0,40(sp)
80009968:	03010413          	addi	s0,sp,48
8000996c:	fca42e23          	sw	a0,-36(s0)
    int result;

    result = dfs_file_unlink(pathname);
80009970:	fdc42503          	lw	a0,-36(s0)
80009974:	9dcfe0ef          	jal	ra,80007b50 <dfs_file_unlink>
80009978:	fea42623          	sw	a0,-20(s0)
    if (result < 0)
8000997c:	fec42783          	lw	a5,-20(s0)
80009980:	0007da63          	bgez	a5,80009994 <unlink+0x38>
    {
        rt_set_errno(result);
80009984:	fec42503          	lw	a0,-20(s0)
80009988:	2300a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
8000998c:	fff00793          	li	a5,-1
80009990:	0080006f          	j	80009998 <unlink+0x3c>
    }

    return 0;
80009994:	00000793          	li	a5,0
}
80009998:	00078513          	mv	a0,a5
8000999c:	02c12083          	lw	ra,44(sp)
800099a0:	02812403          	lw	s0,40(sp)
800099a4:	03010113          	addi	sp,sp,48
800099a8:	00008067          	ret

800099ac <stat>:
 * @param buf the data buffer to save stat description.
 *
 * @return 0 on successful, -1 on failed.
 */
int stat(const char *file, struct stat *buf)
{
800099ac:	fd010113          	addi	sp,sp,-48
800099b0:	02112623          	sw	ra,44(sp)
800099b4:	02812423          	sw	s0,40(sp)
800099b8:	03010413          	addi	s0,sp,48
800099bc:	fca42e23          	sw	a0,-36(s0)
800099c0:	fcb42c23          	sw	a1,-40(s0)
    int result;

    result = dfs_file_stat(file, buf);
800099c4:	fd842583          	lw	a1,-40(s0)
800099c8:	fdc42503          	lw	a0,-36(s0)
800099cc:	be0fe0ef          	jal	ra,80007dac <dfs_file_stat>
800099d0:	fea42623          	sw	a0,-20(s0)
    if (result < 0)
800099d4:	fec42783          	lw	a5,-20(s0)
800099d8:	0007da63          	bgez	a5,800099ec <stat+0x40>
    {
        rt_set_errno(result);
800099dc:	fec42503          	lw	a0,-20(s0)
800099e0:	1d80a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
800099e4:	fff00793          	li	a5,-1
800099e8:	0080006f          	j	800099f0 <stat+0x44>
    }

    return result;
800099ec:	fec42783          	lw	a5,-20(s0)
}
800099f0:	00078513          	mv	a0,a5
800099f4:	02c12083          	lw	ra,44(sp)
800099f8:	02812403          	lw	s0,40(sp)
800099fc:	03010113          	addi	sp,sp,48
80009a00:	00008067          	ret

80009a04 <mkdir>:
 * @param mode
 *
 * @return 0 on successful, others on failed.
 */
int mkdir(const char *path, mode_t mode)
{
80009a04:	fd010113          	addi	sp,sp,-48
80009a08:	02112623          	sw	ra,44(sp)
80009a0c:	02812423          	sw	s0,40(sp)
80009a10:	03010413          	addi	s0,sp,48
80009a14:	fca42e23          	sw	a0,-36(s0)
80009a18:	fcb42c23          	sw	a1,-40(s0)
    int fd;
    struct dfs_fd *d;
    int result;

    fd = fd_new();
80009a1c:	b10fd0ef          	jal	ra,80006d2c <fd_new>
80009a20:	fea42623          	sw	a0,-20(s0)
    if (fd == -1)
80009a24:	fec42703          	lw	a4,-20(s0)
80009a28:	fff00793          	li	a5,-1
80009a2c:	00f71a63          	bne	a4,a5,80009a40 <mkdir+0x3c>
    {
        rt_set_errno(-ENOMEM);
80009a30:	ff400513          	li	a0,-12
80009a34:	1840a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
80009a38:	fff00793          	li	a5,-1
80009a3c:	06c0006f          	j	80009aa8 <mkdir+0xa4>
    }

    d = fd_get(fd);
80009a40:	fec42503          	lw	a0,-20(s0)
80009a44:	b88fd0ef          	jal	ra,80006dcc <fd_get>
80009a48:	fea42423          	sw	a0,-24(s0)

    result = dfs_file_open(d, path, O_DIRECTORY | O_CREAT);
80009a4c:	002007b7          	lui	a5,0x200
80009a50:	20078613          	addi	a2,a5,512 # 200200 <__STACKSIZE__+0x1fc200>
80009a54:	fdc42583          	lw	a1,-36(s0)
80009a58:	fe842503          	lw	a0,-24(s0)
80009a5c:	d19fd0ef          	jal	ra,80007774 <dfs_file_open>
80009a60:	fea42223          	sw	a0,-28(s0)

    if (result < 0)
80009a64:	fe442783          	lw	a5,-28(s0)
80009a68:	0207d263          	bgez	a5,80009a8c <mkdir+0x88>
    {
        fd_put(d);
80009a6c:	fe842503          	lw	a0,-24(s0)
80009a70:	c20fd0ef          	jal	ra,80006e90 <fd_put>
        fd_put(d);
80009a74:	fe842503          	lw	a0,-24(s0)
80009a78:	c18fd0ef          	jal	ra,80006e90 <fd_put>
        rt_set_errno(result);
80009a7c:	fe442503          	lw	a0,-28(s0)
80009a80:	1380a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
80009a84:	fff00793          	li	a5,-1
80009a88:	0200006f          	j	80009aa8 <mkdir+0xa4>
    }

    dfs_file_close(d);
80009a8c:	fe842503          	lw	a0,-24(s0)
80009a90:	f09fd0ef          	jal	ra,80007998 <dfs_file_close>
    fd_put(d);
80009a94:	fe842503          	lw	a0,-24(s0)
80009a98:	bf8fd0ef          	jal	ra,80006e90 <fd_put>
    fd_put(d);
80009a9c:	fe842503          	lw	a0,-24(s0)
80009aa0:	bf0fd0ef          	jal	ra,80006e90 <fd_put>

    return 0;
80009aa4:	00000793          	li	a5,0
}
80009aa8:	00078513          	mv	a0,a5
80009aac:	02c12083          	lw	ra,44(sp)
80009ab0:	02812403          	lw	s0,40(sp)
80009ab4:	03010113          	addi	sp,sp,48
80009ab8:	00008067          	ret

80009abc <opendir>:
 * @param name the path name to be open.
 *
 * @return the DIR pointer of directory, NULL on open directory failed.
 */
DIR *opendir(const char *name)
{
80009abc:	fd010113          	addi	sp,sp,-48
80009ac0:	02112623          	sw	ra,44(sp)
80009ac4:	02812423          	sw	s0,40(sp)
80009ac8:	03010413          	addi	s0,sp,48
80009acc:	fca42e23          	sw	a0,-36(s0)
    struct dfs_fd *d;
    int fd, result;
    DIR *t;

    t = NULL;
80009ad0:	fe042623          	sw	zero,-20(s0)

    /* allocate a fd */
    fd = fd_new();
80009ad4:	a58fd0ef          	jal	ra,80006d2c <fd_new>
80009ad8:	fea42423          	sw	a0,-24(s0)
    if (fd == -1)
80009adc:	fe842703          	lw	a4,-24(s0)
80009ae0:	fff00793          	li	a5,-1
80009ae4:	00f71a63          	bne	a4,a5,80009af8 <opendir+0x3c>
    {
        rt_set_errno(-ENOMEM);
80009ae8:	ff400513          	li	a0,-12
80009aec:	0cc0a0ef          	jal	ra,80013bb8 <rt_set_errno>

        return NULL;
80009af0:	00000793          	li	a5,0
80009af4:	09c0006f          	j	80009b90 <opendir+0xd4>
    }
    d = fd_get(fd);
80009af8:	fe842503          	lw	a0,-24(s0)
80009afc:	ad0fd0ef          	jal	ra,80006dcc <fd_get>
80009b00:	fea42223          	sw	a0,-28(s0)

    result = dfs_file_open(d, name, O_RDONLY | O_DIRECTORY);
80009b04:	00200637          	lui	a2,0x200
80009b08:	fdc42583          	lw	a1,-36(s0)
80009b0c:	fe442503          	lw	a0,-28(s0)
80009b10:	c65fd0ef          	jal	ra,80007774 <dfs_file_open>
80009b14:	fea42023          	sw	a0,-32(s0)
    if (result >= 0)
80009b18:	fe042783          	lw	a5,-32(s0)
80009b1c:	0407cc63          	bltz	a5,80009b74 <opendir+0xb8>
    {
        /* open successfully */
        t = (DIR *) rt_malloc(sizeof(DIR));
80009b20:	20c00513          	li	a0,524
80009b24:	1a90b0ef          	jal	ra,800154cc <rt_malloc>
80009b28:	fea42623          	sw	a0,-20(s0)
        if (t == NULL)
80009b2c:	fec42783          	lw	a5,-20(s0)
80009b30:	00079c63          	bnez	a5,80009b48 <opendir+0x8c>
        {
            dfs_file_close(d);
80009b34:	fe442503          	lw	a0,-28(s0)
80009b38:	e61fd0ef          	jal	ra,80007998 <dfs_file_close>
            fd_put(d);
80009b3c:	fe442503          	lw	a0,-28(s0)
80009b40:	b50fd0ef          	jal	ra,80006e90 <fd_put>
80009b44:	0200006f          	j	80009b64 <opendir+0xa8>
        }
        else
        {
            rt_memset(t, 0, sizeof(DIR));
80009b48:	20c00613          	li	a2,524
80009b4c:	00000593          	li	a1,0
80009b50:	fec42503          	lw	a0,-20(s0)
80009b54:	1380a0ef          	jal	ra,80013c8c <rt_memset>

            t->fd = fd;
80009b58:	fec42783          	lw	a5,-20(s0)
80009b5c:	fe842703          	lw	a4,-24(s0)
80009b60:	00e7a023          	sw	a4,0(a5)
        }
        fd_put(d);
80009b64:	fe442503          	lw	a0,-28(s0)
80009b68:	b28fd0ef          	jal	ra,80006e90 <fd_put>

        return t;
80009b6c:	fec42783          	lw	a5,-20(s0)
80009b70:	0200006f          	j	80009b90 <opendir+0xd4>
    }

    /* open failed */
    fd_put(d);
80009b74:	fe442503          	lw	a0,-28(s0)
80009b78:	b18fd0ef          	jal	ra,80006e90 <fd_put>
    fd_put(d);
80009b7c:	fe442503          	lw	a0,-28(s0)
80009b80:	b10fd0ef          	jal	ra,80006e90 <fd_put>
    rt_set_errno(result);
80009b84:	fe042503          	lw	a0,-32(s0)
80009b88:	0300a0ef          	jal	ra,80013bb8 <rt_set_errno>

    return NULL;
80009b8c:	00000793          	li	a5,0
}
80009b90:	00078513          	mv	a0,a5
80009b94:	02c12083          	lw	ra,44(sp)
80009b98:	02812403          	lw	s0,40(sp)
80009b9c:	03010113          	addi	sp,sp,48
80009ba0:	00008067          	ret

80009ba4 <readdir>:
 * @param d the directory stream pointer.
 *
 * @return the next directory entry, NULL on the end of directory or failed.
 */
struct dirent *readdir(DIR *d)
{
80009ba4:	fd010113          	addi	sp,sp,-48
80009ba8:	02112623          	sw	ra,44(sp)
80009bac:	02812423          	sw	s0,40(sp)
80009bb0:	03010413          	addi	s0,sp,48
80009bb4:	fca42e23          	sw	a0,-36(s0)
    int result;
    struct dfs_fd *fd;

    fd = fd_get(d->fd);
80009bb8:	fdc42783          	lw	a5,-36(s0)
80009bbc:	0007a783          	lw	a5,0(a5)
80009bc0:	00078513          	mv	a0,a5
80009bc4:	a08fd0ef          	jal	ra,80006dcc <fd_get>
80009bc8:	fea42623          	sw	a0,-20(s0)
    if (fd == NULL)
80009bcc:	fec42783          	lw	a5,-20(s0)
80009bd0:	00079a63          	bnez	a5,80009be4 <readdir+0x40>
    {
        rt_set_errno(-EBADF);
80009bd4:	ff700513          	li	a0,-9
80009bd8:	7e1090ef          	jal	ra,80013bb8 <rt_set_errno>
        return NULL;
80009bdc:	00000793          	li	a5,0
80009be0:	0d00006f          	j	80009cb0 <readdir+0x10c>
    }

    if (d->num)
80009be4:	fdc42783          	lw	a5,-36(s0)
80009be8:	2047a783          	lw	a5,516(a5)
80009bec:	02078c63          	beqz	a5,80009c24 <readdir+0x80>
    {
        struct dirent *dirent_ptr;
        dirent_ptr = (struct dirent *)&d->buf[d->cur];
80009bf0:	fdc42783          	lw	a5,-36(s0)
80009bf4:	2087a783          	lw	a5,520(a5)
80009bf8:	fdc42703          	lw	a4,-36(s0)
80009bfc:	00f707b3          	add	a5,a4,a5
80009c00:	00478793          	addi	a5,a5,4
80009c04:	fef42423          	sw	a5,-24(s0)
        d->cur += dirent_ptr->d_reclen;
80009c08:	fdc42783          	lw	a5,-36(s0)
80009c0c:	2087a783          	lw	a5,520(a5)
80009c10:	fe842703          	lw	a4,-24(s0)
80009c14:	00275703          	lhu	a4,2(a4)
80009c18:	00e78733          	add	a4,a5,a4
80009c1c:	fdc42783          	lw	a5,-36(s0)
80009c20:	20e7a423          	sw	a4,520(a5)
    }

    if (!d->num || d->cur >= d->num)
80009c24:	fdc42783          	lw	a5,-36(s0)
80009c28:	2047a783          	lw	a5,516(a5)
80009c2c:	00078c63          	beqz	a5,80009c44 <readdir+0xa0>
80009c30:	fdc42783          	lw	a5,-36(s0)
80009c34:	2087a703          	lw	a4,520(a5)
80009c38:	fdc42783          	lw	a5,-36(s0)
80009c3c:	2047a783          	lw	a5,516(a5)
80009c40:	04f74a63          	blt	a4,a5,80009c94 <readdir+0xf0>
    {
        /* get a new entry */
        result = dfs_file_getdents(fd,
                                   (struct dirent *)d->buf,
80009c44:	fdc42783          	lw	a5,-36(s0)
80009c48:	00478793          	addi	a5,a5,4
        result = dfs_file_getdents(fd,
80009c4c:	1ff00613          	li	a2,511
80009c50:	00078593          	mv	a1,a5
80009c54:	fec42503          	lw	a0,-20(s0)
80009c58:	e71fd0ef          	jal	ra,80007ac8 <dfs_file_getdents>
80009c5c:	fea42223          	sw	a0,-28(s0)
                                   sizeof(d->buf) - 1);
        if (result <= 0)
80009c60:	fe442783          	lw	a5,-28(s0)
80009c64:	00f04e63          	bgtz	a5,80009c80 <readdir+0xdc>
        {
            fd_put(fd);
80009c68:	fec42503          	lw	a0,-20(s0)
80009c6c:	a24fd0ef          	jal	ra,80006e90 <fd_put>
            rt_set_errno(result);
80009c70:	fe442503          	lw	a0,-28(s0)
80009c74:	745090ef          	jal	ra,80013bb8 <rt_set_errno>

            return NULL;
80009c78:	00000793          	li	a5,0
80009c7c:	0340006f          	j	80009cb0 <readdir+0x10c>
        }

        d->num = result;
80009c80:	fdc42783          	lw	a5,-36(s0)
80009c84:	fe442703          	lw	a4,-28(s0)
80009c88:	20e7a223          	sw	a4,516(a5)
        d->cur = 0; /* current entry index */
80009c8c:	fdc42783          	lw	a5,-36(s0)
80009c90:	2007a423          	sw	zero,520(a5)
    }

    fd_put(fd);
80009c94:	fec42503          	lw	a0,-20(s0)
80009c98:	9f8fd0ef          	jal	ra,80006e90 <fd_put>

    return (struct dirent *)(d->buf + d->cur);
80009c9c:	fdc42783          	lw	a5,-36(s0)
80009ca0:	00478793          	addi	a5,a5,4
80009ca4:	fdc42703          	lw	a4,-36(s0)
80009ca8:	20872703          	lw	a4,520(a4)
80009cac:	00e787b3          	add	a5,a5,a4
}
80009cb0:	00078513          	mv	a0,a5
80009cb4:	02c12083          	lw	ra,44(sp)
80009cb8:	02812403          	lw	s0,40(sp)
80009cbc:	03010113          	addi	sp,sp,48
80009cc0:	00008067          	ret

80009cc4 <rewinddir>:
 * stream.
 *
 * @param d the directory stream.
 */
void rewinddir(DIR *d)
{
80009cc4:	fd010113          	addi	sp,sp,-48
80009cc8:	02112623          	sw	ra,44(sp)
80009ccc:	02812423          	sw	s0,40(sp)
80009cd0:	03010413          	addi	s0,sp,48
80009cd4:	fca42e23          	sw	a0,-36(s0)
    struct dfs_fd *fd;

    fd = fd_get(d->fd);
80009cd8:	fdc42783          	lw	a5,-36(s0)
80009cdc:	0007a783          	lw	a5,0(a5)
80009ce0:	00078513          	mv	a0,a5
80009ce4:	8e8fd0ef          	jal	ra,80006dcc <fd_get>
80009ce8:	fea42623          	sw	a0,-20(s0)
    if (fd == NULL)
80009cec:	fec42783          	lw	a5,-20(s0)
80009cf0:	00079863          	bnez	a5,80009d00 <rewinddir+0x3c>
    {
        rt_set_errno(-EBADF);
80009cf4:	ff700513          	li	a0,-9
80009cf8:	6c1090ef          	jal	ra,80013bb8 <rt_set_errno>

        return ;
80009cfc:	0380006f          	j	80009d34 <rewinddir+0x70>
    }

    /* seek to the beginning of directory */
    if (dfs_file_lseek(fd, 0) >= 0)
80009d00:	00000593          	li	a1,0
80009d04:	fec42503          	lw	a0,-20(s0)
80009d08:	81cfe0ef          	jal	ra,80007d24 <dfs_file_lseek>
80009d0c:	00050793          	mv	a5,a0
80009d10:	0007ce63          	bltz	a5,80009d2c <rewinddir+0x68>
        d->num = d->cur = 0;
80009d14:	fdc42783          	lw	a5,-36(s0)
80009d18:	2007a423          	sw	zero,520(a5)
80009d1c:	fdc42783          	lw	a5,-36(s0)
80009d20:	2087a703          	lw	a4,520(a5)
80009d24:	fdc42783          	lw	a5,-36(s0)
80009d28:	20e7a223          	sw	a4,516(a5)
    fd_put(fd);
80009d2c:	fec42503          	lw	a0,-20(s0)
80009d30:	960fd0ef          	jal	ra,80006e90 <fd_put>
}
80009d34:	02c12083          	lw	ra,44(sp)
80009d38:	02812403          	lw	s0,40(sp)
80009d3c:	03010113          	addi	sp,sp,48
80009d40:	00008067          	ret

80009d44 <closedir>:
 * @param d the directory stream.
 *
 * @return 0 on successful, -1 on failed.
 */
int closedir(DIR *d)
{
80009d44:	fd010113          	addi	sp,sp,-48
80009d48:	02112623          	sw	ra,44(sp)
80009d4c:	02812423          	sw	s0,40(sp)
80009d50:	03010413          	addi	s0,sp,48
80009d54:	fca42e23          	sw	a0,-36(s0)
    int result;
    struct dfs_fd *fd;

    fd = fd_get(d->fd);
80009d58:	fdc42783          	lw	a5,-36(s0)
80009d5c:	0007a783          	lw	a5,0(a5)
80009d60:	00078513          	mv	a0,a5
80009d64:	868fd0ef          	jal	ra,80006dcc <fd_get>
80009d68:	fea42623          	sw	a0,-20(s0)
    if (fd == NULL)
80009d6c:	fec42783          	lw	a5,-20(s0)
80009d70:	00079a63          	bnez	a5,80009d84 <closedir+0x40>
    {
        rt_set_errno(-EBADF);
80009d74:	ff700513          	li	a0,-9
80009d78:	641090ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
80009d7c:	fff00793          	li	a5,-1
80009d80:	0440006f          	j	80009dc4 <closedir+0x80>
    }

    result = dfs_file_close(fd);
80009d84:	fec42503          	lw	a0,-20(s0)
80009d88:	c11fd0ef          	jal	ra,80007998 <dfs_file_close>
80009d8c:	fea42423          	sw	a0,-24(s0)
    fd_put(fd);
80009d90:	fec42503          	lw	a0,-20(s0)
80009d94:	8fcfd0ef          	jal	ra,80006e90 <fd_put>

    fd_put(fd);
80009d98:	fec42503          	lw	a0,-20(s0)
80009d9c:	8f4fd0ef          	jal	ra,80006e90 <fd_put>
    rt_free(d);
80009da0:	fdc42503          	lw	a0,-36(s0)
80009da4:	0750b0ef          	jal	ra,80015618 <rt_free>

    if (result < 0)
80009da8:	fe842783          	lw	a5,-24(s0)
80009dac:	0007da63          	bgez	a5,80009dc0 <closedir+0x7c>
    {
        rt_set_errno(result);
80009db0:	fe842503          	lw	a0,-24(s0)
80009db4:	605090ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
80009db8:	fff00793          	li	a5,-1
80009dbc:	0080006f          	j	80009dc4 <closedir+0x80>
    }
    else
        return 0;
80009dc0:	00000793          	li	a5,0
}
80009dc4:	00078513          	mv	a0,a5
80009dc8:	02c12083          	lw	ra,44(sp)
80009dcc:	02812403          	lw	s0,40(sp)
80009dd0:	03010113          	addi	sp,sp,48
80009dd4:	00008067          	ret

80009dd8 <chdir>:
 * @param path the path name to be changed to.
 *
 * @return 0 on successful, -1 on failed.
 */
int chdir(const char *path)
{
80009dd8:	fd010113          	addi	sp,sp,-48
80009ddc:	02112623          	sw	ra,44(sp)
80009de0:	02812423          	sw	s0,40(sp)
80009de4:	03010413          	addi	s0,sp,48
80009de8:	fca42e23          	sw	a0,-36(s0)
    char *fullpath;
    DIR *d;

    if (path == NULL)
80009dec:	fdc42783          	lw	a5,-36(s0)
80009df0:	02079463          	bnez	a5,80009e18 <chdir+0x40>
    {
        dfs_lock();
80009df4:	cb1fc0ef          	jal	ra,80006aa4 <dfs_lock>
        rt_kprintf("%s\n", working_directory);
80009df8:	0001f597          	auipc	a1,0x1f
80009dfc:	2a058593          	addi	a1,a1,672 # 80029098 <working_directory>
80009e00:	0001c517          	auipc	a0,0x1c
80009e04:	1d450513          	addi	a0,a0,468 # 80025fd4 <raise+0x3e0>
80009e08:	4200b0ef          	jal	ra,80015228 <rt_kprintf>
        dfs_unlock();
80009e0c:	cedfc0ef          	jal	ra,80006af8 <dfs_unlock>

        return 0;
80009e10:	00000793          	li	a5,0
80009e14:	0a80006f          	j	80009ebc <chdir+0xe4>
    }

    if (strlen(path) > DFS_PATH_MAX)
80009e18:	fdc42503          	lw	a0,-36(s0)
80009e1c:	3e8130ef          	jal	ra,8001d204 <strlen>
80009e20:	00050713          	mv	a4,a0
80009e24:	10000793          	li	a5,256
80009e28:	00e7fa63          	bgeu	a5,a4,80009e3c <chdir+0x64>
    {
        rt_set_errno(-ENOTDIR);
80009e2c:	fec00513          	li	a0,-20
80009e30:	589090ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1;
80009e34:	fff00793          	li	a5,-1
80009e38:	0840006f          	j	80009ebc <chdir+0xe4>
    }

    fullpath = dfs_normalize_path(NULL, path);
80009e3c:	fdc42583          	lw	a1,-36(s0)
80009e40:	00000513          	li	a0,0
80009e44:	b24fd0ef          	jal	ra,80007168 <dfs_normalize_path>
80009e48:	fea42623          	sw	a0,-20(s0)
    if (fullpath == NULL)
80009e4c:	fec42783          	lw	a5,-20(s0)
80009e50:	00079a63          	bnez	a5,80009e64 <chdir+0x8c>
    {
        rt_set_errno(-ENOTDIR);
80009e54:	fec00513          	li	a0,-20
80009e58:	561090ef          	jal	ra,80013bb8 <rt_set_errno>

        return -1; /* build path failed */
80009e5c:	fff00793          	li	a5,-1
80009e60:	05c0006f          	j	80009ebc <chdir+0xe4>
    }

    dfs_lock();
80009e64:	c41fc0ef          	jal	ra,80006aa4 <dfs_lock>
    d = opendir(fullpath);
80009e68:	fec42503          	lw	a0,-20(s0)
80009e6c:	c51ff0ef          	jal	ra,80009abc <opendir>
80009e70:	fea42423          	sw	a0,-24(s0)
    if (d == NULL)
80009e74:	fe842783          	lw	a5,-24(s0)
80009e78:	00079c63          	bnez	a5,80009e90 <chdir+0xb8>
    {
        rt_free(fullpath);
80009e7c:	fec42503          	lw	a0,-20(s0)
80009e80:	7980b0ef          	jal	ra,80015618 <rt_free>
        /* this is a not exist directory */
        dfs_unlock();
80009e84:	c75fc0ef          	jal	ra,80006af8 <dfs_unlock>

        return -1;
80009e88:	fff00793          	li	a5,-1
80009e8c:	0300006f          	j	80009ebc <chdir+0xe4>
    }

    /* close directory stream */
    closedir(d);
80009e90:	fe842503          	lw	a0,-24(s0)
80009e94:	eb1ff0ef          	jal	ra,80009d44 <closedir>

    /* copy full path to working directory */
    strncpy(working_directory, fullpath, DFS_PATH_MAX);
80009e98:	10000613          	li	a2,256
80009e9c:	fec42583          	lw	a1,-20(s0)
80009ea0:	0001f517          	auipc	a0,0x1f
80009ea4:	1f850513          	addi	a0,a0,504 # 80029098 <working_directory>
80009ea8:	369120ef          	jal	ra,8001ca10 <strncpy>
    /* release normalize directory path name */
    rt_free(fullpath);
80009eac:	fec42503          	lw	a0,-20(s0)
80009eb0:	7680b0ef          	jal	ra,80015618 <rt_free>

    dfs_unlock();
80009eb4:	c45fc0ef          	jal	ra,80006af8 <dfs_unlock>

    return 0;
80009eb8:	00000793          	li	a5,0
}
80009ebc:	00078513          	mv	a0,a5
80009ec0:	02c12083          	lw	ra,44(sp)
80009ec4:	02812403          	lw	s0,40(sp)
80009ec8:	03010113          	addi	sp,sp,48
80009ecc:	00008067          	ret

80009ed0 <getcwd>:
 * @param size the buffer size.
 *
 * @return the returned current directory.
 */
char *getcwd(char *buf, size_t size)
{
80009ed0:	fe010113          	addi	sp,sp,-32
80009ed4:	00112e23          	sw	ra,28(sp)
80009ed8:	00812c23          	sw	s0,24(sp)
80009edc:	02010413          	addi	s0,sp,32
80009ee0:	fea42623          	sw	a0,-20(s0)
80009ee4:	feb42423          	sw	a1,-24(s0)
#ifdef DFS_USING_WORKDIR
    dfs_lock();
80009ee8:	bbdfc0ef          	jal	ra,80006aa4 <dfs_lock>
    strncpy(buf, working_directory, size);
80009eec:	fe842603          	lw	a2,-24(s0)
80009ef0:	0001f597          	auipc	a1,0x1f
80009ef4:	1a858593          	addi	a1,a1,424 # 80029098 <working_directory>
80009ef8:	fec42503          	lw	a0,-20(s0)
80009efc:	315120ef          	jal	ra,8001ca10 <strncpy>
    dfs_unlock();
80009f00:	bf9fc0ef          	jal	ra,80006af8 <dfs_unlock>
#else
    rt_kprintf(NO_WORKING_DIR);
#endif

    return buf;
80009f04:	fec42783          	lw	a5,-20(s0)
}
80009f08:	00078513          	mv	a0,a5
80009f0c:	01c12083          	lw	ra,28(sp)
80009f10:	01812403          	lw	s0,24(sp)
80009f14:	02010113          	addi	sp,sp,32
80009f18:	00008067          	ret

80009f1c <rt_list_init>:
 *                the completion done up to the amount of time specified by the argument.
 *                NOTE: Generally, we use the macro RT_WAITING_FOREVER to set this parameter, which means that when the
 *                completion is unavailable, the thread will be waitting forever.
 *
 * @return Return the operation status. ONLY when the return value is RT_EOK, the operation is successful.
 *         If the return value is any other values, it means that the completion wait failed.
80009f1c:	fe010113          	addi	sp,sp,-32
80009f20:	00812e23          	sw	s0,28(sp)
80009f24:	02010413          	addi	s0,sp,32
80009f28:	fea42623          	sw	a0,-20(s0)
 *
80009f2c:	fec42783          	lw	a5,-20(s0)
80009f30:	fec42703          	lw	a4,-20(s0)
80009f34:	00e7a223          	sw	a4,4(a5)
80009f38:	fec42783          	lw	a5,-20(s0)
80009f3c:	0047a703          	lw	a4,4(a5)
80009f40:	fec42783          	lw	a5,-20(s0)
80009f44:	00e7a023          	sw	a4,0(a5)
 * @warning This function can ONLY be called in the thread context. It MUST NOT be called in interrupt context.
80009f48:	00000013          	nop
80009f4c:	01c12403          	lw	s0,28(sp)
80009f50:	02010113          	addi	sp,sp,32
80009f54:	00008067          	ret

80009f58 <rt_list_insert_before>:
        /* only one thread can suspend on complete */
        RT_ASSERT(rt_list_isempty(&(completion->suspended_list)));

        if (timeout == 0)
        {
            result = -RT_ETIMEOUT;
80009f58:	fe010113          	addi	sp,sp,-32
80009f5c:	00812e23          	sw	s0,28(sp)
80009f60:	02010413          	addi	s0,sp,32
80009f64:	fea42623          	sw	a0,-20(s0)
80009f68:	feb42423          	sw	a1,-24(s0)
            goto __exit;
80009f6c:	fec42783          	lw	a5,-20(s0)
80009f70:	0047a783          	lw	a5,4(a5)
80009f74:	fe842703          	lw	a4,-24(s0)
80009f78:	00e7a023          	sw	a4,0(a5)
        }
80009f7c:	fec42783          	lw	a5,-20(s0)
80009f80:	0047a703          	lw	a4,4(a5)
80009f84:	fe842783          	lw	a5,-24(s0)
80009f88:	00e7a223          	sw	a4,4(a5)
        else
        {
80009f8c:	fec42783          	lw	a5,-20(s0)
80009f90:	fe842703          	lw	a4,-24(s0)
80009f94:	00e7a223          	sw	a4,4(a5)
            /* reset thread error number */
80009f98:	fe842783          	lw	a5,-24(s0)
80009f9c:	fec42703          	lw	a4,-20(s0)
80009fa0:	00e7a023          	sw	a4,0(a5)
            thread->error = RT_EOK;
80009fa4:	00000013          	nop
80009fa8:	01c12403          	lw	s0,28(sp)
80009fac:	02010113          	addi	sp,sp,32
80009fb0:	00008067          	ret

80009fb4 <rt_list_isempty>:
                                 &timeout);
                rt_timer_start(&(thread->thread_timer));
            }
            /* enable interrupt */
            rt_hw_interrupt_enable(level);

80009fb4:	fe010113          	addi	sp,sp,-32
80009fb8:	00812e23          	sw	s0,28(sp)
80009fbc:	02010413          	addi	s0,sp,32
80009fc0:	fea42623          	sw	a0,-20(s0)
            /* do schedule */
80009fc4:	fec42783          	lw	a5,-20(s0)
80009fc8:	0007a783          	lw	a5,0(a5)
80009fcc:	fec42703          	lw	a4,-20(s0)
80009fd0:	40f707b3          	sub	a5,a4,a5
80009fd4:	0017b793          	seqz	a5,a5
80009fd8:	0ff7f793          	zext.b	a5,a5
            rt_schedule();
80009fdc:	00078513          	mv	a0,a5
80009fe0:	01c12403          	lw	s0,28(sp)
80009fe4:	02010113          	addi	sp,sp,32
80009fe8:	00008067          	ret

80009fec <rt_completion_init>:
{
80009fec:	fd010113          	addi	sp,sp,-48
80009ff0:	02112623          	sw	ra,44(sp)
80009ff4:	02812423          	sw	s0,40(sp)
80009ff8:	03010413          	addi	s0,sp,48
80009ffc:	fca42e23          	sw	a0,-36(s0)
    level = rt_hw_interrupt_disable();
8000a000:	8a0f60ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000a004:	fea42623          	sw	a0,-20(s0)
    completion->flag = RT_UNCOMPLETED;
8000a008:	fdc42783          	lw	a5,-36(s0)
8000a00c:	0007a023          	sw	zero,0(a5)
    rt_list_init(&completion->suspended_list);
8000a010:	fdc42783          	lw	a5,-36(s0)
8000a014:	00478793          	addi	a5,a5,4
8000a018:	00078513          	mv	a0,a5
8000a01c:	f01ff0ef          	jal	ra,80009f1c <rt_list_init>
    rt_hw_interrupt_enable(level);
8000a020:	fec42503          	lw	a0,-20(s0)
8000a024:	884f60ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
}
8000a028:	00000013          	nop
8000a02c:	02c12083          	lw	ra,44(sp)
8000a030:	02812403          	lw	s0,40(sp)
8000a034:	03010113          	addi	sp,sp,48
8000a038:	00008067          	ret

8000a03c <rt_completion_wait>:
{
8000a03c:	fd010113          	addi	sp,sp,-48
8000a040:	02112623          	sw	ra,44(sp)
8000a044:	02812423          	sw	s0,40(sp)
8000a048:	03010413          	addi	s0,sp,48
8000a04c:	fca42e23          	sw	a0,-36(s0)
8000a050:	fcb42c23          	sw	a1,-40(s0)
    result = RT_EOK;
8000a054:	fe042623          	sw	zero,-20(s0)
    thread = rt_thread_self();
8000a058:	7680d0ef          	jal	ra,800177c0 <rt_thread_self>
8000a05c:	fea42223          	sw	a0,-28(s0)
    level = rt_hw_interrupt_disable();
8000a060:	840f60ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000a064:	fea42423          	sw	a0,-24(s0)
    if (completion->flag != RT_COMPLETED)
8000a068:	fdc42783          	lw	a5,-36(s0)
8000a06c:	0007a703          	lw	a4,0(a5)
8000a070:	00100793          	li	a5,1
8000a074:	08f70c63          	beq	a4,a5,8000a10c <rt_completion_wait+0xd0>
        if (timeout == 0)
8000a078:	fd842783          	lw	a5,-40(s0)
8000a07c:	00079863          	bnez	a5,8000a08c <rt_completion_wait+0x50>
            result = -RT_ETIMEOUT;
8000a080:	ffe00793          	li	a5,-2
8000a084:	fef42623          	sw	a5,-20(s0)
            goto __exit;
8000a088:	08c0006f          	j	8000a114 <rt_completion_wait+0xd8>
            thread->error = RT_EOK;
8000a08c:	fe442783          	lw	a5,-28(s0)
8000a090:	0207ae23          	sw	zero,60(a5)
            rt_thread_suspend(thread);
8000a094:	fe442503          	lw	a0,-28(s0)
8000a098:	2e90d0ef          	jal	ra,80017b80 <rt_thread_suspend>
            rt_list_insert_before(&(completion->suspended_list),
8000a09c:	fdc42783          	lw	a5,-36(s0)
8000a0a0:	00478713          	addi	a4,a5,4
8000a0a4:	fe442783          	lw	a5,-28(s0)
8000a0a8:	02078793          	addi	a5,a5,32
8000a0ac:	00078593          	mv	a1,a5
8000a0b0:	00070513          	mv	a0,a4
8000a0b4:	ea5ff0ef          	jal	ra,80009f58 <rt_list_insert_before>
            if (timeout > 0)
8000a0b8:	fd842783          	lw	a5,-40(s0)
8000a0bc:	02f05863          	blez	a5,8000a0ec <rt_completion_wait+0xb0>
                rt_timer_control(&(thread->thread_timer),
8000a0c0:	fe442783          	lw	a5,-28(s0)
8000a0c4:	05878793          	addi	a5,a5,88
8000a0c8:	fd840713          	addi	a4,s0,-40
8000a0cc:	00070613          	mv	a2,a4
8000a0d0:	00000593          	li	a1,0
8000a0d4:	00078513          	mv	a0,a5
8000a0d8:	2c80e0ef          	jal	ra,800183a0 <rt_timer_control>
                rt_timer_start(&(thread->thread_timer));
8000a0dc:	fe442783          	lw	a5,-28(s0)
8000a0e0:	05878793          	addi	a5,a5,88
8000a0e4:	00078513          	mv	a0,a5
8000a0e8:	74d0d0ef          	jal	ra,80018034 <rt_timer_start>
            rt_hw_interrupt_enable(level);
8000a0ec:	fe842503          	lw	a0,-24(s0)
8000a0f0:	fb9f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
            rt_schedule();
8000a0f4:	58d0c0ef          	jal	ra,80016e80 <rt_schedule>

            /* thread is waked up */
            result = thread->error;
8000a0f8:	fe442783          	lw	a5,-28(s0)
8000a0fc:	03c7a783          	lw	a5,60(a5)
8000a100:	fef42623          	sw	a5,-20(s0)

            level = rt_hw_interrupt_disable();
8000a104:	f9df50ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000a108:	fea42423          	sw	a0,-24(s0)
        }
    }
    /* clean completed flag */
    completion->flag = RT_UNCOMPLETED;
8000a10c:	fdc42783          	lw	a5,-36(s0)
8000a110:	0007a023          	sw	zero,0(a5)

__exit:
    rt_hw_interrupt_enable(level);
8000a114:	fe842503          	lw	a0,-24(s0)
8000a118:	f91f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    return result;
8000a11c:	fec42783          	lw	a5,-20(s0)
}
8000a120:	00078513          	mv	a0,a5
8000a124:	02c12083          	lw	ra,44(sp)
8000a128:	02812403          	lw	s0,40(sp)
8000a12c:	03010113          	addi	sp,sp,48
8000a130:	00008067          	ret

8000a134 <rt_completion_done>:
 * @brief This function indicates a completion has done.
 *
 * @param completion is a pointer to a completion object.
 */
void rt_completion_done(struct rt_completion *completion)
{
8000a134:	fd010113          	addi	sp,sp,-48
8000a138:	02112623          	sw	ra,44(sp)
8000a13c:	02812423          	sw	s0,40(sp)
8000a140:	03010413          	addi	s0,sp,48
8000a144:	fca42e23          	sw	a0,-36(s0)
    rt_base_t level;
    RT_ASSERT(completion != RT_NULL);

    if (completion->flag == RT_COMPLETED)
8000a148:	fdc42783          	lw	a5,-36(s0)
8000a14c:	0007a703          	lw	a4,0(a5)
8000a150:	00100793          	li	a5,1
8000a154:	06f70263          	beq	a4,a5,8000a1b8 <rt_completion_done+0x84>
        return;

    level = rt_hw_interrupt_disable();
8000a158:	f49f50ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000a15c:	fea42623          	sw	a0,-20(s0)
    completion->flag = RT_COMPLETED;
8000a160:	fdc42783          	lw	a5,-36(s0)
8000a164:	00100713          	li	a4,1
8000a168:	00e7a023          	sw	a4,0(a5)

    if (!rt_list_isempty(&(completion->suspended_list)))
8000a16c:	fdc42783          	lw	a5,-36(s0)
8000a170:	00478793          	addi	a5,a5,4
8000a174:	00078513          	mv	a0,a5
8000a178:	e3dff0ef          	jal	ra,80009fb4 <rt_list_isempty>
8000a17c:	00050793          	mv	a5,a0
8000a180:	02079663          	bnez	a5,8000a1ac <rt_completion_done+0x78>
    {
        /* there is one thread in suspended list */
        struct rt_thread *thread;

        /* get thread entry */
        thread = rt_list_entry(completion->suspended_list.next,
8000a184:	fdc42783          	lw	a5,-36(s0)
8000a188:	0047a783          	lw	a5,4(a5)
8000a18c:	fe078793          	addi	a5,a5,-32
8000a190:	fef42423          	sw	a5,-24(s0)
                               struct rt_thread,
                               tlist);

        /* resume it */
        rt_thread_resume(thread);
8000a194:	fe842503          	lw	a0,-24(s0)
8000a198:	2c50d0ef          	jal	ra,80017c5c <rt_thread_resume>
        rt_hw_interrupt_enable(level);
8000a19c:	fec42503          	lw	a0,-20(s0)
8000a1a0:	f09f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

        /* perform a schedule */
        rt_schedule();
8000a1a4:	4dd0c0ef          	jal	ra,80016e80 <rt_schedule>
8000a1a8:	0140006f          	j	8000a1bc <rt_completion_done+0x88>
    }
    else
    {
        rt_hw_interrupt_enable(level);
8000a1ac:	fec42503          	lw	a0,-20(s0)
8000a1b0:	ef9f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
8000a1b4:	0080006f          	j	8000a1bc <rt_completion_done+0x88>
        return;
8000a1b8:	00000013          	nop
    }
}
8000a1bc:	02c12083          	lw	ra,44(sp)
8000a1c0:	02812403          	lw	s0,40(sp)
8000a1c4:	03010113          	addi	sp,sp,48
8000a1c8:	00008067          	ret

8000a1cc <rt_list_init>:
                   rt_uint16_t size,
                   rt_uint16_t lwm,
                   void (*evt_notify)(struct rt_data_queue *queue, rt_uint32_t event))
{
    RT_ASSERT(queue != RT_NULL);
    RT_ASSERT(size > 0);
8000a1cc:	fe010113          	addi	sp,sp,-32
8000a1d0:	00812e23          	sw	s0,28(sp)
8000a1d4:	02010413          	addi	s0,sp,32
8000a1d8:	fea42623          	sw	a0,-20(s0)

8000a1dc:	fec42783          	lw	a5,-20(s0)
8000a1e0:	fec42703          	lw	a4,-20(s0)
8000a1e4:	00e7a223          	sw	a4,4(a5)
8000a1e8:	fec42783          	lw	a5,-20(s0)
8000a1ec:	0047a703          	lw	a4,4(a5)
8000a1f0:	fec42783          	lw	a5,-20(s0)
8000a1f4:	00e7a023          	sw	a4,0(a5)
    queue->evt_notify = evt_notify;
8000a1f8:	00000013          	nop
8000a1fc:	01c12403          	lw	s0,28(sp)
8000a200:	02010113          	addi	sp,sp,32
8000a204:	00008067          	ret

8000a208 <rt_list_insert_before>:

    return RT_EOK;
}
RTM_EXPORT(rt_data_queue_init);

/**
8000a208:	fe010113          	addi	sp,sp,-32
8000a20c:	00812e23          	sw	s0,28(sp)
8000a210:	02010413          	addi	s0,sp,32
8000a214:	fea42623          	sw	a0,-20(s0)
8000a218:	feb42423          	sw	a1,-24(s0)
 * @brief    This function will write data to the data queue. If the data queue is full,
8000a21c:	fec42783          	lw	a5,-20(s0)
8000a220:	0047a783          	lw	a5,4(a5)
8000a224:	fe842703          	lw	a4,-24(s0)
8000a228:	00e7a023          	sw	a4,0(a5)
 *           the thread will suspend for the specified amount of time.
8000a22c:	fec42783          	lw	a5,-20(s0)
8000a230:	0047a703          	lw	a4,4(a5)
8000a234:	fe842783          	lw	a5,-24(s0)
8000a238:	00e7a223          	sw	a4,4(a5)
 *
 * @param    queue is a pointer to the data queue object.
8000a23c:	fec42783          	lw	a5,-20(s0)
8000a240:	fe842703          	lw	a4,-24(s0)
8000a244:	00e7a223          	sw	a4,4(a5)
 * .
8000a248:	fe842783          	lw	a5,-24(s0)
8000a24c:	fec42703          	lw	a4,-20(s0)
8000a250:	00e7a023          	sw	a4,0(a5)
 * @param    data_ptr is the buffer pointer of the data to be written.
8000a254:	00000013          	nop
8000a258:	01c12403          	lw	s0,28(sp)
8000a25c:	02010113          	addi	sp,sp,32
8000a260:	00008067          	ret

8000a264 <rt_list_isempty>:
    rt_base_t level;
    rt_thread_t thread;
    rt_err_t    result;

    RT_ASSERT(queue != RT_NULL);
    RT_ASSERT(queue->magic == DATAQUEUE_MAGIC);
8000a264:	fe010113          	addi	sp,sp,-32
8000a268:	00812e23          	sw	s0,28(sp)
8000a26c:	02010413          	addi	s0,sp,32
8000a270:	fea42623          	sw	a0,-20(s0)

8000a274:	fec42783          	lw	a5,-20(s0)
8000a278:	0007a783          	lw	a5,0(a5)
8000a27c:	fec42703          	lw	a4,-20(s0)
8000a280:	40f707b3          	sub	a5,a4,a5
8000a284:	0017b793          	seqz	a5,a5
8000a288:	0ff7f793          	zext.b	a5,a5
    /* current context checking */
8000a28c:	00078513          	mv	a0,a5
8000a290:	01c12403          	lw	s0,28(sp)
8000a294:	02010113          	addi	sp,sp,32
8000a298:	00008067          	ret

8000a29c <rt_data_queue_init>:
{
8000a29c:	fe010113          	addi	sp,sp,-32
8000a2a0:	00112e23          	sw	ra,28(sp)
8000a2a4:	00812c23          	sw	s0,24(sp)
8000a2a8:	02010413          	addi	s0,sp,32
8000a2ac:	fea42623          	sw	a0,-20(s0)
8000a2b0:	00058793          	mv	a5,a1
8000a2b4:	00060713          	mv	a4,a2
8000a2b8:	fed42223          	sw	a3,-28(s0)
8000a2bc:	fef41523          	sh	a5,-22(s0)
8000a2c0:	00070793          	mv	a5,a4
8000a2c4:	fef41423          	sh	a5,-24(s0)
    queue->evt_notify = evt_notify;
8000a2c8:	fec42783          	lw	a5,-20(s0)
8000a2cc:	fe442703          	lw	a4,-28(s0)
8000a2d0:	02e7a023          	sw	a4,32(a5)
    queue->magic = DATAQUEUE_MAGIC;
8000a2d4:	fec42783          	lw	a5,-20(s0)
8000a2d8:	bead1737          	lui	a4,0xbead1
8000a2dc:	e0e70713          	addi	a4,a4,-498 # bead0e0e <__bss_end+0x3ea4a652>
8000a2e0:	00e7a023          	sw	a4,0(a5)
    queue->size = size;
8000a2e4:	fec42783          	lw	a5,-20(s0)
8000a2e8:	fea45703          	lhu	a4,-22(s0)
8000a2ec:	00e79223          	sh	a4,4(a5)
    queue->lwm = lwm;
8000a2f0:	fec42783          	lw	a5,-20(s0)
8000a2f4:	fe845703          	lhu	a4,-24(s0)
8000a2f8:	00e79323          	sh	a4,6(a5)
    queue->get_index = 0;
8000a2fc:	fec42783          	lw	a5,-20(s0)
8000a300:	0087a683          	lw	a3,8(a5)
8000a304:	ffff8737          	lui	a4,0xffff8
8000a308:	00e6f733          	and	a4,a3,a4
8000a30c:	00e7a423          	sw	a4,8(a5)
    queue->put_index = 0;
8000a310:	fec42783          	lw	a5,-20(s0)
8000a314:	0087a683          	lw	a3,8(a5)
8000a318:	80010737          	lui	a4,0x80010
8000a31c:	fff70713          	addi	a4,a4,-1 # 8000ffff <cmd_tail+0x213>
8000a320:	00e6f733          	and	a4,a3,a4
8000a324:	00e7a423          	sw	a4,8(a5)
    queue->is_empty = 1;
8000a328:	fec42783          	lw	a5,-20(s0)
8000a32c:	0087a683          	lw	a3,8(a5)
8000a330:	00008737          	lui	a4,0x8
8000a334:	00e6e733          	or	a4,a3,a4
8000a338:	00e7a423          	sw	a4,8(a5)
    queue->is_full = 0;
8000a33c:	fec42783          	lw	a5,-20(s0)
8000a340:	0087a683          	lw	a3,8(a5)
8000a344:	80000737          	lui	a4,0x80000
8000a348:	fff70713          	addi	a4,a4,-1 # 7fffffff <__STACKSIZE__+0x7fffbfff>
8000a34c:	00e6f733          	and	a4,a3,a4
8000a350:	00e7a423          	sw	a4,8(a5)
    rt_list_init(&(queue->suspended_push_list));
8000a354:	fec42783          	lw	a5,-20(s0)
8000a358:	01078793          	addi	a5,a5,16
8000a35c:	00078513          	mv	a0,a5
8000a360:	e6dff0ef          	jal	ra,8000a1cc <rt_list_init>
    rt_list_init(&(queue->suspended_pop_list));
8000a364:	fec42783          	lw	a5,-20(s0)
8000a368:	01878793          	addi	a5,a5,24
8000a36c:	00078513          	mv	a0,a5
8000a370:	e5dff0ef          	jal	ra,8000a1cc <rt_list_init>
    queue->queue = (struct rt_data_item *)rt_malloc(sizeof(struct rt_data_item) * size);
8000a374:	fea45783          	lhu	a5,-22(s0)
8000a378:	00379793          	slli	a5,a5,0x3
8000a37c:	00078513          	mv	a0,a5
8000a380:	14c0b0ef          	jal	ra,800154cc <rt_malloc>
8000a384:	00050713          	mv	a4,a0
8000a388:	fec42783          	lw	a5,-20(s0)
8000a38c:	00e7a623          	sw	a4,12(a5)
    if (queue->queue == RT_NULL)
8000a390:	fec42783          	lw	a5,-20(s0)
8000a394:	00c7a783          	lw	a5,12(a5)
8000a398:	00079663          	bnez	a5,8000a3a4 <rt_data_queue_init+0x108>
        return -RT_ENOMEM;
8000a39c:	ffb00793          	li	a5,-5
8000a3a0:	0080006f          	j	8000a3a8 <rt_data_queue_init+0x10c>
    return RT_EOK;
8000a3a4:	00000793          	li	a5,0
}
8000a3a8:	00078513          	mv	a0,a5
8000a3ac:	01c12083          	lw	ra,28(sp)
8000a3b0:	01812403          	lw	s0,24(sp)
8000a3b4:	02010113          	addi	sp,sp,32
8000a3b8:	00008067          	ret

8000a3bc <rt_data_queue_push>:
{
8000a3bc:	fd010113          	addi	sp,sp,-48
8000a3c0:	02112623          	sw	ra,44(sp)
8000a3c4:	02812423          	sw	s0,40(sp)
8000a3c8:	03010413          	addi	s0,sp,48
8000a3cc:	fca42e23          	sw	a0,-36(s0)
8000a3d0:	fcb42c23          	sw	a1,-40(s0)
8000a3d4:	fcc42a23          	sw	a2,-44(s0)
8000a3d8:	fcd42823          	sw	a3,-48(s0)
    RT_DEBUG_SCHEDULER_AVAILABLE(timeout != 0);

    result = RT_EOK;
8000a3dc:	fe042423          	sw	zero,-24(s0)
    thread = rt_thread_self();
8000a3e0:	3e00d0ef          	jal	ra,800177c0 <rt_thread_self>
8000a3e4:	fea42223          	sw	a0,-28(s0)

    level = rt_hw_interrupt_disable();
8000a3e8:	cb9f50ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000a3ec:	fea42623          	sw	a0,-20(s0)
    while (queue->is_full)
8000a3f0:	0a00006f          	j	8000a490 <rt_data_queue_push+0xd4>
    {
        /* queue is full */
        if (timeout == 0)
8000a3f4:	fd042783          	lw	a5,-48(s0)
8000a3f8:	00079863          	bnez	a5,8000a408 <rt_data_queue_push+0x4c>
        {
            result = -RT_ETIMEOUT;
8000a3fc:	ffe00793          	li	a5,-2
8000a400:	fef42423          	sw	a5,-24(s0)

            goto __exit;
8000a404:	29c0006f          	j	8000a6a0 <rt_data_queue_push+0x2e4>
        }

        /* reset thread error number */
        thread->error = RT_EOK;
8000a408:	fe442783          	lw	a5,-28(s0)
8000a40c:	0207ae23          	sw	zero,60(a5)

        /* suspend thread on the push list */
        rt_thread_suspend(thread);
8000a410:	fe442503          	lw	a0,-28(s0)
8000a414:	76c0d0ef          	jal	ra,80017b80 <rt_thread_suspend>
        rt_list_insert_before(&(queue->suspended_push_list), &(thread->tlist));
8000a418:	fdc42783          	lw	a5,-36(s0)
8000a41c:	01078713          	addi	a4,a5,16
8000a420:	fe442783          	lw	a5,-28(s0)
8000a424:	02078793          	addi	a5,a5,32
8000a428:	00078593          	mv	a1,a5
8000a42c:	00070513          	mv	a0,a4
8000a430:	dd9ff0ef          	jal	ra,8000a208 <rt_list_insert_before>
        /* start timer */
        if (timeout > 0)
8000a434:	fd042783          	lw	a5,-48(s0)
8000a438:	02f05863          	blez	a5,8000a468 <rt_data_queue_push+0xac>
        {
            /* reset the timeout of thread timer and start it */
            rt_timer_control(&(thread->thread_timer),
8000a43c:	fe442783          	lw	a5,-28(s0)
8000a440:	05878793          	addi	a5,a5,88
8000a444:	fd040713          	addi	a4,s0,-48
8000a448:	00070613          	mv	a2,a4
8000a44c:	00000593          	li	a1,0
8000a450:	00078513          	mv	a0,a5
8000a454:	74d0d0ef          	jal	ra,800183a0 <rt_timer_control>
                             RT_TIMER_CTRL_SET_TIME,
                             &timeout);
            rt_timer_start(&(thread->thread_timer));
8000a458:	fe442783          	lw	a5,-28(s0)
8000a45c:	05878793          	addi	a5,a5,88
8000a460:	00078513          	mv	a0,a5
8000a464:	3d10d0ef          	jal	ra,80018034 <rt_timer_start>
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
8000a468:	fec42503          	lw	a0,-20(s0)
8000a46c:	c3df50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

        /* do schedule */
        rt_schedule();
8000a470:	2110c0ef          	jal	ra,80016e80 <rt_schedule>

        /* thread is waked up */
        result = thread->error;
8000a474:	fe442783          	lw	a5,-28(s0)
8000a478:	03c7a783          	lw	a5,60(a5)
8000a47c:	fef42423          	sw	a5,-24(s0)
        level = rt_hw_interrupt_disable();
8000a480:	c21f50ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000a484:	fea42623          	sw	a0,-20(s0)
        if (result != RT_EOK) goto __exit;
8000a488:	fe842783          	lw	a5,-24(s0)
8000a48c:	20079463          	bnez	a5,8000a694 <rt_data_queue_push+0x2d8>
    while (queue->is_full)
8000a490:	fdc42783          	lw	a5,-36(s0)
8000a494:	0087a703          	lw	a4,8(a5)
8000a498:	800007b7          	lui	a5,0x80000
8000a49c:	00f777b3          	and	a5,a4,a5
8000a4a0:	f4079ae3          	bnez	a5,8000a3f4 <rt_data_queue_push+0x38>
    }

    queue->queue[queue->put_index].data_ptr  = data_ptr;
8000a4a4:	fdc42783          	lw	a5,-36(s0)
8000a4a8:	00c7a703          	lw	a4,12(a5) # 8000000c <__START_ADDR__+0xc>
8000a4ac:	fdc42783          	lw	a5,-36(s0)
8000a4b0:	0087a783          	lw	a5,8(a5)
8000a4b4:	0107d793          	srli	a5,a5,0x10
8000a4b8:	00078693          	mv	a3,a5
8000a4bc:	000087b7          	lui	a5,0x8
8000a4c0:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a4c4:	00f6f7b3          	and	a5,a3,a5
8000a4c8:	01079793          	slli	a5,a5,0x10
8000a4cc:	0107d793          	srli	a5,a5,0x10
8000a4d0:	00379793          	slli	a5,a5,0x3
8000a4d4:	00f707b3          	add	a5,a4,a5
8000a4d8:	fd842703          	lw	a4,-40(s0)
8000a4dc:	00e7a023          	sw	a4,0(a5)
    queue->queue[queue->put_index].data_size = data_size;
8000a4e0:	fdc42783          	lw	a5,-36(s0)
8000a4e4:	00c7a703          	lw	a4,12(a5)
8000a4e8:	fdc42783          	lw	a5,-36(s0)
8000a4ec:	0087a783          	lw	a5,8(a5)
8000a4f0:	0107d793          	srli	a5,a5,0x10
8000a4f4:	00078693          	mv	a3,a5
8000a4f8:	000087b7          	lui	a5,0x8
8000a4fc:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a500:	00f6f7b3          	and	a5,a3,a5
8000a504:	01079793          	slli	a5,a5,0x10
8000a508:	0107d793          	srli	a5,a5,0x10
8000a50c:	00379793          	slli	a5,a5,0x3
8000a510:	00f707b3          	add	a5,a4,a5
8000a514:	fd442703          	lw	a4,-44(s0)
8000a518:	00e7a223          	sw	a4,4(a5)
    queue->put_index += 1;
8000a51c:	fdc42783          	lw	a5,-36(s0)
8000a520:	0087a783          	lw	a5,8(a5)
8000a524:	0107d793          	srli	a5,a5,0x10
8000a528:	00078713          	mv	a4,a5
8000a52c:	000087b7          	lui	a5,0x8
8000a530:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a534:	00f777b3          	and	a5,a4,a5
8000a538:	01079793          	slli	a5,a5,0x10
8000a53c:	0107d793          	srli	a5,a5,0x10
8000a540:	00178793          	addi	a5,a5,1
8000a544:	01079793          	slli	a5,a5,0x10
8000a548:	0107d793          	srli	a5,a5,0x10
8000a54c:	00078713          	mv	a4,a5
8000a550:	000087b7          	lui	a5,0x8
8000a554:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a558:	00f777b3          	and	a5,a4,a5
8000a55c:	01079693          	slli	a3,a5,0x10
8000a560:	0106d693          	srli	a3,a3,0x10
8000a564:	fdc42783          	lw	a5,-36(s0)
8000a568:	00008737          	lui	a4,0x8
8000a56c:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a570:	00e6f733          	and	a4,a3,a4
8000a574:	01071713          	slli	a4,a4,0x10
8000a578:	0087a603          	lw	a2,8(a5)
8000a57c:	800106b7          	lui	a3,0x80010
8000a580:	fff68693          	addi	a3,a3,-1 # 8000ffff <cmd_tail+0x213>
8000a584:	00d676b3          	and	a3,a2,a3
8000a588:	00e6e733          	or	a4,a3,a4
8000a58c:	00e7a423          	sw	a4,8(a5)
    if (queue->put_index == queue->size)
8000a590:	fdc42783          	lw	a5,-36(s0)
8000a594:	0087a783          	lw	a5,8(a5)
8000a598:	0107d793          	srli	a5,a5,0x10
8000a59c:	00078713          	mv	a4,a5
8000a5a0:	000087b7          	lui	a5,0x8
8000a5a4:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a5a8:	00f777b3          	and	a5,a4,a5
8000a5ac:	01079793          	slli	a5,a5,0x10
8000a5b0:	0107d793          	srli	a5,a5,0x10
8000a5b4:	00078713          	mv	a4,a5
8000a5b8:	fdc42783          	lw	a5,-36(s0)
8000a5bc:	0047d783          	lhu	a5,4(a5)
8000a5c0:	00f71e63          	bne	a4,a5,8000a5dc <rt_data_queue_push+0x220>
    {
        queue->put_index = 0;
8000a5c4:	fdc42783          	lw	a5,-36(s0)
8000a5c8:	0087a683          	lw	a3,8(a5)
8000a5cc:	80010737          	lui	a4,0x80010
8000a5d0:	fff70713          	addi	a4,a4,-1 # 8000ffff <cmd_tail+0x213>
8000a5d4:	00e6f733          	and	a4,a3,a4
8000a5d8:	00e7a423          	sw	a4,8(a5)
    }
    queue->is_empty = 0;
8000a5dc:	fdc42783          	lw	a5,-36(s0)
8000a5e0:	0087a683          	lw	a3,8(a5)
8000a5e4:	ffff8737          	lui	a4,0xffff8
8000a5e8:	fff70713          	addi	a4,a4,-1 # ffff7fff <__bss_end+0x7ff71843>
8000a5ec:	00e6f733          	and	a4,a3,a4
8000a5f0:	00e7a423          	sw	a4,8(a5)
    if (queue->put_index == queue->get_index)
8000a5f4:	fdc42783          	lw	a5,-36(s0)
8000a5f8:	0087a783          	lw	a5,8(a5)
8000a5fc:	0107d793          	srli	a5,a5,0x10
8000a600:	00078713          	mv	a4,a5
8000a604:	000087b7          	lui	a5,0x8
8000a608:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a60c:	00f777b3          	and	a5,a4,a5
8000a610:	01079713          	slli	a4,a5,0x10
8000a614:	01075713          	srli	a4,a4,0x10
8000a618:	fdc42783          	lw	a5,-36(s0)
8000a61c:	0087a783          	lw	a5,8(a5)
8000a620:	00078693          	mv	a3,a5
8000a624:	000087b7          	lui	a5,0x8
8000a628:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a62c:	00f6f7b3          	and	a5,a3,a5
8000a630:	01079793          	slli	a5,a5,0x10
8000a634:	0107d793          	srli	a5,a5,0x10
8000a638:	00f71c63          	bne	a4,a5,8000a650 <rt_data_queue_push+0x294>
    {
        queue->is_full = 1;
8000a63c:	fdc42783          	lw	a5,-36(s0)
8000a640:	0087a683          	lw	a3,8(a5)
8000a644:	80000737          	lui	a4,0x80000
8000a648:	00e6e733          	or	a4,a3,a4
8000a64c:	00e7a423          	sw	a4,8(a5)
    }

    /* there is at least one thread in suspended list */
    if (!rt_list_isempty(&(queue->suspended_pop_list)))
8000a650:	fdc42783          	lw	a5,-36(s0)
8000a654:	01878793          	addi	a5,a5,24
8000a658:	00078513          	mv	a0,a5
8000a65c:	c09ff0ef          	jal	ra,8000a264 <rt_list_isempty>
8000a660:	00050793          	mv	a5,a0
8000a664:	02079c63          	bnez	a5,8000a69c <rt_data_queue_push+0x2e0>
    {
        /* get thread entry */
        thread = rt_list_entry(queue->suspended_pop_list.next,
8000a668:	fdc42783          	lw	a5,-36(s0)
8000a66c:	0187a783          	lw	a5,24(a5)
8000a670:	fe078793          	addi	a5,a5,-32
8000a674:	fef42223          	sw	a5,-28(s0)
                               struct rt_thread,
                               tlist);

        /* resume it */
        rt_thread_resume(thread);
8000a678:	fe442503          	lw	a0,-28(s0)
8000a67c:	5e00d0ef          	jal	ra,80017c5c <rt_thread_resume>
        rt_hw_interrupt_enable(level);
8000a680:	fec42503          	lw	a0,-20(s0)
8000a684:	a25f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

        /* perform a schedule */
        rt_schedule();
8000a688:	7f80c0ef          	jal	ra,80016e80 <rt_schedule>

        return result;
8000a68c:	fe842783          	lw	a5,-24(s0)
8000a690:	0440006f          	j	8000a6d4 <rt_data_queue_push+0x318>
        if (result != RT_EOK) goto __exit;
8000a694:	00000013          	nop
8000a698:	0080006f          	j	8000a6a0 <rt_data_queue_push+0x2e4>
    }

__exit:
8000a69c:	00000013          	nop
    rt_hw_interrupt_enable(level);
8000a6a0:	fec42503          	lw	a0,-20(s0)
8000a6a4:	a05f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
    if ((result == RT_EOK) && queue->evt_notify != RT_NULL)
8000a6a8:	fe842783          	lw	a5,-24(s0)
8000a6ac:	02079263          	bnez	a5,8000a6d0 <rt_data_queue_push+0x314>
8000a6b0:	fdc42783          	lw	a5,-36(s0)
8000a6b4:	0207a783          	lw	a5,32(a5)
8000a6b8:	00078c63          	beqz	a5,8000a6d0 <rt_data_queue_push+0x314>
    {
        queue->evt_notify(queue, RT_DATAQUEUE_EVENT_PUSH);
8000a6bc:	fdc42783          	lw	a5,-36(s0)
8000a6c0:	0207a783          	lw	a5,32(a5)
8000a6c4:	00200593          	li	a1,2
8000a6c8:	fdc42503          	lw	a0,-36(s0)
8000a6cc:	000780e7          	jalr	a5
    }

    return result;
8000a6d0:	fe842783          	lw	a5,-24(s0)
}
8000a6d4:	00078513          	mv	a0,a5
8000a6d8:	02c12083          	lw	ra,44(sp)
8000a6dc:	02812403          	lw	s0,40(sp)
8000a6e0:	03010113          	addi	sp,sp,48
8000a6e4:	00008067          	ret

8000a6e8 <rt_data_queue_pop>:
 */
rt_err_t rt_data_queue_pop(struct rt_data_queue *queue,
                           const void **data_ptr,
                           rt_size_t *size,
                           rt_int32_t timeout)
{
8000a6e8:	fd010113          	addi	sp,sp,-48
8000a6ec:	02112623          	sw	ra,44(sp)
8000a6f0:	02812423          	sw	s0,40(sp)
8000a6f4:	03010413          	addi	s0,sp,48
8000a6f8:	fca42e23          	sw	a0,-36(s0)
8000a6fc:	fcb42c23          	sw	a1,-40(s0)
8000a700:	fcc42a23          	sw	a2,-44(s0)
8000a704:	fcd42823          	sw	a3,-48(s0)
    RT_ASSERT(size != RT_NULL);

    /* current context checking */
    RT_DEBUG_SCHEDULER_AVAILABLE(timeout != 0);

    result = RT_EOK;
8000a708:	fe042423          	sw	zero,-24(s0)
    thread = rt_thread_self();
8000a70c:	0b40d0ef          	jal	ra,800177c0 <rt_thread_self>
8000a710:	fea42223          	sw	a0,-28(s0)

    level = rt_hw_interrupt_disable();
8000a714:	98df50ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000a718:	fea42623          	sw	a0,-20(s0)
    while (queue->is_empty)
8000a71c:	0a00006f          	j	8000a7bc <rt_data_queue_pop+0xd4>
    {
        /* queue is empty */
        if (timeout == 0)
8000a720:	fd042783          	lw	a5,-48(s0)
8000a724:	00079863          	bnez	a5,8000a734 <rt_data_queue_pop+0x4c>
        {
            result = -RT_ETIMEOUT;
8000a728:	ffe00793          	li	a5,-2
8000a72c:	fef42423          	sw	a5,-24(s0)
            goto __exit;
8000a730:	2d00006f          	j	8000aa00 <rt_data_queue_pop+0x318>
        }

        /* reset thread error number */
        thread->error = RT_EOK;
8000a734:	fe442783          	lw	a5,-28(s0)
8000a738:	0207ae23          	sw	zero,60(a5)

        /* suspend thread on the pop list */
        rt_thread_suspend(thread);
8000a73c:	fe442503          	lw	a0,-28(s0)
8000a740:	4400d0ef          	jal	ra,80017b80 <rt_thread_suspend>
        rt_list_insert_before(&(queue->suspended_pop_list), &(thread->tlist));
8000a744:	fdc42783          	lw	a5,-36(s0)
8000a748:	01878713          	addi	a4,a5,24
8000a74c:	fe442783          	lw	a5,-28(s0)
8000a750:	02078793          	addi	a5,a5,32
8000a754:	00078593          	mv	a1,a5
8000a758:	00070513          	mv	a0,a4
8000a75c:	aadff0ef          	jal	ra,8000a208 <rt_list_insert_before>
        /* start timer */
        if (timeout > 0)
8000a760:	fd042783          	lw	a5,-48(s0)
8000a764:	02f05863          	blez	a5,8000a794 <rt_data_queue_pop+0xac>
        {
            /* reset the timeout of thread timer and start it */
            rt_timer_control(&(thread->thread_timer),
8000a768:	fe442783          	lw	a5,-28(s0)
8000a76c:	05878793          	addi	a5,a5,88
8000a770:	fd040713          	addi	a4,s0,-48
8000a774:	00070613          	mv	a2,a4
8000a778:	00000593          	li	a1,0
8000a77c:	00078513          	mv	a0,a5
8000a780:	4210d0ef          	jal	ra,800183a0 <rt_timer_control>
                             RT_TIMER_CTRL_SET_TIME,
                             &timeout);
            rt_timer_start(&(thread->thread_timer));
8000a784:	fe442783          	lw	a5,-28(s0)
8000a788:	05878793          	addi	a5,a5,88
8000a78c:	00078513          	mv	a0,a5
8000a790:	0a50d0ef          	jal	ra,80018034 <rt_timer_start>
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
8000a794:	fec42503          	lw	a0,-20(s0)
8000a798:	911f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

        /* do schedule */
        rt_schedule();
8000a79c:	6e40c0ef          	jal	ra,80016e80 <rt_schedule>

        /* thread is waked up */
        result = thread->error;
8000a7a0:	fe442783          	lw	a5,-28(s0)
8000a7a4:	03c7a783          	lw	a5,60(a5)
8000a7a8:	fef42423          	sw	a5,-24(s0)
        level  = rt_hw_interrupt_disable();
8000a7ac:	8f5f50ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000a7b0:	fea42623          	sw	a0,-20(s0)
        if (result != RT_EOK)
8000a7b4:	fe842783          	lw	a5,-24(s0)
8000a7b8:	22079e63          	bnez	a5,8000a9f4 <rt_data_queue_pop+0x30c>
    while (queue->is_empty)
8000a7bc:	fdc42783          	lw	a5,-36(s0)
8000a7c0:	0087a703          	lw	a4,8(a5)
8000a7c4:	000087b7          	lui	a5,0x8
8000a7c8:	00f777b3          	and	a5,a4,a5
8000a7cc:	f4079ae3          	bnez	a5,8000a720 <rt_data_queue_pop+0x38>
            goto __exit;
    }

    *data_ptr = queue->queue[queue->get_index].data_ptr;
8000a7d0:	fdc42783          	lw	a5,-36(s0)
8000a7d4:	00c7a703          	lw	a4,12(a5) # 800c <__STACKSIZE__+0x400c>
8000a7d8:	fdc42783          	lw	a5,-36(s0)
8000a7dc:	0087a783          	lw	a5,8(a5)
8000a7e0:	00078693          	mv	a3,a5
8000a7e4:	000087b7          	lui	a5,0x8
8000a7e8:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a7ec:	00f6f7b3          	and	a5,a3,a5
8000a7f0:	01079793          	slli	a5,a5,0x10
8000a7f4:	0107d793          	srli	a5,a5,0x10
8000a7f8:	00379793          	slli	a5,a5,0x3
8000a7fc:	00f707b3          	add	a5,a4,a5
8000a800:	0007a703          	lw	a4,0(a5)
8000a804:	fd842783          	lw	a5,-40(s0)
8000a808:	00e7a023          	sw	a4,0(a5)
    *size     = queue->queue[queue->get_index].data_size;
8000a80c:	fdc42783          	lw	a5,-36(s0)
8000a810:	00c7a703          	lw	a4,12(a5)
8000a814:	fdc42783          	lw	a5,-36(s0)
8000a818:	0087a783          	lw	a5,8(a5)
8000a81c:	00078693          	mv	a3,a5
8000a820:	000087b7          	lui	a5,0x8
8000a824:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a828:	00f6f7b3          	and	a5,a3,a5
8000a82c:	01079793          	slli	a5,a5,0x10
8000a830:	0107d793          	srli	a5,a5,0x10
8000a834:	00379793          	slli	a5,a5,0x3
8000a838:	00f707b3          	add	a5,a4,a5
8000a83c:	0047a703          	lw	a4,4(a5)
8000a840:	fd442783          	lw	a5,-44(s0)
8000a844:	00e7a023          	sw	a4,0(a5)
    queue->get_index += 1;
8000a848:	fdc42783          	lw	a5,-36(s0)
8000a84c:	0087a783          	lw	a5,8(a5)
8000a850:	00078713          	mv	a4,a5
8000a854:	000087b7          	lui	a5,0x8
8000a858:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a85c:	00f777b3          	and	a5,a4,a5
8000a860:	01079793          	slli	a5,a5,0x10
8000a864:	0107d793          	srli	a5,a5,0x10
8000a868:	00178793          	addi	a5,a5,1
8000a86c:	01079793          	slli	a5,a5,0x10
8000a870:	0107d793          	srli	a5,a5,0x10
8000a874:	00078713          	mv	a4,a5
8000a878:	000087b7          	lui	a5,0x8
8000a87c:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a880:	00f777b3          	and	a5,a4,a5
8000a884:	01079693          	slli	a3,a5,0x10
8000a888:	0106d693          	srli	a3,a3,0x10
8000a88c:	fdc42783          	lw	a5,-36(s0)
8000a890:	00008737          	lui	a4,0x8
8000a894:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a898:	00e6f733          	and	a4,a3,a4
8000a89c:	0087a603          	lw	a2,8(a5)
8000a8a0:	ffff86b7          	lui	a3,0xffff8
8000a8a4:	00d676b3          	and	a3,a2,a3
8000a8a8:	00e6e733          	or	a4,a3,a4
8000a8ac:	00e7a423          	sw	a4,8(a5)
    if (queue->get_index == queue->size)
8000a8b0:	fdc42783          	lw	a5,-36(s0)
8000a8b4:	0087a783          	lw	a5,8(a5)
8000a8b8:	00078713          	mv	a4,a5
8000a8bc:	000087b7          	lui	a5,0x8
8000a8c0:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a8c4:	00f777b3          	and	a5,a4,a5
8000a8c8:	01079793          	slli	a5,a5,0x10
8000a8cc:	0107d793          	srli	a5,a5,0x10
8000a8d0:	00078713          	mv	a4,a5
8000a8d4:	fdc42783          	lw	a5,-36(s0)
8000a8d8:	0047d783          	lhu	a5,4(a5)
8000a8dc:	00f71c63          	bne	a4,a5,8000a8f4 <rt_data_queue_pop+0x20c>
    {
        queue->get_index = 0;
8000a8e0:	fdc42783          	lw	a5,-36(s0)
8000a8e4:	0087a683          	lw	a3,8(a5)
8000a8e8:	ffff8737          	lui	a4,0xffff8
8000a8ec:	00e6f733          	and	a4,a3,a4
8000a8f0:	00e7a423          	sw	a4,8(a5)
    }
    queue->is_full = 0;
8000a8f4:	fdc42783          	lw	a5,-36(s0)
8000a8f8:	0087a683          	lw	a3,8(a5)
8000a8fc:	80000737          	lui	a4,0x80000
8000a900:	fff70713          	addi	a4,a4,-1 # 7fffffff <__STACKSIZE__+0x7fffbfff>
8000a904:	00e6f733          	and	a4,a3,a4
8000a908:	00e7a423          	sw	a4,8(a5)
    if (queue->put_index == queue->get_index)
8000a90c:	fdc42783          	lw	a5,-36(s0)
8000a910:	0087a783          	lw	a5,8(a5)
8000a914:	0107d793          	srli	a5,a5,0x10
8000a918:	00078713          	mv	a4,a5
8000a91c:	000087b7          	lui	a5,0x8
8000a920:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a924:	00f777b3          	and	a5,a4,a5
8000a928:	01079713          	slli	a4,a5,0x10
8000a92c:	01075713          	srli	a4,a4,0x10
8000a930:	fdc42783          	lw	a5,-36(s0)
8000a934:	0087a783          	lw	a5,8(a5)
8000a938:	00078693          	mv	a3,a5
8000a93c:	000087b7          	lui	a5,0x8
8000a940:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000a944:	00f6f7b3          	and	a5,a3,a5
8000a948:	01079793          	slli	a5,a5,0x10
8000a94c:	0107d793          	srli	a5,a5,0x10
8000a950:	00f71c63          	bne	a4,a5,8000a968 <rt_data_queue_pop+0x280>
    {
        queue->is_empty = 1;
8000a954:	fdc42783          	lw	a5,-36(s0)
8000a958:	0087a683          	lw	a3,8(a5)
8000a95c:	00008737          	lui	a4,0x8
8000a960:	00e6e733          	or	a4,a3,a4
8000a964:	00e7a423          	sw	a4,8(a5)
    }

    if (rt_data_queue_len(queue) <= queue->lwm)
8000a968:	fdc42503          	lw	a0,-36(s0)
8000a96c:	34c000ef          	jal	ra,8000acb8 <rt_data_queue_len>
8000a970:	00050793          	mv	a5,a0
8000a974:	00078713          	mv	a4,a5
8000a978:	fdc42783          	lw	a5,-36(s0)
8000a97c:	0067d783          	lhu	a5,6(a5)
8000a980:	06e7ee63          	bltu	a5,a4,8000a9fc <rt_data_queue_pop+0x314>
    {
        /* there is at least one thread in suspended list */
        if (!rt_list_isempty(&(queue->suspended_push_list)))
8000a984:	fdc42783          	lw	a5,-36(s0)
8000a988:	01078793          	addi	a5,a5,16
8000a98c:	00078513          	mv	a0,a5
8000a990:	8d5ff0ef          	jal	ra,8000a264 <rt_list_isempty>
8000a994:	00050793          	mv	a5,a0
8000a998:	02079663          	bnez	a5,8000a9c4 <rt_data_queue_pop+0x2dc>
        {
            /* get thread entry */
            thread = rt_list_entry(queue->suspended_push_list.next,
8000a99c:	fdc42783          	lw	a5,-36(s0)
8000a9a0:	0107a783          	lw	a5,16(a5)
8000a9a4:	fe078793          	addi	a5,a5,-32
8000a9a8:	fef42223          	sw	a5,-28(s0)
                                   struct rt_thread,
                                   tlist);

            /* resume it */
            rt_thread_resume(thread);
8000a9ac:	fe442503          	lw	a0,-28(s0)
8000a9b0:	2ac0d0ef          	jal	ra,80017c5c <rt_thread_resume>
            rt_hw_interrupt_enable(level);
8000a9b4:	fec42503          	lw	a0,-20(s0)
8000a9b8:	ef0f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

            /* perform a schedule */
            rt_schedule();
8000a9bc:	4c40c0ef          	jal	ra,80016e80 <rt_schedule>
8000a9c0:	00c0006f          	j	8000a9cc <rt_data_queue_pop+0x2e4>
        }
        else
        {
            rt_hw_interrupt_enable(level);
8000a9c4:	fec42503          	lw	a0,-20(s0)
8000a9c8:	ee0f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
        }

        if (queue->evt_notify != RT_NULL)
8000a9cc:	fdc42783          	lw	a5,-36(s0)
8000a9d0:	0207a783          	lw	a5,32(a5)
8000a9d4:	00078c63          	beqz	a5,8000a9ec <rt_data_queue_pop+0x304>
            queue->evt_notify(queue, RT_DATAQUEUE_EVENT_LWM);
8000a9d8:	fdc42783          	lw	a5,-36(s0)
8000a9dc:	0207a783          	lw	a5,32(a5)
8000a9e0:	00300593          	li	a1,3
8000a9e4:	fdc42503          	lw	a0,-36(s0)
8000a9e8:	000780e7          	jalr	a5

        return result;
8000a9ec:	fe842783          	lw	a5,-24(s0)
8000a9f0:	0440006f          	j	8000aa34 <rt_data_queue_pop+0x34c>
            goto __exit;
8000a9f4:	00000013          	nop
8000a9f8:	0080006f          	j	8000aa00 <rt_data_queue_pop+0x318>
    }

__exit:
8000a9fc:	00000013          	nop
    rt_hw_interrupt_enable(level);
8000aa00:	fec42503          	lw	a0,-20(s0)
8000aa04:	ea4f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
    if ((result == RT_EOK) && (queue->evt_notify != RT_NULL))
8000aa08:	fe842783          	lw	a5,-24(s0)
8000aa0c:	02079263          	bnez	a5,8000aa30 <rt_data_queue_pop+0x348>
8000aa10:	fdc42783          	lw	a5,-36(s0)
8000aa14:	0207a783          	lw	a5,32(a5)
8000aa18:	00078c63          	beqz	a5,8000aa30 <rt_data_queue_pop+0x348>
    {
        queue->evt_notify(queue, RT_DATAQUEUE_EVENT_POP);
8000aa1c:	fdc42783          	lw	a5,-36(s0)
8000aa20:	0207a783          	lw	a5,32(a5)
8000aa24:	00100593          	li	a1,1
8000aa28:	fdc42503          	lw	a0,-36(s0)
8000aa2c:	000780e7          	jalr	a5
    }

    return result;
8000aa30:	fe842783          	lw	a5,-24(s0)
}
8000aa34:	00078513          	mv	a0,a5
8000aa38:	02c12083          	lw	ra,44(sp)
8000aa3c:	02812403          	lw	s0,40(sp)
8000aa40:	03010113          	addi	sp,sp,48
8000aa44:	00008067          	ret

8000aa48 <rt_data_queue_peek>:
 *           When the return value is -RT_EEMPTY, it means the data queue is empty.
 */
rt_err_t rt_data_queue_peek(struct rt_data_queue *queue,
                            const void **data_ptr,
                            rt_size_t *size)
{
8000aa48:	fd010113          	addi	sp,sp,-48
8000aa4c:	02112623          	sw	ra,44(sp)
8000aa50:	02812423          	sw	s0,40(sp)
8000aa54:	03010413          	addi	s0,sp,48
8000aa58:	fca42e23          	sw	a0,-36(s0)
8000aa5c:	fcb42c23          	sw	a1,-40(s0)
8000aa60:	fcc42a23          	sw	a2,-44(s0)
    rt_base_t level;

    RT_ASSERT(queue != RT_NULL);
    RT_ASSERT(queue->magic == DATAQUEUE_MAGIC);

    if (queue->is_empty)
8000aa64:	fdc42783          	lw	a5,-36(s0)
8000aa68:	0087a703          	lw	a4,8(a5)
8000aa6c:	000087b7          	lui	a5,0x8
8000aa70:	00f777b3          	and	a5,a4,a5
8000aa74:	00078663          	beqz	a5,8000aa80 <rt_data_queue_peek+0x38>
    {
        return -RT_EEMPTY;
8000aa78:	ffc00793          	li	a5,-4
8000aa7c:	0900006f          	j	8000ab0c <rt_data_queue_peek+0xc4>
    }

    level = rt_hw_interrupt_disable();
8000aa80:	e20f50ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000aa84:	fea42623          	sw	a0,-20(s0)

    *data_ptr = queue->queue[queue->get_index].data_ptr;
8000aa88:	fdc42783          	lw	a5,-36(s0)
8000aa8c:	00c7a703          	lw	a4,12(a5) # 800c <__STACKSIZE__+0x400c>
8000aa90:	fdc42783          	lw	a5,-36(s0)
8000aa94:	0087a783          	lw	a5,8(a5)
8000aa98:	00078693          	mv	a3,a5
8000aa9c:	000087b7          	lui	a5,0x8
8000aaa0:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000aaa4:	00f6f7b3          	and	a5,a3,a5
8000aaa8:	01079793          	slli	a5,a5,0x10
8000aaac:	0107d793          	srli	a5,a5,0x10
8000aab0:	00379793          	slli	a5,a5,0x3
8000aab4:	00f707b3          	add	a5,a4,a5
8000aab8:	0007a703          	lw	a4,0(a5)
8000aabc:	fd842783          	lw	a5,-40(s0)
8000aac0:	00e7a023          	sw	a4,0(a5)
    *size     = queue->queue[queue->get_index].data_size;
8000aac4:	fdc42783          	lw	a5,-36(s0)
8000aac8:	00c7a703          	lw	a4,12(a5)
8000aacc:	fdc42783          	lw	a5,-36(s0)
8000aad0:	0087a783          	lw	a5,8(a5)
8000aad4:	00078693          	mv	a3,a5
8000aad8:	000087b7          	lui	a5,0x8
8000aadc:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000aae0:	00f6f7b3          	and	a5,a3,a5
8000aae4:	01079793          	slli	a5,a5,0x10
8000aae8:	0107d793          	srli	a5,a5,0x10
8000aaec:	00379793          	slli	a5,a5,0x3
8000aaf0:	00f707b3          	add	a5,a4,a5
8000aaf4:	0047a703          	lw	a4,4(a5)
8000aaf8:	fd442783          	lw	a5,-44(s0)
8000aafc:	00e7a023          	sw	a4,0(a5)

    rt_hw_interrupt_enable(level);
8000ab00:	fec42503          	lw	a0,-20(s0)
8000ab04:	da4f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    return RT_EOK;
8000ab08:	00000793          	li	a5,0
}
8000ab0c:	00078513          	mv	a0,a5
8000ab10:	02c12083          	lw	ra,44(sp)
8000ab14:	02812403          	lw	s0,40(sp)
8000ab18:	03010113          	addi	sp,sp,48
8000ab1c:	00008067          	ret

8000ab20 <rt_data_queue_reset>:
 *           that are hanging and waiting.
 *
 * @param    queue is a pointer to the data queue object.
 */
void rt_data_queue_reset(struct rt_data_queue *queue)
{
8000ab20:	fd010113          	addi	sp,sp,-48
8000ab24:	02112623          	sw	ra,44(sp)
8000ab28:	02812423          	sw	s0,40(sp)
8000ab2c:	03010413          	addi	s0,sp,48
8000ab30:	fca42e23          	sw	a0,-36(s0)
    struct rt_thread *thread;

    RT_ASSERT(queue != RT_NULL);
    RT_ASSERT(queue->magic == DATAQUEUE_MAGIC);

    level = rt_hw_interrupt_disable();
8000ab34:	d6cf50ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000ab38:	fea42623          	sw	a0,-20(s0)

    queue->get_index = 0;
8000ab3c:	fdc42783          	lw	a5,-36(s0)
8000ab40:	0087a683          	lw	a3,8(a5)
8000ab44:	ffff8737          	lui	a4,0xffff8
8000ab48:	00e6f733          	and	a4,a3,a4
8000ab4c:	00e7a423          	sw	a4,8(a5)
    queue->put_index = 0;
8000ab50:	fdc42783          	lw	a5,-36(s0)
8000ab54:	0087a683          	lw	a3,8(a5)
8000ab58:	80010737          	lui	a4,0x80010
8000ab5c:	fff70713          	addi	a4,a4,-1 # 8000ffff <cmd_tail+0x213>
8000ab60:	00e6f733          	and	a4,a3,a4
8000ab64:	00e7a423          	sw	a4,8(a5)
    queue->is_empty = 1;
8000ab68:	fdc42783          	lw	a5,-36(s0)
8000ab6c:	0087a683          	lw	a3,8(a5)
8000ab70:	00008737          	lui	a4,0x8
8000ab74:	00e6e733          	or	a4,a3,a4
8000ab78:	00e7a423          	sw	a4,8(a5)
    queue->is_full = 0;
8000ab7c:	fdc42783          	lw	a5,-36(s0)
8000ab80:	0087a683          	lw	a3,8(a5)
8000ab84:	80000737          	lui	a4,0x80000
8000ab88:	fff70713          	addi	a4,a4,-1 # 7fffffff <__STACKSIZE__+0x7fffbfff>
8000ab8c:	00e6f733          	and	a4,a3,a4
8000ab90:	00e7a423          	sw	a4,8(a5)

    rt_hw_interrupt_enable(level);
8000ab94:	fec42503          	lw	a0,-20(s0)
8000ab98:	d10f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    rt_enter_critical();
8000ab9c:	78c0c0ef          	jal	ra,80017328 <rt_enter_critical>
    /* wakeup all suspend threads */

    /* resume on pop list */
    while (!rt_list_isempty(&(queue->suspended_pop_list)))
8000aba0:	0380006f          	j	8000abd8 <rt_data_queue_reset+0xb8>
    {
        /* disable interrupt */
        level = rt_hw_interrupt_disable();
8000aba4:	cfcf50ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000aba8:	fea42623          	sw	a0,-20(s0)

        /* get next suspend thread */
        thread = rt_list_entry(queue->suspended_pop_list.next,
8000abac:	fdc42783          	lw	a5,-36(s0)
8000abb0:	0187a783          	lw	a5,24(a5)
8000abb4:	fe078793          	addi	a5,a5,-32
8000abb8:	fef42423          	sw	a5,-24(s0)
                               struct rt_thread,
                               tlist);
        /* set error code to RT_ERROR */
        thread->error = -RT_ERROR;
8000abbc:	fe842783          	lw	a5,-24(s0)
8000abc0:	fff00713          	li	a4,-1
8000abc4:	02e7ae23          	sw	a4,60(a5)
        /*
         * resume thread
         * In rt_thread_resume function, it will remove current thread from
         * suspend list
         */
        rt_thread_resume(thread);
8000abc8:	fe842503          	lw	a0,-24(s0)
8000abcc:	0900d0ef          	jal	ra,80017c5c <rt_thread_resume>

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
8000abd0:	fec42503          	lw	a0,-20(s0)
8000abd4:	cd4f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
    while (!rt_list_isempty(&(queue->suspended_pop_list)))
8000abd8:	fdc42783          	lw	a5,-36(s0)
8000abdc:	01878793          	addi	a5,a5,24
8000abe0:	00078513          	mv	a0,a5
8000abe4:	e80ff0ef          	jal	ra,8000a264 <rt_list_isempty>
8000abe8:	00050793          	mv	a5,a0
8000abec:	fa078ce3          	beqz	a5,8000aba4 <rt_data_queue_reset+0x84>
    }

    /* resume on push list */
    while (!rt_list_isempty(&(queue->suspended_push_list)))
8000abf0:	0380006f          	j	8000ac28 <rt_data_queue_reset+0x108>
    {
        /* disable interrupt */
        level = rt_hw_interrupt_disable();
8000abf4:	cacf50ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000abf8:	fea42623          	sw	a0,-20(s0)

        /* get next suspend thread */
        thread = rt_list_entry(queue->suspended_push_list.next,
8000abfc:	fdc42783          	lw	a5,-36(s0)
8000ac00:	0107a783          	lw	a5,16(a5)
8000ac04:	fe078793          	addi	a5,a5,-32
8000ac08:	fef42423          	sw	a5,-24(s0)
                               struct rt_thread,
                               tlist);
        /* set error code to RT_ERROR */
        thread->error = -RT_ERROR;
8000ac0c:	fe842783          	lw	a5,-24(s0)
8000ac10:	fff00713          	li	a4,-1
8000ac14:	02e7ae23          	sw	a4,60(a5)
        /*
         * resume thread
         * In rt_thread_resume function, it will remove current thread from
         * suspend list
         */
        rt_thread_resume(thread);
8000ac18:	fe842503          	lw	a0,-24(s0)
8000ac1c:	0400d0ef          	jal	ra,80017c5c <rt_thread_resume>

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
8000ac20:	fec42503          	lw	a0,-20(s0)
8000ac24:	c84f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
    while (!rt_list_isempty(&(queue->suspended_push_list)))
8000ac28:	fdc42783          	lw	a5,-36(s0)
8000ac2c:	01078793          	addi	a5,a5,16
8000ac30:	00078513          	mv	a0,a5
8000ac34:	e30ff0ef          	jal	ra,8000a264 <rt_list_isempty>
8000ac38:	00050793          	mv	a5,a0
8000ac3c:	fa078ce3          	beqz	a5,8000abf4 <rt_data_queue_reset+0xd4>
    }
    rt_exit_critical();
8000ac40:	7500c0ef          	jal	ra,80017390 <rt_exit_critical>

    rt_schedule();
8000ac44:	23c0c0ef          	jal	ra,80016e80 <rt_schedule>
}
8000ac48:	00000013          	nop
8000ac4c:	02c12083          	lw	ra,44(sp)
8000ac50:	02812403          	lw	s0,40(sp)
8000ac54:	03010113          	addi	sp,sp,48
8000ac58:	00008067          	ret

8000ac5c <rt_data_queue_deinit>:
 * @param    queue is a pointer to the data queue object.
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 */
rt_err_t rt_data_queue_deinit(struct rt_data_queue *queue)
{
8000ac5c:	fd010113          	addi	sp,sp,-48
8000ac60:	02112623          	sw	ra,44(sp)
8000ac64:	02812423          	sw	s0,40(sp)
8000ac68:	03010413          	addi	s0,sp,48
8000ac6c:	fca42e23          	sw	a0,-36(s0)

    RT_ASSERT(queue != RT_NULL);
    RT_ASSERT(queue->magic == DATAQUEUE_MAGIC);

    /* wakeup all suspend threads */
    rt_data_queue_reset(queue);
8000ac70:	fdc42503          	lw	a0,-36(s0)
8000ac74:	eadff0ef          	jal	ra,8000ab20 <rt_data_queue_reset>

    level = rt_hw_interrupt_disable();
8000ac78:	c28f50ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000ac7c:	fea42623          	sw	a0,-20(s0)
    queue->magic = 0;
8000ac80:	fdc42783          	lw	a5,-36(s0)
8000ac84:	0007a023          	sw	zero,0(a5)
    rt_hw_interrupt_enable(level);
8000ac88:	fec42503          	lw	a0,-20(s0)
8000ac8c:	c1cf50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    rt_free(queue->queue);
8000ac90:	fdc42783          	lw	a5,-36(s0)
8000ac94:	00c7a783          	lw	a5,12(a5)
8000ac98:	00078513          	mv	a0,a5
8000ac9c:	17d0a0ef          	jal	ra,80015618 <rt_free>

    return RT_EOK;
8000aca0:	00000793          	li	a5,0
}
8000aca4:	00078513          	mv	a0,a5
8000aca8:	02c12083          	lw	ra,44(sp)
8000acac:	02812403          	lw	s0,40(sp)
8000acb0:	03010113          	addi	sp,sp,48
8000acb4:	00008067          	ret

8000acb8 <rt_data_queue_len>:
 * @param    queue is a pointer to the data queue object.
 *
 * @return   Return the number of data in the data queue.
 */
rt_uint16_t rt_data_queue_len(struct rt_data_queue *queue)
{
8000acb8:	fd010113          	addi	sp,sp,-48
8000acbc:	02112623          	sw	ra,44(sp)
8000acc0:	02812423          	sw	s0,40(sp)
8000acc4:	03010413          	addi	s0,sp,48
8000acc8:	fca42e23          	sw	a0,-36(s0)
    rt_int16_t len;

    RT_ASSERT(queue != RT_NULL);
    RT_ASSERT(queue->magic == DATAQUEUE_MAGIC);

    if (queue->is_empty)
8000accc:	fdc42783          	lw	a5,-36(s0)
8000acd0:	0087a703          	lw	a4,8(a5)
8000acd4:	000087b7          	lui	a5,0x8
8000acd8:	00f777b3          	and	a5,a4,a5
8000acdc:	00078663          	beqz	a5,8000ace8 <rt_data_queue_len+0x30>
    {
        return 0;
8000ace0:	00000793          	li	a5,0
8000ace4:	1240006f          	j	8000ae08 <rt_data_queue_len+0x150>
    }

    level = rt_hw_interrupt_disable();
8000ace8:	bb8f50ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000acec:	fea42423          	sw	a0,-24(s0)

    if (queue->put_index > queue->get_index)
8000acf0:	fdc42783          	lw	a5,-36(s0)
8000acf4:	0087a783          	lw	a5,8(a5) # 8008 <__STACKSIZE__+0x4008>
8000acf8:	0107d793          	srli	a5,a5,0x10
8000acfc:	00078713          	mv	a4,a5
8000ad00:	000087b7          	lui	a5,0x8
8000ad04:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000ad08:	00f777b3          	and	a5,a4,a5
8000ad0c:	01079713          	slli	a4,a5,0x10
8000ad10:	01075713          	srli	a4,a4,0x10
8000ad14:	fdc42783          	lw	a5,-36(s0)
8000ad18:	0087a783          	lw	a5,8(a5)
8000ad1c:	00078693          	mv	a3,a5
8000ad20:	000087b7          	lui	a5,0x8
8000ad24:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000ad28:	00f6f7b3          	and	a5,a3,a5
8000ad2c:	01079793          	slli	a5,a5,0x10
8000ad30:	0107d793          	srli	a5,a5,0x10
8000ad34:	06e7f063          	bgeu	a5,a4,8000ad94 <rt_data_queue_len+0xdc>
    {
        len = queue->put_index - queue->get_index;
8000ad38:	fdc42783          	lw	a5,-36(s0)
8000ad3c:	0087a783          	lw	a5,8(a5)
8000ad40:	0107d793          	srli	a5,a5,0x10
8000ad44:	00078713          	mv	a4,a5
8000ad48:	000087b7          	lui	a5,0x8
8000ad4c:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000ad50:	00f777b3          	and	a5,a4,a5
8000ad54:	01079793          	slli	a5,a5,0x10
8000ad58:	0107d793          	srli	a5,a5,0x10
8000ad5c:	00078713          	mv	a4,a5
8000ad60:	fdc42783          	lw	a5,-36(s0)
8000ad64:	0087a783          	lw	a5,8(a5)
8000ad68:	00078693          	mv	a3,a5
8000ad6c:	000087b7          	lui	a5,0x8
8000ad70:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8000ad74:	00f6f7b3          	and	a5,a3,a5
8000ad78:	01079793          	slli	a5,a5,0x10
8000ad7c:	0107d793          	srli	a5,a5,0x10
8000ad80:	40f707b3          	sub	a5,a4,a5
8000ad84:	01079793          	slli	a5,a5,0x10
8000ad88:	0107d793          	srli	a5,a5,0x10
8000ad8c:	fef41723          	sh	a5,-18(s0)
8000ad90:	06c0006f          	j	8000adfc <rt_data_queue_len+0x144>
    }
    else
    {
        len = queue->size + queue->put_index - queue->get_index;
8000ad94:	fdc42783          	lw	a5,-36(s0)
8000ad98:	0047d783          	lhu	a5,4(a5)
8000ad9c:	fdc42703          	lw	a4,-36(s0)
8000ada0:	00872703          	lw	a4,8(a4)
8000ada4:	01075713          	srli	a4,a4,0x10
8000ada8:	00070693          	mv	a3,a4
8000adac:	00008737          	lui	a4,0x8
8000adb0:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
8000adb4:	00e6f733          	and	a4,a3,a4
8000adb8:	01071713          	slli	a4,a4,0x10
8000adbc:	01075713          	srli	a4,a4,0x10
8000adc0:	00e787b3          	add	a5,a5,a4
8000adc4:	01079793          	slli	a5,a5,0x10
8000adc8:	0107d793          	srli	a5,a5,0x10
8000adcc:	fdc42703          	lw	a4,-36(s0)
8000add0:	00872703          	lw	a4,8(a4)
8000add4:	00070693          	mv	a3,a4
8000add8:	00008737          	lui	a4,0x8
8000addc:	fff70713          	addi	a4,a4,-1 # 7fff <__STACKSIZE__+0x3fff>
8000ade0:	00e6f733          	and	a4,a3,a4
8000ade4:	01071713          	slli	a4,a4,0x10
8000ade8:	01075713          	srli	a4,a4,0x10
8000adec:	40e787b3          	sub	a5,a5,a4
8000adf0:	01079793          	slli	a5,a5,0x10
8000adf4:	0107d793          	srli	a5,a5,0x10
8000adf8:	fef41723          	sh	a5,-18(s0)
    }

    rt_hw_interrupt_enable(level);
8000adfc:	fe842503          	lw	a0,-24(s0)
8000ae00:	aa8f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    return len;
8000ae04:	fee45783          	lhu	a5,-18(s0)
}
8000ae08:	00078513          	mv	a0,a5
8000ae0c:	02c12083          	lw	ra,44(sp)
8000ae10:	02812403          	lw	s0,40(sp)
8000ae14:	03010113          	addi	sp,sp,48
8000ae18:	00008067          	ret

8000ae1c <_serial_poll_rx>:

/*
 * Serial poll routines
 */
rt_inline int _serial_poll_rx(struct rt_serial_device *serial, rt_uint8_t *data, int length)
{
8000ae1c:	fd010113          	addi	sp,sp,-48
8000ae20:	02112623          	sw	ra,44(sp)
8000ae24:	02812423          	sw	s0,40(sp)
8000ae28:	03010413          	addi	s0,sp,48
8000ae2c:	fca42e23          	sw	a0,-36(s0)
8000ae30:	fcb42c23          	sw	a1,-40(s0)
8000ae34:	fcc42a23          	sw	a2,-44(s0)
    int ch;
    int size;

    RT_ASSERT(serial != RT_NULL);
    size = length;
8000ae38:	fd442783          	lw	a5,-44(s0)
8000ae3c:	fef42623          	sw	a5,-20(s0)

    while (length)
8000ae40:	06c0006f          	j	8000aeac <_serial_poll_rx+0x90>
    {
        ch = serial->ops->getc(serial);
8000ae44:	fdc42783          	lw	a5,-36(s0)
8000ae48:	0507a783          	lw	a5,80(a5)
8000ae4c:	00c7a783          	lw	a5,12(a5)
8000ae50:	fdc42503          	lw	a0,-36(s0)
8000ae54:	000780e7          	jalr	a5
8000ae58:	fea42423          	sw	a0,-24(s0)
        if (ch == -1) break;
8000ae5c:	fe842703          	lw	a4,-24(s0)
8000ae60:	fff00793          	li	a5,-1
8000ae64:	04f70a63          	beq	a4,a5,8000aeb8 <_serial_poll_rx+0x9c>

        *data = ch;
8000ae68:	fe842783          	lw	a5,-24(s0)
8000ae6c:	0ff7f713          	zext.b	a4,a5
8000ae70:	fd842783          	lw	a5,-40(s0)
8000ae74:	00e78023          	sb	a4,0(a5)
        data ++; length --;
8000ae78:	fd842783          	lw	a5,-40(s0)
8000ae7c:	00178793          	addi	a5,a5,1
8000ae80:	fcf42c23          	sw	a5,-40(s0)
8000ae84:	fd442783          	lw	a5,-44(s0)
8000ae88:	fff78793          	addi	a5,a5,-1
8000ae8c:	fcf42a23          	sw	a5,-44(s0)

        if(serial->parent.open_flag & RT_DEVICE_FLAG_STREAM)
8000ae90:	fdc42783          	lw	a5,-36(s0)
8000ae94:	0267d783          	lhu	a5,38(a5)
8000ae98:	0407f793          	andi	a5,a5,64
8000ae9c:	00078863          	beqz	a5,8000aeac <_serial_poll_rx+0x90>
        {
            if (ch == '\n') break;
8000aea0:	fe842703          	lw	a4,-24(s0)
8000aea4:	00a00793          	li	a5,10
8000aea8:	00f70c63          	beq	a4,a5,8000aec0 <_serial_poll_rx+0xa4>
    while (length)
8000aeac:	fd442783          	lw	a5,-44(s0)
8000aeb0:	f8079ae3          	bnez	a5,8000ae44 <_serial_poll_rx+0x28>
8000aeb4:	0100006f          	j	8000aec4 <_serial_poll_rx+0xa8>
        if (ch == -1) break;
8000aeb8:	00000013          	nop
8000aebc:	0080006f          	j	8000aec4 <_serial_poll_rx+0xa8>
            if (ch == '\n') break;
8000aec0:	00000013          	nop
        }
    }

    return size - length;
8000aec4:	fec42703          	lw	a4,-20(s0)
8000aec8:	fd442783          	lw	a5,-44(s0)
8000aecc:	40f707b3          	sub	a5,a4,a5
}
8000aed0:	00078513          	mv	a0,a5
8000aed4:	02c12083          	lw	ra,44(sp)
8000aed8:	02812403          	lw	s0,40(sp)
8000aedc:	03010113          	addi	sp,sp,48
8000aee0:	00008067          	ret

8000aee4 <_serial_poll_tx>:

rt_inline int _serial_poll_tx(struct rt_serial_device *serial, const rt_uint8_t *data, int length)
{
8000aee4:	fd010113          	addi	sp,sp,-48
8000aee8:	02112623          	sw	ra,44(sp)
8000aeec:	02812423          	sw	s0,40(sp)
8000aef0:	03010413          	addi	s0,sp,48
8000aef4:	fca42e23          	sw	a0,-36(s0)
8000aef8:	fcb42c23          	sw	a1,-40(s0)
8000aefc:	fcc42a23          	sw	a2,-44(s0)
    int size;
    RT_ASSERT(serial != RT_NULL);

    size = length;
8000af00:	fd442783          	lw	a5,-44(s0)
8000af04:	fef42623          	sw	a5,-20(s0)
    while (length)
8000af08:	0740006f          	j	8000af7c <_serial_poll_tx+0x98>
    {
        /*
         * to be polite with serial console add a line feed
         * to the carriage return character
         */
        if (*data == '\n' && (serial->parent.open_flag & RT_DEVICE_FLAG_STREAM))
8000af0c:	fd842783          	lw	a5,-40(s0)
8000af10:	0007c703          	lbu	a4,0(a5)
8000af14:	00a00793          	li	a5,10
8000af18:	02f71663          	bne	a4,a5,8000af44 <_serial_poll_tx+0x60>
8000af1c:	fdc42783          	lw	a5,-36(s0)
8000af20:	0267d783          	lhu	a5,38(a5)
8000af24:	0407f793          	andi	a5,a5,64
8000af28:	00078e63          	beqz	a5,8000af44 <_serial_poll_tx+0x60>
        {
            serial->ops->putc(serial, '\r');
8000af2c:	fdc42783          	lw	a5,-36(s0)
8000af30:	0507a783          	lw	a5,80(a5)
8000af34:	0087a783          	lw	a5,8(a5)
8000af38:	00d00593          	li	a1,13
8000af3c:	fdc42503          	lw	a0,-36(s0)
8000af40:	000780e7          	jalr	a5
        }

        serial->ops->putc(serial, *data);
8000af44:	fdc42783          	lw	a5,-36(s0)
8000af48:	0507a783          	lw	a5,80(a5)
8000af4c:	0087a783          	lw	a5,8(a5)
8000af50:	fd842703          	lw	a4,-40(s0)
8000af54:	00074703          	lbu	a4,0(a4)
8000af58:	00070593          	mv	a1,a4
8000af5c:	fdc42503          	lw	a0,-36(s0)
8000af60:	000780e7          	jalr	a5

        ++ data;
8000af64:	fd842783          	lw	a5,-40(s0)
8000af68:	00178793          	addi	a5,a5,1
8000af6c:	fcf42c23          	sw	a5,-40(s0)
        -- length;
8000af70:	fd442783          	lw	a5,-44(s0)
8000af74:	fff78793          	addi	a5,a5,-1
8000af78:	fcf42a23          	sw	a5,-44(s0)
    while (length)
8000af7c:	fd442783          	lw	a5,-44(s0)
8000af80:	f80796e3          	bnez	a5,8000af0c <_serial_poll_tx+0x28>
    }

    return size - length;
8000af84:	fec42703          	lw	a4,-20(s0)
8000af88:	fd442783          	lw	a5,-44(s0)
8000af8c:	40f707b3          	sub	a5,a4,a5
}
8000af90:	00078513          	mv	a0,a5
8000af94:	02c12083          	lw	ra,44(sp)
8000af98:	02812403          	lw	s0,40(sp)
8000af9c:	03010113          	addi	sp,sp,48
8000afa0:	00008067          	ret

8000afa4 <_serial_int_rx>:

/*
 * Serial interrupt routines
 */
rt_inline int _serial_int_rx(struct rt_serial_device *serial, rt_uint8_t *data, int length)
{
8000afa4:	fd010113          	addi	sp,sp,-48
8000afa8:	02112623          	sw	ra,44(sp)
8000afac:	02812423          	sw	s0,40(sp)
8000afb0:	03010413          	addi	s0,sp,48
8000afb4:	fca42e23          	sw	a0,-36(s0)
8000afb8:	fcb42c23          	sw	a1,-40(s0)
8000afbc:	fcc42a23          	sw	a2,-44(s0)
    int size;
    struct rt_serial_rx_fifo* rx_fifo;

    RT_ASSERT(serial != RT_NULL);
    size = length;
8000afc0:	fd442783          	lw	a5,-44(s0)
8000afc4:	fef42623          	sw	a5,-20(s0)

    rx_fifo = (struct rt_serial_rx_fifo*) serial->serial_rx;
8000afc8:	fdc42783          	lw	a5,-36(s0)
8000afcc:	05c7a783          	lw	a5,92(a5)
8000afd0:	fef42423          	sw	a5,-24(s0)
    RT_ASSERT(rx_fifo != RT_NULL);

    /* read from software FIFO */
    while (length)
8000afd4:	0e40006f          	j	8000b0b8 <_serial_int_rx+0x114>
    {
        int ch;
        rt_base_t level;

        /* disable interrupt */
        level = rt_hw_interrupt_disable();
8000afd8:	8c8f50ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000afdc:	fea42223          	sw	a0,-28(s0)

        /* there's no data: */
        if ((rx_fifo->get_index == rx_fifo->put_index) && (rx_fifo->is_full == RT_FALSE))
8000afe0:	fe842783          	lw	a5,-24(s0)
8000afe4:	0067d703          	lhu	a4,6(a5)
8000afe8:	fe842783          	lw	a5,-24(s0)
8000afec:	0047d783          	lhu	a5,4(a5)
8000aff0:	00f71e63          	bne	a4,a5,8000b00c <_serial_int_rx+0x68>
8000aff4:	fe842783          	lw	a5,-24(s0)
8000aff8:	0087a783          	lw	a5,8(a5)
8000affc:	00079863          	bnez	a5,8000b00c <_serial_int_rx+0x68>
        {
            /* no data, enable interrupt and break out */
            rt_hw_interrupt_enable(level);
8000b000:	fe442503          	lw	a0,-28(s0)
8000b004:	8a4f50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
            break;
8000b008:	0b80006f          	j	8000b0c0 <_serial_int_rx+0x11c>
        }

        /* otherwise there's the data: */
        ch = rx_fifo->buffer[rx_fifo->get_index];
8000b00c:	fe842783          	lw	a5,-24(s0)
8000b010:	0007a783          	lw	a5,0(a5)
8000b014:	fe842703          	lw	a4,-24(s0)
8000b018:	00675703          	lhu	a4,6(a4)
8000b01c:	00e787b3          	add	a5,a5,a4
8000b020:	0007c783          	lbu	a5,0(a5)
8000b024:	fef42023          	sw	a5,-32(s0)
        rx_fifo->get_index += 1;
8000b028:	fe842783          	lw	a5,-24(s0)
8000b02c:	0067d783          	lhu	a5,6(a5)
8000b030:	00178793          	addi	a5,a5,1
8000b034:	01079713          	slli	a4,a5,0x10
8000b038:	01075713          	srli	a4,a4,0x10
8000b03c:	fe842783          	lw	a5,-24(s0)
8000b040:	00e79323          	sh	a4,6(a5)
        if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
8000b044:	fe842783          	lw	a5,-24(s0)
8000b048:	0067d703          	lhu	a4,6(a5)
8000b04c:	fdc42783          	lw	a5,-36(s0)
8000b050:	0587a783          	lw	a5,88(a5)
8000b054:	00a7d793          	srli	a5,a5,0xa
8000b058:	fff7f793          	andi	a5,a5,-1
8000b05c:	01079793          	slli	a5,a5,0x10
8000b060:	0107d793          	srli	a5,a5,0x10
8000b064:	00f76663          	bltu	a4,a5,8000b070 <_serial_int_rx+0xcc>
8000b068:	fe842783          	lw	a5,-24(s0)
8000b06c:	00079323          	sh	zero,6(a5)

        if (rx_fifo->is_full == RT_TRUE)
8000b070:	fe842783          	lw	a5,-24(s0)
8000b074:	0087a703          	lw	a4,8(a5)
8000b078:	00100793          	li	a5,1
8000b07c:	00f71663          	bne	a4,a5,8000b088 <_serial_int_rx+0xe4>
        {
            rx_fifo->is_full = RT_FALSE;
8000b080:	fe842783          	lw	a5,-24(s0)
8000b084:	0007a423          	sw	zero,8(a5)
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
8000b088:	fe442503          	lw	a0,-28(s0)
8000b08c:	81cf50ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

        *data = ch & 0xff;
8000b090:	fe042783          	lw	a5,-32(s0)
8000b094:	0ff7f713          	zext.b	a4,a5
8000b098:	fd842783          	lw	a5,-40(s0)
8000b09c:	00e78023          	sb	a4,0(a5)
        data ++; length --;
8000b0a0:	fd842783          	lw	a5,-40(s0)
8000b0a4:	00178793          	addi	a5,a5,1
8000b0a8:	fcf42c23          	sw	a5,-40(s0)
8000b0ac:	fd442783          	lw	a5,-44(s0)
8000b0b0:	fff78793          	addi	a5,a5,-1
8000b0b4:	fcf42a23          	sw	a5,-44(s0)
    while (length)
8000b0b8:	fd442783          	lw	a5,-44(s0)
8000b0bc:	f0079ee3          	bnez	a5,8000afd8 <_serial_int_rx+0x34>
    }

    return size - length;
8000b0c0:	fec42703          	lw	a4,-20(s0)
8000b0c4:	fd442783          	lw	a5,-44(s0)
8000b0c8:	40f707b3          	sub	a5,a4,a5
}
8000b0cc:	00078513          	mv	a0,a5
8000b0d0:	02c12083          	lw	ra,44(sp)
8000b0d4:	02812403          	lw	s0,40(sp)
8000b0d8:	03010113          	addi	sp,sp,48
8000b0dc:	00008067          	ret

8000b0e0 <_serial_int_tx>:

rt_inline int _serial_int_tx(struct rt_serial_device *serial, const rt_uint8_t *data, int length)
{
8000b0e0:	fd010113          	addi	sp,sp,-48
8000b0e4:	02112623          	sw	ra,44(sp)
8000b0e8:	02812423          	sw	s0,40(sp)
8000b0ec:	03010413          	addi	s0,sp,48
8000b0f0:	fca42e23          	sw	a0,-36(s0)
8000b0f4:	fcb42c23          	sw	a1,-40(s0)
8000b0f8:	fcc42a23          	sw	a2,-44(s0)
    int size;
    struct rt_serial_tx_fifo *tx;

    RT_ASSERT(serial != RT_NULL);

    size = length;
8000b0fc:	fd442783          	lw	a5,-44(s0)
8000b100:	fef42623          	sw	a5,-20(s0)
    tx = (struct rt_serial_tx_fifo*) serial->serial_tx;
8000b104:	fdc42783          	lw	a5,-36(s0)
8000b108:	0607a783          	lw	a5,96(a5)
8000b10c:	fef42423          	sw	a5,-24(s0)
    RT_ASSERT(tx != RT_NULL);

    while (length)
8000b110:	0b40006f          	j	8000b1c4 <_serial_int_tx+0xe4>
    {
        /*
         * to be polite with serial console add a line feed
         * to the carriage return character
         */
        if (*data == '\n' && (serial->parent.open_flag & RT_DEVICE_FLAG_STREAM))
8000b114:	fd842783          	lw	a5,-40(s0)
8000b118:	0007c703          	lbu	a4,0(a5)
8000b11c:	00a00793          	li	a5,10
8000b120:	04f71663          	bne	a4,a5,8000b16c <_serial_int_tx+0x8c>
8000b124:	fdc42783          	lw	a5,-36(s0)
8000b128:	0267d783          	lhu	a5,38(a5)
8000b12c:	0407f793          	andi	a5,a5,64
8000b130:	02078e63          	beqz	a5,8000b16c <_serial_int_tx+0x8c>
        {
            if (serial->ops->putc(serial, '\r') == -1)
8000b134:	fdc42783          	lw	a5,-36(s0)
8000b138:	0507a783          	lw	a5,80(a5)
8000b13c:	0087a783          	lw	a5,8(a5)
8000b140:	00d00593          	li	a1,13
8000b144:	fdc42503          	lw	a0,-36(s0)
8000b148:	000780e7          	jalr	a5
8000b14c:	00050713          	mv	a4,a0
8000b150:	fff00793          	li	a5,-1
8000b154:	00f71c63          	bne	a4,a5,8000b16c <_serial_int_tx+0x8c>
            {
                rt_completion_wait(&(tx->completion), RT_WAITING_FOREVER);
8000b158:	fe842783          	lw	a5,-24(s0)
8000b15c:	fff00593          	li	a1,-1
8000b160:	00078513          	mv	a0,a5
8000b164:	ed9fe0ef          	jal	ra,8000a03c <rt_completion_wait>
                continue;
8000b168:	05c0006f          	j	8000b1c4 <_serial_int_tx+0xe4>
            }
        }

        if (serial->ops->putc(serial, *(char*)data) == -1)
8000b16c:	fdc42783          	lw	a5,-36(s0)
8000b170:	0507a783          	lw	a5,80(a5)
8000b174:	0087a783          	lw	a5,8(a5)
8000b178:	fd842703          	lw	a4,-40(s0)
8000b17c:	00074703          	lbu	a4,0(a4)
8000b180:	00070593          	mv	a1,a4
8000b184:	fdc42503          	lw	a0,-36(s0)
8000b188:	000780e7          	jalr	a5
8000b18c:	00050713          	mv	a4,a0
8000b190:	fff00793          	li	a5,-1
8000b194:	00f71c63          	bne	a4,a5,8000b1ac <_serial_int_tx+0xcc>
        {
            rt_completion_wait(&(tx->completion), RT_WAITING_FOREVER);
8000b198:	fe842783          	lw	a5,-24(s0)
8000b19c:	fff00593          	li	a1,-1
8000b1a0:	00078513          	mv	a0,a5
8000b1a4:	e99fe0ef          	jal	ra,8000a03c <rt_completion_wait>
            continue;
8000b1a8:	01c0006f          	j	8000b1c4 <_serial_int_tx+0xe4>
        }

        data ++; length --;
8000b1ac:	fd842783          	lw	a5,-40(s0)
8000b1b0:	00178793          	addi	a5,a5,1
8000b1b4:	fcf42c23          	sw	a5,-40(s0)
8000b1b8:	fd442783          	lw	a5,-44(s0)
8000b1bc:	fff78793          	addi	a5,a5,-1
8000b1c0:	fcf42a23          	sw	a5,-44(s0)
    while (length)
8000b1c4:	fd442783          	lw	a5,-44(s0)
8000b1c8:	f40796e3          	bnez	a5,8000b114 <_serial_int_tx+0x34>
    }

    return size - length;
8000b1cc:	fec42703          	lw	a4,-20(s0)
8000b1d0:	fd442783          	lw	a5,-44(s0)
8000b1d4:	40f707b3          	sub	a5,a4,a5
}
8000b1d8:	00078513          	mv	a0,a5
8000b1dc:	02c12083          	lw	ra,44(sp)
8000b1e0:	02812403          	lw	s0,40(sp)
8000b1e4:	03010113          	addi	sp,sp,48
8000b1e8:	00008067          	ret

8000b1ec <_serial_check_buffer_size>:

static void _serial_check_buffer_size(void)
{
8000b1ec:	ff010113          	addi	sp,sp,-16
8000b1f0:	00812623          	sw	s0,12(sp)
8000b1f4:	01010413          	addi	s0,sp,16
    static rt_bool_t already_output = RT_FALSE;

    if (already_output == RT_FALSE)
8000b1f8:	00079797          	auipc	a5,0x79
8000b1fc:	e1c78793          	addi	a5,a5,-484 # 80084014 <already_output.0>
8000b200:	0007a783          	lw	a5,0(a5)
8000b204:	00079a63          	bnez	a5,8000b218 <_serial_check_buffer_size+0x2c>
    {
#if !defined(RT_USING_ULOG) || defined(ULOG_USING_ISR_LOG)
        LOG_W("Warning: There is no enough buffer for saving data,"
              " please increase the RT_SERIAL_RB_BUFSZ option.");
#endif
        already_output = RT_TRUE;
8000b208:	00079797          	auipc	a5,0x79
8000b20c:	e0c78793          	addi	a5,a5,-500 # 80084014 <already_output.0>
8000b210:	00100713          	li	a4,1
8000b214:	00e7a023          	sw	a4,0(a5)
    }
}
8000b218:	00000013          	nop
8000b21c:	00c12403          	lw	s0,12(sp)
8000b220:	01010113          	addi	sp,sp,16
8000b224:	00008067          	ret

8000b228 <_serial_fifo_calc_recved_len>:

#if defined(RT_USING_POSIX_STDIO) || defined(RT_SERIAL_USING_DMA)
static rt_size_t _serial_fifo_calc_recved_len(struct rt_serial_device *serial)
{
8000b228:	fd010113          	addi	sp,sp,-48
8000b22c:	02812623          	sw	s0,44(sp)
8000b230:	03010413          	addi	s0,sp,48
8000b234:	fca42e23          	sw	a0,-36(s0)
    struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
8000b238:	fdc42783          	lw	a5,-36(s0)
8000b23c:	05c7a783          	lw	a5,92(a5)
8000b240:	fef42623          	sw	a5,-20(s0)

    RT_ASSERT(rx_fifo != RT_NULL);

    if (rx_fifo->put_index == rx_fifo->get_index)
8000b244:	fec42783          	lw	a5,-20(s0)
8000b248:	0047d703          	lhu	a4,4(a5)
8000b24c:	fec42783          	lw	a5,-20(s0)
8000b250:	0067d783          	lhu	a5,6(a5)
8000b254:	02f71a63          	bne	a4,a5,8000b288 <_serial_fifo_calc_recved_len+0x60>
    {
        return (rx_fifo->is_full == RT_FALSE ? 0 : serial->config.bufsz);
8000b258:	fec42783          	lw	a5,-20(s0)
8000b25c:	0087a783          	lw	a5,8(a5)
8000b260:	02078063          	beqz	a5,8000b280 <_serial_fifo_calc_recved_len+0x58>
8000b264:	fdc42783          	lw	a5,-36(s0)
8000b268:	0587a783          	lw	a5,88(a5)
8000b26c:	00a7d793          	srli	a5,a5,0xa
8000b270:	fff7f793          	andi	a5,a5,-1
8000b274:	01079793          	slli	a5,a5,0x10
8000b278:	0107d793          	srli	a5,a5,0x10
8000b27c:	0740006f          	j	8000b2f0 <_serial_fifo_calc_recved_len+0xc8>
8000b280:	00000793          	li	a5,0
8000b284:	06c0006f          	j	8000b2f0 <_serial_fifo_calc_recved_len+0xc8>
    }
    else
    {
        if (rx_fifo->put_index > rx_fifo->get_index)
8000b288:	fec42783          	lw	a5,-20(s0)
8000b28c:	0047d703          	lhu	a4,4(a5)
8000b290:	fec42783          	lw	a5,-20(s0)
8000b294:	0067d783          	lhu	a5,6(a5)
8000b298:	02e7f063          	bgeu	a5,a4,8000b2b8 <_serial_fifo_calc_recved_len+0x90>
        {
            return rx_fifo->put_index - rx_fifo->get_index;
8000b29c:	fec42783          	lw	a5,-20(s0)
8000b2a0:	0047d783          	lhu	a5,4(a5)
8000b2a4:	00078713          	mv	a4,a5
8000b2a8:	fec42783          	lw	a5,-20(s0)
8000b2ac:	0067d783          	lhu	a5,6(a5)
8000b2b0:	40f707b3          	sub	a5,a4,a5
8000b2b4:	03c0006f          	j	8000b2f0 <_serial_fifo_calc_recved_len+0xc8>
        }
        else
        {
            return serial->config.bufsz - (rx_fifo->get_index - rx_fifo->put_index);
8000b2b8:	fdc42783          	lw	a5,-36(s0)
8000b2bc:	0587a783          	lw	a5,88(a5)
8000b2c0:	00a7d793          	srli	a5,a5,0xa
8000b2c4:	fff7f793          	andi	a5,a5,-1
8000b2c8:	01079793          	slli	a5,a5,0x10
8000b2cc:	0107d793          	srli	a5,a5,0x10
8000b2d0:	00078713          	mv	a4,a5
8000b2d4:	fec42783          	lw	a5,-20(s0)
8000b2d8:	0067d783          	lhu	a5,6(a5)
8000b2dc:	00078693          	mv	a3,a5
8000b2e0:	fec42783          	lw	a5,-20(s0)
8000b2e4:	0047d783          	lhu	a5,4(a5)
8000b2e8:	40f687b3          	sub	a5,a3,a5
8000b2ec:	40f707b3          	sub	a5,a4,a5
        }
    }
}
8000b2f0:	00078513          	mv	a0,a5
8000b2f4:	02c12403          	lw	s0,44(sp)
8000b2f8:	03010113          	addi	sp,sp,48
8000b2fc:	00008067          	ret

8000b300 <rt_dma_calc_recved_len>:
 * @param serial serial device
 *
 * @return length
 */
static rt_size_t rt_dma_calc_recved_len(struct rt_serial_device *serial)
{
8000b300:	fe010113          	addi	sp,sp,-32
8000b304:	00112e23          	sw	ra,28(sp)
8000b308:	00812c23          	sw	s0,24(sp)
8000b30c:	02010413          	addi	s0,sp,32
8000b310:	fea42623          	sw	a0,-20(s0)
    return _serial_fifo_calc_recved_len(serial);
8000b314:	fec42503          	lw	a0,-20(s0)
8000b318:	f11ff0ef          	jal	ra,8000b228 <_serial_fifo_calc_recved_len>
8000b31c:	00050793          	mv	a5,a0
}
8000b320:	00078513          	mv	a0,a5
8000b324:	01c12083          	lw	ra,28(sp)
8000b328:	01812403          	lw	s0,24(sp)
8000b32c:	02010113          	addi	sp,sp,32
8000b330:	00008067          	ret

8000b334 <rt_dma_recv_update_get_index>:
 *
 * @param serial serial device
 * @param len get data length for this operate
 */
static void rt_dma_recv_update_get_index(struct rt_serial_device *serial, rt_size_t len)
{
8000b334:	fd010113          	addi	sp,sp,-48
8000b338:	02812623          	sw	s0,44(sp)
8000b33c:	03010413          	addi	s0,sp,48
8000b340:	fca42e23          	sw	a0,-36(s0)
8000b344:	fcb42c23          	sw	a1,-40(s0)
    struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
8000b348:	fdc42783          	lw	a5,-36(s0)
8000b34c:	05c7a783          	lw	a5,92(a5)
8000b350:	fef42623          	sw	a5,-20(s0)

    RT_ASSERT(rx_fifo != RT_NULL);
    RT_ASSERT(len <= rt_dma_calc_recved_len(serial));

    if (rx_fifo->is_full && len != 0) rx_fifo->is_full = RT_FALSE;
8000b354:	fec42783          	lw	a5,-20(s0)
8000b358:	0087a783          	lw	a5,8(a5)
8000b35c:	00078a63          	beqz	a5,8000b370 <rt_dma_recv_update_get_index+0x3c>
8000b360:	fd842783          	lw	a5,-40(s0)
8000b364:	00078663          	beqz	a5,8000b370 <rt_dma_recv_update_get_index+0x3c>
8000b368:	fec42783          	lw	a5,-20(s0)
8000b36c:	0007a423          	sw	zero,8(a5)

    rx_fifo->get_index += (rt_uint16_t)len;
8000b370:	fec42783          	lw	a5,-20(s0)
8000b374:	0067d703          	lhu	a4,6(a5)
8000b378:	fd842783          	lw	a5,-40(s0)
8000b37c:	01079793          	slli	a5,a5,0x10
8000b380:	0107d793          	srli	a5,a5,0x10
8000b384:	00f707b3          	add	a5,a4,a5
8000b388:	01079713          	slli	a4,a5,0x10
8000b38c:	01075713          	srli	a4,a4,0x10
8000b390:	fec42783          	lw	a5,-20(s0)
8000b394:	00e79323          	sh	a4,6(a5)
    if (rx_fifo->get_index >= serial->config.bufsz)
8000b398:	fec42783          	lw	a5,-20(s0)
8000b39c:	0067d703          	lhu	a4,6(a5)
8000b3a0:	fdc42783          	lw	a5,-36(s0)
8000b3a4:	0587a783          	lw	a5,88(a5)
8000b3a8:	00a7d793          	srli	a5,a5,0xa
8000b3ac:	fff7f793          	andi	a5,a5,-1
8000b3b0:	01079793          	slli	a5,a5,0x10
8000b3b4:	0107d793          	srli	a5,a5,0x10
8000b3b8:	02f76c63          	bltu	a4,a5,8000b3f0 <rt_dma_recv_update_get_index+0xbc>
    {
        rx_fifo->get_index %= serial->config.bufsz;
8000b3bc:	fec42783          	lw	a5,-20(s0)
8000b3c0:	0067d703          	lhu	a4,6(a5)
8000b3c4:	fdc42783          	lw	a5,-36(s0)
8000b3c8:	0587a783          	lw	a5,88(a5)
8000b3cc:	00a7d793          	srli	a5,a5,0xa
8000b3d0:	fff7f793          	andi	a5,a5,-1
8000b3d4:	01079793          	slli	a5,a5,0x10
8000b3d8:	0107d793          	srli	a5,a5,0x10
8000b3dc:	02f777b3          	remu	a5,a4,a5
8000b3e0:	01079713          	slli	a4,a5,0x10
8000b3e4:	01075713          	srli	a4,a4,0x10
8000b3e8:	fec42783          	lw	a5,-20(s0)
8000b3ec:	00e79323          	sh	a4,6(a5)
    }
}
8000b3f0:	00000013          	nop
8000b3f4:	02c12403          	lw	s0,44(sp)
8000b3f8:	03010113          	addi	sp,sp,48
8000b3fc:	00008067          	ret

8000b400 <rt_dma_recv_update_put_index>:
 *
 * @param serial serial device
 * @param len received length for this transmit
 */
static void rt_dma_recv_update_put_index(struct rt_serial_device *serial, rt_size_t len)
{
8000b400:	fd010113          	addi	sp,sp,-48
8000b404:	02112623          	sw	ra,44(sp)
8000b408:	02812423          	sw	s0,40(sp)
8000b40c:	03010413          	addi	s0,sp,48
8000b410:	fca42e23          	sw	a0,-36(s0)
8000b414:	fcb42c23          	sw	a1,-40(s0)
    struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *)serial->serial_rx;
8000b418:	fdc42783          	lw	a5,-36(s0)
8000b41c:	05c7a783          	lw	a5,92(a5)
8000b420:	fef42623          	sw	a5,-20(s0)

    RT_ASSERT(rx_fifo != RT_NULL);

    if (rx_fifo->get_index <= rx_fifo->put_index)
8000b424:	fec42783          	lw	a5,-20(s0)
8000b428:	0067d703          	lhu	a4,6(a5)
8000b42c:	fec42783          	lw	a5,-20(s0)
8000b430:	0047d783          	lhu	a5,4(a5)
8000b434:	0ae7e463          	bltu	a5,a4,8000b4dc <rt_dma_recv_update_put_index+0xdc>
    {
        rx_fifo->put_index += (rt_uint16_t)len;
8000b438:	fec42783          	lw	a5,-20(s0)
8000b43c:	0047d703          	lhu	a4,4(a5)
8000b440:	fd842783          	lw	a5,-40(s0)
8000b444:	01079793          	slli	a5,a5,0x10
8000b448:	0107d793          	srli	a5,a5,0x10
8000b44c:	00f707b3          	add	a5,a4,a5
8000b450:	01079713          	slli	a4,a5,0x10
8000b454:	01075713          	srli	a4,a4,0x10
8000b458:	fec42783          	lw	a5,-20(s0)
8000b45c:	00e79223          	sh	a4,4(a5)
        /* beyond the fifo end */
        if (rx_fifo->put_index >= serial->config.bufsz)
8000b460:	fec42783          	lw	a5,-20(s0)
8000b464:	0047d703          	lhu	a4,4(a5)
8000b468:	fdc42783          	lw	a5,-36(s0)
8000b46c:	0587a783          	lw	a5,88(a5)
8000b470:	00a7d793          	srli	a5,a5,0xa
8000b474:	fff7f793          	andi	a5,a5,-1
8000b478:	01079793          	slli	a5,a5,0x10
8000b47c:	0107d793          	srli	a5,a5,0x10
8000b480:	0ef76e63          	bltu	a4,a5,8000b57c <rt_dma_recv_update_put_index+0x17c>
        {
            rx_fifo->put_index %= serial->config.bufsz;
8000b484:	fec42783          	lw	a5,-20(s0)
8000b488:	0047d703          	lhu	a4,4(a5)
8000b48c:	fdc42783          	lw	a5,-36(s0)
8000b490:	0587a783          	lw	a5,88(a5)
8000b494:	00a7d793          	srli	a5,a5,0xa
8000b498:	fff7f793          	andi	a5,a5,-1
8000b49c:	01079793          	slli	a5,a5,0x10
8000b4a0:	0107d793          	srli	a5,a5,0x10
8000b4a4:	02f777b3          	remu	a5,a4,a5
8000b4a8:	01079713          	slli	a4,a5,0x10
8000b4ac:	01075713          	srli	a4,a4,0x10
8000b4b0:	fec42783          	lw	a5,-20(s0)
8000b4b4:	00e79223          	sh	a4,4(a5)
            /* force overwrite get index */
            if (rx_fifo->put_index >= rx_fifo->get_index)
8000b4b8:	fec42783          	lw	a5,-20(s0)
8000b4bc:	0047d703          	lhu	a4,4(a5)
8000b4c0:	fec42783          	lw	a5,-20(s0)
8000b4c4:	0067d783          	lhu	a5,6(a5)
8000b4c8:	0af76a63          	bltu	a4,a5,8000b57c <rt_dma_recv_update_put_index+0x17c>
            {
                rx_fifo->is_full = RT_TRUE;
8000b4cc:	fec42783          	lw	a5,-20(s0)
8000b4d0:	00100713          	li	a4,1
8000b4d4:	00e7a423          	sw	a4,8(a5)
8000b4d8:	0a40006f          	j	8000b57c <rt_dma_recv_update_put_index+0x17c>
            }
        }
    }
    else
    {
        rx_fifo->put_index += (rt_uint16_t)len;
8000b4dc:	fec42783          	lw	a5,-20(s0)
8000b4e0:	0047d703          	lhu	a4,4(a5)
8000b4e4:	fd842783          	lw	a5,-40(s0)
8000b4e8:	01079793          	slli	a5,a5,0x10
8000b4ec:	0107d793          	srli	a5,a5,0x10
8000b4f0:	00f707b3          	add	a5,a4,a5
8000b4f4:	01079713          	slli	a4,a5,0x10
8000b4f8:	01075713          	srli	a4,a4,0x10
8000b4fc:	fec42783          	lw	a5,-20(s0)
8000b500:	00e79223          	sh	a4,4(a5)
        if (rx_fifo->put_index >= rx_fifo->get_index)
8000b504:	fec42783          	lw	a5,-20(s0)
8000b508:	0047d703          	lhu	a4,4(a5)
8000b50c:	fec42783          	lw	a5,-20(s0)
8000b510:	0067d783          	lhu	a5,6(a5)
8000b514:	06f76463          	bltu	a4,a5,8000b57c <rt_dma_recv_update_put_index+0x17c>
        {
            /* beyond the fifo end */
            if (rx_fifo->put_index >= serial->config.bufsz)
8000b518:	fec42783          	lw	a5,-20(s0)
8000b51c:	0047d703          	lhu	a4,4(a5)
8000b520:	fdc42783          	lw	a5,-36(s0)
8000b524:	0587a783          	lw	a5,88(a5)
8000b528:	00a7d793          	srli	a5,a5,0xa
8000b52c:	fff7f793          	andi	a5,a5,-1
8000b530:	01079793          	slli	a5,a5,0x10
8000b534:	0107d793          	srli	a5,a5,0x10
8000b538:	02f76c63          	bltu	a4,a5,8000b570 <rt_dma_recv_update_put_index+0x170>
            {
                rx_fifo->put_index %= serial->config.bufsz;
8000b53c:	fec42783          	lw	a5,-20(s0)
8000b540:	0047d703          	lhu	a4,4(a5)
8000b544:	fdc42783          	lw	a5,-36(s0)
8000b548:	0587a783          	lw	a5,88(a5)
8000b54c:	00a7d793          	srli	a5,a5,0xa
8000b550:	fff7f793          	andi	a5,a5,-1
8000b554:	01079793          	slli	a5,a5,0x10
8000b558:	0107d793          	srli	a5,a5,0x10
8000b55c:	02f777b3          	remu	a5,a4,a5
8000b560:	01079713          	slli	a4,a5,0x10
8000b564:	01075713          	srli	a4,a4,0x10
8000b568:	fec42783          	lw	a5,-20(s0)
8000b56c:	00e79223          	sh	a4,4(a5)
            }
            /* force overwrite get index */
            rx_fifo->is_full = RT_TRUE;
8000b570:	fec42783          	lw	a5,-20(s0)
8000b574:	00100713          	li	a4,1
8000b578:	00e7a423          	sw	a4,8(a5)
        }
    }

    if(rx_fifo->is_full == RT_TRUE)
8000b57c:	fec42783          	lw	a5,-20(s0)
8000b580:	0087a703          	lw	a4,8(a5)
8000b584:	00100793          	li	a5,1
8000b588:	00f71c63          	bne	a4,a5,8000b5a0 <rt_dma_recv_update_put_index+0x1a0>
    {
        _serial_check_buffer_size();
8000b58c:	c61ff0ef          	jal	ra,8000b1ec <_serial_check_buffer_size>
        rx_fifo->get_index = rx_fifo->put_index;
8000b590:	fec42783          	lw	a5,-20(s0)
8000b594:	0047d703          	lhu	a4,4(a5)
8000b598:	fec42783          	lw	a5,-20(s0)
8000b59c:	00e79323          	sh	a4,6(a5)
    }
}
8000b5a0:	00000013          	nop
8000b5a4:	02c12083          	lw	ra,44(sp)
8000b5a8:	02812403          	lw	s0,40(sp)
8000b5ac:	03010113          	addi	sp,sp,48
8000b5b0:	00008067          	ret

8000b5b4 <_serial_dma_rx>:

/*
 * Serial DMA routines
 */
rt_inline int _serial_dma_rx(struct rt_serial_device *serial, rt_uint8_t *data, int length)
{
8000b5b4:	fc010113          	addi	sp,sp,-64
8000b5b8:	02112e23          	sw	ra,60(sp)
8000b5bc:	02812c23          	sw	s0,56(sp)
8000b5c0:	04010413          	addi	s0,sp,64
8000b5c4:	fca42623          	sw	a0,-52(s0)
8000b5c8:	fcb42423          	sw	a1,-56(s0)
8000b5cc:	fcc42223          	sw	a2,-60(s0)
    rt_base_t level;

    RT_ASSERT((serial != RT_NULL) && (data != RT_NULL));

    level = rt_hw_interrupt_disable();
8000b5d0:	ad1f40ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000b5d4:	fea42223          	sw	a0,-28(s0)

    if (serial->config.bufsz == 0)
8000b5d8:	fcc42783          	lw	a5,-52(s0)
8000b5dc:	0587a703          	lw	a4,88(a5)
8000b5e0:	040007b7          	lui	a5,0x4000
8000b5e4:	c0078793          	addi	a5,a5,-1024 # 3fffc00 <__STACKSIZE__+0x3ffbc00>
8000b5e8:	00f777b3          	and	a5,a4,a5
8000b5ec:	08079463          	bnez	a5,8000b674 <_serial_dma_rx+0xc0>
    {
        int result = RT_EOK;
8000b5f0:	fe042623          	sw	zero,-20(s0)
        struct rt_serial_rx_dma *rx_dma;

        rx_dma = (struct rt_serial_rx_dma*)serial->serial_rx;
8000b5f4:	fcc42783          	lw	a5,-52(s0)
8000b5f8:	05c7a783          	lw	a5,92(a5)
8000b5fc:	fcf42c23          	sw	a5,-40(s0)
        RT_ASSERT(rx_dma != RT_NULL);

        if (rx_dma->activated != RT_TRUE)
8000b600:	fd842783          	lw	a5,-40(s0)
8000b604:	0007a703          	lw	a4,0(a5)
8000b608:	00100793          	li	a5,1
8000b60c:	02f70c63          	beq	a4,a5,8000b644 <_serial_dma_rx+0x90>
        {
            rx_dma->activated = RT_TRUE;
8000b610:	fd842783          	lw	a5,-40(s0)
8000b614:	00100713          	li	a4,1
8000b618:	00e7a023          	sw	a4,0(a5)
            RT_ASSERT(serial->ops->dma_transmit != RT_NULL);
            serial->ops->dma_transmit(serial, data, length, RT_SERIAL_DMA_RX);
8000b61c:	fcc42783          	lw	a5,-52(s0)
8000b620:	0507a783          	lw	a5,80(a5)
8000b624:	0107a783          	lw	a5,16(a5)
8000b628:	fc442703          	lw	a4,-60(s0)
8000b62c:	00100693          	li	a3,1
8000b630:	00070613          	mv	a2,a4
8000b634:	fc842583          	lw	a1,-56(s0)
8000b638:	fcc42503          	lw	a0,-52(s0)
8000b63c:	000780e7          	jalr	a5
8000b640:	00c0006f          	j	8000b64c <_serial_dma_rx+0x98>
        }
        else result = -RT_EBUSY;
8000b644:	ff900793          	li	a5,-7
8000b648:	fef42623          	sw	a5,-20(s0)
        rt_hw_interrupt_enable(level);
8000b64c:	fe442503          	lw	a0,-28(s0)
8000b650:	a59f40ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

        if (result == RT_EOK) return length;
8000b654:	fec42783          	lw	a5,-20(s0)
8000b658:	00079663          	bnez	a5,8000b664 <_serial_dma_rx+0xb0>
8000b65c:	fc442783          	lw	a5,-60(s0)
8000b660:	1800006f          	j	8000b7e0 <_serial_dma_rx+0x22c>

        rt_set_errno(result);
8000b664:	fec42503          	lw	a0,-20(s0)
8000b668:	550080ef          	jal	ra,80013bb8 <rt_set_errno>
        return 0;
8000b66c:	00000793          	li	a5,0
8000b670:	1700006f          	j	8000b7e0 <_serial_dma_rx+0x22c>
    }
    else
    {
        struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
8000b674:	fcc42783          	lw	a5,-52(s0)
8000b678:	05c7a783          	lw	a5,92(a5)
8000b67c:	fef42023          	sw	a5,-32(s0)
        rt_size_t recv_len = 0, fifo_recved_len = rt_dma_calc_recved_len(serial);
8000b680:	fe042423          	sw	zero,-24(s0)
8000b684:	fcc42503          	lw	a0,-52(s0)
8000b688:	c79ff0ef          	jal	ra,8000b300 <rt_dma_calc_recved_len>
8000b68c:	fca42e23          	sw	a0,-36(s0)

        RT_ASSERT(rx_fifo != RT_NULL);

        if (length < (int)fifo_recved_len)
8000b690:	fdc42783          	lw	a5,-36(s0)
8000b694:	fc442703          	lw	a4,-60(s0)
8000b698:	00f75863          	bge	a4,a5,8000b6a8 <_serial_dma_rx+0xf4>
            recv_len = length;
8000b69c:	fc442783          	lw	a5,-60(s0)
8000b6a0:	fef42423          	sw	a5,-24(s0)
8000b6a4:	00c0006f          	j	8000b6b0 <_serial_dma_rx+0xfc>
        else
            recv_len = fifo_recved_len;
8000b6a8:	fdc42783          	lw	a5,-36(s0)
8000b6ac:	fef42423          	sw	a5,-24(s0)

        if (rx_fifo->get_index + recv_len < serial->config.bufsz)
8000b6b0:	fe042783          	lw	a5,-32(s0)
8000b6b4:	0067d783          	lhu	a5,6(a5)
8000b6b8:	00078713          	mv	a4,a5
8000b6bc:	fe842783          	lw	a5,-24(s0)
8000b6c0:	00f707b3          	add	a5,a4,a5
8000b6c4:	fcc42703          	lw	a4,-52(s0)
8000b6c8:	05872703          	lw	a4,88(a4)
8000b6cc:	00a75713          	srli	a4,a4,0xa
8000b6d0:	fff77713          	andi	a4,a4,-1
8000b6d4:	01071713          	slli	a4,a4,0x10
8000b6d8:	01075713          	srli	a4,a4,0x10
8000b6dc:	02e7f663          	bgeu	a5,a4,8000b708 <_serial_dma_rx+0x154>
            rt_memcpy(data, rx_fifo->buffer + rx_fifo->get_index, recv_len);
8000b6e0:	fe042783          	lw	a5,-32(s0)
8000b6e4:	0007a783          	lw	a5,0(a5)
8000b6e8:	fe042703          	lw	a4,-32(s0)
8000b6ec:	00675703          	lhu	a4,6(a4)
8000b6f0:	00e787b3          	add	a5,a5,a4
8000b6f4:	fe842603          	lw	a2,-24(s0)
8000b6f8:	00078593          	mv	a1,a5
8000b6fc:	fc842503          	lw	a0,-56(s0)
8000b700:	6e8080ef          	jal	ra,80013de8 <rt_memcpy>
8000b704:	0c40006f          	j	8000b7c8 <_serial_dma_rx+0x214>
        else
        {
            rt_memcpy(data, rx_fifo->buffer + rx_fifo->get_index,
8000b708:	fe042783          	lw	a5,-32(s0)
8000b70c:	0007a783          	lw	a5,0(a5)
8000b710:	fe042703          	lw	a4,-32(s0)
8000b714:	00675703          	lhu	a4,6(a4)
8000b718:	00e78733          	add	a4,a5,a4
                    serial->config.bufsz - rx_fifo->get_index);
8000b71c:	fcc42783          	lw	a5,-52(s0)
8000b720:	0587a783          	lw	a5,88(a5)
8000b724:	00a7d793          	srli	a5,a5,0xa
8000b728:	fff7f793          	andi	a5,a5,-1
8000b72c:	01079793          	slli	a5,a5,0x10
8000b730:	0107d793          	srli	a5,a5,0x10
8000b734:	00078693          	mv	a3,a5
8000b738:	fe042783          	lw	a5,-32(s0)
8000b73c:	0067d783          	lhu	a5,6(a5)
8000b740:	40f687b3          	sub	a5,a3,a5
            rt_memcpy(data, rx_fifo->buffer + rx_fifo->get_index,
8000b744:	00078613          	mv	a2,a5
8000b748:	00070593          	mv	a1,a4
8000b74c:	fc842503          	lw	a0,-56(s0)
8000b750:	698080ef          	jal	ra,80013de8 <rt_memcpy>
            rt_memcpy(data + serial->config.bufsz - rx_fifo->get_index, rx_fifo->buffer,
8000b754:	fcc42783          	lw	a5,-52(s0)
8000b758:	0587a783          	lw	a5,88(a5)
8000b75c:	00a7d793          	srli	a5,a5,0xa
8000b760:	fff7f793          	andi	a5,a5,-1
8000b764:	01079793          	slli	a5,a5,0x10
8000b768:	0107d793          	srli	a5,a5,0x10
8000b76c:	00078713          	mv	a4,a5
8000b770:	fe042783          	lw	a5,-32(s0)
8000b774:	0067d783          	lhu	a5,6(a5)
8000b778:	40f707b3          	sub	a5,a4,a5
8000b77c:	fc842703          	lw	a4,-56(s0)
8000b780:	00f706b3          	add	a3,a4,a5
8000b784:	fe042783          	lw	a5,-32(s0)
8000b788:	0007a583          	lw	a1,0(a5)
                    recv_len + rx_fifo->get_index - serial->config.bufsz);
8000b78c:	fe042783          	lw	a5,-32(s0)
8000b790:	0067d783          	lhu	a5,6(a5)
8000b794:	00078713          	mv	a4,a5
8000b798:	fe842783          	lw	a5,-24(s0)
8000b79c:	00f707b3          	add	a5,a4,a5
8000b7a0:	fcc42703          	lw	a4,-52(s0)
8000b7a4:	05872703          	lw	a4,88(a4)
8000b7a8:	00a75713          	srli	a4,a4,0xa
8000b7ac:	fff77713          	andi	a4,a4,-1
8000b7b0:	01071713          	slli	a4,a4,0x10
8000b7b4:	01075713          	srli	a4,a4,0x10
8000b7b8:	40e787b3          	sub	a5,a5,a4
            rt_memcpy(data + serial->config.bufsz - rx_fifo->get_index, rx_fifo->buffer,
8000b7bc:	00078613          	mv	a2,a5
8000b7c0:	00068513          	mv	a0,a3
8000b7c4:	624080ef          	jal	ra,80013de8 <rt_memcpy>
        }
        rt_dma_recv_update_get_index(serial, recv_len);
8000b7c8:	fe842583          	lw	a1,-24(s0)
8000b7cc:	fcc42503          	lw	a0,-52(s0)
8000b7d0:	b65ff0ef          	jal	ra,8000b334 <rt_dma_recv_update_get_index>
        rt_hw_interrupt_enable(level);
8000b7d4:	fe442503          	lw	a0,-28(s0)
8000b7d8:	8d1f40ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
        return recv_len;
8000b7dc:	fe842783          	lw	a5,-24(s0)
    }
}
8000b7e0:	00078513          	mv	a0,a5
8000b7e4:	03c12083          	lw	ra,60(sp)
8000b7e8:	03812403          	lw	s0,56(sp)
8000b7ec:	04010113          	addi	sp,sp,64
8000b7f0:	00008067          	ret

8000b7f4 <_serial_dma_tx>:

rt_inline int _serial_dma_tx(struct rt_serial_device *serial, const rt_uint8_t *data, int length)
{
8000b7f4:	fd010113          	addi	sp,sp,-48
8000b7f8:	02112623          	sw	ra,44(sp)
8000b7fc:	02812423          	sw	s0,40(sp)
8000b800:	03010413          	addi	s0,sp,48
8000b804:	fca42e23          	sw	a0,-36(s0)
8000b808:	fcb42c23          	sw	a1,-40(s0)
8000b80c:	fcc42a23          	sw	a2,-44(s0)
    rt_base_t level;
    rt_err_t result;
    struct rt_serial_tx_dma *tx_dma;

    tx_dma = (struct rt_serial_tx_dma*)(serial->serial_tx);
8000b810:	fdc42783          	lw	a5,-36(s0)
8000b814:	0607a783          	lw	a5,96(a5)
8000b818:	fef42623          	sw	a5,-20(s0)

    result = rt_data_queue_push(&(tx_dma->data_queue), data, length, RT_WAITING_FOREVER);
8000b81c:	fec42783          	lw	a5,-20(s0)
8000b820:	00478793          	addi	a5,a5,4
8000b824:	fd442703          	lw	a4,-44(s0)
8000b828:	fff00693          	li	a3,-1
8000b82c:	00070613          	mv	a2,a4
8000b830:	fd842583          	lw	a1,-40(s0)
8000b834:	00078513          	mv	a0,a5
8000b838:	b85fe0ef          	jal	ra,8000a3bc <rt_data_queue_push>
8000b83c:	fea42423          	sw	a0,-24(s0)
    if (result == RT_EOK)
8000b840:	fe842783          	lw	a5,-24(s0)
8000b844:	06079463          	bnez	a5,8000b8ac <_serial_dma_tx+0xb8>
    {
        level = rt_hw_interrupt_disable();
8000b848:	859f40ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000b84c:	fea42223          	sw	a0,-28(s0)
        if (tx_dma->activated != RT_TRUE)
8000b850:	fec42783          	lw	a5,-20(s0)
8000b854:	0007a703          	lw	a4,0(a5)
8000b858:	00100793          	li	a5,1
8000b85c:	04f70063          	beq	a4,a5,8000b89c <_serial_dma_tx+0xa8>
        {
            tx_dma->activated = RT_TRUE;
8000b860:	fec42783          	lw	a5,-20(s0)
8000b864:	00100713          	li	a4,1
8000b868:	00e7a023          	sw	a4,0(a5)
            rt_hw_interrupt_enable(level);
8000b86c:	fe442503          	lw	a0,-28(s0)
8000b870:	839f40ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

            /* make a DMA transfer */
            serial->ops->dma_transmit(serial, (rt_uint8_t *)data, length, RT_SERIAL_DMA_TX);
8000b874:	fdc42783          	lw	a5,-36(s0)
8000b878:	0507a783          	lw	a5,80(a5)
8000b87c:	0107a783          	lw	a5,16(a5)
8000b880:	fd442703          	lw	a4,-44(s0)
8000b884:	00200693          	li	a3,2
8000b888:	00070613          	mv	a2,a4
8000b88c:	fd842583          	lw	a1,-40(s0)
8000b890:	fdc42503          	lw	a0,-36(s0)
8000b894:	000780e7          	jalr	a5
8000b898:	00c0006f          	j	8000b8a4 <_serial_dma_tx+0xb0>
        }
        else
        {
            rt_hw_interrupt_enable(level);
8000b89c:	fe442503          	lw	a0,-28(s0)
8000b8a0:	809f40ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
        }

        return length;
8000b8a4:	fd442783          	lw	a5,-44(s0)
8000b8a8:	0100006f          	j	8000b8b8 <_serial_dma_tx+0xc4>
    }
    else
    {
        rt_set_errno(result);
8000b8ac:	fe842503          	lw	a0,-24(s0)
8000b8b0:	308080ef          	jal	ra,80013bb8 <rt_set_errno>
        return 0;
8000b8b4:	00000793          	li	a5,0
    }
}
8000b8b8:	00078513          	mv	a0,a5
8000b8bc:	02c12083          	lw	ra,44(sp)
8000b8c0:	02812403          	lw	s0,40(sp)
8000b8c4:	03010113          	addi	sp,sp,48
8000b8c8:	00008067          	ret

8000b8cc <rt_serial_init>:
/* RT-Thread Device Interface */
/*
 * This function initializes serial device.
 */
static rt_err_t rt_serial_init(struct rt_device *dev)
{
8000b8cc:	fd010113          	addi	sp,sp,-48
8000b8d0:	02112623          	sw	ra,44(sp)
8000b8d4:	02812423          	sw	s0,40(sp)
8000b8d8:	03010413          	addi	s0,sp,48
8000b8dc:	fca42e23          	sw	a0,-36(s0)
    rt_err_t result = RT_EOK;
8000b8e0:	fe042623          	sw	zero,-20(s0)
    struct rt_serial_device *serial;

    RT_ASSERT(dev != RT_NULL);
    serial = (struct rt_serial_device *)dev;
8000b8e4:	fdc42783          	lw	a5,-36(s0)
8000b8e8:	fef42423          	sw	a5,-24(s0)

    /* initialize rx/tx */
    serial->serial_rx = RT_NULL;
8000b8ec:	fe842783          	lw	a5,-24(s0)
8000b8f0:	0407ae23          	sw	zero,92(a5)
    serial->serial_tx = RT_NULL;
8000b8f4:	fe842783          	lw	a5,-24(s0)
8000b8f8:	0607a023          	sw	zero,96(a5)

    /* apply configuration */
    if (serial->ops->configure)
8000b8fc:	fe842783          	lw	a5,-24(s0)
8000b900:	0507a783          	lw	a5,80(a5)
8000b904:	0007a783          	lw	a5,0(a5)
8000b908:	02078463          	beqz	a5,8000b930 <rt_serial_init+0x64>
        result = serial->ops->configure(serial, &serial->config);
8000b90c:	fe842783          	lw	a5,-24(s0)
8000b910:	0507a783          	lw	a5,80(a5)
8000b914:	0007a783          	lw	a5,0(a5)
8000b918:	fe842703          	lw	a4,-24(s0)
8000b91c:	05470713          	addi	a4,a4,84
8000b920:	00070593          	mv	a1,a4
8000b924:	fe842503          	lw	a0,-24(s0)
8000b928:	000780e7          	jalr	a5
8000b92c:	fea42623          	sw	a0,-20(s0)

    return result;
8000b930:	fec42783          	lw	a5,-20(s0)
}
8000b934:	00078513          	mv	a0,a5
8000b938:	02c12083          	lw	ra,44(sp)
8000b93c:	02812403          	lw	s0,40(sp)
8000b940:	03010113          	addi	sp,sp,48
8000b944:	00008067          	ret

8000b948 <rt_serial_open>:

static rt_err_t rt_serial_open(struct rt_device *dev, rt_uint16_t oflag)
{
8000b948:	fc010113          	addi	sp,sp,-64
8000b94c:	02112e23          	sw	ra,60(sp)
8000b950:	02812c23          	sw	s0,56(sp)
8000b954:	04010413          	addi	s0,sp,64
8000b958:	fca42623          	sw	a0,-52(s0)
8000b95c:	00058793          	mv	a5,a1
8000b960:	fcf41523          	sh	a5,-54(s0)
    rt_uint16_t stream_flag = 0;
8000b964:	fe041723          	sh	zero,-18(s0)
    struct rt_serial_device *serial;

    RT_ASSERT(dev != RT_NULL);
    serial = (struct rt_serial_device *)dev;
8000b968:	fcc42783          	lw	a5,-52(s0)
8000b96c:	fef42423          	sw	a5,-24(s0)

    LOG_D("open serial device: 0x%08x with open flag: 0x%04x",
        dev, oflag);
    /* check device flag with the open flag */
    if ((oflag & RT_DEVICE_FLAG_DMA_RX) && !(dev->flag & RT_DEVICE_FLAG_DMA_RX))
8000b970:	fca45783          	lhu	a5,-54(s0)
8000b974:	2007f793          	andi	a5,a5,512
8000b978:	00078e63          	beqz	a5,8000b994 <rt_serial_open+0x4c>
8000b97c:	fcc42783          	lw	a5,-52(s0)
8000b980:	0247d783          	lhu	a5,36(a5)
8000b984:	2007f793          	andi	a5,a5,512
8000b988:	00079663          	bnez	a5,8000b994 <rt_serial_open+0x4c>
        return -RT_EIO;
8000b98c:	ff800793          	li	a5,-8
8000b990:	4b40006f          	j	8000be44 <rt_serial_open+0x4fc>
    if ((oflag & RT_DEVICE_FLAG_DMA_TX) && !(dev->flag & RT_DEVICE_FLAG_DMA_TX))
8000b994:	fca45703          	lhu	a4,-54(s0)
8000b998:	000017b7          	lui	a5,0x1
8000b99c:	80078793          	addi	a5,a5,-2048 # 800 <__STACKSIZE__-0x3800>
8000b9a0:	00f777b3          	and	a5,a4,a5
8000b9a4:	02078463          	beqz	a5,8000b9cc <rt_serial_open+0x84>
8000b9a8:	fcc42783          	lw	a5,-52(s0)
8000b9ac:	0247d783          	lhu	a5,36(a5)
8000b9b0:	00078713          	mv	a4,a5
8000b9b4:	000017b7          	lui	a5,0x1
8000b9b8:	80078793          	addi	a5,a5,-2048 # 800 <__STACKSIZE__-0x3800>
8000b9bc:	00f777b3          	and	a5,a4,a5
8000b9c0:	00079663          	bnez	a5,8000b9cc <rt_serial_open+0x84>
        return -RT_EIO;
8000b9c4:	ff800793          	li	a5,-8
8000b9c8:	47c0006f          	j	8000be44 <rt_serial_open+0x4fc>
    if ((oflag & RT_DEVICE_FLAG_INT_RX) && !(dev->flag & RT_DEVICE_FLAG_INT_RX))
8000b9cc:	fca45783          	lhu	a5,-54(s0)
8000b9d0:	1007f793          	andi	a5,a5,256
8000b9d4:	00078e63          	beqz	a5,8000b9f0 <rt_serial_open+0xa8>
8000b9d8:	fcc42783          	lw	a5,-52(s0)
8000b9dc:	0247d783          	lhu	a5,36(a5)
8000b9e0:	1007f793          	andi	a5,a5,256
8000b9e4:	00079663          	bnez	a5,8000b9f0 <rt_serial_open+0xa8>
        return -RT_EIO;
8000b9e8:	ff800793          	li	a5,-8
8000b9ec:	4580006f          	j	8000be44 <rt_serial_open+0x4fc>
    if ((oflag & RT_DEVICE_FLAG_INT_TX) && !(dev->flag & RT_DEVICE_FLAG_INT_TX))
8000b9f0:	fca45783          	lhu	a5,-54(s0)
8000b9f4:	4007f793          	andi	a5,a5,1024
8000b9f8:	00078e63          	beqz	a5,8000ba14 <rt_serial_open+0xcc>
8000b9fc:	fcc42783          	lw	a5,-52(s0)
8000ba00:	0247d783          	lhu	a5,36(a5)
8000ba04:	4007f793          	andi	a5,a5,1024
8000ba08:	00079663          	bnez	a5,8000ba14 <rt_serial_open+0xcc>
        return -RT_EIO;
8000ba0c:	ff800793          	li	a5,-8
8000ba10:	4340006f          	j	8000be44 <rt_serial_open+0x4fc>

    /* keep steam flag */
    if ((oflag & RT_DEVICE_FLAG_STREAM) || (dev->open_flag & RT_DEVICE_FLAG_STREAM))
8000ba14:	fca45783          	lhu	a5,-54(s0)
8000ba18:	0407f793          	andi	a5,a5,64
8000ba1c:	00079a63          	bnez	a5,8000ba30 <rt_serial_open+0xe8>
8000ba20:	fcc42783          	lw	a5,-52(s0)
8000ba24:	0267d783          	lhu	a5,38(a5)
8000ba28:	0407f793          	andi	a5,a5,64
8000ba2c:	00078663          	beqz	a5,8000ba38 <rt_serial_open+0xf0>
        stream_flag = RT_DEVICE_FLAG_STREAM;
8000ba30:	04000793          	li	a5,64
8000ba34:	fef41723          	sh	a5,-18(s0)

    /* get open flags */
    dev->open_flag = oflag & 0xff;
8000ba38:	fca45783          	lhu	a5,-54(s0)
8000ba3c:	0ff7f793          	zext.b	a5,a5
8000ba40:	01079713          	slli	a4,a5,0x10
8000ba44:	01075713          	srli	a4,a4,0x10
8000ba48:	fcc42783          	lw	a5,-52(s0)
8000ba4c:	02e79323          	sh	a4,38(a5)

    /* initialize the Rx/Tx structure according to open flag */
    if (serial->serial_rx == RT_NULL)
8000ba50:	fe842783          	lw	a5,-24(s0)
8000ba54:	05c7a783          	lw	a5,92(a5)
8000ba58:	1e079a63          	bnez	a5,8000bc4c <rt_serial_open+0x304>
    {
        if (oflag & RT_DEVICE_FLAG_INT_RX)
8000ba5c:	fca45783          	lhu	a5,-54(s0)
8000ba60:	1007f793          	andi	a5,a5,256
8000ba64:	0c078663          	beqz	a5,8000bb30 <rt_serial_open+0x1e8>
        {
            struct rt_serial_rx_fifo* rx_fifo;

            rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
                serial->config.bufsz);
8000ba68:	fe842783          	lw	a5,-24(s0)
8000ba6c:	0587a783          	lw	a5,88(a5)
8000ba70:	00a7d793          	srli	a5,a5,0xa
8000ba74:	fff7f793          	andi	a5,a5,-1
8000ba78:	01079793          	slli	a5,a5,0x10
8000ba7c:	0107d793          	srli	a5,a5,0x10
            rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
8000ba80:	00c78793          	addi	a5,a5,12
8000ba84:	00078513          	mv	a0,a5
8000ba88:	245090ef          	jal	ra,800154cc <rt_malloc>
8000ba8c:	fca42e23          	sw	a0,-36(s0)
            RT_ASSERT(rx_fifo != RT_NULL);
            rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
8000ba90:	fdc42783          	lw	a5,-36(s0)
8000ba94:	00c78713          	addi	a4,a5,12
8000ba98:	fdc42783          	lw	a5,-36(s0)
8000ba9c:	00e7a023          	sw	a4,0(a5)
            rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
8000baa0:	fdc42783          	lw	a5,-36(s0)
8000baa4:	0007a703          	lw	a4,0(a5)
8000baa8:	fe842783          	lw	a5,-24(s0)
8000baac:	0587a783          	lw	a5,88(a5)
8000bab0:	00a7d793          	srli	a5,a5,0xa
8000bab4:	fff7f793          	andi	a5,a5,-1
8000bab8:	01079793          	slli	a5,a5,0x10
8000babc:	0107d793          	srli	a5,a5,0x10
8000bac0:	00078613          	mv	a2,a5
8000bac4:	00000593          	li	a1,0
8000bac8:	00070513          	mv	a0,a4
8000bacc:	1c0080ef          	jal	ra,80013c8c <rt_memset>
            rx_fifo->put_index = 0;
8000bad0:	fdc42783          	lw	a5,-36(s0)
8000bad4:	00079223          	sh	zero,4(a5)
            rx_fifo->get_index = 0;
8000bad8:	fdc42783          	lw	a5,-36(s0)
8000badc:	00079323          	sh	zero,6(a5)
            rx_fifo->is_full = RT_FALSE;
8000bae0:	fdc42783          	lw	a5,-36(s0)
8000bae4:	0007a423          	sw	zero,8(a5)

            serial->serial_rx = rx_fifo;
8000bae8:	fe842783          	lw	a5,-24(s0)
8000baec:	fdc42703          	lw	a4,-36(s0)
8000baf0:	04e7ae23          	sw	a4,92(a5)
            dev->open_flag |= RT_DEVICE_FLAG_INT_RX;
8000baf4:	fcc42783          	lw	a5,-52(s0)
8000baf8:	0267d783          	lhu	a5,38(a5)
8000bafc:	1007e793          	ori	a5,a5,256
8000bb00:	01079713          	slli	a4,a5,0x10
8000bb04:	01075713          	srli	a4,a4,0x10
8000bb08:	fcc42783          	lw	a5,-52(s0)
8000bb0c:	02e79323          	sh	a4,38(a5)
            /* configure low level device */
            serial->ops->control(serial, RT_DEVICE_CTRL_SET_INT, (void *)RT_DEVICE_FLAG_INT_RX);
8000bb10:	fe842783          	lw	a5,-24(s0)
8000bb14:	0507a783          	lw	a5,80(a5)
8000bb18:	0047a783          	lw	a5,4(a5)
8000bb1c:	10000613          	li	a2,256
8000bb20:	01000593          	li	a1,16
8000bb24:	fe842503          	lw	a0,-24(s0)
8000bb28:	000780e7          	jalr	a5
8000bb2c:	1740006f          	j	8000bca0 <rt_serial_open+0x358>
        }
#ifdef RT_SERIAL_USING_DMA
        else if (oflag & RT_DEVICE_FLAG_DMA_RX)
8000bb30:	fca45783          	lhu	a5,-54(s0)
8000bb34:	2007f793          	andi	a5,a5,512
8000bb38:	10078463          	beqz	a5,8000bc40 <rt_serial_open+0x2f8>
        {
            if (serial->config.bufsz == 0) {
8000bb3c:	fe842783          	lw	a5,-24(s0)
8000bb40:	0587a703          	lw	a4,88(a5)
8000bb44:	040007b7          	lui	a5,0x4000
8000bb48:	c0078793          	addi	a5,a5,-1024 # 3fffc00 <__STACKSIZE__+0x3ffbc00>
8000bb4c:	00f777b3          	and	a5,a4,a5
8000bb50:	02079463          	bnez	a5,8000bb78 <rt_serial_open+0x230>
                struct rt_serial_rx_dma* rx_dma;

                rx_dma = (struct rt_serial_rx_dma*) rt_malloc (sizeof(struct rt_serial_rx_dma));
8000bb54:	00400513          	li	a0,4
8000bb58:	175090ef          	jal	ra,800154cc <rt_malloc>
8000bb5c:	fea42023          	sw	a0,-32(s0)
                RT_ASSERT(rx_dma != RT_NULL);
                rx_dma->activated = RT_FALSE;
8000bb60:	fe042783          	lw	a5,-32(s0)
8000bb64:	0007a023          	sw	zero,0(a5)

                serial->serial_rx = rx_dma;
8000bb68:	fe842783          	lw	a5,-24(s0)
8000bb6c:	fe042703          	lw	a4,-32(s0)
8000bb70:	04e7ae23          	sw	a4,92(a5)
8000bb74:	0ac0006f          	j	8000bc20 <rt_serial_open+0x2d8>
            } else {
                struct rt_serial_rx_fifo* rx_fifo;

                rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
                    serial->config.bufsz);
8000bb78:	fe842783          	lw	a5,-24(s0)
8000bb7c:	0587a783          	lw	a5,88(a5)
8000bb80:	00a7d793          	srli	a5,a5,0xa
8000bb84:	fff7f793          	andi	a5,a5,-1
8000bb88:	01079793          	slli	a5,a5,0x10
8000bb8c:	0107d793          	srli	a5,a5,0x10
                rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
8000bb90:	00c78793          	addi	a5,a5,12
8000bb94:	00078513          	mv	a0,a5
8000bb98:	135090ef          	jal	ra,800154cc <rt_malloc>
8000bb9c:	fea42223          	sw	a0,-28(s0)
                RT_ASSERT(rx_fifo != RT_NULL);
                rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
8000bba0:	fe442783          	lw	a5,-28(s0)
8000bba4:	00c78713          	addi	a4,a5,12
8000bba8:	fe442783          	lw	a5,-28(s0)
8000bbac:	00e7a023          	sw	a4,0(a5)
                rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
8000bbb0:	fe442783          	lw	a5,-28(s0)
8000bbb4:	0007a703          	lw	a4,0(a5)
8000bbb8:	fe842783          	lw	a5,-24(s0)
8000bbbc:	0587a783          	lw	a5,88(a5)
8000bbc0:	00a7d793          	srli	a5,a5,0xa
8000bbc4:	fff7f793          	andi	a5,a5,-1
8000bbc8:	01079793          	slli	a5,a5,0x10
8000bbcc:	0107d793          	srli	a5,a5,0x10
8000bbd0:	00078613          	mv	a2,a5
8000bbd4:	00000593          	li	a1,0
8000bbd8:	00070513          	mv	a0,a4
8000bbdc:	0b0080ef          	jal	ra,80013c8c <rt_memset>
                rx_fifo->put_index = 0;
8000bbe0:	fe442783          	lw	a5,-28(s0)
8000bbe4:	00079223          	sh	zero,4(a5)
                rx_fifo->get_index = 0;
8000bbe8:	fe442783          	lw	a5,-28(s0)
8000bbec:	00079323          	sh	zero,6(a5)
                rx_fifo->is_full = RT_FALSE;
8000bbf0:	fe442783          	lw	a5,-28(s0)
8000bbf4:	0007a423          	sw	zero,8(a5)
                serial->serial_rx = rx_fifo;
8000bbf8:	fe842783          	lw	a5,-24(s0)
8000bbfc:	fe442703          	lw	a4,-28(s0)
8000bc00:	04e7ae23          	sw	a4,92(a5)
                /* configure fifo address and length to low level device */
                serial->ops->control(serial, RT_DEVICE_CTRL_CONFIG, (void *) RT_DEVICE_FLAG_DMA_RX);
8000bc04:	fe842783          	lw	a5,-24(s0)
8000bc08:	0507a783          	lw	a5,80(a5)
8000bc0c:	0047a783          	lw	a5,4(a5)
8000bc10:	20000613          	li	a2,512
8000bc14:	00300593          	li	a1,3
8000bc18:	fe842503          	lw	a0,-24(s0)
8000bc1c:	000780e7          	jalr	a5
            }
            dev->open_flag |= RT_DEVICE_FLAG_DMA_RX;
8000bc20:	fcc42783          	lw	a5,-52(s0)
8000bc24:	0267d783          	lhu	a5,38(a5)
8000bc28:	2007e793          	ori	a5,a5,512
8000bc2c:	01079713          	slli	a4,a5,0x10
8000bc30:	01075713          	srli	a4,a4,0x10
8000bc34:	fcc42783          	lw	a5,-52(s0)
8000bc38:	02e79323          	sh	a4,38(a5)
8000bc3c:	0640006f          	j	8000bca0 <rt_serial_open+0x358>
        }
#endif /* RT_SERIAL_USING_DMA */
        else
        {
            serial->serial_rx = RT_NULL;
8000bc40:	fe842783          	lw	a5,-24(s0)
8000bc44:	0407ae23          	sw	zero,92(a5)
8000bc48:	0580006f          	j	8000bca0 <rt_serial_open+0x358>
        }
    }
    else
    {
        if (oflag & RT_DEVICE_FLAG_INT_RX)
8000bc4c:	fca45783          	lhu	a5,-54(s0)
8000bc50:	1007f793          	andi	a5,a5,256
8000bc54:	02078263          	beqz	a5,8000bc78 <rt_serial_open+0x330>
            dev->open_flag |= RT_DEVICE_FLAG_INT_RX;
8000bc58:	fcc42783          	lw	a5,-52(s0)
8000bc5c:	0267d783          	lhu	a5,38(a5)
8000bc60:	1007e793          	ori	a5,a5,256
8000bc64:	01079713          	slli	a4,a5,0x10
8000bc68:	01075713          	srli	a4,a4,0x10
8000bc6c:	fcc42783          	lw	a5,-52(s0)
8000bc70:	02e79323          	sh	a4,38(a5)
8000bc74:	02c0006f          	j	8000bca0 <rt_serial_open+0x358>
#ifdef RT_SERIAL_USING_DMA
        else if (oflag & RT_DEVICE_FLAG_DMA_RX)
8000bc78:	fca45783          	lhu	a5,-54(s0)
8000bc7c:	2007f793          	andi	a5,a5,512
8000bc80:	02078063          	beqz	a5,8000bca0 <rt_serial_open+0x358>
            dev->open_flag |= RT_DEVICE_FLAG_DMA_RX;
8000bc84:	fcc42783          	lw	a5,-52(s0)
8000bc88:	0267d783          	lhu	a5,38(a5)
8000bc8c:	2007e793          	ori	a5,a5,512
8000bc90:	01079713          	slli	a4,a5,0x10
8000bc94:	01075713          	srli	a4,a4,0x10
8000bc98:	fcc42783          	lw	a5,-52(s0)
8000bc9c:	02e79323          	sh	a4,38(a5)
#endif /* RT_SERIAL_USING_DMA */
    }

    if (serial->serial_tx == RT_NULL)
8000bca0:	fe842783          	lw	a5,-24(s0)
8000bca4:	0607a783          	lw	a5,96(a5)
8000bca8:	10079a63          	bnez	a5,8000bdbc <rt_serial_open+0x474>
    {
        if (oflag & RT_DEVICE_FLAG_INT_TX)
8000bcac:	fca45783          	lhu	a5,-54(s0)
8000bcb0:	4007f793          	andi	a5,a5,1024
8000bcb4:	06078263          	beqz	a5,8000bd18 <rt_serial_open+0x3d0>
        {
            struct rt_serial_tx_fifo *tx_fifo;

            tx_fifo = (struct rt_serial_tx_fifo*) rt_malloc(sizeof(struct rt_serial_tx_fifo));
8000bcb8:	00c00513          	li	a0,12
8000bcbc:	011090ef          	jal	ra,800154cc <rt_malloc>
8000bcc0:	fca42a23          	sw	a0,-44(s0)
            RT_ASSERT(tx_fifo != RT_NULL);

            rt_completion_init(&(tx_fifo->completion));
8000bcc4:	fd442783          	lw	a5,-44(s0)
8000bcc8:	00078513          	mv	a0,a5
8000bccc:	b20fe0ef          	jal	ra,80009fec <rt_completion_init>
            serial->serial_tx = tx_fifo;
8000bcd0:	fe842783          	lw	a5,-24(s0)
8000bcd4:	fd442703          	lw	a4,-44(s0)
8000bcd8:	06e7a023          	sw	a4,96(a5)

            dev->open_flag |= RT_DEVICE_FLAG_INT_TX;
8000bcdc:	fcc42783          	lw	a5,-52(s0)
8000bce0:	0267d783          	lhu	a5,38(a5)
8000bce4:	4007e793          	ori	a5,a5,1024
8000bce8:	01079713          	slli	a4,a5,0x10
8000bcec:	01075713          	srli	a4,a4,0x10
8000bcf0:	fcc42783          	lw	a5,-52(s0)
8000bcf4:	02e79323          	sh	a4,38(a5)
            /* configure low level device */
            serial->ops->control(serial, RT_DEVICE_CTRL_SET_INT, (void *)RT_DEVICE_FLAG_INT_TX);
8000bcf8:	fe842783          	lw	a5,-24(s0)
8000bcfc:	0507a783          	lw	a5,80(a5)
8000bd00:	0047a783          	lw	a5,4(a5)
8000bd04:	40000613          	li	a2,1024
8000bd08:	01000593          	li	a1,16
8000bd0c:	fe842503          	lw	a0,-24(s0)
8000bd10:	000780e7          	jalr	a5
8000bd14:	10c0006f          	j	8000be20 <rt_serial_open+0x4d8>
        }
#ifdef RT_SERIAL_USING_DMA
        else if (oflag & RT_DEVICE_FLAG_DMA_TX)
8000bd18:	fca45703          	lhu	a4,-54(s0)
8000bd1c:	000017b7          	lui	a5,0x1
8000bd20:	80078793          	addi	a5,a5,-2048 # 800 <__STACKSIZE__-0x3800>
8000bd24:	00f777b3          	and	a5,a4,a5
8000bd28:	08078463          	beqz	a5,8000bdb0 <rt_serial_open+0x468>
        {
            struct rt_serial_tx_dma* tx_dma;

            tx_dma = (struct rt_serial_tx_dma*) rt_malloc (sizeof(struct rt_serial_tx_dma));
8000bd2c:	02800513          	li	a0,40
8000bd30:	79c090ef          	jal	ra,800154cc <rt_malloc>
8000bd34:	fca42c23          	sw	a0,-40(s0)
            RT_ASSERT(tx_dma != RT_NULL);
            tx_dma->activated = RT_FALSE;
8000bd38:	fd842783          	lw	a5,-40(s0)
8000bd3c:	0007a023          	sw	zero,0(a5)

            rt_data_queue_init(&(tx_dma->data_queue), 8, 4, RT_NULL);
8000bd40:	fd842783          	lw	a5,-40(s0)
8000bd44:	00478793          	addi	a5,a5,4
8000bd48:	00000693          	li	a3,0
8000bd4c:	00400613          	li	a2,4
8000bd50:	00800593          	li	a1,8
8000bd54:	00078513          	mv	a0,a5
8000bd58:	d44fe0ef          	jal	ra,8000a29c <rt_data_queue_init>
            serial->serial_tx = tx_dma;
8000bd5c:	fe842783          	lw	a5,-24(s0)
8000bd60:	fd842703          	lw	a4,-40(s0)
8000bd64:	06e7a023          	sw	a4,96(a5)

            dev->open_flag |= RT_DEVICE_FLAG_DMA_TX;
8000bd68:	fcc42783          	lw	a5,-52(s0)
8000bd6c:	0267d703          	lhu	a4,38(a5)
8000bd70:	000017b7          	lui	a5,0x1
8000bd74:	80078793          	addi	a5,a5,-2048 # 800 <__STACKSIZE__-0x3800>
8000bd78:	00f767b3          	or	a5,a4,a5
8000bd7c:	01079713          	slli	a4,a5,0x10
8000bd80:	01075713          	srli	a4,a4,0x10
8000bd84:	fcc42783          	lw	a5,-52(s0)
8000bd88:	02e79323          	sh	a4,38(a5)
            /* configure low level device */
            serial->ops->control(serial, RT_DEVICE_CTRL_CONFIG, (void *)RT_DEVICE_FLAG_DMA_TX);
8000bd8c:	fe842783          	lw	a5,-24(s0)
8000bd90:	0507a783          	lw	a5,80(a5)
8000bd94:	0047a783          	lw	a5,4(a5)
8000bd98:	00001737          	lui	a4,0x1
8000bd9c:	80070613          	addi	a2,a4,-2048 # 800 <__STACKSIZE__-0x3800>
8000bda0:	00300593          	li	a1,3
8000bda4:	fe842503          	lw	a0,-24(s0)
8000bda8:	000780e7          	jalr	a5
8000bdac:	0740006f          	j	8000be20 <rt_serial_open+0x4d8>
        }
#endif /* RT_SERIAL_USING_DMA */
        else
        {
            serial->serial_tx = RT_NULL;
8000bdb0:	fe842783          	lw	a5,-24(s0)
8000bdb4:	0607a023          	sw	zero,96(a5)
8000bdb8:	0680006f          	j	8000be20 <rt_serial_open+0x4d8>
        }
    }
    else
    {
        if (oflag & RT_DEVICE_FLAG_INT_TX)
8000bdbc:	fca45783          	lhu	a5,-54(s0)
8000bdc0:	4007f793          	andi	a5,a5,1024
8000bdc4:	02078263          	beqz	a5,8000bde8 <rt_serial_open+0x4a0>
            dev->open_flag |= RT_DEVICE_FLAG_INT_TX;
8000bdc8:	fcc42783          	lw	a5,-52(s0)
8000bdcc:	0267d783          	lhu	a5,38(a5)
8000bdd0:	4007e793          	ori	a5,a5,1024
8000bdd4:	01079713          	slli	a4,a5,0x10
8000bdd8:	01075713          	srli	a4,a4,0x10
8000bddc:	fcc42783          	lw	a5,-52(s0)
8000bde0:	02e79323          	sh	a4,38(a5)
8000bde4:	03c0006f          	j	8000be20 <rt_serial_open+0x4d8>
#ifdef RT_SERIAL_USING_DMA
        else if (oflag & RT_DEVICE_FLAG_DMA_TX)
8000bde8:	fca45703          	lhu	a4,-54(s0)
8000bdec:	000017b7          	lui	a5,0x1
8000bdf0:	80078793          	addi	a5,a5,-2048 # 800 <__STACKSIZE__-0x3800>
8000bdf4:	00f777b3          	and	a5,a4,a5
8000bdf8:	02078463          	beqz	a5,8000be20 <rt_serial_open+0x4d8>
            dev->open_flag |= RT_DEVICE_FLAG_DMA_TX;
8000bdfc:	fcc42783          	lw	a5,-52(s0)
8000be00:	0267d703          	lhu	a4,38(a5)
8000be04:	000017b7          	lui	a5,0x1
8000be08:	80078793          	addi	a5,a5,-2048 # 800 <__STACKSIZE__-0x3800>
8000be0c:	00f767b3          	or	a5,a4,a5
8000be10:	01079713          	slli	a4,a5,0x10
8000be14:	01075713          	srli	a4,a4,0x10
8000be18:	fcc42783          	lw	a5,-52(s0)
8000be1c:	02e79323          	sh	a4,38(a5)
#endif /* RT_SERIAL_USING_DMA */
    }

    /* set stream flag */
    dev->open_flag |= stream_flag;
8000be20:	fcc42783          	lw	a5,-52(s0)
8000be24:	0267d783          	lhu	a5,38(a5)
8000be28:	fee45703          	lhu	a4,-18(s0)
8000be2c:	00e7e7b3          	or	a5,a5,a4
8000be30:	01079713          	slli	a4,a5,0x10
8000be34:	01075713          	srli	a4,a4,0x10
8000be38:	fcc42783          	lw	a5,-52(s0)
8000be3c:	02e79323          	sh	a4,38(a5)

    return RT_EOK;
8000be40:	00000793          	li	a5,0
}
8000be44:	00078513          	mv	a0,a5
8000be48:	03c12083          	lw	ra,60(sp)
8000be4c:	03812403          	lw	s0,56(sp)
8000be50:	04010113          	addi	sp,sp,64
8000be54:	00008067          	ret

8000be58 <rt_serial_close>:

static rt_err_t rt_serial_close(struct rt_device *dev)
{
8000be58:	fc010113          	addi	sp,sp,-64
8000be5c:	02112e23          	sw	ra,60(sp)
8000be60:	02812c23          	sw	s0,56(sp)
8000be64:	04010413          	addi	s0,sp,64
8000be68:	fca42623          	sw	a0,-52(s0)
    struct rt_serial_device *serial;

    RT_ASSERT(dev != RT_NULL);
    serial = (struct rt_serial_device *)dev;
8000be6c:	fcc42783          	lw	a5,-52(s0)
8000be70:	fef42623          	sw	a5,-20(s0)

    /* this device has more reference count */
    if (dev->ref_count > 1) return RT_EOK;
8000be74:	fcc42783          	lw	a5,-52(s0)
8000be78:	0287c703          	lbu	a4,40(a5)
8000be7c:	00100793          	li	a5,1
8000be80:	00e7f663          	bgeu	a5,a4,8000be8c <rt_serial_close+0x34>
8000be84:	00000793          	li	a5,0
8000be88:	2300006f          	j	8000c0b8 <rt_serial_close+0x260>

    if (dev->open_flag & RT_DEVICE_FLAG_INT_RX)
8000be8c:	fcc42783          	lw	a5,-52(s0)
8000be90:	0267d783          	lhu	a5,38(a5)
8000be94:	1007f793          	andi	a5,a5,256
8000be98:	04078e63          	beqz	a5,8000bef4 <rt_serial_close+0x9c>
    {
        struct rt_serial_rx_fifo* rx_fifo;

        /* configure low level device */
        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_RX);
8000be9c:	fec42783          	lw	a5,-20(s0)
8000bea0:	0507a783          	lw	a5,80(a5)
8000bea4:	0047a783          	lw	a5,4(a5)
8000bea8:	10000613          	li	a2,256
8000beac:	01100593          	li	a1,17
8000beb0:	fec42503          	lw	a0,-20(s0)
8000beb4:	000780e7          	jalr	a5
        dev->open_flag &= ~RT_DEVICE_FLAG_INT_RX;
8000beb8:	fcc42783          	lw	a5,-52(s0)
8000bebc:	0267d783          	lhu	a5,38(a5)
8000bec0:	eff7f793          	andi	a5,a5,-257
8000bec4:	01079713          	slli	a4,a5,0x10
8000bec8:	01075713          	srli	a4,a4,0x10
8000becc:	fcc42783          	lw	a5,-52(s0)
8000bed0:	02e79323          	sh	a4,38(a5)

        rx_fifo = (struct rt_serial_rx_fifo*)serial->serial_rx;
8000bed4:	fec42783          	lw	a5,-20(s0)
8000bed8:	05c7a783          	lw	a5,92(a5)
8000bedc:	fef42023          	sw	a5,-32(s0)
        RT_ASSERT(rx_fifo != RT_NULL);

        rt_free(rx_fifo);
8000bee0:	fe042503          	lw	a0,-32(s0)
8000bee4:	734090ef          	jal	ra,80015618 <rt_free>
        serial->serial_rx = RT_NULL;
8000bee8:	fec42783          	lw	a5,-20(s0)
8000beec:	0407ae23          	sw	zero,92(a5)
8000bef0:	0980006f          	j	8000bf88 <rt_serial_close+0x130>

    }
#ifdef RT_SERIAL_USING_DMA
    else if (dev->open_flag & RT_DEVICE_FLAG_DMA_RX)
8000bef4:	fcc42783          	lw	a5,-52(s0)
8000bef8:	0267d783          	lhu	a5,38(a5)
8000befc:	2007f793          	andi	a5,a5,512
8000bf00:	08078463          	beqz	a5,8000bf88 <rt_serial_close+0x130>
    {
        /* configure low level device */
        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void *) RT_DEVICE_FLAG_DMA_RX);
8000bf04:	fec42783          	lw	a5,-20(s0)
8000bf08:	0507a783          	lw	a5,80(a5)
8000bf0c:	0047a783          	lw	a5,4(a5)
8000bf10:	20000613          	li	a2,512
8000bf14:	01100593          	li	a1,17
8000bf18:	fec42503          	lw	a0,-20(s0)
8000bf1c:	000780e7          	jalr	a5
        dev->open_flag &= ~RT_DEVICE_FLAG_DMA_RX;
8000bf20:	fcc42783          	lw	a5,-52(s0)
8000bf24:	0267d783          	lhu	a5,38(a5)
8000bf28:	dff7f793          	andi	a5,a5,-513
8000bf2c:	01079713          	slli	a4,a5,0x10
8000bf30:	01075713          	srli	a4,a4,0x10
8000bf34:	fcc42783          	lw	a5,-52(s0)
8000bf38:	02e79323          	sh	a4,38(a5)

        if (serial->config.bufsz == 0)
8000bf3c:	fec42783          	lw	a5,-20(s0)
8000bf40:	0587a703          	lw	a4,88(a5)
8000bf44:	040007b7          	lui	a5,0x4000
8000bf48:	c0078793          	addi	a5,a5,-1024 # 3fffc00 <__STACKSIZE__+0x3ffbc00>
8000bf4c:	00f777b3          	and	a5,a4,a5
8000bf50:	00079e63          	bnez	a5,8000bf6c <rt_serial_close+0x114>
        {
            struct rt_serial_rx_dma* rx_dma;

            rx_dma = (struct rt_serial_rx_dma*)serial->serial_rx;
8000bf54:	fec42783          	lw	a5,-20(s0)
8000bf58:	05c7a783          	lw	a5,92(a5)
8000bf5c:	fef42223          	sw	a5,-28(s0)
            RT_ASSERT(rx_dma != RT_NULL);

            rt_free(rx_dma);
8000bf60:	fe442503          	lw	a0,-28(s0)
8000bf64:	6b4090ef          	jal	ra,80015618 <rt_free>
8000bf68:	0180006f          	j	8000bf80 <rt_serial_close+0x128>
        }
        else
        {
            struct rt_serial_rx_fifo* rx_fifo;

            rx_fifo = (struct rt_serial_rx_fifo*)serial->serial_rx;
8000bf6c:	fec42783          	lw	a5,-20(s0)
8000bf70:	05c7a783          	lw	a5,92(a5)
8000bf74:	fef42423          	sw	a5,-24(s0)
            RT_ASSERT(rx_fifo != RT_NULL);

            rt_free(rx_fifo);
8000bf78:	fe842503          	lw	a0,-24(s0)
8000bf7c:	69c090ef          	jal	ra,80015618 <rt_free>
        }
        serial->serial_rx = RT_NULL;
8000bf80:	fec42783          	lw	a5,-20(s0)
8000bf84:	0407ae23          	sw	zero,92(a5)

    }
#endif /* RT_SERIAL_USING_DMA */

    if (dev->open_flag & RT_DEVICE_FLAG_INT_TX)
8000bf88:	fcc42783          	lw	a5,-52(s0)
8000bf8c:	0267d783          	lhu	a5,38(a5)
8000bf90:	4007f793          	andi	a5,a5,1024
8000bf94:	04078e63          	beqz	a5,8000bff0 <rt_serial_close+0x198>
    {
        struct rt_serial_tx_fifo* tx_fifo;

        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_TX);
8000bf98:	fec42783          	lw	a5,-20(s0)
8000bf9c:	0507a783          	lw	a5,80(a5)
8000bfa0:	0047a783          	lw	a5,4(a5)
8000bfa4:	40000613          	li	a2,1024
8000bfa8:	01100593          	li	a1,17
8000bfac:	fec42503          	lw	a0,-20(s0)
8000bfb0:	000780e7          	jalr	a5
        dev->open_flag &= ~RT_DEVICE_FLAG_INT_TX;
8000bfb4:	fcc42783          	lw	a5,-52(s0)
8000bfb8:	0267d783          	lhu	a5,38(a5)
8000bfbc:	bff7f793          	andi	a5,a5,-1025
8000bfc0:	01079713          	slli	a4,a5,0x10
8000bfc4:	01075713          	srli	a4,a4,0x10
8000bfc8:	fcc42783          	lw	a5,-52(s0)
8000bfcc:	02e79323          	sh	a4,38(a5)

        tx_fifo = (struct rt_serial_tx_fifo*)serial->serial_tx;
8000bfd0:	fec42783          	lw	a5,-20(s0)
8000bfd4:	0607a783          	lw	a5,96(a5)
8000bfd8:	fcf42c23          	sw	a5,-40(s0)
        RT_ASSERT(tx_fifo != RT_NULL);

        rt_free(tx_fifo);
8000bfdc:	fd842503          	lw	a0,-40(s0)
8000bfe0:	638090ef          	jal	ra,80015618 <rt_free>
        serial->serial_tx = RT_NULL;
8000bfe4:	fec42783          	lw	a5,-20(s0)
8000bfe8:	0607a023          	sw	zero,96(a5)
8000bfec:	0900006f          	j	8000c07c <rt_serial_close+0x224>

        /* configure low level device */
    }
#ifdef RT_SERIAL_USING_DMA
    else if (dev->open_flag & RT_DEVICE_FLAG_DMA_TX)
8000bff0:	fcc42783          	lw	a5,-52(s0)
8000bff4:	0267d783          	lhu	a5,38(a5)
8000bff8:	00078713          	mv	a4,a5
8000bffc:	000017b7          	lui	a5,0x1
8000c000:	80078793          	addi	a5,a5,-2048 # 800 <__STACKSIZE__-0x3800>
8000c004:	00f777b3          	and	a5,a4,a5
8000c008:	06078a63          	beqz	a5,8000c07c <rt_serial_close+0x224>
    {
        struct rt_serial_tx_dma* tx_dma;

        /* configure low level device */
        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void *) RT_DEVICE_FLAG_DMA_TX);
8000c00c:	fec42783          	lw	a5,-20(s0)
8000c010:	0507a783          	lw	a5,80(a5)
8000c014:	0047a783          	lw	a5,4(a5)
8000c018:	00001737          	lui	a4,0x1
8000c01c:	80070613          	addi	a2,a4,-2048 # 800 <__STACKSIZE__-0x3800>
8000c020:	01100593          	li	a1,17
8000c024:	fec42503          	lw	a0,-20(s0)
8000c028:	000780e7          	jalr	a5
        dev->open_flag &= ~RT_DEVICE_FLAG_DMA_TX;
8000c02c:	fcc42783          	lw	a5,-52(s0)
8000c030:	0267d703          	lhu	a4,38(a5)
8000c034:	fffff7b7          	lui	a5,0xfffff
8000c038:	7ff78793          	addi	a5,a5,2047 # fffff7ff <__bss_end+0x7ff79043>
8000c03c:	00f777b3          	and	a5,a4,a5
8000c040:	01079713          	slli	a4,a5,0x10
8000c044:	01075713          	srli	a4,a4,0x10
8000c048:	fcc42783          	lw	a5,-52(s0)
8000c04c:	02e79323          	sh	a4,38(a5)

        tx_dma = (struct rt_serial_tx_dma*)serial->serial_tx;
8000c050:	fec42783          	lw	a5,-20(s0)
8000c054:	0607a783          	lw	a5,96(a5)
8000c058:	fcf42e23          	sw	a5,-36(s0)
        RT_ASSERT(tx_dma != RT_NULL);

        rt_data_queue_deinit(&(tx_dma->data_queue));
8000c05c:	fdc42783          	lw	a5,-36(s0)
8000c060:	00478793          	addi	a5,a5,4
8000c064:	00078513          	mv	a0,a5
8000c068:	bf5fe0ef          	jal	ra,8000ac5c <rt_data_queue_deinit>

        rt_free(tx_dma);
8000c06c:	fdc42503          	lw	a0,-36(s0)
8000c070:	5a8090ef          	jal	ra,80015618 <rt_free>
        serial->serial_tx = RT_NULL;
8000c074:	fec42783          	lw	a5,-20(s0)
8000c078:	0607a023          	sw	zero,96(a5)

    }
#endif /* RT_SERIAL_USING_DMA */

    serial->ops->control(serial, RT_DEVICE_CTRL_CLOSE, RT_NULL);
8000c07c:	fec42783          	lw	a5,-20(s0)
8000c080:	0507a783          	lw	a5,80(a5)
8000c084:	0047a783          	lw	a5,4(a5)
8000c088:	00000613          	li	a2,0
8000c08c:	00400593          	li	a1,4
8000c090:	fec42503          	lw	a0,-20(s0)
8000c094:	000780e7          	jalr	a5
    dev->flag &= ~RT_DEVICE_FLAG_ACTIVATED;
8000c098:	fcc42783          	lw	a5,-52(s0)
8000c09c:	0247d783          	lhu	a5,36(a5)
8000c0a0:	fef7f793          	andi	a5,a5,-17
8000c0a4:	01079713          	slli	a4,a5,0x10
8000c0a8:	01075713          	srli	a4,a4,0x10
8000c0ac:	fcc42783          	lw	a5,-52(s0)
8000c0b0:	02e79223          	sh	a4,36(a5)

    return RT_EOK;
8000c0b4:	00000793          	li	a5,0
}
8000c0b8:	00078513          	mv	a0,a5
8000c0bc:	03c12083          	lw	ra,60(sp)
8000c0c0:	03812403          	lw	s0,56(sp)
8000c0c4:	04010113          	addi	sp,sp,64
8000c0c8:	00008067          	ret

8000c0cc <rt_serial_read>:

static rt_size_t rt_serial_read(struct rt_device *dev,
                                rt_off_t          pos,
                                void             *buffer,
                                rt_size_t         size)
{
8000c0cc:	fd010113          	addi	sp,sp,-48
8000c0d0:	02112623          	sw	ra,44(sp)
8000c0d4:	02812423          	sw	s0,40(sp)
8000c0d8:	03010413          	addi	s0,sp,48
8000c0dc:	fca42e23          	sw	a0,-36(s0)
8000c0e0:	fcb42c23          	sw	a1,-40(s0)
8000c0e4:	fcc42a23          	sw	a2,-44(s0)
8000c0e8:	fcd42823          	sw	a3,-48(s0)
    struct rt_serial_device *serial;

    RT_ASSERT(dev != RT_NULL);
    if (size == 0) return 0;
8000c0ec:	fd042783          	lw	a5,-48(s0)
8000c0f0:	00079663          	bnez	a5,8000c0fc <rt_serial_read+0x30>
8000c0f4:	00000793          	li	a5,0
8000c0f8:	07c0006f          	j	8000c174 <rt_serial_read+0xa8>

    serial = (struct rt_serial_device *)dev;
8000c0fc:	fdc42783          	lw	a5,-36(s0)
8000c100:	fef42623          	sw	a5,-20(s0)

    if (dev->open_flag & RT_DEVICE_FLAG_INT_RX)
8000c104:	fdc42783          	lw	a5,-36(s0)
8000c108:	0267d783          	lhu	a5,38(a5)
8000c10c:	1007f793          	andi	a5,a5,256
8000c110:	02078063          	beqz	a5,8000c130 <rt_serial_read+0x64>
    {
        return _serial_int_rx(serial, (rt_uint8_t *)buffer, size);
8000c114:	fd042783          	lw	a5,-48(s0)
8000c118:	00078613          	mv	a2,a5
8000c11c:	fd442583          	lw	a1,-44(s0)
8000c120:	fec42503          	lw	a0,-20(s0)
8000c124:	e81fe0ef          	jal	ra,8000afa4 <_serial_int_rx>
8000c128:	00050793          	mv	a5,a0
8000c12c:	0480006f          	j	8000c174 <rt_serial_read+0xa8>
    }
#ifdef RT_SERIAL_USING_DMA
    else if (dev->open_flag & RT_DEVICE_FLAG_DMA_RX)
8000c130:	fdc42783          	lw	a5,-36(s0)
8000c134:	0267d783          	lhu	a5,38(a5)
8000c138:	2007f793          	andi	a5,a5,512
8000c13c:	02078063          	beqz	a5,8000c15c <rt_serial_read+0x90>
    {
        return _serial_dma_rx(serial, (rt_uint8_t *)buffer, size);
8000c140:	fd042783          	lw	a5,-48(s0)
8000c144:	00078613          	mv	a2,a5
8000c148:	fd442583          	lw	a1,-44(s0)
8000c14c:	fec42503          	lw	a0,-20(s0)
8000c150:	c64ff0ef          	jal	ra,8000b5b4 <_serial_dma_rx>
8000c154:	00050793          	mv	a5,a0
8000c158:	01c0006f          	j	8000c174 <rt_serial_read+0xa8>
    }
#endif /* RT_SERIAL_USING_DMA */

    return _serial_poll_rx(serial, (rt_uint8_t *)buffer, size);
8000c15c:	fd042783          	lw	a5,-48(s0)
8000c160:	00078613          	mv	a2,a5
8000c164:	fd442583          	lw	a1,-44(s0)
8000c168:	fec42503          	lw	a0,-20(s0)
8000c16c:	cb1fe0ef          	jal	ra,8000ae1c <_serial_poll_rx>
8000c170:	00050793          	mv	a5,a0
}
8000c174:	00078513          	mv	a0,a5
8000c178:	02c12083          	lw	ra,44(sp)
8000c17c:	02812403          	lw	s0,40(sp)
8000c180:	03010113          	addi	sp,sp,48
8000c184:	00008067          	ret

8000c188 <rt_serial_write>:

static rt_size_t rt_serial_write(struct rt_device *dev,
                                 rt_off_t          pos,
                                 const void       *buffer,
                                 rt_size_t         size)
{
8000c188:	fd010113          	addi	sp,sp,-48
8000c18c:	02112623          	sw	ra,44(sp)
8000c190:	02812423          	sw	s0,40(sp)
8000c194:	03010413          	addi	s0,sp,48
8000c198:	fca42e23          	sw	a0,-36(s0)
8000c19c:	fcb42c23          	sw	a1,-40(s0)
8000c1a0:	fcc42a23          	sw	a2,-44(s0)
8000c1a4:	fcd42823          	sw	a3,-48(s0)
    struct rt_serial_device *serial;

    RT_ASSERT(dev != RT_NULL);
    if (size == 0) return 0;
8000c1a8:	fd042783          	lw	a5,-48(s0)
8000c1ac:	00079663          	bnez	a5,8000c1b8 <rt_serial_write+0x30>
8000c1b0:	00000793          	li	a5,0
8000c1b4:	0880006f          	j	8000c23c <rt_serial_write+0xb4>

    serial = (struct rt_serial_device *)dev;
8000c1b8:	fdc42783          	lw	a5,-36(s0)
8000c1bc:	fef42623          	sw	a5,-20(s0)

    if (dev->open_flag & RT_DEVICE_FLAG_INT_TX)
8000c1c0:	fdc42783          	lw	a5,-36(s0)
8000c1c4:	0267d783          	lhu	a5,38(a5)
8000c1c8:	4007f793          	andi	a5,a5,1024
8000c1cc:	02078063          	beqz	a5,8000c1ec <rt_serial_write+0x64>
    {
        return _serial_int_tx(serial, (const rt_uint8_t *)buffer, size);
8000c1d0:	fd042783          	lw	a5,-48(s0)
8000c1d4:	00078613          	mv	a2,a5
8000c1d8:	fd442583          	lw	a1,-44(s0)
8000c1dc:	fec42503          	lw	a0,-20(s0)
8000c1e0:	f01fe0ef          	jal	ra,8000b0e0 <_serial_int_tx>
8000c1e4:	00050793          	mv	a5,a0
8000c1e8:	0540006f          	j	8000c23c <rt_serial_write+0xb4>
    }
#ifdef RT_SERIAL_USING_DMA
    else if (dev->open_flag & RT_DEVICE_FLAG_DMA_TX)
8000c1ec:	fdc42783          	lw	a5,-36(s0)
8000c1f0:	0267d783          	lhu	a5,38(a5)
8000c1f4:	00078713          	mv	a4,a5
8000c1f8:	000017b7          	lui	a5,0x1
8000c1fc:	80078793          	addi	a5,a5,-2048 # 800 <__STACKSIZE__-0x3800>
8000c200:	00f777b3          	and	a5,a4,a5
8000c204:	02078063          	beqz	a5,8000c224 <rt_serial_write+0x9c>
    {
        return _serial_dma_tx(serial, (const rt_uint8_t *)buffer, size);
8000c208:	fd042783          	lw	a5,-48(s0)
8000c20c:	00078613          	mv	a2,a5
8000c210:	fd442583          	lw	a1,-44(s0)
8000c214:	fec42503          	lw	a0,-20(s0)
8000c218:	ddcff0ef          	jal	ra,8000b7f4 <_serial_dma_tx>
8000c21c:	00050793          	mv	a5,a0
8000c220:	01c0006f          	j	8000c23c <rt_serial_write+0xb4>
    }
#endif /* RT_SERIAL_USING_DMA */
    else
    {
        return _serial_poll_tx(serial, (const rt_uint8_t *)buffer, size);
8000c224:	fd042783          	lw	a5,-48(s0)
8000c228:	00078613          	mv	a2,a5
8000c22c:	fd442583          	lw	a1,-44(s0)
8000c230:	fec42503          	lw	a0,-20(s0)
8000c234:	cb1fe0ef          	jal	ra,8000aee4 <_serial_poll_tx>
8000c238:	00050793          	mv	a5,a0
    }
}
8000c23c:	00078513          	mv	a0,a5
8000c240:	02c12083          	lw	ra,44(sp)
8000c244:	02812403          	lw	s0,40(sp)
8000c248:	03010113          	addi	sp,sp,48
8000c24c:	00008067          	ret

8000c250 <rt_serial_control>:
#endif /* RT_USING_POSIX_TERMIOS */

static rt_err_t rt_serial_control(struct rt_device *dev,
                                  int              cmd,
                                  void             *args)
{
8000c250:	fd010113          	addi	sp,sp,-48
8000c254:	02112623          	sw	ra,44(sp)
8000c258:	02812423          	sw	s0,40(sp)
8000c25c:	03010413          	addi	s0,sp,48
8000c260:	fca42e23          	sw	a0,-36(s0)
8000c264:	fcb42c23          	sw	a1,-40(s0)
8000c268:	fcc42a23          	sw	a2,-44(s0)
    rt_err_t ret = RT_EOK;
8000c26c:	fe042623          	sw	zero,-20(s0)
    struct rt_serial_device *serial;

    RT_ASSERT(dev != RT_NULL);
    serial = (struct rt_serial_device *)dev;
8000c270:	fdc42783          	lw	a5,-36(s0)
8000c274:	fef42423          	sw	a5,-24(s0)

    switch (cmd)
8000c278:	fd842703          	lw	a4,-40(s0)
8000c27c:	00300793          	li	a5,3
8000c280:	06f70463          	beq	a4,a5,8000c2e8 <rt_serial_control+0x98>
8000c284:	fd842703          	lw	a4,-40(s0)
8000c288:	00300793          	li	a5,3
8000c28c:	0ee7ca63          	blt	a5,a4,8000c380 <rt_serial_control+0x130>
8000c290:	fd842703          	lw	a4,-40(s0)
8000c294:	00100793          	li	a5,1
8000c298:	02f70863          	beq	a4,a5,8000c2c8 <rt_serial_control+0x78>
8000c29c:	fd842703          	lw	a4,-40(s0)
8000c2a0:	00200793          	li	a5,2
8000c2a4:	0cf71e63          	bne	a4,a5,8000c380 <rt_serial_control+0x130>
    {
        case RT_DEVICE_CTRL_SUSPEND:
            /* suspend device */
            dev->flag |= RT_DEVICE_FLAG_SUSPENDED;
8000c2a8:	fdc42783          	lw	a5,-36(s0)
8000c2ac:	0247d783          	lhu	a5,36(a5)
8000c2b0:	0207e793          	ori	a5,a5,32
8000c2b4:	01079713          	slli	a4,a5,0x10
8000c2b8:	01075713          	srli	a4,a4,0x10
8000c2bc:	fdc42783          	lw	a5,-36(s0)
8000c2c0:	02e79223          	sh	a4,36(a5)
            break;
8000c2c4:	0e40006f          	j	8000c3a8 <rt_serial_control+0x158>

        case RT_DEVICE_CTRL_RESUME:
            /* resume device */
            dev->flag &= ~RT_DEVICE_FLAG_SUSPENDED;
8000c2c8:	fdc42783          	lw	a5,-36(s0)
8000c2cc:	0247d783          	lhu	a5,36(a5)
8000c2d0:	fdf7f793          	andi	a5,a5,-33
8000c2d4:	01079713          	slli	a4,a5,0x10
8000c2d8:	01075713          	srli	a4,a4,0x10
8000c2dc:	fdc42783          	lw	a5,-36(s0)
8000c2e0:	02e79223          	sh	a4,36(a5)
            break;
8000c2e4:	0c40006f          	j	8000c3a8 <rt_serial_control+0x158>

        case RT_DEVICE_CTRL_CONFIG:
            if (args)
8000c2e8:	fd442783          	lw	a5,-44(s0)
8000c2ec:	0a078c63          	beqz	a5,8000c3a4 <rt_serial_control+0x154>
            {
                struct serial_configure *pconfig = (struct serial_configure *) args;
8000c2f0:	fd442783          	lw	a5,-44(s0)
8000c2f4:	fef42223          	sw	a5,-28(s0)
                if (pconfig->bufsz != serial->config.bufsz && serial->parent.ref_count)
8000c2f8:	fe442783          	lw	a5,-28(s0)
8000c2fc:	0047a783          	lw	a5,4(a5)
8000c300:	00a7d793          	srli	a5,a5,0xa
8000c304:	fff7f793          	andi	a5,a5,-1
8000c308:	01079713          	slli	a4,a5,0x10
8000c30c:	01075713          	srli	a4,a4,0x10
8000c310:	fe842783          	lw	a5,-24(s0)
8000c314:	0587a783          	lw	a5,88(a5)
8000c318:	00a7d793          	srli	a5,a5,0xa
8000c31c:	fff7f793          	andi	a5,a5,-1
8000c320:	01079793          	slli	a5,a5,0x10
8000c324:	0107d793          	srli	a5,a5,0x10
8000c328:	00f70c63          	beq	a4,a5,8000c340 <rt_serial_control+0xf0>
8000c32c:	fe842783          	lw	a5,-24(s0)
8000c330:	0287c783          	lbu	a5,40(a5)
8000c334:	00078663          	beqz	a5,8000c340 <rt_serial_control+0xf0>
                {
                    /*can not change buffer size*/
                    return RT_EBUSY;
8000c338:	00700793          	li	a5,7
8000c33c:	0700006f          	j	8000c3ac <rt_serial_control+0x15c>
                }
                /* set serial configure */
                serial->config = *pconfig;
8000c340:	fe842783          	lw	a5,-24(s0)
8000c344:	fe442703          	lw	a4,-28(s0)
8000c348:	00072683          	lw	a3,0(a4)
8000c34c:	04d7aa23          	sw	a3,84(a5)
8000c350:	00472703          	lw	a4,4(a4)
8000c354:	04e7ac23          	sw	a4,88(a5)
                if (serial->parent.ref_count)
8000c358:	fe842783          	lw	a5,-24(s0)
8000c35c:	0287c783          	lbu	a5,40(a5)
8000c360:	04078263          	beqz	a5,8000c3a4 <rt_serial_control+0x154>
                {
                    /* serial device has been opened, to configure it */
                    serial->ops->configure(serial, (struct serial_configure *) args);
8000c364:	fe842783          	lw	a5,-24(s0)
8000c368:	0507a783          	lw	a5,80(a5)
8000c36c:	0007a783          	lw	a5,0(a5)
8000c370:	fd442583          	lw	a1,-44(s0)
8000c374:	fe842503          	lw	a0,-24(s0)
8000c378:	000780e7          	jalr	a5
                }
            }

            break;
8000c37c:	0280006f          	j	8000c3a4 <rt_serial_control+0x154>
            }
            break;
#endif /* RT_USING_POSIX_STDIO */
        default :
            /* control device */
            ret = serial->ops->control(serial, cmd, args);
8000c380:	fe842783          	lw	a5,-24(s0)
8000c384:	0507a783          	lw	a5,80(a5)
8000c388:	0047a783          	lw	a5,4(a5)
8000c38c:	fd442603          	lw	a2,-44(s0)
8000c390:	fd842583          	lw	a1,-40(s0)
8000c394:	fe842503          	lw	a0,-24(s0)
8000c398:	000780e7          	jalr	a5
8000c39c:	fea42623          	sw	a0,-20(s0)
            break;
8000c3a0:	0080006f          	j	8000c3a8 <rt_serial_control+0x158>
            break;
8000c3a4:	00000013          	nop
    }

    return ret;
8000c3a8:	fec42783          	lw	a5,-20(s0)
}
8000c3ac:	00078513          	mv	a0,a5
8000c3b0:	02c12083          	lw	ra,44(sp)
8000c3b4:	02812403          	lw	s0,40(sp)
8000c3b8:	03010113          	addi	sp,sp,48
8000c3bc:	00008067          	ret

8000c3c0 <rt_hw_serial_register>:
 */
rt_err_t rt_hw_serial_register(struct rt_serial_device *serial,
                               const char              *name,
                               rt_uint32_t              flag,
                               void                    *data)
{
8000c3c0:	fd010113          	addi	sp,sp,-48
8000c3c4:	02112623          	sw	ra,44(sp)
8000c3c8:	02812423          	sw	s0,40(sp)
8000c3cc:	03010413          	addi	s0,sp,48
8000c3d0:	fca42e23          	sw	a0,-36(s0)
8000c3d4:	fcb42c23          	sw	a1,-40(s0)
8000c3d8:	fcc42a23          	sw	a2,-44(s0)
8000c3dc:	fcd42823          	sw	a3,-48(s0)
    rt_err_t ret;
    struct rt_device *device;
    RT_ASSERT(serial != RT_NULL);

    device = &(serial->parent);
8000c3e0:	fdc42783          	lw	a5,-36(s0)
8000c3e4:	fef42623          	sw	a5,-20(s0)

    device->type        = RT_Device_Class_Char;
8000c3e8:	fec42783          	lw	a5,-20(s0)
8000c3ec:	0207a023          	sw	zero,32(a5)
    device->rx_indicate = RT_NULL;
8000c3f0:	fec42783          	lw	a5,-20(s0)
8000c3f4:	0207a623          	sw	zero,44(a5)
    device->tx_complete = RT_NULL;
8000c3f8:	fec42783          	lw	a5,-20(s0)
8000c3fc:	0207a823          	sw	zero,48(a5)

#ifdef RT_USING_DEVICE_OPS
    device->ops         = &serial_ops;
#else
    device->init        = rt_serial_init;
8000c400:	fec42783          	lw	a5,-20(s0)
8000c404:	fffff717          	auipc	a4,0xfffff
8000c408:	4c870713          	addi	a4,a4,1224 # 8000b8cc <rt_serial_init>
8000c40c:	02e7aa23          	sw	a4,52(a5)
    device->open        = rt_serial_open;
8000c410:	fec42783          	lw	a5,-20(s0)
8000c414:	fffff717          	auipc	a4,0xfffff
8000c418:	53470713          	addi	a4,a4,1332 # 8000b948 <rt_serial_open>
8000c41c:	02e7ac23          	sw	a4,56(a5)
    device->close       = rt_serial_close;
8000c420:	fec42783          	lw	a5,-20(s0)
8000c424:	00000717          	auipc	a4,0x0
8000c428:	a3470713          	addi	a4,a4,-1484 # 8000be58 <rt_serial_close>
8000c42c:	02e7ae23          	sw	a4,60(a5)
    device->read        = rt_serial_read;
8000c430:	fec42783          	lw	a5,-20(s0)
8000c434:	00000717          	auipc	a4,0x0
8000c438:	c9870713          	addi	a4,a4,-872 # 8000c0cc <rt_serial_read>
8000c43c:	04e7a023          	sw	a4,64(a5)
    device->write       = rt_serial_write;
8000c440:	fec42783          	lw	a5,-20(s0)
8000c444:	00000717          	auipc	a4,0x0
8000c448:	d4470713          	addi	a4,a4,-700 # 8000c188 <rt_serial_write>
8000c44c:	04e7a223          	sw	a4,68(a5)
    device->control     = rt_serial_control;
8000c450:	fec42783          	lw	a5,-20(s0)
8000c454:	00000717          	auipc	a4,0x0
8000c458:	dfc70713          	addi	a4,a4,-516 # 8000c250 <rt_serial_control>
8000c45c:	04e7a423          	sw	a4,72(a5)
#endif
    device->user_data   = data;
8000c460:	fec42783          	lw	a5,-20(s0)
8000c464:	fd042703          	lw	a4,-48(s0)
8000c468:	04e7a623          	sw	a4,76(a5)

    /* register a character device */
    ret = rt_device_register(device, name, flag);
8000c46c:	fd442783          	lw	a5,-44(s0)
8000c470:	01079793          	slli	a5,a5,0x10
8000c474:	0107d793          	srli	a5,a5,0x10
8000c478:	00078613          	mv	a2,a5
8000c47c:	fd842583          	lw	a1,-40(s0)
8000c480:	fec42503          	lw	a0,-20(s0)
8000c484:	400060ef          	jal	ra,80012884 <rt_device_register>
8000c488:	fea42423          	sw	a0,-24(s0)
#ifdef RT_USING_POSIX_STDIO
    /* set fops */
    device->fops        = &_serial_fops;
#endif

    return ret;
8000c48c:	fe842783          	lw	a5,-24(s0)
}
8000c490:	00078513          	mv	a0,a5
8000c494:	02c12083          	lw	ra,44(sp)
8000c498:	02812403          	lw	s0,40(sp)
8000c49c:	03010113          	addi	sp,sp,48
8000c4a0:	00008067          	ret

8000c4a4 <rt_hw_serial_isr>:

/* ISR for serial interrupt */
void rt_hw_serial_isr(struct rt_serial_device *serial, int event)
{
8000c4a4:	fb010113          	addi	sp,sp,-80
8000c4a8:	04112623          	sw	ra,76(sp)
8000c4ac:	04812423          	sw	s0,72(sp)
8000c4b0:	05010413          	addi	s0,sp,80
8000c4b4:	faa42e23          	sw	a0,-68(s0)
8000c4b8:	fab42c23          	sw	a1,-72(s0)
    switch (event & 0xff)
8000c4bc:	fb842783          	lw	a5,-72(s0)
8000c4c0:	0ff7f793          	zext.b	a5,a5
8000c4c4:	00400713          	li	a4,4
8000c4c8:	20e78e63          	beq	a5,a4,8000c6e4 <rt_hw_serial_isr+0x240>
8000c4cc:	00400713          	li	a4,4
8000c4d0:	38f74c63          	blt	a4,a5,8000c868 <rt_hw_serial_isr+0x3c4>
8000c4d4:	00300713          	li	a4,3
8000c4d8:	2ce78463          	beq	a5,a4,8000c7a0 <rt_hw_serial_isr+0x2fc>
8000c4dc:	00300713          	li	a4,3
8000c4e0:	38f74463          	blt	a4,a5,8000c868 <rt_hw_serial_isr+0x3c4>
8000c4e4:	00100713          	li	a4,1
8000c4e8:	00e78863          	beq	a5,a4,8000c4f8 <rt_hw_serial_isr+0x54>
8000c4ec:	00200713          	li	a4,2
8000c4f0:	1ce78c63          	beq	a5,a4,8000c6c8 <rt_hw_serial_isr+0x224>
            }
            break;
        }
#endif /* RT_SERIAL_USING_DMA */
    }
}
8000c4f4:	3740006f          	j	8000c868 <rt_hw_serial_isr+0x3c4>
            int ch = -1;
8000c4f8:	fff00793          	li	a5,-1
8000c4fc:	fcf42c23          	sw	a5,-40(s0)
            rx_fifo = (struct rt_serial_rx_fifo*)serial->serial_rx;
8000c500:	fbc42783          	lw	a5,-68(s0)
8000c504:	05c7a783          	lw	a5,92(a5)
8000c508:	fcf42a23          	sw	a5,-44(s0)
                ch = serial->ops->getc(serial);
8000c50c:	fbc42783          	lw	a5,-68(s0)
8000c510:	0507a783          	lw	a5,80(a5)
8000c514:	00c7a783          	lw	a5,12(a5)
8000c518:	fbc42503          	lw	a0,-68(s0)
8000c51c:	000780e7          	jalr	a5
8000c520:	fca42c23          	sw	a0,-40(s0)
                if (ch == -1) break;
8000c524:	fd842703          	lw	a4,-40(s0)
8000c528:	fff00793          	li	a5,-1
8000c52c:	0ef70663          	beq	a4,a5,8000c618 <rt_hw_serial_isr+0x174>
                level = rt_hw_interrupt_disable();
8000c530:	b71f30ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000c534:	fca42823          	sw	a0,-48(s0)
                rx_fifo->buffer[rx_fifo->put_index] = ch;
8000c538:	fd442783          	lw	a5,-44(s0)
8000c53c:	0007a783          	lw	a5,0(a5)
8000c540:	fd442703          	lw	a4,-44(s0)
8000c544:	00475703          	lhu	a4,4(a4)
8000c548:	00e787b3          	add	a5,a5,a4
8000c54c:	fd842703          	lw	a4,-40(s0)
8000c550:	0ff77713          	zext.b	a4,a4
8000c554:	00e78023          	sb	a4,0(a5)
                rx_fifo->put_index += 1;
8000c558:	fd442783          	lw	a5,-44(s0)
8000c55c:	0047d783          	lhu	a5,4(a5)
8000c560:	00178793          	addi	a5,a5,1
8000c564:	01079713          	slli	a4,a5,0x10
8000c568:	01075713          	srli	a4,a4,0x10
8000c56c:	fd442783          	lw	a5,-44(s0)
8000c570:	00e79223          	sh	a4,4(a5)
                if (rx_fifo->put_index >= serial->config.bufsz) rx_fifo->put_index = 0;
8000c574:	fd442783          	lw	a5,-44(s0)
8000c578:	0047d703          	lhu	a4,4(a5)
8000c57c:	fbc42783          	lw	a5,-68(s0)
8000c580:	0587a783          	lw	a5,88(a5)
8000c584:	00a7d793          	srli	a5,a5,0xa
8000c588:	fff7f793          	andi	a5,a5,-1
8000c58c:	01079793          	slli	a5,a5,0x10
8000c590:	0107d793          	srli	a5,a5,0x10
8000c594:	00f76663          	bltu	a4,a5,8000c5a0 <rt_hw_serial_isr+0xfc>
8000c598:	fd442783          	lw	a5,-44(s0)
8000c59c:	00079223          	sh	zero,4(a5)
                if (rx_fifo->put_index == rx_fifo->get_index)
8000c5a0:	fd442783          	lw	a5,-44(s0)
8000c5a4:	0047d703          	lhu	a4,4(a5)
8000c5a8:	fd442783          	lw	a5,-44(s0)
8000c5ac:	0067d783          	lhu	a5,6(a5)
8000c5b0:	04f71e63          	bne	a4,a5,8000c60c <rt_hw_serial_isr+0x168>
                    rx_fifo->get_index += 1;
8000c5b4:	fd442783          	lw	a5,-44(s0)
8000c5b8:	0067d783          	lhu	a5,6(a5)
8000c5bc:	00178793          	addi	a5,a5,1
8000c5c0:	01079713          	slli	a4,a5,0x10
8000c5c4:	01075713          	srli	a4,a4,0x10
8000c5c8:	fd442783          	lw	a5,-44(s0)
8000c5cc:	00e79323          	sh	a4,6(a5)
                    rx_fifo->is_full = RT_TRUE;
8000c5d0:	fd442783          	lw	a5,-44(s0)
8000c5d4:	00100713          	li	a4,1
8000c5d8:	00e7a423          	sw	a4,8(a5)
                    if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
8000c5dc:	fd442783          	lw	a5,-44(s0)
8000c5e0:	0067d703          	lhu	a4,6(a5)
8000c5e4:	fbc42783          	lw	a5,-68(s0)
8000c5e8:	0587a783          	lw	a5,88(a5)
8000c5ec:	00a7d793          	srli	a5,a5,0xa
8000c5f0:	fff7f793          	andi	a5,a5,-1
8000c5f4:	01079793          	slli	a5,a5,0x10
8000c5f8:	0107d793          	srli	a5,a5,0x10
8000c5fc:	00f76663          	bltu	a4,a5,8000c608 <rt_hw_serial_isr+0x164>
8000c600:	fd442783          	lw	a5,-44(s0)
8000c604:	00079323          	sh	zero,6(a5)
                    _serial_check_buffer_size();
8000c608:	be5fe0ef          	jal	ra,8000b1ec <_serial_check_buffer_size>
                rt_hw_interrupt_enable(level);
8000c60c:	fd042503          	lw	a0,-48(s0)
8000c610:	a99f30ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                ch = serial->ops->getc(serial);
8000c614:	ef9ff06f          	j	8000c50c <rt_hw_serial_isr+0x68>
                if (ch == -1) break;
8000c618:	00000013          	nop
            if (serial->parent.rx_indicate != RT_NULL)
8000c61c:	fbc42783          	lw	a5,-68(s0)
8000c620:	02c7a783          	lw	a5,44(a5)
8000c624:	22078863          	beqz	a5,8000c854 <rt_hw_serial_isr+0x3b0>
                level = rt_hw_interrupt_disable();
8000c628:	a79f30ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000c62c:	fca42823          	sw	a0,-48(s0)
                rx_length = (rx_fifo->put_index >= rx_fifo->get_index)? (rx_fifo->put_index - rx_fifo->get_index):
8000c630:	fd442783          	lw	a5,-44(s0)
8000c634:	0047d703          	lhu	a4,4(a5)
8000c638:	fd442783          	lw	a5,-44(s0)
8000c63c:	0067d783          	lhu	a5,6(a5)
8000c640:	02f76063          	bltu	a4,a5,8000c660 <rt_hw_serial_isr+0x1bc>
8000c644:	fd442783          	lw	a5,-44(s0)
8000c648:	0047d783          	lhu	a5,4(a5)
8000c64c:	00078713          	mv	a4,a5
8000c650:	fd442783          	lw	a5,-44(s0)
8000c654:	0067d783          	lhu	a5,6(a5)
8000c658:	40f707b3          	sub	a5,a4,a5
8000c65c:	03c0006f          	j	8000c698 <rt_hw_serial_isr+0x1f4>
                    (serial->config.bufsz - (rx_fifo->get_index - rx_fifo->put_index));
8000c660:	fbc42783          	lw	a5,-68(s0)
8000c664:	0587a783          	lw	a5,88(a5)
8000c668:	00a7d793          	srli	a5,a5,0xa
8000c66c:	fff7f793          	andi	a5,a5,-1
8000c670:	01079793          	slli	a5,a5,0x10
8000c674:	0107d793          	srli	a5,a5,0x10
8000c678:	00078713          	mv	a4,a5
8000c67c:	fd442783          	lw	a5,-44(s0)
8000c680:	0067d783          	lhu	a5,6(a5)
8000c684:	00078693          	mv	a3,a5
8000c688:	fd442783          	lw	a5,-44(s0)
8000c68c:	0047d783          	lhu	a5,4(a5)
8000c690:	40f687b3          	sub	a5,a3,a5
8000c694:	40f707b3          	sub	a5,a4,a5
                rx_length = (rx_fifo->put_index >= rx_fifo->get_index)? (rx_fifo->put_index - rx_fifo->get_index):
8000c698:	fcf42623          	sw	a5,-52(s0)
                rt_hw_interrupt_enable(level);
8000c69c:	fd042503          	lw	a0,-48(s0)
8000c6a0:	a09f30ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                if (rx_length)
8000c6a4:	fcc42783          	lw	a5,-52(s0)
8000c6a8:	1a078663          	beqz	a5,8000c854 <rt_hw_serial_isr+0x3b0>
                    serial->parent.rx_indicate(&serial->parent, rx_length);
8000c6ac:	fbc42783          	lw	a5,-68(s0)
8000c6b0:	02c7a783          	lw	a5,44(a5)
8000c6b4:	fbc42703          	lw	a4,-68(s0)
8000c6b8:	fcc42583          	lw	a1,-52(s0)
8000c6bc:	00070513          	mv	a0,a4
8000c6c0:	000780e7          	jalr	a5
            break;
8000c6c4:	1900006f          	j	8000c854 <rt_hw_serial_isr+0x3b0>
            tx_fifo = (struct rt_serial_tx_fifo*)serial->serial_tx;
8000c6c8:	fbc42783          	lw	a5,-68(s0)
8000c6cc:	0607a783          	lw	a5,96(a5)
8000c6d0:	fcf42e23          	sw	a5,-36(s0)
            rt_completion_done(&(tx_fifo->completion));
8000c6d4:	fdc42783          	lw	a5,-36(s0)
8000c6d8:	00078513          	mv	a0,a5
8000c6dc:	a59fd0ef          	jal	ra,8000a134 <rt_completion_done>
            break;
8000c6e0:	1880006f          	j	8000c868 <rt_hw_serial_isr+0x3c4>
            tx_dma = (struct rt_serial_tx_dma*) serial->serial_tx;
8000c6e4:	fbc42783          	lw	a5,-68(s0)
8000c6e8:	0607a783          	lw	a5,96(a5)
8000c6ec:	fef42623          	sw	a5,-20(s0)
            rt_data_queue_pop(&(tx_dma->data_queue), &last_data_ptr, &data_size, 0);
8000c6f0:	fec42783          	lw	a5,-20(s0)
8000c6f4:	00478793          	addi	a5,a5,4
8000c6f8:	fc440613          	addi	a2,s0,-60
8000c6fc:	fc040713          	addi	a4,s0,-64
8000c700:	00000693          	li	a3,0
8000c704:	00070593          	mv	a1,a4
8000c708:	00078513          	mv	a0,a5
8000c70c:	fddfd0ef          	jal	ra,8000a6e8 <rt_data_queue_pop>
            if (rt_data_queue_peek(&(tx_dma->data_queue), &data_ptr, &data_size) == RT_EOK)
8000c710:	fec42783          	lw	a5,-20(s0)
8000c714:	00478793          	addi	a5,a5,4
8000c718:	fc440693          	addi	a3,s0,-60
8000c71c:	fc840713          	addi	a4,s0,-56
8000c720:	00068613          	mv	a2,a3
8000c724:	00070593          	mv	a1,a4
8000c728:	00078513          	mv	a0,a5
8000c72c:	b1cfe0ef          	jal	ra,8000aa48 <rt_data_queue_peek>
8000c730:	00050793          	mv	a5,a0
8000c734:	02079c63          	bnez	a5,8000c76c <rt_hw_serial_isr+0x2c8>
                tx_dma->activated = RT_TRUE;
8000c738:	fec42783          	lw	a5,-20(s0)
8000c73c:	00100713          	li	a4,1
8000c740:	00e7a023          	sw	a4,0(a5)
                serial->ops->dma_transmit(serial, (rt_uint8_t *)data_ptr, data_size, RT_SERIAL_DMA_TX);
8000c744:	fbc42783          	lw	a5,-68(s0)
8000c748:	0507a783          	lw	a5,80(a5)
8000c74c:	0107a783          	lw	a5,16(a5)
8000c750:	fc842703          	lw	a4,-56(s0)
8000c754:	fc442603          	lw	a2,-60(s0)
8000c758:	00200693          	li	a3,2
8000c75c:	00070593          	mv	a1,a4
8000c760:	fbc42503          	lw	a0,-68(s0)
8000c764:	000780e7          	jalr	a5
8000c768:	00c0006f          	j	8000c774 <rt_hw_serial_isr+0x2d0>
                tx_dma->activated = RT_FALSE;
8000c76c:	fec42783          	lw	a5,-20(s0)
8000c770:	0007a023          	sw	zero,0(a5)
            if (serial->parent.tx_complete != RT_NULL)
8000c774:	fbc42783          	lw	a5,-68(s0)
8000c778:	0307a783          	lw	a5,48(a5)
8000c77c:	0e078063          	beqz	a5,8000c85c <rt_hw_serial_isr+0x3b8>
                serial->parent.tx_complete(&serial->parent, (void*)last_data_ptr);
8000c780:	fbc42783          	lw	a5,-68(s0)
8000c784:	0307a783          	lw	a5,48(a5)
8000c788:	fbc42703          	lw	a4,-68(s0)
8000c78c:	fc042683          	lw	a3,-64(s0)
8000c790:	00068593          	mv	a1,a3
8000c794:	00070513          	mv	a0,a4
8000c798:	000780e7          	jalr	a5
            break;
8000c79c:	0c00006f          	j	8000c85c <rt_hw_serial_isr+0x3b8>
            length = (event & (~0xff)) >> 8;
8000c7a0:	fb842783          	lw	a5,-72(s0)
8000c7a4:	4087d793          	srai	a5,a5,0x8
8000c7a8:	fef42423          	sw	a5,-24(s0)
            if (serial->config.bufsz == 0)
8000c7ac:	fbc42783          	lw	a5,-68(s0)
8000c7b0:	0587a703          	lw	a4,88(a5)
8000c7b4:	040007b7          	lui	a5,0x4000
8000c7b8:	c0078793          	addi	a5,a5,-1024 # 3fffc00 <__STACKSIZE__+0x3ffbc00>
8000c7bc:	00f777b3          	and	a5,a4,a5
8000c7c0:	02079c63          	bnez	a5,8000c7f8 <rt_hw_serial_isr+0x354>
                rx_dma = (struct rt_serial_rx_dma*) serial->serial_rx;
8000c7c4:	fbc42783          	lw	a5,-68(s0)
8000c7c8:	05c7a783          	lw	a5,92(a5)
8000c7cc:	fef42023          	sw	a5,-32(s0)
                serial->parent.rx_indicate(&(serial->parent), length);
8000c7d0:	fbc42783          	lw	a5,-68(s0)
8000c7d4:	02c7a783          	lw	a5,44(a5)
8000c7d8:	fbc42703          	lw	a4,-68(s0)
8000c7dc:	fe842683          	lw	a3,-24(s0)
8000c7e0:	00068593          	mv	a1,a3
8000c7e4:	00070513          	mv	a0,a4
8000c7e8:	000780e7          	jalr	a5
                rx_dma->activated = RT_FALSE;
8000c7ec:	fe042783          	lw	a5,-32(s0)
8000c7f0:	0007a023          	sw	zero,0(a5)
            break;
8000c7f4:	0700006f          	j	8000c864 <rt_hw_serial_isr+0x3c0>
                level = rt_hw_interrupt_disable();
8000c7f8:	8a9f30ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000c7fc:	fea42223          	sw	a0,-28(s0)
                rt_dma_recv_update_put_index(serial, length);
8000c800:	fe842783          	lw	a5,-24(s0)
8000c804:	00078593          	mv	a1,a5
8000c808:	fbc42503          	lw	a0,-68(s0)
8000c80c:	bf5fe0ef          	jal	ra,8000b400 <rt_dma_recv_update_put_index>
                length = rt_dma_calc_recved_len(serial);
8000c810:	fbc42503          	lw	a0,-68(s0)
8000c814:	aedfe0ef          	jal	ra,8000b300 <rt_dma_calc_recved_len>
8000c818:	00050793          	mv	a5,a0
8000c81c:	fef42423          	sw	a5,-24(s0)
                rt_hw_interrupt_enable(level);
8000c820:	fe442503          	lw	a0,-28(s0)
8000c824:	885f30ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                if (serial->parent.rx_indicate != RT_NULL)
8000c828:	fbc42783          	lw	a5,-68(s0)
8000c82c:	02c7a783          	lw	a5,44(a5)
8000c830:	02078a63          	beqz	a5,8000c864 <rt_hw_serial_isr+0x3c0>
                    serial->parent.rx_indicate(&(serial->parent), length);
8000c834:	fbc42783          	lw	a5,-68(s0)
8000c838:	02c7a783          	lw	a5,44(a5)
8000c83c:	fbc42703          	lw	a4,-68(s0)
8000c840:	fe842683          	lw	a3,-24(s0)
8000c844:	00068593          	mv	a1,a3
8000c848:	00070513          	mv	a0,a4
8000c84c:	000780e7          	jalr	a5
            break;
8000c850:	0140006f          	j	8000c864 <rt_hw_serial_isr+0x3c0>
            break;
8000c854:	00000013          	nop
8000c858:	0100006f          	j	8000c868 <rt_hw_serial_isr+0x3c4>
            break;
8000c85c:	00000013          	nop
8000c860:	0080006f          	j	8000c868 <rt_hw_serial_isr+0x3c4>
            break;
8000c864:	00000013          	nop
}
8000c868:	00000013          	nop
8000c86c:	04c12083          	lw	ra,76(sp)
8000c870:	04812403          	lw	s0,72(sp)
8000c874:	05010113          	addi	sp,sp,80
8000c878:	00008067          	ret

8000c87c <rt_list_isempty>:
    rt_list_t *node, *list;
    rt_list_t **array;
    int nr;

    arg->nr_out = 0;

8000c87c:	fe010113          	addi	sp,sp,-32
8000c880:	00812e23          	sw	s0,28(sp)
8000c884:	02010413          	addi	s0,sp,32
8000c888:	fea42623          	sw	a0,-20(s0)
    if (!arg->nr || !arg->type)
8000c88c:	fec42783          	lw	a5,-20(s0)
8000c890:	0007a783          	lw	a5,0(a5)
8000c894:	fec42703          	lw	a4,-20(s0)
8000c898:	40f707b3          	sub	a5,a4,a5
8000c89c:	0017b793          	seqz	a5,a5
8000c8a0:	0ff7f793          	zext.b	a5,a5
    {
8000c8a4:	00078513          	mv	a0,a5
8000c8a8:	01c12403          	lw	s0,28(sp)
8000c8ac:	02010113          	addi	sp,sp,32
8000c8b0:	00008067          	ret

8000c8b4 <rt_list_len>:
    }

    list = arg->list;

    if (!current) /* find first */
    {
8000c8b4:	fd010113          	addi	sp,sp,-48
8000c8b8:	02812623          	sw	s0,44(sp)
8000c8bc:	03010413          	addi	s0,sp,48
8000c8c0:	fca42e23          	sw	a0,-36(s0)
        node = list;
8000c8c4:	fe042623          	sw	zero,-20(s0)
        first_flag = 1;
8000c8c8:	fdc42783          	lw	a5,-36(s0)
8000c8cc:	fef42423          	sw	a5,-24(s0)
    }
8000c8d0:	01c0006f          	j	8000c8ec <rt_list_len+0x38>
    else
    {
8000c8d4:	fe842783          	lw	a5,-24(s0)
8000c8d8:	0007a783          	lw	a5,0(a5)
8000c8dc:	fef42423          	sw	a5,-24(s0)
        node = current;
8000c8e0:	fec42783          	lw	a5,-20(s0)
8000c8e4:	00178793          	addi	a5,a5,1
8000c8e8:	fef42623          	sw	a5,-20(s0)
    }
8000c8ec:	fe842783          	lw	a5,-24(s0)
8000c8f0:	0007a783          	lw	a5,0(a5)
8000c8f4:	fdc42703          	lw	a4,-36(s0)
8000c8f8:	fcf71ee3          	bne	a4,a5,8000c8d4 <rt_list_len+0x20>
    }

    level = rt_hw_interrupt_disable();
8000c8fc:	fec42783          	lw	a5,-20(s0)

8000c900:	00078513          	mv	a0,a5
8000c904:	02c12403          	lw	s0,44(sp)
8000c908:	03010113          	addi	sp,sp,48
8000c90c:	00008067          	ret

8000c910 <clear>:
{
8000c910:	ff010113          	addi	sp,sp,-16
8000c914:	00112623          	sw	ra,12(sp)
8000c918:	00812423          	sw	s0,8(sp)
8000c91c:	01010413          	addi	s0,sp,16
    rt_kprintf("\x1b[2J\x1b[H");
8000c920:	00019517          	auipc	a0,0x19
8000c924:	6b850513          	addi	a0,a0,1720 # 80025fd8 <raise+0x3e4>
8000c928:	101080ef          	jal	ra,80015228 <rt_kprintf>
    return 0;
8000c92c:	00000793          	li	a5,0
}
8000c930:	00078513          	mv	a0,a5
8000c934:	00c12083          	lw	ra,12(sp)
8000c938:	00812403          	lw	s0,8(sp)
8000c93c:	01010113          	addi	sp,sp,16
8000c940:	00008067          	ret

8000c944 <version>:
{
8000c944:	ff010113          	addi	sp,sp,-16
8000c948:	00112623          	sw	ra,12(sp)
8000c94c:	00812423          	sw	s0,8(sp)
8000c950:	01010413          	addi	s0,sp,16
    rt_show_version();
8000c954:	179070ef          	jal	ra,800142cc <rt_show_version>
    return 0;
8000c958:	00000793          	li	a5,0
}
8000c95c:	00078513          	mv	a0,a5
8000c960:	00c12083          	lw	ra,12(sp)
8000c964:	00812403          	lw	s0,8(sp)
8000c968:	01010113          	addi	sp,sp,16
8000c96c:	00008067          	ret

8000c970 <object_split>:
{
8000c970:	fe010113          	addi	sp,sp,-32
8000c974:	00112e23          	sw	ra,28(sp)
8000c978:	00812c23          	sw	s0,24(sp)
8000c97c:	02010413          	addi	s0,sp,32
8000c980:	fea42623          	sw	a0,-20(s0)
    while (len--) rt_kprintf("-");
8000c984:	0100006f          	j	8000c994 <object_split+0x24>
8000c988:	00019517          	auipc	a0,0x19
8000c98c:	65850513          	addi	a0,a0,1624 # 80025fe0 <raise+0x3ec>
8000c990:	099080ef          	jal	ra,80015228 <rt_kprintf>
8000c994:	fec42783          	lw	a5,-20(s0)
8000c998:	fff78713          	addi	a4,a5,-1
8000c99c:	fee42623          	sw	a4,-20(s0)
8000c9a0:	fe0794e3          	bnez	a5,8000c988 <object_split+0x18>
}
8000c9a4:	00000013          	nop
8000c9a8:	00000013          	nop
8000c9ac:	01c12083          	lw	ra,28(sp)
8000c9b0:	01812403          	lw	s0,24(sp)
8000c9b4:	02010113          	addi	sp,sp,32
8000c9b8:	00008067          	ret

8000c9bc <list_find_init>:
{
8000c9bc:	fd010113          	addi	sp,sp,-48
8000c9c0:	02112623          	sw	ra,44(sp)
8000c9c4:	02812423          	sw	s0,40(sp)
8000c9c8:	03010413          	addi	s0,sp,48
8000c9cc:	fca42e23          	sw	a0,-36(s0)
8000c9d0:	00058793          	mv	a5,a1
8000c9d4:	fcc42a23          	sw	a2,-44(s0)
8000c9d8:	fcd42823          	sw	a3,-48(s0)
8000c9dc:	fcf40da3          	sb	a5,-37(s0)
    info = rt_object_get_information((enum rt_object_class_type)type);
8000c9e0:	fdb44783          	lbu	a5,-37(s0)
8000c9e4:	00078513          	mv	a0,a5
8000c9e8:	589090ef          	jal	ra,80016770 <rt_object_get_information>
8000c9ec:	fea42623          	sw	a0,-20(s0)
    list = &info->object_list;
8000c9f0:	fec42783          	lw	a5,-20(s0)
8000c9f4:	00478793          	addi	a5,a5,4
8000c9f8:	fef42423          	sw	a5,-24(s0)
    p->list = list;
8000c9fc:	fdc42783          	lw	a5,-36(s0)
8000ca00:	fe842703          	lw	a4,-24(s0)
8000ca04:	00e7a023          	sw	a4,0(a5)
    p->type = type;
8000ca08:	fdc42783          	lw	a5,-36(s0)
8000ca0c:	fdb44703          	lbu	a4,-37(s0)
8000ca10:	00e78423          	sb	a4,8(a5)
    p->array = array;
8000ca14:	fdc42783          	lw	a5,-36(s0)
8000ca18:	fd442703          	lw	a4,-44(s0)
8000ca1c:	00e7a223          	sw	a4,4(a5)
    p->nr = nr;
8000ca20:	fdc42783          	lw	a5,-36(s0)
8000ca24:	fd042703          	lw	a4,-48(s0)
8000ca28:	00e7a623          	sw	a4,12(a5)
    p->nr_out = 0;
8000ca2c:	fdc42783          	lw	a5,-36(s0)
8000ca30:	0007a823          	sw	zero,16(a5)
}
8000ca34:	00000013          	nop
8000ca38:	02c12083          	lw	ra,44(sp)
8000ca3c:	02812403          	lw	s0,40(sp)
8000ca40:	03010113          	addi	sp,sp,48
8000ca44:	00008067          	ret

8000ca48 <list_get_next>:
{
8000ca48:	fc010113          	addi	sp,sp,-64
8000ca4c:	02112e23          	sw	ra,60(sp)
8000ca50:	02812c23          	sw	s0,56(sp)
8000ca54:	04010413          	addi	s0,sp,64
8000ca58:	fca42623          	sw	a0,-52(s0)
8000ca5c:	fcb42423          	sw	a1,-56(s0)
    int first_flag = 0;
8000ca60:	fe042623          	sw	zero,-20(s0)
    arg->nr_out = 0;
8000ca64:	fc842783          	lw	a5,-56(s0)
8000ca68:	0007a823          	sw	zero,16(a5)
    if (!arg->nr || !arg->type)
8000ca6c:	fc842783          	lw	a5,-56(s0)
8000ca70:	00c7a783          	lw	a5,12(a5)
8000ca74:	00078863          	beqz	a5,8000ca84 <list_get_next+0x3c>
8000ca78:	fc842783          	lw	a5,-56(s0)
8000ca7c:	0087c783          	lbu	a5,8(a5)
8000ca80:	00079663          	bnez	a5,8000ca8c <list_get_next+0x44>
        return (rt_list_t *)RT_NULL;
8000ca84:	00000793          	li	a5,0
8000ca88:	0f80006f          	j	8000cb80 <list_get_next+0x138>
    list = arg->list;
8000ca8c:	fc842783          	lw	a5,-56(s0)
8000ca90:	0007a783          	lw	a5,0(a5)
8000ca94:	fcf42e23          	sw	a5,-36(s0)
    if (!current) /* find first */
8000ca98:	fcc42783          	lw	a5,-52(s0)
8000ca9c:	00079c63          	bnez	a5,8000cab4 <list_get_next+0x6c>
        node = list;
8000caa0:	fdc42783          	lw	a5,-36(s0)
8000caa4:	fef42423          	sw	a5,-24(s0)
        first_flag = 1;
8000caa8:	00100793          	li	a5,1
8000caac:	fef42623          	sw	a5,-20(s0)
8000cab0:	00c0006f          	j	8000cabc <list_get_next+0x74>
        node = current;
8000cab4:	fcc42783          	lw	a5,-52(s0)
8000cab8:	fef42423          	sw	a5,-24(s0)
    level = rt_hw_interrupt_disable();
8000cabc:	de4f30ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000cac0:	fca42c23          	sw	a0,-40(s0)
    if (!first_flag)
8000cac4:	fec42783          	lw	a5,-20(s0)
8000cac8:	02079c63          	bnez	a5,8000cb00 <list_get_next+0xb8>
    {
        struct rt_object *obj;
        /* The node in the list? */
        obj = rt_list_entry(node, struct rt_object, list);
8000cacc:	fe842783          	lw	a5,-24(s0)
8000cad0:	fe878793          	addi	a5,a5,-24
8000cad4:	fcf42a23          	sw	a5,-44(s0)
        if ((obj->type & ~RT_Object_Class_Static) != arg->type)
8000cad8:	fd442783          	lw	a5,-44(s0)
8000cadc:	0147c783          	lbu	a5,20(a5)
8000cae0:	f7f7f793          	andi	a5,a5,-129
8000cae4:	fc842703          	lw	a4,-56(s0)
8000cae8:	00874703          	lbu	a4,8(a4)
8000caec:	00e78a63          	beq	a5,a4,8000cb00 <list_get_next+0xb8>
        {
            rt_hw_interrupt_enable(level);
8000caf0:	fd842503          	lw	a0,-40(s0)
8000caf4:	db4f30ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
            return (rt_list_t *)RT_NULL;
8000caf8:	00000793          	li	a5,0
8000cafc:	0840006f          	j	8000cb80 <list_get_next+0x138>
        }
    }

    nr = 0;
8000cb00:	fe042023          	sw	zero,-32(s0)
    array = arg->array;
8000cb04:	fc842783          	lw	a5,-56(s0)
8000cb08:	0047a783          	lw	a5,4(a5)
8000cb0c:	fef42223          	sw	a5,-28(s0)
    while (1)
    {
        node = node->next;
8000cb10:	fe842783          	lw	a5,-24(s0)
8000cb14:	0007a783          	lw	a5,0(a5)
8000cb18:	fef42423          	sw	a5,-24(s0)

        if (node == list)
8000cb1c:	fe842703          	lw	a4,-24(s0)
8000cb20:	fdc42783          	lw	a5,-36(s0)
8000cb24:	00f71663          	bne	a4,a5,8000cb30 <list_get_next+0xe8>
        {
            node = (rt_list_t *)RT_NULL;
8000cb28:	fe042423          	sw	zero,-24(s0)
            break;
8000cb2c:	03c0006f          	j	8000cb68 <list_get_next+0x120>
        }
        nr++;
8000cb30:	fe042783          	lw	a5,-32(s0)
8000cb34:	00178793          	addi	a5,a5,1
8000cb38:	fef42023          	sw	a5,-32(s0)
        *array++ = node;
8000cb3c:	fe442783          	lw	a5,-28(s0)
8000cb40:	00478713          	addi	a4,a5,4
8000cb44:	fee42223          	sw	a4,-28(s0)
8000cb48:	fe842703          	lw	a4,-24(s0)
8000cb4c:	00e7a023          	sw	a4,0(a5)
        if (nr == arg->nr)
8000cb50:	fc842783          	lw	a5,-56(s0)
8000cb54:	00c7a783          	lw	a5,12(a5)
8000cb58:	fe042703          	lw	a4,-32(s0)
8000cb5c:	00f70463          	beq	a4,a5,8000cb64 <list_get_next+0x11c>
        node = node->next;
8000cb60:	fb1ff06f          	j	8000cb10 <list_get_next+0xc8>
        {
            break;
8000cb64:	00000013          	nop
        }
    }

    rt_hw_interrupt_enable(level);
8000cb68:	fd842503          	lw	a0,-40(s0)
8000cb6c:	d3cf30ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
    arg->nr_out = nr;
8000cb70:	fc842783          	lw	a5,-56(s0)
8000cb74:	fe042703          	lw	a4,-32(s0)
8000cb78:	00e7a823          	sw	a4,16(a5)
    return node;
8000cb7c:	fe842783          	lw	a5,-24(s0)
}
8000cb80:	00078513          	mv	a0,a5
8000cb84:	03c12083          	lw	ra,60(sp)
8000cb88:	03812403          	lw	s0,56(sp)
8000cb8c:	04010113          	addi	sp,sp,64
8000cb90:	00008067          	ret

8000cb94 <list_thread>:

long list_thread(void)
{
8000cb94:	ef010113          	addi	sp,sp,-272
8000cb98:	10112623          	sw	ra,268(sp)
8000cb9c:	10812423          	sw	s0,264(sp)
8000cba0:	10912223          	sw	s1,260(sp)
8000cba4:	11212023          	sw	s2,256(sp)
8000cba8:	0f312e23          	sw	s3,252(sp)
8000cbac:	0f412c23          	sw	s4,248(sp)
8000cbb0:	11010413          	addi	s0,sp,272
    rt_base_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
8000cbb4:	fc042e23          	sw	zero,-36(s0)
    const char *item_title = "thread";
8000cbb8:	00019797          	auipc	a5,0x19
8000cbbc:	42c78793          	addi	a5,a5,1068 # 80025fe4 <raise+0x3f0>
8000cbc0:	fcf42823          	sw	a5,-48(s0)
    int maxlen;

    list_find_init(&find_arg, RT_Object_Class_Thread, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
8000cbc4:	f8840713          	addi	a4,s0,-120
8000cbc8:	fa840793          	addi	a5,s0,-88
8000cbcc:	00800693          	li	a3,8
8000cbd0:	00070613          	mv	a2,a4
8000cbd4:	00100593          	li	a1,1
8000cbd8:	00078513          	mv	a0,a5
8000cbdc:	de1ff0ef          	jal	ra,8000c9bc <list_find_init>

    maxlen = RT_NAME_MAX;
8000cbe0:	01400793          	li	a5,20
8000cbe4:	fcf42623          	sw	a5,-52(s0)
#ifdef RT_USING_SMP
    rt_kprintf("%-*.s cpu bind pri  status      sp     stack size max used left tick  error\n", maxlen, item_title);
    object_split(maxlen);
    rt_kprintf(" --- ---- ---  ------- ---------- ----------  ------  ---------- ---\n");
#else
    rt_kprintf("%-*.s pri  status      sp     stack size max used left tick  error\n", maxlen, item_title);
8000cbe8:	fd042603          	lw	a2,-48(s0)
8000cbec:	fcc42583          	lw	a1,-52(s0)
8000cbf0:	00019517          	auipc	a0,0x19
8000cbf4:	3fc50513          	addi	a0,a0,1020 # 80025fec <raise+0x3f8>
8000cbf8:	630080ef          	jal	ra,80015228 <rt_kprintf>
    object_split(maxlen);
8000cbfc:	fcc42503          	lw	a0,-52(s0)
8000cc00:	d71ff0ef          	jal	ra,8000c970 <object_split>
    rt_kprintf(" ---  ------- ---------- ----------  ------  ---------- ---\n");
8000cc04:	00019517          	auipc	a0,0x19
8000cc08:	42c50513          	addi	a0,a0,1068 # 80026030 <raise+0x43c>
8000cc0c:	61c080ef          	jal	ra,80015228 <rt_kprintf>
#endif /*RT_USING_SMP*/

    do
    {
        next = list_get_next(next, &find_arg);
8000cc10:	fa840793          	addi	a5,s0,-88
8000cc14:	00078593          	mv	a1,a5
8000cc18:	fdc42503          	lw	a0,-36(s0)
8000cc1c:	e2dff0ef          	jal	ra,8000ca48 <list_get_next>
8000cc20:	fca42e23          	sw	a0,-36(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
8000cc24:	fc042c23          	sw	zero,-40(s0)
8000cc28:	1f40006f          	j	8000ce1c <list_thread+0x288>
            {
                struct rt_object *obj;
                struct rt_thread thread_info, *thread;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
8000cc2c:	fd842783          	lw	a5,-40(s0)
8000cc30:	00279793          	slli	a5,a5,0x2
8000cc34:	fe078793          	addi	a5,a5,-32
8000cc38:	008787b3          	add	a5,a5,s0
8000cc3c:	fa87a783          	lw	a5,-88(a5)
8000cc40:	fe878793          	addi	a5,a5,-24
8000cc44:	fcf42423          	sw	a5,-56(s0)
                level = rt_hw_interrupt_disable();
8000cc48:	c58f30ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000cc4c:	fca42223          	sw	a0,-60(s0)

                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
8000cc50:	fc842783          	lw	a5,-56(s0)
8000cc54:	0147c783          	lbu	a5,20(a5)
8000cc58:	f7f7f793          	andi	a5,a5,-129
8000cc5c:	fb044703          	lbu	a4,-80(s0)
8000cc60:	00e78863          	beq	a5,a4,8000cc70 <list_thread+0xdc>
                {
                    rt_hw_interrupt_enable(level);
8000cc64:	fc442503          	lw	a0,-60(s0)
8000cc68:	c40f30ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
8000cc6c:	1a40006f          	j	8000ce10 <list_thread+0x27c>
                    continue;
                }
                /* copy info */
                rt_memcpy(&thread_info, obj, sizeof thread_info);
8000cc70:	ef040793          	addi	a5,s0,-272
8000cc74:	09800613          	li	a2,152
8000cc78:	fc842583          	lw	a1,-56(s0)
8000cc7c:	00078513          	mv	a0,a5
8000cc80:	168070ef          	jal	ra,80013de8 <rt_memcpy>
                rt_hw_interrupt_enable(level);
8000cc84:	fc442503          	lw	a0,-60(s0)
8000cc88:	c20f30ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

                thread = (struct rt_thread *)obj;
8000cc8c:	fc842783          	lw	a5,-56(s0)
8000cc90:	fcf42023          	sw	a5,-64(s0)
                        rt_kprintf("%-*.*s %3d %3d %4d ", maxlen, RT_NAME_MAX, thread->name, thread->oncpu, thread->bind_cpu, thread->current_priority);
                    else
                        rt_kprintf("%-*.*s N/A %3d %4d ", maxlen, RT_NAME_MAX, thread->name, thread->bind_cpu, thread->current_priority);

#else
                    rt_kprintf("%-*.*s %3d ", maxlen, RT_NAME_MAX, thread->name, thread->current_priority);
8000cc94:	fc042683          	lw	a3,-64(s0)
8000cc98:	fc042783          	lw	a5,-64(s0)
8000cc9c:	0417c783          	lbu	a5,65(a5)
8000cca0:	00078713          	mv	a4,a5
8000cca4:	01400613          	li	a2,20
8000cca8:	fcc42583          	lw	a1,-52(s0)
8000ccac:	00019517          	auipc	a0,0x19
8000ccb0:	3c450513          	addi	a0,a0,964 # 80026070 <raise+0x47c>
8000ccb4:	574080ef          	jal	ra,80015228 <rt_kprintf>
#endif /*RT_USING_SMP*/
                    stat = (thread->stat & RT_THREAD_STAT_MASK);
8000ccb8:	fc042783          	lw	a5,-64(s0)
8000ccbc:	0407c783          	lbu	a5,64(a5)
8000ccc0:	0077f793          	andi	a5,a5,7
8000ccc4:	faf40fa3          	sb	a5,-65(s0)
                    if (stat == RT_THREAD_READY)        rt_kprintf(" ready  ");
8000ccc8:	fbf44703          	lbu	a4,-65(s0)
8000cccc:	00100793          	li	a5,1
8000ccd0:	00f71a63          	bne	a4,a5,8000cce4 <list_thread+0x150>
8000ccd4:	00019517          	auipc	a0,0x19
8000ccd8:	3a850513          	addi	a0,a0,936 # 8002607c <raise+0x488>
8000ccdc:	54c080ef          	jal	ra,80015228 <rt_kprintf>
8000cce0:	06c0006f          	j	8000cd4c <list_thread+0x1b8>
                    else if (stat == RT_THREAD_SUSPEND) rt_kprintf(" suspend");
8000cce4:	fbf44703          	lbu	a4,-65(s0)
8000cce8:	00200793          	li	a5,2
8000ccec:	00f71a63          	bne	a4,a5,8000cd00 <list_thread+0x16c>
8000ccf0:	00019517          	auipc	a0,0x19
8000ccf4:	39850513          	addi	a0,a0,920 # 80026088 <raise+0x494>
8000ccf8:	530080ef          	jal	ra,80015228 <rt_kprintf>
8000ccfc:	0500006f          	j	8000cd4c <list_thread+0x1b8>
                    else if (stat == RT_THREAD_INIT)    rt_kprintf(" init   ");
8000cd00:	fbf44783          	lbu	a5,-65(s0)
8000cd04:	00079a63          	bnez	a5,8000cd18 <list_thread+0x184>
8000cd08:	00019517          	auipc	a0,0x19
8000cd0c:	38c50513          	addi	a0,a0,908 # 80026094 <raise+0x4a0>
8000cd10:	518080ef          	jal	ra,80015228 <rt_kprintf>
8000cd14:	0380006f          	j	8000cd4c <list_thread+0x1b8>
                    else if (stat == RT_THREAD_CLOSE)   rt_kprintf(" close  ");
8000cd18:	fbf44703          	lbu	a4,-65(s0)
8000cd1c:	00400793          	li	a5,4
8000cd20:	00f71a63          	bne	a4,a5,8000cd34 <list_thread+0x1a0>
8000cd24:	00019517          	auipc	a0,0x19
8000cd28:	37c50513          	addi	a0,a0,892 # 800260a0 <raise+0x4ac>
8000cd2c:	4fc080ef          	jal	ra,80015228 <rt_kprintf>
8000cd30:	01c0006f          	j	8000cd4c <list_thread+0x1b8>
                    else if (stat == RT_THREAD_RUNNING) rt_kprintf(" running");
8000cd34:	fbf44703          	lbu	a4,-65(s0)
8000cd38:	00300793          	li	a5,3
8000cd3c:	00f71863          	bne	a4,a5,8000cd4c <list_thread+0x1b8>
8000cd40:	00019517          	auipc	a0,0x19
8000cd44:	36c50513          	addi	a0,a0,876 # 800260ac <raise+0x4b8>
8000cd48:	4e0080ef          	jal	ra,80015228 <rt_kprintf>
                               thread->stack_size,
                               ((rt_ubase_t)ptr - (rt_ubase_t)thread->stack_addr) * 100 / thread->stack_size,
                               thread->remaining_tick,
                               thread->error);
#else
                    ptr = (rt_uint8_t *)thread->stack_addr;
8000cd4c:	fc042783          	lw	a5,-64(s0)
8000cd50:	0347a783          	lw	a5,52(a5)
8000cd54:	fcf42a23          	sw	a5,-44(s0)
                    while (*ptr == '#') ptr ++;
8000cd58:	0100006f          	j	8000cd68 <list_thread+0x1d4>
8000cd5c:	fd442783          	lw	a5,-44(s0)
8000cd60:	00178793          	addi	a5,a5,1
8000cd64:	fcf42a23          	sw	a5,-44(s0)
8000cd68:	fd442783          	lw	a5,-44(s0)
8000cd6c:	0007c703          	lbu	a4,0(a5)
8000cd70:	02300793          	li	a5,35
8000cd74:	fef704e3          	beq	a4,a5,8000cd5c <list_thread+0x1c8>
                    rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %s\n",
                               thread->stack_size + ((rt_ubase_t)thread->stack_addr - (rt_ubase_t)thread->sp),
8000cd78:	fc042783          	lw	a5,-64(s0)
8000cd7c:	0387a703          	lw	a4,56(a5)
8000cd80:	fc042783          	lw	a5,-64(s0)
8000cd84:	0347a783          	lw	a5,52(a5)
8000cd88:	00078693          	mv	a3,a5
8000cd8c:	fc042783          	lw	a5,-64(s0)
8000cd90:	0287a783          	lw	a5,40(a5)
8000cd94:	40f687b3          	sub	a5,a3,a5
                    rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %s\n",
8000cd98:	00f704b3          	add	s1,a4,a5
8000cd9c:	fc042783          	lw	a5,-64(s0)
8000cda0:	0387a903          	lw	s2,56(a5)
                               thread->stack_size,
                               (thread->stack_size - ((rt_ubase_t) ptr - (rt_ubase_t) thread->stack_addr)) * 100
8000cda4:	fc042783          	lw	a5,-64(s0)
8000cda8:	0387a703          	lw	a4,56(a5)
8000cdac:	fc042783          	lw	a5,-64(s0)
8000cdb0:	0347a783          	lw	a5,52(a5)
8000cdb4:	00078693          	mv	a3,a5
8000cdb8:	fd442783          	lw	a5,-44(s0)
8000cdbc:	40f687b3          	sub	a5,a3,a5
8000cdc0:	00f70733          	add	a4,a4,a5
8000cdc4:	06400793          	li	a5,100
8000cdc8:	02f70733          	mul	a4,a4,a5
                               / thread->stack_size,
8000cdcc:	fc042783          	lw	a5,-64(s0)
8000cdd0:	0387a783          	lw	a5,56(a5)
                    rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %s\n",
8000cdd4:	02f759b3          	divu	s3,a4,a5
8000cdd8:	fc042783          	lw	a5,-64(s0)
8000cddc:	0547aa03          	lw	s4,84(a5)
8000cde0:	fc042783          	lw	a5,-64(s0)
8000cde4:	03c7a783          	lw	a5,60(a5)
8000cde8:	00078513          	mv	a0,a5
8000cdec:	565060ef          	jal	ra,80013b50 <rt_strerror>
8000cdf0:	00050793          	mv	a5,a0
8000cdf4:	000a0713          	mv	a4,s4
8000cdf8:	00098693          	mv	a3,s3
8000cdfc:	00090613          	mv	a2,s2
8000ce00:	00048593          	mv	a1,s1
8000ce04:	00019517          	auipc	a0,0x19
8000ce08:	2b450513          	addi	a0,a0,692 # 800260b8 <raise+0x4c4>
8000ce0c:	41c080ef          	jal	ra,80015228 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
8000ce10:	fd842783          	lw	a5,-40(s0)
8000ce14:	00178793          	addi	a5,a5,1
8000ce18:	fcf42c23          	sw	a5,-40(s0)
8000ce1c:	fb842783          	lw	a5,-72(s0)
8000ce20:	fd842703          	lw	a4,-40(s0)
8000ce24:	e0f744e3          	blt	a4,a5,8000cc2c <list_thread+0x98>
#endif
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
8000ce28:	fdc42783          	lw	a5,-36(s0)
8000ce2c:	de0792e3          	bnez	a5,8000cc10 <list_thread+0x7c>

    return 0;
8000ce30:	00000793          	li	a5,0
}
8000ce34:	00078513          	mv	a0,a5
8000ce38:	10c12083          	lw	ra,268(sp)
8000ce3c:	10812403          	lw	s0,264(sp)
8000ce40:	10412483          	lw	s1,260(sp)
8000ce44:	10012903          	lw	s2,256(sp)
8000ce48:	0fc12983          	lw	s3,252(sp)
8000ce4c:	0f812a03          	lw	s4,248(sp)
8000ce50:	11010113          	addi	sp,sp,272
8000ce54:	00008067          	ret

8000ce58 <show_wait_queue>:
MSH_CMD_EXPORT(list_thread, list thread);

static void show_wait_queue(struct rt_list_node *list)
{
8000ce58:	fd010113          	addi	sp,sp,-48
8000ce5c:	02112623          	sw	ra,44(sp)
8000ce60:	02812423          	sw	s0,40(sp)
8000ce64:	03010413          	addi	s0,sp,48
8000ce68:	fca42e23          	sw	a0,-36(s0)
    struct rt_thread *thread;
    struct rt_list_node *node;

    for (node = list->next; node != list; node = node->next)
8000ce6c:	fdc42783          	lw	a5,-36(s0)
8000ce70:	0007a783          	lw	a5,0(a5)
8000ce74:	fef42623          	sw	a5,-20(s0)
8000ce78:	0500006f          	j	8000cec8 <show_wait_queue+0x70>
    {
        thread = rt_list_entry(node, struct rt_thread, tlist);
8000ce7c:	fec42783          	lw	a5,-20(s0)
8000ce80:	fe078793          	addi	a5,a5,-32
8000ce84:	fef42423          	sw	a5,-24(s0)
        rt_kprintf("%.*s", RT_NAME_MAX, thread->name);
8000ce88:	fe842783          	lw	a5,-24(s0)
8000ce8c:	00078613          	mv	a2,a5
8000ce90:	01400593          	li	a1,20
8000ce94:	00019517          	auipc	a0,0x19
8000ce98:	24c50513          	addi	a0,a0,588 # 800260e0 <raise+0x4ec>
8000ce9c:	38c080ef          	jal	ra,80015228 <rt_kprintf>

        if (node->next != list)
8000cea0:	fec42783          	lw	a5,-20(s0)
8000cea4:	0007a783          	lw	a5,0(a5)
8000cea8:	fdc42703          	lw	a4,-36(s0)
8000ceac:	00f70863          	beq	a4,a5,8000cebc <show_wait_queue+0x64>
            rt_kprintf("/");
8000ceb0:	00019517          	auipc	a0,0x19
8000ceb4:	23850513          	addi	a0,a0,568 # 800260e8 <raise+0x4f4>
8000ceb8:	370080ef          	jal	ra,80015228 <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
8000cebc:	fec42783          	lw	a5,-20(s0)
8000cec0:	0007a783          	lw	a5,0(a5)
8000cec4:	fef42623          	sw	a5,-20(s0)
8000cec8:	fec42703          	lw	a4,-20(s0)
8000cecc:	fdc42783          	lw	a5,-36(s0)
8000ced0:	faf716e3          	bne	a4,a5,8000ce7c <show_wait_queue+0x24>
    }
}
8000ced4:	00000013          	nop
8000ced8:	00000013          	nop
8000cedc:	02c12083          	lw	ra,44(sp)
8000cee0:	02812403          	lw	s0,40(sp)
8000cee4:	03010113          	addi	sp,sp,48
8000cee8:	00008067          	ret

8000ceec <list_sem>:

#ifdef RT_USING_SEMAPHORE
long list_sem(void)
{
8000ceec:	fa010113          	addi	sp,sp,-96
8000cef0:	04112e23          	sw	ra,92(sp)
8000cef4:	04812c23          	sw	s0,88(sp)
8000cef8:	04912a23          	sw	s1,84(sp)
8000cefc:	05212823          	sw	s2,80(sp)
8000cf00:	06010413          	addi	s0,sp,96
    rt_base_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
8000cf04:	fe042623          	sw	zero,-20(s0)

    int maxlen;
    const char *item_title = "semaphore";
8000cf08:	00019797          	auipc	a5,0x19
8000cf0c:	1e478793          	addi	a5,a5,484 # 800260ec <raise+0x4f8>
8000cf10:	fef42223          	sw	a5,-28(s0)

    list_find_init(&find_arg, RT_Object_Class_Semaphore, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
8000cf14:	fa040713          	addi	a4,s0,-96
8000cf18:	fc040793          	addi	a5,s0,-64
8000cf1c:	00800693          	li	a3,8
8000cf20:	00070613          	mv	a2,a4
8000cf24:	00200593          	li	a1,2
8000cf28:	00078513          	mv	a0,a5
8000cf2c:	a91ff0ef          	jal	ra,8000c9bc <list_find_init>

    maxlen = RT_NAME_MAX;
8000cf30:	01400793          	li	a5,20
8000cf34:	fef42023          	sw	a5,-32(s0)

    rt_kprintf("%-*.s v   suspend thread\n", maxlen, item_title);
8000cf38:	fe442603          	lw	a2,-28(s0)
8000cf3c:	fe042583          	lw	a1,-32(s0)
8000cf40:	00019517          	auipc	a0,0x19
8000cf44:	1b850513          	addi	a0,a0,440 # 800260f8 <raise+0x504>
8000cf48:	2e0080ef          	jal	ra,80015228 <rt_kprintf>
    object_split(maxlen);
8000cf4c:	fe042503          	lw	a0,-32(s0)
8000cf50:	a21ff0ef          	jal	ra,8000c970 <object_split>
    rt_kprintf(" --- --------------\n");
8000cf54:	00019517          	auipc	a0,0x19
8000cf58:	1c050513          	addi	a0,a0,448 # 80026114 <raise+0x520>
8000cf5c:	2cc080ef          	jal	ra,80015228 <rt_kprintf>

    do
    {
        next = list_get_next(next, &find_arg);
8000cf60:	fc040793          	addi	a5,s0,-64
8000cf64:	00078593          	mv	a1,a5
8000cf68:	fec42503          	lw	a0,-20(s0)
8000cf6c:	addff0ef          	jal	ra,8000ca48 <list_get_next>
8000cf70:	fea42623          	sw	a0,-20(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
8000cf74:	fe042423          	sw	zero,-24(s0)
8000cf78:	11c0006f          	j	8000d094 <list_sem+0x1a8>
            {
                struct rt_object *obj;
                struct rt_semaphore *sem;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
8000cf7c:	fe842783          	lw	a5,-24(s0)
8000cf80:	00279793          	slli	a5,a5,0x2
8000cf84:	ff078793          	addi	a5,a5,-16
8000cf88:	008787b3          	add	a5,a5,s0
8000cf8c:	fb07a783          	lw	a5,-80(a5)
8000cf90:	fe878793          	addi	a5,a5,-24
8000cf94:	fcf42e23          	sw	a5,-36(s0)
                level = rt_hw_interrupt_disable();
8000cf98:	908f30ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000cf9c:	fca42c23          	sw	a0,-40(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
8000cfa0:	fdc42783          	lw	a5,-36(s0)
8000cfa4:	0147c783          	lbu	a5,20(a5)
8000cfa8:	f7f7f793          	andi	a5,a5,-129
8000cfac:	fc844703          	lbu	a4,-56(s0)
8000cfb0:	00e78863          	beq	a5,a4,8000cfc0 <list_sem+0xd4>
                {
                    rt_hw_interrupt_enable(level);
8000cfb4:	fd842503          	lw	a0,-40(s0)
8000cfb8:	8f0f30ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                    continue;
8000cfbc:	0cc0006f          	j	8000d088 <list_sem+0x19c>
                }
                rt_hw_interrupt_enable(level);
8000cfc0:	fd842503          	lw	a0,-40(s0)
8000cfc4:	8e4f30ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

                sem = (struct rt_semaphore *)obj;
8000cfc8:	fdc42783          	lw	a5,-36(s0)
8000cfcc:	fcf42a23          	sw	a5,-44(s0)
                if (!rt_list_isempty(&sem->parent.suspend_thread))
8000cfd0:	fd442783          	lw	a5,-44(s0)
8000cfd4:	02078793          	addi	a5,a5,32
8000cfd8:	00078513          	mv	a0,a5
8000cfdc:	8a1ff0ef          	jal	ra,8000c87c <rt_list_isempty>
8000cfe0:	00050793          	mv	a5,a0
8000cfe4:	06079263          	bnez	a5,8000d048 <list_sem+0x15c>
                {
                    rt_kprintf("%-*.*s %03d %d:",
                               maxlen, RT_NAME_MAX,
                               sem->parent.parent.name,
8000cfe8:	fd442483          	lw	s1,-44(s0)
                               sem->value,
8000cfec:	fd442783          	lw	a5,-44(s0)
8000cff0:	0287d783          	lhu	a5,40(a5)
                    rt_kprintf("%-*.*s %03d %d:",
8000cff4:	00078913          	mv	s2,a5
                               rt_list_len(&sem->parent.suspend_thread));
8000cff8:	fd442783          	lw	a5,-44(s0)
8000cffc:	02078793          	addi	a5,a5,32
                    rt_kprintf("%-*.*s %03d %d:",
8000d000:	00078513          	mv	a0,a5
8000d004:	8b1ff0ef          	jal	ra,8000c8b4 <rt_list_len>
8000d008:	00050793          	mv	a5,a0
8000d00c:	00090713          	mv	a4,s2
8000d010:	00048693          	mv	a3,s1
8000d014:	01400613          	li	a2,20
8000d018:	fe042583          	lw	a1,-32(s0)
8000d01c:	00019517          	auipc	a0,0x19
8000d020:	11050513          	addi	a0,a0,272 # 8002612c <raise+0x538>
8000d024:	204080ef          	jal	ra,80015228 <rt_kprintf>
                    show_wait_queue(&(sem->parent.suspend_thread));
8000d028:	fd442783          	lw	a5,-44(s0)
8000d02c:	02078793          	addi	a5,a5,32
8000d030:	00078513          	mv	a0,a5
8000d034:	e25ff0ef          	jal	ra,8000ce58 <show_wait_queue>
                    rt_kprintf("\n");
8000d038:	00019517          	auipc	a0,0x19
8000d03c:	10450513          	addi	a0,a0,260 # 8002613c <raise+0x548>
8000d040:	1e8080ef          	jal	ra,80015228 <rt_kprintf>
8000d044:	0440006f          	j	8000d088 <list_sem+0x19c>
                }
                else
                {
                    rt_kprintf("%-*.*s %03d %d\n",
                               maxlen, RT_NAME_MAX,
                               sem->parent.parent.name,
8000d048:	fd442483          	lw	s1,-44(s0)
                               sem->value,
8000d04c:	fd442783          	lw	a5,-44(s0)
8000d050:	0287d783          	lhu	a5,40(a5)
                    rt_kprintf("%-*.*s %03d %d\n",
8000d054:	00078913          	mv	s2,a5
                               rt_list_len(&sem->parent.suspend_thread));
8000d058:	fd442783          	lw	a5,-44(s0)
8000d05c:	02078793          	addi	a5,a5,32
                    rt_kprintf("%-*.*s %03d %d\n",
8000d060:	00078513          	mv	a0,a5
8000d064:	851ff0ef          	jal	ra,8000c8b4 <rt_list_len>
8000d068:	00050793          	mv	a5,a0
8000d06c:	00090713          	mv	a4,s2
8000d070:	00048693          	mv	a3,s1
8000d074:	01400613          	li	a2,20
8000d078:	fe042583          	lw	a1,-32(s0)
8000d07c:	00019517          	auipc	a0,0x19
8000d080:	0c450513          	addi	a0,a0,196 # 80026140 <raise+0x54c>
8000d084:	1a4080ef          	jal	ra,80015228 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
8000d088:	fe842783          	lw	a5,-24(s0)
8000d08c:	00178793          	addi	a5,a5,1
8000d090:	fef42423          	sw	a5,-24(s0)
8000d094:	fd042783          	lw	a5,-48(s0)
8000d098:	fe842703          	lw	a4,-24(s0)
8000d09c:	eef740e3          	blt	a4,a5,8000cf7c <list_sem+0x90>
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
8000d0a0:	fec42783          	lw	a5,-20(s0)
8000d0a4:	ea079ee3          	bnez	a5,8000cf60 <list_sem+0x74>

    return 0;
8000d0a8:	00000793          	li	a5,0
}
8000d0ac:	00078513          	mv	a0,a5
8000d0b0:	05c12083          	lw	ra,92(sp)
8000d0b4:	05812403          	lw	s0,88(sp)
8000d0b8:	05412483          	lw	s1,84(sp)
8000d0bc:	05012903          	lw	s2,80(sp)
8000d0c0:	06010113          	addi	sp,sp,96
8000d0c4:	00008067          	ret

8000d0c8 <list_event>:
MSH_CMD_EXPORT(list_sem, list semaphore in system);
#endif

#ifdef RT_USING_EVENT
long list_event(void)
{
8000d0c8:	fa010113          	addi	sp,sp,-96
8000d0cc:	04112e23          	sw	ra,92(sp)
8000d0d0:	04812c23          	sw	s0,88(sp)
8000d0d4:	04912a23          	sw	s1,84(sp)
8000d0d8:	05212823          	sw	s2,80(sp)
8000d0dc:	06010413          	addi	s0,sp,96
    rt_base_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
8000d0e0:	fe042623          	sw	zero,-20(s0)

    int maxlen;
    const char *item_title = "event";
8000d0e4:	00019797          	auipc	a5,0x19
8000d0e8:	06c78793          	addi	a5,a5,108 # 80026150 <raise+0x55c>
8000d0ec:	fef42223          	sw	a5,-28(s0)

    list_find_init(&find_arg, RT_Object_Class_Event, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
8000d0f0:	fa040713          	addi	a4,s0,-96
8000d0f4:	fc040793          	addi	a5,s0,-64
8000d0f8:	00800693          	li	a3,8
8000d0fc:	00070613          	mv	a2,a4
8000d100:	00400593          	li	a1,4
8000d104:	00078513          	mv	a0,a5
8000d108:	8b5ff0ef          	jal	ra,8000c9bc <list_find_init>

    maxlen = RT_NAME_MAX;
8000d10c:	01400793          	li	a5,20
8000d110:	fef42023          	sw	a5,-32(s0)

    rt_kprintf("%-*.s      set    suspend thread\n", maxlen, item_title);
8000d114:	fe442603          	lw	a2,-28(s0)
8000d118:	fe042583          	lw	a1,-32(s0)
8000d11c:	00019517          	auipc	a0,0x19
8000d120:	03c50513          	addi	a0,a0,60 # 80026158 <raise+0x564>
8000d124:	104080ef          	jal	ra,80015228 <rt_kprintf>
    object_split(maxlen);
8000d128:	fe042503          	lw	a0,-32(s0)
8000d12c:	845ff0ef          	jal	ra,8000c970 <object_split>
    rt_kprintf("  ---------- --------------\n");
8000d130:	00019517          	auipc	a0,0x19
8000d134:	04c50513          	addi	a0,a0,76 # 8002617c <raise+0x588>
8000d138:	0f0080ef          	jal	ra,80015228 <rt_kprintf>

    do
    {
        next = list_get_next(next, &find_arg);
8000d13c:	fc040793          	addi	a5,s0,-64
8000d140:	00078593          	mv	a1,a5
8000d144:	fec42503          	lw	a0,-20(s0)
8000d148:	901ff0ef          	jal	ra,8000ca48 <list_get_next>
8000d14c:	fea42623          	sw	a0,-20(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
8000d150:	fe042423          	sw	zero,-24(s0)
8000d154:	0fc0006f          	j	8000d250 <list_event+0x188>
            {
                struct rt_object *obj;
                struct rt_event *e;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
8000d158:	fe842783          	lw	a5,-24(s0)
8000d15c:	00279793          	slli	a5,a5,0x2
8000d160:	ff078793          	addi	a5,a5,-16
8000d164:	008787b3          	add	a5,a5,s0
8000d168:	fb07a783          	lw	a5,-80(a5)
8000d16c:	fe878793          	addi	a5,a5,-24
8000d170:	fcf42e23          	sw	a5,-36(s0)
                level = rt_hw_interrupt_disable();
8000d174:	f2df20ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000d178:	fca42c23          	sw	a0,-40(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
8000d17c:	fdc42783          	lw	a5,-36(s0)
8000d180:	0147c783          	lbu	a5,20(a5)
8000d184:	f7f7f793          	andi	a5,a5,-129
8000d188:	fc844703          	lbu	a4,-56(s0)
8000d18c:	00e78863          	beq	a5,a4,8000d19c <list_event+0xd4>
                {
                    rt_hw_interrupt_enable(level);
8000d190:	fd842503          	lw	a0,-40(s0)
8000d194:	f15f20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                    continue;
8000d198:	0ac0006f          	j	8000d244 <list_event+0x17c>
                }

                rt_hw_interrupt_enable(level);
8000d19c:	fd842503          	lw	a0,-40(s0)
8000d1a0:	f09f20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

                e = (struct rt_event *)obj;
8000d1a4:	fdc42783          	lw	a5,-36(s0)
8000d1a8:	fcf42a23          	sw	a5,-44(s0)
                if (!rt_list_isempty(&e->parent.suspend_thread))
8000d1ac:	fd442783          	lw	a5,-44(s0)
8000d1b0:	02078793          	addi	a5,a5,32
8000d1b4:	00078513          	mv	a0,a5
8000d1b8:	ec4ff0ef          	jal	ra,8000c87c <rt_list_isempty>
8000d1bc:	00050793          	mv	a5,a0
8000d1c0:	06079063          	bnez	a5,8000d220 <list_event+0x158>
                {
                    rt_kprintf("%-*.*s  0x%08x %03d:",
                               maxlen, RT_NAME_MAX,
                               e->parent.parent.name,
8000d1c4:	fd442483          	lw	s1,-44(s0)
                    rt_kprintf("%-*.*s  0x%08x %03d:",
8000d1c8:	fd442783          	lw	a5,-44(s0)
8000d1cc:	0287a903          	lw	s2,40(a5)
                               e->set,
                               rt_list_len(&e->parent.suspend_thread));
8000d1d0:	fd442783          	lw	a5,-44(s0)
8000d1d4:	02078793          	addi	a5,a5,32
                    rt_kprintf("%-*.*s  0x%08x %03d:",
8000d1d8:	00078513          	mv	a0,a5
8000d1dc:	ed8ff0ef          	jal	ra,8000c8b4 <rt_list_len>
8000d1e0:	00050793          	mv	a5,a0
8000d1e4:	00090713          	mv	a4,s2
8000d1e8:	00048693          	mv	a3,s1
8000d1ec:	01400613          	li	a2,20
8000d1f0:	fe042583          	lw	a1,-32(s0)
8000d1f4:	00019517          	auipc	a0,0x19
8000d1f8:	fa850513          	addi	a0,a0,-88 # 8002619c <raise+0x5a8>
8000d1fc:	02c080ef          	jal	ra,80015228 <rt_kprintf>
                    show_wait_queue(&(e->parent.suspend_thread));
8000d200:	fd442783          	lw	a5,-44(s0)
8000d204:	02078793          	addi	a5,a5,32
8000d208:	00078513          	mv	a0,a5
8000d20c:	c4dff0ef          	jal	ra,8000ce58 <show_wait_queue>
                    rt_kprintf("\n");
8000d210:	00019517          	auipc	a0,0x19
8000d214:	f2c50513          	addi	a0,a0,-212 # 8002613c <raise+0x548>
8000d218:	010080ef          	jal	ra,80015228 <rt_kprintf>
8000d21c:	0280006f          	j	8000d244 <list_event+0x17c>
                }
                else
                {
                    rt_kprintf("%-*.*s  0x%08x 0\n",
                               maxlen, RT_NAME_MAX, e->parent.parent.name, e->set);
8000d220:	fd442683          	lw	a3,-44(s0)
                    rt_kprintf("%-*.*s  0x%08x 0\n",
8000d224:	fd442783          	lw	a5,-44(s0)
8000d228:	0287a783          	lw	a5,40(a5)
8000d22c:	00078713          	mv	a4,a5
8000d230:	01400613          	li	a2,20
8000d234:	fe042583          	lw	a1,-32(s0)
8000d238:	00019517          	auipc	a0,0x19
8000d23c:	f7c50513          	addi	a0,a0,-132 # 800261b4 <raise+0x5c0>
8000d240:	7e9070ef          	jal	ra,80015228 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
8000d244:	fe842783          	lw	a5,-24(s0)
8000d248:	00178793          	addi	a5,a5,1
8000d24c:	fef42423          	sw	a5,-24(s0)
8000d250:	fd042783          	lw	a5,-48(s0)
8000d254:	fe842703          	lw	a4,-24(s0)
8000d258:	f0f740e3          	blt	a4,a5,8000d158 <list_event+0x90>
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
8000d25c:	fec42783          	lw	a5,-20(s0)
8000d260:	ec079ee3          	bnez	a5,8000d13c <list_event+0x74>

    return 0;
8000d264:	00000793          	li	a5,0
}
8000d268:	00078513          	mv	a0,a5
8000d26c:	05c12083          	lw	ra,92(sp)
8000d270:	05812403          	lw	s0,88(sp)
8000d274:	05412483          	lw	s1,84(sp)
8000d278:	05012903          	lw	s2,80(sp)
8000d27c:	06010113          	addi	sp,sp,96
8000d280:	00008067          	ret

8000d284 <list_mutex>:
MSH_CMD_EXPORT(list_event, list event in system);
#endif

#ifdef RT_USING_MUTEX
long list_mutex(void)
{
8000d284:	f9010113          	addi	sp,sp,-112
8000d288:	06112623          	sw	ra,108(sp)
8000d28c:	06812423          	sw	s0,104(sp)
8000d290:	06912223          	sw	s1,100(sp)
8000d294:	07212023          	sw	s2,96(sp)
8000d298:	05312e23          	sw	s3,92(sp)
8000d29c:	07010413          	addi	s0,sp,112
    rt_base_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
8000d2a0:	fc042e23          	sw	zero,-36(s0)

    int maxlen;
    const char *item_title = "mutex";
8000d2a4:	00019797          	auipc	a5,0x19
8000d2a8:	f2478793          	addi	a5,a5,-220 # 800261c8 <raise+0x5d4>
8000d2ac:	fcf42a23          	sw	a5,-44(s0)

    list_find_init(&find_arg, RT_Object_Class_Mutex, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
8000d2b0:	f9040713          	addi	a4,s0,-112
8000d2b4:	fb040793          	addi	a5,s0,-80
8000d2b8:	00800693          	li	a3,8
8000d2bc:	00070613          	mv	a2,a4
8000d2c0:	00300593          	li	a1,3
8000d2c4:	00078513          	mv	a0,a5
8000d2c8:	ef4ff0ef          	jal	ra,8000c9bc <list_find_init>

    maxlen = RT_NAME_MAX;
8000d2cc:	01400793          	li	a5,20
8000d2d0:	fcf42823          	sw	a5,-48(s0)

    rt_kprintf("%-*.s   owner  hold suspend thread\n", maxlen, item_title);
8000d2d4:	fd442603          	lw	a2,-44(s0)
8000d2d8:	fd042583          	lw	a1,-48(s0)
8000d2dc:	00019517          	auipc	a0,0x19
8000d2e0:	ef450513          	addi	a0,a0,-268 # 800261d0 <raise+0x5dc>
8000d2e4:	745070ef          	jal	ra,80015228 <rt_kprintf>
    object_split(maxlen);
8000d2e8:	fd042503          	lw	a0,-48(s0)
8000d2ec:	e84ff0ef          	jal	ra,8000c970 <object_split>
    rt_kprintf(" -------- ---- --------------\n");
8000d2f0:	00019517          	auipc	a0,0x19
8000d2f4:	f0450513          	addi	a0,a0,-252 # 800261f4 <raise+0x600>
8000d2f8:	731070ef          	jal	ra,80015228 <rt_kprintf>

    do
    {
        next = list_get_next(next, &find_arg);
8000d2fc:	fb040793          	addi	a5,s0,-80
8000d300:	00078593          	mv	a1,a5
8000d304:	fdc42503          	lw	a0,-36(s0)
8000d308:	f40ff0ef          	jal	ra,8000ca48 <list_get_next>
8000d30c:	fca42e23          	sw	a0,-36(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
8000d310:	fc042c23          	sw	zero,-40(s0)
8000d314:	0bc0006f          	j	8000d3d0 <list_mutex+0x14c>
            {
                struct rt_object *obj;
                struct rt_mutex *m;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
8000d318:	fd842783          	lw	a5,-40(s0)
8000d31c:	00279793          	slli	a5,a5,0x2
8000d320:	fe078793          	addi	a5,a5,-32
8000d324:	008787b3          	add	a5,a5,s0
8000d328:	fb07a783          	lw	a5,-80(a5)
8000d32c:	fe878793          	addi	a5,a5,-24
8000d330:	fcf42623          	sw	a5,-52(s0)
                level = rt_hw_interrupt_disable();
8000d334:	d6df20ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000d338:	fca42423          	sw	a0,-56(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
8000d33c:	fcc42783          	lw	a5,-52(s0)
8000d340:	0147c783          	lbu	a5,20(a5)
8000d344:	f7f7f793          	andi	a5,a5,-129
8000d348:	fb844703          	lbu	a4,-72(s0)
8000d34c:	00e78863          	beq	a5,a4,8000d35c <list_mutex+0xd8>
                {
                    rt_hw_interrupt_enable(level);
8000d350:	fc842503          	lw	a0,-56(s0)
8000d354:	d55f20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                    continue;
8000d358:	06c0006f          	j	8000d3c4 <list_mutex+0x140>
                }

                rt_hw_interrupt_enable(level);
8000d35c:	fc842503          	lw	a0,-56(s0)
8000d360:	d49f20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

                m = (struct rt_mutex *)obj;
8000d364:	fcc42783          	lw	a5,-52(s0)
8000d368:	fcf42223          	sw	a5,-60(s0)
                rt_kprintf("%-*.*s %-8.*s %04d %d\n",
                           maxlen, RT_NAME_MAX,
                           m->parent.parent.name,
8000d36c:	fc442483          	lw	s1,-60(s0)
                           RT_NAME_MAX,
                           m->owner->name,
8000d370:	fc442783          	lw	a5,-60(s0)
8000d374:	02c7a783          	lw	a5,44(a5)
8000d378:	00078913          	mv	s2,a5
                           m->hold,
8000d37c:	fc442783          	lw	a5,-60(s0)
8000d380:	02b7c783          	lbu	a5,43(a5)
                rt_kprintf("%-*.*s %-8.*s %04d %d\n",
8000d384:	00078993          	mv	s3,a5
                           rt_list_len(&m->parent.suspend_thread));
8000d388:	fc442783          	lw	a5,-60(s0)
8000d38c:	02078793          	addi	a5,a5,32
                rt_kprintf("%-*.*s %-8.*s %04d %d\n",
8000d390:	00078513          	mv	a0,a5
8000d394:	d20ff0ef          	jal	ra,8000c8b4 <rt_list_len>
8000d398:	00050793          	mv	a5,a0
8000d39c:	00078893          	mv	a7,a5
8000d3a0:	00098813          	mv	a6,s3
8000d3a4:	00090793          	mv	a5,s2
8000d3a8:	01400713          	li	a4,20
8000d3ac:	00048693          	mv	a3,s1
8000d3b0:	01400613          	li	a2,20
8000d3b4:	fd042583          	lw	a1,-48(s0)
8000d3b8:	00019517          	auipc	a0,0x19
8000d3bc:	e5c50513          	addi	a0,a0,-420 # 80026214 <raise+0x620>
8000d3c0:	669070ef          	jal	ra,80015228 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
8000d3c4:	fd842783          	lw	a5,-40(s0)
8000d3c8:	00178793          	addi	a5,a5,1
8000d3cc:	fcf42c23          	sw	a5,-40(s0)
8000d3d0:	fc042783          	lw	a5,-64(s0)
8000d3d4:	fd842703          	lw	a4,-40(s0)
8000d3d8:	f4f740e3          	blt	a4,a5,8000d318 <list_mutex+0x94>

            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
8000d3dc:	fdc42783          	lw	a5,-36(s0)
8000d3e0:	f0079ee3          	bnez	a5,8000d2fc <list_mutex+0x78>

    return 0;
8000d3e4:	00000793          	li	a5,0
}
8000d3e8:	00078513          	mv	a0,a5
8000d3ec:	06c12083          	lw	ra,108(sp)
8000d3f0:	06812403          	lw	s0,104(sp)
8000d3f4:	06412483          	lw	s1,100(sp)
8000d3f8:	06012903          	lw	s2,96(sp)
8000d3fc:	05c12983          	lw	s3,92(sp)
8000d400:	07010113          	addi	sp,sp,112
8000d404:	00008067          	ret

8000d408 <list_mailbox>:
MSH_CMD_EXPORT(list_mutex, list mutex in system);
#endif

#ifdef RT_USING_MAILBOX
long list_mailbox(void)
{
8000d408:	f9010113          	addi	sp,sp,-112
8000d40c:	06112623          	sw	ra,108(sp)
8000d410:	06812423          	sw	s0,104(sp)
8000d414:	06912223          	sw	s1,100(sp)
8000d418:	07212023          	sw	s2,96(sp)
8000d41c:	05312e23          	sw	s3,92(sp)
8000d420:	07010413          	addi	s0,sp,112
    rt_base_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
8000d424:	fc042e23          	sw	zero,-36(s0)

    int maxlen;
    const char *item_title = "mailbox";
8000d428:	00019797          	auipc	a5,0x19
8000d42c:	e0478793          	addi	a5,a5,-508 # 8002622c <raise+0x638>
8000d430:	fcf42a23          	sw	a5,-44(s0)

    list_find_init(&find_arg, RT_Object_Class_MailBox, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
8000d434:	f9040713          	addi	a4,s0,-112
8000d438:	fb040793          	addi	a5,s0,-80
8000d43c:	00800693          	li	a3,8
8000d440:	00070613          	mv	a2,a4
8000d444:	00500593          	li	a1,5
8000d448:	00078513          	mv	a0,a5
8000d44c:	d70ff0ef          	jal	ra,8000c9bc <list_find_init>

    maxlen = RT_NAME_MAX;
8000d450:	01400793          	li	a5,20
8000d454:	fcf42823          	sw	a5,-48(s0)

    rt_kprintf("%-*.s entry size suspend thread\n", maxlen, item_title);
8000d458:	fd442603          	lw	a2,-44(s0)
8000d45c:	fd042583          	lw	a1,-48(s0)
8000d460:	00019517          	auipc	a0,0x19
8000d464:	dd450513          	addi	a0,a0,-556 # 80026234 <raise+0x640>
8000d468:	5c1070ef          	jal	ra,80015228 <rt_kprintf>
    object_split(maxlen);
8000d46c:	fd042503          	lw	a0,-48(s0)
8000d470:	d00ff0ef          	jal	ra,8000c970 <object_split>
    rt_kprintf(" ----  ---- --------------\n");
8000d474:	00019517          	auipc	a0,0x19
8000d478:	de450513          	addi	a0,a0,-540 # 80026258 <raise+0x664>
8000d47c:	5ad070ef          	jal	ra,80015228 <rt_kprintf>

    do
    {
        next = list_get_next(next, &find_arg);
8000d480:	fb040793          	addi	a5,s0,-80
8000d484:	00078593          	mv	a1,a5
8000d488:	fdc42503          	lw	a0,-36(s0)
8000d48c:	dbcff0ef          	jal	ra,8000ca48 <list_get_next>
8000d490:	fca42e23          	sw	a0,-36(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
8000d494:	fc042c23          	sw	zero,-40(s0)
8000d498:	1440006f          	j	8000d5dc <list_mailbox+0x1d4>
            {
                struct rt_object *obj;
                struct rt_mailbox *m;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
8000d49c:	fd842783          	lw	a5,-40(s0)
8000d4a0:	00279793          	slli	a5,a5,0x2
8000d4a4:	fe078793          	addi	a5,a5,-32
8000d4a8:	008787b3          	add	a5,a5,s0
8000d4ac:	fb07a783          	lw	a5,-80(a5)
8000d4b0:	fe878793          	addi	a5,a5,-24
8000d4b4:	fcf42623          	sw	a5,-52(s0)
                level = rt_hw_interrupt_disable();
8000d4b8:	be9f20ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000d4bc:	fca42423          	sw	a0,-56(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
8000d4c0:	fcc42783          	lw	a5,-52(s0)
8000d4c4:	0147c783          	lbu	a5,20(a5)
8000d4c8:	f7f7f793          	andi	a5,a5,-129
8000d4cc:	fb844703          	lbu	a4,-72(s0)
8000d4d0:	00e78863          	beq	a5,a4,8000d4e0 <list_mailbox+0xd8>
                {
                    rt_hw_interrupt_enable(level);
8000d4d4:	fc842503          	lw	a0,-56(s0)
8000d4d8:	bd1f20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                    continue;
8000d4dc:	0f40006f          	j	8000d5d0 <list_mailbox+0x1c8>
                }

                rt_hw_interrupt_enable(level);
8000d4e0:	fc842503          	lw	a0,-56(s0)
8000d4e4:	bc5f20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

                m = (struct rt_mailbox *)obj;
8000d4e8:	fcc42783          	lw	a5,-52(s0)
8000d4ec:	fcf42223          	sw	a5,-60(s0)
                if (!rt_list_isempty(&m->parent.suspend_thread))
8000d4f0:	fc442783          	lw	a5,-60(s0)
8000d4f4:	02078793          	addi	a5,a5,32
8000d4f8:	00078513          	mv	a0,a5
8000d4fc:	b80ff0ef          	jal	ra,8000c87c <rt_list_isempty>
8000d500:	00050793          	mv	a5,a0
8000d504:	06079c63          	bnez	a5,8000d57c <list_mailbox+0x174>
                {
                    rt_kprintf("%-*.*s %04d  %04d %d:",
                               maxlen, RT_NAME_MAX,
                               m->parent.parent.name,
8000d508:	fc442483          	lw	s1,-60(s0)
                               m->entry,
8000d50c:	fc442783          	lw	a5,-60(s0)
8000d510:	02e7d783          	lhu	a5,46(a5)
                    rt_kprintf("%-*.*s %04d  %04d %d:",
8000d514:	00078913          	mv	s2,a5
                               m->size,
8000d518:	fc442783          	lw	a5,-60(s0)
8000d51c:	02c7d783          	lhu	a5,44(a5)
                    rt_kprintf("%-*.*s %04d  %04d %d:",
8000d520:	00078993          	mv	s3,a5
                               rt_list_len(&m->parent.suspend_thread));
8000d524:	fc442783          	lw	a5,-60(s0)
8000d528:	02078793          	addi	a5,a5,32
                    rt_kprintf("%-*.*s %04d  %04d %d:",
8000d52c:	00078513          	mv	a0,a5
8000d530:	b84ff0ef          	jal	ra,8000c8b4 <rt_list_len>
8000d534:	00050793          	mv	a5,a0
8000d538:	00078813          	mv	a6,a5
8000d53c:	00098793          	mv	a5,s3
8000d540:	00090713          	mv	a4,s2
8000d544:	00048693          	mv	a3,s1
8000d548:	01400613          	li	a2,20
8000d54c:	fd042583          	lw	a1,-48(s0)
8000d550:	00019517          	auipc	a0,0x19
8000d554:	d2450513          	addi	a0,a0,-732 # 80026274 <raise+0x680>
8000d558:	4d1070ef          	jal	ra,80015228 <rt_kprintf>
                    show_wait_queue(&(m->parent.suspend_thread));
8000d55c:	fc442783          	lw	a5,-60(s0)
8000d560:	02078793          	addi	a5,a5,32
8000d564:	00078513          	mv	a0,a5
8000d568:	8f1ff0ef          	jal	ra,8000ce58 <show_wait_queue>
                    rt_kprintf("\n");
8000d56c:	00019517          	auipc	a0,0x19
8000d570:	bd050513          	addi	a0,a0,-1072 # 8002613c <raise+0x548>
8000d574:	4b5070ef          	jal	ra,80015228 <rt_kprintf>
8000d578:	0580006f          	j	8000d5d0 <list_mailbox+0x1c8>
                }
                else
                {
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
                               maxlen, RT_NAME_MAX,
                               m->parent.parent.name,
8000d57c:	fc442483          	lw	s1,-60(s0)
                               m->entry,
8000d580:	fc442783          	lw	a5,-60(s0)
8000d584:	02e7d783          	lhu	a5,46(a5)
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
8000d588:	00078913          	mv	s2,a5
                               m->size,
8000d58c:	fc442783          	lw	a5,-60(s0)
8000d590:	02c7d783          	lhu	a5,44(a5)
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
8000d594:	00078993          	mv	s3,a5
                               rt_list_len(&m->parent.suspend_thread));
8000d598:	fc442783          	lw	a5,-60(s0)
8000d59c:	02078793          	addi	a5,a5,32
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
8000d5a0:	00078513          	mv	a0,a5
8000d5a4:	b10ff0ef          	jal	ra,8000c8b4 <rt_list_len>
8000d5a8:	00050793          	mv	a5,a0
8000d5ac:	00078813          	mv	a6,a5
8000d5b0:	00098793          	mv	a5,s3
8000d5b4:	00090713          	mv	a4,s2
8000d5b8:	00048693          	mv	a3,s1
8000d5bc:	01400613          	li	a2,20
8000d5c0:	fd042583          	lw	a1,-48(s0)
8000d5c4:	00019517          	auipc	a0,0x19
8000d5c8:	cc850513          	addi	a0,a0,-824 # 8002628c <raise+0x698>
8000d5cc:	45d070ef          	jal	ra,80015228 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
8000d5d0:	fd842783          	lw	a5,-40(s0)
8000d5d4:	00178793          	addi	a5,a5,1
8000d5d8:	fcf42c23          	sw	a5,-40(s0)
8000d5dc:	fc042783          	lw	a5,-64(s0)
8000d5e0:	fd842703          	lw	a4,-40(s0)
8000d5e4:	eaf74ce3          	blt	a4,a5,8000d49c <list_mailbox+0x94>
                }

            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
8000d5e8:	fdc42783          	lw	a5,-36(s0)
8000d5ec:	e8079ae3          	bnez	a5,8000d480 <list_mailbox+0x78>

    return 0;
8000d5f0:	00000793          	li	a5,0
}
8000d5f4:	00078513          	mv	a0,a5
8000d5f8:	06c12083          	lw	ra,108(sp)
8000d5fc:	06812403          	lw	s0,104(sp)
8000d600:	06412483          	lw	s1,100(sp)
8000d604:	06012903          	lw	s2,96(sp)
8000d608:	05c12983          	lw	s3,92(sp)
8000d60c:	07010113          	addi	sp,sp,112
8000d610:	00008067          	ret

8000d614 <list_msgqueue>:
MSH_CMD_EXPORT(list_mailbox, list mail box in system);
#endif

#ifdef RT_USING_MESSAGEQUEUE
long list_msgqueue(void)
{
8000d614:	fa010113          	addi	sp,sp,-96
8000d618:	04112e23          	sw	ra,92(sp)
8000d61c:	04812c23          	sw	s0,88(sp)
8000d620:	04912a23          	sw	s1,84(sp)
8000d624:	05212823          	sw	s2,80(sp)
8000d628:	06010413          	addi	s0,sp,96
    rt_base_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
8000d62c:	fe042623          	sw	zero,-20(s0)

    int maxlen;
    const char *item_title = "msgqueue";
8000d630:	00019797          	auipc	a5,0x19
8000d634:	c7478793          	addi	a5,a5,-908 # 800262a4 <raise+0x6b0>
8000d638:	fef42223          	sw	a5,-28(s0)

    list_find_init(&find_arg, RT_Object_Class_MessageQueue, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
8000d63c:	fa040713          	addi	a4,s0,-96
8000d640:	fc040793          	addi	a5,s0,-64
8000d644:	00800693          	li	a3,8
8000d648:	00070613          	mv	a2,a4
8000d64c:	00600593          	li	a1,6
8000d650:	00078513          	mv	a0,a5
8000d654:	b68ff0ef          	jal	ra,8000c9bc <list_find_init>

    maxlen = RT_NAME_MAX;
8000d658:	01400793          	li	a5,20
8000d65c:	fef42023          	sw	a5,-32(s0)

    rt_kprintf("%-*.s entry suspend thread\n", maxlen, item_title);
8000d660:	fe442603          	lw	a2,-28(s0)
8000d664:	fe042583          	lw	a1,-32(s0)
8000d668:	00019517          	auipc	a0,0x19
8000d66c:	c4850513          	addi	a0,a0,-952 # 800262b0 <raise+0x6bc>
8000d670:	3b9070ef          	jal	ra,80015228 <rt_kprintf>
    object_split(maxlen);
8000d674:	fe042503          	lw	a0,-32(s0)
8000d678:	af8ff0ef          	jal	ra,8000c970 <object_split>
    rt_kprintf(" ----  --------------\n");
8000d67c:	00019517          	auipc	a0,0x19
8000d680:	c5050513          	addi	a0,a0,-944 # 800262cc <raise+0x6d8>
8000d684:	3a5070ef          	jal	ra,80015228 <rt_kprintf>
    do
    {
        next = list_get_next(next, &find_arg);
8000d688:	fc040793          	addi	a5,s0,-64
8000d68c:	00078593          	mv	a1,a5
8000d690:	fec42503          	lw	a0,-20(s0)
8000d694:	bb4ff0ef          	jal	ra,8000ca48 <list_get_next>
8000d698:	fea42623          	sw	a0,-20(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
8000d69c:	fe042423          	sw	zero,-24(s0)
8000d6a0:	11c0006f          	j	8000d7bc <list_msgqueue+0x1a8>
            {
                struct rt_object *obj;
                struct rt_messagequeue *m;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
8000d6a4:	fe842783          	lw	a5,-24(s0)
8000d6a8:	00279793          	slli	a5,a5,0x2
8000d6ac:	ff078793          	addi	a5,a5,-16
8000d6b0:	008787b3          	add	a5,a5,s0
8000d6b4:	fb07a783          	lw	a5,-80(a5)
8000d6b8:	fe878793          	addi	a5,a5,-24
8000d6bc:	fcf42e23          	sw	a5,-36(s0)
                level = rt_hw_interrupt_disable();
8000d6c0:	9e1f20ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000d6c4:	fca42c23          	sw	a0,-40(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
8000d6c8:	fdc42783          	lw	a5,-36(s0)
8000d6cc:	0147c783          	lbu	a5,20(a5)
8000d6d0:	f7f7f793          	andi	a5,a5,-129
8000d6d4:	fc844703          	lbu	a4,-56(s0)
8000d6d8:	00e78863          	beq	a5,a4,8000d6e8 <list_msgqueue+0xd4>
                {
                    rt_hw_interrupt_enable(level);
8000d6dc:	fd842503          	lw	a0,-40(s0)
8000d6e0:	9c9f20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                    continue;
8000d6e4:	0cc0006f          	j	8000d7b0 <list_msgqueue+0x19c>
                }

                rt_hw_interrupt_enable(level);
8000d6e8:	fd842503          	lw	a0,-40(s0)
8000d6ec:	9bdf20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

                m = (struct rt_messagequeue *)obj;
8000d6f0:	fdc42783          	lw	a5,-36(s0)
8000d6f4:	fcf42a23          	sw	a5,-44(s0)
                if (!rt_list_isempty(&m->parent.suspend_thread))
8000d6f8:	fd442783          	lw	a5,-44(s0)
8000d6fc:	02078793          	addi	a5,a5,32
8000d700:	00078513          	mv	a0,a5
8000d704:	978ff0ef          	jal	ra,8000c87c <rt_list_isempty>
8000d708:	00050793          	mv	a5,a0
8000d70c:	06079263          	bnez	a5,8000d770 <list_msgqueue+0x15c>
                {
                    rt_kprintf("%-*.*s %04d  %d:",
                               maxlen, RT_NAME_MAX,
                               m->parent.parent.name,
8000d710:	fd442483          	lw	s1,-44(s0)
                               m->entry,
8000d714:	fd442783          	lw	a5,-44(s0)
8000d718:	0307d783          	lhu	a5,48(a5)
                    rt_kprintf("%-*.*s %04d  %d:",
8000d71c:	00078913          	mv	s2,a5
                               rt_list_len(&m->parent.suspend_thread));
8000d720:	fd442783          	lw	a5,-44(s0)
8000d724:	02078793          	addi	a5,a5,32
                    rt_kprintf("%-*.*s %04d  %d:",
8000d728:	00078513          	mv	a0,a5
8000d72c:	988ff0ef          	jal	ra,8000c8b4 <rt_list_len>
8000d730:	00050793          	mv	a5,a0
8000d734:	00090713          	mv	a4,s2
8000d738:	00048693          	mv	a3,s1
8000d73c:	01400613          	li	a2,20
8000d740:	fe042583          	lw	a1,-32(s0)
8000d744:	00019517          	auipc	a0,0x19
8000d748:	ba050513          	addi	a0,a0,-1120 # 800262e4 <raise+0x6f0>
8000d74c:	2dd070ef          	jal	ra,80015228 <rt_kprintf>
                    show_wait_queue(&(m->parent.suspend_thread));
8000d750:	fd442783          	lw	a5,-44(s0)
8000d754:	02078793          	addi	a5,a5,32
8000d758:	00078513          	mv	a0,a5
8000d75c:	efcff0ef          	jal	ra,8000ce58 <show_wait_queue>
                    rt_kprintf("\n");
8000d760:	00019517          	auipc	a0,0x19
8000d764:	9dc50513          	addi	a0,a0,-1572 # 8002613c <raise+0x548>
8000d768:	2c1070ef          	jal	ra,80015228 <rt_kprintf>
8000d76c:	0440006f          	j	8000d7b0 <list_msgqueue+0x19c>
                }
                else
                {
                    rt_kprintf("%-*.*s %04d  %d\n",
                               maxlen, RT_NAME_MAX,
                               m->parent.parent.name,
8000d770:	fd442483          	lw	s1,-44(s0)
                               m->entry,
8000d774:	fd442783          	lw	a5,-44(s0)
8000d778:	0307d783          	lhu	a5,48(a5)
                    rt_kprintf("%-*.*s %04d  %d\n",
8000d77c:	00078913          	mv	s2,a5
                               rt_list_len(&m->parent.suspend_thread));
8000d780:	fd442783          	lw	a5,-44(s0)
8000d784:	02078793          	addi	a5,a5,32
                    rt_kprintf("%-*.*s %04d  %d\n",
8000d788:	00078513          	mv	a0,a5
8000d78c:	928ff0ef          	jal	ra,8000c8b4 <rt_list_len>
8000d790:	00050793          	mv	a5,a0
8000d794:	00090713          	mv	a4,s2
8000d798:	00048693          	mv	a3,s1
8000d79c:	01400613          	li	a2,20
8000d7a0:	fe042583          	lw	a1,-32(s0)
8000d7a4:	00019517          	auipc	a0,0x19
8000d7a8:	b5450513          	addi	a0,a0,-1196 # 800262f8 <raise+0x704>
8000d7ac:	27d070ef          	jal	ra,80015228 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
8000d7b0:	fe842783          	lw	a5,-24(s0)
8000d7b4:	00178793          	addi	a5,a5,1
8000d7b8:	fef42423          	sw	a5,-24(s0)
8000d7bc:	fd042783          	lw	a5,-48(s0)
8000d7c0:	fe842703          	lw	a4,-24(s0)
8000d7c4:	eef740e3          	blt	a4,a5,8000d6a4 <list_msgqueue+0x90>
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
8000d7c8:	fec42783          	lw	a5,-20(s0)
8000d7cc:	ea079ee3          	bnez	a5,8000d688 <list_msgqueue+0x74>

    return 0;
8000d7d0:	00000793          	li	a5,0
}
8000d7d4:	00078513          	mv	a0,a5
8000d7d8:	05c12083          	lw	ra,92(sp)
8000d7dc:	05812403          	lw	s0,88(sp)
8000d7e0:	05412483          	lw	s1,84(sp)
8000d7e4:	05012903          	lw	s2,80(sp)
8000d7e8:	06010113          	addi	sp,sp,96
8000d7ec:	00008067          	ret

8000d7f0 <list_mempool>:
MSH_CMD_EXPORT(list_memheap, list memory heap in system);
#endif

#ifdef RT_USING_MEMPOOL
long list_mempool(void)
{
8000d7f0:	f9010113          	addi	sp,sp,-112
8000d7f4:	06112623          	sw	ra,108(sp)
8000d7f8:	06812423          	sw	s0,104(sp)
8000d7fc:	07010413          	addi	s0,sp,112
    rt_base_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
8000d800:	fe042623          	sw	zero,-20(s0)

    int maxlen;
    const char *item_title = "mempool";
8000d804:	00019797          	auipc	a5,0x19
8000d808:	b0878793          	addi	a5,a5,-1272 # 8002630c <raise+0x718>
8000d80c:	fcf42e23          	sw	a5,-36(s0)

    list_find_init(&find_arg, RT_Object_Class_MemPool, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
8000d810:	f9840713          	addi	a4,s0,-104
8000d814:	fb840793          	addi	a5,s0,-72
8000d818:	00800693          	li	a3,8
8000d81c:	00070613          	mv	a2,a4
8000d820:	00800593          	li	a1,8
8000d824:	00078513          	mv	a0,a5
8000d828:	994ff0ef          	jal	ra,8000c9bc <list_find_init>

    maxlen = RT_NAME_MAX;
8000d82c:	01400793          	li	a5,20
8000d830:	fcf42c23          	sw	a5,-40(s0)

    rt_kprintf("%-*.s block total free suspend thread\n", maxlen, item_title);
8000d834:	fdc42603          	lw	a2,-36(s0)
8000d838:	fd842583          	lw	a1,-40(s0)
8000d83c:	00019517          	auipc	a0,0x19
8000d840:	ad850513          	addi	a0,a0,-1320 # 80026314 <raise+0x720>
8000d844:	1e5070ef          	jal	ra,80015228 <rt_kprintf>
    object_split(maxlen);
8000d848:	fd842503          	lw	a0,-40(s0)
8000d84c:	924ff0ef          	jal	ra,8000c970 <object_split>
    rt_kprintf(" ----  ----  ---- --------------\n");
8000d850:	00019517          	auipc	a0,0x19
8000d854:	aec50513          	addi	a0,a0,-1300 # 8002633c <raise+0x748>
8000d858:	1d1070ef          	jal	ra,80015228 <rt_kprintf>
    do
    {
        next = list_get_next(next, &find_arg);
8000d85c:	fb840793          	addi	a5,s0,-72
8000d860:	00078593          	mv	a1,a5
8000d864:	fec42503          	lw	a0,-20(s0)
8000d868:	9e0ff0ef          	jal	ra,8000ca48 <list_get_next>
8000d86c:	fea42623          	sw	a0,-20(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
8000d870:	fe042423          	sw	zero,-24(s0)
8000d874:	1400006f          	j	8000d9b4 <list_mempool+0x1c4>
                struct rt_object *obj;
                struct rt_mempool *mp;
                int suspend_thread_count;
                rt_list_t *node;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
8000d878:	fe842783          	lw	a5,-24(s0)
8000d87c:	00279793          	slli	a5,a5,0x2
8000d880:	ff078793          	addi	a5,a5,-16
8000d884:	008787b3          	add	a5,a5,s0
8000d888:	fa87a783          	lw	a5,-88(a5)
8000d88c:	fe878793          	addi	a5,a5,-24
8000d890:	fcf42a23          	sw	a5,-44(s0)
                level = rt_hw_interrupt_disable();
8000d894:	80df20ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000d898:	fca42823          	sw	a0,-48(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
8000d89c:	fd442783          	lw	a5,-44(s0)
8000d8a0:	0147c783          	lbu	a5,20(a5)
8000d8a4:	f7f7f793          	andi	a5,a5,-129
8000d8a8:	fc044703          	lbu	a4,-64(s0)
8000d8ac:	00e78863          	beq	a5,a4,8000d8bc <list_mempool+0xcc>
                {
                    rt_hw_interrupt_enable(level);
8000d8b0:	fd042503          	lw	a0,-48(s0)
8000d8b4:	ff4f20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                    continue;
8000d8b8:	0f00006f          	j	8000d9a8 <list_mempool+0x1b8>
                }

                rt_hw_interrupt_enable(level);
8000d8bc:	fd042503          	lw	a0,-48(s0)
8000d8c0:	fe8f20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

                mp = (struct rt_mempool *)obj;
8000d8c4:	fd442783          	lw	a5,-44(s0)
8000d8c8:	fcf42623          	sw	a5,-52(s0)

                suspend_thread_count = 0;
8000d8cc:	fe042223          	sw	zero,-28(s0)
                rt_list_for_each(node, &mp->suspend_thread)
8000d8d0:	fcc42783          	lw	a5,-52(s0)
8000d8d4:	0387a783          	lw	a5,56(a5)
8000d8d8:	fef42023          	sw	a5,-32(s0)
8000d8dc:	01c0006f          	j	8000d8f8 <list_mempool+0x108>
                {
                    suspend_thread_count++;
8000d8e0:	fe442783          	lw	a5,-28(s0)
8000d8e4:	00178793          	addi	a5,a5,1
8000d8e8:	fef42223          	sw	a5,-28(s0)
                rt_list_for_each(node, &mp->suspend_thread)
8000d8ec:	fe042783          	lw	a5,-32(s0)
8000d8f0:	0007a783          	lw	a5,0(a5)
8000d8f4:	fef42023          	sw	a5,-32(s0)
8000d8f8:	fcc42783          	lw	a5,-52(s0)
8000d8fc:	03878793          	addi	a5,a5,56
8000d900:	fe042703          	lw	a4,-32(s0)
8000d904:	fcf71ee3          	bne	a4,a5,8000d8e0 <list_mempool+0xf0>
                }

                if (suspend_thread_count > 0)
8000d908:	fe442783          	lw	a5,-28(s0)
8000d90c:	06f05063          	blez	a5,8000d96c <list_mempool+0x17c>
                {
                    rt_kprintf("%-*.*s %04d  %04d  %04d %d:",
                               maxlen, RT_NAME_MAX,
                               mp->parent.name,
8000d910:	fcc42683          	lw	a3,-52(s0)
                    rt_kprintf("%-*.*s %04d  %04d  %04d %d:",
8000d914:	fcc42783          	lw	a5,-52(s0)
8000d918:	0287a703          	lw	a4,40(a5)
8000d91c:	fcc42783          	lw	a5,-52(s0)
8000d920:	0307a603          	lw	a2,48(a5)
8000d924:	fcc42783          	lw	a5,-52(s0)
8000d928:	0347a783          	lw	a5,52(a5)
8000d92c:	fe442883          	lw	a7,-28(s0)
8000d930:	00078813          	mv	a6,a5
8000d934:	00060793          	mv	a5,a2
8000d938:	01400613          	li	a2,20
8000d93c:	fd842583          	lw	a1,-40(s0)
8000d940:	00019517          	auipc	a0,0x19
8000d944:	a2050513          	addi	a0,a0,-1504 # 80026360 <raise+0x76c>
8000d948:	0e1070ef          	jal	ra,80015228 <rt_kprintf>
                               mp->block_size,
                               mp->block_total_count,
                               mp->block_free_count,
                               suspend_thread_count);
                    show_wait_queue(&(mp->suspend_thread));
8000d94c:	fcc42783          	lw	a5,-52(s0)
8000d950:	03878793          	addi	a5,a5,56
8000d954:	00078513          	mv	a0,a5
8000d958:	d00ff0ef          	jal	ra,8000ce58 <show_wait_queue>
                    rt_kprintf("\n");
8000d95c:	00018517          	auipc	a0,0x18
8000d960:	7e050513          	addi	a0,a0,2016 # 8002613c <raise+0x548>
8000d964:	0c5070ef          	jal	ra,80015228 <rt_kprintf>
8000d968:	0400006f          	j	8000d9a8 <list_mempool+0x1b8>
                }
                else
                {
                    rt_kprintf("%-*.*s %04d  %04d  %04d %d\n",
                               maxlen, RT_NAME_MAX,
                               mp->parent.name,
8000d96c:	fcc42683          	lw	a3,-52(s0)
                    rt_kprintf("%-*.*s %04d  %04d  %04d %d\n",
8000d970:	fcc42783          	lw	a5,-52(s0)
8000d974:	0287a703          	lw	a4,40(a5)
8000d978:	fcc42783          	lw	a5,-52(s0)
8000d97c:	0307a603          	lw	a2,48(a5)
8000d980:	fcc42783          	lw	a5,-52(s0)
8000d984:	0347a783          	lw	a5,52(a5)
8000d988:	fe442883          	lw	a7,-28(s0)
8000d98c:	00078813          	mv	a6,a5
8000d990:	00060793          	mv	a5,a2
8000d994:	01400613          	li	a2,20
8000d998:	fd842583          	lw	a1,-40(s0)
8000d99c:	00019517          	auipc	a0,0x19
8000d9a0:	9e050513          	addi	a0,a0,-1568 # 8002637c <raise+0x788>
8000d9a4:	085070ef          	jal	ra,80015228 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
8000d9a8:	fe842783          	lw	a5,-24(s0)
8000d9ac:	00178793          	addi	a5,a5,1
8000d9b0:	fef42423          	sw	a5,-24(s0)
8000d9b4:	fc842783          	lw	a5,-56(s0)
8000d9b8:	fe842703          	lw	a4,-24(s0)
8000d9bc:	eaf74ee3          	blt	a4,a5,8000d878 <list_mempool+0x88>
                               suspend_thread_count);
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
8000d9c0:	fec42783          	lw	a5,-20(s0)
8000d9c4:	e8079ce3          	bnez	a5,8000d85c <list_mempool+0x6c>

    return 0;
8000d9c8:	00000793          	li	a5,0
}
8000d9cc:	00078513          	mv	a0,a5
8000d9d0:	06c12083          	lw	ra,108(sp)
8000d9d4:	06812403          	lw	s0,104(sp)
8000d9d8:	07010113          	addi	sp,sp,112
8000d9dc:	00008067          	ret

8000d9e0 <list_timer>:
MSH_CMD_EXPORT(list_mempool, list memory pool in system);
#endif

long list_timer(void)
{
8000d9e0:	fa010113          	addi	sp,sp,-96
8000d9e4:	04112e23          	sw	ra,92(sp)
8000d9e8:	04812c23          	sw	s0,88(sp)
8000d9ec:	06010413          	addi	s0,sp,96
    rt_base_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
8000d9f0:	fe042623          	sw	zero,-20(s0)

    int maxlen;
    const char *item_title = "timer";
8000d9f4:	00019797          	auipc	a5,0x19
8000d9f8:	9a478793          	addi	a5,a5,-1628 # 80026398 <raise+0x7a4>
8000d9fc:	fef42223          	sw	a5,-28(s0)

    list_find_init(&find_arg, RT_Object_Class_Timer, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
8000da00:	fa040713          	addi	a4,s0,-96
8000da04:	fc040793          	addi	a5,s0,-64
8000da08:	00800693          	li	a3,8
8000da0c:	00070613          	mv	a2,a4
8000da10:	00a00593          	li	a1,10
8000da14:	00078513          	mv	a0,a5
8000da18:	fa5fe0ef          	jal	ra,8000c9bc <list_find_init>

    maxlen = RT_NAME_MAX;
8000da1c:	01400793          	li	a5,20
8000da20:	fef42023          	sw	a5,-32(s0)

    rt_kprintf("%-*.s  periodic   timeout    activated     mode\n", maxlen, item_title);
8000da24:	fe442603          	lw	a2,-28(s0)
8000da28:	fe042583          	lw	a1,-32(s0)
8000da2c:	00019517          	auipc	a0,0x19
8000da30:	97450513          	addi	a0,a0,-1676 # 800263a0 <raise+0x7ac>
8000da34:	7f4070ef          	jal	ra,80015228 <rt_kprintf>
    object_split(maxlen);
8000da38:	fe042503          	lw	a0,-32(s0)
8000da3c:	f35fe0ef          	jal	ra,8000c970 <object_split>
    rt_kprintf(" ---------- ---------- ----------- ---------\n");
8000da40:	00019517          	auipc	a0,0x19
8000da44:	99450513          	addi	a0,a0,-1644 # 800263d4 <raise+0x7e0>
8000da48:	7e0070ef          	jal	ra,80015228 <rt_kprintf>
    do
    {
        next = list_get_next(next, &find_arg);
8000da4c:	fc040793          	addi	a5,s0,-64
8000da50:	00078593          	mv	a1,a5
8000da54:	fec42503          	lw	a0,-20(s0)
8000da58:	ff1fe0ef          	jal	ra,8000ca48 <list_get_next>
8000da5c:	fea42623          	sw	a0,-20(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
8000da60:	fe042423          	sw	zero,-24(s0)
8000da64:	0e40006f          	j	8000db48 <list_timer+0x168>
            {
                struct rt_object *obj;
                struct rt_timer *timer;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
8000da68:	fe842783          	lw	a5,-24(s0)
8000da6c:	00279793          	slli	a5,a5,0x2
8000da70:	ff078793          	addi	a5,a5,-16
8000da74:	008787b3          	add	a5,a5,s0
8000da78:	fb07a783          	lw	a5,-80(a5)
8000da7c:	fe878793          	addi	a5,a5,-24
8000da80:	fcf42e23          	sw	a5,-36(s0)
                level = rt_hw_interrupt_disable();
8000da84:	e1cf20ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000da88:	fca42c23          	sw	a0,-40(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
8000da8c:	fdc42783          	lw	a5,-36(s0)
8000da90:	0147c783          	lbu	a5,20(a5)
8000da94:	f7f7f793          	andi	a5,a5,-129
8000da98:	fc844703          	lbu	a4,-56(s0)
8000da9c:	00e78863          	beq	a5,a4,8000daac <list_timer+0xcc>
                {
                    rt_hw_interrupt_enable(level);
8000daa0:	fd842503          	lw	a0,-40(s0)
8000daa4:	e04f20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                    continue;
8000daa8:	0940006f          	j	8000db3c <list_timer+0x15c>
                }

                rt_hw_interrupt_enable(level);
8000daac:	fd842503          	lw	a0,-40(s0)
8000dab0:	df8f20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

                timer = (struct rt_timer *)obj;
8000dab4:	fdc42783          	lw	a5,-36(s0)
8000dab8:	fcf42a23          	sw	a5,-44(s0)
                rt_kprintf("%-*.*s 0x%08x 0x%08x ",
                           maxlen, RT_NAME_MAX,
                           timer->parent.name,
8000dabc:	fd442683          	lw	a3,-44(s0)
                rt_kprintf("%-*.*s 0x%08x 0x%08x ",
8000dac0:	fd442783          	lw	a5,-44(s0)
8000dac4:	0307a703          	lw	a4,48(a5)
8000dac8:	fd442783          	lw	a5,-44(s0)
8000dacc:	0347a783          	lw	a5,52(a5)
8000dad0:	01400613          	li	a2,20
8000dad4:	fe042583          	lw	a1,-32(s0)
8000dad8:	00019517          	auipc	a0,0x19
8000dadc:	92c50513          	addi	a0,a0,-1748 # 80026404 <raise+0x810>
8000dae0:	748070ef          	jal	ra,80015228 <rt_kprintf>
                           timer->init_tick,
                           timer->timeout_tick);
                if (timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
8000dae4:	fd442783          	lw	a5,-44(s0)
8000dae8:	0157c783          	lbu	a5,21(a5)
8000daec:	0017f793          	andi	a5,a5,1
8000daf0:	00078a63          	beqz	a5,8000db04 <list_timer+0x124>
                    rt_kprintf("activated   ");
8000daf4:	00019517          	auipc	a0,0x19
8000daf8:	92850513          	addi	a0,a0,-1752 # 8002641c <raise+0x828>
8000dafc:	72c070ef          	jal	ra,80015228 <rt_kprintf>
8000db00:	0100006f          	j	8000db10 <list_timer+0x130>
                else
                    rt_kprintf("deactivated ");
8000db04:	00019517          	auipc	a0,0x19
8000db08:	92850513          	addi	a0,a0,-1752 # 8002642c <raise+0x838>
8000db0c:	71c070ef          	jal	ra,80015228 <rt_kprintf>
                if (timer->parent.flag & RT_TIMER_FLAG_PERIODIC)
8000db10:	fd442783          	lw	a5,-44(s0)
8000db14:	0157c783          	lbu	a5,21(a5)
8000db18:	0027f793          	andi	a5,a5,2
8000db1c:	00078a63          	beqz	a5,8000db30 <list_timer+0x150>
                    rt_kprintf("periodic\n");
8000db20:	00019517          	auipc	a0,0x19
8000db24:	91c50513          	addi	a0,a0,-1764 # 8002643c <raise+0x848>
8000db28:	700070ef          	jal	ra,80015228 <rt_kprintf>
8000db2c:	0100006f          	j	8000db3c <list_timer+0x15c>
                else
                    rt_kprintf("one shot\n");
8000db30:	00019517          	auipc	a0,0x19
8000db34:	91850513          	addi	a0,a0,-1768 # 80026448 <raise+0x854>
8000db38:	6f0070ef          	jal	ra,80015228 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
8000db3c:	fe842783          	lw	a5,-24(s0)
8000db40:	00178793          	addi	a5,a5,1
8000db44:	fef42423          	sw	a5,-24(s0)
8000db48:	fd042783          	lw	a5,-48(s0)
8000db4c:	fe842703          	lw	a4,-24(s0)
8000db50:	f0f74ce3          	blt	a4,a5,8000da68 <list_timer+0x88>

            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
8000db54:	fec42783          	lw	a5,-20(s0)
8000db58:	ee079ae3          	bnez	a5,8000da4c <list_timer+0x6c>

    rt_kprintf("current tick:0x%08x\n", rt_tick_get());
8000db5c:	1f1040ef          	jal	ra,8001254c <rt_tick_get>
8000db60:	00050793          	mv	a5,a0
8000db64:	00078593          	mv	a1,a5
8000db68:	00019517          	auipc	a0,0x19
8000db6c:	8ec50513          	addi	a0,a0,-1812 # 80026454 <raise+0x860>
8000db70:	6b8070ef          	jal	ra,80015228 <rt_kprintf>

    return 0;
8000db74:	00000793          	li	a5,0
}
8000db78:	00078513          	mv	a0,a5
8000db7c:	05c12083          	lw	ra,92(sp)
8000db80:	05812403          	lw	s0,88(sp)
8000db84:	06010113          	addi	sp,sp,96
8000db88:	00008067          	ret

8000db8c <list_device>:
    "WDT Device",
    "PWM Device",
};

long list_device(void)
{
8000db8c:	f9010113          	addi	sp,sp,-112
8000db90:	06112623          	sw	ra,108(sp)
8000db94:	06812423          	sw	s0,104(sp)
8000db98:	07010413          	addi	s0,sp,112
    rt_base_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
8000db9c:	fe042623          	sw	zero,-20(s0)
    const char *device_type;

    int maxlen;
    const char *item_title = "device";
8000dba0:	00019797          	auipc	a5,0x19
8000dba4:	a7078793          	addi	a5,a5,-1424 # 80026610 <raise+0xa1c>
8000dba8:	fef42023          	sw	a5,-32(s0)

    list_find_init(&find_arg, RT_Object_Class_Device, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
8000dbac:	f9c40713          	addi	a4,s0,-100
8000dbb0:	fbc40793          	addi	a5,s0,-68
8000dbb4:	00800693          	li	a3,8
8000dbb8:	00070613          	mv	a2,a4
8000dbbc:	00900593          	li	a1,9
8000dbc0:	00078513          	mv	a0,a5
8000dbc4:	df9fe0ef          	jal	ra,8000c9bc <list_find_init>

    maxlen = RT_NAME_MAX;
8000dbc8:	01400793          	li	a5,20
8000dbcc:	fcf42e23          	sw	a5,-36(s0)

    rt_kprintf("%-*.s         type         ref count\n", maxlen, item_title);
8000dbd0:	fe042603          	lw	a2,-32(s0)
8000dbd4:	fdc42583          	lw	a1,-36(s0)
8000dbd8:	00019517          	auipc	a0,0x19
8000dbdc:	a4050513          	addi	a0,a0,-1472 # 80026618 <raise+0xa24>
8000dbe0:	648070ef          	jal	ra,80015228 <rt_kprintf>
    object_split(maxlen);
8000dbe4:	fdc42503          	lw	a0,-36(s0)
8000dbe8:	d89fe0ef          	jal	ra,8000c970 <object_split>
    rt_kprintf(" -------------------- ----------\n");
8000dbec:	00019517          	auipc	a0,0x19
8000dbf0:	a5450513          	addi	a0,a0,-1452 # 80026640 <raise+0xa4c>
8000dbf4:	634070ef          	jal	ra,80015228 <rt_kprintf>
    do
    {
        next = list_get_next(next, &find_arg);
8000dbf8:	fbc40793          	addi	a5,s0,-68
8000dbfc:	00078593          	mv	a1,a5
8000dc00:	fec42503          	lw	a0,-20(s0)
8000dc04:	e45fe0ef          	jal	ra,8000ca48 <list_get_next>
8000dc08:	fea42623          	sw	a0,-20(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
8000dc0c:	fe042223          	sw	zero,-28(s0)
8000dc10:	0e40006f          	j	8000dcf4 <list_device+0x168>
            {
                struct rt_object *obj;
                struct rt_device *device;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
8000dc14:	fe442783          	lw	a5,-28(s0)
8000dc18:	00279793          	slli	a5,a5,0x2
8000dc1c:	ff078793          	addi	a5,a5,-16
8000dc20:	008787b3          	add	a5,a5,s0
8000dc24:	fac7a783          	lw	a5,-84(a5)
8000dc28:	fe878793          	addi	a5,a5,-24
8000dc2c:	fcf42c23          	sw	a5,-40(s0)
                level = rt_hw_interrupt_disable();
8000dc30:	c70f20ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8000dc34:	fca42a23          	sw	a0,-44(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
8000dc38:	fd842783          	lw	a5,-40(s0)
8000dc3c:	0147c783          	lbu	a5,20(a5)
8000dc40:	f7f7f793          	andi	a5,a5,-129
8000dc44:	fc444703          	lbu	a4,-60(s0)
8000dc48:	00e78863          	beq	a5,a4,8000dc58 <list_device+0xcc>
                {
                    rt_hw_interrupt_enable(level);
8000dc4c:	fd442503          	lw	a0,-44(s0)
8000dc50:	c58f20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                    continue;
8000dc54:	0940006f          	j	8000dce8 <list_device+0x15c>
                }

                rt_hw_interrupt_enable(level);
8000dc58:	fd442503          	lw	a0,-44(s0)
8000dc5c:	c4cf20ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

                device = (struct rt_device *)obj;
8000dc60:	fd842783          	lw	a5,-40(s0)
8000dc64:	fcf42823          	sw	a5,-48(s0)
                device_type = "Unknown";
8000dc68:	00019797          	auipc	a5,0x19
8000dc6c:	9fc78793          	addi	a5,a5,-1540 # 80026664 <raise+0xa70>
8000dc70:	fef42423          	sw	a5,-24(s0)
                if (device->type < RT_Device_Class_Unknown &&
8000dc74:	fd042783          	lw	a5,-48(s0)
8000dc78:	0207a703          	lw	a4,32(a5)
8000dc7c:	01d00793          	li	a5,29
8000dc80:	04e7e263          	bltu	a5,a4,8000dcc4 <list_device+0x138>
                    device_type_str[device->type] != RT_NULL)
8000dc84:	fd042783          	lw	a5,-48(s0)
8000dc88:	0207a783          	lw	a5,32(a5)
8000dc8c:	0001a717          	auipc	a4,0x1a
8000dc90:	48c70713          	addi	a4,a4,1164 # 80028118 <device_type_str>
8000dc94:	00279793          	slli	a5,a5,0x2
8000dc98:	00f707b3          	add	a5,a4,a5
8000dc9c:	0007a783          	lw	a5,0(a5)
                if (device->type < RT_Device_Class_Unknown &&
8000dca0:	02078263          	beqz	a5,8000dcc4 <list_device+0x138>
                {
                    device_type = device_type_str[device->type];
8000dca4:	fd042783          	lw	a5,-48(s0)
8000dca8:	0207a783          	lw	a5,32(a5)
8000dcac:	0001a717          	auipc	a4,0x1a
8000dcb0:	46c70713          	addi	a4,a4,1132 # 80028118 <device_type_str>
8000dcb4:	00279793          	slli	a5,a5,0x2
8000dcb8:	00f707b3          	add	a5,a4,a5
8000dcbc:	0007a783          	lw	a5,0(a5)
8000dcc0:	fef42423          	sw	a5,-24(s0)
                }
                rt_kprintf("%-*.*s %-20s %-8d\n",
                           maxlen, RT_NAME_MAX,
                           device->parent.name,
8000dcc4:	fd042683          	lw	a3,-48(s0)
                           device_type,
                           device->ref_count);
8000dcc8:	fd042783          	lw	a5,-48(s0)
8000dccc:	0287c783          	lbu	a5,40(a5)
                rt_kprintf("%-*.*s %-20s %-8d\n",
8000dcd0:	fe842703          	lw	a4,-24(s0)
8000dcd4:	01400613          	li	a2,20
8000dcd8:	fdc42583          	lw	a1,-36(s0)
8000dcdc:	00019517          	auipc	a0,0x19
8000dce0:	99050513          	addi	a0,a0,-1648 # 8002666c <raise+0xa78>
8000dce4:	544070ef          	jal	ra,80015228 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
8000dce8:	fe442783          	lw	a5,-28(s0)
8000dcec:	00178793          	addi	a5,a5,1
8000dcf0:	fef42223          	sw	a5,-28(s0)
8000dcf4:	fcc42783          	lw	a5,-52(s0)
8000dcf8:	fe442703          	lw	a4,-28(s0)
8000dcfc:	f0f74ce3          	blt	a4,a5,8000dc14 <list_device+0x88>

            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
8000dd00:	fec42783          	lw	a5,-20(s0)
8000dd04:	ee079ae3          	bnez	a5,8000dbf8 <list_device+0x6c>

    return 0;
8000dd08:	00000793          	li	a5,0
}
8000dd0c:	00078513          	mv	a0,a5
8000dd10:	06c12083          	lw	ra,108(sp)
8000dd14:	06812403          	lw	s0,104(sp)
8000dd18:	07010113          	addi	sp,sp,112
8000dd1c:	00008067          	ret

8000dd20 <cmd_list>:
MSH_CMD_EXPORT(list_device, list device in system);
#endif

int cmd_list(int argc, char **argv)
{
8000dd20:	fe010113          	addi	sp,sp,-32
8000dd24:	00112e23          	sw	ra,28(sp)
8000dd28:	00812c23          	sw	s0,24(sp)
8000dd2c:	02010413          	addi	s0,sp,32
8000dd30:	fea42623          	sw	a0,-20(s0)
8000dd34:	feb42423          	sw	a1,-24(s0)
    if(argc == 2)
8000dd38:	fec42703          	lw	a4,-20(s0)
8000dd3c:	00200793          	li	a5,2
8000dd40:	1cf71063          	bne	a4,a5,8000df00 <cmd_list+0x1e0>
    {
        if(strcmp(argv[1], "thread") == 0)
8000dd44:	fe842783          	lw	a5,-24(s0)
8000dd48:	00478793          	addi	a5,a5,4
8000dd4c:	0007a783          	lw	a5,0(a5)
8000dd50:	00018597          	auipc	a1,0x18
8000dd54:	29458593          	addi	a1,a1,660 # 80025fe4 <raise+0x3f0>
8000dd58:	00078513          	mv	a0,a5
8000dd5c:	d74f20ef          	jal	ra,800002d0 <strcmp>
8000dd60:	00050793          	mv	a5,a0
8000dd64:	00079663          	bnez	a5,8000dd70 <cmd_list+0x50>
        {
            list_thread();
8000dd68:	e2dfe0ef          	jal	ra,8000cb94 <list_thread>
8000dd6c:	18c0006f          	j	8000def8 <cmd_list+0x1d8>
        }
        else if(strcmp(argv[1], "timer") == 0)
8000dd70:	fe842783          	lw	a5,-24(s0)
8000dd74:	00478793          	addi	a5,a5,4
8000dd78:	0007a783          	lw	a5,0(a5)
8000dd7c:	00018597          	auipc	a1,0x18
8000dd80:	61c58593          	addi	a1,a1,1564 # 80026398 <raise+0x7a4>
8000dd84:	00078513          	mv	a0,a5
8000dd88:	d48f20ef          	jal	ra,800002d0 <strcmp>
8000dd8c:	00050793          	mv	a5,a0
8000dd90:	00079663          	bnez	a5,8000dd9c <cmd_list+0x7c>
        {
            list_timer();
8000dd94:	c4dff0ef          	jal	ra,8000d9e0 <list_timer>
8000dd98:	1600006f          	j	8000def8 <cmd_list+0x1d8>
        }
#ifdef RT_USING_SEMAPHORE
        else if(strcmp(argv[1], "sem") == 0)
8000dd9c:	fe842783          	lw	a5,-24(s0)
8000dda0:	00478793          	addi	a5,a5,4
8000dda4:	0007a783          	lw	a5,0(a5)
8000dda8:	00019597          	auipc	a1,0x19
8000ddac:	8d858593          	addi	a1,a1,-1832 # 80026680 <raise+0xa8c>
8000ddb0:	00078513          	mv	a0,a5
8000ddb4:	d1cf20ef          	jal	ra,800002d0 <strcmp>
8000ddb8:	00050793          	mv	a5,a0
8000ddbc:	00079663          	bnez	a5,8000ddc8 <cmd_list+0xa8>
        {
            list_sem();
8000ddc0:	92cff0ef          	jal	ra,8000ceec <list_sem>
8000ddc4:	1340006f          	j	8000def8 <cmd_list+0x1d8>
        }
#endif /* RT_USING_SEMAPHORE */
#ifdef RT_USING_EVENT
        else if(strcmp(argv[1], "event") == 0)
8000ddc8:	fe842783          	lw	a5,-24(s0)
8000ddcc:	00478793          	addi	a5,a5,4
8000ddd0:	0007a783          	lw	a5,0(a5)
8000ddd4:	00018597          	auipc	a1,0x18
8000ddd8:	37c58593          	addi	a1,a1,892 # 80026150 <raise+0x55c>
8000dddc:	00078513          	mv	a0,a5
8000dde0:	cf0f20ef          	jal	ra,800002d0 <strcmp>
8000dde4:	00050793          	mv	a5,a0
8000dde8:	00079663          	bnez	a5,8000ddf4 <cmd_list+0xd4>
        {
            list_event();
8000ddec:	adcff0ef          	jal	ra,8000d0c8 <list_event>
8000ddf0:	1080006f          	j	8000def8 <cmd_list+0x1d8>
        }
#endif /* RT_USING_EVENT */
#ifdef RT_USING_MUTEX
        else if(strcmp(argv[1], "mutex") == 0)
8000ddf4:	fe842783          	lw	a5,-24(s0)
8000ddf8:	00478793          	addi	a5,a5,4
8000ddfc:	0007a783          	lw	a5,0(a5)
8000de00:	00018597          	auipc	a1,0x18
8000de04:	3c858593          	addi	a1,a1,968 # 800261c8 <raise+0x5d4>
8000de08:	00078513          	mv	a0,a5
8000de0c:	cc4f20ef          	jal	ra,800002d0 <strcmp>
8000de10:	00050793          	mv	a5,a0
8000de14:	00079663          	bnez	a5,8000de20 <cmd_list+0x100>
        {
            list_mutex();
8000de18:	c6cff0ef          	jal	ra,8000d284 <list_mutex>
8000de1c:	0dc0006f          	j	8000def8 <cmd_list+0x1d8>
        }
#endif /* RT_USING_MUTEX */
#ifdef RT_USING_MAILBOX
        else if(strcmp(argv[1], "mailbox") == 0)
8000de20:	fe842783          	lw	a5,-24(s0)
8000de24:	00478793          	addi	a5,a5,4
8000de28:	0007a783          	lw	a5,0(a5)
8000de2c:	00018597          	auipc	a1,0x18
8000de30:	40058593          	addi	a1,a1,1024 # 8002622c <raise+0x638>
8000de34:	00078513          	mv	a0,a5
8000de38:	c98f20ef          	jal	ra,800002d0 <strcmp>
8000de3c:	00050793          	mv	a5,a0
8000de40:	00079663          	bnez	a5,8000de4c <cmd_list+0x12c>
        {
            list_mailbox();
8000de44:	dc4ff0ef          	jal	ra,8000d408 <list_mailbox>
8000de48:	0b00006f          	j	8000def8 <cmd_list+0x1d8>
        }
#endif  /* RT_USING_MAILBOX */
#ifdef RT_USING_MESSAGEQUEUE
        else if(strcmp(argv[1], "msgqueue") == 0)
8000de4c:	fe842783          	lw	a5,-24(s0)
8000de50:	00478793          	addi	a5,a5,4
8000de54:	0007a783          	lw	a5,0(a5)
8000de58:	00018597          	auipc	a1,0x18
8000de5c:	44c58593          	addi	a1,a1,1100 # 800262a4 <raise+0x6b0>
8000de60:	00078513          	mv	a0,a5
8000de64:	c6cf20ef          	jal	ra,800002d0 <strcmp>
8000de68:	00050793          	mv	a5,a0
8000de6c:	00079663          	bnez	a5,8000de78 <cmd_list+0x158>
        {
            list_msgqueue();
8000de70:	fa4ff0ef          	jal	ra,8000d614 <list_msgqueue>
8000de74:	0840006f          	j	8000def8 <cmd_list+0x1d8>
        }
#endif /* RT_USING_MESSAGEQUEUE */
#ifdef RT_USING_MEMPOOL
        else if(strcmp(argv[1], "mempool") == 0)
8000de78:	fe842783          	lw	a5,-24(s0)
8000de7c:	00478793          	addi	a5,a5,4
8000de80:	0007a783          	lw	a5,0(a5)
8000de84:	00018597          	auipc	a1,0x18
8000de88:	48858593          	addi	a1,a1,1160 # 8002630c <raise+0x718>
8000de8c:	00078513          	mv	a0,a5
8000de90:	c40f20ef          	jal	ra,800002d0 <strcmp>
8000de94:	00050793          	mv	a5,a0
8000de98:	00079663          	bnez	a5,8000dea4 <cmd_list+0x184>
        {
            list_mempool();
8000de9c:	955ff0ef          	jal	ra,8000d7f0 <list_mempool>
8000dea0:	0580006f          	j	8000def8 <cmd_list+0x1d8>
        }
#endif /* RT_USING_MEMPOOL */
#ifdef RT_USING_DEVICE
        else if(strcmp(argv[1], "device") == 0)
8000dea4:	fe842783          	lw	a5,-24(s0)
8000dea8:	00478793          	addi	a5,a5,4
8000deac:	0007a783          	lw	a5,0(a5)
8000deb0:	00018597          	auipc	a1,0x18
8000deb4:	76058593          	addi	a1,a1,1888 # 80026610 <raise+0xa1c>
8000deb8:	00078513          	mv	a0,a5
8000debc:	c14f20ef          	jal	ra,800002d0 <strcmp>
8000dec0:	00050793          	mv	a5,a0
8000dec4:	00079663          	bnez	a5,8000ded0 <cmd_list+0x1b0>
        {
            list_device();
8000dec8:	cc5ff0ef          	jal	ra,8000db8c <list_device>
8000decc:	02c0006f          	j	8000def8 <cmd_list+0x1d8>
        }
#endif /* RT_USING_DEVICE */
#ifdef RT_USING_DFS
        else if(strcmp(argv[1], "fd") == 0)
8000ded0:	fe842783          	lw	a5,-24(s0)
8000ded4:	00478793          	addi	a5,a5,4
8000ded8:	0007a783          	lw	a5,0(a5)
8000dedc:	00018597          	auipc	a1,0x18
8000dee0:	7a858593          	addi	a1,a1,1960 # 80026684 <raise+0xa90>
8000dee4:	00078513          	mv	a0,a5
8000dee8:	be8f20ef          	jal	ra,800002d0 <strcmp>
8000deec:	00050793          	mv	a5,a0
8000def0:	00079c63          	bnez	a5,8000df08 <cmd_list+0x1e8>
        {
            extern int list_fd(void);
            list_fd();
8000def4:	e1cf90ef          	jal	ra,80007510 <list_fd>
        else
        {
            goto _usage;
        }

        return 0;
8000def8:	00000793          	li	a5,0
8000defc:	0a40006f          	j	8000dfa0 <cmd_list+0x280>
    }

_usage:
8000df00:	00000013          	nop
8000df04:	0080006f          	j	8000df0c <cmd_list+0x1ec>
            goto _usage;
8000df08:	00000013          	nop
    rt_kprintf("Usage: list [options]\n");
8000df0c:	00018517          	auipc	a0,0x18
8000df10:	77c50513          	addi	a0,a0,1916 # 80026688 <raise+0xa94>
8000df14:	314070ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("[options]:\n");
8000df18:	00018517          	auipc	a0,0x18
8000df1c:	78850513          	addi	a0,a0,1928 # 800266a0 <raise+0xaac>
8000df20:	308070ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("    thread - list threads\n");
8000df24:	00018517          	auipc	a0,0x18
8000df28:	78850513          	addi	a0,a0,1928 # 800266ac <raise+0xab8>
8000df2c:	2fc070ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("    timer - list timers\n");
8000df30:	00018517          	auipc	a0,0x18
8000df34:	79850513          	addi	a0,a0,1944 # 800266c8 <raise+0xad4>
8000df38:	2f0070ef          	jal	ra,80015228 <rt_kprintf>
#ifdef RT_USING_SEMAPHORE
    rt_kprintf("    sem - list semaphores\n");
8000df3c:	00018517          	auipc	a0,0x18
8000df40:	7a850513          	addi	a0,a0,1960 # 800266e4 <raise+0xaf0>
8000df44:	2e4070ef          	jal	ra,80015228 <rt_kprintf>
#endif /* RT_USING_SEMAPHORE */
#ifdef RT_USING_MUTEX
    rt_kprintf("    mutex - list mutexs\n");
8000df48:	00018517          	auipc	a0,0x18
8000df4c:	7b850513          	addi	a0,a0,1976 # 80026700 <raise+0xb0c>
8000df50:	2d8070ef          	jal	ra,80015228 <rt_kprintf>
#endif /* RT_USING_MUTEX */
#ifdef RT_USING_EVENT
    rt_kprintf("    event - list events\n");
8000df54:	00018517          	auipc	a0,0x18
8000df58:	7c850513          	addi	a0,a0,1992 # 8002671c <raise+0xb28>
8000df5c:	2cc070ef          	jal	ra,80015228 <rt_kprintf>
#endif /* RT_USING_EVENT */
#ifdef RT_USING_MAILBOX
    rt_kprintf("    mailbox - list mailboxs\n");
8000df60:	00018517          	auipc	a0,0x18
8000df64:	7d850513          	addi	a0,a0,2008 # 80026738 <raise+0xb44>
8000df68:	2c0070ef          	jal	ra,80015228 <rt_kprintf>
#endif /* RT_USING_MAILBOX */
#ifdef RT_USING_MESSAGEQUEUE
    rt_kprintf("    msgqueue - list message queues\n");
8000df6c:	00018517          	auipc	a0,0x18
8000df70:	7ec50513          	addi	a0,a0,2028 # 80026758 <raise+0xb64>
8000df74:	2b4070ef          	jal	ra,80015228 <rt_kprintf>
#endif /* RT_USING_MESSAGEQUEUE */
#ifdef RT_USING_MEMPOOL
    rt_kprintf("    mempool - list memory pools\n");
8000df78:	00019517          	auipc	a0,0x19
8000df7c:	80450513          	addi	a0,a0,-2044 # 8002677c <raise+0xb88>
8000df80:	2a8070ef          	jal	ra,80015228 <rt_kprintf>
#endif /* RT_USING_MEMPOOL */
#ifdef RT_USING_DEVICE
    rt_kprintf("    device - list devices\n");
8000df84:	00019517          	auipc	a0,0x19
8000df88:	81c50513          	addi	a0,a0,-2020 # 800267a0 <raise+0xbac>
8000df8c:	29c070ef          	jal	ra,80015228 <rt_kprintf>
#endif /* RT_USING_DEVICE */
#ifdef RT_USING_DFS
    rt_kprintf("    fd - list file descriptors\n");
8000df90:	00019517          	auipc	a0,0x19
8000df94:	82c50513          	addi	a0,a0,-2004 # 800267bc <raise+0xbc8>
8000df98:	290070ef          	jal	ra,80015228 <rt_kprintf>
#endif /* RT_USING_DFS */

    return 0;
8000df9c:	00000793          	li	a5,0
}
8000dfa0:	00078513          	mv	a0,a5
8000dfa4:	01c12083          	lw	ra,28(sp)
8000dfa8:	01812403          	lw	s0,24(sp)
8000dfac:	02010113          	addi	sp,sp,32
8000dfb0:	00008067          	ret

8000dfb4 <msh_help>:
#endif /* RT_USING_MODULE */

typedef int (*cmd_function_t)(int argc, char **argv);

int msh_help(int argc, char **argv)
{
8000dfb4:	fd010113          	addi	sp,sp,-48
8000dfb8:	02112623          	sw	ra,44(sp)
8000dfbc:	02812423          	sw	s0,40(sp)
8000dfc0:	03010413          	addi	s0,sp,48
8000dfc4:	fca42e23          	sw	a0,-36(s0)
8000dfc8:	fcb42c23          	sw	a1,-40(s0)
    rt_kprintf("RT-Thread shell commands:\n");
8000dfcc:	00019517          	auipc	a0,0x19
8000dfd0:	81050513          	addi	a0,a0,-2032 # 800267dc <raise+0xbe8>
8000dfd4:	254070ef          	jal	ra,80015228 <rt_kprintf>
    {
        struct finsh_syscall *index;

        for (index = _syscall_table_begin;
8000dfd8:	00076797          	auipc	a5,0x76
8000dfdc:	04078793          	addi	a5,a5,64 # 80084018 <_syscall_table_begin>
8000dfe0:	0007a783          	lw	a5,0(a5)
8000dfe4:	fef42623          	sw	a5,-20(s0)
8000dfe8:	0340006f          	j	8000e01c <msh_help+0x68>
                index < _syscall_table_end;
                FINSH_NEXT_SYSCALL(index))
        {
#if defined(FINSH_USING_DESCRIPTION) && defined(FINSH_USING_SYMTAB)
            rt_kprintf("%-16s - %s\n", index->name, index->desc);
8000dfec:	fec42783          	lw	a5,-20(s0)
8000dff0:	0007a703          	lw	a4,0(a5)
8000dff4:	fec42783          	lw	a5,-20(s0)
8000dff8:	0047a783          	lw	a5,4(a5)
8000dffc:	00078613          	mv	a2,a5
8000e000:	00070593          	mv	a1,a4
8000e004:	00018517          	auipc	a0,0x18
8000e008:	7f450513          	addi	a0,a0,2036 # 800267f8 <raise+0xc04>
8000e00c:	21c070ef          	jal	ra,80015228 <rt_kprintf>
                FINSH_NEXT_SYSCALL(index))
8000e010:	fec42783          	lw	a5,-20(s0)
8000e014:	00c78793          	addi	a5,a5,12
8000e018:	fef42623          	sw	a5,-20(s0)
                index < _syscall_table_end;
8000e01c:	00076797          	auipc	a5,0x76
8000e020:	00078793          	mv	a5,a5
8000e024:	0007a783          	lw	a5,0(a5) # 8008401c <_syscall_table_end>
8000e028:	fec42703          	lw	a4,-20(s0)
8000e02c:	fcf760e3          	bltu	a4,a5,8000dfec <msh_help+0x38>
#else
            rt_kprintf("%s ", index->name);
#endif
        }
    }
    rt_kprintf("\n");
8000e030:	00018517          	auipc	a0,0x18
8000e034:	7d450513          	addi	a0,a0,2004 # 80026804 <raise+0xc10>
8000e038:	1f0070ef          	jal	ra,80015228 <rt_kprintf>

    return 0;
8000e03c:	00000793          	li	a5,0
}
8000e040:	00078513          	mv	a0,a5
8000e044:	02c12083          	lw	ra,44(sp)
8000e048:	02812403          	lw	s0,40(sp)
8000e04c:	03010113          	addi	sp,sp,48
8000e050:	00008067          	ret

8000e054 <cmd_ps>:
MSH_CMD_EXPORT_ALIAS(msh_help, help, RT-Thread shell help.);

#ifdef MSH_USING_BUILT_IN_COMMANDS
int cmd_ps(int argc, char **argv)
{
8000e054:	fe010113          	addi	sp,sp,-32
8000e058:	00112e23          	sw	ra,28(sp)
8000e05c:	00812c23          	sw	s0,24(sp)
8000e060:	02010413          	addi	s0,sp,32
8000e064:	fea42623          	sw	a0,-20(s0)
8000e068:	feb42423          	sw	a1,-24(s0)
#ifdef RT_USING_MODULE
    if ((argc == 2) && (strcmp(argv[1], "-m") == 0))
        list_module();
    else
#endif
        list_thread();
8000e06c:	b29fe0ef          	jal	ra,8000cb94 <list_thread>
    return 0;
8000e070:	00000793          	li	a5,0
}
8000e074:	00078513          	mv	a0,a5
8000e078:	01c12083          	lw	ra,28(sp)
8000e07c:	01812403          	lw	s0,24(sp)
8000e080:	02010113          	addi	sp,sp,32
8000e084:	00008067          	ret

8000e088 <cmd_free>:
MSH_CMD_EXPORT_ALIAS(cmd_ps, ps, List threads in the system.);

#ifdef RT_USING_HEAP
int cmd_free(int argc, char **argv)
{
8000e088:	fd010113          	addi	sp,sp,-48
8000e08c:	02112623          	sw	ra,44(sp)
8000e090:	02812423          	sw	s0,40(sp)
8000e094:	03010413          	addi	s0,sp,48
8000e098:	fca42e23          	sw	a0,-36(s0)
8000e09c:	fcb42c23          	sw	a1,-40(s0)
#ifdef RT_USING_MEMHEAP_AS_HEAP
    extern void list_memheap(void);
    list_memheap();
#else
    rt_size_t total = 0, used = 0, max_used = 0;
8000e0a0:	fe042623          	sw	zero,-20(s0)
8000e0a4:	fe042423          	sw	zero,-24(s0)
8000e0a8:	fe042223          	sw	zero,-28(s0)

    rt_memory_info(&total, &used, &max_used);
8000e0ac:	fe440693          	addi	a3,s0,-28
8000e0b0:	fe840713          	addi	a4,s0,-24
8000e0b4:	fec40793          	addi	a5,s0,-20
8000e0b8:	00068613          	mv	a2,a3
8000e0bc:	00070593          	mv	a1,a4
8000e0c0:	00078513          	mv	a0,a5
8000e0c4:	5c4070ef          	jal	ra,80015688 <rt_memory_info>
    rt_kprintf("total    : %d\n", total);
8000e0c8:	fec42783          	lw	a5,-20(s0)
8000e0cc:	00078593          	mv	a1,a5
8000e0d0:	00018517          	auipc	a0,0x18
8000e0d4:	73850513          	addi	a0,a0,1848 # 80026808 <raise+0xc14>
8000e0d8:	150070ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("used     : %d\n", used);
8000e0dc:	fe842783          	lw	a5,-24(s0)
8000e0e0:	00078593          	mv	a1,a5
8000e0e4:	00018517          	auipc	a0,0x18
8000e0e8:	73450513          	addi	a0,a0,1844 # 80026818 <raise+0xc24>
8000e0ec:	13c070ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("maximum  : %d\n", max_used);
8000e0f0:	fe442783          	lw	a5,-28(s0)
8000e0f4:	00078593          	mv	a1,a5
8000e0f8:	00018517          	auipc	a0,0x18
8000e0fc:	73050513          	addi	a0,a0,1840 # 80026828 <raise+0xc34>
8000e100:	128070ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("available: %d\n", total - used);
8000e104:	fec42703          	lw	a4,-20(s0)
8000e108:	fe842783          	lw	a5,-24(s0)
8000e10c:	40f707b3          	sub	a5,a4,a5
8000e110:	00078593          	mv	a1,a5
8000e114:	00018517          	auipc	a0,0x18
8000e118:	72450513          	addi	a0,a0,1828 # 80026838 <raise+0xc44>
8000e11c:	10c070ef          	jal	ra,80015228 <rt_kprintf>
#endif
    return 0;
8000e120:	00000793          	li	a5,0
}
8000e124:	00078513          	mv	a0,a5
8000e128:	02c12083          	lw	ra,44(sp)
8000e12c:	02812403          	lw	s0,40(sp)
8000e130:	03010113          	addi	sp,sp,48
8000e134:	00008067          	ret

8000e138 <msh_split>:
MSH_CMD_EXPORT_ALIAS(cmd_free, free, Show the memory usage in the system.);
#endif /* RT_USING_HEAP */
#endif /* MSH_USING_BUILT_IN_COMMANDS */

static int msh_split(char *cmd, rt_size_t length, char *argv[FINSH_ARG_MAX])
{
8000e138:	fd010113          	addi	sp,sp,-48
8000e13c:	02112623          	sw	ra,44(sp)
8000e140:	02812423          	sw	s0,40(sp)
8000e144:	03010413          	addi	s0,sp,48
8000e148:	fca42e23          	sw	a0,-36(s0)
8000e14c:	fcb42c23          	sw	a1,-40(s0)
8000e150:	fcc42a23          	sw	a2,-44(s0)
    char *ptr;
    rt_size_t position;
    rt_size_t argc;
    rt_size_t i;

    ptr = cmd;
8000e154:	fdc42783          	lw	a5,-36(s0)
8000e158:	fef42623          	sw	a5,-20(s0)
    position = 0;
8000e15c:	fe042423          	sw	zero,-24(s0)
    argc = 0;
8000e160:	fe042223          	sw	zero,-28(s0)

    while (position < length)
8000e164:	2300006f          	j	8000e394 <msh_split+0x25c>
    {
        /* strip bank and tab */
        while ((*ptr == ' ' || *ptr == '\t') && position < length)
        {
            *ptr = '\0';
8000e168:	fec42783          	lw	a5,-20(s0)
8000e16c:	00078023          	sb	zero,0(a5)
            ptr ++;
8000e170:	fec42783          	lw	a5,-20(s0)
8000e174:	00178793          	addi	a5,a5,1
8000e178:	fef42623          	sw	a5,-20(s0)
            position ++;
8000e17c:	fe842783          	lw	a5,-24(s0)
8000e180:	00178793          	addi	a5,a5,1
8000e184:	fef42423          	sw	a5,-24(s0)
        while ((*ptr == ' ' || *ptr == '\t') && position < length)
8000e188:	fec42783          	lw	a5,-20(s0)
8000e18c:	0007c703          	lbu	a4,0(a5)
8000e190:	02000793          	li	a5,32
8000e194:	00f70a63          	beq	a4,a5,8000e1a8 <msh_split+0x70>
8000e198:	fec42783          	lw	a5,-20(s0)
8000e19c:	0007c703          	lbu	a4,0(a5)
8000e1a0:	00900793          	li	a5,9
8000e1a4:	00f71863          	bne	a4,a5,8000e1b4 <msh_split+0x7c>
8000e1a8:	fe842703          	lw	a4,-24(s0)
8000e1ac:	fd842783          	lw	a5,-40(s0)
8000e1b0:	faf76ce3          	bltu	a4,a5,8000e168 <msh_split+0x30>
        }

        if (argc >= FINSH_ARG_MAX)
8000e1b4:	fe442703          	lw	a4,-28(s0)
8000e1b8:	00900793          	li	a5,9
8000e1bc:	06e7f263          	bgeu	a5,a4,8000e220 <msh_split+0xe8>
        {
            rt_kprintf("Too many args ! We only Use:\n");
8000e1c0:	00018517          	auipc	a0,0x18
8000e1c4:	68850513          	addi	a0,a0,1672 # 80026848 <raise+0xc54>
8000e1c8:	060070ef          	jal	ra,80015228 <rt_kprintf>
            for (i = 0; i < argc; i++)
8000e1cc:	fe042023          	sw	zero,-32(s0)
8000e1d0:	0340006f          	j	8000e204 <msh_split+0xcc>
            {
                rt_kprintf("%s ", argv[i]);
8000e1d4:	fe042783          	lw	a5,-32(s0)
8000e1d8:	00279793          	slli	a5,a5,0x2
8000e1dc:	fd442703          	lw	a4,-44(s0)
8000e1e0:	00f707b3          	add	a5,a4,a5
8000e1e4:	0007a783          	lw	a5,0(a5)
8000e1e8:	00078593          	mv	a1,a5
8000e1ec:	00018517          	auipc	a0,0x18
8000e1f0:	67c50513          	addi	a0,a0,1660 # 80026868 <raise+0xc74>
8000e1f4:	034070ef          	jal	ra,80015228 <rt_kprintf>
            for (i = 0; i < argc; i++)
8000e1f8:	fe042783          	lw	a5,-32(s0)
8000e1fc:	00178793          	addi	a5,a5,1
8000e200:	fef42023          	sw	a5,-32(s0)
8000e204:	fe042703          	lw	a4,-32(s0)
8000e208:	fe442783          	lw	a5,-28(s0)
8000e20c:	fcf764e3          	bltu	a4,a5,8000e1d4 <msh_split+0x9c>
            }
            rt_kprintf("\n");
8000e210:	00018517          	auipc	a0,0x18
8000e214:	5f450513          	addi	a0,a0,1524 # 80026804 <raise+0xc10>
8000e218:	010070ef          	jal	ra,80015228 <rt_kprintf>
            break;
8000e21c:	19c0006f          	j	8000e3b8 <msh_split+0x280>
        }

        if (position >= length) break;
8000e220:	fe842703          	lw	a4,-24(s0)
8000e224:	fd842783          	lw	a5,-40(s0)
8000e228:	16f77e63          	bgeu	a4,a5,8000e3a4 <msh_split+0x26c>

        /* handle string */
        if (*ptr == '"')
8000e22c:	fec42783          	lw	a5,-20(s0)
8000e230:	0007c703          	lbu	a4,0(a5)
8000e234:	02200793          	li	a5,34
8000e238:	0ef71263          	bne	a4,a5,8000e31c <msh_split+0x1e4>
        {
            ptr ++;
8000e23c:	fec42783          	lw	a5,-20(s0)
8000e240:	00178793          	addi	a5,a5,1
8000e244:	fef42623          	sw	a5,-20(s0)
            position ++;
8000e248:	fe842783          	lw	a5,-24(s0)
8000e24c:	00178793          	addi	a5,a5,1
8000e250:	fef42423          	sw	a5,-24(s0)
            argv[argc] = ptr;
8000e254:	fe442783          	lw	a5,-28(s0)
8000e258:	00279793          	slli	a5,a5,0x2
8000e25c:	fd442703          	lw	a4,-44(s0)
8000e260:	00f707b3          	add	a5,a4,a5
8000e264:	fec42703          	lw	a4,-20(s0)
8000e268:	00e7a023          	sw	a4,0(a5)
            argc ++;
8000e26c:	fe442783          	lw	a5,-28(s0)
8000e270:	00178793          	addi	a5,a5,1
8000e274:	fef42223          	sw	a5,-28(s0)

            /* skip this string */
            while (*ptr != '"' && position < length)
8000e278:	0580006f          	j	8000e2d0 <msh_split+0x198>
            {
                if (*ptr == '\\')
8000e27c:	fec42783          	lw	a5,-20(s0)
8000e280:	0007c703          	lbu	a4,0(a5)
8000e284:	05c00793          	li	a5,92
8000e288:	02f71863          	bne	a4,a5,8000e2b8 <msh_split+0x180>
                {
                    if (*(ptr + 1) == '"')
8000e28c:	fec42783          	lw	a5,-20(s0)
8000e290:	00178793          	addi	a5,a5,1
8000e294:	0007c703          	lbu	a4,0(a5)
8000e298:	02200793          	li	a5,34
8000e29c:	00f71e63          	bne	a4,a5,8000e2b8 <msh_split+0x180>
                    {
                        ptr ++;
8000e2a0:	fec42783          	lw	a5,-20(s0)
8000e2a4:	00178793          	addi	a5,a5,1
8000e2a8:	fef42623          	sw	a5,-20(s0)
                        position ++;
8000e2ac:	fe842783          	lw	a5,-24(s0)
8000e2b0:	00178793          	addi	a5,a5,1
8000e2b4:	fef42423          	sw	a5,-24(s0)
                    }
                }
                ptr ++;
8000e2b8:	fec42783          	lw	a5,-20(s0)
8000e2bc:	00178793          	addi	a5,a5,1
8000e2c0:	fef42623          	sw	a5,-20(s0)
                position ++;
8000e2c4:	fe842783          	lw	a5,-24(s0)
8000e2c8:	00178793          	addi	a5,a5,1
8000e2cc:	fef42423          	sw	a5,-24(s0)
            while (*ptr != '"' && position < length)
8000e2d0:	fec42783          	lw	a5,-20(s0)
8000e2d4:	0007c703          	lbu	a4,0(a5)
8000e2d8:	02200793          	li	a5,34
8000e2dc:	00f70863          	beq	a4,a5,8000e2ec <msh_split+0x1b4>
8000e2e0:	fe842703          	lw	a4,-24(s0)
8000e2e4:	fd842783          	lw	a5,-40(s0)
8000e2e8:	f8f76ae3          	bltu	a4,a5,8000e27c <msh_split+0x144>
            }
            if (position >= length) break;
8000e2ec:	fe842703          	lw	a4,-24(s0)
8000e2f0:	fd842783          	lw	a5,-40(s0)
8000e2f4:	0af77c63          	bgeu	a4,a5,8000e3ac <msh_split+0x274>

            /* skip '"' */
            *ptr = '\0';
8000e2f8:	fec42783          	lw	a5,-20(s0)
8000e2fc:	00078023          	sb	zero,0(a5)
            ptr ++;
8000e300:	fec42783          	lw	a5,-20(s0)
8000e304:	00178793          	addi	a5,a5,1
8000e308:	fef42623          	sw	a5,-20(s0)
            position ++;
8000e30c:	fe842783          	lw	a5,-24(s0)
8000e310:	00178793          	addi	a5,a5,1
8000e314:	fef42423          	sw	a5,-24(s0)
8000e318:	07c0006f          	j	8000e394 <msh_split+0x25c>
        }
        else
        {
            argv[argc] = ptr;
8000e31c:	fe442783          	lw	a5,-28(s0)
8000e320:	00279793          	slli	a5,a5,0x2
8000e324:	fd442703          	lw	a4,-44(s0)
8000e328:	00f707b3          	add	a5,a4,a5
8000e32c:	fec42703          	lw	a4,-20(s0)
8000e330:	00e7a023          	sw	a4,0(a5)
            argc ++;
8000e334:	fe442783          	lw	a5,-28(s0)
8000e338:	00178793          	addi	a5,a5,1
8000e33c:	fef42223          	sw	a5,-28(s0)
            while ((*ptr != ' ' && *ptr != '\t') && position < length)
8000e340:	01c0006f          	j	8000e35c <msh_split+0x224>
            {
                ptr ++;
8000e344:	fec42783          	lw	a5,-20(s0)
8000e348:	00178793          	addi	a5,a5,1
8000e34c:	fef42623          	sw	a5,-20(s0)
                position ++;
8000e350:	fe842783          	lw	a5,-24(s0)
8000e354:	00178793          	addi	a5,a5,1
8000e358:	fef42423          	sw	a5,-24(s0)
            while ((*ptr != ' ' && *ptr != '\t') && position < length)
8000e35c:	fec42783          	lw	a5,-20(s0)
8000e360:	0007c703          	lbu	a4,0(a5)
8000e364:	02000793          	li	a5,32
8000e368:	02f70063          	beq	a4,a5,8000e388 <msh_split+0x250>
8000e36c:	fec42783          	lw	a5,-20(s0)
8000e370:	0007c703          	lbu	a4,0(a5)
8000e374:	00900793          	li	a5,9
8000e378:	00f70863          	beq	a4,a5,8000e388 <msh_split+0x250>
8000e37c:	fe842703          	lw	a4,-24(s0)
8000e380:	fd842783          	lw	a5,-40(s0)
8000e384:	fcf760e3          	bltu	a4,a5,8000e344 <msh_split+0x20c>
            }
            if (position >= length) break;
8000e388:	fe842703          	lw	a4,-24(s0)
8000e38c:	fd842783          	lw	a5,-40(s0)
8000e390:	02f77263          	bgeu	a4,a5,8000e3b4 <msh_split+0x27c>
    while (position < length)
8000e394:	fe842703          	lw	a4,-24(s0)
8000e398:	fd842783          	lw	a5,-40(s0)
8000e39c:	def766e3          	bltu	a4,a5,8000e188 <msh_split+0x50>
8000e3a0:	0180006f          	j	8000e3b8 <msh_split+0x280>
        if (position >= length) break;
8000e3a4:	00000013          	nop
8000e3a8:	0100006f          	j	8000e3b8 <msh_split+0x280>
            if (position >= length) break;
8000e3ac:	00000013          	nop
8000e3b0:	0080006f          	j	8000e3b8 <msh_split+0x280>
            if (position >= length) break;
8000e3b4:	00000013          	nop
        }
    }

    return argc;
8000e3b8:	fe442783          	lw	a5,-28(s0)
}
8000e3bc:	00078513          	mv	a0,a5
8000e3c0:	02c12083          	lw	ra,44(sp)
8000e3c4:	02812403          	lw	s0,40(sp)
8000e3c8:	03010113          	addi	sp,sp,48
8000e3cc:	00008067          	ret

8000e3d0 <msh_get_cmd>:

static cmd_function_t msh_get_cmd(char *cmd, int size)
{
8000e3d0:	fd010113          	addi	sp,sp,-48
8000e3d4:	02112623          	sw	ra,44(sp)
8000e3d8:	02812423          	sw	s0,40(sp)
8000e3dc:	03010413          	addi	s0,sp,48
8000e3e0:	fca42e23          	sw	a0,-36(s0)
8000e3e4:	fcb42c23          	sw	a1,-40(s0)
    struct finsh_syscall *index;
    cmd_function_t cmd_func = RT_NULL;
8000e3e8:	fe042423          	sw	zero,-24(s0)

    for (index = _syscall_table_begin;
8000e3ec:	00076797          	auipc	a5,0x76
8000e3f0:	c2c78793          	addi	a5,a5,-980 # 80084018 <_syscall_table_begin>
8000e3f4:	0007a783          	lw	a5,0(a5)
8000e3f8:	fef42623          	sw	a5,-20(s0)
8000e3fc:	05c0006f          	j	8000e458 <msh_get_cmd+0x88>
            index < _syscall_table_end;
            FINSH_NEXT_SYSCALL(index))
    {
        if (strncmp(index->name, cmd, size) == 0 &&
8000e400:	fec42783          	lw	a5,-20(s0)
8000e404:	0007a783          	lw	a5,0(a5)
8000e408:	fd842703          	lw	a4,-40(s0)
8000e40c:	00070613          	mv	a2,a4
8000e410:	fdc42583          	lw	a1,-36(s0)
8000e414:	00078513          	mv	a0,a5
8000e418:	5300e0ef          	jal	ra,8001c948 <strncmp>
8000e41c:	00050793          	mv	a5,a0
8000e420:	02079663          	bnez	a5,8000e44c <msh_get_cmd+0x7c>
                index->name[size] == '\0')
8000e424:	fec42783          	lw	a5,-20(s0)
8000e428:	0007a703          	lw	a4,0(a5)
8000e42c:	fd842783          	lw	a5,-40(s0)
8000e430:	00f707b3          	add	a5,a4,a5
8000e434:	0007c783          	lbu	a5,0(a5)
        if (strncmp(index->name, cmd, size) == 0 &&
8000e438:	00079a63          	bnez	a5,8000e44c <msh_get_cmd+0x7c>
        {
            cmd_func = (cmd_function_t)index->func;
8000e43c:	fec42783          	lw	a5,-20(s0)
8000e440:	0087a783          	lw	a5,8(a5)
8000e444:	fef42423          	sw	a5,-24(s0)
            break;
8000e448:	0240006f          	j	8000e46c <msh_get_cmd+0x9c>
            FINSH_NEXT_SYSCALL(index))
8000e44c:	fec42783          	lw	a5,-20(s0)
8000e450:	00c78793          	addi	a5,a5,12
8000e454:	fef42623          	sw	a5,-20(s0)
            index < _syscall_table_end;
8000e458:	00076797          	auipc	a5,0x76
8000e45c:	bc478793          	addi	a5,a5,-1084 # 8008401c <_syscall_table_end>
8000e460:	0007a783          	lw	a5,0(a5)
8000e464:	fec42703          	lw	a4,-20(s0)
8000e468:	f8f76ce3          	bltu	a4,a5,8000e400 <msh_get_cmd+0x30>
        }
    }

    return cmd_func;
8000e46c:	fe842783          	lw	a5,-24(s0)
}
8000e470:	00078513          	mv	a0,a5
8000e474:	02c12083          	lw	ra,44(sp)
8000e478:	02812403          	lw	s0,40(sp)
8000e47c:	03010113          	addi	sp,sp,48
8000e480:	00008067          	ret

8000e484 <_msh_exec_cmd>:
    return ret;
}
#endif /* defined(RT_USING_MODULE) && defined(DFS_USING_POSIX) */

static int _msh_exec_cmd(char *cmd, rt_size_t length, int *retp)
{
8000e484:	fa010113          	addi	sp,sp,-96
8000e488:	04112e23          	sw	ra,92(sp)
8000e48c:	04812c23          	sw	s0,88(sp)
8000e490:	06010413          	addi	s0,sp,96
8000e494:	faa42623          	sw	a0,-84(s0)
8000e498:	fab42423          	sw	a1,-88(s0)
8000e49c:	fac42223          	sw	a2,-92(s0)
    int argc;
    rt_size_t cmd0_size = 0;
8000e4a0:	fe042623          	sw	zero,-20(s0)

    RT_ASSERT(cmd);
    RT_ASSERT(retp);

    /* find the size of first command */
    while ((cmd[cmd0_size] != ' ' && cmd[cmd0_size] != '\t') && cmd0_size < length)
8000e4a4:	0100006f          	j	8000e4b4 <_msh_exec_cmd+0x30>
        cmd0_size ++;
8000e4a8:	fec42783          	lw	a5,-20(s0)
8000e4ac:	00178793          	addi	a5,a5,1
8000e4b0:	fef42623          	sw	a5,-20(s0)
    while ((cmd[cmd0_size] != ' ' && cmd[cmd0_size] != '\t') && cmd0_size < length)
8000e4b4:	fac42703          	lw	a4,-84(s0)
8000e4b8:	fec42783          	lw	a5,-20(s0)
8000e4bc:	00f707b3          	add	a5,a4,a5
8000e4c0:	0007c703          	lbu	a4,0(a5)
8000e4c4:	02000793          	li	a5,32
8000e4c8:	02f70463          	beq	a4,a5,8000e4f0 <_msh_exec_cmd+0x6c>
8000e4cc:	fac42703          	lw	a4,-84(s0)
8000e4d0:	fec42783          	lw	a5,-20(s0)
8000e4d4:	00f707b3          	add	a5,a4,a5
8000e4d8:	0007c703          	lbu	a4,0(a5)
8000e4dc:	00900793          	li	a5,9
8000e4e0:	00f70863          	beq	a4,a5,8000e4f0 <_msh_exec_cmd+0x6c>
8000e4e4:	fec42703          	lw	a4,-20(s0)
8000e4e8:	fa842783          	lw	a5,-88(s0)
8000e4ec:	faf76ee3          	bltu	a4,a5,8000e4a8 <_msh_exec_cmd+0x24>
    if (cmd0_size == 0)
8000e4f0:	fec42783          	lw	a5,-20(s0)
8000e4f4:	00079663          	bnez	a5,8000e500 <_msh_exec_cmd+0x7c>
        return -RT_ERROR;
8000e4f8:	fff00793          	li	a5,-1
8000e4fc:	0880006f          	j	8000e584 <_msh_exec_cmd+0x100>

    cmd_func = msh_get_cmd(cmd, cmd0_size);
8000e500:	fec42783          	lw	a5,-20(s0)
8000e504:	00078593          	mv	a1,a5
8000e508:	fac42503          	lw	a0,-84(s0)
8000e50c:	ec5ff0ef          	jal	ra,8000e3d0 <msh_get_cmd>
8000e510:	fea42423          	sw	a0,-24(s0)
    if (cmd_func == RT_NULL)
8000e514:	fe842783          	lw	a5,-24(s0)
8000e518:	00079663          	bnez	a5,8000e524 <_msh_exec_cmd+0xa0>
        return -RT_ERROR;
8000e51c:	fff00793          	li	a5,-1
8000e520:	0640006f          	j	8000e584 <_msh_exec_cmd+0x100>

    /* split arguments */
    rt_memset(argv, 0x00, sizeof(argv));
8000e524:	fbc40793          	addi	a5,s0,-68
8000e528:	02800613          	li	a2,40
8000e52c:	00000593          	li	a1,0
8000e530:	00078513          	mv	a0,a5
8000e534:	758050ef          	jal	ra,80013c8c <rt_memset>
    argc = msh_split(cmd, length, argv);
8000e538:	fbc40793          	addi	a5,s0,-68
8000e53c:	00078613          	mv	a2,a5
8000e540:	fa842583          	lw	a1,-88(s0)
8000e544:	fac42503          	lw	a0,-84(s0)
8000e548:	bf1ff0ef          	jal	ra,8000e138 <msh_split>
8000e54c:	fea42223          	sw	a0,-28(s0)
    if (argc == 0)
8000e550:	fe442783          	lw	a5,-28(s0)
8000e554:	00079663          	bnez	a5,8000e560 <_msh_exec_cmd+0xdc>
        return -RT_ERROR;
8000e558:	fff00793          	li	a5,-1
8000e55c:	0280006f          	j	8000e584 <_msh_exec_cmd+0x100>

    /* exec this command */
    *retp = cmd_func(argc, argv);
8000e560:	fbc40713          	addi	a4,s0,-68
8000e564:	fe842783          	lw	a5,-24(s0)
8000e568:	00070593          	mv	a1,a4
8000e56c:	fe442503          	lw	a0,-28(s0)
8000e570:	000780e7          	jalr	a5
8000e574:	00050713          	mv	a4,a0
8000e578:	fa442783          	lw	a5,-92(s0)
8000e57c:	00e7a023          	sw	a4,0(a5)
    return 0;
8000e580:	00000793          	li	a5,0
}
8000e584:	00078513          	mv	a0,a5
8000e588:	05c12083          	lw	ra,92(sp)
8000e58c:	05812403          	lw	s0,88(sp)
8000e590:	06010113          	addi	sp,sp,96
8000e594:	00008067          	ret

8000e598 <msh_exec>:
    return 0;
}
#endif /* defined(RT_USING_LWP) && defined(DFS_USING_POSIX) */

int msh_exec(char *cmd, rt_size_t length)
{
8000e598:	fd010113          	addi	sp,sp,-48
8000e59c:	02112623          	sw	ra,44(sp)
8000e5a0:	02812423          	sw	s0,40(sp)
8000e5a4:	03010413          	addi	s0,sp,48
8000e5a8:	fca42e23          	sw	a0,-36(s0)
8000e5ac:	fcb42c23          	sw	a1,-40(s0)
    int cmd_ret;

    /* strim the beginning of command */
    while ((length > 0) && (*cmd  == ' ' || *cmd == '\t'))
8000e5b0:	01c0006f          	j	8000e5cc <msh_exec+0x34>
    {
        cmd++;
8000e5b4:	fdc42783          	lw	a5,-36(s0)
8000e5b8:	00178793          	addi	a5,a5,1
8000e5bc:	fcf42e23          	sw	a5,-36(s0)
        length--;
8000e5c0:	fd842783          	lw	a5,-40(s0)
8000e5c4:	fff78793          	addi	a5,a5,-1
8000e5c8:	fcf42c23          	sw	a5,-40(s0)
    while ((length > 0) && (*cmd  == ' ' || *cmd == '\t'))
8000e5cc:	fd842783          	lw	a5,-40(s0)
8000e5d0:	02078263          	beqz	a5,8000e5f4 <msh_exec+0x5c>
8000e5d4:	fdc42783          	lw	a5,-36(s0)
8000e5d8:	0007c703          	lbu	a4,0(a5)
8000e5dc:	02000793          	li	a5,32
8000e5e0:	fcf70ae3          	beq	a4,a5,8000e5b4 <msh_exec+0x1c>
8000e5e4:	fdc42783          	lw	a5,-36(s0)
8000e5e8:	0007c703          	lbu	a4,0(a5)
8000e5ec:	00900793          	li	a5,9
8000e5f0:	fcf702e3          	beq	a4,a5,8000e5b4 <msh_exec+0x1c>
    }

    if (length == 0)
8000e5f4:	fd842783          	lw	a5,-40(s0)
8000e5f8:	00079663          	bnez	a5,8000e604 <msh_exec+0x6c>
        return 0;
8000e5fc:	00000793          	li	a5,0
8000e600:	0980006f          	j	8000e698 <msh_exec+0x100>

    /* Exec sequence:
     * 1. built-in command
     * 2. module(if enabled)
     */
    if (_msh_exec_cmd(cmd, length, &cmd_ret) == 0)
8000e604:	fe840793          	addi	a5,s0,-24
8000e608:	00078613          	mv	a2,a5
8000e60c:	fd842583          	lw	a1,-40(s0)
8000e610:	fdc42503          	lw	a0,-36(s0)
8000e614:	e71ff0ef          	jal	ra,8000e484 <_msh_exec_cmd>
8000e618:	00050793          	mv	a5,a0
8000e61c:	00079663          	bnez	a5,8000e628 <msh_exec+0x90>
    {
        return cmd_ret;
8000e620:	fe842783          	lw	a5,-24(s0)
8000e624:	0740006f          	j	8000e698 <msh_exec+0x100>
    }
#ifdef DFS_USING_POSIX
#ifdef DFS_USING_WORKDIR
    if (msh_exec_script(cmd, length) == 0)
8000e628:	fd842783          	lw	a5,-40(s0)
8000e62c:	00078593          	mv	a1,a5
8000e630:	fdc42503          	lw	a0,-36(s0)
8000e634:	708000ef          	jal	ra,8000ed3c <msh_exec_script>
8000e638:	00050793          	mv	a5,a0
8000e63c:	00079663          	bnez	a5,8000e648 <msh_exec+0xb0>
    {
        return 0;
8000e640:	00000793          	li	a5,0
8000e644:	0540006f          	j	8000e698 <msh_exec+0x100>
#endif /* DFS_USING_POSIX */

    /* truncate the cmd at the first space. */
    {
        char *tcmd;
        tcmd = cmd;
8000e648:	fdc42783          	lw	a5,-36(s0)
8000e64c:	fef42623          	sw	a5,-20(s0)
        while (*tcmd != ' ' && *tcmd != '\0')
8000e650:	0100006f          	j	8000e660 <msh_exec+0xc8>
        {
            tcmd++;
8000e654:	fec42783          	lw	a5,-20(s0)
8000e658:	00178793          	addi	a5,a5,1
8000e65c:	fef42623          	sw	a5,-20(s0)
        while (*tcmd != ' ' && *tcmd != '\0')
8000e660:	fec42783          	lw	a5,-20(s0)
8000e664:	0007c703          	lbu	a4,0(a5)
8000e668:	02000793          	li	a5,32
8000e66c:	00f70863          	beq	a4,a5,8000e67c <msh_exec+0xe4>
8000e670:	fec42783          	lw	a5,-20(s0)
8000e674:	0007c783          	lbu	a5,0(a5)
8000e678:	fc079ee3          	bnez	a5,8000e654 <msh_exec+0xbc>
        }
        *tcmd = '\0';
8000e67c:	fec42783          	lw	a5,-20(s0)
8000e680:	00078023          	sb	zero,0(a5)
    }
    rt_kprintf("%s: command not found.\n", cmd);
8000e684:	fdc42583          	lw	a1,-36(s0)
8000e688:	00018517          	auipc	a0,0x18
8000e68c:	1e450513          	addi	a0,a0,484 # 8002686c <raise+0xc78>
8000e690:	399060ef          	jal	ra,80015228 <rt_kprintf>
    return -1;
8000e694:	fff00793          	li	a5,-1
}
8000e698:	00078513          	mv	a0,a5
8000e69c:	02c12083          	lw	ra,44(sp)
8000e6a0:	02812403          	lw	s0,40(sp)
8000e6a4:	03010113          	addi	sp,sp,48
8000e6a8:	00008067          	ret

8000e6ac <str_common>:

static int str_common(const char *str1, const char *str2)
{
8000e6ac:	fd010113          	addi	sp,sp,-48
8000e6b0:	02812623          	sw	s0,44(sp)
8000e6b4:	03010413          	addi	s0,sp,48
8000e6b8:	fca42e23          	sw	a0,-36(s0)
8000e6bc:	fcb42c23          	sw	a1,-40(s0)
    const char *str = str1;
8000e6c0:	fdc42783          	lw	a5,-36(s0)
8000e6c4:	fef42623          	sw	a5,-20(s0)

    while ((*str != 0) && (*str2 != 0) && (*str == *str2))
8000e6c8:	01c0006f          	j	8000e6e4 <str_common+0x38>
    {
        str ++;
8000e6cc:	fec42783          	lw	a5,-20(s0)
8000e6d0:	00178793          	addi	a5,a5,1
8000e6d4:	fef42623          	sw	a5,-20(s0)
        str2 ++;
8000e6d8:	fd842783          	lw	a5,-40(s0)
8000e6dc:	00178793          	addi	a5,a5,1
8000e6e0:	fcf42c23          	sw	a5,-40(s0)
    while ((*str != 0) && (*str2 != 0) && (*str == *str2))
8000e6e4:	fec42783          	lw	a5,-20(s0)
8000e6e8:	0007c783          	lbu	a5,0(a5)
8000e6ec:	02078263          	beqz	a5,8000e710 <str_common+0x64>
8000e6f0:	fd842783          	lw	a5,-40(s0)
8000e6f4:	0007c783          	lbu	a5,0(a5)
8000e6f8:	00078c63          	beqz	a5,8000e710 <str_common+0x64>
8000e6fc:	fec42783          	lw	a5,-20(s0)
8000e700:	0007c703          	lbu	a4,0(a5)
8000e704:	fd842783          	lw	a5,-40(s0)
8000e708:	0007c783          	lbu	a5,0(a5)
8000e70c:	fcf700e3          	beq	a4,a5,8000e6cc <str_common+0x20>
    }

    return (str - str1);
8000e710:	fec42703          	lw	a4,-20(s0)
8000e714:	fdc42783          	lw	a5,-36(s0)
8000e718:	40f707b3          	sub	a5,a4,a5
}
8000e71c:	00078513          	mv	a0,a5
8000e720:	02c12403          	lw	s0,44(sp)
8000e724:	03010113          	addi	sp,sp,48
8000e728:	00008067          	ret

8000e72c <msh_auto_complete_path>:

#ifdef DFS_USING_POSIX
void msh_auto_complete_path(char *path)
{
8000e72c:	fc010113          	addi	sp,sp,-64
8000e730:	02112e23          	sw	ra,60(sp)
8000e734:	02812c23          	sw	s0,56(sp)
8000e738:	02912a23          	sw	s1,52(sp)
8000e73c:	04010413          	addi	s0,sp,64
8000e740:	fca42623          	sw	a0,-52(s0)
    DIR *dir = RT_NULL;
8000e744:	fe042623          	sw	zero,-20(s0)
    struct dirent *dirent = RT_NULL;
8000e748:	fc042e23          	sw	zero,-36(s0)
    char *full_path, *ptr, *index;

    if (!path)
8000e74c:	fcc42783          	lw	a5,-52(s0)
8000e750:	32078463          	beqz	a5,8000ea78 <msh_auto_complete_path+0x34c>
        return;

    full_path = (char *)rt_malloc(256);
8000e754:	10000513          	li	a0,256
8000e758:	575060ef          	jal	ra,800154cc <rt_malloc>
8000e75c:	fca42c23          	sw	a0,-40(s0)
    if (full_path == RT_NULL) return; /* out of memory */
8000e760:	fd842783          	lw	a5,-40(s0)
8000e764:	30078e63          	beqz	a5,8000ea80 <msh_auto_complete_path+0x354>

    if (*path != '/')
8000e768:	fcc42783          	lw	a5,-52(s0)
8000e76c:	0007c703          	lbu	a4,0(a5)
8000e770:	02f00793          	li	a5,47
8000e774:	04f70463          	beq	a4,a5,8000e7bc <msh_auto_complete_path+0x90>
    {
        getcwd(full_path, 256);
8000e778:	10000593          	li	a1,256
8000e77c:	fd842503          	lw	a0,-40(s0)
8000e780:	f50fb0ef          	jal	ra,80009ed0 <getcwd>
        if (full_path[rt_strlen(full_path) - 1]  != '/')
8000e784:	fd842503          	lw	a0,-40(s0)
8000e788:	289050ef          	jal	ra,80014210 <rt_strlen>
8000e78c:	00050793          	mv	a5,a0
8000e790:	fff78793          	addi	a5,a5,-1
8000e794:	fd842703          	lw	a4,-40(s0)
8000e798:	00f707b3          	add	a5,a4,a5
8000e79c:	0007c703          	lbu	a4,0(a5)
8000e7a0:	02f00793          	li	a5,47
8000e7a4:	02f70063          	beq	a4,a5,8000e7c4 <msh_auto_complete_path+0x98>
            strcat(full_path, "/");
8000e7a8:	00018597          	auipc	a1,0x18
8000e7ac:	0dc58593          	addi	a1,a1,220 # 80026884 <raise+0xc90>
8000e7b0:	fd842503          	lw	a0,-40(s0)
8000e7b4:	7cd0d0ef          	jal	ra,8001c780 <strcat>
8000e7b8:	00c0006f          	j	8000e7c4 <msh_auto_complete_path+0x98>
    }
    else *full_path = '\0';
8000e7bc:	fd842783          	lw	a5,-40(s0)
8000e7c0:	00078023          	sb	zero,0(a5)

    index = RT_NULL;
8000e7c4:	fe042223          	sw	zero,-28(s0)
    ptr = path;
8000e7c8:	fcc42783          	lw	a5,-52(s0)
8000e7cc:	fef42423          	sw	a5,-24(s0)
    for (;;)
    {
        if (*ptr == '/') index = ptr + 1;
8000e7d0:	fe842783          	lw	a5,-24(s0)
8000e7d4:	0007c703          	lbu	a4,0(a5)
8000e7d8:	02f00793          	li	a5,47
8000e7dc:	00f71863          	bne	a4,a5,8000e7ec <msh_auto_complete_path+0xc0>
8000e7e0:	fe842783          	lw	a5,-24(s0)
8000e7e4:	00178793          	addi	a5,a5,1
8000e7e8:	fef42223          	sw	a5,-28(s0)
        if (!*ptr) break;
8000e7ec:	fe842783          	lw	a5,-24(s0)
8000e7f0:	0007c783          	lbu	a5,0(a5)
8000e7f4:	00078a63          	beqz	a5,8000e808 <msh_auto_complete_path+0xdc>

        ptr ++;
8000e7f8:	fe842783          	lw	a5,-24(s0)
8000e7fc:	00178793          	addi	a5,a5,1
8000e800:	fef42423          	sw	a5,-24(s0)
        if (*ptr == '/') index = ptr + 1;
8000e804:	fcdff06f          	j	8000e7d0 <msh_auto_complete_path+0xa4>
        if (!*ptr) break;
8000e808:	00000013          	nop
    }
    if (index == RT_NULL) index = path;
8000e80c:	fe442783          	lw	a5,-28(s0)
8000e810:	00079663          	bnez	a5,8000e81c <msh_auto_complete_path+0xf0>
8000e814:	fcc42783          	lw	a5,-52(s0)
8000e818:	fef42223          	sw	a5,-28(s0)

    if (index != RT_NULL)
8000e81c:	fe442783          	lw	a5,-28(s0)
8000e820:	08078c63          	beqz	a5,8000e8b8 <msh_auto_complete_path+0x18c>
    {
        char *dest = index;
8000e824:	fe442783          	lw	a5,-28(s0)
8000e828:	fcf42a23          	sw	a5,-44(s0)

        /* fill the parent path */
        ptr = full_path;
8000e82c:	fd842783          	lw	a5,-40(s0)
8000e830:	fef42423          	sw	a5,-24(s0)
        while (*ptr) ptr ++;
8000e834:	0100006f          	j	8000e844 <msh_auto_complete_path+0x118>
8000e838:	fe842783          	lw	a5,-24(s0)
8000e83c:	00178793          	addi	a5,a5,1
8000e840:	fef42423          	sw	a5,-24(s0)
8000e844:	fe842783          	lw	a5,-24(s0)
8000e848:	0007c783          	lbu	a5,0(a5)
8000e84c:	fe0796e3          	bnez	a5,8000e838 <msh_auto_complete_path+0x10c>

        for (index = path; index != dest;)
8000e850:	fcc42783          	lw	a5,-52(s0)
8000e854:	fef42223          	sw	a5,-28(s0)
8000e858:	0240006f          	j	8000e87c <msh_auto_complete_path+0x150>
            *ptr++ = *index++;
8000e85c:	fe442703          	lw	a4,-28(s0)
8000e860:	00170793          	addi	a5,a4,1
8000e864:	fef42223          	sw	a5,-28(s0)
8000e868:	fe842783          	lw	a5,-24(s0)
8000e86c:	00178693          	addi	a3,a5,1
8000e870:	fed42423          	sw	a3,-24(s0)
8000e874:	00074703          	lbu	a4,0(a4)
8000e878:	00e78023          	sb	a4,0(a5)
        for (index = path; index != dest;)
8000e87c:	fe442703          	lw	a4,-28(s0)
8000e880:	fd442783          	lw	a5,-44(s0)
8000e884:	fcf71ce3          	bne	a4,a5,8000e85c <msh_auto_complete_path+0x130>
        *ptr = '\0';
8000e888:	fe842783          	lw	a5,-24(s0)
8000e88c:	00078023          	sb	zero,0(a5)

        dir = opendir(full_path);
8000e890:	fd842503          	lw	a0,-40(s0)
8000e894:	a28fb0ef          	jal	ra,80009abc <opendir>
8000e898:	fea42623          	sw	a0,-20(s0)
        if (dir == RT_NULL) /* open directory failed! */
8000e89c:	fec42783          	lw	a5,-20(s0)
8000e8a0:	00079863          	bnez	a5,8000e8b0 <msh_auto_complete_path+0x184>
        {
            rt_free(full_path);
8000e8a4:	fd842503          	lw	a0,-40(s0)
8000e8a8:	571060ef          	jal	ra,80015618 <rt_free>
            return;
8000e8ac:	1d80006f          	j	8000ea84 <msh_auto_complete_path+0x358>
        }

        /* restore the index position */
        index = dest;
8000e8b0:	fd442783          	lw	a5,-44(s0)
8000e8b4:	fef42223          	sw	a5,-28(s0)
    }

    /* auto complete the file or directory name */
    if (*index == '\0') /* display all of files and directories */
8000e8b8:	fe442783          	lw	a5,-28(s0)
8000e8bc:	0007c783          	lbu	a5,0(a5)
8000e8c0:	02079a63          	bnez	a5,8000e8f4 <msh_auto_complete_path+0x1c8>
    {
        for (;;)
        {
            dirent = readdir(dir);
8000e8c4:	fec42503          	lw	a0,-20(s0)
8000e8c8:	adcfb0ef          	jal	ra,80009ba4 <readdir>
8000e8cc:	fca42e23          	sw	a0,-36(s0)
            if (dirent == RT_NULL) break;
8000e8d0:	fdc42783          	lw	a5,-36(s0)
8000e8d4:	18078663          	beqz	a5,8000ea60 <msh_auto_complete_path+0x334>

            rt_kprintf("%s\n", dirent->d_name);
8000e8d8:	fdc42783          	lw	a5,-36(s0)
8000e8dc:	00478793          	addi	a5,a5,4
8000e8e0:	00078593          	mv	a1,a5
8000e8e4:	00018517          	auipc	a0,0x18
8000e8e8:	fa450513          	addi	a0,a0,-92 # 80026888 <raise+0xc94>
8000e8ec:	13d060ef          	jal	ra,80015228 <rt_kprintf>
            dirent = readdir(dir);
8000e8f0:	fd5ff06f          	j	8000e8c4 <msh_auto_complete_path+0x198>
    }
    else
    {
        rt_size_t length, min_length;

        min_length = 0;
8000e8f4:	fe042023          	sw	zero,-32(s0)
        for (;;)
        {
            dirent = readdir(dir);
8000e8f8:	fec42503          	lw	a0,-20(s0)
8000e8fc:	aa8fb0ef          	jal	ra,80009ba4 <readdir>
8000e900:	fca42e23          	sw	a0,-36(s0)
            if (dirent == RT_NULL) break;
8000e904:	fdc42783          	lw	a5,-36(s0)
8000e908:	08078a63          	beqz	a5,8000e99c <msh_auto_complete_path+0x270>

            /* matched the prefix string */
            if (strncmp(index, dirent->d_name, rt_strlen(index)) == 0)
8000e90c:	fdc42783          	lw	a5,-36(s0)
8000e910:	00478493          	addi	s1,a5,4
8000e914:	fe442503          	lw	a0,-28(s0)
8000e918:	0f9050ef          	jal	ra,80014210 <rt_strlen>
8000e91c:	00050793          	mv	a5,a0
8000e920:	00078613          	mv	a2,a5
8000e924:	00048593          	mv	a1,s1
8000e928:	fe442503          	lw	a0,-28(s0)
8000e92c:	01c0e0ef          	jal	ra,8001c948 <strncmp>
8000e930:	00050793          	mv	a5,a0
8000e934:	fc0792e3          	bnez	a5,8000e8f8 <msh_auto_complete_path+0x1cc>
            {
                if (min_length == 0)
8000e938:	fe042783          	lw	a5,-32(s0)
8000e93c:	02079663          	bnez	a5,8000e968 <msh_auto_complete_path+0x23c>
                {
                    min_length = rt_strlen(dirent->d_name);
8000e940:	fdc42783          	lw	a5,-36(s0)
8000e944:	00478793          	addi	a5,a5,4
8000e948:	00078513          	mv	a0,a5
8000e94c:	0c5050ef          	jal	ra,80014210 <rt_strlen>
8000e950:	fea42023          	sw	a0,-32(s0)
                    /* save dirent name */
                    strcpy(full_path, dirent->d_name);
8000e954:	fdc42783          	lw	a5,-36(s0)
8000e958:	00478793          	addi	a5,a5,4
8000e95c:	00078593          	mv	a1,a5
8000e960:	fd842503          	lw	a0,-40(s0)
8000e964:	12d0e0ef          	jal	ra,8001d290 <strcpy>
                }

                length = str_common(dirent->d_name, full_path);
8000e968:	fdc42783          	lw	a5,-36(s0)
8000e96c:	00478793          	addi	a5,a5,4
8000e970:	fd842583          	lw	a1,-40(s0)
8000e974:	00078513          	mv	a0,a5
8000e978:	d35ff0ef          	jal	ra,8000e6ac <str_common>
8000e97c:	00050793          	mv	a5,a0
8000e980:	fcf42823          	sw	a5,-48(s0)

                if (length < min_length)
8000e984:	fd042703          	lw	a4,-48(s0)
8000e988:	fe042783          	lw	a5,-32(s0)
8000e98c:	f6f776e3          	bgeu	a4,a5,8000e8f8 <msh_auto_complete_path+0x1cc>
                {
                    min_length = length;
8000e990:	fd042783          	lw	a5,-48(s0)
8000e994:	fef42023          	sw	a5,-32(s0)
            dirent = readdir(dir);
8000e998:	f61ff06f          	j	8000e8f8 <msh_auto_complete_path+0x1cc>
            if (dirent == RT_NULL) break;
8000e99c:	00000013          	nop
                }
            }
        }

        if (min_length)
8000e9a0:	fe042783          	lw	a5,-32(s0)
8000e9a4:	0c078063          	beqz	a5,8000ea64 <msh_auto_complete_path+0x338>
        {
            if (min_length < rt_strlen(full_path))
8000e9a8:	fd842503          	lw	a0,-40(s0)
8000e9ac:	065050ef          	jal	ra,80014210 <rt_strlen>
8000e9b0:	00050713          	mv	a4,a0
8000e9b4:	fe042783          	lw	a5,-32(s0)
8000e9b8:	06e7f663          	bgeu	a5,a4,8000ea24 <msh_auto_complete_path+0x2f8>
            {
                /* list the candidate */
                rewinddir(dir);
8000e9bc:	fec42503          	lw	a0,-20(s0)
8000e9c0:	b04fb0ef          	jal	ra,80009cc4 <rewinddir>

                for (;;)
                {
                    dirent = readdir(dir);
8000e9c4:	fec42503          	lw	a0,-20(s0)
8000e9c8:	9dcfb0ef          	jal	ra,80009ba4 <readdir>
8000e9cc:	fca42e23          	sw	a0,-36(s0)
                    if (dirent == RT_NULL) break;
8000e9d0:	fdc42783          	lw	a5,-36(s0)
8000e9d4:	04078663          	beqz	a5,8000ea20 <msh_auto_complete_path+0x2f4>

                    if (strncmp(index, dirent->d_name, rt_strlen(index)) == 0)
8000e9d8:	fdc42783          	lw	a5,-36(s0)
8000e9dc:	00478493          	addi	s1,a5,4
8000e9e0:	fe442503          	lw	a0,-28(s0)
8000e9e4:	02d050ef          	jal	ra,80014210 <rt_strlen>
8000e9e8:	00050793          	mv	a5,a0
8000e9ec:	00078613          	mv	a2,a5
8000e9f0:	00048593          	mv	a1,s1
8000e9f4:	fe442503          	lw	a0,-28(s0)
8000e9f8:	7510d0ef          	jal	ra,8001c948 <strncmp>
8000e9fc:	00050793          	mv	a5,a0
8000ea00:	fc0792e3          	bnez	a5,8000e9c4 <msh_auto_complete_path+0x298>
                        rt_kprintf("%s\n", dirent->d_name);
8000ea04:	fdc42783          	lw	a5,-36(s0)
8000ea08:	00478793          	addi	a5,a5,4
8000ea0c:	00078593          	mv	a1,a5
8000ea10:	00018517          	auipc	a0,0x18
8000ea14:	e7850513          	addi	a0,a0,-392 # 80026888 <raise+0xc94>
8000ea18:	011060ef          	jal	ra,80015228 <rt_kprintf>
                    dirent = readdir(dir);
8000ea1c:	fa9ff06f          	j	8000e9c4 <msh_auto_complete_path+0x298>
                    if (dirent == RT_NULL) break;
8000ea20:	00000013          	nop
                }
            }

            length = index - path;
8000ea24:	fe442703          	lw	a4,-28(s0)
8000ea28:	fcc42783          	lw	a5,-52(s0)
8000ea2c:	40f707b3          	sub	a5,a4,a5
8000ea30:	fcf42823          	sw	a5,-48(s0)
            rt_memcpy(index, full_path, min_length);
8000ea34:	fe042603          	lw	a2,-32(s0)
8000ea38:	fd842583          	lw	a1,-40(s0)
8000ea3c:	fe442503          	lw	a0,-28(s0)
8000ea40:	3a8050ef          	jal	ra,80013de8 <rt_memcpy>
            path[length + min_length] = '\0';
8000ea44:	fd042703          	lw	a4,-48(s0)
8000ea48:	fe042783          	lw	a5,-32(s0)
8000ea4c:	00f707b3          	add	a5,a4,a5
8000ea50:	fcc42703          	lw	a4,-52(s0)
8000ea54:	00f707b3          	add	a5,a4,a5
8000ea58:	00078023          	sb	zero,0(a5)
8000ea5c:	0080006f          	j	8000ea64 <msh_auto_complete_path+0x338>
            if (dirent == RT_NULL) break;
8000ea60:	00000013          	nop
        }
    }

    closedir(dir);
8000ea64:	fec42503          	lw	a0,-20(s0)
8000ea68:	adcfb0ef          	jal	ra,80009d44 <closedir>
    rt_free(full_path);
8000ea6c:	fd842503          	lw	a0,-40(s0)
8000ea70:	3a9060ef          	jal	ra,80015618 <rt_free>
8000ea74:	0100006f          	j	8000ea84 <msh_auto_complete_path+0x358>
        return;
8000ea78:	00000013          	nop
8000ea7c:	0080006f          	j	8000ea84 <msh_auto_complete_path+0x358>
    if (full_path == RT_NULL) return; /* out of memory */
8000ea80:	00000013          	nop
}
8000ea84:	03c12083          	lw	ra,60(sp)
8000ea88:	03812403          	lw	s0,56(sp)
8000ea8c:	03412483          	lw	s1,52(sp)
8000ea90:	04010113          	addi	sp,sp,64
8000ea94:	00008067          	ret

8000ea98 <msh_auto_complete>:
#endif /* DFS_USING_POSIX */

void msh_auto_complete(char *prefix)
{
8000ea98:	fc010113          	addi	sp,sp,-64
8000ea9c:	02112e23          	sw	ra,60(sp)
8000eaa0:	02812c23          	sw	s0,56(sp)
8000eaa4:	04010413          	addi	s0,sp,64
8000eaa8:	fca42623          	sw	a0,-52(s0)
    int length, min_length;
    const char *name_ptr, *cmd_name;
    struct finsh_syscall *index;

    min_length = 0;
8000eaac:	fe042623          	sw	zero,-20(s0)
    name_ptr = RT_NULL;
8000eab0:	fe042423          	sw	zero,-24(s0)

    if (*prefix == '\0')
8000eab4:	fcc42783          	lw	a5,-52(s0)
8000eab8:	0007c783          	lbu	a5,0(a5)
8000eabc:	00079a63          	bnez	a5,8000ead0 <msh_auto_complete+0x38>
    {
        msh_help(0, RT_NULL);
8000eac0:	00000593          	li	a1,0
8000eac4:	00000513          	li	a0,0
8000eac8:	cecff0ef          	jal	ra,8000dfb4 <msh_help>
        return;
8000eacc:	1340006f          	j	8000ec00 <msh_auto_complete+0x168>
#ifdef DFS_USING_POSIX
    /* check whether a spare in the command */
    {
        char *ptr;

        ptr = prefix + rt_strlen(prefix);
8000ead0:	fcc42503          	lw	a0,-52(s0)
8000ead4:	73c050ef          	jal	ra,80014210 <rt_strlen>
8000ead8:	00050713          	mv	a4,a0
8000eadc:	fcc42783          	lw	a5,-52(s0)
8000eae0:	00e787b3          	add	a5,a5,a4
8000eae4:	fef42023          	sw	a5,-32(s0)
        while (ptr != prefix)
8000eae8:	0340006f          	j	8000eb1c <msh_auto_complete+0x84>
        {
            if (*ptr == ' ')
8000eaec:	fe042783          	lw	a5,-32(s0)
8000eaf0:	0007c703          	lbu	a4,0(a5)
8000eaf4:	02000793          	li	a5,32
8000eaf8:	00f71c63          	bne	a4,a5,8000eb10 <msh_auto_complete+0x78>
            {
                msh_auto_complete_path(ptr + 1);
8000eafc:	fe042783          	lw	a5,-32(s0)
8000eb00:	00178793          	addi	a5,a5,1
8000eb04:	00078513          	mv	a0,a5
8000eb08:	c25ff0ef          	jal	ra,8000e72c <msh_auto_complete_path>
                break;
8000eb0c:	01c0006f          	j	8000eb28 <msh_auto_complete+0x90>
            }

            ptr --;
8000eb10:	fe042783          	lw	a5,-32(s0)
8000eb14:	fff78793          	addi	a5,a5,-1
8000eb18:	fef42023          	sw	a5,-32(s0)
        while (ptr != prefix)
8000eb1c:	fe042703          	lw	a4,-32(s0)
8000eb20:	fcc42783          	lw	a5,-52(s0)
8000eb24:	fcf714e3          	bne	a4,a5,8000eaec <msh_auto_complete+0x54>
    }
#endif /* DFS_USING_POSIX */

    /* checks in internal command */
    {
        for (index = _syscall_table_begin; index < _syscall_table_end; FINSH_NEXT_SYSCALL(index))
8000eb28:	00075797          	auipc	a5,0x75
8000eb2c:	4f078793          	addi	a5,a5,1264 # 80084018 <_syscall_table_begin>
8000eb30:	0007a783          	lw	a5,0(a5)
8000eb34:	fef42223          	sw	a5,-28(s0)
8000eb38:	0940006f          	j	8000ebcc <msh_auto_complete+0x134>
        {
            /* skip finsh shell function */
            cmd_name = (const char *) index->name;
8000eb3c:	fe442783          	lw	a5,-28(s0)
8000eb40:	0007a783          	lw	a5,0(a5)
8000eb44:	fcf42e23          	sw	a5,-36(s0)
            if (strncmp(prefix, cmd_name, strlen(prefix)) == 0)
8000eb48:	fcc42503          	lw	a0,-52(s0)
8000eb4c:	6b80e0ef          	jal	ra,8001d204 <strlen>
8000eb50:	00050793          	mv	a5,a0
8000eb54:	00078613          	mv	a2,a5
8000eb58:	fdc42583          	lw	a1,-36(s0)
8000eb5c:	fcc42503          	lw	a0,-52(s0)
8000eb60:	5e90d0ef          	jal	ra,8001c948 <strncmp>
8000eb64:	00050793          	mv	a5,a0
8000eb68:	04079c63          	bnez	a5,8000ebc0 <msh_auto_complete+0x128>
            {
                if (min_length == 0)
8000eb6c:	fec42783          	lw	a5,-20(s0)
8000eb70:	00079e63          	bnez	a5,8000eb8c <msh_auto_complete+0xf4>
                {
                    /* set name_ptr */
                    name_ptr = cmd_name;
8000eb74:	fdc42783          	lw	a5,-36(s0)
8000eb78:	fef42423          	sw	a5,-24(s0)
                    /* set initial length */
                    min_length = strlen(name_ptr);
8000eb7c:	fe842503          	lw	a0,-24(s0)
8000eb80:	6840e0ef          	jal	ra,8001d204 <strlen>
8000eb84:	00050793          	mv	a5,a0
8000eb88:	fef42623          	sw	a5,-20(s0)
                }

                length = str_common(name_ptr, cmd_name);
8000eb8c:	fdc42583          	lw	a1,-36(s0)
8000eb90:	fe842503          	lw	a0,-24(s0)
8000eb94:	b19ff0ef          	jal	ra,8000e6ac <str_common>
8000eb98:	fca42c23          	sw	a0,-40(s0)
                if (length < min_length)
8000eb9c:	fd842703          	lw	a4,-40(s0)
8000eba0:	fec42783          	lw	a5,-20(s0)
8000eba4:	00f75663          	bge	a4,a5,8000ebb0 <msh_auto_complete+0x118>
                    min_length = length;
8000eba8:	fd842783          	lw	a5,-40(s0)
8000ebac:	fef42623          	sw	a5,-20(s0)

                rt_kprintf("%s\n", cmd_name);
8000ebb0:	fdc42583          	lw	a1,-36(s0)
8000ebb4:	00018517          	auipc	a0,0x18
8000ebb8:	cd450513          	addi	a0,a0,-812 # 80026888 <raise+0xc94>
8000ebbc:	66c060ef          	jal	ra,80015228 <rt_kprintf>
        for (index = _syscall_table_begin; index < _syscall_table_end; FINSH_NEXT_SYSCALL(index))
8000ebc0:	fe442783          	lw	a5,-28(s0)
8000ebc4:	00c78793          	addi	a5,a5,12
8000ebc8:	fef42223          	sw	a5,-28(s0)
8000ebcc:	00075797          	auipc	a5,0x75
8000ebd0:	45078793          	addi	a5,a5,1104 # 8008401c <_syscall_table_end>
8000ebd4:	0007a783          	lw	a5,0(a5)
8000ebd8:	fe442703          	lw	a4,-28(s0)
8000ebdc:	f6f760e3          	bltu	a4,a5,8000eb3c <msh_auto_complete+0xa4>
            }
        }
    }

    /* auto complete string */
    if (name_ptr != NULL)
8000ebe0:	fe842783          	lw	a5,-24(s0)
8000ebe4:	00078c63          	beqz	a5,8000ebfc <msh_auto_complete+0x164>
    {
        rt_strncpy(prefix, name_ptr, min_length);
8000ebe8:	fec42783          	lw	a5,-20(s0)
8000ebec:	00078613          	mv	a2,a5
8000ebf0:	fe842583          	lw	a1,-24(s0)
8000ebf4:	fcc42503          	lw	a0,-52(s0)
8000ebf8:	46c050ef          	jal	ra,80014064 <rt_strncpy>
    }

    return ;
8000ebfc:	00000013          	nop
}
8000ec00:	03c12083          	lw	ra,60(sp)
8000ec04:	03812403          	lw	s0,56(sp)
8000ec08:	04010113          	addi	sp,sp,64
8000ec0c:	00008067          	ret

8000ec10 <msh_readline>:
#include <dfs_file.h>
#include <unistd.h>
#include <fcntl.h>

static int msh_readline(int fd, char *line_buf, int size)
{
8000ec10:	fd010113          	addi	sp,sp,-48
8000ec14:	02112623          	sw	ra,44(sp)
8000ec18:	02812423          	sw	s0,40(sp)
8000ec1c:	03010413          	addi	s0,sp,48
8000ec20:	fca42e23          	sw	a0,-36(s0)
8000ec24:	fcb42c23          	sw	a1,-40(s0)
8000ec28:	fcc42a23          	sw	a2,-44(s0)
    char ch;
    int index = 0;
8000ec2c:	fe042623          	sw	zero,-20(s0)

    do
    {
        if (read(fd, &ch, 1) != 1)
8000ec30:	feb40793          	addi	a5,s0,-21
8000ec34:	00100613          	li	a2,1
8000ec38:	00078593          	mv	a1,a5
8000ec3c:	fdc42503          	lw	a0,-36(s0)
8000ec40:	a65fa0ef          	jal	ra,800096a4 <read>
8000ec44:	00050713          	mv	a4,a0
8000ec48:	00100793          	li	a5,1
8000ec4c:	00f70663          	beq	a4,a5,8000ec58 <msh_readline+0x48>
        {
            /* nothing in this file */
            return 0;
8000ec50:	00000793          	li	a5,0
8000ec54:	0d40006f          	j	8000ed28 <msh_readline+0x118>
        }
    }
    while (ch == '\n' || ch == '\r');
8000ec58:	feb44703          	lbu	a4,-21(s0)
8000ec5c:	00a00793          	li	a5,10
8000ec60:	fcf708e3          	beq	a4,a5,8000ec30 <msh_readline+0x20>
8000ec64:	feb44703          	lbu	a4,-21(s0)
8000ec68:	00d00793          	li	a5,13
8000ec6c:	fcf702e3          	beq	a4,a5,8000ec30 <msh_readline+0x20>

    /* set the first character */
    line_buf[index ++] = ch;
8000ec70:	fec42783          	lw	a5,-20(s0)
8000ec74:	00178713          	addi	a4,a5,1
8000ec78:	fee42623          	sw	a4,-20(s0)
8000ec7c:	00078713          	mv	a4,a5
8000ec80:	fd842783          	lw	a5,-40(s0)
8000ec84:	00e787b3          	add	a5,a5,a4
8000ec88:	feb44703          	lbu	a4,-21(s0)
8000ec8c:	00e78023          	sb	a4,0(a5)

    while (index < size)
8000ec90:	0880006f          	j	8000ed18 <msh_readline+0x108>
    {
        if (read(fd, &ch, 1) == 1)
8000ec94:	feb40793          	addi	a5,s0,-21
8000ec98:	00100613          	li	a2,1
8000ec9c:	00078593          	mv	a1,a5
8000eca0:	fdc42503          	lw	a0,-36(s0)
8000eca4:	a01fa0ef          	jal	ra,800096a4 <read>
8000eca8:	00050713          	mv	a4,a0
8000ecac:	00100793          	li	a5,1
8000ecb0:	04f71a63          	bne	a4,a5,8000ed04 <msh_readline+0xf4>
        {
            if (ch == '\n' || ch == '\r')
8000ecb4:	feb44703          	lbu	a4,-21(s0)
8000ecb8:	00a00793          	li	a5,10
8000ecbc:	00f70863          	beq	a4,a5,8000eccc <msh_readline+0xbc>
8000ecc0:	feb44703          	lbu	a4,-21(s0)
8000ecc4:	00d00793          	li	a5,13
8000ecc8:	00f71c63          	bne	a4,a5,8000ece0 <msh_readline+0xd0>
            {
                line_buf[index] = '\0';
8000eccc:	fec42783          	lw	a5,-20(s0)
8000ecd0:	fd842703          	lw	a4,-40(s0)
8000ecd4:	00f707b3          	add	a5,a4,a5
8000ecd8:	00078023          	sb	zero,0(a5)
                break;
8000ecdc:	0480006f          	j	8000ed24 <msh_readline+0x114>
            }

            line_buf[index++] = ch;
8000ece0:	fec42783          	lw	a5,-20(s0)
8000ece4:	00178713          	addi	a4,a5,1
8000ece8:	fee42623          	sw	a4,-20(s0)
8000ecec:	00078713          	mv	a4,a5
8000ecf0:	fd842783          	lw	a5,-40(s0)
8000ecf4:	00e787b3          	add	a5,a5,a4
8000ecf8:	feb44703          	lbu	a4,-21(s0)
8000ecfc:	00e78023          	sb	a4,0(a5)
8000ed00:	0180006f          	j	8000ed18 <msh_readline+0x108>
        }
        else
        {
            line_buf[index] = '\0';
8000ed04:	fec42783          	lw	a5,-20(s0)
8000ed08:	fd842703          	lw	a4,-40(s0)
8000ed0c:	00f707b3          	add	a5,a4,a5
8000ed10:	00078023          	sb	zero,0(a5)
            break;
8000ed14:	0100006f          	j	8000ed24 <msh_readline+0x114>
    while (index < size)
8000ed18:	fec42703          	lw	a4,-20(s0)
8000ed1c:	fd442783          	lw	a5,-44(s0)
8000ed20:	f6f74ae3          	blt	a4,a5,8000ec94 <msh_readline+0x84>
        }
    }

    return index;
8000ed24:	fec42783          	lw	a5,-20(s0)
}
8000ed28:	00078513          	mv	a0,a5
8000ed2c:	02c12083          	lw	ra,44(sp)
8000ed30:	02812403          	lw	s0,40(sp)
8000ed34:	03010113          	addi	sp,sp,48
8000ed38:	00008067          	ret

8000ed3c <msh_exec_script>:

int msh_exec_script(const char *cmd_line, int size)
{
8000ed3c:	fb010113          	addi	sp,sp,-80
8000ed40:	04112623          	sw	ra,76(sp)
8000ed44:	04812423          	sw	s0,72(sp)
8000ed48:	05010413          	addi	s0,sp,80
8000ed4c:	faa42e23          	sw	a0,-68(s0)
8000ed50:	fab42c23          	sw	a1,-72(s0)
    int ret;
    int fd = -1;
8000ed54:	fff00793          	li	a5,-1
8000ed58:	fef42423          	sw	a5,-24(s0)
    char *pg_name;
    int length, cmd_length = 0;
8000ed5c:	fe042223          	sw	zero,-28(s0)

    if (size == 0) return -RT_ERROR;
8000ed60:	fb842783          	lw	a5,-72(s0)
8000ed64:	00079c63          	bnez	a5,8000ed7c <msh_exec_script+0x40>
8000ed68:	fff00793          	li	a5,-1
8000ed6c:	20c0006f          	j	8000ef78 <msh_exec_script+0x23c>

    /* get the length of command0 */
    while ((cmd_line[cmd_length] != ' ' && cmd_line[cmd_length] != '\t') && cmd_length < size)
        cmd_length ++;
8000ed70:	fe442783          	lw	a5,-28(s0)
8000ed74:	00178793          	addi	a5,a5,1
8000ed78:	fef42223          	sw	a5,-28(s0)
    while ((cmd_line[cmd_length] != ' ' && cmd_line[cmd_length] != '\t') && cmd_length < size)
8000ed7c:	fe442783          	lw	a5,-28(s0)
8000ed80:	fbc42703          	lw	a4,-68(s0)
8000ed84:	00f707b3          	add	a5,a4,a5
8000ed88:	0007c703          	lbu	a4,0(a5)
8000ed8c:	02000793          	li	a5,32
8000ed90:	02f70463          	beq	a4,a5,8000edb8 <msh_exec_script+0x7c>
8000ed94:	fe442783          	lw	a5,-28(s0)
8000ed98:	fbc42703          	lw	a4,-68(s0)
8000ed9c:	00f707b3          	add	a5,a4,a5
8000eda0:	0007c703          	lbu	a4,0(a5)
8000eda4:	00900793          	li	a5,9
8000eda8:	00f70863          	beq	a4,a5,8000edb8 <msh_exec_script+0x7c>
8000edac:	fe442703          	lw	a4,-28(s0)
8000edb0:	fb842783          	lw	a5,-72(s0)
8000edb4:	faf74ee3          	blt	a4,a5,8000ed70 <msh_exec_script+0x34>

    /* get name length */
    length = cmd_length + 32;
8000edb8:	fe442783          	lw	a5,-28(s0)
8000edbc:	02078793          	addi	a5,a5,32
8000edc0:	fcf42c23          	sw	a5,-40(s0)

    /* allocate program name memory */
    pg_name = (char *) rt_malloc(length);
8000edc4:	fd842783          	lw	a5,-40(s0)
8000edc8:	00078513          	mv	a0,a5
8000edcc:	700060ef          	jal	ra,800154cc <rt_malloc>
8000edd0:	fca42a23          	sw	a0,-44(s0)
    if (pg_name == RT_NULL) return -RT_ENOMEM;
8000edd4:	fd442783          	lw	a5,-44(s0)
8000edd8:	00079663          	bnez	a5,8000ede4 <msh_exec_script+0xa8>
8000eddc:	ffb00793          	li	a5,-5
8000ede0:	1980006f          	j	8000ef78 <msh_exec_script+0x23c>

    /* copy command0 */
    rt_memcpy(pg_name, cmd_line, cmd_length);
8000ede4:	fe442783          	lw	a5,-28(s0)
8000ede8:	00078613          	mv	a2,a5
8000edec:	fbc42583          	lw	a1,-68(s0)
8000edf0:	fd442503          	lw	a0,-44(s0)
8000edf4:	7f5040ef          	jal	ra,80013de8 <rt_memcpy>
    pg_name[cmd_length] = '\0';
8000edf8:	fe442783          	lw	a5,-28(s0)
8000edfc:	fd442703          	lw	a4,-44(s0)
8000ee00:	00f707b3          	add	a5,a4,a5
8000ee04:	00078023          	sb	zero,0(a5)

    if (strstr(pg_name, ".sh") != RT_NULL || strstr(pg_name, ".SH") != RT_NULL)
8000ee08:	00018597          	auipc	a1,0x18
8000ee0c:	a8458593          	addi	a1,a1,-1404 # 8002688c <raise+0xc98>
8000ee10:	fd442503          	lw	a0,-44(s0)
8000ee14:	1680e0ef          	jal	ra,8001cf7c <strstr>
8000ee18:	00050793          	mv	a5,a0
8000ee1c:	00079e63          	bnez	a5,8000ee38 <msh_exec_script+0xfc>
8000ee20:	00018597          	auipc	a1,0x18
8000ee24:	a7058593          	addi	a1,a1,-1424 # 80026890 <raise+0xc9c>
8000ee28:	fd442503          	lw	a0,-44(s0)
8000ee2c:	1500e0ef          	jal	ra,8001cf7c <strstr>
8000ee30:	00050793          	mv	a5,a0
8000ee34:	04078c63          	beqz	a5,8000ee8c <msh_exec_script+0x150>
    {
        /* try to open program */
        fd = open(pg_name, O_RDONLY, 0);
8000ee38:	00000613          	li	a2,0
8000ee3c:	00000593          	li	a1,0
8000ee40:	fd442503          	lw	a0,-44(s0)
8000ee44:	f24fa0ef          	jal	ra,80009568 <open>
8000ee48:	fea42423          	sw	a0,-24(s0)

        /* search in /bin path */
        if (fd < 0)
8000ee4c:	fe842783          	lw	a5,-24(s0)
8000ee50:	0207de63          	bgez	a5,8000ee8c <msh_exec_script+0x150>
        {
            rt_snprintf(pg_name, length - 1, "/bin/%.*s", cmd_length, cmd_line);
8000ee54:	fd842783          	lw	a5,-40(s0)
8000ee58:	fff78793          	addi	a5,a5,-1
8000ee5c:	fbc42703          	lw	a4,-68(s0)
8000ee60:	fe442683          	lw	a3,-28(s0)
8000ee64:	00018617          	auipc	a2,0x18
8000ee68:	a3060613          	addi	a2,a2,-1488 # 80026894 <raise+0xca0>
8000ee6c:	00078593          	mv	a1,a5
8000ee70:	fd442503          	lw	a0,-44(s0)
8000ee74:	194060ef          	jal	ra,80015008 <rt_snprintf>
            fd = open(pg_name, O_RDONLY, 0);
8000ee78:	00000613          	li	a2,0
8000ee7c:	00000593          	li	a1,0
8000ee80:	fd442503          	lw	a0,-44(s0)
8000ee84:	ee4fa0ef          	jal	ra,80009568 <open>
8000ee88:	fea42423          	sw	a0,-24(s0)
        }
    }

    rt_free(pg_name);
8000ee8c:	fd442503          	lw	a0,-44(s0)
8000ee90:	788060ef          	jal	ra,80015618 <rt_free>
    if (fd >= 0)
8000ee94:	fe842783          	lw	a5,-24(s0)
8000ee98:	0c07ca63          	bltz	a5,8000ef6c <msh_exec_script+0x230>
    {
        /* found script */
        char *line_buf;
        int length;

        line_buf = (char *) rt_malloc(RT_CONSOLEBUF_SIZE);
8000ee9c:	10000513          	li	a0,256
8000eea0:	62c060ef          	jal	ra,800154cc <rt_malloc>
8000eea4:	fca42823          	sw	a0,-48(s0)
        if (line_buf == RT_NULL)
8000eea8:	fd042783          	lw	a5,-48(s0)
8000eeac:	00079a63          	bnez	a5,8000eec0 <msh_exec_script+0x184>
        {
            close(fd);
8000eeb0:	fe842503          	lw	a0,-24(s0)
8000eeb4:	f6cfa0ef          	jal	ra,80009620 <close>
            return -RT_ENOMEM;
8000eeb8:	ffb00793          	li	a5,-5
8000eebc:	0bc0006f          	j	8000ef78 <msh_exec_script+0x23c>
        }

        /* read line by line and then exec it */
        do
        {
            length = msh_readline(fd, line_buf, RT_CONSOLEBUF_SIZE);
8000eec0:	10000613          	li	a2,256
8000eec4:	fd042583          	lw	a1,-48(s0)
8000eec8:	fe842503          	lw	a0,-24(s0)
8000eecc:	d45ff0ef          	jal	ra,8000ec10 <msh_readline>
8000eed0:	fca42623          	sw	a0,-52(s0)
            if (length > 0)
8000eed4:	fcc42783          	lw	a5,-52(s0)
8000eed8:	06f05a63          	blez	a5,8000ef4c <msh_exec_script+0x210>
            {
                char ch = '\0';
8000eedc:	fe0401a3          	sb	zero,-29(s0)
                int index;

                for (index = 0; index < length; index ++)
8000eee0:	fc042e23          	sw	zero,-36(s0)
8000eee4:	0400006f          	j	8000ef24 <msh_exec_script+0x1e8>
                {
                    ch = line_buf[index];
8000eee8:	fdc42783          	lw	a5,-36(s0)
8000eeec:	fd042703          	lw	a4,-48(s0)
8000eef0:	00f707b3          	add	a5,a4,a5
8000eef4:	0007c783          	lbu	a5,0(a5)
8000eef8:	fef401a3          	sb	a5,-29(s0)
                    if (ch == ' ' || ch == '\t') continue;
8000eefc:	fe344703          	lbu	a4,-29(s0)
8000ef00:	02000793          	li	a5,32
8000ef04:	00f70863          	beq	a4,a5,8000ef14 <msh_exec_script+0x1d8>
8000ef08:	fe344703          	lbu	a4,-29(s0)
8000ef0c:	00900793          	li	a5,9
8000ef10:	02f71063          	bne	a4,a5,8000ef30 <msh_exec_script+0x1f4>
8000ef14:	00000013          	nop
                for (index = 0; index < length; index ++)
8000ef18:	fdc42783          	lw	a5,-36(s0)
8000ef1c:	00178793          	addi	a5,a5,1
8000ef20:	fcf42e23          	sw	a5,-36(s0)
8000ef24:	fdc42703          	lw	a4,-36(s0)
8000ef28:	fcc42783          	lw	a5,-52(s0)
8000ef2c:	faf74ee3          	blt	a4,a5,8000eee8 <msh_exec_script+0x1ac>
                    else break;
                }

                if (ch != '#') /* not a comment */
8000ef30:	fe344703          	lbu	a4,-29(s0)
8000ef34:	02300793          	li	a5,35
8000ef38:	00f70a63          	beq	a4,a5,8000ef4c <msh_exec_script+0x210>
                    msh_exec(line_buf, length);
8000ef3c:	fcc42783          	lw	a5,-52(s0)
8000ef40:	00078593          	mv	a1,a5
8000ef44:	fd042503          	lw	a0,-48(s0)
8000ef48:	e50ff0ef          	jal	ra,8000e598 <msh_exec>
            }
        }
        while (length > 0);
8000ef4c:	fcc42783          	lw	a5,-52(s0)
8000ef50:	f6f048e3          	bgtz	a5,8000eec0 <msh_exec_script+0x184>

        close(fd);
8000ef54:	fe842503          	lw	a0,-24(s0)
8000ef58:	ec8fa0ef          	jal	ra,80009620 <close>
        rt_free(line_buf);
8000ef5c:	fd042503          	lw	a0,-48(s0)
8000ef60:	6b8060ef          	jal	ra,80015618 <rt_free>

        ret = 0;
8000ef64:	fe042623          	sw	zero,-20(s0)
8000ef68:	00c0006f          	j	8000ef74 <msh_exec_script+0x238>
    }
    else
    {
        ret = -1;
8000ef6c:	fff00793          	li	a5,-1
8000ef70:	fef42623          	sw	a5,-20(s0)
    }

    return ret;
8000ef74:	fec42783          	lw	a5,-20(s0)
}
8000ef78:	00078513          	mv	a0,a5
8000ef7c:	04c12083          	lw	ra,76(sp)
8000ef80:	04812403          	lw	s0,72(sp)
8000ef84:	05010113          	addi	sp,sp,80
8000ef88:	00008067          	ret

8000ef8c <cmd_ls>:
#ifdef DFS_USING_WORKDIR
    extern char working_directory[];
#endif

static int cmd_ls(int argc, char **argv)
{
8000ef8c:	fe010113          	addi	sp,sp,-32
8000ef90:	00112e23          	sw	ra,28(sp)
8000ef94:	00812c23          	sw	s0,24(sp)
8000ef98:	02010413          	addi	s0,sp,32
8000ef9c:	fea42623          	sw	a0,-20(s0)
8000efa0:	feb42423          	sw	a1,-24(s0)
    extern void ls(const char *pathname);

    if (argc == 1)
8000efa4:	fec42703          	lw	a4,-20(s0)
8000efa8:	00100793          	li	a5,1
8000efac:	00f71a63          	bne	a4,a5,8000efc0 <cmd_ls+0x34>
    {
#ifdef DFS_USING_WORKDIR
        ls(working_directory);
8000efb0:	0001a517          	auipc	a0,0x1a
8000efb4:	0e850513          	addi	a0,a0,232 # 80029098 <working_directory>
8000efb8:	918f90ef          	jal	ra,800080d0 <ls>
8000efbc:	0180006f          	j	8000efd4 <cmd_ls+0x48>
        ls("/");
#endif
    }
    else
    {
        ls(argv[1]);
8000efc0:	fe842783          	lw	a5,-24(s0)
8000efc4:	00478793          	addi	a5,a5,4
8000efc8:	0007a783          	lw	a5,0(a5)
8000efcc:	00078513          	mv	a0,a5
8000efd0:	900f90ef          	jal	ra,800080d0 <ls>
    }

    return 0;
8000efd4:	00000793          	li	a5,0
}
8000efd8:	00078513          	mv	a0,a5
8000efdc:	01c12083          	lw	ra,28(sp)
8000efe0:	01812403          	lw	s0,24(sp)
8000efe4:	02010113          	addi	sp,sp,32
8000efe8:	00008067          	ret

8000efec <cmd_cp>:
MSH_CMD_EXPORT_ALIAS(cmd_ls, ls, List information about the FILEs.);

static int cmd_cp(int argc, char **argv)
{
8000efec:	fe010113          	addi	sp,sp,-32
8000eff0:	00112e23          	sw	ra,28(sp)
8000eff4:	00812c23          	sw	s0,24(sp)
8000eff8:	02010413          	addi	s0,sp,32
8000effc:	fea42623          	sw	a0,-20(s0)
8000f000:	feb42423          	sw	a1,-24(s0)
    void copy(const char *src, const char *dst);

    if (argc != 3)
8000f004:	fec42703          	lw	a4,-20(s0)
8000f008:	00300793          	li	a5,3
8000f00c:	02f70063          	beq	a4,a5,8000f02c <cmd_cp+0x40>
    {
        rt_kprintf("Usage: cp SOURCE DEST\n");
8000f010:	00018517          	auipc	a0,0x18
8000f014:	89050513          	addi	a0,a0,-1904 # 800268a0 <raise+0xcac>
8000f018:	210060ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("Copy SOURCE to DEST.\n");
8000f01c:	00018517          	auipc	a0,0x18
8000f020:	89c50513          	addi	a0,a0,-1892 # 800268b8 <raise+0xcc4>
8000f024:	204060ef          	jal	ra,80015228 <rt_kprintf>
8000f028:	0280006f          	j	8000f050 <cmd_cp+0x64>
    }
    else
    {
        copy(argv[1], argv[2]);
8000f02c:	fe842783          	lw	a5,-24(s0)
8000f030:	00478793          	addi	a5,a5,4
8000f034:	0007a703          	lw	a4,0(a5)
8000f038:	fe842783          	lw	a5,-24(s0)
8000f03c:	00878793          	addi	a5,a5,8
8000f040:	0007a783          	lw	a5,0(a5)
8000f044:	00078593          	mv	a1,a5
8000f048:	00070513          	mv	a0,a4
8000f04c:	e8cf90ef          	jal	ra,800086d8 <copy>
    }

    return 0;
8000f050:	00000793          	li	a5,0
}
8000f054:	00078513          	mv	a0,a5
8000f058:	01c12083          	lw	ra,28(sp)
8000f05c:	01812403          	lw	s0,24(sp)
8000f060:	02010113          	addi	sp,sp,32
8000f064:	00008067          	ret

8000f068 <cmd_mv>:
MSH_CMD_EXPORT_ALIAS(cmd_cp, cp, Copy SOURCE to DEST.);

static int cmd_mv(int argc, char **argv)
{
8000f068:	fd010113          	addi	sp,sp,-48
8000f06c:	02112623          	sw	ra,44(sp)
8000f070:	02812423          	sw	s0,40(sp)
8000f074:	02912223          	sw	s1,36(sp)
8000f078:	03010413          	addi	s0,sp,48
8000f07c:	fca42e23          	sw	a0,-36(s0)
8000f080:	fcb42c23          	sw	a1,-40(s0)
    if (argc != 3)
8000f084:	fdc42703          	lw	a4,-36(s0)
8000f088:	00300793          	li	a5,3
8000f08c:	02f70063          	beq	a4,a5,8000f0ac <cmd_mv+0x44>
    {
        rt_kprintf("Usage: mv SOURCE DEST\n");
8000f090:	00018517          	auipc	a0,0x18
8000f094:	84050513          	addi	a0,a0,-1984 # 800268d0 <raise+0xcdc>
8000f098:	190060ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.\n");
8000f09c:	00018517          	auipc	a0,0x18
8000f0a0:	84c50513          	addi	a0,a0,-1972 # 800268e8 <raise+0xcf4>
8000f0a4:	184060ef          	jal	ra,80015228 <rt_kprintf>
8000f0a8:	1ac0006f          	j	8000f254 <cmd_mv+0x1ec>
    }
    else
    {
        int fd;
        char *dest = RT_NULL;
8000f0ac:	fe042623          	sw	zero,-20(s0)

        rt_kprintf("%s => %s\n", argv[1], argv[2]);
8000f0b0:	fd842783          	lw	a5,-40(s0)
8000f0b4:	00478793          	addi	a5,a5,4
8000f0b8:	0007a703          	lw	a4,0(a5)
8000f0bc:	fd842783          	lw	a5,-40(s0)
8000f0c0:	00878793          	addi	a5,a5,8
8000f0c4:	0007a783          	lw	a5,0(a5)
8000f0c8:	00078613          	mv	a2,a5
8000f0cc:	00070593          	mv	a1,a4
8000f0d0:	00018517          	auipc	a0,0x18
8000f0d4:	85050513          	addi	a0,a0,-1968 # 80026920 <raise+0xd2c>
8000f0d8:	150060ef          	jal	ra,80015228 <rt_kprintf>

        fd = open(argv[2], O_DIRECTORY, 0);
8000f0dc:	fd842783          	lw	a5,-40(s0)
8000f0e0:	00878793          	addi	a5,a5,8
8000f0e4:	0007a783          	lw	a5,0(a5)
8000f0e8:	00000613          	li	a2,0
8000f0ec:	002005b7          	lui	a1,0x200
8000f0f0:	00078513          	mv	a0,a5
8000f0f4:	c74fa0ef          	jal	ra,80009568 <open>
8000f0f8:	fea42223          	sw	a0,-28(s0)
        if (fd >= 0)
8000f0fc:	fe442783          	lw	a5,-28(s0)
8000f100:	0c07c463          	bltz	a5,8000f1c8 <cmd_mv+0x160>
        {
            char *src;

            close(fd);
8000f104:	fe442503          	lw	a0,-28(s0)
8000f108:	d18fa0ef          	jal	ra,80009620 <close>

            /* it's a directory */
            dest = (char *)rt_malloc(DFS_PATH_MAX);
8000f10c:	10000513          	li	a0,256
8000f110:	3bc060ef          	jal	ra,800154cc <rt_malloc>
8000f114:	fea42623          	sw	a0,-20(s0)
            if (dest == RT_NULL)
8000f118:	fec42783          	lw	a5,-20(s0)
8000f11c:	00079c63          	bnez	a5,8000f134 <cmd_mv+0xcc>
            {
                rt_kprintf("out of memory\n");
8000f120:	00018517          	auipc	a0,0x18
8000f124:	80c50513          	addi	a0,a0,-2036 # 8002692c <raise+0xd38>
8000f128:	100060ef          	jal	ra,80015228 <rt_kprintf>
                return -RT_ENOMEM;
8000f12c:	ffb00793          	li	a5,-5
8000f130:	1280006f          	j	8000f258 <cmd_mv+0x1f0>
            }

            src = argv[1] + rt_strlen(argv[1]);
8000f134:	fd842783          	lw	a5,-40(s0)
8000f138:	00478793          	addi	a5,a5,4
8000f13c:	0007a483          	lw	s1,0(a5)
8000f140:	fd842783          	lw	a5,-40(s0)
8000f144:	00478793          	addi	a5,a5,4
8000f148:	0007a783          	lw	a5,0(a5)
8000f14c:	00078513          	mv	a0,a5
8000f150:	0c0050ef          	jal	ra,80014210 <rt_strlen>
8000f154:	00050793          	mv	a5,a0
8000f158:	00f487b3          	add	a5,s1,a5
8000f15c:	fef42423          	sw	a5,-24(s0)
            while (src != argv[1])
8000f160:	0200006f          	j	8000f180 <cmd_mv+0x118>
            {
                if (*src == '/') break;
8000f164:	fe842783          	lw	a5,-24(s0)
8000f168:	0007c703          	lbu	a4,0(a5)
8000f16c:	02f00793          	li	a5,47
8000f170:	02f70463          	beq	a4,a5,8000f198 <cmd_mv+0x130>
                src --;
8000f174:	fe842783          	lw	a5,-24(s0)
8000f178:	fff78793          	addi	a5,a5,-1
8000f17c:	fef42423          	sw	a5,-24(s0)
            while (src != argv[1])
8000f180:	fd842783          	lw	a5,-40(s0)
8000f184:	00478793          	addi	a5,a5,4
8000f188:	0007a783          	lw	a5,0(a5)
8000f18c:	fe842703          	lw	a4,-24(s0)
8000f190:	fcf71ae3          	bne	a4,a5,8000f164 <cmd_mv+0xfc>
8000f194:	0080006f          	j	8000f19c <cmd_mv+0x134>
                if (*src == '/') break;
8000f198:	00000013          	nop
            }

            rt_snprintf(dest, DFS_PATH_MAX - 1, "%s/%s", argv[2], src);
8000f19c:	fd842783          	lw	a5,-40(s0)
8000f1a0:	00878793          	addi	a5,a5,8
8000f1a4:	0007a783          	lw	a5,0(a5)
8000f1a8:	fe842703          	lw	a4,-24(s0)
8000f1ac:	00078693          	mv	a3,a5
8000f1b0:	00017617          	auipc	a2,0x17
8000f1b4:	78c60613          	addi	a2,a2,1932 # 8002693c <raise+0xd48>
8000f1b8:	0ff00593          	li	a1,255
8000f1bc:	fec42503          	lw	a0,-20(s0)
8000f1c0:	649050ef          	jal	ra,80015008 <rt_snprintf>
8000f1c4:	0540006f          	j	8000f218 <cmd_mv+0x1b0>
        }
        else
        {
            fd = open(argv[2], O_RDONLY, 0);
8000f1c8:	fd842783          	lw	a5,-40(s0)
8000f1cc:	00878793          	addi	a5,a5,8
8000f1d0:	0007a783          	lw	a5,0(a5)
8000f1d4:	00000613          	li	a2,0
8000f1d8:	00000593          	li	a1,0
8000f1dc:	00078513          	mv	a0,a5
8000f1e0:	b88fa0ef          	jal	ra,80009568 <open>
8000f1e4:	fea42223          	sw	a0,-28(s0)
            if (fd >= 0)
8000f1e8:	fe442783          	lw	a5,-28(s0)
8000f1ec:	0207c063          	bltz	a5,8000f20c <cmd_mv+0x1a4>
            {
                close(fd);
8000f1f0:	fe442503          	lw	a0,-28(s0)
8000f1f4:	c2cfa0ef          	jal	ra,80009620 <close>

                unlink(argv[2]);
8000f1f8:	fd842783          	lw	a5,-40(s0)
8000f1fc:	00878793          	addi	a5,a5,8
8000f200:	0007a783          	lw	a5,0(a5)
8000f204:	00078513          	mv	a0,a5
8000f208:	f54fa0ef          	jal	ra,8000995c <unlink>
            }

            dest = argv[2];
8000f20c:	fd842783          	lw	a5,-40(s0)
8000f210:	0087a783          	lw	a5,8(a5)
8000f214:	fef42623          	sw	a5,-20(s0)
        }

        rename(argv[1], dest);
8000f218:	fd842783          	lw	a5,-40(s0)
8000f21c:	00478793          	addi	a5,a5,4
8000f220:	0007a783          	lw	a5,0(a5)
8000f224:	fec42583          	lw	a1,-20(s0)
8000f228:	00078513          	mv	a0,a5
8000f22c:	ed8fa0ef          	jal	ra,80009904 <rename>
        if (dest != RT_NULL && dest != argv[2]) rt_free(dest);
8000f230:	fec42783          	lw	a5,-20(s0)
8000f234:	02078063          	beqz	a5,8000f254 <cmd_mv+0x1ec>
8000f238:	fd842783          	lw	a5,-40(s0)
8000f23c:	00878793          	addi	a5,a5,8
8000f240:	0007a783          	lw	a5,0(a5)
8000f244:	fec42703          	lw	a4,-20(s0)
8000f248:	00f70663          	beq	a4,a5,8000f254 <cmd_mv+0x1ec>
8000f24c:	fec42503          	lw	a0,-20(s0)
8000f250:	3c8060ef          	jal	ra,80015618 <rt_free>
    }

    return 0;
8000f254:	00000793          	li	a5,0
}
8000f258:	00078513          	mv	a0,a5
8000f25c:	02c12083          	lw	ra,44(sp)
8000f260:	02812403          	lw	s0,40(sp)
8000f264:	02412483          	lw	s1,36(sp)
8000f268:	03010113          	addi	sp,sp,48
8000f26c:	00008067          	ret

8000f270 <cmd_cat>:
MSH_CMD_EXPORT_ALIAS(cmd_mv, mv, Rename SOURCE to DEST.);

static int cmd_cat(int argc, char **argv)
{
8000f270:	fd010113          	addi	sp,sp,-48
8000f274:	02112623          	sw	ra,44(sp)
8000f278:	02812423          	sw	s0,40(sp)
8000f27c:	03010413          	addi	s0,sp,48
8000f280:	fca42e23          	sw	a0,-36(s0)
8000f284:	fcb42c23          	sw	a1,-40(s0)
    int index;
    extern void cat(const char *filename);

    if (argc == 1)
8000f288:	fdc42703          	lw	a4,-36(s0)
8000f28c:	00100793          	li	a5,1
8000f290:	02f71263          	bne	a4,a5,8000f2b4 <cmd_cat+0x44>
    {
        rt_kprintf("Usage: cat [FILE]...\n");
8000f294:	00017517          	auipc	a0,0x17
8000f298:	6b050513          	addi	a0,a0,1712 # 80026944 <raise+0xd50>
8000f29c:	78d050ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("Concatenate FILE(s)\n");
8000f2a0:	00017517          	auipc	a0,0x17
8000f2a4:	6bc50513          	addi	a0,a0,1724 # 8002695c <raise+0xd68>
8000f2a8:	781050ef          	jal	ra,80015228 <rt_kprintf>
        return 0;
8000f2ac:	00000793          	li	a5,0
8000f2b0:	0480006f          	j	8000f2f8 <cmd_cat+0x88>
    }

    for (index = 1; index < argc; index ++)
8000f2b4:	00100793          	li	a5,1
8000f2b8:	fef42623          	sw	a5,-20(s0)
8000f2bc:	02c0006f          	j	8000f2e8 <cmd_cat+0x78>
    {
        cat(argv[index]);
8000f2c0:	fec42783          	lw	a5,-20(s0)
8000f2c4:	00279793          	slli	a5,a5,0x2
8000f2c8:	fd842703          	lw	a4,-40(s0)
8000f2cc:	00f707b3          	add	a5,a4,a5
8000f2d0:	0007a783          	lw	a5,0(a5)
8000f2d4:	00078513          	mv	a0,a5
8000f2d8:	fa9f80ef          	jal	ra,80008280 <cat>
    for (index = 1; index < argc; index ++)
8000f2dc:	fec42783          	lw	a5,-20(s0)
8000f2e0:	00178793          	addi	a5,a5,1
8000f2e4:	fef42623          	sw	a5,-20(s0)
8000f2e8:	fec42703          	lw	a4,-20(s0)
8000f2ec:	fdc42783          	lw	a5,-36(s0)
8000f2f0:	fcf748e3          	blt	a4,a5,8000f2c0 <cmd_cat+0x50>
    }

    return 0;
8000f2f4:	00000793          	li	a5,0
}
8000f2f8:	00078513          	mv	a0,a5
8000f2fc:	02c12083          	lw	ra,44(sp)
8000f300:	02812403          	lw	s0,40(sp)
8000f304:	03010113          	addi	sp,sp,48
8000f308:	00008067          	ret

8000f30c <directory_delete_for_msh>:
MSH_CMD_EXPORT_ALIAS(cmd_cat, cat, Concatenate FILE(s));

static void directory_delete_for_msh(const char *pathname, char f, char v)
{
8000f30c:	fd010113          	addi	sp,sp,-48
8000f310:	02112623          	sw	ra,44(sp)
8000f314:	02812423          	sw	s0,40(sp)
8000f318:	03010413          	addi	s0,sp,48
8000f31c:	fca42e23          	sw	a0,-36(s0)
8000f320:	00058793          	mv	a5,a1
8000f324:	00060713          	mv	a4,a2
8000f328:	fcf40da3          	sb	a5,-37(s0)
8000f32c:	00070793          	mv	a5,a4
8000f330:	fcf40d23          	sb	a5,-38(s0)
    DIR *dir = NULL;
8000f334:	fe042623          	sw	zero,-20(s0)
    struct dirent *dirent = NULL;
8000f338:	fe042423          	sw	zero,-24(s0)
    char *full_path;

    if (pathname == RT_NULL)
8000f33c:	fdc42783          	lw	a5,-36(s0)
8000f340:	1a078263          	beqz	a5,8000f4e4 <directory_delete_for_msh+0x1d8>
        return;

    full_path = (char *)rt_malloc(DFS_PATH_MAX);
8000f344:	10000513          	li	a0,256
8000f348:	184060ef          	jal	ra,800154cc <rt_malloc>
8000f34c:	fea42223          	sw	a0,-28(s0)
    if (full_path == RT_NULL)
8000f350:	fe442783          	lw	a5,-28(s0)
8000f354:	18078c63          	beqz	a5,8000f4ec <directory_delete_for_msh+0x1e0>
        return;

    dir = opendir(pathname);
8000f358:	fdc42503          	lw	a0,-36(s0)
8000f35c:	f60fa0ef          	jal	ra,80009abc <opendir>
8000f360:	fea42623          	sw	a0,-20(s0)
    if (dir == RT_NULL)
8000f364:	fec42783          	lw	a5,-20(s0)
8000f368:	02079463          	bnez	a5,8000f390 <directory_delete_for_msh+0x84>
    {
        if (f == 0)
8000f36c:	fdb44783          	lbu	a5,-37(s0)
8000f370:	00079a63          	bnez	a5,8000f384 <directory_delete_for_msh+0x78>
        {
            rt_kprintf("cannot remove '%s'\n", pathname);
8000f374:	fdc42583          	lw	a1,-36(s0)
8000f378:	00017517          	auipc	a0,0x17
8000f37c:	5fc50513          	addi	a0,a0,1532 # 80026974 <raise+0xd80>
8000f380:	6a9050ef          	jal	ra,80015228 <rt_kprintf>
        }
        rt_free(full_path);
8000f384:	fe442503          	lw	a0,-28(s0)
8000f388:	290060ef          	jal	ra,80015618 <rt_free>
        return;
8000f38c:	1640006f          	j	8000f4f0 <directory_delete_for_msh+0x1e4>
    }

    while (1)
    {
        dirent = readdir(dir);
8000f390:	fec42503          	lw	a0,-20(s0)
8000f394:	811fa0ef          	jal	ra,80009ba4 <readdir>
8000f398:	fea42423          	sw	a0,-24(s0)
        if (dirent == RT_NULL)
8000f39c:	fe842783          	lw	a5,-24(s0)
8000f3a0:	0e078463          	beqz	a5,8000f488 <directory_delete_for_msh+0x17c>
            break;
        if (rt_strcmp(".", dirent->d_name) != 0 &&
8000f3a4:	fe842783          	lw	a5,-24(s0)
8000f3a8:	00478793          	addi	a5,a5,4
8000f3ac:	00078593          	mv	a1,a5
8000f3b0:	00017517          	auipc	a0,0x17
8000f3b4:	5d850513          	addi	a0,a0,1496 # 80026988 <raise+0xd94>
8000f3b8:	5e1040ef          	jal	ra,80014198 <rt_strcmp>
8000f3bc:	00050793          	mv	a5,a0
8000f3c0:	fc0788e3          	beqz	a5,8000f390 <directory_delete_for_msh+0x84>
                rt_strcmp("..", dirent->d_name) != 0)
8000f3c4:	fe842783          	lw	a5,-24(s0)
8000f3c8:	00478793          	addi	a5,a5,4
8000f3cc:	00078593          	mv	a1,a5
8000f3d0:	00017517          	auipc	a0,0x17
8000f3d4:	5bc50513          	addi	a0,a0,1468 # 8002698c <raise+0xd98>
8000f3d8:	5c1040ef          	jal	ra,80014198 <rt_strcmp>
8000f3dc:	00050793          	mv	a5,a0
        if (rt_strcmp(".", dirent->d_name) != 0 &&
8000f3e0:	fa0788e3          	beqz	a5,8000f390 <directory_delete_for_msh+0x84>
        {
            rt_sprintf(full_path, "%s/%s", pathname, dirent->d_name);
8000f3e4:	fe842783          	lw	a5,-24(s0)
8000f3e8:	00478793          	addi	a5,a5,4
8000f3ec:	00078693          	mv	a3,a5
8000f3f0:	fdc42603          	lw	a2,-36(s0)
8000f3f4:	00017597          	auipc	a1,0x17
8000f3f8:	54858593          	addi	a1,a1,1352 # 8002693c <raise+0xd48>
8000f3fc:	fe442503          	lw	a0,-28(s0)
8000f400:	4c9050ef          	jal	ra,800150c8 <rt_sprintf>
            if (dirent->d_type == DT_REG)
8000f404:	fe842783          	lw	a5,-24(s0)
8000f408:	0007c703          	lbu	a4,0(a5)
8000f40c:	00100793          	li	a5,1
8000f410:	04f71663          	bne	a4,a5,8000f45c <directory_delete_for_msh+0x150>
            {
                if (unlink(full_path) != 0)
8000f414:	fe442503          	lw	a0,-28(s0)
8000f418:	d44fa0ef          	jal	ra,8000995c <unlink>
8000f41c:	00050793          	mv	a5,a0
8000f420:	02078063          	beqz	a5,8000f440 <directory_delete_for_msh+0x134>
                {
                    if (f == 0)
8000f424:	fdb44783          	lbu	a5,-37(s0)
8000f428:	f60794e3          	bnez	a5,8000f390 <directory_delete_for_msh+0x84>
                        rt_kprintf("cannot remove '%s'\n", full_path);
8000f42c:	fe442583          	lw	a1,-28(s0)
8000f430:	00017517          	auipc	a0,0x17
8000f434:	54450513          	addi	a0,a0,1348 # 80026974 <raise+0xd80>
8000f438:	5f1050ef          	jal	ra,80015228 <rt_kprintf>
8000f43c:	f55ff06f          	j	8000f390 <directory_delete_for_msh+0x84>
                }
                else if (v)
8000f440:	fda44783          	lbu	a5,-38(s0)
8000f444:	f40786e3          	beqz	a5,8000f390 <directory_delete_for_msh+0x84>
                {
                    rt_kprintf("removed '%s'\n", full_path);
8000f448:	fe442583          	lw	a1,-28(s0)
8000f44c:	00017517          	auipc	a0,0x17
8000f450:	54450513          	addi	a0,a0,1348 # 80026990 <raise+0xd9c>
8000f454:	5d5050ef          	jal	ra,80015228 <rt_kprintf>
8000f458:	f39ff06f          	j	8000f390 <directory_delete_for_msh+0x84>
                }
            }
            else if (dirent->d_type == DT_DIR)
8000f45c:	fe842783          	lw	a5,-24(s0)
8000f460:	0007c703          	lbu	a4,0(a5)
8000f464:	00200793          	li	a5,2
8000f468:	f2f714e3          	bne	a4,a5,8000f390 <directory_delete_for_msh+0x84>
            {
                directory_delete_for_msh(full_path, f, v);
8000f46c:	fda44703          	lbu	a4,-38(s0)
8000f470:	fdb44783          	lbu	a5,-37(s0)
8000f474:	00070613          	mv	a2,a4
8000f478:	00078593          	mv	a1,a5
8000f47c:	fe442503          	lw	a0,-28(s0)
8000f480:	e8dff0ef          	jal	ra,8000f30c <directory_delete_for_msh>
        dirent = readdir(dir);
8000f484:	f0dff06f          	j	8000f390 <directory_delete_for_msh+0x84>
            break;
8000f488:	00000013          	nop
            }
        }
    }
    closedir(dir);
8000f48c:	fec42503          	lw	a0,-20(s0)
8000f490:	8b5fa0ef          	jal	ra,80009d44 <closedir>
    rt_free(full_path);
8000f494:	fe442503          	lw	a0,-28(s0)
8000f498:	180060ef          	jal	ra,80015618 <rt_free>
    if (unlink(pathname) != 0)
8000f49c:	fdc42503          	lw	a0,-36(s0)
8000f4a0:	cbcfa0ef          	jal	ra,8000995c <unlink>
8000f4a4:	00050793          	mv	a5,a0
8000f4a8:	02078063          	beqz	a5,8000f4c8 <directory_delete_for_msh+0x1bc>
    {
        if (f == 0)
8000f4ac:	fdb44783          	lbu	a5,-37(s0)
8000f4b0:	04079063          	bnez	a5,8000f4f0 <directory_delete_for_msh+0x1e4>
            rt_kprintf("cannot remove '%s'\n", pathname);
8000f4b4:	fdc42583          	lw	a1,-36(s0)
8000f4b8:	00017517          	auipc	a0,0x17
8000f4bc:	4bc50513          	addi	a0,a0,1212 # 80026974 <raise+0xd80>
8000f4c0:	569050ef          	jal	ra,80015228 <rt_kprintf>
8000f4c4:	02c0006f          	j	8000f4f0 <directory_delete_for_msh+0x1e4>
    }
    else if (v)
8000f4c8:	fda44783          	lbu	a5,-38(s0)
8000f4cc:	02078263          	beqz	a5,8000f4f0 <directory_delete_for_msh+0x1e4>
    {
        rt_kprintf("removed directory '%s'\n", pathname);
8000f4d0:	fdc42583          	lw	a1,-36(s0)
8000f4d4:	00017517          	auipc	a0,0x17
8000f4d8:	4cc50513          	addi	a0,a0,1228 # 800269a0 <raise+0xdac>
8000f4dc:	54d050ef          	jal	ra,80015228 <rt_kprintf>
8000f4e0:	0100006f          	j	8000f4f0 <directory_delete_for_msh+0x1e4>
        return;
8000f4e4:	00000013          	nop
8000f4e8:	0080006f          	j	8000f4f0 <directory_delete_for_msh+0x1e4>
        return;
8000f4ec:	00000013          	nop
    }
}
8000f4f0:	02c12083          	lw	ra,44(sp)
8000f4f4:	02812403          	lw	s0,40(sp)
8000f4f8:	03010113          	addi	sp,sp,48
8000f4fc:	00008067          	ret

8000f500 <cmd_rm>:

static int cmd_rm(int argc, char **argv)
{
8000f500:	f7010113          	addi	sp,sp,-144
8000f504:	08112623          	sw	ra,140(sp)
8000f508:	08812423          	sw	s0,136(sp)
8000f50c:	09010413          	addi	s0,sp,144
8000f510:	f6a42e23          	sw	a0,-132(s0)
8000f514:	f6b42c23          	sw	a1,-136(s0)
    int index, n;
    char f = 0, r = 0, v = 0;
8000f518:	fe0403a3          	sb	zero,-25(s0)
8000f51c:	fe040323          	sb	zero,-26(s0)
8000f520:	fe0402a3          	sb	zero,-27(s0)

    if (argc == 1)
8000f524:	f7c42703          	lw	a4,-132(s0)
8000f528:	00100793          	li	a5,1
8000f52c:	02f71263          	bne	a4,a5,8000f550 <cmd_rm+0x50>
    {
        rt_kprintf("Usage: rm option(s) FILE...\n");
8000f530:	00017517          	auipc	a0,0x17
8000f534:	48850513          	addi	a0,a0,1160 # 800269b8 <raise+0xdc4>
8000f538:	4f1050ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("Remove (unlink) the FILE(s).\n");
8000f53c:	00017517          	auipc	a0,0x17
8000f540:	49c50513          	addi	a0,a0,1180 # 800269d8 <raise+0xde4>
8000f544:	4e5050ef          	jal	ra,80015228 <rt_kprintf>
        return 0;
8000f548:	00000793          	li	a5,0
8000f54c:	2880006f          	j	8000f7d4 <cmd_rm+0x2d4>
    }

    if (argv[1][0] == '-')
8000f550:	f7842783          	lw	a5,-136(s0)
8000f554:	00478793          	addi	a5,a5,4
8000f558:	0007a783          	lw	a5,0(a5)
8000f55c:	0007c703          	lbu	a4,0(a5)
8000f560:	02d00793          	li	a5,45
8000f564:	0ef71663          	bne	a4,a5,8000f650 <cmd_rm+0x150>
    {
        for (n = 0; argv[1][n]; n++)
8000f568:	fe042423          	sw	zero,-24(s0)
8000f56c:	0b00006f          	j	8000f61c <cmd_rm+0x11c>
        {
            switch (argv[1][n])
8000f570:	f7842783          	lw	a5,-136(s0)
8000f574:	00478793          	addi	a5,a5,4
8000f578:	0007a703          	lw	a4,0(a5)
8000f57c:	fe842783          	lw	a5,-24(s0)
8000f580:	00f707b3          	add	a5,a4,a5
8000f584:	0007c783          	lbu	a5,0(a5)
8000f588:	07600713          	li	a4,118
8000f58c:	04e78263          	beq	a5,a4,8000f5d0 <cmd_rm+0xd0>
8000f590:	07600713          	li	a4,118
8000f594:	04f74463          	blt	a4,a5,8000f5dc <cmd_rm+0xdc>
8000f598:	07200713          	li	a4,114
8000f59c:	02e78463          	beq	a5,a4,8000f5c4 <cmd_rm+0xc4>
8000f5a0:	07200713          	li	a4,114
8000f5a4:	02f74c63          	blt	a4,a5,8000f5dc <cmd_rm+0xdc>
8000f5a8:	02d00713          	li	a4,45
8000f5ac:	06e78063          	beq	a5,a4,8000f60c <cmd_rm+0x10c>
8000f5b0:	06600713          	li	a4,102
8000f5b4:	02e79463          	bne	a5,a4,8000f5dc <cmd_rm+0xdc>
            {
            case 'f':
                f = 1;
8000f5b8:	00100793          	li	a5,1
8000f5bc:	fef403a3          	sb	a5,-25(s0)
                break;
8000f5c0:	0500006f          	j	8000f610 <cmd_rm+0x110>
            case 'r':
                r = 1;
8000f5c4:	00100793          	li	a5,1
8000f5c8:	fef40323          	sb	a5,-26(s0)
                break;
8000f5cc:	0440006f          	j	8000f610 <cmd_rm+0x110>
            case 'v':
                v = 1;
8000f5d0:	00100793          	li	a5,1
8000f5d4:	fef402a3          	sb	a5,-27(s0)
                break;
8000f5d8:	0380006f          	j	8000f610 <cmd_rm+0x110>
            case '-':
                break;
            default:
                rt_kprintf("Error: Bad option: %c\n", argv[1][n]);
8000f5dc:	f7842783          	lw	a5,-136(s0)
8000f5e0:	00478793          	addi	a5,a5,4
8000f5e4:	0007a703          	lw	a4,0(a5)
8000f5e8:	fe842783          	lw	a5,-24(s0)
8000f5ec:	00f707b3          	add	a5,a4,a5
8000f5f0:	0007c783          	lbu	a5,0(a5)
8000f5f4:	00078593          	mv	a1,a5
8000f5f8:	00017517          	auipc	a0,0x17
8000f5fc:	40050513          	addi	a0,a0,1024 # 800269f8 <raise+0xe04>
8000f600:	429050ef          	jal	ra,80015228 <rt_kprintf>
                return 0;
8000f604:	00000793          	li	a5,0
8000f608:	1cc0006f          	j	8000f7d4 <cmd_rm+0x2d4>
                break;
8000f60c:	00000013          	nop
        for (n = 0; argv[1][n]; n++)
8000f610:	fe842783          	lw	a5,-24(s0)
8000f614:	00178793          	addi	a5,a5,1
8000f618:	fef42423          	sw	a5,-24(s0)
8000f61c:	f7842783          	lw	a5,-136(s0)
8000f620:	00478793          	addi	a5,a5,4
8000f624:	0007a703          	lw	a4,0(a5)
8000f628:	fe842783          	lw	a5,-24(s0)
8000f62c:	00f707b3          	add	a5,a4,a5
8000f630:	0007c783          	lbu	a5,0(a5)
8000f634:	f2079ee3          	bnez	a5,8000f570 <cmd_rm+0x70>
            }
        }
        argc -= 1;
8000f638:	f7c42783          	lw	a5,-132(s0)
8000f63c:	fff78793          	addi	a5,a5,-1
8000f640:	f6f42e23          	sw	a5,-132(s0)
        argv = argv + 1;
8000f644:	f7842783          	lw	a5,-136(s0)
8000f648:	00478793          	addi	a5,a5,4
8000f64c:	f6f42c23          	sw	a5,-136(s0)
    }

    for (index = 1; index < argc; index ++)
8000f650:	00100793          	li	a5,1
8000f654:	fef42623          	sw	a5,-20(s0)
8000f658:	16c0006f          	j	8000f7c4 <cmd_rm+0x2c4>
    {
        struct stat s;
        if (stat(argv[index], &s) == 0)
8000f65c:	fec42783          	lw	a5,-20(s0)
8000f660:	00279793          	slli	a5,a5,0x2
8000f664:	f7842703          	lw	a4,-136(s0)
8000f668:	00f707b3          	add	a5,a4,a5
8000f66c:	0007a783          	lw	a5,0(a5)
8000f670:	f8840713          	addi	a4,s0,-120
8000f674:	00070593          	mv	a1,a4
8000f678:	00078513          	mv	a0,a5
8000f67c:	b30fa0ef          	jal	ra,800099ac <stat>
8000f680:	00050793          	mv	a5,a0
8000f684:	10079463          	bnez	a5,8000f78c <cmd_rm+0x28c>
        {
            if (s.st_mode & S_IFDIR)
8000f688:	f8c42703          	lw	a4,-116(s0)
8000f68c:	000047b7          	lui	a5,0x4
8000f690:	00f777b3          	and	a5,a4,a5
8000f694:	06078263          	beqz	a5,8000f6f8 <cmd_rm+0x1f8>
            {
                if (r == 0)
8000f698:	fe644783          	lbu	a5,-26(s0)
8000f69c:	02079663          	bnez	a5,8000f6c8 <cmd_rm+0x1c8>
                    rt_kprintf("cannot remove '%s': Is a directory\n", argv[index]);
8000f6a0:	fec42783          	lw	a5,-20(s0)
8000f6a4:	00279793          	slli	a5,a5,0x2
8000f6a8:	f7842703          	lw	a4,-136(s0)
8000f6ac:	00f707b3          	add	a5,a4,a5
8000f6b0:	0007a783          	lw	a5,0(a5) # 4000 <__STACKSIZE__>
8000f6b4:	00078593          	mv	a1,a5
8000f6b8:	00017517          	auipc	a0,0x17
8000f6bc:	35850513          	addi	a0,a0,856 # 80026a10 <raise+0xe1c>
8000f6c0:	369050ef          	jal	ra,80015228 <rt_kprintf>
8000f6c4:	0f40006f          	j	8000f7b8 <cmd_rm+0x2b8>
                else
                    directory_delete_for_msh(argv[index], f, v);
8000f6c8:	fec42783          	lw	a5,-20(s0)
8000f6cc:	00279793          	slli	a5,a5,0x2
8000f6d0:	f7842703          	lw	a4,-136(s0)
8000f6d4:	00f707b3          	add	a5,a4,a5
8000f6d8:	0007a783          	lw	a5,0(a5)
8000f6dc:	fe544683          	lbu	a3,-27(s0)
8000f6e0:	fe744703          	lbu	a4,-25(s0)
8000f6e4:	00068613          	mv	a2,a3
8000f6e8:	00070593          	mv	a1,a4
8000f6ec:	00078513          	mv	a0,a5
8000f6f0:	c1dff0ef          	jal	ra,8000f30c <directory_delete_for_msh>
8000f6f4:	0c40006f          	j	8000f7b8 <cmd_rm+0x2b8>
            }
            else if (s.st_mode & S_IFREG)
8000f6f8:	f8c42703          	lw	a4,-116(s0)
8000f6fc:	000087b7          	lui	a5,0x8
8000f700:	00f777b3          	and	a5,a4,a5
8000f704:	0a078a63          	beqz	a5,8000f7b8 <cmd_rm+0x2b8>
            {
                if (unlink(argv[index]) != 0)
8000f708:	fec42783          	lw	a5,-20(s0)
8000f70c:	00279793          	slli	a5,a5,0x2
8000f710:	f7842703          	lw	a4,-136(s0)
8000f714:	00f707b3          	add	a5,a4,a5
8000f718:	0007a783          	lw	a5,0(a5) # 8000 <__STACKSIZE__+0x4000>
8000f71c:	00078513          	mv	a0,a5
8000f720:	a3cfa0ef          	jal	ra,8000995c <unlink>
8000f724:	00050793          	mv	a5,a0
8000f728:	02078a63          	beqz	a5,8000f75c <cmd_rm+0x25c>
                {
                    if (f == 0)
8000f72c:	fe744783          	lbu	a5,-25(s0)
8000f730:	08079463          	bnez	a5,8000f7b8 <cmd_rm+0x2b8>
                        rt_kprintf("cannot remove '%s'\n", argv[index]);
8000f734:	fec42783          	lw	a5,-20(s0)
8000f738:	00279793          	slli	a5,a5,0x2
8000f73c:	f7842703          	lw	a4,-136(s0)
8000f740:	00f707b3          	add	a5,a4,a5
8000f744:	0007a783          	lw	a5,0(a5)
8000f748:	00078593          	mv	a1,a5
8000f74c:	00017517          	auipc	a0,0x17
8000f750:	22850513          	addi	a0,a0,552 # 80026974 <raise+0xd80>
8000f754:	2d5050ef          	jal	ra,80015228 <rt_kprintf>
8000f758:	0600006f          	j	8000f7b8 <cmd_rm+0x2b8>
                }
                else if (v)
8000f75c:	fe544783          	lbu	a5,-27(s0)
8000f760:	04078c63          	beqz	a5,8000f7b8 <cmd_rm+0x2b8>
                {
                    rt_kprintf("removed '%s'\n", argv[index]);
8000f764:	fec42783          	lw	a5,-20(s0)
8000f768:	00279793          	slli	a5,a5,0x2
8000f76c:	f7842703          	lw	a4,-136(s0)
8000f770:	00f707b3          	add	a5,a4,a5
8000f774:	0007a783          	lw	a5,0(a5)
8000f778:	00078593          	mv	a1,a5
8000f77c:	00017517          	auipc	a0,0x17
8000f780:	21450513          	addi	a0,a0,532 # 80026990 <raise+0xd9c>
8000f784:	2a5050ef          	jal	ra,80015228 <rt_kprintf>
8000f788:	0300006f          	j	8000f7b8 <cmd_rm+0x2b8>
                }
            }
        }
        else if (f == 0)
8000f78c:	fe744783          	lbu	a5,-25(s0)
8000f790:	02079463          	bnez	a5,8000f7b8 <cmd_rm+0x2b8>
        {
            rt_kprintf("cannot remove '%s': No such file or directory\n", argv[index]);
8000f794:	fec42783          	lw	a5,-20(s0)
8000f798:	00279793          	slli	a5,a5,0x2
8000f79c:	f7842703          	lw	a4,-136(s0)
8000f7a0:	00f707b3          	add	a5,a4,a5
8000f7a4:	0007a783          	lw	a5,0(a5)
8000f7a8:	00078593          	mv	a1,a5
8000f7ac:	00017517          	auipc	a0,0x17
8000f7b0:	28850513          	addi	a0,a0,648 # 80026a34 <raise+0xe40>
8000f7b4:	275050ef          	jal	ra,80015228 <rt_kprintf>
    for (index = 1; index < argc; index ++)
8000f7b8:	fec42783          	lw	a5,-20(s0)
8000f7bc:	00178793          	addi	a5,a5,1
8000f7c0:	fef42623          	sw	a5,-20(s0)
8000f7c4:	fec42703          	lw	a4,-20(s0)
8000f7c8:	f7c42783          	lw	a5,-132(s0)
8000f7cc:	e8f748e3          	blt	a4,a5,8000f65c <cmd_rm+0x15c>
        }
    }
    return 0;
8000f7d0:	00000793          	li	a5,0
}
8000f7d4:	00078513          	mv	a0,a5
8000f7d8:	08c12083          	lw	ra,140(sp)
8000f7dc:	08812403          	lw	s0,136(sp)
8000f7e0:	09010113          	addi	sp,sp,144
8000f7e4:	00008067          	ret

8000f7e8 <cmd_cd>:
MSH_CMD_EXPORT_ALIAS(cmd_rm, rm, Remove(unlink) the FILE(s).);

#ifdef DFS_USING_WORKDIR
static int cmd_cd(int argc, char **argv)
{
8000f7e8:	fe010113          	addi	sp,sp,-32
8000f7ec:	00112e23          	sw	ra,28(sp)
8000f7f0:	00812c23          	sw	s0,24(sp)
8000f7f4:	02010413          	addi	s0,sp,32
8000f7f8:	fea42623          	sw	a0,-20(s0)
8000f7fc:	feb42423          	sw	a1,-24(s0)
    if (argc == 1)
8000f800:	fec42703          	lw	a4,-20(s0)
8000f804:	00100793          	li	a5,1
8000f808:	00f71e63          	bne	a4,a5,8000f824 <cmd_cd+0x3c>
    {
        rt_kprintf("%s\n", working_directory);
8000f80c:	0001a597          	auipc	a1,0x1a
8000f810:	88c58593          	addi	a1,a1,-1908 # 80029098 <working_directory>
8000f814:	00017517          	auipc	a0,0x17
8000f818:	25050513          	addi	a0,a0,592 # 80026a64 <raise+0xe70>
8000f81c:	20d050ef          	jal	ra,80015228 <rt_kprintf>
8000f820:	0480006f          	j	8000f868 <cmd_cd+0x80>
    }
    else if (argc == 2)
8000f824:	fec42703          	lw	a4,-20(s0)
8000f828:	00200793          	li	a5,2
8000f82c:	02f71e63          	bne	a4,a5,8000f868 <cmd_cd+0x80>
    {
        if (chdir(argv[1]) != 0)
8000f830:	fe842783          	lw	a5,-24(s0)
8000f834:	00478793          	addi	a5,a5,4
8000f838:	0007a783          	lw	a5,0(a5)
8000f83c:	00078513          	mv	a0,a5
8000f840:	d98fa0ef          	jal	ra,80009dd8 <chdir>
8000f844:	00050793          	mv	a5,a0
8000f848:	02078063          	beqz	a5,8000f868 <cmd_cd+0x80>
        {
            rt_kprintf("No such directory: %s\n", argv[1]);
8000f84c:	fe842783          	lw	a5,-24(s0)
8000f850:	00478793          	addi	a5,a5,4
8000f854:	0007a783          	lw	a5,0(a5)
8000f858:	00078593          	mv	a1,a5
8000f85c:	00017517          	auipc	a0,0x17
8000f860:	20c50513          	addi	a0,a0,524 # 80026a68 <raise+0xe74>
8000f864:	1c5050ef          	jal	ra,80015228 <rt_kprintf>
        }
    }

    return 0;
8000f868:	00000793          	li	a5,0
}
8000f86c:	00078513          	mv	a0,a5
8000f870:	01c12083          	lw	ra,28(sp)
8000f874:	01812403          	lw	s0,24(sp)
8000f878:	02010113          	addi	sp,sp,32
8000f87c:	00008067          	ret

8000f880 <cmd_pwd>:
MSH_CMD_EXPORT_ALIAS(cmd_cd, cd, Change the shell working directory.);

static int cmd_pwd(int argc, char **argv)
{
8000f880:	fe010113          	addi	sp,sp,-32
8000f884:	00112e23          	sw	ra,28(sp)
8000f888:	00812c23          	sw	s0,24(sp)
8000f88c:	02010413          	addi	s0,sp,32
8000f890:	fea42623          	sw	a0,-20(s0)
8000f894:	feb42423          	sw	a1,-24(s0)
    rt_kprintf("%s\n", working_directory);
8000f898:	0001a597          	auipc	a1,0x1a
8000f89c:	80058593          	addi	a1,a1,-2048 # 80029098 <working_directory>
8000f8a0:	00017517          	auipc	a0,0x17
8000f8a4:	1c450513          	addi	a0,a0,452 # 80026a64 <raise+0xe70>
8000f8a8:	181050ef          	jal	ra,80015228 <rt_kprintf>
    return 0;
8000f8ac:	00000793          	li	a5,0
}
8000f8b0:	00078513          	mv	a0,a5
8000f8b4:	01c12083          	lw	ra,28(sp)
8000f8b8:	01812403          	lw	s0,24(sp)
8000f8bc:	02010113          	addi	sp,sp,32
8000f8c0:	00008067          	ret

8000f8c4 <cmd_mkdir>:
MSH_CMD_EXPORT_ALIAS(cmd_pwd, pwd, Print the name of the current working directory.);
#endif

static int cmd_mkdir(int argc, char **argv)
{
8000f8c4:	fe010113          	addi	sp,sp,-32
8000f8c8:	00112e23          	sw	ra,28(sp)
8000f8cc:	00812c23          	sw	s0,24(sp)
8000f8d0:	02010413          	addi	s0,sp,32
8000f8d4:	fea42623          	sw	a0,-20(s0)
8000f8d8:	feb42423          	sw	a1,-24(s0)
    if (argc == 1)
8000f8dc:	fec42703          	lw	a4,-20(s0)
8000f8e0:	00100793          	li	a5,1
8000f8e4:	02f71063          	bne	a4,a5,8000f904 <cmd_mkdir+0x40>
    {
        rt_kprintf("Usage: mkdir [OPTION] DIRECTORY\n");
8000f8e8:	00017517          	auipc	a0,0x17
8000f8ec:	19850513          	addi	a0,a0,408 # 80026a80 <raise+0xe8c>
8000f8f0:	139050ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("Create the DIRECTORY, if they do not already exist.\n");
8000f8f4:	00017517          	auipc	a0,0x17
8000f8f8:	1b050513          	addi	a0,a0,432 # 80026aa4 <raise+0xeb0>
8000f8fc:	12d050ef          	jal	ra,80015228 <rt_kprintf>
8000f900:	01c0006f          	j	8000f91c <cmd_mkdir+0x58>
    }
    else
    {
        mkdir(argv[1], 0);
8000f904:	fe842783          	lw	a5,-24(s0)
8000f908:	00478793          	addi	a5,a5,4
8000f90c:	0007a783          	lw	a5,0(a5)
8000f910:	00000593          	li	a1,0
8000f914:	00078513          	mv	a0,a5
8000f918:	8ecfa0ef          	jal	ra,80009a04 <mkdir>
    }

    return 0;
8000f91c:	00000793          	li	a5,0
}
8000f920:	00078513          	mv	a0,a5
8000f924:	01c12083          	lw	ra,28(sp)
8000f928:	01812403          	lw	s0,24(sp)
8000f92c:	02010113          	addi	sp,sp,32
8000f930:	00008067          	ret

8000f934 <cmd_mkfs>:
MSH_CMD_EXPORT_ALIAS(cmd_mkdir, mkdir, Create the DIRECTORY.);

static int cmd_mkfs(int argc, char **argv)
{
8000f934:	fd010113          	addi	sp,sp,-48
8000f938:	02112623          	sw	ra,44(sp)
8000f93c:	02812423          	sw	s0,40(sp)
8000f940:	03010413          	addi	s0,sp,48
8000f944:	fca42e23          	sw	a0,-36(s0)
8000f948:	fcb42c23          	sw	a1,-40(s0)
    int result = 0;
8000f94c:	fe042623          	sw	zero,-20(s0)
    char *type = "elm"; /* use the default file system type as 'fatfs' */
8000f950:	00017797          	auipc	a5,0x17
8000f954:	18c78793          	addi	a5,a5,396 # 80026adc <raise+0xee8>
8000f958:	fef42423          	sw	a5,-24(s0)

    if (argc == 2)
8000f95c:	fdc42703          	lw	a4,-36(s0)
8000f960:	00200793          	li	a5,2
8000f964:	02f71263          	bne	a4,a5,8000f988 <cmd_mkfs+0x54>
    {
        result = dfs_mkfs(type, argv[1]);
8000f968:	fd842783          	lw	a5,-40(s0)
8000f96c:	00478793          	addi	a5,a5,4
8000f970:	0007a783          	lw	a5,0(a5)
8000f974:	00078593          	mv	a1,a5
8000f978:	fe842503          	lw	a0,-24(s0)
8000f97c:	e00f90ef          	jal	ra,80008f7c <dfs_mkfs>
8000f980:	fea42623          	sw	a0,-20(s0)
8000f984:	0740006f          	j	8000f9f8 <cmd_mkfs+0xc4>
    }
    else if (argc == 4)
8000f988:	fdc42703          	lw	a4,-36(s0)
8000f98c:	00400793          	li	a5,4
8000f990:	04f71a63          	bne	a4,a5,8000f9e4 <cmd_mkfs+0xb0>
    {
        if (strcmp(argv[1], "-t") == 0)
8000f994:	fd842783          	lw	a5,-40(s0)
8000f998:	00478793          	addi	a5,a5,4
8000f99c:	0007a783          	lw	a5,0(a5)
8000f9a0:	00017597          	auipc	a1,0x17
8000f9a4:	14058593          	addi	a1,a1,320 # 80026ae0 <raise+0xeec>
8000f9a8:	00078513          	mv	a0,a5
8000f9ac:	925f00ef          	jal	ra,800002d0 <strcmp>
8000f9b0:	00050793          	mv	a5,a0
8000f9b4:	04079263          	bnez	a5,8000f9f8 <cmd_mkfs+0xc4>
        {
            type = argv[2];
8000f9b8:	fd842783          	lw	a5,-40(s0)
8000f9bc:	0087a783          	lw	a5,8(a5)
8000f9c0:	fef42423          	sw	a5,-24(s0)
            result = dfs_mkfs(type, argv[3]);
8000f9c4:	fd842783          	lw	a5,-40(s0)
8000f9c8:	00c78793          	addi	a5,a5,12
8000f9cc:	0007a783          	lw	a5,0(a5)
8000f9d0:	00078593          	mv	a1,a5
8000f9d4:	fe842503          	lw	a0,-24(s0)
8000f9d8:	da4f90ef          	jal	ra,80008f7c <dfs_mkfs>
8000f9dc:	fea42623          	sw	a0,-20(s0)
8000f9e0:	0180006f          	j	8000f9f8 <cmd_mkfs+0xc4>
        }
    }
    else
    {
        rt_kprintf("Usage: mkfs [-t type] device\n");
8000f9e4:	00017517          	auipc	a0,0x17
8000f9e8:	10050513          	addi	a0,a0,256 # 80026ae4 <raise+0xef0>
8000f9ec:	03d050ef          	jal	ra,80015228 <rt_kprintf>
        return 0;
8000f9f0:	00000793          	li	a5,0
8000f9f4:	0200006f          	j	8000fa14 <cmd_mkfs+0xe0>
    }

    if (result != RT_EOK)
8000f9f8:	fec42783          	lw	a5,-20(s0)
8000f9fc:	00078a63          	beqz	a5,8000fa10 <cmd_mkfs+0xdc>
    {
        rt_kprintf("mkfs failed, result=%d\n", result);
8000fa00:	fec42583          	lw	a1,-20(s0)
8000fa04:	00017517          	auipc	a0,0x17
8000fa08:	10050513          	addi	a0,a0,256 # 80026b04 <raise+0xf10>
8000fa0c:	01d050ef          	jal	ra,80015228 <rt_kprintf>
    }

    return 0;
8000fa10:	00000793          	li	a5,0
}
8000fa14:	00078513          	mv	a0,a5
8000fa18:	02c12083          	lw	ra,44(sp)
8000fa1c:	02812403          	lw	s0,40(sp)
8000fa20:	03010113          	addi	sp,sp,48
8000fa24:	00008067          	ret

8000fa28 <cmd_mount>:
MSH_CMD_EXPORT_ALIAS(cmd_mkfs, mkfs, format disk with file system);

extern struct dfs_filesystem filesystem_table[];
static int cmd_mount(int argc, char **argv)
{
8000fa28:	fd010113          	addi	sp,sp,-48
8000fa2c:	02112623          	sw	ra,44(sp)
8000fa30:	02812423          	sw	s0,40(sp)
8000fa34:	03010413          	addi	s0,sp,48
8000fa38:	fca42e23          	sw	a0,-36(s0)
8000fa3c:	fcb42c23          	sw	a1,-40(s0)
    if (argc == 1)
8000fa40:	fdc42703          	lw	a4,-36(s0)
8000fa44:	00100793          	li	a5,1
8000fa48:	08f71c63          	bne	a4,a5,8000fae0 <cmd_mount+0xb8>
    {
        struct dfs_filesystem *iter;

        /* display the mount history */
        rt_kprintf("filesystem  device  mountpoint\n");
8000fa4c:	00017517          	auipc	a0,0x17
8000fa50:	0d050513          	addi	a0,a0,208 # 80026b1c <raise+0xf28>
8000fa54:	7d4050ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("----------  ------  ----------\n");
8000fa58:	00017517          	auipc	a0,0x17
8000fa5c:	0e450513          	addi	a0,a0,228 # 80026b3c <raise+0xf48>
8000fa60:	7c8050ef          	jal	ra,80015228 <rt_kprintf>
        for (iter = &filesystem_table[0];
8000fa64:	00074797          	auipc	a5,0x74
8000fa68:	66878793          	addi	a5,a5,1640 # 800840cc <filesystem_table>
8000fa6c:	fef42623          	sw	a5,-20(s0)
8000fa70:	0580006f          	j	8000fac8 <cmd_mount+0xa0>
                iter < &filesystem_table[DFS_FILESYSTEMS_MAX]; iter++)
        {
            if ((iter != NULL) && (iter->path != NULL))
8000fa74:	fec42783          	lw	a5,-20(s0)
8000fa78:	04078263          	beqz	a5,8000fabc <cmd_mount+0x94>
8000fa7c:	fec42783          	lw	a5,-20(s0)
8000fa80:	0047a783          	lw	a5,4(a5)
8000fa84:	02078c63          	beqz	a5,8000fabc <cmd_mount+0x94>
            {
                rt_kprintf("%-10s  %-6s  %-s\n",
                           iter->ops->name, iter->dev_id->parent.name, iter->path);
8000fa88:	fec42783          	lw	a5,-20(s0)
8000fa8c:	0087a783          	lw	a5,8(a5)
8000fa90:	0007a703          	lw	a4,0(a5)
8000fa94:	fec42783          	lw	a5,-20(s0)
8000fa98:	0007a783          	lw	a5,0(a5)
8000fa9c:	00078613          	mv	a2,a5
                rt_kprintf("%-10s  %-6s  %-s\n",
8000faa0:	fec42783          	lw	a5,-20(s0)
8000faa4:	0047a783          	lw	a5,4(a5)
8000faa8:	00078693          	mv	a3,a5
8000faac:	00070593          	mv	a1,a4
8000fab0:	00017517          	auipc	a0,0x17
8000fab4:	0ac50513          	addi	a0,a0,172 # 80026b5c <raise+0xf68>
8000fab8:	770050ef          	jal	ra,80015228 <rt_kprintf>
                iter < &filesystem_table[DFS_FILESYSTEMS_MAX]; iter++)
8000fabc:	fec42783          	lw	a5,-20(s0)
8000fac0:	01078793          	addi	a5,a5,16
8000fac4:	fef42623          	sw	a5,-20(s0)
8000fac8:	fec42703          	lw	a4,-20(s0)
8000facc:	00074797          	auipc	a5,0x74
8000fad0:	62078793          	addi	a5,a5,1568 # 800840ec <fslock>
8000fad4:	faf760e3          	bltu	a4,a5,8000fa74 <cmd_mount+0x4c>
            }
        }
        return 0;
8000fad8:	00000793          	li	a5,0
8000fadc:	0a40006f          	j	8000fb80 <cmd_mount+0x158>
    }
    else if (argc == 4)
8000fae0:	fdc42703          	lw	a4,-36(s0)
8000fae4:	00400793          	li	a5,4
8000fae8:	08f71463          	bne	a4,a5,8000fb70 <cmd_mount+0x148>
    {
        char *device = argv[1];
8000faec:	fd842783          	lw	a5,-40(s0)
8000faf0:	0047a783          	lw	a5,4(a5)
8000faf4:	fef42423          	sw	a5,-24(s0)
        char *path = argv[2];
8000faf8:	fd842783          	lw	a5,-40(s0)
8000fafc:	0087a783          	lw	a5,8(a5)
8000fb00:	fef42223          	sw	a5,-28(s0)
        char *fstype = argv[3];
8000fb04:	fd842783          	lw	a5,-40(s0)
8000fb08:	00c7a783          	lw	a5,12(a5)
8000fb0c:	fef42023          	sw	a5,-32(s0)

        /* mount a filesystem to the specified directory */
        rt_kprintf("mount device %s(%s) onto %s ... ", device, fstype, path);
8000fb10:	fe442683          	lw	a3,-28(s0)
8000fb14:	fe042603          	lw	a2,-32(s0)
8000fb18:	fe842583          	lw	a1,-24(s0)
8000fb1c:	00017517          	auipc	a0,0x17
8000fb20:	05450513          	addi	a0,a0,84 # 80026b70 <raise+0xf7c>
8000fb24:	704050ef          	jal	ra,80015228 <rt_kprintf>
        if (dfs_mount(device, path, fstype, 0, 0) == 0)
8000fb28:	00000713          	li	a4,0
8000fb2c:	00000693          	li	a3,0
8000fb30:	fe042603          	lw	a2,-32(s0)
8000fb34:	fe442583          	lw	a1,-28(s0)
8000fb38:	fe842503          	lw	a0,-24(s0)
8000fb3c:	fb5f80ef          	jal	ra,80008af0 <dfs_mount>
8000fb40:	00050793          	mv	a5,a0
8000fb44:	00079c63          	bnez	a5,8000fb5c <cmd_mount+0x134>
        {
            rt_kprintf("succeed!\n");
8000fb48:	00017517          	auipc	a0,0x17
8000fb4c:	04c50513          	addi	a0,a0,76 # 80026b94 <raise+0xfa0>
8000fb50:	6d8050ef          	jal	ra,80015228 <rt_kprintf>
            return 0;
8000fb54:	00000793          	li	a5,0
8000fb58:	0280006f          	j	8000fb80 <cmd_mount+0x158>
        }
        else
        {
            rt_kprintf("failed!\n");
8000fb5c:	00017517          	auipc	a0,0x17
8000fb60:	04450513          	addi	a0,a0,68 # 80026ba0 <raise+0xfac>
8000fb64:	6c4050ef          	jal	ra,80015228 <rt_kprintf>
            return -1;
8000fb68:	fff00793          	li	a5,-1
8000fb6c:	0140006f          	j	8000fb80 <cmd_mount+0x158>
        }
    }
    else
    {
        rt_kprintf("Usage: mount <device> <mountpoint> <fstype>.\n");
8000fb70:	00017517          	auipc	a0,0x17
8000fb74:	03c50513          	addi	a0,a0,60 # 80026bac <raise+0xfb8>
8000fb78:	6b0050ef          	jal	ra,80015228 <rt_kprintf>
        return -1;
8000fb7c:	fff00793          	li	a5,-1
    }
}
8000fb80:	00078513          	mv	a0,a5
8000fb84:	02c12083          	lw	ra,44(sp)
8000fb88:	02812403          	lw	s0,40(sp)
8000fb8c:	03010113          	addi	sp,sp,48
8000fb90:	00008067          	ret

8000fb94 <cmd_umount>:
MSH_CMD_EXPORT_ALIAS(cmd_mount, mount, mount <device> <mountpoint> <fstype>);

/* unmount the filesystem from the specified mountpoint */
static int cmd_umount(int argc, char **argv)
{
8000fb94:	fd010113          	addi	sp,sp,-48
8000fb98:	02112623          	sw	ra,44(sp)
8000fb9c:	02812423          	sw	s0,40(sp)
8000fba0:	03010413          	addi	s0,sp,48
8000fba4:	fca42e23          	sw	a0,-36(s0)
8000fba8:	fcb42c23          	sw	a1,-40(s0)
    char *path = argv[1];
8000fbac:	fd842783          	lw	a5,-40(s0)
8000fbb0:	0047a783          	lw	a5,4(a5)
8000fbb4:	fef42623          	sw	a5,-20(s0)

    if (argc != 2)
8000fbb8:	fdc42703          	lw	a4,-36(s0)
8000fbbc:	00200793          	li	a5,2
8000fbc0:	00f70c63          	beq	a4,a5,8000fbd8 <cmd_umount+0x44>
    {
        rt_kprintf("Usage: unmount <mountpoint>.\n");
8000fbc4:	00017517          	auipc	a0,0x17
8000fbc8:	01850513          	addi	a0,a0,24 # 80026bdc <raise+0xfe8>
8000fbcc:	65c050ef          	jal	ra,80015228 <rt_kprintf>
        return -1;
8000fbd0:	fff00793          	li	a5,-1
8000fbd4:	0480006f          	j	8000fc1c <cmd_umount+0x88>
    }

    rt_kprintf("unmount %s ... ", path);
8000fbd8:	fec42583          	lw	a1,-20(s0)
8000fbdc:	00017517          	auipc	a0,0x17
8000fbe0:	02050513          	addi	a0,a0,32 # 80026bfc <raise+0x1008>
8000fbe4:	644050ef          	jal	ra,80015228 <rt_kprintf>
    if (dfs_unmount(path) < 0)
8000fbe8:	fec42503          	lw	a0,-20(s0)
8000fbec:	a34f90ef          	jal	ra,80008e20 <dfs_unmount>
8000fbf0:	00050793          	mv	a5,a0
8000fbf4:	0007dc63          	bgez	a5,8000fc0c <cmd_umount+0x78>
    {
        rt_kprintf("failed!\n");
8000fbf8:	00017517          	auipc	a0,0x17
8000fbfc:	fa850513          	addi	a0,a0,-88 # 80026ba0 <raise+0xfac>
8000fc00:	628050ef          	jal	ra,80015228 <rt_kprintf>
        return -1;
8000fc04:	fff00793          	li	a5,-1
8000fc08:	0140006f          	j	8000fc1c <cmd_umount+0x88>
    }
    else
    {
        rt_kprintf("succeed!\n");
8000fc0c:	00017517          	auipc	a0,0x17
8000fc10:	f8850513          	addi	a0,a0,-120 # 80026b94 <raise+0xfa0>
8000fc14:	614050ef          	jal	ra,80015228 <rt_kprintf>
        return 0;
8000fc18:	00000793          	li	a5,0
    }
}
8000fc1c:	00078513          	mv	a0,a5
8000fc20:	02c12083          	lw	ra,44(sp)
8000fc24:	02812403          	lw	s0,40(sp)
8000fc28:	03010113          	addi	sp,sp,48
8000fc2c:	00008067          	ret

8000fc30 <cmd_df>:
MSH_CMD_EXPORT_ALIAS(cmd_umount, umount, Unmount device from file system);

extern int df(const char *path);
static int cmd_df(int argc, char **argv)
{
8000fc30:	fe010113          	addi	sp,sp,-32
8000fc34:	00112e23          	sw	ra,28(sp)
8000fc38:	00812c23          	sw	s0,24(sp)
8000fc3c:	02010413          	addi	s0,sp,32
8000fc40:	fea42623          	sw	a0,-20(s0)
8000fc44:	feb42423          	sw	a1,-24(s0)
    if (argc != 2)
8000fc48:	fec42703          	lw	a4,-20(s0)
8000fc4c:	00200793          	li	a5,2
8000fc50:	00f70a63          	beq	a4,a5,8000fc64 <cmd_df+0x34>
    {
        df("/");
8000fc54:	00017517          	auipc	a0,0x17
8000fc58:	fb850513          	addi	a0,a0,-72 # 80026c0c <raise+0x1018>
8000fc5c:	cccf90ef          	jal	ra,80009128 <df>
8000fc60:	0700006f          	j	8000fcd0 <cmd_df+0xa0>
    }
    else
    {
        if ((strcmp(argv[1], "--help") == 0) || (strcmp(argv[1], "-h") == 0))
8000fc64:	fe842783          	lw	a5,-24(s0)
8000fc68:	00478793          	addi	a5,a5,4
8000fc6c:	0007a783          	lw	a5,0(a5)
8000fc70:	00017597          	auipc	a1,0x17
8000fc74:	fa058593          	addi	a1,a1,-96 # 80026c10 <raise+0x101c>
8000fc78:	00078513          	mv	a0,a5
8000fc7c:	e54f00ef          	jal	ra,800002d0 <strcmp>
8000fc80:	00050793          	mv	a5,a0
8000fc84:	02078463          	beqz	a5,8000fcac <cmd_df+0x7c>
8000fc88:	fe842783          	lw	a5,-24(s0)
8000fc8c:	00478793          	addi	a5,a5,4
8000fc90:	0007a783          	lw	a5,0(a5)
8000fc94:	00017597          	auipc	a1,0x17
8000fc98:	f8458593          	addi	a1,a1,-124 # 80026c18 <raise+0x1024>
8000fc9c:	00078513          	mv	a0,a5
8000fca0:	e30f00ef          	jal	ra,800002d0 <strcmp>
8000fca4:	00050793          	mv	a5,a0
8000fca8:	00079a63          	bnez	a5,8000fcbc <cmd_df+0x8c>
        {
            rt_kprintf("df [path]\n");
8000fcac:	00017517          	auipc	a0,0x17
8000fcb0:	f7050513          	addi	a0,a0,-144 # 80026c1c <raise+0x1028>
8000fcb4:	574050ef          	jal	ra,80015228 <rt_kprintf>
8000fcb8:	0180006f          	j	8000fcd0 <cmd_df+0xa0>
        }
        else
        {
            df(argv[1]);
8000fcbc:	fe842783          	lw	a5,-24(s0)
8000fcc0:	00478793          	addi	a5,a5,4
8000fcc4:	0007a783          	lw	a5,0(a5)
8000fcc8:	00078513          	mv	a0,a5
8000fccc:	c5cf90ef          	jal	ra,80009128 <df>
        }
    }

    return 0;
8000fcd0:	00000793          	li	a5,0
}
8000fcd4:	00078513          	mv	a0,a5
8000fcd8:	01c12083          	lw	ra,28(sp)
8000fcdc:	01812403          	lw	s0,24(sp)
8000fce0:	02010113          	addi	sp,sp,32
8000fce4:	00008067          	ret

8000fce8 <cmd_echo>:
MSH_CMD_EXPORT_ALIAS(cmd_df, df, disk free);

static int cmd_echo(int argc, char **argv)
{
8000fce8:	fd010113          	addi	sp,sp,-48
8000fcec:	02112623          	sw	ra,44(sp)
8000fcf0:	02812423          	sw	s0,40(sp)
8000fcf4:	02912223          	sw	s1,36(sp)
8000fcf8:	03010413          	addi	s0,sp,48
8000fcfc:	fca42e23          	sw	a0,-36(s0)
8000fd00:	fcb42c23          	sw	a1,-40(s0)
    if (argc == 2)
8000fd04:	fdc42703          	lw	a4,-36(s0)
8000fd08:	00200793          	li	a5,2
8000fd0c:	02f71263          	bne	a4,a5,8000fd30 <cmd_echo+0x48>
    {
        rt_kprintf("%s\n", argv[1]);
8000fd10:	fd842783          	lw	a5,-40(s0)
8000fd14:	00478793          	addi	a5,a5,4
8000fd18:	0007a783          	lw	a5,0(a5)
8000fd1c:	00078593          	mv	a1,a5
8000fd20:	00017517          	auipc	a0,0x17
8000fd24:	d4450513          	addi	a0,a0,-700 # 80026a64 <raise+0xe70>
8000fd28:	500050ef          	jal	ra,80015228 <rt_kprintf>
8000fd2c:	0a40006f          	j	8000fdd0 <cmd_echo+0xe8>
    }
    else if (argc == 3)
8000fd30:	fdc42703          	lw	a4,-36(s0)
8000fd34:	00300793          	li	a5,3
8000fd38:	08f71663          	bne	a4,a5,8000fdc4 <cmd_echo+0xdc>
    {
        int fd;

        fd = open(argv[2], O_RDWR | O_APPEND | O_CREAT, 0);
8000fd3c:	fd842783          	lw	a5,-40(s0)
8000fd40:	00878793          	addi	a5,a5,8
8000fd44:	0007a783          	lw	a5,0(a5)
8000fd48:	00000613          	li	a2,0
8000fd4c:	20a00593          	li	a1,522
8000fd50:	00078513          	mv	a0,a5
8000fd54:	815f90ef          	jal	ra,80009568 <open>
8000fd58:	fea42623          	sw	a0,-20(s0)
        if (fd >= 0)
8000fd5c:	fec42783          	lw	a5,-20(s0)
8000fd60:	0407c263          	bltz	a5,8000fda4 <cmd_echo+0xbc>
        {
            write(fd, argv[1], strlen(argv[1]));
8000fd64:	fd842783          	lw	a5,-40(s0)
8000fd68:	00478793          	addi	a5,a5,4
8000fd6c:	0007a483          	lw	s1,0(a5)
8000fd70:	fd842783          	lw	a5,-40(s0)
8000fd74:	00478793          	addi	a5,a5,4
8000fd78:	0007a783          	lw	a5,0(a5)
8000fd7c:	00078513          	mv	a0,a5
8000fd80:	4840d0ef          	jal	ra,8001d204 <strlen>
8000fd84:	00050793          	mv	a5,a0
8000fd88:	00078613          	mv	a2,a5
8000fd8c:	00048593          	mv	a1,s1
8000fd90:	fec42503          	lw	a0,-20(s0)
8000fd94:	9a5f90ef          	jal	ra,80009738 <write>
            close(fd);
8000fd98:	fec42503          	lw	a0,-20(s0)
8000fd9c:	885f90ef          	jal	ra,80009620 <close>
8000fda0:	0300006f          	j	8000fdd0 <cmd_echo+0xe8>
        }
        else
        {
            rt_kprintf("open file:%s failed!\n", argv[2]);
8000fda4:	fd842783          	lw	a5,-40(s0)
8000fda8:	00878793          	addi	a5,a5,8
8000fdac:	0007a783          	lw	a5,0(a5)
8000fdb0:	00078593          	mv	a1,a5
8000fdb4:	00017517          	auipc	a0,0x17
8000fdb8:	e7450513          	addi	a0,a0,-396 # 80026c28 <raise+0x1034>
8000fdbc:	46c050ef          	jal	ra,80015228 <rt_kprintf>
8000fdc0:	0100006f          	j	8000fdd0 <cmd_echo+0xe8>
        }
    }
    else
    {
        rt_kprintf("Usage: echo \"string\" [filename]\n");
8000fdc4:	00017517          	auipc	a0,0x17
8000fdc8:	e7c50513          	addi	a0,a0,-388 # 80026c40 <raise+0x104c>
8000fdcc:	45c050ef          	jal	ra,80015228 <rt_kprintf>
    }

    return 0;
8000fdd0:	00000793          	li	a5,0
}
8000fdd4:	00078513          	mv	a0,a5
8000fdd8:	02c12083          	lw	ra,44(sp)
8000fddc:	02812403          	lw	s0,40(sp)
8000fde0:	02412483          	lw	s1,36(sp)
8000fde4:	03010113          	addi	sp,sp,48
8000fde8:	00008067          	ret

8000fdec <cmd_tail>:
MSH_CMD_EXPORT_ALIAS(cmd_echo, echo, echo string to file);

static int cmd_tail(int argc, char **argv)
{
8000fdec:	fc010113          	addi	sp,sp,-64
8000fdf0:	02112e23          	sw	ra,60(sp)
8000fdf4:	02812c23          	sw	s0,56(sp)
8000fdf8:	04010413          	addi	s0,sp,64
8000fdfc:	fca42623          	sw	a0,-52(s0)
8000fe00:	fcb42423          	sw	a1,-56(s0)
    int fd;
    char c = RT_NULL;
8000fe04:	fc0409a3          	sb	zero,-45(s0)
    char *file_name = RT_NULL;
8000fe08:	fe042623          	sw	zero,-20(s0)
    rt_uint32_t total_lines = 0;
8000fe0c:	fe042423          	sw	zero,-24(s0)
    rt_uint32_t target_line = 0;
8000fe10:	fc042c23          	sw	zero,-40(s0)
    rt_uint32_t current_line = 0;
8000fe14:	fe042223          	sw	zero,-28(s0)
    rt_uint32_t required_lines = 0;
8000fe18:	fe042023          	sw	zero,-32(s0)
    rt_uint32_t start_line = 0;
8000fe1c:	fc042e23          	sw	zero,-36(s0)

    if (argc < 2)
8000fe20:	fcc42703          	lw	a4,-52(s0)
8000fe24:	00100793          	li	a5,1
8000fe28:	00e7cc63          	blt	a5,a4,8000fe40 <cmd_tail+0x54>
    {
        rt_kprintf("Usage: tail [-n numbers] <filename>\n");
8000fe2c:	00017517          	auipc	a0,0x17
8000fe30:	e3850513          	addi	a0,a0,-456 # 80026c64 <raise+0x1070>
8000fe34:	3f4050ef          	jal	ra,80015228 <rt_kprintf>
        return -1;
8000fe38:	fff00793          	li	a5,-1
8000fe3c:	25c0006f          	j	80010098 <cmd_tail+0x2ac>
    }
    else if (argc == 2)
8000fe40:	fcc42703          	lw	a4,-52(s0)
8000fe44:	00200793          	li	a5,2
8000fe48:	00f71e63          	bne	a4,a5,8000fe64 <cmd_tail+0x78>
    {
        required_lines = 10; /* default: 10 lines from tail */
8000fe4c:	00a00793          	li	a5,10
8000fe50:	fef42023          	sw	a5,-32(s0)
        file_name = argv[1];
8000fe54:	fc842783          	lw	a5,-56(s0)
8000fe58:	0047a783          	lw	a5,4(a5)
8000fe5c:	fef42623          	sw	a5,-20(s0)
8000fe60:	0a40006f          	j	8000ff04 <cmd_tail+0x118>
    }
    else if (rt_strcmp(argv[1], "-n") == 0)
8000fe64:	fc842783          	lw	a5,-56(s0)
8000fe68:	00478793          	addi	a5,a5,4
8000fe6c:	0007a783          	lw	a5,0(a5)
8000fe70:	00017597          	auipc	a1,0x17
8000fe74:	e1c58593          	addi	a1,a1,-484 # 80026c8c <raise+0x1098>
8000fe78:	00078513          	mv	a0,a5
8000fe7c:	31c040ef          	jal	ra,80014198 <rt_strcmp>
8000fe80:	00050793          	mv	a5,a0
8000fe84:	06079663          	bnez	a5,8000fef0 <cmd_tail+0x104>
    {
        if (argv[2][0] != '+')
8000fe88:	fc842783          	lw	a5,-56(s0)
8000fe8c:	00878793          	addi	a5,a5,8
8000fe90:	0007a783          	lw	a5,0(a5)
8000fe94:	0007c703          	lbu	a4,0(a5)
8000fe98:	02b00793          	li	a5,43
8000fe9c:	02f70263          	beq	a4,a5,8000fec0 <cmd_tail+0xd4>
        {
            required_lines = atoi(argv[2]);
8000fea0:	fc842783          	lw	a5,-56(s0)
8000fea4:	00878793          	addi	a5,a5,8
8000fea8:	0007a783          	lw	a5,0(a5)
8000feac:	00078513          	mv	a0,a5
8000feb0:	5f40c0ef          	jal	ra,8001c4a4 <atoi>
8000feb4:	00050793          	mv	a5,a0
8000feb8:	fef42023          	sw	a5,-32(s0)
8000febc:	0240006f          	j	8000fee0 <cmd_tail+0xf4>
        }
        else
        {
            start_line = atoi(&argv[2][1]); /* eg: +100, to get the 100 */
8000fec0:	fc842783          	lw	a5,-56(s0)
8000fec4:	00878793          	addi	a5,a5,8
8000fec8:	0007a783          	lw	a5,0(a5)
8000fecc:	00178793          	addi	a5,a5,1
8000fed0:	00078513          	mv	a0,a5
8000fed4:	5d00c0ef          	jal	ra,8001c4a4 <atoi>
8000fed8:	00050793          	mv	a5,a0
8000fedc:	fcf42e23          	sw	a5,-36(s0)
        }
        file_name = argv[3];
8000fee0:	fc842783          	lw	a5,-56(s0)
8000fee4:	00c7a783          	lw	a5,12(a5)
8000fee8:	fef42623          	sw	a5,-20(s0)
8000feec:	0180006f          	j	8000ff04 <cmd_tail+0x118>
    }
    else
    {
        rt_kprintf("Usage: tail [-n numbers] <filename>\n");
8000fef0:	00017517          	auipc	a0,0x17
8000fef4:	d7450513          	addi	a0,a0,-652 # 80026c64 <raise+0x1070>
8000fef8:	330050ef          	jal	ra,80015228 <rt_kprintf>
        return -1;
8000fefc:	fff00793          	li	a5,-1
8000ff00:	1980006f          	j	80010098 <cmd_tail+0x2ac>
    }

    fd = open(file_name, O_RDONLY);
8000ff04:	00000593          	li	a1,0
8000ff08:	fec42503          	lw	a0,-20(s0)
8000ff0c:	e5cf90ef          	jal	ra,80009568 <open>
8000ff10:	fca42a23          	sw	a0,-44(s0)
    if (fd < 0)
8000ff14:	fd442783          	lw	a5,-44(s0)
8000ff18:	0407d263          	bgez	a5,8000ff5c <cmd_tail+0x170>
    {
        rt_kprintf("File doesn't exist\n");
8000ff1c:	00017517          	auipc	a0,0x17
8000ff20:	d7450513          	addi	a0,a0,-652 # 80026c90 <raise+0x109c>
8000ff24:	304050ef          	jal	ra,80015228 <rt_kprintf>
        return -1;
8000ff28:	fff00793          	li	a5,-1
8000ff2c:	16c0006f          	j	80010098 <cmd_tail+0x2ac>
    }

    while ((read(fd, &c, sizeof(char))) > 0)
    {
        if(total_lines == 0)
8000ff30:	fe842783          	lw	a5,-24(s0)
8000ff34:	00079863          	bnez	a5,8000ff44 <cmd_tail+0x158>
        {
            total_lines++;
8000ff38:	fe842783          	lw	a5,-24(s0)
8000ff3c:	00178793          	addi	a5,a5,1
8000ff40:	fef42423          	sw	a5,-24(s0)
        }
        if (c == '\n')
8000ff44:	fd344703          	lbu	a4,-45(s0)
8000ff48:	00a00793          	li	a5,10
8000ff4c:	00f71863          	bne	a4,a5,8000ff5c <cmd_tail+0x170>
        {
            total_lines++;
8000ff50:	fe842783          	lw	a5,-24(s0)
8000ff54:	00178793          	addi	a5,a5,1
8000ff58:	fef42423          	sw	a5,-24(s0)
    while ((read(fd, &c, sizeof(char))) > 0)
8000ff5c:	fd340793          	addi	a5,s0,-45
8000ff60:	00100613          	li	a2,1
8000ff64:	00078593          	mv	a1,a5
8000ff68:	fd442503          	lw	a0,-44(s0)
8000ff6c:	f38f90ef          	jal	ra,800096a4 <read>
8000ff70:	00050793          	mv	a5,a0
8000ff74:	faf04ee3          	bgtz	a5,8000ff30 <cmd_tail+0x144>
        }
    }

    rt_kprintf("\nTotal Number of lines:%d\n", total_lines);
8000ff78:	fe842583          	lw	a1,-24(s0)
8000ff7c:	00017517          	auipc	a0,0x17
8000ff80:	d2850513          	addi	a0,a0,-728 # 80026ca4 <raise+0x10b0>
8000ff84:	2a4050ef          	jal	ra,80015228 <rt_kprintf>

    if (start_line != 0)
8000ff88:	fdc42783          	lw	a5,-36(s0)
8000ff8c:	04078263          	beqz	a5,8000ffd0 <cmd_tail+0x1e4>
    {
        if (total_lines >= start_line)
8000ff90:	fe842703          	lw	a4,-24(s0)
8000ff94:	fdc42783          	lw	a5,-36(s0)
8000ff98:	00f76e63          	bltu	a4,a5,8000ffb4 <cmd_tail+0x1c8>
        {
            required_lines = total_lines - start_line + 1;
8000ff9c:	fe842703          	lw	a4,-24(s0)
8000ffa0:	fdc42783          	lw	a5,-36(s0)
8000ffa4:	40f707b3          	sub	a5,a4,a5
8000ffa8:	00178793          	addi	a5,a5,1
8000ffac:	fef42023          	sw	a5,-32(s0)
8000ffb0:	0200006f          	j	8000ffd0 <cmd_tail+0x1e4>
        }
        else
        {
            rt_kprintf("\nError:Required lines are more than total number of lines\n");
8000ffb4:	00017517          	auipc	a0,0x17
8000ffb8:	d0c50513          	addi	a0,a0,-756 # 80026cc0 <raise+0x10cc>
8000ffbc:	26c050ef          	jal	ra,80015228 <rt_kprintf>
            close(fd);
8000ffc0:	fd442503          	lw	a0,-44(s0)
8000ffc4:	e5cf90ef          	jal	ra,80009620 <close>
            return -1;
8000ffc8:	fff00793          	li	a5,-1
8000ffcc:	0cc0006f          	j	80010098 <cmd_tail+0x2ac>
        }
    }

    if (required_lines > total_lines)
8000ffd0:	fe042703          	lw	a4,-32(s0)
8000ffd4:	fe842783          	lw	a5,-24(s0)
8000ffd8:	02e7f063          	bgeu	a5,a4,8000fff8 <cmd_tail+0x20c>
    {
        rt_kprintf("\nError:Required lines are more than total number of lines\n");
8000ffdc:	00017517          	auipc	a0,0x17
8000ffe0:	ce450513          	addi	a0,a0,-796 # 80026cc0 <raise+0x10cc>
8000ffe4:	244050ef          	jal	ra,80015228 <rt_kprintf>
        close(fd);
8000ffe8:	fd442503          	lw	a0,-44(s0)
8000ffec:	e34f90ef          	jal	ra,80009620 <close>
        return -1;
8000fff0:	fff00793          	li	a5,-1
8000fff4:	0a40006f          	j	80010098 <cmd_tail+0x2ac>
    }
    rt_kprintf("Required Number of lines:%d\n", required_lines);
8000fff8:	fe042583          	lw	a1,-32(s0)
8000fffc:	00017517          	auipc	a0,0x17
80010000:	d0050513          	addi	a0,a0,-768 # 80026cfc <raise+0x1108>
80010004:	224050ef          	jal	ra,80015228 <rt_kprintf>

    target_line = total_lines - required_lines;
80010008:	fe842703          	lw	a4,-24(s0)
8001000c:	fe042783          	lw	a5,-32(s0)
80010010:	40f707b3          	sub	a5,a4,a5
80010014:	fcf42c23          	sw	a5,-40(s0)
    lseek(fd, 0, SEEK_SET); /* back to head */
80010018:	00000613          	li	a2,0
8001001c:	00000593          	li	a1,0
80010020:	fd442503          	lw	a0,-44(s0)
80010024:	fa8f90ef          	jal	ra,800097cc <lseek>

    while ((read(fd, &c, sizeof(char))) > 0)
80010028:	03c0006f          	j	80010064 <cmd_tail+0x278>
    {
        if (current_line >= target_line)
8001002c:	fe442703          	lw	a4,-28(s0)
80010030:	fd842783          	lw	a5,-40(s0)
80010034:	00f76c63          	bltu	a4,a5,8001004c <cmd_tail+0x260>
        {
            rt_kprintf("%c", c);
80010038:	fd344783          	lbu	a5,-45(s0)
8001003c:	00078593          	mv	a1,a5
80010040:	00017517          	auipc	a0,0x17
80010044:	cdc50513          	addi	a0,a0,-804 # 80026d1c <raise+0x1128>
80010048:	1e0050ef          	jal	ra,80015228 <rt_kprintf>
        }
        if (c == '\n')
8001004c:	fd344703          	lbu	a4,-45(s0)
80010050:	00a00793          	li	a5,10
80010054:	00f71863          	bne	a4,a5,80010064 <cmd_tail+0x278>
        {
            current_line++;
80010058:	fe442783          	lw	a5,-28(s0)
8001005c:	00178793          	addi	a5,a5,1
80010060:	fef42223          	sw	a5,-28(s0)
    while ((read(fd, &c, sizeof(char))) > 0)
80010064:	fd340793          	addi	a5,s0,-45
80010068:	00100613          	li	a2,1
8001006c:	00078593          	mv	a1,a5
80010070:	fd442503          	lw	a0,-44(s0)
80010074:	e30f90ef          	jal	ra,800096a4 <read>
80010078:	00050793          	mv	a5,a0
8001007c:	faf048e3          	bgtz	a5,8001002c <cmd_tail+0x240>
        }
    }
    rt_kprintf("\n");
80010080:	00017517          	auipc	a0,0x17
80010084:	ca050513          	addi	a0,a0,-864 # 80026d20 <raise+0x112c>
80010088:	1a0050ef          	jal	ra,80015228 <rt_kprintf>

    close(fd);
8001008c:	fd442503          	lw	a0,-44(s0)
80010090:	d90f90ef          	jal	ra,80009620 <close>
    return 0;
80010094:	00000793          	li	a5,0
}
80010098:	00078513          	mv	a0,a5
8001009c:	03c12083          	lw	ra,60(sp)
800100a0:	03812403          	lw	s0,56(sp)
800100a4:	04010113          	addi	sp,sp,64
800100a8:	00008067          	ret

800100ac <finsh_get_prompt>:
#endif /* RT_USING_HEAP */

#define _MSH_PROMPT "msh "

const char *finsh_get_prompt(void)
{
800100ac:	ff010113          	addi	sp,sp,-16
800100b0:	00112623          	sw	ra,12(sp)
800100b4:	00812423          	sw	s0,8(sp)
800100b8:	00912223          	sw	s1,4(sp)
800100bc:	01010413          	addi	s0,sp,16
    static char finsh_prompt[RT_CONSOLEBUF_SIZE + 1] = {0};

    /* check prompt mode */
    if (!shell->prompt_mode)
800100c0:	00074797          	auipc	a5,0x74
800100c4:	f6078793          	addi	a5,a5,-160 # 80084020 <shell>
800100c8:	0007a783          	lw	a5,0(a5)
800100cc:	0307c783          	lbu	a5,48(a5)
800100d0:	0027f793          	andi	a5,a5,2
800100d4:	0ff7f793          	zext.b	a5,a5
800100d8:	00079e63          	bnez	a5,800100f4 <finsh_get_prompt+0x48>
    {
        finsh_prompt[0] = '\0';
800100dc:	00074797          	auipc	a5,0x74
800100e0:	16878793          	addi	a5,a5,360 # 80084244 <finsh_prompt.0>
800100e4:	00078023          	sb	zero,0(a5)
        return finsh_prompt;
800100e8:	00074797          	auipc	a5,0x74
800100ec:	15c78793          	addi	a5,a5,348 # 80084244 <finsh_prompt.0>
800100f0:	0a80006f          	j	80010198 <finsh_get_prompt+0xec>
    }

    if (finsh_prompt_custom)
800100f4:	00074797          	auipc	a5,0x74
800100f8:	f3078793          	addi	a5,a5,-208 # 80084024 <finsh_prompt_custom>
800100fc:	0007a783          	lw	a5,0(a5)
80010100:	02078463          	beqz	a5,80010128 <finsh_get_prompt+0x7c>
    {
        strncpy(finsh_prompt, finsh_prompt_custom, sizeof(finsh_prompt) - 1);
80010104:	00074797          	auipc	a5,0x74
80010108:	f2078793          	addi	a5,a5,-224 # 80084024 <finsh_prompt_custom>
8001010c:	0007a783          	lw	a5,0(a5)
80010110:	10000613          	li	a2,256
80010114:	00078593          	mv	a1,a5
80010118:	00074517          	auipc	a0,0x74
8001011c:	12c50513          	addi	a0,a0,300 # 80084244 <finsh_prompt.0>
80010120:	0f10c0ef          	jal	ra,8001ca10 <strncpy>
80010124:	0180006f          	j	8001013c <finsh_get_prompt+0x90>
    }
    else
    {
        strcpy(finsh_prompt, _MSH_PROMPT);
80010128:	00017597          	auipc	a1,0x17
8001012c:	bfc58593          	addi	a1,a1,-1028 # 80026d24 <raise+0x1130>
80010130:	00074517          	auipc	a0,0x74
80010134:	11450513          	addi	a0,a0,276 # 80084244 <finsh_prompt.0>
80010138:	1580d0ef          	jal	ra,8001d290 <strcpy>
    }

#if defined(DFS_USING_POSIX) && defined(DFS_USING_WORKDIR)
    /* get current working directory */
    getcwd(&finsh_prompt[rt_strlen(finsh_prompt)], RT_CONSOLEBUF_SIZE - rt_strlen(finsh_prompt));
8001013c:	00074517          	auipc	a0,0x74
80010140:	10850513          	addi	a0,a0,264 # 80084244 <finsh_prompt.0>
80010144:	0cc040ef          	jal	ra,80014210 <rt_strlen>
80010148:	00050713          	mv	a4,a0
8001014c:	00074797          	auipc	a5,0x74
80010150:	0f878793          	addi	a5,a5,248 # 80084244 <finsh_prompt.0>
80010154:	00f704b3          	add	s1,a4,a5
80010158:	00074517          	auipc	a0,0x74
8001015c:	0ec50513          	addi	a0,a0,236 # 80084244 <finsh_prompt.0>
80010160:	0b0040ef          	jal	ra,80014210 <rt_strlen>
80010164:	00050713          	mv	a4,a0
80010168:	10000793          	li	a5,256
8001016c:	40e787b3          	sub	a5,a5,a4
80010170:	00078593          	mv	a1,a5
80010174:	00048513          	mv	a0,s1
80010178:	d59f90ef          	jal	ra,80009ed0 <getcwd>
#endif

    strcat(finsh_prompt, ">");
8001017c:	00017597          	auipc	a1,0x17
80010180:	bb058593          	addi	a1,a1,-1104 # 80026d2c <raise+0x1138>
80010184:	00074517          	auipc	a0,0x74
80010188:	0c050513          	addi	a0,a0,192 # 80084244 <finsh_prompt.0>
8001018c:	5f40c0ef          	jal	ra,8001c780 <strcat>

    return finsh_prompt;
80010190:	00074797          	auipc	a5,0x74
80010194:	0b478793          	addi	a5,a5,180 # 80084244 <finsh_prompt.0>
}
80010198:	00078513          	mv	a0,a5
8001019c:	00c12083          	lw	ra,12(sp)
800101a0:	00812403          	lw	s0,8(sp)
800101a4:	00412483          	lw	s1,4(sp)
800101a8:	01010113          	addi	sp,sp,16
800101ac:	00008067          	ret

800101b0 <finsh_set_prompt_mode>:
 * The parameter 0 disable prompt mode, other values enable prompt mode.
 *
 * @param prompt the prompt mode
 */
void finsh_set_prompt_mode(rt_uint32_t prompt_mode)
{
800101b0:	fe010113          	addi	sp,sp,-32
800101b4:	00812e23          	sw	s0,28(sp)
800101b8:	02010413          	addi	s0,sp,32
800101bc:	fea42623          	sw	a0,-20(s0)
    RT_ASSERT(shell != RT_NULL);
    shell->prompt_mode = prompt_mode;
800101c0:	00074797          	auipc	a5,0x74
800101c4:	e6078793          	addi	a5,a5,-416 # 80084020 <shell>
800101c8:	0007a783          	lw	a5,0(a5)
800101cc:	fec42703          	lw	a4,-20(s0)
800101d0:	00177713          	andi	a4,a4,1
800101d4:	0ff77713          	zext.b	a4,a4
800101d8:	00177713          	andi	a4,a4,1
800101dc:	00171713          	slli	a4,a4,0x1
800101e0:	0307c683          	lbu	a3,48(a5)
800101e4:	ffd6f693          	andi	a3,a3,-3
800101e8:	00e6e733          	or	a4,a3,a4
800101ec:	02e78823          	sb	a4,48(a5)
}
800101f0:	00000013          	nop
800101f4:	01c12403          	lw	s0,28(sp)
800101f8:	02010113          	addi	sp,sp,32
800101fc:	00008067          	ret

80010200 <finsh_getchar>:

int finsh_getchar(void)
{
80010200:	fe010113          	addi	sp,sp,-32
80010204:	00112e23          	sw	ra,28(sp)
80010208:	00812c23          	sw	s0,24(sp)
8001020c:	02010413          	addi	s0,sp,32
#ifdef RT_USING_DEVICE
    char ch = 0;
80010210:	fe0405a3          	sb	zero,-21(s0)
#else
    rt_device_t device;

    RT_ASSERT(shell != RT_NULL);

    device = shell->device;
80010214:	00074797          	auipc	a5,0x74
80010218:	e0c78793          	addi	a5,a5,-500 # 80084020 <shell>
8001021c:	0007a783          	lw	a5,0(a5)
80010220:	21c7a783          	lw	a5,540(a5)
80010224:	fef42623          	sw	a5,-20(s0)
    if (device == RT_NULL)
80010228:	fec42783          	lw	a5,-20(s0)
8001022c:	06079063          	bnez	a5,8001028c <finsh_getchar+0x8c>
    {
        return -1; /* EOF */
80010230:	fff00793          	li	a5,-1
80010234:	0800006f          	j	800102b4 <finsh_getchar+0xb4>
    }

    while (rt_device_read(device, -1, &ch, 1) != 1)
    {
        rt_sem_take(&shell->rx_sem, RT_WAITING_FOREVER);
80010238:	00074797          	auipc	a5,0x74
8001023c:	de878793          	addi	a5,a5,-536 # 80084020 <shell>
80010240:	0007a783          	lw	a5,0(a5)
80010244:	fff00593          	li	a1,-1
80010248:	00078513          	mv	a0,a5
8001024c:	0b4030ef          	jal	ra,80013300 <rt_sem_take>
        if (shell->device != device)
80010250:	00074797          	auipc	a5,0x74
80010254:	dd078793          	addi	a5,a5,-560 # 80084020 <shell>
80010258:	0007a783          	lw	a5,0(a5)
8001025c:	21c7a783          	lw	a5,540(a5)
80010260:	fec42703          	lw	a4,-20(s0)
80010264:	02f70463          	beq	a4,a5,8001028c <finsh_getchar+0x8c>
        {
            device = shell->device;
80010268:	00074797          	auipc	a5,0x74
8001026c:	db878793          	addi	a5,a5,-584 # 80084020 <shell>
80010270:	0007a783          	lw	a5,0(a5)
80010274:	21c7a783          	lw	a5,540(a5)
80010278:	fef42623          	sw	a5,-20(s0)
            if (device == RT_NULL)
8001027c:	fec42783          	lw	a5,-20(s0)
80010280:	00079663          	bnez	a5,8001028c <finsh_getchar+0x8c>
            {
                return -1;
80010284:	fff00793          	li	a5,-1
80010288:	02c0006f          	j	800102b4 <finsh_getchar+0xb4>
    while (rt_device_read(device, -1, &ch, 1) != 1)
8001028c:	feb40793          	addi	a5,s0,-21
80010290:	00100693          	li	a3,1
80010294:	00078613          	mv	a2,a5
80010298:	fff00593          	li	a1,-1
8001029c:	fec42503          	lw	a0,-20(s0)
800102a0:	0ad020ef          	jal	ra,80012b4c <rt_device_read>
800102a4:	00050713          	mv	a4,a0
800102a8:	00100793          	li	a5,1
800102ac:	f8f716e3          	bne	a4,a5,80010238 <finsh_getchar+0x38>
            }
        }
    }
    return ch;
800102b0:	feb44783          	lbu	a5,-21(s0)
#endif /* RT_USING_POSIX_STDIO */
#else
    extern char rt_hw_console_getchar(void);
    return rt_hw_console_getchar();
#endif /* RT_USING_DEVICE */
}
800102b4:	00078513          	mv	a0,a5
800102b8:	01c12083          	lw	ra,28(sp)
800102bc:	01812403          	lw	s0,24(sp)
800102c0:	02010113          	addi	sp,sp,32
800102c4:	00008067          	ret

800102c8 <finsh_rx_ind>:

#if !defined(RT_USING_POSIX_STDIO) && defined(RT_USING_DEVICE)
static rt_err_t finsh_rx_ind(rt_device_t dev, rt_size_t size)
{
800102c8:	fe010113          	addi	sp,sp,-32
800102cc:	00112e23          	sw	ra,28(sp)
800102d0:	00812c23          	sw	s0,24(sp)
800102d4:	02010413          	addi	s0,sp,32
800102d8:	fea42623          	sw	a0,-20(s0)
800102dc:	feb42423          	sw	a1,-24(s0)
    RT_ASSERT(shell != RT_NULL);

    /* release semaphore to let finsh thread rx data */
    rt_sem_release(&shell->rx_sem);
800102e0:	00074797          	auipc	a5,0x74
800102e4:	d4078793          	addi	a5,a5,-704 # 80084020 <shell>
800102e8:	0007a783          	lw	a5,0(a5)
800102ec:	00078513          	mv	a0,a5
800102f0:	16c030ef          	jal	ra,8001345c <rt_sem_release>

    return RT_EOK;
800102f4:	00000793          	li	a5,0
}
800102f8:	00078513          	mv	a0,a5
800102fc:	01c12083          	lw	ra,28(sp)
80010300:	01812403          	lw	s0,24(sp)
80010304:	02010113          	addi	sp,sp,32
80010308:	00008067          	ret

8001030c <finsh_set_device>:
 * This function sets the input device of finsh shell.
 *
 * @param device_name the name of new input device.
 */
void finsh_set_device(const char *device_name)
{
8001030c:	fd010113          	addi	sp,sp,-48
80010310:	02112623          	sw	ra,44(sp)
80010314:	02812423          	sw	s0,40(sp)
80010318:	03010413          	addi	s0,sp,48
8001031c:	fca42e23          	sw	a0,-36(s0)
    rt_device_t dev = RT_NULL;
80010320:	fe042623          	sw	zero,-20(s0)

    RT_ASSERT(shell != RT_NULL);
    dev = rt_device_find(device_name);
80010324:	fdc42503          	lw	a0,-36(s0)
80010328:	5ec020ef          	jal	ra,80012914 <rt_device_find>
8001032c:	fea42623          	sw	a0,-20(s0)
    if (dev == RT_NULL)
80010330:	fec42783          	lw	a5,-20(s0)
80010334:	00079c63          	bnez	a5,8001034c <finsh_set_device+0x40>
    {
        rt_kprintf("finsh: can not find device: %s\n", device_name);
80010338:	fdc42583          	lw	a1,-36(s0)
8001033c:	00017517          	auipc	a0,0x17
80010340:	9f450513          	addi	a0,a0,-1548 # 80026d30 <raise+0x113c>
80010344:	6e5040ef          	jal	ra,80015228 <rt_kprintf>
        return;
80010348:	0e80006f          	j	80010430 <finsh_set_device+0x124>
    }

    /* check whether it's a same device */
    if (dev == shell->device) return;
8001034c:	00074797          	auipc	a5,0x74
80010350:	cd478793          	addi	a5,a5,-812 # 80084020 <shell>
80010354:	0007a783          	lw	a5,0(a5)
80010358:	21c7a783          	lw	a5,540(a5)
8001035c:	fec42703          	lw	a4,-20(s0)
80010360:	0cf70663          	beq	a4,a5,8001042c <finsh_set_device+0x120>
    /* open this device and set the new device in finsh shell */
    if (rt_device_open(dev, RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_INT_RX | \
80010364:	14300593          	li	a1,323
80010368:	fec42503          	lw	a0,-20(s0)
8001036c:	5e0020ef          	jal	ra,8001294c <rt_device_open>
80010370:	00050793          	mv	a5,a0
80010374:	0a079e63          	bnez	a5,80010430 <finsh_set_device+0x124>
                       RT_DEVICE_FLAG_STREAM) == RT_EOK)
    {
        if (shell->device != RT_NULL)
80010378:	00074797          	auipc	a5,0x74
8001037c:	ca878793          	addi	a5,a5,-856 # 80084020 <shell>
80010380:	0007a783          	lw	a5,0(a5)
80010384:	21c7a783          	lw	a5,540(a5)
80010388:	02078c63          	beqz	a5,800103c0 <finsh_set_device+0xb4>
        {
            /* close old finsh device */
            rt_device_close(shell->device);
8001038c:	00074797          	auipc	a5,0x74
80010390:	c9478793          	addi	a5,a5,-876 # 80084020 <shell>
80010394:	0007a783          	lw	a5,0(a5)
80010398:	21c7a783          	lw	a5,540(a5)
8001039c:	00078513          	mv	a0,a5
800103a0:	700020ef          	jal	ra,80012aa0 <rt_device_close>
            rt_device_set_rx_indicate(shell->device, RT_NULL);
800103a4:	00074797          	auipc	a5,0x74
800103a8:	c7c78793          	addi	a5,a5,-900 # 80084020 <shell>
800103ac:	0007a783          	lw	a5,0(a5)
800103b0:	21c7a783          	lw	a5,540(a5)
800103b4:	00000593          	li	a1,0
800103b8:	00078513          	mv	a0,a5
800103bc:	109020ef          	jal	ra,80012cc4 <rt_device_set_rx_indicate>
        }

        /* clear line buffer before switch to new device */
        rt_memset(shell->line, 0, sizeof(shell->line));
800103c0:	00074797          	auipc	a5,0x74
800103c4:	c6078793          	addi	a5,a5,-928 # 80084020 <shell>
800103c8:	0007a783          	lw	a5,0(a5)
800103cc:	1c678793          	addi	a5,a5,454
800103d0:	05100613          	li	a2,81
800103d4:	00000593          	li	a1,0
800103d8:	00078513          	mv	a0,a5
800103dc:	0b1030ef          	jal	ra,80013c8c <rt_memset>
        shell->line_curpos = shell->line_position = 0;
800103e0:	00074797          	auipc	a5,0x74
800103e4:	c4078793          	addi	a5,a5,-960 # 80084020 <shell>
800103e8:	0007a783          	lw	a5,0(a5)
800103ec:	20079c23          	sh	zero,536(a5)
800103f0:	00074717          	auipc	a4,0x74
800103f4:	c3070713          	addi	a4,a4,-976 # 80084020 <shell>
800103f8:	00072703          	lw	a4,0(a4)
800103fc:	2187d783          	lhu	a5,536(a5)
80010400:	20f71d23          	sh	a5,538(a4)

        shell->device = dev;
80010404:	00074797          	auipc	a5,0x74
80010408:	c1c78793          	addi	a5,a5,-996 # 80084020 <shell>
8001040c:	0007a783          	lw	a5,0(a5)
80010410:	fec42703          	lw	a4,-20(s0)
80010414:	20e7ae23          	sw	a4,540(a5)
        rt_device_set_rx_indicate(dev, finsh_rx_ind);
80010418:	00000597          	auipc	a1,0x0
8001041c:	eb058593          	addi	a1,a1,-336 # 800102c8 <finsh_rx_ind>
80010420:	fec42503          	lw	a0,-20(s0)
80010424:	0a1020ef          	jal	ra,80012cc4 <rt_device_set_rx_indicate>
80010428:	0080006f          	j	80010430 <finsh_set_device+0x124>
    if (dev == shell->device) return;
8001042c:	00000013          	nop
    }
}
80010430:	02c12083          	lw	ra,44(sp)
80010434:	02812403          	lw	s0,40(sp)
80010438:	03010113          	addi	sp,sp,48
8001043c:	00008067          	ret

80010440 <shell_auto_complete>:
    }
}
#endif /* FINSH_USING_AUTH */

static void shell_auto_complete(char *prefix)
{
80010440:	fe010113          	addi	sp,sp,-32
80010444:	00112e23          	sw	ra,28(sp)
80010448:	00812c23          	sw	s0,24(sp)
8001044c:	02010413          	addi	s0,sp,32
80010450:	fea42623          	sw	a0,-20(s0)
    rt_kprintf("\n");
80010454:	00017517          	auipc	a0,0x17
80010458:	8fc50513          	addi	a0,a0,-1796 # 80026d50 <raise+0x115c>
8001045c:	5cd040ef          	jal	ra,80015228 <rt_kprintf>
    msh_auto_complete(prefix);
80010460:	fec42503          	lw	a0,-20(s0)
80010464:	e34fe0ef          	jal	ra,8000ea98 <msh_auto_complete>

    rt_kprintf("%s%s", FINSH_PROMPT, prefix);
80010468:	c45ff0ef          	jal	ra,800100ac <finsh_get_prompt>
8001046c:	00050793          	mv	a5,a0
80010470:	fec42603          	lw	a2,-20(s0)
80010474:	00078593          	mv	a1,a5
80010478:	00017517          	auipc	a0,0x17
8001047c:	8dc50513          	addi	a0,a0,-1828 # 80026d54 <raise+0x1160>
80010480:	5a9040ef          	jal	ra,80015228 <rt_kprintf>
}
80010484:	00000013          	nop
80010488:	01c12083          	lw	ra,28(sp)
8001048c:	01812403          	lw	s0,24(sp)
80010490:	02010113          	addi	sp,sp,32
80010494:	00008067          	ret

80010498 <shell_handle_history>:

#ifdef FINSH_USING_HISTORY
static rt_bool_t shell_handle_history(struct finsh_shell *shell)
{
80010498:	fe010113          	addi	sp,sp,-32
8001049c:	00112e23          	sw	ra,28(sp)
800104a0:	00812c23          	sw	s0,24(sp)
800104a4:	02010413          	addi	s0,sp,32
800104a8:	fea42623          	sw	a0,-20(s0)
    for (i = 0; i <= 60; i++)
        putchar(' ');
    rt_kprintf("\r");

#else
    rt_kprintf("\033[2K\r");
800104ac:	00017517          	auipc	a0,0x17
800104b0:	8b050513          	addi	a0,a0,-1872 # 80026d5c <raise+0x1168>
800104b4:	575040ef          	jal	ra,80015228 <rt_kprintf>
#endif
    rt_kprintf("%s%s", FINSH_PROMPT, shell->line);
800104b8:	bf5ff0ef          	jal	ra,800100ac <finsh_get_prompt>
800104bc:	00050713          	mv	a4,a0
800104c0:	fec42783          	lw	a5,-20(s0)
800104c4:	1c678793          	addi	a5,a5,454
800104c8:	00078613          	mv	a2,a5
800104cc:	00070593          	mv	a1,a4
800104d0:	00017517          	auipc	a0,0x17
800104d4:	88450513          	addi	a0,a0,-1916 # 80026d54 <raise+0x1160>
800104d8:	551040ef          	jal	ra,80015228 <rt_kprintf>
    return RT_FALSE;
800104dc:	00000793          	li	a5,0
}
800104e0:	00078513          	mv	a0,a5
800104e4:	01c12083          	lw	ra,28(sp)
800104e8:	01812403          	lw	s0,24(sp)
800104ec:	02010113          	addi	sp,sp,32
800104f0:	00008067          	ret

800104f4 <shell_push_history>:

static void shell_push_history(struct finsh_shell *shell)
{
800104f4:	fd010113          	addi	sp,sp,-48
800104f8:	02112623          	sw	ra,44(sp)
800104fc:	02812423          	sw	s0,40(sp)
80010500:	03010413          	addi	s0,sp,48
80010504:	fca42e23          	sw	a0,-36(s0)
    if (shell->line_position != 0)
80010508:	fdc42783          	lw	a5,-36(s0)
8001050c:	2187d783          	lhu	a5,536(a5)
80010510:	24078663          	beqz	a5,8001075c <shell_push_history+0x268>
    {
        /* push history */
        if (shell->history_count >= FINSH_HISTORY_LINES)
80010514:	fdc42783          	lw	a5,-36(s0)
80010518:	0347d703          	lhu	a4,52(a5)
8001051c:	00400793          	li	a5,4
80010520:	12e7f863          	bgeu	a5,a4,80010650 <shell_push_history+0x15c>
        {
            /* if current cmd is same as last cmd, don't push */
            if (memcmp(&shell->cmd_history[FINSH_HISTORY_LINES - 1], shell->line, FINSH_CMD_SIZE))
80010524:	fdc42783          	lw	a5,-36(s0)
80010528:	17678713          	addi	a4,a5,374
8001052c:	fdc42783          	lw	a5,-36(s0)
80010530:	1c678793          	addi	a5,a5,454
80010534:	05000613          	li	a2,80
80010538:	00078593          	mv	a1,a5
8001053c:	00070513          	mv	a0,a4
80010540:	1c40c0ef          	jal	ra,8001c704 <memcmp>
80010544:	00050793          	mv	a5,a0
80010548:	20078a63          	beqz	a5,8001075c <shell_push_history+0x268>
            {
                /* move history */
                int index;
                for (index = 0; index < FINSH_HISTORY_LINES - 1; index ++)
8001054c:	fe042623          	sw	zero,-20(s0)
80010550:	06c0006f          	j	800105bc <shell_push_history+0xc8>
                {
                    rt_memcpy(&shell->cmd_history[index][0],
80010554:	fec42703          	lw	a4,-20(s0)
80010558:	00070793          	mv	a5,a4
8001055c:	00279793          	slli	a5,a5,0x2
80010560:	00e787b3          	add	a5,a5,a4
80010564:	00479793          	slli	a5,a5,0x4
80010568:	03078793          	addi	a5,a5,48
8001056c:	fdc42703          	lw	a4,-36(s0)
80010570:	00f707b3          	add	a5,a4,a5
80010574:	00678693          	addi	a3,a5,6
                           &shell->cmd_history[index + 1][0], FINSH_CMD_SIZE);
80010578:	fec42783          	lw	a5,-20(s0)
8001057c:	00178713          	addi	a4,a5,1
80010580:	00070793          	mv	a5,a4
80010584:	00279793          	slli	a5,a5,0x2
80010588:	00e787b3          	add	a5,a5,a4
8001058c:	00479793          	slli	a5,a5,0x4
80010590:	03078793          	addi	a5,a5,48
80010594:	fdc42703          	lw	a4,-36(s0)
80010598:	00f707b3          	add	a5,a4,a5
8001059c:	00678793          	addi	a5,a5,6
                    rt_memcpy(&shell->cmd_history[index][0],
800105a0:	05000613          	li	a2,80
800105a4:	00078593          	mv	a1,a5
800105a8:	00068513          	mv	a0,a3
800105ac:	03d030ef          	jal	ra,80013de8 <rt_memcpy>
                for (index = 0; index < FINSH_HISTORY_LINES - 1; index ++)
800105b0:	fec42783          	lw	a5,-20(s0)
800105b4:	00178793          	addi	a5,a5,1
800105b8:	fef42623          	sw	a5,-20(s0)
800105bc:	fec42703          	lw	a4,-20(s0)
800105c0:	00300793          	li	a5,3
800105c4:	f8e7d8e3          	bge	a5,a4,80010554 <shell_push_history+0x60>
                }
                rt_memset(&shell->cmd_history[index][0], 0, FINSH_CMD_SIZE);
800105c8:	fec42703          	lw	a4,-20(s0)
800105cc:	00070793          	mv	a5,a4
800105d0:	00279793          	slli	a5,a5,0x2
800105d4:	00e787b3          	add	a5,a5,a4
800105d8:	00479793          	slli	a5,a5,0x4
800105dc:	03078793          	addi	a5,a5,48
800105e0:	fdc42703          	lw	a4,-36(s0)
800105e4:	00f707b3          	add	a5,a4,a5
800105e8:	00678793          	addi	a5,a5,6
800105ec:	05000613          	li	a2,80
800105f0:	00000593          	li	a1,0
800105f4:	00078513          	mv	a0,a5
800105f8:	694030ef          	jal	ra,80013c8c <rt_memset>
                rt_memcpy(&shell->cmd_history[index][0], shell->line, shell->line_position);
800105fc:	fec42703          	lw	a4,-20(s0)
80010600:	00070793          	mv	a5,a4
80010604:	00279793          	slli	a5,a5,0x2
80010608:	00e787b3          	add	a5,a5,a4
8001060c:	00479793          	slli	a5,a5,0x4
80010610:	03078793          	addi	a5,a5,48
80010614:	fdc42703          	lw	a4,-36(s0)
80010618:	00f707b3          	add	a5,a4,a5
8001061c:	00678713          	addi	a4,a5,6
80010620:	fdc42783          	lw	a5,-36(s0)
80010624:	1c678693          	addi	a3,a5,454
80010628:	fdc42783          	lw	a5,-36(s0)
8001062c:	2187d783          	lhu	a5,536(a5)
80010630:	00078613          	mv	a2,a5
80010634:	00068593          	mv	a1,a3
80010638:	00070513          	mv	a0,a4
8001063c:	7ac030ef          	jal	ra,80013de8 <rt_memcpy>

                /* it's the maximum history */
                shell->history_count = FINSH_HISTORY_LINES;
80010640:	fdc42783          	lw	a5,-36(s0)
80010644:	00500713          	li	a4,5
80010648:	02e79a23          	sh	a4,52(a5)
8001064c:	1100006f          	j	8001075c <shell_push_history+0x268>
            }
        }
        else
        {
            /* if current cmd is same as last cmd, don't push */
            if (shell->history_count == 0 || memcmp(&shell->cmd_history[shell->history_count - 1], shell->line, FINSH_CMD_SIZE))
80010650:	fdc42783          	lw	a5,-36(s0)
80010654:	0347d783          	lhu	a5,52(a5)
80010658:	04078863          	beqz	a5,800106a8 <shell_push_history+0x1b4>
8001065c:	fdc42783          	lw	a5,-36(s0)
80010660:	0347d783          	lhu	a5,52(a5)
80010664:	fff78713          	addi	a4,a5,-1
80010668:	00070793          	mv	a5,a4
8001066c:	00279793          	slli	a5,a5,0x2
80010670:	00e787b3          	add	a5,a5,a4
80010674:	00479793          	slli	a5,a5,0x4
80010678:	03078793          	addi	a5,a5,48
8001067c:	fdc42703          	lw	a4,-36(s0)
80010680:	00f707b3          	add	a5,a4,a5
80010684:	00678713          	addi	a4,a5,6
80010688:	fdc42783          	lw	a5,-36(s0)
8001068c:	1c678793          	addi	a5,a5,454
80010690:	05000613          	li	a2,80
80010694:	00078593          	mv	a1,a5
80010698:	00070513          	mv	a0,a4
8001069c:	0680c0ef          	jal	ra,8001c704 <memcmp>
800106a0:	00050793          	mv	a5,a0
800106a4:	0a078c63          	beqz	a5,8001075c <shell_push_history+0x268>
            {
                shell->current_history = shell->history_count;
800106a8:	fdc42783          	lw	a5,-36(s0)
800106ac:	0347d703          	lhu	a4,52(a5)
800106b0:	fdc42783          	lw	a5,-36(s0)
800106b4:	02e79923          	sh	a4,50(a5)
                rt_memset(&shell->cmd_history[shell->history_count][0], 0, FINSH_CMD_SIZE);
800106b8:	fdc42783          	lw	a5,-36(s0)
800106bc:	0347d783          	lhu	a5,52(a5)
800106c0:	00078713          	mv	a4,a5
800106c4:	00070793          	mv	a5,a4
800106c8:	00279793          	slli	a5,a5,0x2
800106cc:	00e787b3          	add	a5,a5,a4
800106d0:	00479793          	slli	a5,a5,0x4
800106d4:	03078793          	addi	a5,a5,48
800106d8:	fdc42703          	lw	a4,-36(s0)
800106dc:	00f707b3          	add	a5,a4,a5
800106e0:	00678793          	addi	a5,a5,6
800106e4:	05000613          	li	a2,80
800106e8:	00000593          	li	a1,0
800106ec:	00078513          	mv	a0,a5
800106f0:	59c030ef          	jal	ra,80013c8c <rt_memset>
                rt_memcpy(&shell->cmd_history[shell->history_count][0], shell->line, shell->line_position);
800106f4:	fdc42783          	lw	a5,-36(s0)
800106f8:	0347d783          	lhu	a5,52(a5)
800106fc:	00078713          	mv	a4,a5
80010700:	00070793          	mv	a5,a4
80010704:	00279793          	slli	a5,a5,0x2
80010708:	00e787b3          	add	a5,a5,a4
8001070c:	00479793          	slli	a5,a5,0x4
80010710:	03078793          	addi	a5,a5,48
80010714:	fdc42703          	lw	a4,-36(s0)
80010718:	00f707b3          	add	a5,a4,a5
8001071c:	00678713          	addi	a4,a5,6
80010720:	fdc42783          	lw	a5,-36(s0)
80010724:	1c678693          	addi	a3,a5,454
80010728:	fdc42783          	lw	a5,-36(s0)
8001072c:	2187d783          	lhu	a5,536(a5)
80010730:	00078613          	mv	a2,a5
80010734:	00068593          	mv	a1,a3
80010738:	00070513          	mv	a0,a4
8001073c:	6ac030ef          	jal	ra,80013de8 <rt_memcpy>

                /* increase count and set current history position */
                shell->history_count ++;
80010740:	fdc42783          	lw	a5,-36(s0)
80010744:	0347d783          	lhu	a5,52(a5)
80010748:	00178793          	addi	a5,a5,1
8001074c:	01079713          	slli	a4,a5,0x10
80010750:	01075713          	srli	a4,a4,0x10
80010754:	fdc42783          	lw	a5,-36(s0)
80010758:	02e79a23          	sh	a4,52(a5)
            }
        }
    }
    shell->current_history = shell->history_count;
8001075c:	fdc42783          	lw	a5,-36(s0)
80010760:	0347d703          	lhu	a4,52(a5)
80010764:	fdc42783          	lw	a5,-36(s0)
80010768:	02e79923          	sh	a4,50(a5)
}
8001076c:	00000013          	nop
80010770:	02c12083          	lw	ra,44(sp)
80010774:	02812403          	lw	s0,40(sp)
80010778:	03010113          	addi	sp,sp,48
8001077c:	00008067          	ret

80010780 <finsh_thread_entry>:
#endif

void finsh_thread_entry(void *parameter)
{
80010780:	fc010113          	addi	sp,sp,-64
80010784:	02112e23          	sw	ra,60(sp)
80010788:	02812c23          	sw	s0,56(sp)
8001078c:	04010413          	addi	s0,sp,64
80010790:	fca42623          	sw	a0,-52(s0)
    int ch;

    /* normal is echo mode */
#ifndef FINSH_ECHO_DISABLE_DEFAULT
    shell->echo_mode = 1;
80010794:	00074797          	auipc	a5,0x74
80010798:	88c78793          	addi	a5,a5,-1908 # 80084020 <shell>
8001079c:	0007a783          	lw	a5,0(a5)
800107a0:	0307c703          	lbu	a4,48(a5)
800107a4:	00176713          	ori	a4,a4,1
800107a8:	02e78823          	sb	a4,48(a5)
    shell->echo_mode = 0;
#endif

#if !defined(RT_USING_POSIX_STDIO) && defined(RT_USING_DEVICE)
    /* set console device as shell device */
    if (shell->device == RT_NULL)
800107ac:	00074797          	auipc	a5,0x74
800107b0:	87478793          	addi	a5,a5,-1932 # 80084020 <shell>
800107b4:	0007a783          	lw	a5,0(a5)
800107b8:	21c7a783          	lw	a5,540(a5)
800107bc:	02079063          	bnez	a5,800107dc <finsh_thread_entry+0x5c>
    {
        rt_device_t console = rt_console_get_device();
800107c0:	17d040ef          	jal	ra,8001513c <rt_console_get_device>
800107c4:	fea42023          	sw	a0,-32(s0)
        if (console)
800107c8:	fe042783          	lw	a5,-32(s0)
800107cc:	00078863          	beqz	a5,800107dc <finsh_thread_entry+0x5c>
        {
            finsh_set_device(console->parent.name);
800107d0:	fe042783          	lw	a5,-32(s0)
800107d4:	00078513          	mv	a0,a5
800107d8:	b35ff0ef          	jal	ra,8001030c <finsh_set_device>
    }
    /* waiting authenticate success */
    finsh_wait_auth();
#endif

    rt_kprintf(FINSH_PROMPT);
800107dc:	8d1ff0ef          	jal	ra,800100ac <finsh_get_prompt>
800107e0:	00050793          	mv	a5,a0
800107e4:	00078513          	mv	a0,a5
800107e8:	241040ef          	jal	ra,80015228 <rt_kprintf>

    while (1)
    {
        ch = (int)finsh_getchar();
800107ec:	a15ff0ef          	jal	ra,80010200 <finsh_getchar>
800107f0:	fca42e23          	sw	a0,-36(s0)
        if (ch < 0)
800107f4:	fdc42783          	lw	a5,-36(s0)
800107f8:	1e07cee3          	bltz	a5,800111f4 <finsh_thread_entry+0xa74>
         * up key  : 0x1b 0x5b 0x41
         * down key: 0x1b 0x5b 0x42
         * right key:0x1b 0x5b 0x43
         * left key: 0x1b 0x5b 0x44
         */
        if (ch == 0x1b)
800107fc:	fdc42703          	lw	a4,-36(s0)
80010800:	01b00793          	li	a5,27
80010804:	00f71e63          	bne	a4,a5,80010820 <finsh_thread_entry+0xa0>
        {
            shell->stat = WAIT_SPEC_KEY;
80010808:	00074797          	auipc	a5,0x74
8001080c:	81878793          	addi	a5,a5,-2024 # 80084020 <shell>
80010810:	0007a783          	lw	a5,0(a5)
80010814:	00100713          	li	a4,1
80010818:	02e7a623          	sw	a4,44(a5)
            continue;
8001081c:	2050006f          	j	80011220 <finsh_thread_entry+0xaa0>
        }
        else if (shell->stat == WAIT_SPEC_KEY)
80010820:	00074797          	auipc	a5,0x74
80010824:	80078793          	addi	a5,a5,-2048 # 80084020 <shell>
80010828:	0007a783          	lw	a5,0(a5)
8001082c:	02c7a703          	lw	a4,44(a5)
80010830:	00100793          	li	a5,1
80010834:	02f71e63          	bne	a4,a5,80010870 <finsh_thread_entry+0xf0>
        {
            if (ch == 0x5b)
80010838:	fdc42703          	lw	a4,-36(s0)
8001083c:	05b00793          	li	a5,91
80010840:	00f71e63          	bne	a4,a5,8001085c <finsh_thread_entry+0xdc>
            {
                shell->stat = WAIT_FUNC_KEY;
80010844:	00073797          	auipc	a5,0x73
80010848:	7dc78793          	addi	a5,a5,2012 # 80084020 <shell>
8001084c:	0007a783          	lw	a5,0(a5)
80010850:	00200713          	li	a4,2
80010854:	02e7a623          	sw	a4,44(a5)
                continue;
80010858:	1c90006f          	j	80011220 <finsh_thread_entry+0xaa0>
            }

            shell->stat = WAIT_NORMAL;
8001085c:	00073797          	auipc	a5,0x73
80010860:	7c478793          	addi	a5,a5,1988 # 80084020 <shell>
80010864:	0007a783          	lw	a5,0(a5)
80010868:	0207a623          	sw	zero,44(a5)
8001086c:	36c0006f          	j	80010bd8 <finsh_thread_entry+0x458>
        }
        else if (shell->stat == WAIT_FUNC_KEY)
80010870:	00073797          	auipc	a5,0x73
80010874:	7b078793          	addi	a5,a5,1968 # 80084020 <shell>
80010878:	0007a783          	lw	a5,0(a5)
8001087c:	02c7a703          	lw	a4,44(a5)
80010880:	00200793          	li	a5,2
80010884:	34f71a63          	bne	a4,a5,80010bd8 <finsh_thread_entry+0x458>
        {
            shell->stat = WAIT_NORMAL;
80010888:	00073797          	auipc	a5,0x73
8001088c:	79878793          	addi	a5,a5,1944 # 80084020 <shell>
80010890:	0007a783          	lw	a5,0(a5)
80010894:	0207a623          	sw	zero,44(a5)

            if (ch == 0x41) /* up key */
80010898:	fdc42703          	lw	a4,-36(s0)
8001089c:	04100793          	li	a5,65
800108a0:	10f71463          	bne	a4,a5,800109a8 <finsh_thread_entry+0x228>
            {
#ifdef FINSH_USING_HISTORY
                /* prev history */
                if (shell->current_history > 0)
800108a4:	00073797          	auipc	a5,0x73
800108a8:	77c78793          	addi	a5,a5,1916 # 80084020 <shell>
800108ac:	0007a783          	lw	a5,0(a5)
800108b0:	0327d783          	lhu	a5,50(a5)
800108b4:	0e078063          	beqz	a5,80010994 <finsh_thread_entry+0x214>
                    shell->current_history --;
800108b8:	00073797          	auipc	a5,0x73
800108bc:	76878793          	addi	a5,a5,1896 # 80084020 <shell>
800108c0:	0007a783          	lw	a5,0(a5)
800108c4:	0327d703          	lhu	a4,50(a5)
800108c8:	fff70713          	addi	a4,a4,-1
800108cc:	01071713          	slli	a4,a4,0x10
800108d0:	01075713          	srli	a4,a4,0x10
800108d4:	02e79923          	sh	a4,50(a5)
                    shell->current_history = 0;
                    continue;
                }

                /* copy the history command */
                rt_memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
800108d8:	00073797          	auipc	a5,0x73
800108dc:	74878793          	addi	a5,a5,1864 # 80084020 <shell>
800108e0:	0007a783          	lw	a5,0(a5)
800108e4:	1c678693          	addi	a3,a5,454
800108e8:	00073797          	auipc	a5,0x73
800108ec:	73878793          	addi	a5,a5,1848 # 80084020 <shell>
800108f0:	0007a703          	lw	a4,0(a5)
800108f4:	00073797          	auipc	a5,0x73
800108f8:	72c78793          	addi	a5,a5,1836 # 80084020 <shell>
800108fc:	0007a783          	lw	a5,0(a5)
80010900:	0327d783          	lhu	a5,50(a5)
80010904:	00078613          	mv	a2,a5
80010908:	00060793          	mv	a5,a2
8001090c:	00279793          	slli	a5,a5,0x2
80010910:	00c787b3          	add	a5,a5,a2
80010914:	00479793          	slli	a5,a5,0x4
80010918:	03078793          	addi	a5,a5,48
8001091c:	00f707b3          	add	a5,a4,a5
80010920:	00678793          	addi	a5,a5,6
80010924:	05000613          	li	a2,80
80010928:	00078593          	mv	a1,a5
8001092c:	00068513          	mv	a0,a3
80010930:	4b8030ef          	jal	ra,80013de8 <rt_memcpy>
                       FINSH_CMD_SIZE);
                shell->line_curpos = shell->line_position = (rt_uint16_t)strlen(shell->line);
80010934:	00073797          	auipc	a5,0x73
80010938:	6ec78793          	addi	a5,a5,1772 # 80084020 <shell>
8001093c:	0007a783          	lw	a5,0(a5)
80010940:	1c678793          	addi	a5,a5,454
80010944:	00078513          	mv	a0,a5
80010948:	0bd0c0ef          	jal	ra,8001d204 <strlen>
8001094c:	00050713          	mv	a4,a0
80010950:	00073797          	auipc	a5,0x73
80010954:	6d078793          	addi	a5,a5,1744 # 80084020 <shell>
80010958:	0007a783          	lw	a5,0(a5)
8001095c:	01071713          	slli	a4,a4,0x10
80010960:	01075713          	srli	a4,a4,0x10
80010964:	20e79c23          	sh	a4,536(a5)
80010968:	00073717          	auipc	a4,0x73
8001096c:	6b870713          	addi	a4,a4,1720 # 80084020 <shell>
80010970:	00072703          	lw	a4,0(a4)
80010974:	2187d783          	lhu	a5,536(a5)
80010978:	20f71d23          	sh	a5,538(a4)
                shell_handle_history(shell);
8001097c:	00073797          	auipc	a5,0x73
80010980:	6a478793          	addi	a5,a5,1700 # 80084020 <shell>
80010984:	0007a783          	lw	a5,0(a5)
80010988:	00078513          	mv	a0,a5
8001098c:	b0dff0ef          	jal	ra,80010498 <shell_handle_history>
#endif
                continue;
80010990:	0910006f          	j	80011220 <finsh_thread_entry+0xaa0>
                    shell->current_history = 0;
80010994:	00073797          	auipc	a5,0x73
80010998:	68c78793          	addi	a5,a5,1676 # 80084020 <shell>
8001099c:	0007a783          	lw	a5,0(a5)
800109a0:	02079923          	sh	zero,50(a5)
                    continue;
800109a4:	07d0006f          	j	80011220 <finsh_thread_entry+0xaa0>
            }
            else if (ch == 0x42) /* down key */
800109a8:	fdc42703          	lw	a4,-36(s0)
800109ac:	04200793          	li	a5,66
800109b0:	14f71863          	bne	a4,a5,80010b00 <finsh_thread_entry+0x380>
            {
#ifdef FINSH_USING_HISTORY
                /* next history */
                if (shell->current_history < shell->history_count - 1)
800109b4:	00073797          	auipc	a5,0x73
800109b8:	66c78793          	addi	a5,a5,1644 # 80084020 <shell>
800109bc:	0007a783          	lw	a5,0(a5)
800109c0:	0327d783          	lhu	a5,50(a5)
800109c4:	00078713          	mv	a4,a5
800109c8:	00073797          	auipc	a5,0x73
800109cc:	65878793          	addi	a5,a5,1624 # 80084020 <shell>
800109d0:	0007a783          	lw	a5,0(a5)
800109d4:	0347d783          	lhu	a5,52(a5)
800109d8:	fff78793          	addi	a5,a5,-1
800109dc:	02f75463          	bge	a4,a5,80010a04 <finsh_thread_entry+0x284>
                    shell->current_history ++;
800109e0:	00073797          	auipc	a5,0x73
800109e4:	64078793          	addi	a5,a5,1600 # 80084020 <shell>
800109e8:	0007a783          	lw	a5,0(a5)
800109ec:	0327d703          	lhu	a4,50(a5)
800109f0:	00170713          	addi	a4,a4,1
800109f4:	01071713          	slli	a4,a4,0x10
800109f8:	01075713          	srli	a4,a4,0x10
800109fc:	02e79923          	sh	a4,50(a5)
80010a00:	0440006f          	j	80010a44 <finsh_thread_entry+0x2c4>
                else
                {
                    /* set to the end of history */
                    if (shell->history_count != 0)
80010a04:	00073797          	auipc	a5,0x73
80010a08:	61c78793          	addi	a5,a5,1564 # 80084020 <shell>
80010a0c:	0007a783          	lw	a5,0(a5)
80010a10:	0347d783          	lhu	a5,52(a5)
80010a14:	7e078463          	beqz	a5,800111fc <finsh_thread_entry+0xa7c>
                        shell->current_history = shell->history_count - 1;
80010a18:	00073797          	auipc	a5,0x73
80010a1c:	60878793          	addi	a5,a5,1544 # 80084020 <shell>
80010a20:	0007a783          	lw	a5,0(a5)
80010a24:	0347d703          	lhu	a4,52(a5)
80010a28:	00073797          	auipc	a5,0x73
80010a2c:	5f878793          	addi	a5,a5,1528 # 80084020 <shell>
80010a30:	0007a783          	lw	a5,0(a5)
80010a34:	fff70713          	addi	a4,a4,-1
80010a38:	01071713          	slli	a4,a4,0x10
80010a3c:	01075713          	srli	a4,a4,0x10
80010a40:	02e79923          	sh	a4,50(a5)
                    else
                        continue;
                }

                rt_memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
80010a44:	00073797          	auipc	a5,0x73
80010a48:	5dc78793          	addi	a5,a5,1500 # 80084020 <shell>
80010a4c:	0007a783          	lw	a5,0(a5)
80010a50:	1c678693          	addi	a3,a5,454
80010a54:	00073797          	auipc	a5,0x73
80010a58:	5cc78793          	addi	a5,a5,1484 # 80084020 <shell>
80010a5c:	0007a703          	lw	a4,0(a5)
80010a60:	00073797          	auipc	a5,0x73
80010a64:	5c078793          	addi	a5,a5,1472 # 80084020 <shell>
80010a68:	0007a783          	lw	a5,0(a5)
80010a6c:	0327d783          	lhu	a5,50(a5)
80010a70:	00078613          	mv	a2,a5
80010a74:	00060793          	mv	a5,a2
80010a78:	00279793          	slli	a5,a5,0x2
80010a7c:	00c787b3          	add	a5,a5,a2
80010a80:	00479793          	slli	a5,a5,0x4
80010a84:	03078793          	addi	a5,a5,48
80010a88:	00f707b3          	add	a5,a4,a5
80010a8c:	00678793          	addi	a5,a5,6
80010a90:	05000613          	li	a2,80
80010a94:	00078593          	mv	a1,a5
80010a98:	00068513          	mv	a0,a3
80010a9c:	34c030ef          	jal	ra,80013de8 <rt_memcpy>
                       FINSH_CMD_SIZE);
                shell->line_curpos = shell->line_position = (rt_uint16_t)strlen(shell->line);
80010aa0:	00073797          	auipc	a5,0x73
80010aa4:	58078793          	addi	a5,a5,1408 # 80084020 <shell>
80010aa8:	0007a783          	lw	a5,0(a5)
80010aac:	1c678793          	addi	a5,a5,454
80010ab0:	00078513          	mv	a0,a5
80010ab4:	7500c0ef          	jal	ra,8001d204 <strlen>
80010ab8:	00050713          	mv	a4,a0
80010abc:	00073797          	auipc	a5,0x73
80010ac0:	56478793          	addi	a5,a5,1380 # 80084020 <shell>
80010ac4:	0007a783          	lw	a5,0(a5)
80010ac8:	01071713          	slli	a4,a4,0x10
80010acc:	01075713          	srli	a4,a4,0x10
80010ad0:	20e79c23          	sh	a4,536(a5)
80010ad4:	00073717          	auipc	a4,0x73
80010ad8:	54c70713          	addi	a4,a4,1356 # 80084020 <shell>
80010adc:	00072703          	lw	a4,0(a4)
80010ae0:	2187d783          	lhu	a5,536(a5)
80010ae4:	20f71d23          	sh	a5,538(a4)
                shell_handle_history(shell);
80010ae8:	00073797          	auipc	a5,0x73
80010aec:	53878793          	addi	a5,a5,1336 # 80084020 <shell>
80010af0:	0007a783          	lw	a5,0(a5)
80010af4:	00078513          	mv	a0,a5
80010af8:	9a1ff0ef          	jal	ra,80010498 <shell_handle_history>
#endif
                continue;
80010afc:	7240006f          	j	80011220 <finsh_thread_entry+0xaa0>
            }
            else if (ch == 0x44) /* left key */
80010b00:	fdc42703          	lw	a4,-36(s0)
80010b04:	04400793          	li	a5,68
80010b08:	04f71463          	bne	a4,a5,80010b50 <finsh_thread_entry+0x3d0>
            {
                if (shell->line_curpos)
80010b0c:	00073797          	auipc	a5,0x73
80010b10:	51478793          	addi	a5,a5,1300 # 80084020 <shell>
80010b14:	0007a783          	lw	a5,0(a5)
80010b18:	21a7d783          	lhu	a5,538(a5)
80010b1c:	6e078463          	beqz	a5,80011204 <finsh_thread_entry+0xa84>
                {
                    rt_kprintf("\b");
80010b20:	00016517          	auipc	a0,0x16
80010b24:	24450513          	addi	a0,a0,580 # 80026d64 <raise+0x1170>
80010b28:	700040ef          	jal	ra,80015228 <rt_kprintf>
                    shell->line_curpos --;
80010b2c:	00073797          	auipc	a5,0x73
80010b30:	4f478793          	addi	a5,a5,1268 # 80084020 <shell>
80010b34:	0007a783          	lw	a5,0(a5)
80010b38:	21a7d703          	lhu	a4,538(a5)
80010b3c:	fff70713          	addi	a4,a4,-1
80010b40:	01071713          	slli	a4,a4,0x10
80010b44:	01075713          	srli	a4,a4,0x10
80010b48:	20e79d23          	sh	a4,538(a5)
                }

                continue;
80010b4c:	6b80006f          	j	80011204 <finsh_thread_entry+0xa84>
            }
            else if (ch == 0x43) /* right key */
80010b50:	fdc42703          	lw	a4,-36(s0)
80010b54:	04300793          	li	a5,67
80010b58:	08f71063          	bne	a4,a5,80010bd8 <finsh_thread_entry+0x458>
            {
                if (shell->line_curpos < shell->line_position)
80010b5c:	00073797          	auipc	a5,0x73
80010b60:	4c478793          	addi	a5,a5,1220 # 80084020 <shell>
80010b64:	0007a783          	lw	a5,0(a5)
80010b68:	21a7d703          	lhu	a4,538(a5)
80010b6c:	00073797          	auipc	a5,0x73
80010b70:	4b478793          	addi	a5,a5,1204 # 80084020 <shell>
80010b74:	0007a783          	lw	a5,0(a5)
80010b78:	2187d783          	lhu	a5,536(a5)
80010b7c:	68f77863          	bgeu	a4,a5,8001120c <finsh_thread_entry+0xa8c>
                {
                    rt_kprintf("%c", shell->line[shell->line_curpos]);
80010b80:	00073797          	auipc	a5,0x73
80010b84:	4a078793          	addi	a5,a5,1184 # 80084020 <shell>
80010b88:	0007a783          	lw	a5,0(a5)
80010b8c:	00073717          	auipc	a4,0x73
80010b90:	49470713          	addi	a4,a4,1172 # 80084020 <shell>
80010b94:	00072703          	lw	a4,0(a4)
80010b98:	21a75703          	lhu	a4,538(a4)
80010b9c:	00e787b3          	add	a5,a5,a4
80010ba0:	1c67c783          	lbu	a5,454(a5)
80010ba4:	00078593          	mv	a1,a5
80010ba8:	00016517          	auipc	a0,0x16
80010bac:	1c050513          	addi	a0,a0,448 # 80026d68 <raise+0x1174>
80010bb0:	678040ef          	jal	ra,80015228 <rt_kprintf>
                    shell->line_curpos ++;
80010bb4:	00073797          	auipc	a5,0x73
80010bb8:	46c78793          	addi	a5,a5,1132 # 80084020 <shell>
80010bbc:	0007a783          	lw	a5,0(a5)
80010bc0:	21a7d703          	lhu	a4,538(a5)
80010bc4:	00170713          	addi	a4,a4,1
80010bc8:	01071713          	slli	a4,a4,0x10
80010bcc:	01075713          	srli	a4,a4,0x10
80010bd0:	20e79d23          	sh	a4,538(a5)
                }

                continue;
80010bd4:	6380006f          	j	8001120c <finsh_thread_entry+0xa8c>
            }
        }

        /* received null or error */
        if (ch == '\0' || ch == 0xFF) continue;
80010bd8:	fdc42783          	lw	a5,-36(s0)
80010bdc:	62078c63          	beqz	a5,80011214 <finsh_thread_entry+0xa94>
80010be0:	fdc42703          	lw	a4,-36(s0)
80010be4:	0ff00793          	li	a5,255
80010be8:	62f70663          	beq	a4,a5,80011214 <finsh_thread_entry+0xa94>
        /* handle tab key */
        else if (ch == '\t')
80010bec:	fdc42703          	lw	a4,-36(s0)
80010bf0:	00900793          	li	a5,9
80010bf4:	0af71263          	bne	a4,a5,80010c98 <finsh_thread_entry+0x518>
        {
            int i;
            /* move the cursor to the beginning of line */
            for (i = 0; i < shell->line_curpos; i++)
80010bf8:	fe042623          	sw	zero,-20(s0)
80010bfc:	01c0006f          	j	80010c18 <finsh_thread_entry+0x498>
                rt_kprintf("\b");
80010c00:	00016517          	auipc	a0,0x16
80010c04:	16450513          	addi	a0,a0,356 # 80026d64 <raise+0x1170>
80010c08:	620040ef          	jal	ra,80015228 <rt_kprintf>
            for (i = 0; i < shell->line_curpos; i++)
80010c0c:	fec42783          	lw	a5,-20(s0)
80010c10:	00178793          	addi	a5,a5,1
80010c14:	fef42623          	sw	a5,-20(s0)
80010c18:	00073797          	auipc	a5,0x73
80010c1c:	40878793          	addi	a5,a5,1032 # 80084020 <shell>
80010c20:	0007a783          	lw	a5,0(a5)
80010c24:	21a7d783          	lhu	a5,538(a5)
80010c28:	00078713          	mv	a4,a5
80010c2c:	fec42783          	lw	a5,-20(s0)
80010c30:	fce7c8e3          	blt	a5,a4,80010c00 <finsh_thread_entry+0x480>

            /* auto complete */
            shell_auto_complete(&shell->line[0]);
80010c34:	00073797          	auipc	a5,0x73
80010c38:	3ec78793          	addi	a5,a5,1004 # 80084020 <shell>
80010c3c:	0007a783          	lw	a5,0(a5)
80010c40:	1c678793          	addi	a5,a5,454
80010c44:	00078513          	mv	a0,a5
80010c48:	ff8ff0ef          	jal	ra,80010440 <shell_auto_complete>
            /* re-calculate position */
            shell->line_curpos = shell->line_position = (rt_uint16_t)strlen(shell->line);
80010c4c:	00073797          	auipc	a5,0x73
80010c50:	3d478793          	addi	a5,a5,980 # 80084020 <shell>
80010c54:	0007a783          	lw	a5,0(a5)
80010c58:	1c678793          	addi	a5,a5,454
80010c5c:	00078513          	mv	a0,a5
80010c60:	5a40c0ef          	jal	ra,8001d204 <strlen>
80010c64:	00050713          	mv	a4,a0
80010c68:	00073797          	auipc	a5,0x73
80010c6c:	3b878793          	addi	a5,a5,952 # 80084020 <shell>
80010c70:	0007a783          	lw	a5,0(a5)
80010c74:	01071713          	slli	a4,a4,0x10
80010c78:	01075713          	srli	a4,a4,0x10
80010c7c:	20e79c23          	sh	a4,536(a5)
80010c80:	00073717          	auipc	a4,0x73
80010c84:	3a070713          	addi	a4,a4,928 # 80084020 <shell>
80010c88:	00072703          	lw	a4,0(a4)
80010c8c:	2187d783          	lhu	a5,536(a5)
80010c90:	20f71d23          	sh	a5,538(a4)

            continue;
80010c94:	58c0006f          	j	80011220 <finsh_thread_entry+0xaa0>
        }
        /* handle backspace key */
        else if (ch == 0x7f || ch == 0x08)
80010c98:	fdc42703          	lw	a4,-36(s0)
80010c9c:	07f00793          	li	a5,127
80010ca0:	00f70863          	beq	a4,a5,80010cb0 <finsh_thread_entry+0x530>
80010ca4:	fdc42703          	lw	a4,-36(s0)
80010ca8:	00800793          	li	a5,8
80010cac:	1ef71463          	bne	a4,a5,80010e94 <finsh_thread_entry+0x714>
        {
            /* note that shell->line_curpos >= 0 */
            if (shell->line_curpos == 0)
80010cb0:	00073797          	auipc	a5,0x73
80010cb4:	37078793          	addi	a5,a5,880 # 80084020 <shell>
80010cb8:	0007a783          	lw	a5,0(a5)
80010cbc:	21a7d783          	lhu	a5,538(a5)
80010cc0:	54078e63          	beqz	a5,8001121c <finsh_thread_entry+0xa9c>
                continue;

            shell->line_position--;
80010cc4:	00073797          	auipc	a5,0x73
80010cc8:	35c78793          	addi	a5,a5,860 # 80084020 <shell>
80010ccc:	0007a783          	lw	a5,0(a5)
80010cd0:	2187d703          	lhu	a4,536(a5)
80010cd4:	fff70713          	addi	a4,a4,-1
80010cd8:	01071713          	slli	a4,a4,0x10
80010cdc:	01075713          	srli	a4,a4,0x10
80010ce0:	20e79c23          	sh	a4,536(a5)
            shell->line_curpos--;
80010ce4:	00073797          	auipc	a5,0x73
80010ce8:	33c78793          	addi	a5,a5,828 # 80084020 <shell>
80010cec:	0007a783          	lw	a5,0(a5)
80010cf0:	21a7d703          	lhu	a4,538(a5)
80010cf4:	fff70713          	addi	a4,a4,-1
80010cf8:	01071713          	slli	a4,a4,0x10
80010cfc:	01075713          	srli	a4,a4,0x10
80010d00:	20e79d23          	sh	a4,538(a5)

            if (shell->line_position > shell->line_curpos)
80010d04:	00073797          	auipc	a5,0x73
80010d08:	31c78793          	addi	a5,a5,796 # 80084020 <shell>
80010d0c:	0007a783          	lw	a5,0(a5)
80010d10:	2187d703          	lhu	a4,536(a5)
80010d14:	00073797          	auipc	a5,0x73
80010d18:	30c78793          	addi	a5,a5,780 # 80084020 <shell>
80010d1c:	0007a783          	lw	a5,0(a5)
80010d20:	21a7d783          	lhu	a5,538(a5)
80010d24:	12e7fe63          	bgeu	a5,a4,80010e60 <finsh_thread_entry+0x6e0>
            {
                int i;

                rt_memmove(&shell->line[shell->line_curpos],
80010d28:	00073797          	auipc	a5,0x73
80010d2c:	2f878793          	addi	a5,a5,760 # 80084020 <shell>
80010d30:	0007a703          	lw	a4,0(a5)
80010d34:	00073797          	auipc	a5,0x73
80010d38:	2ec78793          	addi	a5,a5,748 # 80084020 <shell>
80010d3c:	0007a783          	lw	a5,0(a5)
80010d40:	21a7d783          	lhu	a5,538(a5)
80010d44:	1c078793          	addi	a5,a5,448
80010d48:	00f707b3          	add	a5,a4,a5
80010d4c:	00678693          	addi	a3,a5,6
                           &shell->line[shell->line_curpos + 1],
80010d50:	00073797          	auipc	a5,0x73
80010d54:	2d078793          	addi	a5,a5,720 # 80084020 <shell>
80010d58:	0007a703          	lw	a4,0(a5)
80010d5c:	00073797          	auipc	a5,0x73
80010d60:	2c478793          	addi	a5,a5,708 # 80084020 <shell>
80010d64:	0007a783          	lw	a5,0(a5)
80010d68:	21a7d783          	lhu	a5,538(a5)
80010d6c:	00178793          	addi	a5,a5,1
80010d70:	1c078793          	addi	a5,a5,448
80010d74:	00f707b3          	add	a5,a4,a5
80010d78:	00678713          	addi	a4,a5,6
                           shell->line_position - shell->line_curpos);
80010d7c:	00073797          	auipc	a5,0x73
80010d80:	2a478793          	addi	a5,a5,676 # 80084020 <shell>
80010d84:	0007a783          	lw	a5,0(a5)
80010d88:	2187d783          	lhu	a5,536(a5)
80010d8c:	00078613          	mv	a2,a5
80010d90:	00073797          	auipc	a5,0x73
80010d94:	29078793          	addi	a5,a5,656 # 80084020 <shell>
80010d98:	0007a783          	lw	a5,0(a5)
80010d9c:	21a7d783          	lhu	a5,538(a5)
80010da0:	40f607b3          	sub	a5,a2,a5
                rt_memmove(&shell->line[shell->line_curpos],
80010da4:	00078613          	mv	a2,a5
80010da8:	00070593          	mv	a1,a4
80010dac:	00068513          	mv	a0,a3
80010db0:	1c8030ef          	jal	ra,80013f78 <rt_memmove>
                shell->line[shell->line_position] = 0;
80010db4:	00073797          	auipc	a5,0x73
80010db8:	26c78793          	addi	a5,a5,620 # 80084020 <shell>
80010dbc:	0007a783          	lw	a5,0(a5)
80010dc0:	00073717          	auipc	a4,0x73
80010dc4:	26070713          	addi	a4,a4,608 # 80084020 <shell>
80010dc8:	00072703          	lw	a4,0(a4)
80010dcc:	21875703          	lhu	a4,536(a4)
80010dd0:	00e787b3          	add	a5,a5,a4
80010dd4:	1c078323          	sb	zero,454(a5)

                rt_kprintf("\b%s  \b", &shell->line[shell->line_curpos]);
80010dd8:	00073797          	auipc	a5,0x73
80010ddc:	24878793          	addi	a5,a5,584 # 80084020 <shell>
80010de0:	0007a703          	lw	a4,0(a5)
80010de4:	00073797          	auipc	a5,0x73
80010de8:	23c78793          	addi	a5,a5,572 # 80084020 <shell>
80010dec:	0007a783          	lw	a5,0(a5)
80010df0:	21a7d783          	lhu	a5,538(a5)
80010df4:	1c078793          	addi	a5,a5,448
80010df8:	00f707b3          	add	a5,a4,a5
80010dfc:	00678793          	addi	a5,a5,6
80010e00:	00078593          	mv	a1,a5
80010e04:	00016517          	auipc	a0,0x16
80010e08:	f6850513          	addi	a0,a0,-152 # 80026d6c <raise+0x1178>
80010e0c:	41c040ef          	jal	ra,80015228 <rt_kprintf>

                /* move the cursor to the origin position */
                for (i = shell->line_curpos; i <= shell->line_position; i++)
80010e10:	00073797          	auipc	a5,0x73
80010e14:	21078793          	addi	a5,a5,528 # 80084020 <shell>
80010e18:	0007a783          	lw	a5,0(a5)
80010e1c:	21a7d783          	lhu	a5,538(a5)
80010e20:	fef42423          	sw	a5,-24(s0)
80010e24:	01c0006f          	j	80010e40 <finsh_thread_entry+0x6c0>
                    rt_kprintf("\b");
80010e28:	00016517          	auipc	a0,0x16
80010e2c:	f3c50513          	addi	a0,a0,-196 # 80026d64 <raise+0x1170>
80010e30:	3f8040ef          	jal	ra,80015228 <rt_kprintf>
                for (i = shell->line_curpos; i <= shell->line_position; i++)
80010e34:	fe842783          	lw	a5,-24(s0)
80010e38:	00178793          	addi	a5,a5,1
80010e3c:	fef42423          	sw	a5,-24(s0)
80010e40:	00073797          	auipc	a5,0x73
80010e44:	1e078793          	addi	a5,a5,480 # 80084020 <shell>
80010e48:	0007a783          	lw	a5,0(a5)
80010e4c:	2187d783          	lhu	a5,536(a5)
80010e50:	00078713          	mv	a4,a5
80010e54:	fe842783          	lw	a5,-24(s0)
80010e58:	fcf758e3          	bge	a4,a5,80010e28 <finsh_thread_entry+0x6a8>
            {
                rt_kprintf("\b \b");
                shell->line[shell->line_position] = 0;
            }

            continue;
80010e5c:	3c40006f          	j	80011220 <finsh_thread_entry+0xaa0>
                rt_kprintf("\b \b");
80010e60:	00016517          	auipc	a0,0x16
80010e64:	f1450513          	addi	a0,a0,-236 # 80026d74 <raise+0x1180>
80010e68:	3c0040ef          	jal	ra,80015228 <rt_kprintf>
                shell->line[shell->line_position] = 0;
80010e6c:	00073797          	auipc	a5,0x73
80010e70:	1b478793          	addi	a5,a5,436 # 80084020 <shell>
80010e74:	0007a783          	lw	a5,0(a5)
80010e78:	00073717          	auipc	a4,0x73
80010e7c:	1a870713          	addi	a4,a4,424 # 80084020 <shell>
80010e80:	00072703          	lw	a4,0(a4)
80010e84:	21875703          	lhu	a4,536(a4)
80010e88:	00e787b3          	add	a5,a5,a4
80010e8c:	1c078323          	sb	zero,454(a5)
            continue;
80010e90:	3900006f          	j	80011220 <finsh_thread_entry+0xaa0>
        }

        /* handle end of line, break */
        if (ch == '\r' || ch == '\n')
80010e94:	fdc42703          	lw	a4,-36(s0)
80010e98:	00d00793          	li	a5,13
80010e9c:	00f70863          	beq	a4,a5,80010eac <finsh_thread_entry+0x72c>
80010ea0:	fdc42703          	lw	a4,-36(s0)
80010ea4:	00a00793          	li	a5,10
80010ea8:	0cf71263          	bne	a4,a5,80010f6c <finsh_thread_entry+0x7ec>
        {
#ifdef FINSH_USING_HISTORY
            shell_push_history(shell);
80010eac:	00073797          	auipc	a5,0x73
80010eb0:	17478793          	addi	a5,a5,372 # 80084020 <shell>
80010eb4:	0007a783          	lw	a5,0(a5)
80010eb8:	00078513          	mv	a0,a5
80010ebc:	e38ff0ef          	jal	ra,800104f4 <shell_push_history>
#endif
            if (shell->echo_mode)
80010ec0:	00073797          	auipc	a5,0x73
80010ec4:	16078793          	addi	a5,a5,352 # 80084020 <shell>
80010ec8:	0007a783          	lw	a5,0(a5)
80010ecc:	0307c783          	lbu	a5,48(a5)
80010ed0:	0017f793          	andi	a5,a5,1
80010ed4:	0ff7f793          	zext.b	a5,a5
80010ed8:	00078863          	beqz	a5,80010ee8 <finsh_thread_entry+0x768>
                rt_kprintf("\n");
80010edc:	00016517          	auipc	a0,0x16
80010ee0:	e7450513          	addi	a0,a0,-396 # 80026d50 <raise+0x115c>
80010ee4:	344040ef          	jal	ra,80015228 <rt_kprintf>
            msh_exec(shell->line, shell->line_position);
80010ee8:	00073797          	auipc	a5,0x73
80010eec:	13878793          	addi	a5,a5,312 # 80084020 <shell>
80010ef0:	0007a783          	lw	a5,0(a5)
80010ef4:	1c678713          	addi	a4,a5,454
80010ef8:	00073797          	auipc	a5,0x73
80010efc:	12878793          	addi	a5,a5,296 # 80084020 <shell>
80010f00:	0007a783          	lw	a5,0(a5)
80010f04:	2187d783          	lhu	a5,536(a5)
80010f08:	00078593          	mv	a1,a5
80010f0c:	00070513          	mv	a0,a4
80010f10:	e88fd0ef          	jal	ra,8000e598 <msh_exec>

            rt_kprintf(FINSH_PROMPT);
80010f14:	998ff0ef          	jal	ra,800100ac <finsh_get_prompt>
80010f18:	00050793          	mv	a5,a0
80010f1c:	00078513          	mv	a0,a5
80010f20:	308040ef          	jal	ra,80015228 <rt_kprintf>
            rt_memset(shell->line, 0, sizeof(shell->line));
80010f24:	00073797          	auipc	a5,0x73
80010f28:	0fc78793          	addi	a5,a5,252 # 80084020 <shell>
80010f2c:	0007a783          	lw	a5,0(a5)
80010f30:	1c678793          	addi	a5,a5,454
80010f34:	05100613          	li	a2,81
80010f38:	00000593          	li	a1,0
80010f3c:	00078513          	mv	a0,a5
80010f40:	54d020ef          	jal	ra,80013c8c <rt_memset>
            shell->line_curpos = shell->line_position = 0;
80010f44:	00073797          	auipc	a5,0x73
80010f48:	0dc78793          	addi	a5,a5,220 # 80084020 <shell>
80010f4c:	0007a783          	lw	a5,0(a5)
80010f50:	20079c23          	sh	zero,536(a5)
80010f54:	00073717          	auipc	a4,0x73
80010f58:	0cc70713          	addi	a4,a4,204 # 80084020 <shell>
80010f5c:	00072703          	lw	a4,0(a4)
80010f60:	2187d783          	lhu	a5,536(a5)
80010f64:	20f71d23          	sh	a5,538(a4)
            continue;
80010f68:	2b80006f          	j	80011220 <finsh_thread_entry+0xaa0>
        }

        /* it's a large line, discard it */
        if (shell->line_position >= FINSH_CMD_SIZE)
80010f6c:	00073797          	auipc	a5,0x73
80010f70:	0b478793          	addi	a5,a5,180 # 80084020 <shell>
80010f74:	0007a783          	lw	a5,0(a5)
80010f78:	2187d703          	lhu	a4,536(a5)
80010f7c:	04f00793          	li	a5,79
80010f80:	00e7fa63          	bgeu	a5,a4,80010f94 <finsh_thread_entry+0x814>
            shell->line_position = 0;
80010f84:	00073797          	auipc	a5,0x73
80010f88:	09c78793          	addi	a5,a5,156 # 80084020 <shell>
80010f8c:	0007a783          	lw	a5,0(a5)
80010f90:	20079c23          	sh	zero,536(a5)

        /* normal character */
        if (shell->line_curpos < shell->line_position)
80010f94:	00073797          	auipc	a5,0x73
80010f98:	08c78793          	addi	a5,a5,140 # 80084020 <shell>
80010f9c:	0007a783          	lw	a5,0(a5)
80010fa0:	21a7d703          	lhu	a4,538(a5)
80010fa4:	00073797          	auipc	a5,0x73
80010fa8:	07c78793          	addi	a5,a5,124 # 80084020 <shell>
80010fac:	0007a783          	lw	a5,0(a5)
80010fb0:	2187d783          	lhu	a5,536(a5)
80010fb4:	16f77263          	bgeu	a4,a5,80011118 <finsh_thread_entry+0x998>
        {
            int i;

            rt_memmove(&shell->line[shell->line_curpos + 1],
80010fb8:	00073797          	auipc	a5,0x73
80010fbc:	06878793          	addi	a5,a5,104 # 80084020 <shell>
80010fc0:	0007a703          	lw	a4,0(a5)
80010fc4:	00073797          	auipc	a5,0x73
80010fc8:	05c78793          	addi	a5,a5,92 # 80084020 <shell>
80010fcc:	0007a783          	lw	a5,0(a5)
80010fd0:	21a7d783          	lhu	a5,538(a5)
80010fd4:	00178793          	addi	a5,a5,1
80010fd8:	1c078793          	addi	a5,a5,448
80010fdc:	00f707b3          	add	a5,a4,a5
80010fe0:	00678693          	addi	a3,a5,6
                       &shell->line[shell->line_curpos],
80010fe4:	00073797          	auipc	a5,0x73
80010fe8:	03c78793          	addi	a5,a5,60 # 80084020 <shell>
80010fec:	0007a703          	lw	a4,0(a5)
80010ff0:	00073797          	auipc	a5,0x73
80010ff4:	03078793          	addi	a5,a5,48 # 80084020 <shell>
80010ff8:	0007a783          	lw	a5,0(a5)
80010ffc:	21a7d783          	lhu	a5,538(a5)
80011000:	1c078793          	addi	a5,a5,448
80011004:	00f707b3          	add	a5,a4,a5
80011008:	00678713          	addi	a4,a5,6
                       shell->line_position - shell->line_curpos);
8001100c:	00073797          	auipc	a5,0x73
80011010:	01478793          	addi	a5,a5,20 # 80084020 <shell>
80011014:	0007a783          	lw	a5,0(a5)
80011018:	2187d783          	lhu	a5,536(a5)
8001101c:	00078613          	mv	a2,a5
80011020:	00073797          	auipc	a5,0x73
80011024:	00078793          	mv	a5,a5
80011028:	0007a783          	lw	a5,0(a5) # 80084020 <shell>
8001102c:	21a7d783          	lhu	a5,538(a5)
80011030:	40f607b3          	sub	a5,a2,a5
            rt_memmove(&shell->line[shell->line_curpos + 1],
80011034:	00078613          	mv	a2,a5
80011038:	00070593          	mv	a1,a4
8001103c:	00068513          	mv	a0,a3
80011040:	739020ef          	jal	ra,80013f78 <rt_memmove>
            shell->line[shell->line_curpos] = ch;
80011044:	00073797          	auipc	a5,0x73
80011048:	fdc78793          	addi	a5,a5,-36 # 80084020 <shell>
8001104c:	0007a783          	lw	a5,0(a5)
80011050:	00073717          	auipc	a4,0x73
80011054:	fd070713          	addi	a4,a4,-48 # 80084020 <shell>
80011058:	00072703          	lw	a4,0(a4)
8001105c:	21a75703          	lhu	a4,538(a4)
80011060:	00070693          	mv	a3,a4
80011064:	fdc42703          	lw	a4,-36(s0)
80011068:	0ff77713          	zext.b	a4,a4
8001106c:	00d787b3          	add	a5,a5,a3
80011070:	1ce78323          	sb	a4,454(a5)
            if (shell->echo_mode)
80011074:	00073797          	auipc	a5,0x73
80011078:	fac78793          	addi	a5,a5,-84 # 80084020 <shell>
8001107c:	0007a783          	lw	a5,0(a5)
80011080:	0307c783          	lbu	a5,48(a5)
80011084:	0017f793          	andi	a5,a5,1
80011088:	0ff7f793          	zext.b	a5,a5
8001108c:	02078e63          	beqz	a5,800110c8 <finsh_thread_entry+0x948>
                rt_kprintf("%s", &shell->line[shell->line_curpos]);
80011090:	00073797          	auipc	a5,0x73
80011094:	f9078793          	addi	a5,a5,-112 # 80084020 <shell>
80011098:	0007a703          	lw	a4,0(a5)
8001109c:	00073797          	auipc	a5,0x73
800110a0:	f8478793          	addi	a5,a5,-124 # 80084020 <shell>
800110a4:	0007a783          	lw	a5,0(a5)
800110a8:	21a7d783          	lhu	a5,538(a5)
800110ac:	1c078793          	addi	a5,a5,448
800110b0:	00f707b3          	add	a5,a4,a5
800110b4:	00678793          	addi	a5,a5,6
800110b8:	00078593          	mv	a1,a5
800110bc:	00016517          	auipc	a0,0x16
800110c0:	cbc50513          	addi	a0,a0,-836 # 80026d78 <raise+0x1184>
800110c4:	164040ef          	jal	ra,80015228 <rt_kprintf>

            /* move the cursor to new position */
            for (i = shell->line_curpos; i < shell->line_position; i++)
800110c8:	00073797          	auipc	a5,0x73
800110cc:	f5878793          	addi	a5,a5,-168 # 80084020 <shell>
800110d0:	0007a783          	lw	a5,0(a5)
800110d4:	21a7d783          	lhu	a5,538(a5)
800110d8:	fef42223          	sw	a5,-28(s0)
800110dc:	01c0006f          	j	800110f8 <finsh_thread_entry+0x978>
                rt_kprintf("\b");
800110e0:	00016517          	auipc	a0,0x16
800110e4:	c8450513          	addi	a0,a0,-892 # 80026d64 <raise+0x1170>
800110e8:	140040ef          	jal	ra,80015228 <rt_kprintf>
            for (i = shell->line_curpos; i < shell->line_position; i++)
800110ec:	fe442783          	lw	a5,-28(s0)
800110f0:	00178793          	addi	a5,a5,1
800110f4:	fef42223          	sw	a5,-28(s0)
800110f8:	00073797          	auipc	a5,0x73
800110fc:	f2878793          	addi	a5,a5,-216 # 80084020 <shell>
80011100:	0007a783          	lw	a5,0(a5)
80011104:	2187d783          	lhu	a5,536(a5)
80011108:	00078713          	mv	a4,a5
8001110c:	fe442783          	lw	a5,-28(s0)
80011110:	fce7c8e3          	blt	a5,a4,800110e0 <finsh_thread_entry+0x960>
80011114:	0600006f          	j	80011174 <finsh_thread_entry+0x9f4>
        }
        else
        {
            shell->line[shell->line_position] = ch;
80011118:	00073797          	auipc	a5,0x73
8001111c:	f0878793          	addi	a5,a5,-248 # 80084020 <shell>
80011120:	0007a783          	lw	a5,0(a5)
80011124:	00073717          	auipc	a4,0x73
80011128:	efc70713          	addi	a4,a4,-260 # 80084020 <shell>
8001112c:	00072703          	lw	a4,0(a4)
80011130:	21875703          	lhu	a4,536(a4)
80011134:	00070693          	mv	a3,a4
80011138:	fdc42703          	lw	a4,-36(s0)
8001113c:	0ff77713          	zext.b	a4,a4
80011140:	00d787b3          	add	a5,a5,a3
80011144:	1ce78323          	sb	a4,454(a5)
            if (shell->echo_mode)
80011148:	00073797          	auipc	a5,0x73
8001114c:	ed878793          	addi	a5,a5,-296 # 80084020 <shell>
80011150:	0007a783          	lw	a5,0(a5)
80011154:	0307c783          	lbu	a5,48(a5)
80011158:	0017f793          	andi	a5,a5,1
8001115c:	0ff7f793          	zext.b	a5,a5
80011160:	00078a63          	beqz	a5,80011174 <finsh_thread_entry+0x9f4>
                rt_kprintf("%c", ch);
80011164:	fdc42583          	lw	a1,-36(s0)
80011168:	00016517          	auipc	a0,0x16
8001116c:	c0050513          	addi	a0,a0,-1024 # 80026d68 <raise+0x1174>
80011170:	0b8040ef          	jal	ra,80015228 <rt_kprintf>
        }

        ch = 0;
80011174:	fc042e23          	sw	zero,-36(s0)
        shell->line_position ++;
80011178:	00073797          	auipc	a5,0x73
8001117c:	ea878793          	addi	a5,a5,-344 # 80084020 <shell>
80011180:	0007a783          	lw	a5,0(a5)
80011184:	2187d703          	lhu	a4,536(a5)
80011188:	00170713          	addi	a4,a4,1
8001118c:	01071713          	slli	a4,a4,0x10
80011190:	01075713          	srli	a4,a4,0x10
80011194:	20e79c23          	sh	a4,536(a5)
        shell->line_curpos++;
80011198:	00073797          	auipc	a5,0x73
8001119c:	e8878793          	addi	a5,a5,-376 # 80084020 <shell>
800111a0:	0007a783          	lw	a5,0(a5)
800111a4:	21a7d703          	lhu	a4,538(a5)
800111a8:	00170713          	addi	a4,a4,1
800111ac:	01071713          	slli	a4,a4,0x10
800111b0:	01075713          	srli	a4,a4,0x10
800111b4:	20e79d23          	sh	a4,538(a5)
        if (shell->line_position >= FINSH_CMD_SIZE)
800111b8:	00073797          	auipc	a5,0x73
800111bc:	e6878793          	addi	a5,a5,-408 # 80084020 <shell>
800111c0:	0007a783          	lw	a5,0(a5)
800111c4:	2187d703          	lhu	a4,536(a5)
800111c8:	04f00793          	li	a5,79
800111cc:	e2e7f063          	bgeu	a5,a4,800107ec <finsh_thread_entry+0x6c>
        {
            /* clear command line */
            shell->line_position = 0;
800111d0:	00073797          	auipc	a5,0x73
800111d4:	e5078793          	addi	a5,a5,-432 # 80084020 <shell>
800111d8:	0007a783          	lw	a5,0(a5)
800111dc:	20079c23          	sh	zero,536(a5)
            shell->line_curpos = 0;
800111e0:	00073797          	auipc	a5,0x73
800111e4:	e4078793          	addi	a5,a5,-448 # 80084020 <shell>
800111e8:	0007a783          	lw	a5,0(a5)
800111ec:	20079d23          	sh	zero,538(a5)
800111f0:	dfcff06f          	j	800107ec <finsh_thread_entry+0x6c>
            continue;
800111f4:	00000013          	nop
800111f8:	df4ff06f          	j	800107ec <finsh_thread_entry+0x6c>
                        continue;
800111fc:	00000013          	nop
80011200:	decff06f          	j	800107ec <finsh_thread_entry+0x6c>
                continue;
80011204:	00000013          	nop
80011208:	de4ff06f          	j	800107ec <finsh_thread_entry+0x6c>
                continue;
8001120c:	00000013          	nop
80011210:	ddcff06f          	j	800107ec <finsh_thread_entry+0x6c>
        if (ch == '\0' || ch == 0xFF) continue;
80011214:	00000013          	nop
80011218:	dd4ff06f          	j	800107ec <finsh_thread_entry+0x6c>
                continue;
8001121c:	00000013          	nop
        ch = (int)finsh_getchar();
80011220:	dccff06f          	j	800107ec <finsh_thread_entry+0x6c>

80011224 <finsh_system_function_init>:
        }
    } /* end of device read */
}

void finsh_system_function_init(const void *begin, const void *end)
{
80011224:	fe010113          	addi	sp,sp,-32
80011228:	00812e23          	sw	s0,28(sp)
8001122c:	02010413          	addi	s0,sp,32
80011230:	fea42623          	sw	a0,-20(s0)
80011234:	feb42423          	sw	a1,-24(s0)
    _syscall_table_begin = (struct finsh_syscall *) begin;
80011238:	00073797          	auipc	a5,0x73
8001123c:	de078793          	addi	a5,a5,-544 # 80084018 <_syscall_table_begin>
80011240:	fec42703          	lw	a4,-20(s0)
80011244:	00e7a023          	sw	a4,0(a5)
    _syscall_table_end = (struct finsh_syscall *) end;
80011248:	00073797          	auipc	a5,0x73
8001124c:	dd478793          	addi	a5,a5,-556 # 8008401c <_syscall_table_end>
80011250:	fe842703          	lw	a4,-24(s0)
80011254:	00e7a023          	sw	a4,0(a5)
}
80011258:	00000013          	nop
8001125c:	01c12403          	lw	s0,28(sp)
80011260:	02010113          	addi	sp,sp,32
80011264:	00008067          	ret

80011268 <finsh_system_init>:
 * @ingroup finsh
 *
 * This function will initialize finsh shell
 */
int finsh_system_init(void)
{
80011268:	fe010113          	addi	sp,sp,-32
8001126c:	00112e23          	sw	ra,28(sp)
80011270:	00812c23          	sw	s0,24(sp)
80011274:	02010413          	addi	s0,sp,32
    rt_err_t result = RT_EOK;
80011278:	fe042623          	sw	zero,-20(s0)
                               __section_end("FSymTab"));
#elif defined (__GNUC__) || defined(__TI_COMPILER_VERSION__) || defined(__TASKING__)
    /* GNU GCC Compiler and TI CCS */
    extern const int __fsymtab_start;
    extern const int __fsymtab_end;
    finsh_system_function_init(&__fsymtab_start, &__fsymtab_end);
8001127c:	00018597          	auipc	a1,0x18
80011280:	d6058593          	addi	a1,a1,-672 # 80028fdc <__rt_init_rti_start>
80011284:	00018517          	auipc	a0,0x18
80011288:	bcc50513          	addi	a0,a0,-1076 # 80028e50 <__fsym_list_fd>
8001128c:	f99ff0ef          	jal	ra,80011224 <finsh_system_function_init>
#endif
#endif

#ifdef RT_USING_HEAP
    /* create or set shell structure */
    shell = (struct finsh_shell *)rt_calloc(1, sizeof(struct finsh_shell));
80011290:	22000593          	li	a1,544
80011294:	00100513          	li	a0,1
80011298:	314040ef          	jal	ra,800155ac <rt_calloc>
8001129c:	00050713          	mv	a4,a0
800112a0:	00073797          	auipc	a5,0x73
800112a4:	d8078793          	addi	a5,a5,-640 # 80084020 <shell>
800112a8:	00e7a023          	sw	a4,0(a5)
    if (shell == RT_NULL)
800112ac:	00073797          	auipc	a5,0x73
800112b0:	d7478793          	addi	a5,a5,-652 # 80084020 <shell>
800112b4:	0007a783          	lw	a5,0(a5)
800112b8:	00079c63          	bnez	a5,800112d0 <finsh_system_init+0x68>
    {
        rt_kprintf("no memory for shell\n");
800112bc:	00016517          	auipc	a0,0x16
800112c0:	ac050513          	addi	a0,a0,-1344 # 80026d7c <raise+0x1188>
800112c4:	765030ef          	jal	ra,80015228 <rt_kprintf>
        return -1;
800112c8:	fff00793          	li	a5,-1
800112cc:	0740006f          	j	80011340 <finsh_system_init+0xd8>
    }
    tid = rt_thread_create(FINSH_THREAD_NAME,
800112d0:	00a00793          	li	a5,10
800112d4:	01400713          	li	a4,20
800112d8:	000016b7          	lui	a3,0x1
800112dc:	00000613          	li	a2,0
800112e0:	fffff597          	auipc	a1,0xfffff
800112e4:	4a058593          	addi	a1,a1,1184 # 80010780 <finsh_thread_entry>
800112e8:	00016517          	auipc	a0,0x16
800112ec:	aac50513          	addi	a0,a0,-1364 # 80026d94 <raise+0x11a0>
800112f0:	5fc060ef          	jal	ra,800178ec <rt_thread_create>
800112f4:	fea42423          	sw	a0,-24(s0)
                            finsh_thread_entry, RT_NULL,
                            &finsh_thread_stack[0], sizeof(finsh_thread_stack),
                            FINSH_THREAD_PRIORITY, 10);
#endif /* RT_USING_HEAP */

    rt_sem_init(&(shell->rx_sem), "shrx", 0, 0);
800112f8:	00073797          	auipc	a5,0x73
800112fc:	d2878793          	addi	a5,a5,-728 # 80084020 <shell>
80011300:	0007a783          	lw	a5,0(a5)
80011304:	00000693          	li	a3,0
80011308:	00000613          	li	a2,0
8001130c:	00016597          	auipc	a1,0x16
80011310:	a9058593          	addi	a1,a1,-1392 # 80026d9c <raise+0x11a8>
80011314:	00078513          	mv	a0,a5
80011318:	76d010ef          	jal	ra,80013284 <rt_sem_init>
    finsh_set_prompt_mode(1);
8001131c:	00100513          	li	a0,1
80011320:	e91fe0ef          	jal	ra,800101b0 <finsh_set_prompt_mode>

    if (tid != NULL && result == RT_EOK)
80011324:	fe842783          	lw	a5,-24(s0)
80011328:	00078a63          	beqz	a5,8001133c <finsh_system_init+0xd4>
8001132c:	fec42783          	lw	a5,-20(s0)
80011330:	00079663          	bnez	a5,8001133c <finsh_system_init+0xd4>
        rt_thread_startup(tid);
80011334:	fe842503          	lw	a0,-24(s0)
80011338:	4b0060ef          	jal	ra,800177e8 <rt_thread_startup>
    return 0;
8001133c:	00000793          	li	a5,0
}
80011340:	00078513          	mv	a0,a5
80011344:	01c12083          	lw	ra,28(sp)
80011348:	01812403          	lw	s0,24(sp)
8001134c:	02010113          	addi	sp,sp,32
80011350:	00008067          	ret

80011354 <__rt_libc_exit>:
#define DBG_TAG    "stdlib"
#define DBG_LVL    DBG_INFO
#include <rtdbg.h>

void __rt_libc_exit(int status)
{
80011354:	fd010113          	addi	sp,sp,-48
80011358:	02112623          	sw	ra,44(sp)
8001135c:	02812423          	sw	s0,40(sp)
80011360:	03010413          	addi	s0,sp,48
80011364:	fca42e23          	sw	a0,-36(s0)
    rt_thread_t self = rt_thread_self();
80011368:	458060ef          	jal	ra,800177c0 <rt_thread_self>
8001136c:	fea42623          	sw	a0,-20(s0)

    if (self != RT_NULL)
80011370:	fec42783          	lw	a5,-20(s0)
80011374:	00078a63          	beqz	a5,80011388 <__rt_libc_exit+0x34>
            pthread_exit((void *)status);
        }
        else
#endif
        {
            rt_thread_control(self, RT_THREAD_CTRL_CLOSE, RT_NULL);
80011378:	00000613          	li	a2,0
8001137c:	00100593          	li	a1,1
80011380:	fec42503          	lw	a0,-20(s0)
80011384:	6ac060ef          	jal	ra,80017a30 <rt_thread_control>
        }
    }
}
80011388:	00000013          	nop
8001138c:	02c12083          	lw	ra,44(sp)
80011390:	02812403          	lw	s0,40(sp)
80011394:	03010113          	addi	sp,sp,48
80011398:	00008067          	ret

8001139c <strnlen>:
    }
    return (*end == ch) ? (end) : (NULL);
}

size_t strnlen(const char *s, size_t maxlen)
{
8001139c:	fd010113          	addi	sp,sp,-48
800113a0:	02812623          	sw	s0,44(sp)
800113a4:	03010413          	addi	s0,sp,48
800113a8:	fca42e23          	sw	a0,-36(s0)
800113ac:	fcb42c23          	sw	a1,-40(s0)
    const char *sc;
    for (sc = s; maxlen != 0 && *sc != '\0'; maxlen--, ++sc);
800113b0:	fdc42783          	lw	a5,-36(s0)
800113b4:	fef42623          	sw	a5,-20(s0)
800113b8:	01c0006f          	j	800113d4 <strnlen+0x38>
800113bc:	fd842783          	lw	a5,-40(s0)
800113c0:	fff78793          	addi	a5,a5,-1
800113c4:	fcf42c23          	sw	a5,-40(s0)
800113c8:	fec42783          	lw	a5,-20(s0)
800113cc:	00178793          	addi	a5,a5,1
800113d0:	fef42623          	sw	a5,-20(s0)
800113d4:	fd842783          	lw	a5,-40(s0)
800113d8:	00078863          	beqz	a5,800113e8 <strnlen+0x4c>
800113dc:	fec42783          	lw	a5,-20(s0)
800113e0:	0007c783          	lbu	a5,0(a5)
800113e4:	fc079ce3          	bnez	a5,800113bc <strnlen+0x20>
    return sc - s;
800113e8:	fec42703          	lw	a4,-20(s0)
800113ec:	fdc42783          	lw	a5,-36(s0)
800113f0:	40f707b3          	sub	a5,a4,a5
}
800113f4:	00078513          	mv	a0,a5
800113f8:	02c12403          	lw	s0,44(sp)
800113fc:	03010113          	addi	sp,sp,48
80011400:	00008067          	ret

80011404 <clock>:
    }
}
RTM_EXPORT(time);

RT_WEAK clock_t clock(void)
{
80011404:	ff010113          	addi	sp,sp,-16
80011408:	00112623          	sw	ra,12(sp)
8001140c:	00812423          	sw	s0,8(sp)
80011410:	01010413          	addi	s0,sp,16
    return rt_tick_get();
80011414:	138010ef          	jal	ra,8001254c <rt_tick_get>
80011418:	00050793          	mv	a5,a0
}
8001141c:	00078513          	mv	a0,a5
80011420:	00c12083          	lw	ra,12(sp)
80011424:	00812403          	lw	s0,8(sp)
80011428:	01010113          	addi	sp,sp,16
8001142c:	00008067          	ret

80011430 <_malloc_r>:
#define DBG_LVL    DBG_INFO
#include <rtdbg.h>

#ifdef RT_USING_HEAP /* Memory routine */
void *_malloc_r(struct _reent *ptr, size_t size)
{
80011430:	fd010113          	addi	sp,sp,-48
80011434:	02112623          	sw	ra,44(sp)
80011438:	02812423          	sw	s0,40(sp)
8001143c:	03010413          	addi	s0,sp,48
80011440:	fca42e23          	sw	a0,-36(s0)
80011444:	fcb42c23          	sw	a1,-40(s0)
    void* result;

    result = (void*)rt_malloc(size);
80011448:	fd842503          	lw	a0,-40(s0)
8001144c:	080040ef          	jal	ra,800154cc <rt_malloc>
80011450:	fea42623          	sw	a0,-20(s0)
    if (result == RT_NULL)
80011454:	fec42783          	lw	a5,-20(s0)
80011458:	00079863          	bnez	a5,80011468 <_malloc_r+0x38>
    {
        ptr->_errno = ENOMEM;
8001145c:	fdc42783          	lw	a5,-36(s0)
80011460:	00c00713          	li	a4,12
80011464:	00e7a023          	sw	a4,0(a5)
    }

    return result;
80011468:	fec42783          	lw	a5,-20(s0)
}
8001146c:	00078513          	mv	a0,a5
80011470:	02c12083          	lw	ra,44(sp)
80011474:	02812403          	lw	s0,40(sp)
80011478:	03010113          	addi	sp,sp,48
8001147c:	00008067          	ret

80011480 <_realloc_r>:

void *_realloc_r(struct _reent *ptr, void *old, size_t newlen)
{
80011480:	fd010113          	addi	sp,sp,-48
80011484:	02112623          	sw	ra,44(sp)
80011488:	02812423          	sw	s0,40(sp)
8001148c:	03010413          	addi	s0,sp,48
80011490:	fca42e23          	sw	a0,-36(s0)
80011494:	fcb42c23          	sw	a1,-40(s0)
80011498:	fcc42a23          	sw	a2,-44(s0)
    void* result;

    result = (void*)rt_realloc(old, newlen);
8001149c:	fd442583          	lw	a1,-44(s0)
800114a0:	fd842503          	lw	a0,-40(s0)
800114a4:	0a8040ef          	jal	ra,8001554c <rt_realloc>
800114a8:	fea42623          	sw	a0,-20(s0)
    if (result == RT_NULL)
800114ac:	fec42783          	lw	a5,-20(s0)
800114b0:	00079863          	bnez	a5,800114c0 <_realloc_r+0x40>
    {
        ptr->_errno = ENOMEM;
800114b4:	fdc42783          	lw	a5,-36(s0)
800114b8:	00c00713          	li	a4,12
800114bc:	00e7a023          	sw	a4,0(a5)
    }

    return result;
800114c0:	fec42783          	lw	a5,-20(s0)
}
800114c4:	00078513          	mv	a0,a5
800114c8:	02c12083          	lw	ra,44(sp)
800114cc:	02812403          	lw	s0,40(sp)
800114d0:	03010113          	addi	sp,sp,48
800114d4:	00008067          	ret

800114d8 <_calloc_r>:

void *_calloc_r(struct _reent *ptr, size_t size, size_t len)
{
800114d8:	fd010113          	addi	sp,sp,-48
800114dc:	02112623          	sw	ra,44(sp)
800114e0:	02812423          	sw	s0,40(sp)
800114e4:	03010413          	addi	s0,sp,48
800114e8:	fca42e23          	sw	a0,-36(s0)
800114ec:	fcb42c23          	sw	a1,-40(s0)
800114f0:	fcc42a23          	sw	a2,-44(s0)
    void* result;

    result = (void*)rt_calloc(size, len);
800114f4:	fd442583          	lw	a1,-44(s0)
800114f8:	fd842503          	lw	a0,-40(s0)
800114fc:	0b0040ef          	jal	ra,800155ac <rt_calloc>
80011500:	fea42623          	sw	a0,-20(s0)
    if (result == RT_NULL)
80011504:	fec42783          	lw	a5,-20(s0)
80011508:	00079863          	bnez	a5,80011518 <_calloc_r+0x40>
    {
        ptr->_errno = ENOMEM;
8001150c:	fdc42783          	lw	a5,-36(s0)
80011510:	00c00713          	li	a4,12
80011514:	00e7a023          	sw	a4,0(a5)
    }

    return result;
80011518:	fec42783          	lw	a5,-20(s0)
}
8001151c:	00078513          	mv	a0,a5
80011520:	02c12083          	lw	ra,44(sp)
80011524:	02812403          	lw	s0,40(sp)
80011528:	03010113          	addi	sp,sp,48
8001152c:	00008067          	ret

80011530 <_free_r>:

void _free_r(struct _reent *ptr, void *addr)
{
80011530:	fe010113          	addi	sp,sp,-32
80011534:	00112e23          	sw	ra,28(sp)
80011538:	00812c23          	sw	s0,24(sp)
8001153c:	02010413          	addi	s0,sp,32
80011540:	fea42623          	sw	a0,-20(s0)
80011544:	feb42423          	sw	a1,-24(s0)
    rt_free(addr);
80011548:	fe842503          	lw	a0,-24(s0)
8001154c:	0cc040ef          	jal	ra,80015618 <rt_free>
}
80011550:	00000013          	nop
80011554:	01c12083          	lw	ra,28(sp)
80011558:	01812403          	lw	s0,24(sp)
8001155c:	02010113          	addi	sp,sp,32
80011560:	00008067          	ret

80011564 <__errno>:
}

/* Reentrant versions of system calls.  */
#ifndef _REENT_ONLY
int *__errno(void)
{
80011564:	ff010113          	addi	sp,sp,-16
80011568:	00112623          	sw	ra,12(sp)
8001156c:	00812423          	sw	s0,8(sp)
80011570:	01010413          	addi	s0,sp,16
  return _rt_errno();
80011574:	6b8020ef          	jal	ra,80013c2c <_rt_errno>
80011578:	00050793          	mv	a5,a0
}
8001157c:	00078513          	mv	a0,a5
80011580:	00c12083          	lw	ra,12(sp)
80011584:	00812403          	lw	s0,8(sp)
80011588:	01010113          	addi	sp,sp,16
8001158c:	00008067          	ret

80011590 <_getpid_r>:
#endif

int _getpid_r(struct _reent *ptr)
{
80011590:	fe010113          	addi	sp,sp,-32
80011594:	00812e23          	sw	s0,28(sp)
80011598:	02010413          	addi	s0,sp,32
8001159c:	fea42623          	sw	a0,-20(s0)
    return 0;
800115a0:	00000793          	li	a5,0
}
800115a4:	00078513          	mv	a0,a5
800115a8:	01c12403          	lw	s0,28(sp)
800115ac:	02010113          	addi	sp,sp,32
800115b0:	00008067          	ret

800115b4 <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
800115b4:	fe010113          	addi	sp,sp,-32
800115b8:	00112e23          	sw	ra,28(sp)
800115bc:	00812c23          	sw	s0,24(sp)
800115c0:	02010413          	addi	s0,sp,32
800115c4:	fea42623          	sw	a0,-20(s0)
800115c8:	feb42423          	sw	a1,-24(s0)
#ifdef DFS_USING_POSIX
    return close(fd);
800115cc:	fe842503          	lw	a0,-24(s0)
800115d0:	850f80ef          	jal	ra,80009620 <close>
800115d4:	00050793          	mv	a5,a0
#else
    LOG_W("%s: %s", __func__, _WARNING_WITHOUT_FS);
    ptr->_errno = ENOTSUP;
    return -1;
#endif /* DFS_USING_POSIX */
}
800115d8:	00078513          	mv	a0,a5
800115dc:	01c12083          	lw	ra,28(sp)
800115e0:	01812403          	lw	s0,24(sp)
800115e4:	02010113          	addi	sp,sp,32
800115e8:	00008067          	ret

800115ec <_fstat_r>:
    ptr->_errno = ENOTSUP;
    return -1;
}

int _fstat_r(struct _reent *ptr, int fd, struct stat *pstat)
{
800115ec:	fe010113          	addi	sp,sp,-32
800115f0:	00812e23          	sw	s0,28(sp)
800115f4:	02010413          	addi	s0,sp,32
800115f8:	fea42623          	sw	a0,-20(s0)
800115fc:	feb42423          	sw	a1,-24(s0)
80011600:	fec42223          	sw	a2,-28(s0)
    ptr->_errno = ENOTSUP;
80011604:	fec42783          	lw	a5,-20(s0)
80011608:	08600713          	li	a4,134
8001160c:	00e7a023          	sw	a4,0(a5)
    return -1;
80011610:	fff00793          	li	a5,-1
}
80011614:	00078513          	mv	a0,a5
80011618:	01c12403          	lw	s0,28(sp)
8001161c:	02010113          	addi	sp,sp,32
80011620:	00008067          	ret

80011624 <_isatty_r>:

int _isatty_r(struct _reent *ptr, int fd)
{
80011624:	fe010113          	addi	sp,sp,-32
80011628:	00812e23          	sw	s0,28(sp)
8001162c:	02010413          	addi	s0,sp,32
80011630:	fea42623          	sw	a0,-20(s0)
80011634:	feb42423          	sw	a1,-24(s0)
    if (fd >=0 && fd < 3)
80011638:	fe842783          	lw	a5,-24(s0)
8001163c:	0007cc63          	bltz	a5,80011654 <_isatty_r+0x30>
80011640:	fe842703          	lw	a4,-24(s0)
80011644:	00200793          	li	a5,2
80011648:	00e7c663          	blt	a5,a4,80011654 <_isatty_r+0x30>
    {
        return 1;
8001164c:	00100793          	li	a5,1
80011650:	0080006f          	j	80011658 <_isatty_r+0x34>
    }
    else
    {
        return 0;
80011654:	00000793          	li	a5,0
    }
}
80011658:	00078513          	mv	a0,a5
8001165c:	01c12403          	lw	s0,28(sp)
80011660:	02010113          	addi	sp,sp,32
80011664:	00008067          	ret

80011668 <_kill_r>:

int _kill_r(struct _reent *ptr, int pid, int sig)
{
80011668:	fe010113          	addi	sp,sp,-32
8001166c:	00812e23          	sw	s0,28(sp)
80011670:	02010413          	addi	s0,sp,32
80011674:	fea42623          	sw	a0,-20(s0)
80011678:	feb42423          	sw	a1,-24(s0)
8001167c:	fec42223          	sw	a2,-28(s0)
    ptr->_errno = ENOTSUP;
80011680:	fec42783          	lw	a5,-20(s0)
80011684:	08600713          	li	a4,134
80011688:	00e7a023          	sw	a4,0(a5)
    return -1;
8001168c:	fff00793          	li	a5,-1
}
80011690:	00078513          	mv	a0,a5
80011694:	01c12403          	lw	s0,28(sp)
80011698:	02010113          	addi	sp,sp,32
8001169c:	00008067          	ret

800116a0 <_lseek_r>:
{
    return 0;
}

_off_t _lseek_r(struct _reent *ptr, int fd, _off_t pos, int whence)
{
800116a0:	fd010113          	addi	sp,sp,-48
800116a4:	02112623          	sw	ra,44(sp)
800116a8:	02812423          	sw	s0,40(sp)
800116ac:	03010413          	addi	s0,sp,48
800116b0:	fca42e23          	sw	a0,-36(s0)
800116b4:	fcb42c23          	sw	a1,-40(s0)
800116b8:	fcc42a23          	sw	a2,-44(s0)
800116bc:	fcd42823          	sw	a3,-48(s0)
#ifdef DFS_USING_POSIX
    _off_t rc;
    rc = lseek(fd, pos, whence);
800116c0:	fd042603          	lw	a2,-48(s0)
800116c4:	fd442583          	lw	a1,-44(s0)
800116c8:	fd842503          	lw	a0,-40(s0)
800116cc:	900f80ef          	jal	ra,800097cc <lseek>
800116d0:	fea42623          	sw	a0,-20(s0)
    return rc;
800116d4:	fec42783          	lw	a5,-20(s0)
#else
    LOG_W("%s: %s", __func__, _WARNING_WITHOUT_FS);
    ptr->_errno = ENOTSUP;
    return -1;
#endif /* DFS_USING_POSIX */
}
800116d8:	00078513          	mv	a0,a5
800116dc:	02c12083          	lw	ra,44(sp)
800116e0:	02812403          	lw	s0,40(sp)
800116e4:	03010113          	addi	sp,sp,48
800116e8:	00008067          	ret

800116ec <_read_r>:
    return -1;
#endif /* DFS_USING_POSIX */
}

_ssize_t _read_r(struct _reent *ptr, int fd, void *buf, size_t nbytes)
{
800116ec:	fd010113          	addi	sp,sp,-48
800116f0:	02112623          	sw	ra,44(sp)
800116f4:	02812423          	sw	s0,40(sp)
800116f8:	03010413          	addi	s0,sp,48
800116fc:	fca42e23          	sw	a0,-36(s0)
80011700:	fcb42c23          	sw	a1,-40(s0)
80011704:	fcc42a23          	sw	a2,-44(s0)
80011708:	fcd42823          	sw	a3,-48(s0)
#ifdef DFS_USING_POSIX
    _ssize_t rc;
    if (fd == STDIN_FILENO)
8001170c:	fd842783          	lw	a5,-40(s0)
80011710:	00079c63          	bnez	a5,80011728 <_read_r+0x3c>
            LOG_W("Do not invoke standard input before initializing Compiler");
            return 0;
        }
#else
        LOG_W("%s: %s", __func__, _WARNING_WITHOUT_STDIO);
        ptr->_errno = ENOTSUP;
80011714:	fdc42783          	lw	a5,-36(s0)
80011718:	08600713          	li	a4,134
8001171c:	00e7a023          	sw	a4,0(a5)
        return -1;
80011720:	fff00793          	li	a5,-1
80011724:	0480006f          	j	8001176c <_read_r+0x80>
#endif /* RT_USING_POSIX_STDIO */
    }
    else if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80011728:	fd842703          	lw	a4,-40(s0)
8001172c:	00100793          	li	a5,1
80011730:	00f70863          	beq	a4,a5,80011740 <_read_r+0x54>
80011734:	fd842703          	lw	a4,-40(s0)
80011738:	00200793          	li	a5,2
8001173c:	00f71c63          	bne	a4,a5,80011754 <_read_r+0x68>
    {
        ptr->_errno = ENOTSUP;
80011740:	fdc42783          	lw	a5,-36(s0)
80011744:	08600713          	li	a4,134
80011748:	00e7a023          	sw	a4,0(a5)
        return -1;
8001174c:	fff00793          	li	a5,-1
80011750:	01c0006f          	j	8001176c <_read_r+0x80>
    }

    rc = read(fd, buf, nbytes);
80011754:	fd042603          	lw	a2,-48(s0)
80011758:	fd442583          	lw	a1,-44(s0)
8001175c:	fd842503          	lw	a0,-40(s0)
80011760:	f45f70ef          	jal	ra,800096a4 <read>
80011764:	fea42623          	sw	a0,-20(s0)
    return rc;
80011768:	fec42783          	lw	a5,-20(s0)
#else
    LOG_W("%s: %s", __func__, _WARNING_WITHOUT_FS);
    ptr->_errno = ENOTSUP;
    return -1;
#endif /* DFS_USING_POSIX */
}
8001176c:	00078513          	mv	a0,a5
80011770:	02c12083          	lw	ra,44(sp)
80011774:	02812403          	lw	s0,40(sp)
80011778:	03010113          	addi	sp,sp,48
8001177c:	00008067          	ret

80011780 <_write_r>:
    return -1;
#endif /* DFS_USING_POSIX */
}

_ssize_t _write_r(struct _reent *ptr, int fd, const void *buf, size_t nbytes)
{
80011780:	fd010113          	addi	sp,sp,-48
80011784:	02112623          	sw	ra,44(sp)
80011788:	02812423          	sw	s0,40(sp)
8001178c:	03010413          	addi	s0,sp,48
80011790:	fca42e23          	sw	a0,-36(s0)
80011794:	fcb42c23          	sw	a1,-40(s0)
80011798:	fcc42a23          	sw	a2,-44(s0)
8001179c:	fcd42823          	sw	a3,-48(s0)
#ifdef DFS_USING_POSIX
    _ssize_t rc;
#endif /* DFS_USING_POSIX */

    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
800117a0:	fd842703          	lw	a4,-40(s0)
800117a4:	00100793          	li	a5,1
800117a8:	00f70863          	beq	a4,a5,800117b8 <_write_r+0x38>
800117ac:	fd842703          	lw	a4,-40(s0)
800117b0:	00200793          	li	a5,2
800117b4:	02f71863          	bne	a4,a5,800117e4 <_write_r+0x64>
    {
#if defined(RT_USING_CONSOLE) && defined(RT_USING_DEVICE)
        rt_device_t console;

        console = rt_console_get_device();
800117b8:	185030ef          	jal	ra,8001513c <rt_console_get_device>
800117bc:	fea42623          	sw	a0,-20(s0)
        if (console)
800117c0:	fec42783          	lw	a5,-20(s0)
800117c4:	02078e63          	beqz	a5,80011800 <_write_r+0x80>
            return rt_device_write(console, -1, buf, nbytes);
800117c8:	fd042683          	lw	a3,-48(s0)
800117cc:	fd442603          	lw	a2,-44(s0)
800117d0:	fff00593          	li	a1,-1
800117d4:	fec42503          	lw	a0,-20(s0)
800117d8:	400010ef          	jal	ra,80012bd8 <rt_device_write>
800117dc:	00050793          	mv	a5,a0
800117e0:	03c0006f          	j	8001181c <_write_r+0x9c>
#else
        ptr->_errno = ENOTSUP;
        return -1;
#endif /* defined(RT_USING_CONSOLE) && defined(RT_USING_DEVICE) */
    }
    else if (fd == STDIN_FILENO)
800117e4:	fd842783          	lw	a5,-40(s0)
800117e8:	00079e63          	bnez	a5,80011804 <_write_r+0x84>
    {
        ptr->_errno = ENOTSUP;
800117ec:	fdc42783          	lw	a5,-36(s0)
800117f0:	08600713          	li	a4,134
800117f4:	00e7a023          	sw	a4,0(a5)
        return -1;
800117f8:	fff00793          	li	a5,-1
800117fc:	0200006f          	j	8001181c <_write_r+0x9c>
    {
80011800:	00000013          	nop
    }

#ifdef DFS_USING_POSIX
    rc = write(fd, buf, nbytes);
80011804:	fd042603          	lw	a2,-48(s0)
80011808:	fd442583          	lw	a1,-44(s0)
8001180c:	fd842503          	lw	a0,-40(s0)
80011810:	f29f70ef          	jal	ra,80009738 <write>
80011814:	fea42423          	sw	a0,-24(s0)
    return rc;
80011818:	fe842783          	lw	a5,-24(s0)
#else
    LOG_W("%s: %s", __func__, _WARNING_WITHOUT_FS);
    ptr->_errno = ENOTSUP;
    return -1;
#endif /* DFS_USING_POSIX */
}
8001181c:	00078513          	mv	a0,a5
80011820:	02c12083          	lw	ra,44(sp)
80011824:	02812403          	lw	s0,40(sp)
80011828:	03010113          	addi	sp,sp,48
8001182c:	00008067          	ret

80011830 <_exit>:

/* for exit() and abort() */
__attribute__ ((noreturn)) void _exit (int status)
{
80011830:	fe010113          	addi	sp,sp,-32
80011834:	00112e23          	sw	ra,28(sp)
80011838:	00812c23          	sw	s0,24(sp)
8001183c:	02010413          	addi	s0,sp,32
80011840:	fea42623          	sw	a0,-20(s0)
    extern void __rt_libc_exit(int status);
    __rt_libc_exit(status);
80011844:	fec42503          	lw	a0,-20(s0)
80011848:	b0dff0ef          	jal	ra,80011354 <__rt_libc_exit>
    while(1);
8001184c:	0000006f          	j	8001184c <_exit+0x1c>

80011850 <rt_hw_stack_init>:
 */
rt_uint8_t *rt_hw_stack_init(void       *tentry,
                             void       *parameter,
                             rt_uint8_t *stack_addr,
                             void       *texit)
{
80011850:	fd010113          	addi	sp,sp,-48
80011854:	02812623          	sw	s0,44(sp)
80011858:	03010413          	addi	s0,sp,48
8001185c:	fca42e23          	sw	a0,-36(s0)
80011860:	fcb42c23          	sw	a1,-40(s0)
80011864:	fcc42a23          	sw	a2,-44(s0)
80011868:	fcd42823          	sw	a3,-48(s0)
    struct rt_hw_stack_frame *frame;
    rt_uint8_t         *stk;
    int                i;
    extern int __global_pointer$;

    stk  = stack_addr + sizeof(rt_ubase_t);
8001186c:	fd442783          	lw	a5,-44(s0)
80011870:	00478793          	addi	a5,a5,4
80011874:	fef42423          	sw	a5,-24(s0)
    stk  = (rt_uint8_t *)RT_ALIGN_DOWN((rt_ubase_t)stk, REGBYTES);
80011878:	fe842783          	lw	a5,-24(s0)
8001187c:	ffc7f793          	andi	a5,a5,-4
80011880:	fef42423          	sw	a5,-24(s0)
    stk -= sizeof(struct rt_hw_stack_frame);
80011884:	fe842783          	lw	a5,-24(s0)
80011888:	f7c78793          	addi	a5,a5,-132
8001188c:	fef42423          	sw	a5,-24(s0)

    frame = (struct rt_hw_stack_frame *)stk;
80011890:	fe842783          	lw	a5,-24(s0)
80011894:	fef42223          	sw	a5,-28(s0)

    for (i = 0; i < sizeof(struct rt_hw_stack_frame) / sizeof(rt_ubase_t); i++)
80011898:	fe042623          	sw	zero,-20(s0)
8001189c:	02c0006f          	j	800118c8 <rt_hw_stack_init+0x78>
    {
        ((rt_ubase_t *)frame)[i] = 0xdeadbeef;
800118a0:	fec42783          	lw	a5,-20(s0)
800118a4:	00279793          	slli	a5,a5,0x2
800118a8:	fe442703          	lw	a4,-28(s0)
800118ac:	00f707b3          	add	a5,a4,a5
800118b0:	deadc737          	lui	a4,0xdeadc
800118b4:	eef70713          	addi	a4,a4,-273 # deadbeef <__bss_end+0x5ea55733>
800118b8:	00e7a023          	sw	a4,0(a5)
    for (i = 0; i < sizeof(struct rt_hw_stack_frame) / sizeof(rt_ubase_t); i++)
800118bc:	fec42783          	lw	a5,-20(s0)
800118c0:	00178793          	addi	a5,a5,1
800118c4:	fef42623          	sw	a5,-20(s0)
800118c8:	fec42703          	lw	a4,-20(s0)
800118cc:	02000793          	li	a5,32
800118d0:	fce7f8e3          	bgeu	a5,a4,800118a0 <rt_hw_stack_init+0x50>
    }

    frame->ra      = (rt_ubase_t)texit;
800118d4:	fd042703          	lw	a4,-48(s0)
800118d8:	fe442783          	lw	a5,-28(s0)
800118dc:	00e7a223          	sw	a4,4(a5)
    frame->gp      = (rt_ubase_t)&__global_pointer$;
800118e0:	00018713          	mv	a4,gp
800118e4:	fe442783          	lw	a5,-28(s0)
800118e8:	00e7a623          	sw	a4,12(a5)
    frame->a0      = (rt_ubase_t)parameter;
800118ec:	fd842703          	lw	a4,-40(s0)
800118f0:	fe442783          	lw	a5,-28(s0)
800118f4:	02e7a423          	sw	a4,40(a5)
    frame->epc     = (rt_ubase_t)tentry;
800118f8:	fdc42703          	lw	a4,-36(s0)
800118fc:	fe442783          	lw	a5,-28(s0)
80011900:	00e7a023          	sw	a4,0(a5)
    frame->user_sp_exc_stack = (rt_ubase_t)(((rt_ubase_t)stk) + sizeof(struct rt_hw_stack_frame));
80011904:	fe842783          	lw	a5,-24(s0)
80011908:	08478713          	addi	a4,a5,132
8001190c:	fe442783          	lw	a5,-28(s0)
80011910:	08e7a023          	sw	a4,128(a5)

    frame->xstatus = 0x00007880;
80011914:	fe442783          	lw	a5,-28(s0)
80011918:	00008737          	lui	a4,0x8
8001191c:	88070713          	addi	a4,a4,-1920 # 7880 <__STACKSIZE__+0x3880>
80011920:	00e7a423          	sw	a4,8(a5)

    return stk;
80011924:	fe842783          	lw	a5,-24(s0)
}
80011928:	00078513          	mv	a0,a5
8001192c:	02c12403          	lw	s0,44(sp)
80011930:	03010113          	addi	sp,sp,48
80011934:	00008067          	ret

80011938 <rt_hw_context_switch_interrupt>:
 * void rt_hw_context_switch_interrupt(rt_ubase_t from, rt_ubase_t to);
 * #endif
 */
#ifndef RT_USING_SMP
void rt_hw_context_switch_interrupt(rt_ubase_t from, rt_ubase_t to)
{
80011938:	fe010113          	addi	sp,sp,-32
8001193c:	00812e23          	sw	s0,28(sp)
80011940:	02010413          	addi	s0,sp,32
80011944:	fea42623          	sw	a0,-20(s0)
80011948:	feb42423          	sw	a1,-24(s0)
    if (rt_thread_switch_interrupt_flag == 0)
8001194c:	00072797          	auipc	a5,0x72
80011950:	6e478793          	addi	a5,a5,1764 # 80084030 <rt_thread_switch_interrupt_flag>
80011954:	0007a783          	lw	a5,0(a5)
80011958:	00079a63          	bnez	a5,8001196c <rt_hw_context_switch_interrupt+0x34>
        rt_interrupt_from_thread = from;
8001195c:	00072797          	auipc	a5,0x72
80011960:	6cc78793          	addi	a5,a5,1740 # 80084028 <rt_interrupt_from_thread>
80011964:	fec42703          	lw	a4,-20(s0)
80011968:	00e7a023          	sw	a4,0(a5)

    rt_interrupt_to_thread = to;
8001196c:	00072797          	auipc	a5,0x72
80011970:	6c078793          	addi	a5,a5,1728 # 8008402c <rt_interrupt_to_thread>
80011974:	fe842703          	lw	a4,-24(s0)
80011978:	00e7a023          	sw	a4,0(a5)
    rt_thread_switch_interrupt_flag = 1;
8001197c:	00072797          	auipc	a5,0x72
80011980:	6b478793          	addi	a5,a5,1716 # 80084030 <rt_thread_switch_interrupt_flag>
80011984:	00100713          	li	a4,1
80011988:	00e7a023          	sw	a4,0(a5)

    return ;
8001198c:	00000013          	nop
}
80011990:	01c12403          	lw	s0,28(sp)
80011994:	02010113          	addi	sp,sp,32
80011998:	00008067          	ret

8001199c <rt_hw_interrupt_handle>:
#define MAX_HANDLERS   128 

static struct rt_irq_desc irq_desc[MAX_HANDLERS];

static rt_isr_handler_t rt_hw_interrupt_handle(rt_uint32_t vector, void *param)
{
8001199c:	fe010113          	addi	sp,sp,-32
800119a0:	00112e23          	sw	ra,28(sp)
800119a4:	00812c23          	sw	s0,24(sp)
800119a8:	02010413          	addi	s0,sp,32
800119ac:	fea42623          	sw	a0,-20(s0)
800119b0:	feb42423          	sw	a1,-24(s0)
    rt_kprintf("UN-handled interrupt %d occurred!!!\n", vector);
800119b4:	fec42583          	lw	a1,-20(s0)
800119b8:	00015517          	auipc	a0,0x15
800119bc:	3ec50513          	addi	a0,a0,1004 # 80026da4 <raise+0x11b0>
800119c0:	069030ef          	jal	ra,80015228 <rt_kprintf>
    return RT_NULL;
800119c4:	00000793          	li	a5,0
}
800119c8:	00078513          	mv	a0,a5
800119cc:	01c12083          	lw	ra,28(sp)
800119d0:	01812403          	lw	s0,24(sp)
800119d4:	02010113          	addi	sp,sp,32
800119d8:	00008067          	ret

800119dc <rt_hw_plic_irq_enable>:
    clear_csr(mie, MIP_MSIP);
    return 0;
}

int rt_hw_plic_irq_enable(int irq_number)
{
800119dc:	fe010113          	addi	sp,sp,-32
800119e0:	00112e23          	sw	ra,28(sp)
800119e4:	00812c23          	sw	s0,24(sp)
800119e8:	02010413          	addi	s0,sp,32
800119ec:	fea42623          	sw	a0,-20(s0)
    plic_irq_enable(irq_number);
800119f0:	fec42503          	lw	a0,-20(s0)
800119f4:	1210a0ef          	jal	ra,8001c314 <plic_irq_enable>
    return 0;
800119f8:	00000793          	li	a5,0
}
800119fc:	00078513          	mv	a0,a5
80011a00:	01c12083          	lw	ra,28(sp)
80011a04:	01812403          	lw	s0,24(sp)
80011a08:	02010113          	addi	sp,sp,32
80011a0c:	00008067          	ret

80011a10 <rt_hw_interrupt_init>:

/**
 * This function will initialize hardware interrupt
 */
void rt_hw_interrupt_init(void)
{
80011a10:	fe010113          	addi	sp,sp,-32
80011a14:	00112e23          	sw	ra,28(sp)
80011a18:	00812c23          	sw	s0,24(sp)
80011a1c:	02010413          	addi	s0,sp,32
    int idx = 0;
80011a20:	fe042623          	sw	zero,-20(s0)
    /* init exceptions table */
    for (idx = 0; idx < MAX_HANDLERS; idx++)
80011a24:	fe042623          	sw	zero,-20(s0)
80011a28:	08c0006f          	j	80011ab4 <rt_hw_interrupt_init+0xa4>
    {
        irq_desc[idx].handler = (rt_isr_handler_t)rt_hw_interrupt_handle;
80011a2c:	00073717          	auipc	a4,0x73
80011a30:	91c70713          	addi	a4,a4,-1764 # 80084348 <irq_desc>
80011a34:	fec42783          	lw	a5,-20(s0)
80011a38:	00579793          	slli	a5,a5,0x5
80011a3c:	00f707b3          	add	a5,a4,a5
80011a40:	00000717          	auipc	a4,0x0
80011a44:	f5c70713          	addi	a4,a4,-164 # 8001199c <rt_hw_interrupt_handle>
80011a48:	00e7a023          	sw	a4,0(a5)
        irq_desc[idx].param = RT_NULL;
80011a4c:	00073717          	auipc	a4,0x73
80011a50:	8fc70713          	addi	a4,a4,-1796 # 80084348 <irq_desc>
80011a54:	fec42783          	lw	a5,-20(s0)
80011a58:	00579793          	slli	a5,a5,0x5
80011a5c:	00f707b3          	add	a5,a4,a5
80011a60:	0007a223          	sw	zero,4(a5)
#ifdef RT_USING_INTERRUPT_INFO
        rt_snprintf(irq_desc[idx].name, RT_NAME_MAX - 1, "default");
80011a64:	fec42783          	lw	a5,-20(s0)
80011a68:	00579713          	slli	a4,a5,0x5
80011a6c:	00073797          	auipc	a5,0x73
80011a70:	8dc78793          	addi	a5,a5,-1828 # 80084348 <irq_desc>
80011a74:	00f707b3          	add	a5,a4,a5
80011a78:	00878793          	addi	a5,a5,8
80011a7c:	00015617          	auipc	a2,0x15
80011a80:	35060613          	addi	a2,a2,848 # 80026dcc <raise+0x11d8>
80011a84:	01300593          	li	a1,19
80011a88:	00078513          	mv	a0,a5
80011a8c:	57c030ef          	jal	ra,80015008 <rt_snprintf>
        irq_desc[idx].counter = 0;
80011a90:	00073717          	auipc	a4,0x73
80011a94:	8b870713          	addi	a4,a4,-1864 # 80084348 <irq_desc>
80011a98:	fec42783          	lw	a5,-20(s0)
80011a9c:	00579793          	slli	a5,a5,0x5
80011aa0:	00f707b3          	add	a5,a4,a5
80011aa4:	0007ae23          	sw	zero,28(a5)
    for (idx = 0; idx < MAX_HANDLERS; idx++)
80011aa8:	fec42783          	lw	a5,-20(s0)
80011aac:	00178793          	addi	a5,a5,1
80011ab0:	fef42623          	sw	a5,-20(s0)
80011ab4:	fec42703          	lw	a4,-20(s0)
80011ab8:	07f00793          	li	a5,127
80011abc:	f6e7d8e3          	bge	a5,a4,80011a2c <rt_hw_interrupt_init+0x1c>
#endif
    }

    plic_set_threshold(0);
80011ac0:	00000513          	li	a0,0
80011ac4:	0e90a0ef          	jal	ra,8001c3ac <plic_set_threshold>
}
80011ac8:	00000013          	nop
80011acc:	01c12083          	lw	ra,28(sp)
80011ad0:	01812403          	lw	s0,24(sp)
80011ad4:	02010113          	addi	sp,sp,32
80011ad8:	00008067          	ret

80011adc <rt_hw_interrupt_umask>:
/**
 * This function will un-mask a interrupt.
 * @param vector the interrupt number
 */
void rt_hw_interrupt_umask(int vector)
{
80011adc:	fe010113          	addi	sp,sp,-32
80011ae0:	00112e23          	sw	ra,28(sp)
80011ae4:	00812c23          	sw	s0,24(sp)
80011ae8:	02010413          	addi	s0,sp,32
80011aec:	fea42623          	sw	a0,-20(s0)
    plic_set_priority(vector, 1);
80011af0:	00100593          	li	a1,1
80011af4:	fec42503          	lw	a0,-20(s0)
80011af8:	7dc0a0ef          	jal	ra,8001c2d4 <plic_set_priority>

    rt_hw_plic_irq_enable(vector);
80011afc:	fec42503          	lw	a0,-20(s0)
80011b00:	eddff0ef          	jal	ra,800119dc <rt_hw_plic_irq_enable>
}
80011b04:	00000013          	nop
80011b08:	01c12083          	lw	ra,28(sp)
80011b0c:	01812403          	lw	s0,24(sp)
80011b10:	02010113          	addi	sp,sp,32
80011b14:	00008067          	ret

80011b18 <rt_hw_interrupt_install>:
 * @param new_handler the interrupt service routine to be installed
 * @param old_handler the old interrupt service routine
 */
rt_isr_handler_t rt_hw_interrupt_install(int vector, rt_isr_handler_t handler,
        void *param, const char *name)
{
80011b18:	fd010113          	addi	sp,sp,-48
80011b1c:	02112623          	sw	ra,44(sp)
80011b20:	02812423          	sw	s0,40(sp)
80011b24:	03010413          	addi	s0,sp,48
80011b28:	fca42e23          	sw	a0,-36(s0)
80011b2c:	fcb42c23          	sw	a1,-40(s0)
80011b30:	fcc42a23          	sw	a2,-44(s0)
80011b34:	fcd42823          	sw	a3,-48(s0)
    rt_isr_handler_t old_handler = RT_NULL;
80011b38:	fe042623          	sw	zero,-20(s0)

    if(vector < MAX_HANDLERS)
80011b3c:	fdc42703          	lw	a4,-36(s0)
80011b40:	07f00793          	li	a5,127
80011b44:	0ae7c463          	blt	a5,a4,80011bec <rt_hw_interrupt_install+0xd4>
    {
        old_handler = irq_desc[vector].handler;
80011b48:	00073717          	auipc	a4,0x73
80011b4c:	80070713          	addi	a4,a4,-2048 # 80084348 <irq_desc>
80011b50:	fdc42783          	lw	a5,-36(s0)
80011b54:	00579793          	slli	a5,a5,0x5
80011b58:	00f707b3          	add	a5,a4,a5
80011b5c:	0007a783          	lw	a5,0(a5)
80011b60:	fef42623          	sw	a5,-20(s0)
        if (handler != RT_NULL)
80011b64:	fd842783          	lw	a5,-40(s0)
80011b68:	08078263          	beqz	a5,80011bec <rt_hw_interrupt_install+0xd4>
        {
            irq_desc[vector].handler = (rt_isr_handler_t)handler;
80011b6c:	00072717          	auipc	a4,0x72
80011b70:	7dc70713          	addi	a4,a4,2012 # 80084348 <irq_desc>
80011b74:	fdc42783          	lw	a5,-36(s0)
80011b78:	00579793          	slli	a5,a5,0x5
80011b7c:	00f707b3          	add	a5,a4,a5
80011b80:	fd842703          	lw	a4,-40(s0)
80011b84:	00e7a023          	sw	a4,0(a5)
            irq_desc[vector].param = param;
80011b88:	00072717          	auipc	a4,0x72
80011b8c:	7c070713          	addi	a4,a4,1984 # 80084348 <irq_desc>
80011b90:	fdc42783          	lw	a5,-36(s0)
80011b94:	00579793          	slli	a5,a5,0x5
80011b98:	00f707b3          	add	a5,a4,a5
80011b9c:	fd442703          	lw	a4,-44(s0)
80011ba0:	00e7a223          	sw	a4,4(a5)
#ifdef RT_USING_INTERRUPT_INFO
            rt_snprintf(irq_desc[vector].name, RT_NAME_MAX - 1, "%s", name);
80011ba4:	fdc42783          	lw	a5,-36(s0)
80011ba8:	00579713          	slli	a4,a5,0x5
80011bac:	00072797          	auipc	a5,0x72
80011bb0:	79c78793          	addi	a5,a5,1948 # 80084348 <irq_desc>
80011bb4:	00f707b3          	add	a5,a4,a5
80011bb8:	00878793          	addi	a5,a5,8
80011bbc:	fd042683          	lw	a3,-48(s0)
80011bc0:	00015617          	auipc	a2,0x15
80011bc4:	21460613          	addi	a2,a2,532 # 80026dd4 <raise+0x11e0>
80011bc8:	01300593          	li	a1,19
80011bcc:	00078513          	mv	a0,a5
80011bd0:	438030ef          	jal	ra,80015008 <rt_snprintf>
            irq_desc[vector].counter = 0;
80011bd4:	00072717          	auipc	a4,0x72
80011bd8:	77470713          	addi	a4,a4,1908 # 80084348 <irq_desc>
80011bdc:	fdc42783          	lw	a5,-36(s0)
80011be0:	00579793          	slli	a5,a5,0x5
80011be4:	00f707b3          	add	a5,a4,a5
80011be8:	0007ae23          	sw	zero,28(a5)
#endif
        }
    }

    return old_handler;
80011bec:	fec42783          	lw	a5,-20(s0)
}
80011bf0:	00078513          	mv	a0,a5
80011bf4:	02c12083          	lw	ra,44(sp)
80011bf8:	02812403          	lw	s0,40(sp)
80011bfc:	03010113          	addi	sp,sp,48
80011c00:	00008067          	ret

80011c04 <dump_regs>:
    rt_kprintf("UN-handled interrupt %d occurred!!!\n", irq);
    return ;
}

void dump_regs(struct rt_hw_stack_frame *regs)
{
80011c04:	fd010113          	addi	sp,sp,-48
80011c08:	02112623          	sw	ra,44(sp)
80011c0c:	02812423          	sw	s0,40(sp)
80011c10:	03010413          	addi	s0,sp,48
80011c14:	fca42e23          	sw	a0,-36(s0)
    rt_kprintf("--------------Dump Registers-----------------\n");
80011c18:	00015517          	auipc	a0,0x15
80011c1c:	1c050513          	addi	a0,a0,448 # 80026dd8 <raise+0x11e4>
80011c20:	608030ef          	jal	ra,80015228 <rt_kprintf>

    rt_kprintf("Function Registers:\n");
80011c24:	00015517          	auipc	a0,0x15
80011c28:	1e450513          	addi	a0,a0,484 # 80026e08 <raise+0x1214>
80011c2c:	5fc030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\tra(x1) = 0x%p\tuser_sp = 0x%p\n",regs -> ra,regs -> user_sp_exc_stack);
80011c30:	fdc42783          	lw	a5,-36(s0)
80011c34:	0047a703          	lw	a4,4(a5)
80011c38:	fdc42783          	lw	a5,-36(s0)
80011c3c:	0807a783          	lw	a5,128(a5)
80011c40:	00078613          	mv	a2,a5
80011c44:	00070593          	mv	a1,a4
80011c48:	00015517          	auipc	a0,0x15
80011c4c:	1d850513          	addi	a0,a0,472 # 80026e20 <raise+0x122c>
80011c50:	5d8030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\tgp(x3) = 0x%p\ttp(x4) = 0x%p\n",regs -> gp,regs -> tp);
80011c54:	fdc42783          	lw	a5,-36(s0)
80011c58:	00c7a703          	lw	a4,12(a5)
80011c5c:	fdc42783          	lw	a5,-36(s0)
80011c60:	0107a783          	lw	a5,16(a5)
80011c64:	00078613          	mv	a2,a5
80011c68:	00070593          	mv	a1,a4
80011c6c:	00015517          	auipc	a0,0x15
80011c70:	1d450513          	addi	a0,a0,468 # 80026e40 <raise+0x124c>
80011c74:	5b4030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("Temporary Registers:\n");
80011c78:	00015517          	auipc	a0,0x15
80011c7c:	1e850513          	addi	a0,a0,488 # 80026e60 <raise+0x126c>
80011c80:	5a8030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\tt0(x5) = 0x%p\tt1(x6) = 0x%p\n",regs -> t0,regs -> t1);
80011c84:	fdc42783          	lw	a5,-36(s0)
80011c88:	0147a703          	lw	a4,20(a5)
80011c8c:	fdc42783          	lw	a5,-36(s0)
80011c90:	0187a783          	lw	a5,24(a5)
80011c94:	00078613          	mv	a2,a5
80011c98:	00070593          	mv	a1,a4
80011c9c:	00015517          	auipc	a0,0x15
80011ca0:	1dc50513          	addi	a0,a0,476 # 80026e78 <raise+0x1284>
80011ca4:	584030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\tt2(x7) = 0x%p\n",regs -> t2);
80011ca8:	fdc42783          	lw	a5,-36(s0)
80011cac:	01c7a783          	lw	a5,28(a5)
80011cb0:	00078593          	mv	a1,a5
80011cb4:	00015517          	auipc	a0,0x15
80011cb8:	1e450513          	addi	a0,a0,484 # 80026e98 <raise+0x12a4>
80011cbc:	56c030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\tt3(x28) = 0x%p\tt4(x29) = 0x%p\n",regs -> t3,regs -> t4);
80011cc0:	fdc42783          	lw	a5,-36(s0)
80011cc4:	0707a703          	lw	a4,112(a5)
80011cc8:	fdc42783          	lw	a5,-36(s0)
80011ccc:	0747a783          	lw	a5,116(a5)
80011cd0:	00078613          	mv	a2,a5
80011cd4:	00070593          	mv	a1,a4
80011cd8:	00015517          	auipc	a0,0x15
80011cdc:	1d050513          	addi	a0,a0,464 # 80026ea8 <raise+0x12b4>
80011ce0:	548030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\tt5(x30) = 0x%p\tt6(x31) = 0x%p\n",regs -> t5,regs -> t6);
80011ce4:	fdc42783          	lw	a5,-36(s0)
80011ce8:	0787a703          	lw	a4,120(a5)
80011cec:	fdc42783          	lw	a5,-36(s0)
80011cf0:	07c7a783          	lw	a5,124(a5)
80011cf4:	00078613          	mv	a2,a5
80011cf8:	00070593          	mv	a1,a4
80011cfc:	00015517          	auipc	a0,0x15
80011d00:	1cc50513          	addi	a0,a0,460 # 80026ec8 <raise+0x12d4>
80011d04:	524030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("Saved Registers:\n");
80011d08:	00015517          	auipc	a0,0x15
80011d0c:	1e050513          	addi	a0,a0,480 # 80026ee8 <raise+0x12f4>
80011d10:	518030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\ts0/fp(x8) = 0x%p\ts1(x9) = 0x%p\n",regs -> s0_fp,regs -> s1);
80011d14:	fdc42783          	lw	a5,-36(s0)
80011d18:	0207a703          	lw	a4,32(a5)
80011d1c:	fdc42783          	lw	a5,-36(s0)
80011d20:	0247a783          	lw	a5,36(a5)
80011d24:	00078613          	mv	a2,a5
80011d28:	00070593          	mv	a1,a4
80011d2c:	00015517          	auipc	a0,0x15
80011d30:	1d050513          	addi	a0,a0,464 # 80026efc <raise+0x1308>
80011d34:	4f4030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\ts2(x18) = 0x%p\ts3(x19) = 0x%p\n",regs -> s2,regs -> s3);
80011d38:	fdc42783          	lw	a5,-36(s0)
80011d3c:	0487a703          	lw	a4,72(a5)
80011d40:	fdc42783          	lw	a5,-36(s0)
80011d44:	04c7a783          	lw	a5,76(a5)
80011d48:	00078613          	mv	a2,a5
80011d4c:	00070593          	mv	a1,a4
80011d50:	00015517          	auipc	a0,0x15
80011d54:	1d050513          	addi	a0,a0,464 # 80026f20 <raise+0x132c>
80011d58:	4d0030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\ts4(x20) = 0x%p\ts5(x21) = 0x%p\n",regs -> s4,regs -> s5);
80011d5c:	fdc42783          	lw	a5,-36(s0)
80011d60:	0507a703          	lw	a4,80(a5)
80011d64:	fdc42783          	lw	a5,-36(s0)
80011d68:	0547a783          	lw	a5,84(a5)
80011d6c:	00078613          	mv	a2,a5
80011d70:	00070593          	mv	a1,a4
80011d74:	00015517          	auipc	a0,0x15
80011d78:	1cc50513          	addi	a0,a0,460 # 80026f40 <raise+0x134c>
80011d7c:	4ac030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\ts6(x22) = 0x%p\ts7(x23) = 0x%p\n",regs -> s6,regs -> s7);
80011d80:	fdc42783          	lw	a5,-36(s0)
80011d84:	0587a703          	lw	a4,88(a5)
80011d88:	fdc42783          	lw	a5,-36(s0)
80011d8c:	05c7a783          	lw	a5,92(a5)
80011d90:	00078613          	mv	a2,a5
80011d94:	00070593          	mv	a1,a4
80011d98:	00015517          	auipc	a0,0x15
80011d9c:	1c850513          	addi	a0,a0,456 # 80026f60 <raise+0x136c>
80011da0:	488030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\ts8(x24) = 0x%p\ts9(x25) = 0x%p\n",regs -> s8,regs -> s9);
80011da4:	fdc42783          	lw	a5,-36(s0)
80011da8:	0607a703          	lw	a4,96(a5)
80011dac:	fdc42783          	lw	a5,-36(s0)
80011db0:	0647a783          	lw	a5,100(a5)
80011db4:	00078613          	mv	a2,a5
80011db8:	00070593          	mv	a1,a4
80011dbc:	00015517          	auipc	a0,0x15
80011dc0:	1c450513          	addi	a0,a0,452 # 80026f80 <raise+0x138c>
80011dc4:	464030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\ts10(x26) = 0x%p\ts11(x27) = 0x%p\n",regs -> s10,regs -> s11);
80011dc8:	fdc42783          	lw	a5,-36(s0)
80011dcc:	0687a703          	lw	a4,104(a5)
80011dd0:	fdc42783          	lw	a5,-36(s0)
80011dd4:	06c7a783          	lw	a5,108(a5)
80011dd8:	00078613          	mv	a2,a5
80011ddc:	00070593          	mv	a1,a4
80011de0:	00015517          	auipc	a0,0x15
80011de4:	1c050513          	addi	a0,a0,448 # 80026fa0 <raise+0x13ac>
80011de8:	440030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("Function Arguments Registers:\n");
80011dec:	00015517          	auipc	a0,0x15
80011df0:	1d850513          	addi	a0,a0,472 # 80026fc4 <raise+0x13d0>
80011df4:	434030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\ta0(x10) = 0x%p\ta1(x11) = 0x%p\n",regs -> a0,regs -> a1);
80011df8:	fdc42783          	lw	a5,-36(s0)
80011dfc:	0287a703          	lw	a4,40(a5)
80011e00:	fdc42783          	lw	a5,-36(s0)
80011e04:	02c7a783          	lw	a5,44(a5)
80011e08:	00078613          	mv	a2,a5
80011e0c:	00070593          	mv	a1,a4
80011e10:	00015517          	auipc	a0,0x15
80011e14:	1d450513          	addi	a0,a0,468 # 80026fe4 <raise+0x13f0>
80011e18:	410030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\ta2(x12) = 0x%p\ta3(x13) = 0x%p\n",regs -> a2,regs -> a3);
80011e1c:	fdc42783          	lw	a5,-36(s0)
80011e20:	0307a703          	lw	a4,48(a5)
80011e24:	fdc42783          	lw	a5,-36(s0)
80011e28:	0347a783          	lw	a5,52(a5)
80011e2c:	00078613          	mv	a2,a5
80011e30:	00070593          	mv	a1,a4
80011e34:	00015517          	auipc	a0,0x15
80011e38:	1d050513          	addi	a0,a0,464 # 80027004 <raise+0x1410>
80011e3c:	3ec030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\ta4(x14) = 0x%p\ta5(x15) = 0x%p\n",regs -> a4,regs -> a5);
80011e40:	fdc42783          	lw	a5,-36(s0)
80011e44:	0387a703          	lw	a4,56(a5)
80011e48:	fdc42783          	lw	a5,-36(s0)
80011e4c:	03c7a783          	lw	a5,60(a5)
80011e50:	00078613          	mv	a2,a5
80011e54:	00070593          	mv	a1,a4
80011e58:	00015517          	auipc	a0,0x15
80011e5c:	1cc50513          	addi	a0,a0,460 # 80027024 <raise+0x1430>
80011e60:	3c8030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\ta6(x16) = 0x%p\ta7(x17) = 0x%p\n",regs -> a6,regs -> a7);
80011e64:	fdc42783          	lw	a5,-36(s0)
80011e68:	0407a703          	lw	a4,64(a5)
80011e6c:	fdc42783          	lw	a5,-36(s0)
80011e70:	0447a783          	lw	a5,68(a5)
80011e74:	00078613          	mv	a2,a5
80011e78:	00070593          	mv	a1,a4
80011e7c:	00015517          	auipc	a0,0x15
80011e80:	1c850513          	addi	a0,a0,456 # 80027044 <raise+0x1450>
80011e84:	3a4030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("xstatus = 0x%p\n",regs -> xstatus);
80011e88:	fdc42783          	lw	a5,-36(s0)
80011e8c:	0087a783          	lw	a5,8(a5)
80011e90:	00078593          	mv	a1,a5
80011e94:	00015517          	auipc	a0,0x15
80011e98:	1d050513          	addi	a0,a0,464 # 80027064 <raise+0x1470>
80011e9c:	38c030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\t%s\n",(regs -> xstatus & SSTATUS_SIE) ? "Supervisor Interrupt Enabled" : "Supervisor Interrupt Disabled");
80011ea0:	fdc42783          	lw	a5,-36(s0)
80011ea4:	0087a783          	lw	a5,8(a5)
80011ea8:	0027f793          	andi	a5,a5,2
80011eac:	00078863          	beqz	a5,80011ebc <dump_regs+0x2b8>
80011eb0:	00015797          	auipc	a5,0x15
80011eb4:	1c478793          	addi	a5,a5,452 # 80027074 <raise+0x1480>
80011eb8:	00c0006f          	j	80011ec4 <dump_regs+0x2c0>
80011ebc:	00015797          	auipc	a5,0x15
80011ec0:	1d878793          	addi	a5,a5,472 # 80027094 <raise+0x14a0>
80011ec4:	00078593          	mv	a1,a5
80011ec8:	00015517          	auipc	a0,0x15
80011ecc:	1ec50513          	addi	a0,a0,492 # 800270b4 <raise+0x14c0>
80011ed0:	358030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\t%s\n",(regs -> xstatus & SSTATUS_SPIE) ? "Last Time Supervisor Interrupt Enabled" : "Last Time Supervisor Interrupt Disabled");
80011ed4:	fdc42783          	lw	a5,-36(s0)
80011ed8:	0087a783          	lw	a5,8(a5)
80011edc:	0207f793          	andi	a5,a5,32
80011ee0:	00078863          	beqz	a5,80011ef0 <dump_regs+0x2ec>
80011ee4:	00015797          	auipc	a5,0x15
80011ee8:	1d878793          	addi	a5,a5,472 # 800270bc <raise+0x14c8>
80011eec:	00c0006f          	j	80011ef8 <dump_regs+0x2f4>
80011ef0:	00015797          	auipc	a5,0x15
80011ef4:	1f478793          	addi	a5,a5,500 # 800270e4 <raise+0x14f0>
80011ef8:	00078593          	mv	a1,a5
80011efc:	00015517          	auipc	a0,0x15
80011f00:	1b850513          	addi	a0,a0,440 # 800270b4 <raise+0x14c0>
80011f04:	324030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\t%s\n",(regs -> xstatus & SSTATUS_SPP) ? "Last Privilege is Supervisor Mode" : "Last Privilege is User Mode");
80011f08:	fdc42783          	lw	a5,-36(s0)
80011f0c:	0087a783          	lw	a5,8(a5)
80011f10:	1007f793          	andi	a5,a5,256
80011f14:	00078863          	beqz	a5,80011f24 <dump_regs+0x320>
80011f18:	00015797          	auipc	a5,0x15
80011f1c:	1f478793          	addi	a5,a5,500 # 8002710c <raise+0x1518>
80011f20:	00c0006f          	j	80011f2c <dump_regs+0x328>
80011f24:	00015797          	auipc	a5,0x15
80011f28:	20c78793          	addi	a5,a5,524 # 80027130 <raise+0x153c>
80011f2c:	00078593          	mv	a1,a5
80011f30:	00015517          	auipc	a0,0x15
80011f34:	18450513          	addi	a0,a0,388 # 800270b4 <raise+0x14c0>
80011f38:	2f0030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\t%s\n",(regs -> xstatus & SSTATUS_PUM) ? "Permit to Access User Page" : "Not Permit to Access User Page");
80011f3c:	fdc42783          	lw	a5,-36(s0)
80011f40:	0087a703          	lw	a4,8(a5)
80011f44:	000407b7          	lui	a5,0x40
80011f48:	00f777b3          	and	a5,a4,a5
80011f4c:	00078863          	beqz	a5,80011f5c <dump_regs+0x358>
80011f50:	00015797          	auipc	a5,0x15
80011f54:	1fc78793          	addi	a5,a5,508 # 8002714c <raise+0x1558>
80011f58:	00c0006f          	j	80011f64 <dump_regs+0x360>
80011f5c:	00015797          	auipc	a5,0x15
80011f60:	20c78793          	addi	a5,a5,524 # 80027168 <raise+0x1574>
80011f64:	00078593          	mv	a1,a5
80011f68:	00015517          	auipc	a0,0x15
80011f6c:	14c50513          	addi	a0,a0,332 # 800270b4 <raise+0x14c0>
80011f70:	2b8030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("\t%s\n",(regs -> xstatus & (1 << 19)) ? "Permit to Read Executable-only Page" : "Not Permit to Read Executable-only Page");
80011f74:	fdc42783          	lw	a5,-36(s0)
80011f78:	0087a703          	lw	a4,8(a5)
80011f7c:	000807b7          	lui	a5,0x80
80011f80:	00f777b3          	and	a5,a4,a5
80011f84:	00078863          	beqz	a5,80011f94 <dump_regs+0x390>
80011f88:	00015797          	auipc	a5,0x15
80011f8c:	20078793          	addi	a5,a5,512 # 80027188 <raise+0x1594>
80011f90:	00c0006f          	j	80011f9c <dump_regs+0x398>
80011f94:	00015797          	auipc	a5,0x15
80011f98:	21878793          	addi	a5,a5,536 # 800271ac <raise+0x15b8>
80011f9c:	00078593          	mv	a1,a5
80011fa0:	00015517          	auipc	a0,0x15
80011fa4:	11450513          	addi	a0,a0,276 # 800270b4 <raise+0x14c0>
80011fa8:	280030ef          	jal	ra,80015228 <rt_kprintf>
    rt_size_t satp_v = read_csr(satp);
80011fac:	180027f3          	csrr	a5,satp
80011fb0:	fef42423          	sw	a5,-24(s0)
80011fb4:	fe842783          	lw	a5,-24(s0)
80011fb8:	fef42223          	sw	a5,-28(s0)
    rt_kprintf("satp = 0x%p\n",satp_v);
80011fbc:	fe442583          	lw	a1,-28(s0)
80011fc0:	00015517          	auipc	a0,0x15
80011fc4:	21450513          	addi	a0,a0,532 # 800271d4 <raise+0x15e0>
80011fc8:	260030ef          	jal	ra,80015228 <rt_kprintf>
    const char *mode_str = "Unknown Address Translation/Protection Mode";
80011fcc:	00015797          	auipc	a5,0x15
80011fd0:	21878793          	addi	a5,a5,536 # 800271e4 <raise+0x15f0>
80011fd4:	fef42623          	sw	a5,-20(s0)

    switch(__MASKVALUE(satp_v >> 31,__MASK(1)))
80011fd8:	fe442783          	lw	a5,-28(s0)
80011fdc:	01f7d793          	srli	a5,a5,0x1f
80011fe0:	00900713          	li	a4,9
80011fe4:	02e78e63          	beq	a5,a4,80012020 <dump_regs+0x41c>
80011fe8:	00900713          	li	a4,9
80011fec:	04f76263          	bltu	a4,a5,80012030 <dump_regs+0x42c>
80011ff0:	00078863          	beqz	a5,80012000 <dump_regs+0x3fc>
80011ff4:	00800713          	li	a4,8
80011ff8:	00e78c63          	beq	a5,a4,80012010 <dump_regs+0x40c>
80011ffc:	0340006f          	j	80012030 <dump_regs+0x42c>
    {
        case 0:
            mode_str = "No Address Translation/Protection Mode";
80012000:	00015797          	auipc	a5,0x15
80012004:	21078793          	addi	a5,a5,528 # 80027210 <raise+0x161c>
80012008:	fef42623          	sw	a5,-20(s0)
            break;
8001200c:	0240006f          	j	80012030 <dump_regs+0x42c>

        case 8:
            mode_str = "Page-based 39-bit Virtual Addressing Mode";
80012010:	00015797          	auipc	a5,0x15
80012014:	22878793          	addi	a5,a5,552 # 80027238 <raise+0x1644>
80012018:	fef42623          	sw	a5,-20(s0)
            break;
8001201c:	0140006f          	j	80012030 <dump_regs+0x42c>

        case 9:
            mode_str = "Page-based 48-bit Virtual Addressing Mode";
80012020:	00015797          	auipc	a5,0x15
80012024:	24478793          	addi	a5,a5,580 # 80027264 <raise+0x1670>
80012028:	fef42623          	sw	a5,-20(s0)
            break;
8001202c:	00000013          	nop
    }

    rt_kprintf("\tMode = %s\n",mode_str);
80012030:	fec42583          	lw	a1,-20(s0)
80012034:	00015517          	auipc	a0,0x15
80012038:	25c50513          	addi	a0,a0,604 # 80027290 <raise+0x169c>
8001203c:	1ec030ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("-----------------Dump OK---------------------\n");
80012040:	00015517          	auipc	a0,0x15
80012044:	25c50513          	addi	a0,a0,604 # 8002729c <raise+0x16a8>
80012048:	1e0030ef          	jal	ra,80015228 <rt_kprintf>
}
8001204c:	00000013          	nop
80012050:	02c12083          	lw	ra,44(sp)
80012054:	02812403          	lw	s0,40(sp)
80012058:	03010113          	addi	sp,sp,48
8001205c:	00008067          	ret

80012060 <handle_trap>:
 * @param xtval 
 * @param xepc 
 * @param sp 
 */
void handle_trap(rt_size_t xcause, rt_size_t xtval, rt_size_t xepc, struct rt_hw_stack_frame *sp)
{
80012060:	fd010113          	addi	sp,sp,-48
80012064:	02112623          	sw	ra,44(sp)
80012068:	02812423          	sw	s0,40(sp)
8001206c:	03010413          	addi	s0,sp,48
80012070:	fca42e23          	sw	a0,-36(s0)
80012074:	fcb42c23          	sw	a1,-40(s0)
80012078:	fcc42a23          	sw	a2,-44(s0)
8001207c:	fcd42823          	sw	a3,-48(s0)

    int cause = (xcause & 0x7FFFFFFF);
80012080:	fdc42703          	lw	a4,-36(s0)
80012084:	800007b7          	lui	a5,0x80000
80012088:	fff78793          	addi	a5,a5,-1 # 7fffffff <__STACKSIZE__+0x7fffbfff>
8001208c:	00f777b3          	and	a5,a4,a5
80012090:	fef42623          	sw	a5,-20(s0)
    int plic_irq = 0;
80012094:	fe042423          	sw	zero,-24(s0)
    if (xcause & (1UL << 31)) // mcause[31] -> Interrupt
80012098:	fdc42783          	lw	a5,-36(s0)
8001209c:	0e07da63          	bgez	a5,80012190 <handle_trap+0x130>
    {
        switch (cause)
800120a0:	fec42783          	lw	a5,-20(s0)
800120a4:	ffd78793          	addi	a5,a5,-3
800120a8:	00800713          	li	a4,8
800120ac:	0cf76c63          	bltu	a4,a5,80012184 <handle_trap+0x124>
800120b0:	00279713          	slli	a4,a5,0x2
800120b4:	00016797          	auipc	a5,0x16
800120b8:	34878793          	addi	a5,a5,840 # 800283fc <__fsym_tail_desc+0x30>
800120bc:	00f707b3          	add	a5,a4,a5
800120c0:	0007a703          	lw	a4,0(a5)
800120c4:	00016797          	auipc	a5,0x16
800120c8:	33878793          	addi	a5,a5,824 # 800283fc <__fsym_tail_desc+0x30>
800120cc:	00f707b3          	add	a5,a4,a5
800120d0:	00078067          	jr	a5
                {

                }
                break;
            case IRQ_M_TIMER:
                tick_isr();
800120d4:	370000ef          	jal	ra,80012444 <tick_isr>
                break;
800120d8:	0ac0006f          	j	80012184 <handle_trap+0x124>
            case IRQ_S_TIMER:
                tick_isr();
800120dc:	368000ef          	jal	ra,80012444 <tick_isr>
                break;
800120e0:	0a40006f          	j	80012184 <handle_trap+0x124>

            case IRQ_S_EXT:
                plic_irq = plic_claim(); // get IRQ
800120e4:	31c0a0ef          	jal	ra,8001c400 <plic_claim>
800120e8:	fea42423          	sw	a0,-24(s0)
                plic_complete(plic_irq); // plic complete
800120ec:	fe842503          	lw	a0,-24(s0)
800120f0:	3600a0ef          	jal	ra,8001c450 <plic_complete>
                irq_desc[plic_irq].handler(plic_irq, irq_desc[plic_irq].param); // call irq handler
800120f4:	00072717          	auipc	a4,0x72
800120f8:	25470713          	addi	a4,a4,596 # 80084348 <irq_desc>
800120fc:	fe842783          	lw	a5,-24(s0)
80012100:	00579793          	slli	a5,a5,0x5
80012104:	00f707b3          	add	a5,a4,a5
80012108:	0007a703          	lw	a4,0(a5)
8001210c:	00072697          	auipc	a3,0x72
80012110:	23c68693          	addi	a3,a3,572 # 80084348 <irq_desc>
80012114:	fe842783          	lw	a5,-24(s0)
80012118:	00579793          	slli	a5,a5,0x5
8001211c:	00f687b3          	add	a5,a3,a5
80012120:	0047a783          	lw	a5,4(a5)
80012124:	00078593          	mv	a1,a5
80012128:	fe842503          	lw	a0,-24(s0)
8001212c:	000700e7          	jalr	a4
                break;
80012130:	0540006f          	j	80012184 <handle_trap+0x124>

            case IRQ_M_EXT:
                plic_irq = plic_claim();
80012134:	2cc0a0ef          	jal	ra,8001c400 <plic_claim>
80012138:	fea42423          	sw	a0,-24(s0)
                plic_complete(plic_irq);
8001213c:	fe842503          	lw	a0,-24(s0)
80012140:	3100a0ef          	jal	ra,8001c450 <plic_complete>
                irq_desc[plic_irq].handler(plic_irq, irq_desc[plic_irq].param);
80012144:	00072717          	auipc	a4,0x72
80012148:	20470713          	addi	a4,a4,516 # 80084348 <irq_desc>
8001214c:	fe842783          	lw	a5,-24(s0)
80012150:	00579793          	slli	a5,a5,0x5
80012154:	00f707b3          	add	a5,a4,a5
80012158:	0007a703          	lw	a4,0(a5)
8001215c:	00072697          	auipc	a3,0x72
80012160:	1ec68693          	addi	a3,a3,492 # 80084348 <irq_desc>
80012164:	fe842783          	lw	a5,-24(s0)
80012168:	00579793          	slli	a5,a5,0x5
8001216c:	00f687b3          	add	a5,a3,a5
80012170:	0047a783          	lw	a5,4(a5)
80012174:	00078593          	mv	a1,a5
80012178:	fe842503          	lw	a0,-24(s0)
8001217c:	000700e7          	jalr	a4
                break;
80012180:	00000013          	nop
#if defined(RT_USING_FINSH) && defined(MSH_USING_BUILT_IN_COMMANDS)
        list_thread();
#endif
        while(1);
    }
    rt_hw_interrupt_enable(0);
80012184:	00000513          	li	a0,0
80012188:	f21ed0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
}
8001218c:	1800006f          	j	8001230c <handle_trap+0x2ac>
        rt_hw_interrupt_disable();
80012190:	f11ed0ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
        rt_kprintf("xcause = %08x,xtval = %08x,xepc = %08x\n", xcause, xtval, xepc);
80012194:	fd442683          	lw	a3,-44(s0)
80012198:	fd842603          	lw	a2,-40(s0)
8001219c:	fdc42583          	lw	a1,-36(s0)
800121a0:	00015517          	auipc	a0,0x15
800121a4:	12c50513          	addi	a0,a0,300 # 800272cc <raise+0x16d8>
800121a8:	080030ef          	jal	ra,80015228 <rt_kprintf>
        tid = rt_thread_self();
800121ac:	614050ef          	jal	ra,800177c0 <rt_thread_self>
800121b0:	fea42223          	sw	a0,-28(s0)
        rt_kprintf("\nException:\n");
800121b4:	00015517          	auipc	a0,0x15
800121b8:	14050513          	addi	a0,a0,320 # 800272f4 <raise+0x1700>
800121bc:	06c030ef          	jal	ra,80015228 <rt_kprintf>
        switch (cause)
800121c0:	fec42703          	lw	a4,-20(s0)
800121c4:	00b00793          	li	a5,11
800121c8:	0ee7e663          	bltu	a5,a4,800122b4 <handle_trap+0x254>
800121cc:	fec42783          	lw	a5,-20(s0)
800121d0:	00279713          	slli	a4,a5,0x2
800121d4:	00016797          	auipc	a5,0x16
800121d8:	24c78793          	addi	a5,a5,588 # 80028420 <__fsym_tail_desc+0x54>
800121dc:	00f707b3          	add	a5,a4,a5
800121e0:	0007a703          	lw	a4,0(a5)
800121e4:	00016797          	auipc	a5,0x16
800121e8:	23c78793          	addi	a5,a5,572 # 80028420 <__fsym_tail_desc+0x54>
800121ec:	00f707b3          	add	a5,a4,a5
800121f0:	00078067          	jr	a5
                rt_kprintf("Instruction address misaligned");
800121f4:	00015517          	auipc	a0,0x15
800121f8:	11050513          	addi	a0,a0,272 # 80027304 <raise+0x1710>
800121fc:	02c030ef          	jal	ra,80015228 <rt_kprintf>
                break;
80012200:	0c80006f          	j	800122c8 <handle_trap+0x268>
                rt_kprintf("Instruction access fault");
80012204:	00015517          	auipc	a0,0x15
80012208:	12050513          	addi	a0,a0,288 # 80027324 <raise+0x1730>
8001220c:	01c030ef          	jal	ra,80015228 <rt_kprintf>
                break;
80012210:	0b80006f          	j	800122c8 <handle_trap+0x268>
                rt_kprintf("Illegal instruction");
80012214:	00015517          	auipc	a0,0x15
80012218:	12c50513          	addi	a0,a0,300 # 80027340 <raise+0x174c>
8001221c:	00c030ef          	jal	ra,80015228 <rt_kprintf>
                break;
80012220:	0a80006f          	j	800122c8 <handle_trap+0x268>
                rt_kprintf("Breakpoint");
80012224:	00015517          	auipc	a0,0x15
80012228:	13050513          	addi	a0,a0,304 # 80027354 <raise+0x1760>
8001222c:	7fd020ef          	jal	ra,80015228 <rt_kprintf>
                break;
80012230:	0980006f          	j	800122c8 <handle_trap+0x268>
                rt_kprintf("Load address misaligned");
80012234:	00015517          	auipc	a0,0x15
80012238:	12c50513          	addi	a0,a0,300 # 80027360 <raise+0x176c>
8001223c:	7ed020ef          	jal	ra,80015228 <rt_kprintf>
                break;
80012240:	0880006f          	j	800122c8 <handle_trap+0x268>
                rt_kprintf("Load access fault");
80012244:	00015517          	auipc	a0,0x15
80012248:	13450513          	addi	a0,a0,308 # 80027378 <raise+0x1784>
8001224c:	7dd020ef          	jal	ra,80015228 <rt_kprintf>
                break;
80012250:	0780006f          	j	800122c8 <handle_trap+0x268>
                rt_kprintf("Store address misaligned");
80012254:	00015517          	auipc	a0,0x15
80012258:	13850513          	addi	a0,a0,312 # 8002738c <raise+0x1798>
8001225c:	7cd020ef          	jal	ra,80015228 <rt_kprintf>
                break;
80012260:	0680006f          	j	800122c8 <handle_trap+0x268>
                rt_kprintf("Store access fault");
80012264:	00015517          	auipc	a0,0x15
80012268:	14450513          	addi	a0,a0,324 # 800273a8 <raise+0x17b4>
8001226c:	7bd020ef          	jal	ra,80015228 <rt_kprintf>
                break;
80012270:	0580006f          	j	800122c8 <handle_trap+0x268>
                rt_kprintf("Environment call from U-mode");
80012274:	00015517          	auipc	a0,0x15
80012278:	14850513          	addi	a0,a0,328 # 800273bc <raise+0x17c8>
8001227c:	7ad020ef          	jal	ra,80015228 <rt_kprintf>
                break;
80012280:	0480006f          	j	800122c8 <handle_trap+0x268>
                rt_kprintf("Environment call from S-mode");
80012284:	00015517          	auipc	a0,0x15
80012288:	15850513          	addi	a0,a0,344 # 800273dc <raise+0x17e8>
8001228c:	79d020ef          	jal	ra,80015228 <rt_kprintf>
                break;
80012290:	0380006f          	j	800122c8 <handle_trap+0x268>
                rt_kprintf("Environment call from H-mode");
80012294:	00015517          	auipc	a0,0x15
80012298:	16850513          	addi	a0,a0,360 # 800273fc <raise+0x1808>
8001229c:	78d020ef          	jal	ra,80015228 <rt_kprintf>
                break;
800122a0:	0280006f          	j	800122c8 <handle_trap+0x268>
                rt_kprintf("Environment call from M-mode");
800122a4:	00015517          	auipc	a0,0x15
800122a8:	17850513          	addi	a0,a0,376 # 8002741c <raise+0x1828>
800122ac:	77d020ef          	jal	ra,80015228 <rt_kprintf>
                break;
800122b0:	0180006f          	j	800122c8 <handle_trap+0x268>
                rt_kprintf("Uknown exception : %08lX", cause);
800122b4:	fec42583          	lw	a1,-20(s0)
800122b8:	00015517          	auipc	a0,0x15
800122bc:	18450513          	addi	a0,a0,388 # 8002743c <raise+0x1848>
800122c0:	769020ef          	jal	ra,80015228 <rt_kprintf>
                break;
800122c4:	00000013          	nop
        rt_kprintf("\n");
800122c8:	00015517          	auipc	a0,0x15
800122cc:	19050513          	addi	a0,a0,400 # 80027458 <raise+0x1864>
800122d0:	759020ef          	jal	ra,80015228 <rt_kprintf>
        dump_regs(sp);
800122d4:	fd042503          	lw	a0,-48(s0)
800122d8:	92dff0ef          	jal	ra,80011c04 <dump_regs>
        rt_kprintf("exception pc => 0x%08x\n", xepc);
800122dc:	fd442583          	lw	a1,-44(s0)
800122e0:	00015517          	auipc	a0,0x15
800122e4:	17c50513          	addi	a0,a0,380 # 8002745c <raise+0x1868>
800122e8:	741020ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("current thread: %.*s\n", RT_NAME_MAX, tid->name);
800122ec:	fe442783          	lw	a5,-28(s0)
800122f0:	00078613          	mv	a2,a5
800122f4:	01400593          	li	a1,20
800122f8:	00015517          	auipc	a0,0x15
800122fc:	17c50513          	addi	a0,a0,380 # 80027474 <raise+0x1880>
80012300:	729020ef          	jal	ra,80015228 <rt_kprintf>
        list_thread();
80012304:	891fa0ef          	jal	ra,8000cb94 <list_thread>
        while(1);
80012308:	0000006f          	j	80012308 <handle_trap+0x2a8>
}
8001230c:	02c12083          	lw	ra,44(sp)
80012310:	02812403          	lw	s0,40(sp)
80012314:	03010113          	addi	sp,sp,48
80012318:	00008067          	ret

8001231c <trap_entry>:
    FSTORE  f31, 31 * FREGBYTES(sp)

#endif

    /* save thread context to thread stack */
    addi sp, sp, -32 * REGBYTES
8001231c:	f8010113          	addi	sp,sp,-128

    STORE x1,   1 * REGBYTES(sp)
80012320:	00112223          	sw	ra,4(sp)

    csrr  x1, SRC_XSTATUS
80012324:	300020f3          	csrr	ra,mstatus
    STORE x1,   2 * REGBYTES(sp)
80012328:	00112423          	sw	ra,8(sp)

    csrr  x1, SRC_XEPC
8001232c:	341020f3          	csrr	ra,mepc
    STORE x1, 0 * REGBYTES(sp)
80012330:	00112023          	sw	ra,0(sp)

    STORE x4,   4 * REGBYTES(sp)
80012334:	00412823          	sw	tp,16(sp)
    STORE x5,   5 * REGBYTES(sp)
80012338:	00512a23          	sw	t0,20(sp)
    STORE x6,   6 * REGBYTES(sp)
8001233c:	00612c23          	sw	t1,24(sp)
    STORE x7,   7 * REGBYTES(sp)
80012340:	00712e23          	sw	t2,28(sp)
    STORE x8,   8 * REGBYTES(sp)
80012344:	02812023          	sw	s0,32(sp)
    STORE x9,   9 * REGBYTES(sp)
80012348:	02912223          	sw	s1,36(sp)
    STORE x10, 10 * REGBYTES(sp)
8001234c:	02a12423          	sw	a0,40(sp)
    STORE x11, 11 * REGBYTES(sp)
80012350:	02b12623          	sw	a1,44(sp)
    STORE x12, 12 * REGBYTES(sp)
80012354:	02c12823          	sw	a2,48(sp)
    STORE x13, 13 * REGBYTES(sp)
80012358:	02d12a23          	sw	a3,52(sp)
    STORE x14, 14 * REGBYTES(sp)
8001235c:	02e12c23          	sw	a4,56(sp)
    STORE x15, 15 * REGBYTES(sp)
80012360:	02f12e23          	sw	a5,60(sp)
    STORE x16, 16 * REGBYTES(sp)
80012364:	05012023          	sw	a6,64(sp)
    STORE x17, 17 * REGBYTES(sp)
80012368:	05112223          	sw	a7,68(sp)
    STORE x18, 18 * REGBYTES(sp)
8001236c:	05212423          	sw	s2,72(sp)
    STORE x19, 19 * REGBYTES(sp)
80012370:	05312623          	sw	s3,76(sp)
    STORE x20, 20 * REGBYTES(sp)
80012374:	05412823          	sw	s4,80(sp)
    STORE x21, 21 * REGBYTES(sp)
80012378:	05512a23          	sw	s5,84(sp)
    STORE x22, 22 * REGBYTES(sp)
8001237c:	05612c23          	sw	s6,88(sp)
    STORE x23, 23 * REGBYTES(sp)
80012380:	05712e23          	sw	s7,92(sp)
    STORE x24, 24 * REGBYTES(sp)
80012384:	07812023          	sw	s8,96(sp)
    STORE x25, 25 * REGBYTES(sp)
80012388:	07912223          	sw	s9,100(sp)
    STORE x26, 26 * REGBYTES(sp)
8001238c:	07a12423          	sw	s10,104(sp)
    STORE x27, 27 * REGBYTES(sp)
80012390:	07b12623          	sw	s11,108(sp)
    STORE x28, 28 * REGBYTES(sp)
80012394:	07c12823          	sw	t3,112(sp)
    STORE x29, 29 * REGBYTES(sp)
80012398:	07d12a23          	sw	t4,116(sp)
    STORE x30, 30 * REGBYTES(sp)
8001239c:	07e12c23          	sw	t5,120(sp)
    STORE x31, 31 * REGBYTES(sp)
800123a0:	07f12e23          	sw	t6,124(sp)

    /* switch to interrupt stack */
    move  s0, sp
800123a4:	00010413          	mv	s0,sp

    li    t0, 0
800123a8:	00000293          	li	t0,0

    /* switch interrupt stack of current cpu */
    la    sp, __stack_start__
800123ac:	0006e117          	auipc	sp,0x6e
800123b0:	c5410113          	addi	sp,sp,-940 # 80080000 <__STACK_ADDR__>
    addi  t1, t0, 1
800123b4:	00128313          	addi	t1,t0,1
    li    t2, __STACKSIZE__
800123b8:	000043b7          	lui	t2,0x4
    mul   t1, t1, t2
800123bc:	02730333          	mul	t1,t1,t2
    add   sp, sp, t1 /* sp = (cpuid + 1) * __STACKSIZE__ + __stack_start__ */
800123c0:	00610133          	add	sp,sp,t1

    /* handle interrupt */
    call  rt_interrupt_enter
800123c4:	654010ef          	jal	ra,80013a18 <rt_interrupt_enter>
    csrr  a0, SRC_XCAUSE
800123c8:	34202573          	csrr	a0,mcause
    csrr  a1, SRC_XTVAL
800123cc:	343025f3          	csrr	a1,mtval
    csrr  a2, SRC_XEPC
800123d0:	34102673          	csrr	a2,mepc
    mv    a3, s0
800123d4:	00040693          	mv	a3,s0
    call  handle_trap
800123d8:	c89ff0ef          	jal	ra,80012060 <handle_trap>
    call  rt_interrupt_leave
800123dc:	6b4010ef          	jal	ra,80013a90 <rt_interrupt_leave>
    tail   rt_hw_context_switch_exit

#else

    /* switch to from_thread stack */
    move  sp, s0
800123e0:	00040113          	mv	sp,s0

    /* need to switch new thread */
    la    s0, rt_thread_switch_interrupt_flag
800123e4:	00072417          	auipc	s0,0x72
800123e8:	c4c40413          	addi	s0,s0,-948 # 80084030 <rt_thread_switch_interrupt_flag>
    LOAD  s2, 0(s0)
800123ec:	00042903          	lw	s2,0(s0)
    beqz  s2, spurious_interrupt
800123f0:	02090463          	beqz	s2,80012418 <spurious_interrupt>
    STORE zero, 0(s0)
800123f4:	00042023          	sw	zero,0(s0)

    la    s0, rt_interrupt_from_thread
800123f8:	00072417          	auipc	s0,0x72
800123fc:	c3040413          	addi	s0,s0,-976 # 80084028 <rt_interrupt_from_thread>
    LOAD  s1, 0(s0)
80012400:	00042483          	lw	s1,0(s0)
    STORE sp, 0(s1)
80012404:	0024a023          	sw	sp,0(s1)

    la    s0, rt_interrupt_to_thread
80012408:	00072417          	auipc	s0,0x72
8001240c:	c2440413          	addi	s0,s0,-988 # 8008402c <rt_interrupt_to_thread>
    LOAD  s1, 0(s0)
80012410:	00042483          	lw	s1,0(s0)
    LOAD  sp, 0(s1)
80012414:	0004a103          	lw	sp,0(s1)

80012418 <spurious_interrupt>:

#endif

spurious_interrupt:
    tail rt_hw_context_switch_exit
80012418:	d45ed06f          	j	8000015c <rt_hw_context_switch_exit>

8001241c <__raw_hartid>:
#include <rthw.h>
#include <rtthread.h>
#include <stdint.h>

#include "tick.h"
#include <riscv_io.h>
8001241c:	fe010113          	addi	sp,sp,-32
80012420:	00812e23          	sw	s0,28(sp)
80012424:	02010413          	addi	s0,sp,32
#include <encoding.h>

80012428:	f14027f3          	csrr	a5,mhartid
8001242c:	fef42623          	sw	a5,-20(s0)
#define VIRT_CLINT_TIMEBASE_FREQ    (10000000)
80012430:	fec42783          	lw	a5,-20(s0)

80012434:	00078513          	mv	a0,a5
80012438:	01c12403          	lw	s0,28(sp)
8001243c:	02010113          	addi	sp,sp,32
80012440:	00008067          	ret

80012444 <tick_isr>:
        : "=r"(time_elapsed));
    return time_elapsed;
}

int tick_isr(void)
{
80012444:	fe010113          	addi	sp,sp,-32
80012448:	00112e23          	sw	ra,28(sp)
8001244c:	00812c23          	sw	s0,24(sp)
80012450:	00912a23          	sw	s1,20(sp)
80012454:	01212823          	sw	s2,16(sp)
80012458:	02010413          	addi	s0,sp,32
    int tick_cycles = VIRT_CLINT_TIMEBASE_FREQ / RT_TICK_PER_SECOND;
8001245c:	000f47b7          	lui	a5,0xf4
80012460:	24078793          	addi	a5,a5,576 # f4240 <__STACKSIZE__+0xf0240>
80012464:	fef42623          	sw	a5,-20(s0)
    rt_tick_increase();
80012468:	10c000ef          	jal	ra,80012574 <rt_tick_increase>

    *(uint32_t*)CLINT_MTIMECMP(__raw_hartid()) = *(uint32_t*)CLINT_MTIME + tick_cycles;
8001246c:	0200c7b7          	lui	a5,0x200c
80012470:	ff878793          	addi	a5,a5,-8 # 200bff8 <__STACKSIZE__+0x2007ff8>
80012474:	0007a903          	lw	s2,0(a5)
80012478:	fec42483          	lw	s1,-20(s0)
8001247c:	fa1ff0ef          	jal	ra,8001241c <__raw_hartid>
80012480:	00050713          	mv	a4,a0
80012484:	008017b7          	lui	a5,0x801
80012488:	00f707b3          	add	a5,a4,a5
8001248c:	00279793          	slli	a5,a5,0x2
80012490:	00078713          	mv	a4,a5
80012494:	009907b3          	add	a5,s2,s1
80012498:	00f72023          	sw	a5,0(a4)


    return 0;
8001249c:	00000793          	li	a5,0
}
800124a0:	00078513          	mv	a0,a5
800124a4:	01c12083          	lw	ra,28(sp)
800124a8:	01812403          	lw	s0,24(sp)
800124ac:	01412483          	lw	s1,20(sp)
800124b0:	01012903          	lw	s2,16(sp)
800124b4:	02010113          	addi	sp,sp,32
800124b8:	00008067          	ret

800124bc <rt_hw_tick_init>:

/* Sets and enable the timer interrupt */
int rt_hw_tick_init(void)
{
800124bc:	fe010113          	addi	sp,sp,-32
800124c0:	00112e23          	sw	ra,28(sp)
800124c4:	00812c23          	sw	s0,24(sp)
800124c8:	00912a23          	sw	s1,20(sp)
800124cc:	02010413          	addi	s0,sp,32
    unsigned long interval = VIRT_CLINT_TIMEBASE_FREQ / RT_TICK_PER_SECOND;
800124d0:	000f47b7          	lui	a5,0xf4
800124d4:	24078793          	addi	a5,a5,576 # f4240 <__STACKSIZE__+0xf0240>
800124d8:	fef42623          	sw	a5,-20(s0)

    clear_csr(mie, MIP_MTIP);
800124dc:	08000793          	li	a5,128
800124e0:	3047b7f3          	csrrc	a5,mie,a5
800124e4:	fef42423          	sw	a5,-24(s0)
    clear_csr(mip, MIP_MTIP);
800124e8:	08000793          	li	a5,128
800124ec:	3447b7f3          	csrrc	a5,mip,a5
800124f0:	fef42223          	sw	a5,-28(s0)
    *(uint32_t*)CLINT_MTIMECMP(__raw_hartid()) = *(uint32_t*)CLINT_MTIME + interval;
800124f4:	0200c7b7          	lui	a5,0x200c
800124f8:	ff878793          	addi	a5,a5,-8 # 200bff8 <__STACKSIZE__+0x2007ff8>
800124fc:	0007a483          	lw	s1,0(a5)
80012500:	f1dff0ef          	jal	ra,8001241c <__raw_hartid>
80012504:	00050713          	mv	a4,a0
80012508:	008017b7          	lui	a5,0x801
8001250c:	00f707b3          	add	a5,a4,a5
80012510:	00279793          	slli	a5,a5,0x2
80012514:	00078713          	mv	a4,a5
80012518:	fec42783          	lw	a5,-20(s0)
8001251c:	00f487b3          	add	a5,s1,a5
80012520:	00f72023          	sw	a5,0(a4)
    set_csr(mie, MIP_MTIP);
80012524:	08000793          	li	a5,128
80012528:	3047a7f3          	csrrs	a5,mie,a5
8001252c:	fef42023          	sw	a5,-32(s0)

    return 0;
80012530:	00000793          	li	a5,0
}
80012534:	00078513          	mv	a0,a5
80012538:	01c12083          	lw	ra,28(sp)
8001253c:	01812403          	lw	s0,24(sp)
80012540:	01412483          	lw	s1,20(sp)
80012544:	02010113          	addi	sp,sp,32
80012548:	00008067          	ret

8001254c <rt_tick_get>:
 * @brief    This function will return current tick from operating system startup.
 *
 * @return   Return current tick.
 */
rt_tick_t rt_tick_get(void)
{
8001254c:	ff010113          	addi	sp,sp,-16
80012550:	00812623          	sw	s0,12(sp)
80012554:	01010413          	addi	s0,sp,16
    /* return the global tick */
    return rt_tick;
80012558:	00072797          	auipc	a5,0x72
8001255c:	adc78793          	addi	a5,a5,-1316 # 80084034 <rt_tick>
80012560:	0007a783          	lw	a5,0(a5)
}
80012564:	00078513          	mv	a0,a5
80012568:	00c12403          	lw	s0,12(sp)
8001256c:	01010113          	addi	sp,sp,16
80012570:	00008067          	ret

80012574 <rt_tick_increase>:
/**
 * @brief    This function will notify kernel there is one tick passed.
 *           Normally, this function is invoked by clock ISR.
 */
void rt_tick_increase(void)
{
80012574:	fe010113          	addi	sp,sp,-32
80012578:	00112e23          	sw	ra,28(sp)
8001257c:	00812c23          	sw	s0,24(sp)
80012580:	02010413          	addi	s0,sp,32
    struct rt_thread *thread;
    rt_base_t level;

    RT_OBJECT_HOOK_CALL(rt_tick_hook, ());
80012584:	00072797          	auipc	a5,0x72
80012588:	ab478793          	addi	a5,a5,-1356 # 80084038 <rt_tick_hook>
8001258c:	0007a783          	lw	a5,0(a5)
80012590:	00078a63          	beqz	a5,800125a4 <rt_tick_increase+0x30>
80012594:	00072797          	auipc	a5,0x72
80012598:	aa478793          	addi	a5,a5,-1372 # 80084038 <rt_tick_hook>
8001259c:	0007a783          	lw	a5,0(a5)
800125a0:	000780e7          	jalr	a5

    level = rt_hw_interrupt_disable();
800125a4:	afded0ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
800125a8:	fea42623          	sw	a0,-20(s0)

    /* increase the global tick */
#ifdef RT_USING_SMP
    rt_cpu_self()->tick ++;
#else
    ++ rt_tick;
800125ac:	00072797          	auipc	a5,0x72
800125b0:	a8878793          	addi	a5,a5,-1400 # 80084034 <rt_tick>
800125b4:	0007a783          	lw	a5,0(a5)
800125b8:	00178713          	addi	a4,a5,1
800125bc:	00072797          	auipc	a5,0x72
800125c0:	a7878793          	addi	a5,a5,-1416 # 80084034 <rt_tick>
800125c4:	00e7a023          	sw	a4,0(a5)
#endif /* RT_USING_SMP */

    /* check time slice */
    thread = rt_thread_self();
800125c8:	1f8050ef          	jal	ra,800177c0 <rt_thread_self>
800125cc:	fea42423          	sw	a0,-24(s0)

    -- thread->remaining_tick;
800125d0:	fe842783          	lw	a5,-24(s0)
800125d4:	0547a783          	lw	a5,84(a5)
800125d8:	fff78713          	addi	a4,a5,-1
800125dc:	fe842783          	lw	a5,-24(s0)
800125e0:	04e7aa23          	sw	a4,84(a5)
    if (thread->remaining_tick == 0)
800125e4:	fe842783          	lw	a5,-24(s0)
800125e8:	0547a783          	lw	a5,84(a5)
800125ec:	02079e63          	bnez	a5,80012628 <rt_tick_increase+0xb4>
    {
        /* change to initialized tick */
        thread->remaining_tick = thread->init_tick;
800125f0:	fe842783          	lw	a5,-24(s0)
800125f4:	0507a703          	lw	a4,80(a5)
800125f8:	fe842783          	lw	a5,-24(s0)
800125fc:	04e7aa23          	sw	a4,84(a5)
        thread->stat |= RT_THREAD_STAT_YIELD;
80012600:	fe842783          	lw	a5,-24(s0)
80012604:	0407c783          	lbu	a5,64(a5)
80012608:	0087e793          	ori	a5,a5,8
8001260c:	0ff7f713          	zext.b	a4,a5
80012610:	fe842783          	lw	a5,-24(s0)
80012614:	04e78023          	sb	a4,64(a5)

        rt_hw_interrupt_enable(level);
80012618:	fec42503          	lw	a0,-20(s0)
8001261c:	a8ded0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
        rt_schedule();
80012620:	061040ef          	jal	ra,80016e80 <rt_schedule>
80012624:	00c0006f          	j	80012630 <rt_tick_increase+0xbc>
    }
    else
    {
        rt_hw_interrupt_enable(level);
80012628:	fec42503          	lw	a0,-20(s0)
8001262c:	a7ded0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
    }

    /* check timer */
    rt_timer_check();
80012630:	68d050ef          	jal	ra,800184bc <rt_timer_check>
}
80012634:	00000013          	nop
80012638:	01c12083          	lw	ra,28(sp)
8001263c:	01812403          	lw	s0,24(sp)
80012640:	02010113          	addi	sp,sp,32
80012644:	00008067          	ret

80012648 <rti_start>:
 * ...
 * INIT_APP_EXPORT(fn);
 * etc.
 */
static int rti_start(void)
{
80012648:	ff010113          	addi	sp,sp,-16
8001264c:	00812623          	sw	s0,12(sp)
80012650:	01010413          	addi	s0,sp,16
    return 0;
80012654:	00000793          	li	a5,0
}
80012658:	00078513          	mv	a0,a5
8001265c:	00c12403          	lw	s0,12(sp)
80012660:	01010113          	addi	sp,sp,16
80012664:	00008067          	ret

80012668 <rti_board_start>:
INIT_EXPORT(rti_start, "0");

static int rti_board_start(void)
{
80012668:	ff010113          	addi	sp,sp,-16
8001266c:	00812623          	sw	s0,12(sp)
80012670:	01010413          	addi	s0,sp,16
    return 0;
80012674:	00000793          	li	a5,0
}
80012678:	00078513          	mv	a0,a5
8001267c:	00c12403          	lw	s0,12(sp)
80012680:	01010113          	addi	sp,sp,16
80012684:	00008067          	ret

80012688 <rti_board_end>:
INIT_EXPORT(rti_board_start, "0.end");

static int rti_board_end(void)
{
80012688:	ff010113          	addi	sp,sp,-16
8001268c:	00812623          	sw	s0,12(sp)
80012690:	01010413          	addi	s0,sp,16
    return 0;
80012694:	00000793          	li	a5,0
}
80012698:	00078513          	mv	a0,a5
8001269c:	00c12403          	lw	s0,12(sp)
800126a0:	01010113          	addi	sp,sp,16
800126a4:	00008067          	ret

800126a8 <rti_end>:
INIT_EXPORT(rti_board_end, "1.end");

static int rti_end(void)
{
800126a8:	ff010113          	addi	sp,sp,-16
800126ac:	00812623          	sw	s0,12(sp)
800126b0:	01010413          	addi	s0,sp,16
    return 0;
800126b4:	00000793          	li	a5,0
}
800126b8:	00078513          	mv	a0,a5
800126bc:	00c12403          	lw	s0,12(sp)
800126c0:	01010113          	addi	sp,sp,16
800126c4:	00008067          	ret

800126c8 <rt_components_board_init>:
 * @brief  Onboard components initialization. In this function, the board-level
 *         initialization function will be called to complete the initialization
 *         of the on-board peripherals.
 */
void rt_components_board_init(void)
{
800126c8:	fe010113          	addi	sp,sp,-32
800126cc:	00112e23          	sw	ra,28(sp)
800126d0:	00812c23          	sw	s0,24(sp)
800126d4:	02010413          	addi	s0,sp,32
        rt_kprintf(":%d done\n", result);
    }
#else
    volatile const init_fn_t *fn_ptr;

    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
800126d8:	00017797          	auipc	a5,0x17
800126dc:	90878793          	addi	a5,a5,-1784 # 80028fe0 <__rt_init_rti_board_start>
800126e0:	fef42623          	sw	a5,-20(s0)
800126e4:	01c0006f          	j	80012700 <rt_components_board_init+0x38>
    {
        (*fn_ptr)();
800126e8:	fec42783          	lw	a5,-20(s0)
800126ec:	0007a783          	lw	a5,0(a5)
800126f0:	000780e7          	jalr	a5
    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
800126f4:	fec42783          	lw	a5,-20(s0)
800126f8:	00478793          	addi	a5,a5,4
800126fc:	fef42623          	sw	a5,-20(s0)
80012700:	fec42703          	lw	a4,-20(s0)
80012704:	00017797          	auipc	a5,0x17
80012708:	8e078793          	addi	a5,a5,-1824 # 80028fe4 <__rt_init_rti_board_end>
8001270c:	fcf76ee3          	bltu	a4,a5,800126e8 <rt_components_board_init+0x20>
    }
#endif /* RT_DEBUG_INIT */
}
80012710:	00000013          	nop
80012714:	00000013          	nop
80012718:	01c12083          	lw	ra,28(sp)
8001271c:	01812403          	lw	s0,24(sp)
80012720:	02010113          	addi	sp,sp,32
80012724:	00008067          	ret

80012728 <rt_components_init>:

/**
 * @brief  RT-Thread Components Initialization.
 */
void rt_components_init(void)
{
80012728:	fe010113          	addi	sp,sp,-32
8001272c:	00112e23          	sw	ra,28(sp)
80012730:	00812c23          	sw	s0,24(sp)
80012734:	02010413          	addi	s0,sp,32
        rt_kprintf(":%d done\n", result);
    }
#else
    volatile const init_fn_t *fn_ptr;

    for (fn_ptr = &__rt_init_rti_board_end; fn_ptr < &__rt_init_rti_end; fn_ptr ++)
80012738:	00017797          	auipc	a5,0x17
8001273c:	8ac78793          	addi	a5,a5,-1876 # 80028fe4 <__rt_init_rti_board_end>
80012740:	fef42623          	sw	a5,-20(s0)
80012744:	01c0006f          	j	80012760 <rt_components_init+0x38>
    {
        (*fn_ptr)();
80012748:	fec42783          	lw	a5,-20(s0)
8001274c:	0007a783          	lw	a5,0(a5)
80012750:	000780e7          	jalr	a5
    for (fn_ptr = &__rt_init_rti_board_end; fn_ptr < &__rt_init_rti_end; fn_ptr ++)
80012754:	fec42783          	lw	a5,-20(s0)
80012758:	00478793          	addi	a5,a5,4
8001275c:	fef42623          	sw	a5,-20(s0)
80012760:	fec42703          	lw	a4,-20(s0)
80012764:	00017797          	auipc	a5,0x17
80012768:	89078793          	addi	a5,a5,-1904 # 80028ff4 <__rt_init_rti_end>
8001276c:	fcf76ee3          	bltu	a4,a5,80012748 <rt_components_init+0x20>
    }
#endif /* RT_DEBUG_INIT */
}
80012770:	00000013          	nop
80012774:	00000013          	nop
80012778:	01c12083          	lw	ra,28(sp)
8001277c:	01812403          	lw	s0,24(sp)
80012780:	02010113          	addi	sp,sp,32
80012784:	00008067          	ret

80012788 <entry>:
    return 0;
}
#elif defined(__GNUC__)
/* Add -eentry to arm-none-eabi-gcc argument */
int entry(void)
{
80012788:	ff010113          	addi	sp,sp,-16
8001278c:	00112623          	sw	ra,12(sp)
80012790:	00812423          	sw	s0,8(sp)
80012794:	01010413          	addi	s0,sp,16
    rtthread_startup();
80012798:	0a0000ef          	jal	ra,80012838 <rtthread_startup>
    return 0;
8001279c:	00000793          	li	a5,0
}
800127a0:	00078513          	mv	a0,a5
800127a4:	00c12083          	lw	ra,12(sp)
800127a8:	00812403          	lw	s0,8(sp)
800127ac:	01010113          	addi	sp,sp,16
800127b0:	00008067          	ret

800127b4 <main_thread_entry>:
 * @brief  The system main thread. In this thread will call the rt_components_init()
 *         for initialization of RT-Thread Components and call the user's programming
 *         entry main().
 */
void main_thread_entry(void *parameter)
{
800127b4:	fe010113          	addi	sp,sp,-32
800127b8:	00112e23          	sw	ra,28(sp)
800127bc:	00812c23          	sw	s0,24(sp)
800127c0:	02010413          	addi	s0,sp,32
800127c4:	fea42623          	sw	a0,-20(s0)
    extern int main(void);

#ifdef RT_USING_COMPONENTS_INIT
    /* RT-Thread components initialization */
    rt_components_init();
800127c8:	f61ff0ef          	jal	ra,80012728 <rt_components_init>
    {
        extern int $Super$$main(void);
        $Super$$main(); /* for ARMCC. */
    }
#elif defined(__ICCARM__) || defined(__GNUC__) || defined(__TASKING__) || defined(__TI_COMPILER_VERSION__)
    main();
800127cc:	600090ef          	jal	ra,8001bdcc <main>
#endif
}
800127d0:	00000013          	nop
800127d4:	01c12083          	lw	ra,28(sp)
800127d8:	01812403          	lw	s0,24(sp)
800127dc:	02010113          	addi	sp,sp,32
800127e0:	00008067          	ret

800127e4 <rt_application_init>:
/**
 * @brief  This function will create and start the main thread, but this thread
 *         will not run until the scheduler starts.
 */
void rt_application_init(void)
{
800127e4:	fe010113          	addi	sp,sp,-32
800127e8:	00112e23          	sw	ra,28(sp)
800127ec:	00812c23          	sw	s0,24(sp)
800127f0:	02010413          	addi	s0,sp,32
    rt_thread_t tid;

#ifdef RT_USING_HEAP
    tid = rt_thread_create("main", main_thread_entry, RT_NULL,
800127f4:	01400793          	li	a5,20
800127f8:	00200713          	li	a4,2
800127fc:	000016b7          	lui	a3,0x1
80012800:	00000613          	li	a2,0
80012804:	00000597          	auipc	a1,0x0
80012808:	fb058593          	addi	a1,a1,-80 # 800127b4 <main_thread_entry>
8001280c:	00015517          	auipc	a0,0x15
80012810:	c8050513          	addi	a0,a0,-896 # 8002748c <raise+0x1898>
80012814:	0d8050ef          	jal	ra,800178ec <rt_thread_create>
80012818:	fea42623          	sw	a0,-20(s0)

    /* if not define RT_USING_HEAP, using to eliminate the warning */
    (void)result;
#endif /* RT_USING_HEAP */

    rt_thread_startup(tid);
8001281c:	fec42503          	lw	a0,-20(s0)
80012820:	7c9040ef          	jal	ra,800177e8 <rt_thread_startup>
}
80012824:	00000013          	nop
80012828:	01c12083          	lw	ra,28(sp)
8001282c:	01812403          	lw	s0,24(sp)
80012830:	02010113          	addi	sp,sp,32
80012834:	00008067          	ret

80012838 <rtthread_startup>:
/**
 * @brief  This function will call all levels of initialization functions to complete
 *         the initialization of the system, and finally start the scheduler.
 */
int rtthread_startup(void)
{
80012838:	ff010113          	addi	sp,sp,-16
8001283c:	00112623          	sw	ra,12(sp)
80012840:	00812423          	sw	s0,8(sp)
80012844:	01010413          	addi	s0,sp,16
    rt_hw_interrupt_disable();
80012848:	859ed0ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>

    /* board level initialization
     * NOTE: please initialize heap inside board initialization.
     */
    rt_hw_board_init();
8001284c:	618090ef          	jal	ra,8001be64 <rt_hw_board_init>

    /* show RT-Thread version */
    rt_show_version();
80012850:	27d010ef          	jal	ra,800142cc <rt_show_version>

    /* timer system initialization */
    rt_system_timer_init();
80012854:	619050ef          	jal	ra,8001866c <rt_system_timer_init>

    /* scheduler system initialization */
    rt_system_scheduler_init();
80012858:	548040ef          	jal	ra,80016da0 <rt_system_scheduler_init>
    /* signal system initialization */
    rt_system_signal_init();
#endif /* RT_USING_SIGNALS */

    /* create init_thread */
    rt_application_init();
8001285c:	f89ff0ef          	jal	ra,800127e4 <rt_application_init>

    /* timer thread initialization */
    rt_system_timer_thread_init();
80012860:	66d050ef          	jal	ra,800186cc <rt_system_timer_thread_init>

    /* idle thread initialization */
    rt_thread_idle_init();
80012864:	710000ef          	jal	ra,80012f74 <rt_thread_idle_init>
#ifdef RT_USING_SMP
    rt_hw_spin_lock(&_cpus_lock);
#endif /* RT_USING_SMP */

    /* start scheduler */
    rt_system_scheduler_start();
80012868:	5b0040ef          	jal	ra,80016e18 <rt_system_scheduler_start>

    /* never reach here */
    return 0;
8001286c:	00000793          	li	a5,0
}
80012870:	00078513          	mv	a0,a5
80012874:	00c12083          	lw	ra,12(sp)
80012878:	00812403          	lw	s0,8(sp)
8001287c:	01010113          	addi	sp,sp,16
80012880:	00008067          	ret

80012884 <rt_device_register>:
 * @return the error code, RT_EOK on initialization successfully.
 */
rt_err_t rt_device_register(rt_device_t dev,
                            const char *name,
                            rt_uint16_t flags)
{
80012884:	fe010113          	addi	sp,sp,-32
80012888:	00112e23          	sw	ra,28(sp)
8001288c:	00812c23          	sw	s0,24(sp)
80012890:	02010413          	addi	s0,sp,32
80012894:	fea42623          	sw	a0,-20(s0)
80012898:	feb42423          	sw	a1,-24(s0)
8001289c:	00060793          	mv	a5,a2
800128a0:	fef41323          	sh	a5,-26(s0)
    if (dev == RT_NULL)
800128a4:	fec42783          	lw	a5,-20(s0)
800128a8:	00079663          	bnez	a5,800128b4 <rt_device_register+0x30>
        return -RT_ERROR;
800128ac:	fff00793          	li	a5,-1
800128b0:	0500006f          	j	80012900 <rt_device_register+0x7c>

    if (rt_device_find(name) != RT_NULL)
800128b4:	fe842503          	lw	a0,-24(s0)
800128b8:	05c000ef          	jal	ra,80012914 <rt_device_find>
800128bc:	00050793          	mv	a5,a0
800128c0:	00078663          	beqz	a5,800128cc <rt_device_register+0x48>
        return -RT_ERROR;
800128c4:	fff00793          	li	a5,-1
800128c8:	0380006f          	j	80012900 <rt_device_register+0x7c>

    rt_object_init(&(dev->parent), RT_Object_Class_Device, name);
800128cc:	fec42783          	lw	a5,-20(s0)
800128d0:	fe842603          	lw	a2,-24(s0)
800128d4:	00900593          	li	a1,9
800128d8:	00078513          	mv	a0,a5
800128dc:	711030ef          	jal	ra,800167ec <rt_object_init>
    dev->flag = flags;
800128e0:	fec42783          	lw	a5,-20(s0)
800128e4:	fe645703          	lhu	a4,-26(s0)
800128e8:	02e79223          	sh	a4,36(a5)
    dev->ref_count = 0;
800128ec:	fec42783          	lw	a5,-20(s0)
800128f0:	02078423          	sb	zero,40(a5)
    dev->open_flag = 0;
800128f4:	fec42783          	lw	a5,-20(s0)
800128f8:	02079323          	sh	zero,38(a5)
#ifdef RT_USING_POSIX_DEVIO
    dev->fops = RT_NULL;
    rt_wqueue_init(&(dev->wait_queue));
#endif /* RT_USING_POSIX_DEVIO */

    return RT_EOK;
800128fc:	00000793          	li	a5,0
}
80012900:	00078513          	mv	a0,a5
80012904:	01c12083          	lw	ra,28(sp)
80012908:	01812403          	lw	s0,24(sp)
8001290c:	02010113          	addi	sp,sp,32
80012910:	00008067          	ret

80012914 <rt_device_find>:
 * @param name is the device driver's name.
 *
 * @return the registered device driver on successful, or RT_NULL on failure.
 */
rt_device_t rt_device_find(const char *name)
{
80012914:	fe010113          	addi	sp,sp,-32
80012918:	00112e23          	sw	ra,28(sp)
8001291c:	00812c23          	sw	s0,24(sp)
80012920:	02010413          	addi	s0,sp,32
80012924:	fea42623          	sw	a0,-20(s0)
    return (rt_device_t)rt_object_find(name, RT_Object_Class_Device);
80012928:	00900593          	li	a1,9
8001292c:	fec42503          	lw	a0,-20(s0)
80012930:	198040ef          	jal	ra,80016ac8 <rt_object_find>
80012934:	00050793          	mv	a5,a0
}
80012938:	00078513          	mv	a0,a5
8001293c:	01c12083          	lw	ra,28(sp)
80012940:	01812403          	lw	s0,24(sp)
80012944:	02010113          	addi	sp,sp,32
80012948:	00008067          	ret

8001294c <rt_device_open>:
 * @param oflag is the flags for device open.
 *
 * @return the result, RT_EOK on successfully.
 */
rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
{
8001294c:	fd010113          	addi	sp,sp,-48
80012950:	02112623          	sw	ra,44(sp)
80012954:	02812423          	sw	s0,40(sp)
80012958:	03010413          	addi	s0,sp,48
8001295c:	fca42e23          	sw	a0,-36(s0)
80012960:	00058793          	mv	a5,a1
80012964:	fcf41d23          	sh	a5,-38(s0)
    rt_err_t result = RT_EOK;
80012968:	fe042623          	sw	zero,-20(s0)
    /* parameter check */
    RT_ASSERT(dev != RT_NULL);
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);

    /* if device is not initialized, initialize it. */
    if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
8001296c:	fdc42783          	lw	a5,-36(s0)
80012970:	0247d783          	lhu	a5,36(a5)
80012974:	0107f793          	andi	a5,a5,16
80012978:	04079863          	bnez	a5,800129c8 <rt_device_open+0x7c>
    {
        if (device_init != RT_NULL)
8001297c:	fdc42783          	lw	a5,-36(s0)
80012980:	0347a783          	lw	a5,52(a5)
80012984:	02078463          	beqz	a5,800129ac <rt_device_open+0x60>
        {
            result = device_init(dev);
80012988:	fdc42783          	lw	a5,-36(s0)
8001298c:	0347a783          	lw	a5,52(a5)
80012990:	fdc42503          	lw	a0,-36(s0)
80012994:	000780e7          	jalr	a5
80012998:	fea42623          	sw	a0,-20(s0)
            if (result != RT_EOK)
8001299c:	fec42783          	lw	a5,-20(s0)
800129a0:	00078663          	beqz	a5,800129ac <rt_device_open+0x60>
            {
                RT_DEBUG_LOG(RT_DEBUG_DEVICE, ("To initialize device:%s failed. The error code is %d\n",
                           dev->parent.name, result));

                return result;
800129a4:	fec42783          	lw	a5,-20(s0)
800129a8:	0e40006f          	j	80012a8c <rt_device_open+0x140>
            }
        }

        dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
800129ac:	fdc42783          	lw	a5,-36(s0)
800129b0:	0247d783          	lhu	a5,36(a5)
800129b4:	0107e793          	ori	a5,a5,16
800129b8:	01079713          	slli	a4,a5,0x10
800129bc:	01075713          	srli	a4,a4,0x10
800129c0:	fdc42783          	lw	a5,-36(s0)
800129c4:	02e79223          	sh	a4,36(a5)
    }

    /* device is a stand alone device and opened */
    if ((dev->flag & RT_DEVICE_FLAG_STANDALONE) &&
800129c8:	fdc42783          	lw	a5,-36(s0)
800129cc:	0247d783          	lhu	a5,36(a5)
800129d0:	0087f793          	andi	a5,a5,8
800129d4:	00078e63          	beqz	a5,800129f0 <rt_device_open+0xa4>
        (dev->open_flag & RT_DEVICE_OFLAG_OPEN))
800129d8:	fdc42783          	lw	a5,-36(s0)
800129dc:	0267d783          	lhu	a5,38(a5)
800129e0:	0087f793          	andi	a5,a5,8
    if ((dev->flag & RT_DEVICE_FLAG_STANDALONE) &&
800129e4:	00078663          	beqz	a5,800129f0 <rt_device_open+0xa4>
    {
        return -RT_EBUSY;
800129e8:	ff900793          	li	a5,-7
800129ec:	0a00006f          	j	80012a8c <rt_device_open+0x140>
    }

    /* call device_open interface */
    if (device_open != RT_NULL)
800129f0:	fdc42783          	lw	a5,-36(s0)
800129f4:	0387a783          	lw	a5,56(a5)
800129f8:	02078263          	beqz	a5,80012a1c <rt_device_open+0xd0>
    {
        result = device_open(dev, oflag);
800129fc:	fdc42783          	lw	a5,-36(s0)
80012a00:	0387a783          	lw	a5,56(a5)
80012a04:	fda45703          	lhu	a4,-38(s0)
80012a08:	00070593          	mv	a1,a4
80012a0c:	fdc42503          	lw	a0,-36(s0)
80012a10:	000780e7          	jalr	a5
80012a14:	fea42623          	sw	a0,-20(s0)
80012a18:	0280006f          	j	80012a40 <rt_device_open+0xf4>
    }
    else
    {
        /* set open flag */
        dev->open_flag = (oflag & RT_DEVICE_OFLAG_MASK);
80012a1c:	fda45783          	lhu	a5,-38(s0)
80012a20:	00078713          	mv	a4,a5
80012a24:	000017b7          	lui	a5,0x1
80012a28:	f0f78793          	addi	a5,a5,-241 # f0f <__STACKSIZE__-0x30f1>
80012a2c:	00f777b3          	and	a5,a4,a5
80012a30:	01079713          	slli	a4,a5,0x10
80012a34:	01075713          	srli	a4,a4,0x10
80012a38:	fdc42783          	lw	a5,-36(s0)
80012a3c:	02e79323          	sh	a4,38(a5)
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
80012a40:	fec42783          	lw	a5,-20(s0)
80012a44:	00078863          	beqz	a5,80012a54 <rt_device_open+0x108>
80012a48:	fec42703          	lw	a4,-20(s0)
80012a4c:	ffa00793          	li	a5,-6
80012a50:	02f71c63          	bne	a4,a5,80012a88 <rt_device_open+0x13c>
    {
        dev->open_flag |= RT_DEVICE_OFLAG_OPEN;
80012a54:	fdc42783          	lw	a5,-36(s0)
80012a58:	0267d783          	lhu	a5,38(a5)
80012a5c:	0087e793          	ori	a5,a5,8
80012a60:	01079713          	slli	a4,a5,0x10
80012a64:	01075713          	srli	a4,a4,0x10
80012a68:	fdc42783          	lw	a5,-36(s0)
80012a6c:	02e79323          	sh	a4,38(a5)

        dev->ref_count++;
80012a70:	fdc42783          	lw	a5,-36(s0)
80012a74:	0287c783          	lbu	a5,40(a5)
80012a78:	00178793          	addi	a5,a5,1
80012a7c:	0ff7f713          	zext.b	a4,a5
80012a80:	fdc42783          	lw	a5,-36(s0)
80012a84:	02e78423          	sb	a4,40(a5)
        /* don't let bad things happen silently. If you are bitten by this assert,
         * please set the ref_count to a bigger type. */
        RT_ASSERT(dev->ref_count != 0);
    }

    return result;
80012a88:	fec42783          	lw	a5,-20(s0)
}
80012a8c:	00078513          	mv	a0,a5
80012a90:	02c12083          	lw	ra,44(sp)
80012a94:	02812403          	lw	s0,40(sp)
80012a98:	03010113          	addi	sp,sp,48
80012a9c:	00008067          	ret

80012aa0 <rt_device_close>:
 * @param dev is the pointer of device driver structure.
 *
 * @return the result, RT_EOK on successfully.
 */
rt_err_t rt_device_close(rt_device_t dev)
{
80012aa0:	fd010113          	addi	sp,sp,-48
80012aa4:	02112623          	sw	ra,44(sp)
80012aa8:	02812423          	sw	s0,40(sp)
80012aac:	03010413          	addi	s0,sp,48
80012ab0:	fca42e23          	sw	a0,-36(s0)
    rt_err_t result = RT_EOK;
80012ab4:	fe042623          	sw	zero,-20(s0)

    /* parameter check */
    RT_ASSERT(dev != RT_NULL);
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);

    if (dev->ref_count == 0)
80012ab8:	fdc42783          	lw	a5,-36(s0)
80012abc:	0287c783          	lbu	a5,40(a5)
80012ac0:	00079663          	bnez	a5,80012acc <rt_device_close+0x2c>
        return -RT_ERROR;
80012ac4:	fff00793          	li	a5,-1
80012ac8:	0700006f          	j	80012b38 <rt_device_close+0x98>

    dev->ref_count--;
80012acc:	fdc42783          	lw	a5,-36(s0)
80012ad0:	0287c783          	lbu	a5,40(a5)
80012ad4:	fff78793          	addi	a5,a5,-1
80012ad8:	0ff7f713          	zext.b	a4,a5
80012adc:	fdc42783          	lw	a5,-36(s0)
80012ae0:	02e78423          	sb	a4,40(a5)

    if (dev->ref_count != 0)
80012ae4:	fdc42783          	lw	a5,-36(s0)
80012ae8:	0287c783          	lbu	a5,40(a5)
80012aec:	00078663          	beqz	a5,80012af8 <rt_device_close+0x58>
        return RT_EOK;
80012af0:	00000793          	li	a5,0
80012af4:	0440006f          	j	80012b38 <rt_device_close+0x98>

    /* call device_close interface */
    if (device_close != RT_NULL)
80012af8:	fdc42783          	lw	a5,-36(s0)
80012afc:	03c7a783          	lw	a5,60(a5)
80012b00:	00078c63          	beqz	a5,80012b18 <rt_device_close+0x78>
    {
        result = device_close(dev);
80012b04:	fdc42783          	lw	a5,-36(s0)
80012b08:	03c7a783          	lw	a5,60(a5)
80012b0c:	fdc42503          	lw	a0,-36(s0)
80012b10:	000780e7          	jalr	a5
80012b14:	fea42623          	sw	a0,-20(s0)
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
80012b18:	fec42783          	lw	a5,-20(s0)
80012b1c:	00078863          	beqz	a5,80012b2c <rt_device_close+0x8c>
80012b20:	fec42703          	lw	a4,-20(s0)
80012b24:	ffa00793          	li	a5,-6
80012b28:	00f71663          	bne	a4,a5,80012b34 <rt_device_close+0x94>
        dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
80012b2c:	fdc42783          	lw	a5,-36(s0)
80012b30:	02079323          	sh	zero,38(a5)

    return result;
80012b34:	fec42783          	lw	a5,-20(s0)
}
80012b38:	00078513          	mv	a0,a5
80012b3c:	02c12083          	lw	ra,44(sp)
80012b40:	02812403          	lw	s0,40(sp)
80012b44:	03010113          	addi	sp,sp,48
80012b48:	00008067          	ret

80012b4c <rt_device_read>:
 */
rt_size_t rt_device_read(rt_device_t dev,
                         rt_off_t    pos,
                         void       *buffer,
                         rt_size_t   size)
{
80012b4c:	fe010113          	addi	sp,sp,-32
80012b50:	00112e23          	sw	ra,28(sp)
80012b54:	00812c23          	sw	s0,24(sp)
80012b58:	02010413          	addi	s0,sp,32
80012b5c:	fea42623          	sw	a0,-20(s0)
80012b60:	feb42423          	sw	a1,-24(s0)
80012b64:	fec42223          	sw	a2,-28(s0)
80012b68:	fed42023          	sw	a3,-32(s0)
    /* parameter check */
    RT_ASSERT(dev != RT_NULL);
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);

    if (dev->ref_count == 0)
80012b6c:	fec42783          	lw	a5,-20(s0)
80012b70:	0287c783          	lbu	a5,40(a5)
80012b74:	00079a63          	bnez	a5,80012b88 <rt_device_read+0x3c>
    {
        rt_set_errno(-RT_ERROR);
80012b78:	fff00513          	li	a0,-1
80012b7c:	03c010ef          	jal	ra,80013bb8 <rt_set_errno>
        return 0;
80012b80:	00000793          	li	a5,0
80012b84:	0400006f          	j	80012bc4 <rt_device_read+0x78>
    }

    /* call device_read interface */
    if (device_read != RT_NULL)
80012b88:	fec42783          	lw	a5,-20(s0)
80012b8c:	0407a783          	lw	a5,64(a5)
80012b90:	02078463          	beqz	a5,80012bb8 <rt_device_read+0x6c>
    {
        return device_read(dev, pos, buffer, size);
80012b94:	fec42783          	lw	a5,-20(s0)
80012b98:	0407a783          	lw	a5,64(a5)
80012b9c:	fe042683          	lw	a3,-32(s0)
80012ba0:	fe442603          	lw	a2,-28(s0)
80012ba4:	fe842583          	lw	a1,-24(s0)
80012ba8:	fec42503          	lw	a0,-20(s0)
80012bac:	000780e7          	jalr	a5
80012bb0:	00050793          	mv	a5,a0
80012bb4:	0100006f          	j	80012bc4 <rt_device_read+0x78>
    }

    /* set error code */
    rt_set_errno(-RT_ENOSYS);
80012bb8:	ffa00513          	li	a0,-6
80012bbc:	7fd000ef          	jal	ra,80013bb8 <rt_set_errno>

    return 0;
80012bc0:	00000793          	li	a5,0
}
80012bc4:	00078513          	mv	a0,a5
80012bc8:	01c12083          	lw	ra,28(sp)
80012bcc:	01812403          	lw	s0,24(sp)
80012bd0:	02010113          	addi	sp,sp,32
80012bd4:	00008067          	ret

80012bd8 <rt_device_write>:
 */
rt_size_t rt_device_write(rt_device_t dev,
                          rt_off_t    pos,
                          const void *buffer,
                          rt_size_t   size)
{
80012bd8:	fe010113          	addi	sp,sp,-32
80012bdc:	00112e23          	sw	ra,28(sp)
80012be0:	00812c23          	sw	s0,24(sp)
80012be4:	02010413          	addi	s0,sp,32
80012be8:	fea42623          	sw	a0,-20(s0)
80012bec:	feb42423          	sw	a1,-24(s0)
80012bf0:	fec42223          	sw	a2,-28(s0)
80012bf4:	fed42023          	sw	a3,-32(s0)
    /* parameter check */
    RT_ASSERT(dev != RT_NULL);
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);

    if (dev->ref_count == 0)
80012bf8:	fec42783          	lw	a5,-20(s0)
80012bfc:	0287c783          	lbu	a5,40(a5)
80012c00:	00079a63          	bnez	a5,80012c14 <rt_device_write+0x3c>
    {
        rt_set_errno(-RT_ERROR);
80012c04:	fff00513          	li	a0,-1
80012c08:	7b1000ef          	jal	ra,80013bb8 <rt_set_errno>
        return 0;
80012c0c:	00000793          	li	a5,0
80012c10:	0400006f          	j	80012c50 <rt_device_write+0x78>
    }

    /* call device_write interface */
    if (device_write != RT_NULL)
80012c14:	fec42783          	lw	a5,-20(s0)
80012c18:	0447a783          	lw	a5,68(a5)
80012c1c:	02078463          	beqz	a5,80012c44 <rt_device_write+0x6c>
    {
        return device_write(dev, pos, buffer, size);
80012c20:	fec42783          	lw	a5,-20(s0)
80012c24:	0447a783          	lw	a5,68(a5)
80012c28:	fe042683          	lw	a3,-32(s0)
80012c2c:	fe442603          	lw	a2,-28(s0)
80012c30:	fe842583          	lw	a1,-24(s0)
80012c34:	fec42503          	lw	a0,-20(s0)
80012c38:	000780e7          	jalr	a5
80012c3c:	00050793          	mv	a5,a0
80012c40:	0100006f          	j	80012c50 <rt_device_write+0x78>
    }

    /* set error code */
    rt_set_errno(-RT_ENOSYS);
80012c44:	ffa00513          	li	a0,-6
80012c48:	771000ef          	jal	ra,80013bb8 <rt_set_errno>

    return 0;
80012c4c:	00000793          	li	a5,0
}
80012c50:	00078513          	mv	a0,a5
80012c54:	01c12083          	lw	ra,28(sp)
80012c58:	01812403          	lw	s0,24(sp)
80012c5c:	02010113          	addi	sp,sp,32
80012c60:	00008067          	ret

80012c64 <rt_device_control>:
 * @param arg is the argument of command.
 *
 * @return the result, -RT_ENOSYS for failed.
 */
rt_err_t rt_device_control(rt_device_t dev, int cmd, void *arg)
{
80012c64:	fe010113          	addi	sp,sp,-32
80012c68:	00112e23          	sw	ra,28(sp)
80012c6c:	00812c23          	sw	s0,24(sp)
80012c70:	02010413          	addi	s0,sp,32
80012c74:	fea42623          	sw	a0,-20(s0)
80012c78:	feb42423          	sw	a1,-24(s0)
80012c7c:	fec42223          	sw	a2,-28(s0)
    /* parameter check */
    RT_ASSERT(dev != RT_NULL);
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);

    /* call device_write interface */
    if (device_control != RT_NULL)
80012c80:	fec42783          	lw	a5,-20(s0)
80012c84:	0487a783          	lw	a5,72(a5)
80012c88:	02078263          	beqz	a5,80012cac <rt_device_control+0x48>
    {
        return device_control(dev, cmd, arg);
80012c8c:	fec42783          	lw	a5,-20(s0)
80012c90:	0487a783          	lw	a5,72(a5)
80012c94:	fe442603          	lw	a2,-28(s0)
80012c98:	fe842583          	lw	a1,-24(s0)
80012c9c:	fec42503          	lw	a0,-20(s0)
80012ca0:	000780e7          	jalr	a5
80012ca4:	00050793          	mv	a5,a0
80012ca8:	0080006f          	j	80012cb0 <rt_device_control+0x4c>
    }

    return -RT_ENOSYS;
80012cac:	ffa00793          	li	a5,-6
}
80012cb0:	00078513          	mv	a0,a5
80012cb4:	01c12083          	lw	ra,28(sp)
80012cb8:	01812403          	lw	s0,24(sp)
80012cbc:	02010113          	addi	sp,sp,32
80012cc0:	00008067          	ret

80012cc4 <rt_device_set_rx_indicate>:
 * @return RT_EOK
 */
rt_err_t rt_device_set_rx_indicate(rt_device_t dev,
                                   rt_err_t (*rx_ind)(rt_device_t dev,
                                   rt_size_t size))
{
80012cc4:	fe010113          	addi	sp,sp,-32
80012cc8:	00812e23          	sw	s0,28(sp)
80012ccc:	02010413          	addi	s0,sp,32
80012cd0:	fea42623          	sw	a0,-20(s0)
80012cd4:	feb42423          	sw	a1,-24(s0)
    /* parameter check */
    RT_ASSERT(dev != RT_NULL);
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);

    dev->rx_indicate = rx_ind;
80012cd8:	fec42783          	lw	a5,-20(s0)
80012cdc:	fe842703          	lw	a4,-24(s0)
80012ce0:	02e7a623          	sw	a4,44(a5)

    return RT_EOK;
80012ce4:	00000793          	li	a5,0
}
80012ce8:	00078513          	mv	a0,a5
80012cec:	01c12403          	lw	s0,28(sp)
80012cf0:	02010113          	addi	sp,sp,32
80012cf4:	00008067          	ret

80012cf8 <rt_list_insert_after>:
#ifdef RT_USING_SMP
#ifndef SYSTEM_THREAD_STACK_SIZE
#define SYSTEM_THREAD_STACK_SIZE IDLE_THREAD_STACK_SIZE
#endif
static struct rt_thread rt_system_thread;
ALIGN(RT_ALIGN_SIZE)
80012cf8:	fe010113          	addi	sp,sp,-32
80012cfc:	00812e23          	sw	s0,28(sp)
80012d00:	02010413          	addi	s0,sp,32
80012d04:	fea42623          	sw	a0,-20(s0)
80012d08:	feb42423          	sw	a1,-24(s0)
static rt_uint8_t rt_system_stack[SYSTEM_THREAD_STACK_SIZE];
80012d0c:	fec42783          	lw	a5,-20(s0)
80012d10:	0007a783          	lw	a5,0(a5)
80012d14:	fe842703          	lw	a4,-24(s0)
80012d18:	00e7a223          	sw	a4,4(a5)
static struct rt_semaphore system_sem;
80012d1c:	fec42783          	lw	a5,-20(s0)
80012d20:	0007a703          	lw	a4,0(a5)
80012d24:	fe842783          	lw	a5,-24(s0)
80012d28:	00e7a023          	sw	a4,0(a5)
#endif

80012d2c:	fec42783          	lw	a5,-20(s0)
80012d30:	fe842703          	lw	a4,-24(s0)
80012d34:	00e7a023          	sw	a4,0(a5)
#ifdef RT_USING_IDLE_HOOK
80012d38:	fe842783          	lw	a5,-24(s0)
80012d3c:	fec42703          	lw	a4,-20(s0)
80012d40:	00e7a223          	sw	a4,4(a5)
#ifndef RT_IDLE_HOOK_LIST_SIZE
80012d44:	00000013          	nop
80012d48:	01c12403          	lw	s0,28(sp)
80012d4c:	02010113          	addi	sp,sp,32
80012d50:	00008067          	ret

80012d54 <rt_list_remove>:
rt_err_t rt_thread_idle_sethook(void (*hook)(void))
{
    rt_size_t i;
    rt_base_t level;
    rt_err_t ret = -RT_EFULL;

80012d54:	fe010113          	addi	sp,sp,-32
80012d58:	00812e23          	sw	s0,28(sp)
80012d5c:	02010413          	addi	s0,sp,32
80012d60:	fea42623          	sw	a0,-20(s0)
    /* disable interrupt */
80012d64:	fec42783          	lw	a5,-20(s0)
80012d68:	0007a783          	lw	a5,0(a5)
80012d6c:	fec42703          	lw	a4,-20(s0)
80012d70:	00472703          	lw	a4,4(a4)
80012d74:	00e7a223          	sw	a4,4(a5)
    level = rt_hw_interrupt_disable();
80012d78:	fec42783          	lw	a5,-20(s0)
80012d7c:	0047a783          	lw	a5,4(a5)
80012d80:	fec42703          	lw	a4,-20(s0)
80012d84:	00072703          	lw	a4,0(a4)
80012d88:	00e7a023          	sw	a4,0(a5)

    for (i = 0; i < RT_IDLE_HOOK_LIST_SIZE; i++)
80012d8c:	fec42783          	lw	a5,-20(s0)
80012d90:	fec42703          	lw	a4,-20(s0)
80012d94:	00e7a223          	sw	a4,4(a5)
80012d98:	fec42783          	lw	a5,-20(s0)
80012d9c:	0047a703          	lw	a4,4(a5)
80012da0:	fec42783          	lw	a5,-20(s0)
80012da4:	00e7a023          	sw	a4,0(a5)
    {
80012da8:	00000013          	nop
80012dac:	01c12403          	lw	s0,28(sp)
80012db0:	02010113          	addi	sp,sp,32
80012db4:	00008067          	ret

80012db8 <rt_thread_defunct_enqueue>:
 * @brief Enqueue a thread to defunct queue.
 *
 * @note It must be called between rt_hw_interrupt_disable and rt_hw_interrupt_enable
 */
void rt_thread_defunct_enqueue(rt_thread_t thread)
{
80012db8:	fe010113          	addi	sp,sp,-32
80012dbc:	00112e23          	sw	ra,28(sp)
80012dc0:	00812c23          	sw	s0,24(sp)
80012dc4:	02010413          	addi	s0,sp,32
80012dc8:	fea42623          	sw	a0,-20(s0)
    rt_list_insert_after(&_rt_thread_defunct, &thread->tlist);
80012dcc:	fec42783          	lw	a5,-20(s0)
80012dd0:	02078793          	addi	a5,a5,32
80012dd4:	00078593          	mv	a1,a5
80012dd8:	00016517          	auipc	a0,0x16
80012ddc:	79050513          	addi	a0,a0,1936 # 80029568 <_rt_thread_defunct>
80012de0:	f19ff0ef          	jal	ra,80012cf8 <rt_list_insert_after>
#ifdef RT_USING_SMP
    rt_sem_release(&system_sem);
#endif
}
80012de4:	00000013          	nop
80012de8:	01c12083          	lw	ra,28(sp)
80012dec:	01812403          	lw	s0,24(sp)
80012df0:	02010113          	addi	sp,sp,32
80012df4:	00008067          	ret

80012df8 <rt_thread_defunct_dequeue>:

/**
 * @brief Dequeue a thread from defunct queue.
 */
rt_thread_t rt_thread_defunct_dequeue(void)
{
80012df8:	fe010113          	addi	sp,sp,-32
80012dfc:	00112e23          	sw	ra,28(sp)
80012e00:	00812c23          	sw	s0,24(sp)
80012e04:	02010413          	addi	s0,sp,32
    rt_base_t level;
    rt_thread_t thread = RT_NULL;
80012e08:	fe042623          	sw	zero,-20(s0)
    rt_list_t *l = &_rt_thread_defunct;
80012e0c:	00016797          	auipc	a5,0x16
80012e10:	75c78793          	addi	a5,a5,1884 # 80029568 <_rt_thread_defunct>
80012e14:	fef42423          	sw	a5,-24(s0)
                tlist);
        rt_list_remove(&(thread->tlist));
    }
    rt_hw_interrupt_enable(level);
#else
    if (l->next != l)
80012e18:	fe842783          	lw	a5,-24(s0)
80012e1c:	0007a783          	lw	a5,0(a5)
80012e20:	fe842703          	lw	a4,-24(s0)
80012e24:	02f70a63          	beq	a4,a5,80012e58 <rt_thread_defunct_dequeue+0x60>
    {
        thread = rt_list_entry(l->next,
80012e28:	fe842783          	lw	a5,-24(s0)
80012e2c:	0007a783          	lw	a5,0(a5)
80012e30:	fe078793          	addi	a5,a5,-32
80012e34:	fef42623          	sw	a5,-20(s0)
                struct rt_thread,
                tlist);
        level = rt_hw_interrupt_disable();
80012e38:	a68ed0ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80012e3c:	fea42223          	sw	a0,-28(s0)
        rt_list_remove(&(thread->tlist));
80012e40:	fec42783          	lw	a5,-20(s0)
80012e44:	02078793          	addi	a5,a5,32
80012e48:	00078513          	mv	a0,a5
80012e4c:	f09ff0ef          	jal	ra,80012d54 <rt_list_remove>
        rt_hw_interrupt_enable(level);
80012e50:	fe442503          	lw	a0,-28(s0)
80012e54:	a54ed0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
    }
#endif
    return thread;
80012e58:	fec42783          	lw	a5,-20(s0)
}
80012e5c:	00078513          	mv	a0,a5
80012e60:	01c12083          	lw	ra,28(sp)
80012e64:	01812403          	lw	s0,24(sp)
80012e68:	02010113          	addi	sp,sp,32
80012e6c:	00008067          	ret

80012e70 <rt_defunct_execute>:

/**
 * @brief This function will perform system background job when system idle.
 */
static void rt_defunct_execute(void)
{
80012e70:	fe010113          	addi	sp,sp,-32
80012e74:	00112e23          	sw	ra,28(sp)
80012e78:	00812c23          	sw	s0,24(sp)
80012e7c:	02010413          	addi	s0,sp,32

#ifdef RT_USING_MODULE
        struct rt_dlmodule *module = RT_NULL;
#endif
        /* get defunct thread */
        thread = rt_thread_defunct_dequeue();
80012e80:	f79ff0ef          	jal	ra,80012df8 <rt_thread_defunct_dequeue>
80012e84:	fea42623          	sw	a0,-20(s0)
        if (thread == RT_NULL)
80012e88:	fec42783          	lw	a5,-20(s0)
80012e8c:	06078463          	beqz	a5,80012ef4 <rt_defunct_execute+0x84>
#ifdef RT_USING_SIGNALS
        rt_thread_free_sig(thread);
#endif

        /* store the point of "thread->cleanup" avoid to lose */
        cleanup = thread->cleanup;
80012e90:	fec42783          	lw	a5,-20(s0)
80012e94:	0907a783          	lw	a5,144(a5)
80012e98:	fef42423          	sw	a5,-24(s0)

        /* if it's a system object, not delete it */
        object_is_systemobject = rt_object_is_systemobject((rt_object_t)thread);
80012e9c:	fec42503          	lw	a0,-20(s0)
80012ea0:	3e9030ef          	jal	ra,80016a88 <rt_object_is_systemobject>
80012ea4:	fea42223          	sw	a0,-28(s0)
        if (object_is_systemobject == RT_TRUE)
80012ea8:	fe442703          	lw	a4,-28(s0)
80012eac:	00100793          	li	a5,1
80012eb0:	00f71663          	bne	a4,a5,80012ebc <rt_defunct_execute+0x4c>
        {
            /* detach this object */
            rt_object_detach((rt_object_t)thread);
80012eb4:	fec42503          	lw	a0,-20(s0)
80012eb8:	1ed030ef          	jal	ra,800168a4 <rt_object_detach>
        }

        /* invoke thread cleanup */
        if (cleanup != RT_NULL)
80012ebc:	fe842783          	lw	a5,-24(s0)
80012ec0:	00078863          	beqz	a5,80012ed0 <rt_defunct_execute+0x60>
        {
            cleanup(thread);
80012ec4:	fe842783          	lw	a5,-24(s0)
80012ec8:	fec42503          	lw	a0,-20(s0)
80012ecc:	000780e7          	jalr	a5
        }

#ifdef RT_USING_HEAP
        /* if need free, delete it */
        if (object_is_systemobject == RT_FALSE)
80012ed0:	fe442783          	lw	a5,-28(s0)
80012ed4:	fa0796e3          	bnez	a5,80012e80 <rt_defunct_execute+0x10>
        {
            /* release thread's stack */
            RT_KERNEL_FREE(thread->stack_addr);
80012ed8:	fec42783          	lw	a5,-20(s0)
80012edc:	0347a783          	lw	a5,52(a5)
80012ee0:	00078513          	mv	a0,a5
80012ee4:	734020ef          	jal	ra,80015618 <rt_free>
            /* delete thread object */
            rt_object_delete((rt_object_t)thread);
80012ee8:	fec42503          	lw	a0,-20(s0)
80012eec:	321030ef          	jal	ra,80016a0c <rt_object_delete>
    {
80012ef0:	f91ff06f          	j	80012e80 <rt_defunct_execute+0x10>
            break;
80012ef4:	00000013          	nop
        }
#endif
    }
}
80012ef8:	00000013          	nop
80012efc:	01c12083          	lw	ra,28(sp)
80012f00:	01812403          	lw	s0,24(sp)
80012f04:	02010113          	addi	sp,sp,32
80012f08:	00008067          	ret

80012f0c <idle_thread_entry>:

static void idle_thread_entry(void *parameter)
{
80012f0c:	fd010113          	addi	sp,sp,-48
80012f10:	02112623          	sw	ra,44(sp)
80012f14:	02812423          	sw	s0,40(sp)
80012f18:	03010413          	addi	s0,sp,48
80012f1c:	fca42e23          	sw	a0,-36(s0)
    {
#ifdef RT_USING_IDLE_HOOK
        rt_size_t i;
        void (*idle_hook)(void);

        for (i = 0; i < RT_IDLE_HOOK_LIST_SIZE; i++)
80012f20:	fe042623          	sw	zero,-20(s0)
80012f24:	03c0006f          	j	80012f60 <idle_thread_entry+0x54>
        {
            idle_hook = idle_hook_list[i];
80012f28:	00073717          	auipc	a4,0x73
80012f2c:	4b870713          	addi	a4,a4,1208 # 800863e0 <idle_hook_list>
80012f30:	fec42783          	lw	a5,-20(s0)
80012f34:	00279793          	slli	a5,a5,0x2
80012f38:	00f707b3          	add	a5,a4,a5
80012f3c:	0007a783          	lw	a5,0(a5)
80012f40:	fef42423          	sw	a5,-24(s0)
            if (idle_hook != RT_NULL)
80012f44:	fe842783          	lw	a5,-24(s0)
80012f48:	00078663          	beqz	a5,80012f54 <idle_thread_entry+0x48>
            {
                idle_hook();
80012f4c:	fe842783          	lw	a5,-24(s0)
80012f50:	000780e7          	jalr	a5
        for (i = 0; i < RT_IDLE_HOOK_LIST_SIZE; i++)
80012f54:	fec42783          	lw	a5,-20(s0)
80012f58:	00178793          	addi	a5,a5,1
80012f5c:	fef42623          	sw	a5,-20(s0)
80012f60:	fec42703          	lw	a4,-20(s0)
80012f64:	00300793          	li	a5,3
80012f68:	fce7f0e3          	bgeu	a5,a4,80012f28 <idle_thread_entry+0x1c>
            }
        }
#endif /* RT_USING_IDLE_HOOK */

#ifndef RT_USING_SMP
        rt_defunct_execute();
80012f6c:	f05ff0ef          	jal	ra,80012e70 <rt_defunct_execute>
    {
80012f70:	fb1ff06f          	j	80012f20 <idle_thread_entry+0x14>

80012f74 <rt_thread_idle_init>:
 * @brief This function will initialize idle thread, then start it.
 *
 * @note this function must be invoked when system init.
 */
void rt_thread_idle_init(void)
{
80012f74:	fd010113          	addi	sp,sp,-48
80012f78:	02112623          	sw	ra,44(sp)
80012f7c:	02812423          	sw	s0,40(sp)
80012f80:	03010413          	addi	s0,sp,48
    rt_ubase_t i;
    char idle_thread_name[RT_NAME_MAX];

    for (i = 0; i < _CPUS_NR; i++)
80012f84:	fe042623          	sw	zero,-20(s0)
80012f88:	0940006f          	j	8001301c <rt_thread_idle_init+0xa8>
    {
        rt_sprintf(idle_thread_name, "tidle%d", i);
80012f8c:	fd840793          	addi	a5,s0,-40
80012f90:	fec42603          	lw	a2,-20(s0)
80012f94:	00014597          	auipc	a1,0x14
80012f98:	50058593          	addi	a1,a1,1280 # 80027494 <raise+0x18a0>
80012f9c:	00078513          	mv	a0,a5
80012fa0:	128020ef          	jal	ra,800150c8 <rt_sprintf>
        rt_thread_init(&idle_thread[i],
80012fa4:	fec42703          	lw	a4,-20(s0)
80012fa8:	09800793          	li	a5,152
80012fac:	02f70733          	mul	a4,a4,a5
80012fb0:	00072797          	auipc	a5,0x72
80012fb4:	39878793          	addi	a5,a5,920 # 80085348 <idle_thread>
80012fb8:	00f70533          	add	a0,a4,a5
                idle_thread_name,
                idle_thread_entry,
                RT_NULL,
                &idle_thread_stack[i][0],
80012fbc:	fec42783          	lw	a5,-20(s0)
80012fc0:	00c79713          	slli	a4,a5,0xc
80012fc4:	00072797          	auipc	a5,0x72
80012fc8:	41c78793          	addi	a5,a5,1052 # 800853e0 <idle_thread_stack>
80012fcc:	00f70733          	add	a4,a4,a5
        rt_thread_init(&idle_thread[i],
80012fd0:	fd840593          	addi	a1,s0,-40
80012fd4:	02000893          	li	a7,32
80012fd8:	01f00813          	li	a6,31
80012fdc:	000017b7          	lui	a5,0x1
80012fe0:	00000693          	li	a3,0
80012fe4:	00000617          	auipc	a2,0x0
80012fe8:	f2860613          	addi	a2,a2,-216 # 80012f0c <idle_thread_entry>
80012fec:	750040ef          	jal	ra,8001773c <rt_thread_init>
                32);
#ifdef RT_USING_SMP
        rt_thread_control(&idle_thread[i], RT_THREAD_CTRL_BIND_CPU, (void*)i);
#endif /* RT_USING_SMP */
        /* startup */
        rt_thread_startup(&idle_thread[i]);
80012ff0:	fec42703          	lw	a4,-20(s0)
80012ff4:	09800793          	li	a5,152
80012ff8:	02f70733          	mul	a4,a4,a5
80012ffc:	00072797          	auipc	a5,0x72
80013000:	34c78793          	addi	a5,a5,844 # 80085348 <idle_thread>
80013004:	00f707b3          	add	a5,a4,a5
80013008:	00078513          	mv	a0,a5
8001300c:	7dc040ef          	jal	ra,800177e8 <rt_thread_startup>
    for (i = 0; i < _CPUS_NR; i++)
80013010:	fec42783          	lw	a5,-20(s0)
80013014:	00178793          	addi	a5,a5,1
80013018:	fef42623          	sw	a5,-20(s0)
8001301c:	fec42783          	lw	a5,-20(s0)
80013020:	f60786e3          	beqz	a5,80012f8c <rt_thread_idle_init+0x18>
            RT_THREAD_PRIORITY_MAX - 2,
            32);
    /* startup */
    rt_thread_startup(&rt_system_thread);
#endif
}
80013024:	00000013          	nop
80013028:	00000013          	nop
8001302c:	02c12083          	lw	ra,44(sp)
80013030:	02812403          	lw	s0,40(sp)
80013034:	03010113          	addi	sp,sp,48
80013038:	00008067          	ret

8001303c <rt_list_init>:
 * 2022-01-24     THEWON       let rt_mutex_take return thread->error when using signal
 * 2022-04-08     Stanley      Correct descriptions
 */

#include <rtthread.h>
#include <rthw.h>
8001303c:	fe010113          	addi	sp,sp,-32
80013040:	00812e23          	sw	s0,28(sp)
80013044:	02010413          	addi	s0,sp,32
80013048:	fea42623          	sw	a0,-20(s0)

8001304c:	fec42783          	lw	a5,-20(s0)
80013050:	fec42703          	lw	a4,-20(s0)
80013054:	00e7a223          	sw	a4,4(a5)
80013058:	fec42783          	lw	a5,-20(s0)
8001305c:	0047a703          	lw	a4,4(a5)
80013060:	fec42783          	lw	a5,-20(s0)
80013064:	00e7a023          	sw	a4,0(a5)
#ifndef __on_rt_object_trytake_hook
80013068:	00000013          	nop
8001306c:	01c12403          	lw	s0,28(sp)
80013070:	02010113          	addi	sp,sp,32
80013074:	00008067          	ret

80013078 <rt_list_insert_before>:

/**@{*/

/**
 * @brief    This function will initialize an IPC object, such as semaphore, mutex, messagequeue and mailbox.
 *
80013078:	fe010113          	addi	sp,sp,-32
8001307c:	00812e23          	sw	s0,28(sp)
80013080:	02010413          	addi	s0,sp,32
80013084:	fea42623          	sw	a0,-20(s0)
80013088:	feb42423          	sw	a1,-24(s0)
 * @note     Executing this function will complete an initialization of the suspend thread list of the ipc object.
8001308c:	fec42783          	lw	a5,-20(s0)
80013090:	0047a783          	lw	a5,4(a5)
80013094:	fe842703          	lw	a4,-24(s0)
80013098:	00e7a023          	sw	a4,0(a5)
 *
8001309c:	fec42783          	lw	a5,-20(s0)
800130a0:	0047a703          	lw	a4,4(a5)
800130a4:	fe842783          	lw	a5,-24(s0)
800130a8:	00e7a223          	sw	a4,4(a5)
 * @param    ipc is a pointer to the IPC object.
 *
800130ac:	fec42783          	lw	a5,-20(s0)
800130b0:	fe842703          	lw	a4,-24(s0)
800130b4:	00e7a223          	sw	a4,4(a5)
 * @return   Return the operation status. When the return value is RT_EOK, the initialization is successful.
800130b8:	fe842783          	lw	a5,-24(s0)
800130bc:	fec42703          	lw	a4,-20(s0)
800130c0:	00e7a023          	sw	a4,0(a5)
 *           When the return value is any other values, it means the initialization failed.
800130c4:	00000013          	nop
800130c8:	01c12403          	lw	s0,28(sp)
800130cc:	02010113          	addi	sp,sp,32
800130d0:	00008067          	ret

800130d4 <rt_list_isempty>:
 * @brief    This function will suspend a thread to a IPC object list.
 *
 * @param    list is a pointer to a suspended thread list of the IPC object.
 *
 * @param    thread is a pointer to the thread object to be suspended.
 *
800130d4:	fe010113          	addi	sp,sp,-32
800130d8:	00812e23          	sw	s0,28(sp)
800130dc:	02010413          	addi	s0,sp,32
800130e0:	fea42623          	sw	a0,-20(s0)
 * @param    flag is a flag for the thread object to be suspended. It determines how the thread is suspended.
800130e4:	fec42783          	lw	a5,-20(s0)
800130e8:	0007a783          	lw	a5,0(a5)
800130ec:	fec42703          	lw	a4,-20(s0)
800130f0:	40f707b3          	sub	a5,a4,a5
800130f4:	0017b793          	seqz	a5,a5
800130f8:	0ff7f793          	zext.b	a5,a5
 *           The flag can be ONE of the following values:
800130fc:	00078513          	mv	a0,a5
80013100:	01c12403          	lw	s0,28(sp)
80013104:	02010113          	addi	sp,sp,32
80013108:	00008067          	ret

8001310c <_ipc_object_init>:
{
8001310c:	fe010113          	addi	sp,sp,-32
80013110:	00112e23          	sw	ra,28(sp)
80013114:	00812c23          	sw	s0,24(sp)
80013118:	02010413          	addi	s0,sp,32
8001311c:	fea42623          	sw	a0,-20(s0)
    rt_list_init(&(ipc->suspend_thread));
80013120:	fec42783          	lw	a5,-20(s0)
80013124:	02078793          	addi	a5,a5,32
80013128:	00078513          	mv	a0,a5
8001312c:	f11ff0ef          	jal	ra,8001303c <rt_list_init>
    return RT_EOK;
80013130:	00000793          	li	a5,0
}
80013134:	00078513          	mv	a0,a5
80013138:	01c12083          	lw	ra,28(sp)
8001313c:	01812403          	lw	s0,24(sp)
80013140:	02010113          	addi	sp,sp,32
80013144:	00008067          	ret

80013148 <_ipc_list_suspend>:
 *           rt_mb_recv(),   rt_mq_recv(),     rt_mq_send_wait()
 */
rt_inline rt_err_t _ipc_list_suspend(rt_list_t        *list,
                                     struct rt_thread *thread,
                                     rt_uint8_t        flag)
{
80013148:	fd010113          	addi	sp,sp,-48
8001314c:	02112623          	sw	ra,44(sp)
80013150:	02812423          	sw	s0,40(sp)
80013154:	03010413          	addi	s0,sp,48
80013158:	fca42e23          	sw	a0,-36(s0)
8001315c:	fcb42c23          	sw	a1,-40(s0)
80013160:	00060793          	mv	a5,a2
80013164:	fcf40ba3          	sb	a5,-41(s0)
    /* suspend thread */
    rt_thread_suspend(thread);
80013168:	fd842503          	lw	a0,-40(s0)
8001316c:	215040ef          	jal	ra,80017b80 <rt_thread_suspend>

    switch (flag)
80013170:	fd744783          	lbu	a5,-41(s0)
80013174:	00078863          	beqz	a5,80013184 <_ipc_list_suspend+0x3c>
80013178:	00100713          	li	a4,1
8001317c:	02e78063          	beq	a5,a4,8001319c <_ipc_list_suspend+0x54>
        }
        break;/* RT_IPC_FLAG_PRIO */

    default:
        RT_ASSERT(0);
        break;
80013180:	0a80006f          	j	80013228 <_ipc_list_suspend+0xe0>
        rt_list_insert_before(list, &(thread->tlist));
80013184:	fd842783          	lw	a5,-40(s0)
80013188:	02078793          	addi	a5,a5,32
8001318c:	00078593          	mv	a1,a5
80013190:	fdc42503          	lw	a0,-36(s0)
80013194:	ee5ff0ef          	jal	ra,80013078 <rt_list_insert_before>
        break; /* RT_IPC_FLAG_FIFO */
80013198:	0900006f          	j	80013228 <_ipc_list_suspend+0xe0>
            for (n = list->next; n != list; n = n->next)
8001319c:	fdc42783          	lw	a5,-36(s0)
800131a0:	0007a783          	lw	a5,0(a5)
800131a4:	fef42623          	sw	a5,-20(s0)
800131a8:	0500006f          	j	800131f8 <_ipc_list_suspend+0xb0>
                sthread = rt_list_entry(n, struct rt_thread, tlist);
800131ac:	fec42783          	lw	a5,-20(s0)
800131b0:	fe078793          	addi	a5,a5,-32
800131b4:	fef42423          	sw	a5,-24(s0)
                if (thread->current_priority < sthread->current_priority)
800131b8:	fd842783          	lw	a5,-40(s0)
800131bc:	0417c703          	lbu	a4,65(a5)
800131c0:	fe842783          	lw	a5,-24(s0)
800131c4:	0417c783          	lbu	a5,65(a5)
800131c8:	02f77263          	bgeu	a4,a5,800131ec <_ipc_list_suspend+0xa4>
                    rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
800131cc:	fe842783          	lw	a5,-24(s0)
800131d0:	02078713          	addi	a4,a5,32
800131d4:	fd842783          	lw	a5,-40(s0)
800131d8:	02078793          	addi	a5,a5,32
800131dc:	00078593          	mv	a1,a5
800131e0:	00070513          	mv	a0,a4
800131e4:	e95ff0ef          	jal	ra,80013078 <rt_list_insert_before>
                    break;
800131e8:	01c0006f          	j	80013204 <_ipc_list_suspend+0xbc>
            for (n = list->next; n != list; n = n->next)
800131ec:	fec42783          	lw	a5,-20(s0)
800131f0:	0007a783          	lw	a5,0(a5)
800131f4:	fef42623          	sw	a5,-20(s0)
800131f8:	fec42703          	lw	a4,-20(s0)
800131fc:	fdc42783          	lw	a5,-36(s0)
80013200:	faf716e3          	bne	a4,a5,800131ac <_ipc_list_suspend+0x64>
            if (n == list)
80013204:	fec42703          	lw	a4,-20(s0)
80013208:	fdc42783          	lw	a5,-36(s0)
8001320c:	00f71c63          	bne	a4,a5,80013224 <_ipc_list_suspend+0xdc>
                rt_list_insert_before(list, &(thread->tlist));
80013210:	fd842783          	lw	a5,-40(s0)
80013214:	02078793          	addi	a5,a5,32
80013218:	00078593          	mv	a1,a5
8001321c:	fdc42503          	lw	a0,-36(s0)
80013220:	e59ff0ef          	jal	ra,80013078 <rt_list_insert_before>
        break;/* RT_IPC_FLAG_PRIO */
80013224:	00000013          	nop
    }

    return RT_EOK;
80013228:	00000793          	li	a5,0
}
8001322c:	00078513          	mv	a0,a5
80013230:	02c12083          	lw	ra,44(sp)
80013234:	02812403          	lw	s0,40(sp)
80013238:	03010113          	addi	sp,sp,48
8001323c:	00008067          	ret

80013240 <_ipc_list_resume>:
 * @warning  This function is generally called by the following functions:
 *           rt_sem_release(),    rt_mutex_release(),    rt_mb_send_wait(),    rt_mq_send_wait(),
 *           rt_mb_urgent(),      rt_mb_recv(),          rt_mq_urgent(),       rt_mq_recv(),
 */
rt_inline rt_err_t _ipc_list_resume(rt_list_t *list)
{
80013240:	fd010113          	addi	sp,sp,-48
80013244:	02112623          	sw	ra,44(sp)
80013248:	02812423          	sw	s0,40(sp)
8001324c:	03010413          	addi	s0,sp,48
80013250:	fca42e23          	sw	a0,-36(s0)
    struct rt_thread *thread;

    /* get thread entry */
    thread = rt_list_entry(list->next, struct rt_thread, tlist);
80013254:	fdc42783          	lw	a5,-36(s0)
80013258:	0007a783          	lw	a5,0(a5)
8001325c:	fe078793          	addi	a5,a5,-32
80013260:	fef42623          	sw	a5,-20(s0)

    RT_DEBUG_LOG(RT_DEBUG_IPC, ("resume thread:%s\n", thread->name));

    /* resume it */
    rt_thread_resume(thread);
80013264:	fec42503          	lw	a0,-20(s0)
80013268:	1f5040ef          	jal	ra,80017c5c <rt_thread_resume>

    return RT_EOK;
8001326c:	00000793          	li	a5,0
}
80013270:	00078513          	mv	a0,a5
80013274:	02c12083          	lw	ra,44(sp)
80013278:	02812403          	lw	s0,40(sp)
8001327c:	03010113          	addi	sp,sp,48
80013280:	00008067          	ret

80013284 <rt_sem_init>:
 */
rt_err_t rt_sem_init(rt_sem_t    sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
80013284:	fe010113          	addi	sp,sp,-32
80013288:	00112e23          	sw	ra,28(sp)
8001328c:	00812c23          	sw	s0,24(sp)
80013290:	02010413          	addi	s0,sp,32
80013294:	fea42623          	sw	a0,-20(s0)
80013298:	feb42423          	sw	a1,-24(s0)
8001329c:	fec42223          	sw	a2,-28(s0)
800132a0:	00068793          	mv	a5,a3
800132a4:	fef401a3          	sb	a5,-29(s0)
    RT_ASSERT(sem != RT_NULL);
    RT_ASSERT(value < 0x10000U);
    RT_ASSERT((flag == RT_IPC_FLAG_FIFO) || (flag == RT_IPC_FLAG_PRIO));

    /* initialize object */
    rt_object_init(&(sem->parent.parent), RT_Object_Class_Semaphore, name);
800132a8:	fec42783          	lw	a5,-20(s0)
800132ac:	fe842603          	lw	a2,-24(s0)
800132b0:	00200593          	li	a1,2
800132b4:	00078513          	mv	a0,a5
800132b8:	534030ef          	jal	ra,800167ec <rt_object_init>

    /* initialize ipc object */
    _ipc_object_init(&(sem->parent));
800132bc:	fec42783          	lw	a5,-20(s0)
800132c0:	00078513          	mv	a0,a5
800132c4:	e49ff0ef          	jal	ra,8001310c <_ipc_object_init>

    /* set initial value */
    sem->value = (rt_uint16_t)value;
800132c8:	fe442783          	lw	a5,-28(s0)
800132cc:	01079713          	slli	a4,a5,0x10
800132d0:	01075713          	srli	a4,a4,0x10
800132d4:	fec42783          	lw	a5,-20(s0)
800132d8:	02e79423          	sh	a4,40(a5)

    /* set parent */
    sem->parent.parent.flag = flag;
800132dc:	fec42783          	lw	a5,-20(s0)
800132e0:	fe344703          	lbu	a4,-29(s0)
800132e4:	00e78aa3          	sb	a4,21(a5)

    return RT_EOK;
800132e8:	00000793          	li	a5,0
}
800132ec:	00078513          	mv	a0,a5
800132f0:	01c12083          	lw	ra,28(sp)
800132f4:	01812403          	lw	s0,24(sp)
800132f8:	02010113          	addi	sp,sp,32
800132fc:	00008067          	ret

80013300 <rt_sem_take>:
 *           If the return value is any other values, it means that the semaphore take failed.
 *
 * @warning  This function can ONLY be called in the thread context. It MUST NOT BE called in interrupt context.
 */
rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t timeout)
{
80013300:	fd010113          	addi	sp,sp,-48
80013304:	02112623          	sw	ra,44(sp)
80013308:	02812423          	sw	s0,40(sp)
8001330c:	03010413          	addi	s0,sp,48
80013310:	fca42e23          	sw	a0,-36(s0)
80013314:	fcb42c23          	sw	a1,-40(s0)

    /* parameter check */
    RT_ASSERT(sem != RT_NULL);
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(sem->parent.parent)));
80013318:	00071797          	auipc	a5,0x71
8001331c:	d4c78793          	addi	a5,a5,-692 # 80084064 <rt_object_trytake_hook>
80013320:	0007a783          	lw	a5,0(a5)
80013324:	00078e63          	beqz	a5,80013340 <rt_sem_take+0x40>
80013328:	00071797          	auipc	a5,0x71
8001332c:	d3c78793          	addi	a5,a5,-708 # 80084064 <rt_object_trytake_hook>
80013330:	0007a783          	lw	a5,0(a5)
80013334:	fdc42703          	lw	a4,-36(s0)
80013338:	00070513          	mv	a0,a4
8001333c:	000780e7          	jalr	a5

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
80013340:	d61ec0ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80013344:	fea42623          	sw	a0,-20(s0)
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s take sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (sem->value > 0)
80013348:	fdc42783          	lw	a5,-36(s0)
8001334c:	0287d783          	lhu	a5,40(a5)
80013350:	02078663          	beqz	a5,8001337c <rt_sem_take+0x7c>
    {
        /* semaphore is available */
        sem->value --;
80013354:	fdc42783          	lw	a5,-36(s0)
80013358:	0287d783          	lhu	a5,40(a5)
8001335c:	fff78793          	addi	a5,a5,-1
80013360:	01079713          	slli	a4,a5,0x10
80013364:	01075713          	srli	a4,a4,0x10
80013368:	fdc42783          	lw	a5,-36(s0)
8001336c:	02e79423          	sh	a4,40(a5)

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
80013370:	fec42503          	lw	a0,-20(s0)
80013374:	d35ec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
80013378:	0a40006f          	j	8001341c <rt_sem_take+0x11c>
    }
    else
    {
        /* no waiting, return with timeout */
        if (timeout == 0)
8001337c:	fd842783          	lw	a5,-40(s0)
80013380:	00079a63          	bnez	a5,80013394 <rt_sem_take+0x94>
        {
            rt_hw_interrupt_enable(level);
80013384:	fec42503          	lw	a0,-20(s0)
80013388:	d21ec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

            return -RT_ETIMEOUT;
8001338c:	ffe00793          	li	a5,-2
80013390:	0b80006f          	j	80013448 <rt_sem_take+0x148>
            /* current context checking */
            RT_DEBUG_SCHEDULER_AVAILABLE(RT_TRUE);

            /* semaphore is unavailable, push to suspend list */
            /* get current thread */
            thread = rt_thread_self();
80013394:	42c040ef          	jal	ra,800177c0 <rt_thread_self>
80013398:	fea42423          	sw	a0,-24(s0)

            /* reset thread error number */
            thread->error = RT_EOK;
8001339c:	fe842783          	lw	a5,-24(s0)
800133a0:	0207ae23          	sw	zero,60(a5)

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("sem take: suspend thread - %s\n",
                                        thread->name));

            /* suspend thread */
            _ipc_list_suspend(&(sem->parent.suspend_thread),
800133a4:	fdc42783          	lw	a5,-36(s0)
800133a8:	02078713          	addi	a4,a5,32
800133ac:	fdc42783          	lw	a5,-36(s0)
800133b0:	0157c783          	lbu	a5,21(a5)
800133b4:	00078613          	mv	a2,a5
800133b8:	fe842583          	lw	a1,-24(s0)
800133bc:	00070513          	mv	a0,a4
800133c0:	d89ff0ef          	jal	ra,80013148 <_ipc_list_suspend>
                                thread,
                                sem->parent.parent.flag);

            /* has waiting time, start thread timer */
            if (timeout > 0)
800133c4:	fd842783          	lw	a5,-40(s0)
800133c8:	02f05863          	blez	a5,800133f8 <rt_sem_take+0xf8>
            {
                RT_DEBUG_LOG(RT_DEBUG_IPC, ("set thread:%s to timer list\n",
                                            thread->name));

                /* reset the timeout of thread timer and start it */
                rt_timer_control(&(thread->thread_timer),
800133cc:	fe842783          	lw	a5,-24(s0)
800133d0:	05878793          	addi	a5,a5,88
800133d4:	fd840713          	addi	a4,s0,-40
800133d8:	00070613          	mv	a2,a4
800133dc:	00000593          	li	a1,0
800133e0:	00078513          	mv	a0,a5
800133e4:	7bd040ef          	jal	ra,800183a0 <rt_timer_control>
                                 RT_TIMER_CTRL_SET_TIME,
                                 &timeout);
                rt_timer_start(&(thread->thread_timer));
800133e8:	fe842783          	lw	a5,-24(s0)
800133ec:	05878793          	addi	a5,a5,88
800133f0:	00078513          	mv	a0,a5
800133f4:	441040ef          	jal	ra,80018034 <rt_timer_start>
            }

            /* enable interrupt */
            rt_hw_interrupt_enable(level);
800133f8:	fec42503          	lw	a0,-20(s0)
800133fc:	cadec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

            /* do schedule */
            rt_schedule();
80013400:	281030ef          	jal	ra,80016e80 <rt_schedule>

            if (thread->error != RT_EOK)
80013404:	fe842783          	lw	a5,-24(s0)
80013408:	03c7a783          	lw	a5,60(a5)
8001340c:	00078863          	beqz	a5,8001341c <rt_sem_take+0x11c>
            {
                return thread->error;
80013410:	fe842783          	lw	a5,-24(s0)
80013414:	03c7a783          	lw	a5,60(a5)
80013418:	0300006f          	j	80013448 <rt_sem_take+0x148>
            }
        }
    }

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(sem->parent.parent)));
8001341c:	00071797          	auipc	a5,0x71
80013420:	c4c78793          	addi	a5,a5,-948 # 80084068 <rt_object_take_hook>
80013424:	0007a783          	lw	a5,0(a5)
80013428:	00078e63          	beqz	a5,80013444 <rt_sem_take+0x144>
8001342c:	00071797          	auipc	a5,0x71
80013430:	c3c78793          	addi	a5,a5,-964 # 80084068 <rt_object_take_hook>
80013434:	0007a783          	lw	a5,0(a5)
80013438:	fdc42703          	lw	a4,-36(s0)
8001343c:	00070513          	mv	a0,a4
80013440:	000780e7          	jalr	a5

    return RT_EOK;
80013444:	00000793          	li	a5,0
}
80013448:	00078513          	mv	a0,a5
8001344c:	02c12083          	lw	ra,44(sp)
80013450:	02812403          	lw	s0,40(sp)
80013454:	03010113          	addi	sp,sp,48
80013458:	00008067          	ret

8001345c <rt_sem_release>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that the semaphore release failed.
 */
rt_err_t rt_sem_release(rt_sem_t sem)
{
8001345c:	fd010113          	addi	sp,sp,-48
80013460:	02112623          	sw	ra,44(sp)
80013464:	02812423          	sw	s0,40(sp)
80013468:	03010413          	addi	s0,sp,48
8001346c:	fca42e23          	sw	a0,-36(s0)

    /* parameter check */
    RT_ASSERT(sem != RT_NULL);
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(sem->parent.parent)));
80013470:	00071797          	auipc	a5,0x71
80013474:	bfc78793          	addi	a5,a5,-1028 # 8008406c <rt_object_put_hook>
80013478:	0007a783          	lw	a5,0(a5)
8001347c:	00078e63          	beqz	a5,80013498 <rt_sem_release+0x3c>
80013480:	00071797          	auipc	a5,0x71
80013484:	bec78793          	addi	a5,a5,-1044 # 8008406c <rt_object_put_hook>
80013488:	0007a783          	lw	a5,0(a5)
8001348c:	fdc42703          	lw	a4,-36(s0)
80013490:	00070513          	mv	a0,a4
80013494:	000780e7          	jalr	a5

    need_schedule = RT_FALSE;
80013498:	fe042623          	sw	zero,-20(s0)

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
8001349c:	c05ec0ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
800134a0:	fea42423          	sw	a0,-24(s0)
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s releases sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (!rt_list_isempty(&sem->parent.suspend_thread))
800134a4:	fdc42783          	lw	a5,-36(s0)
800134a8:	02078793          	addi	a5,a5,32
800134ac:	00078513          	mv	a0,a5
800134b0:	c25ff0ef          	jal	ra,800130d4 <rt_list_isempty>
800134b4:	00050793          	mv	a5,a0
800134b8:	02079063          	bnez	a5,800134d8 <rt_sem_release+0x7c>
    {
        /* resume the suspended thread */
        _ipc_list_resume(&(sem->parent.suspend_thread));
800134bc:	fdc42783          	lw	a5,-36(s0)
800134c0:	02078793          	addi	a5,a5,32
800134c4:	00078513          	mv	a0,a5
800134c8:	d79ff0ef          	jal	ra,80013240 <_ipc_list_resume>
        need_schedule = RT_TRUE;
800134cc:	00100793          	li	a5,1
800134d0:	fef42623          	sw	a5,-20(s0)
800134d4:	0480006f          	j	8001351c <rt_sem_release+0xc0>
    }
    else
    {
        if(sem->value < RT_SEM_VALUE_MAX)
800134d8:	fdc42783          	lw	a5,-36(s0)
800134dc:	0287d703          	lhu	a4,40(a5)
800134e0:	000107b7          	lui	a5,0x10
800134e4:	fff78793          	addi	a5,a5,-1 # ffff <__STACKSIZE__+0xbfff>
800134e8:	02f70263          	beq	a4,a5,8001350c <rt_sem_release+0xb0>
        {
            sem->value ++; /* increase value */
800134ec:	fdc42783          	lw	a5,-36(s0)
800134f0:	0287d783          	lhu	a5,40(a5)
800134f4:	00178793          	addi	a5,a5,1
800134f8:	01079713          	slli	a4,a5,0x10
800134fc:	01075713          	srli	a4,a4,0x10
80013500:	fdc42783          	lw	a5,-36(s0)
80013504:	02e79423          	sh	a4,40(a5)
80013508:	0140006f          	j	8001351c <rt_sem_release+0xc0>
        }
        else
        {
            rt_hw_interrupt_enable(level); /* enable interrupt */
8001350c:	fe842503          	lw	a0,-24(s0)
80013510:	b99ec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
            return -RT_EFULL; /* value overflowed */
80013514:	ffd00793          	li	a5,-3
80013518:	0200006f          	j	80013538 <rt_sem_release+0xdc>
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
8001351c:	fe842503          	lw	a0,-24(s0)
80013520:	b89ec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    /* resume a thread, re-schedule */
    if (need_schedule == RT_TRUE)
80013524:	fec42703          	lw	a4,-20(s0)
80013528:	00100793          	li	a5,1
8001352c:	00f71463          	bne	a4,a5,80013534 <rt_sem_release+0xd8>
        rt_schedule();
80013530:	151030ef          	jal	ra,80016e80 <rt_schedule>

    return RT_EOK;
80013534:	00000793          	li	a5,0
}
80013538:	00078513          	mv	a0,a5
8001353c:	02c12083          	lw	ra,44(sp)
80013540:	02812403          	lw	s0,40(sp)
80013544:	03010113          	addi	sp,sp,48
80013548:	00008067          	ret

8001354c <rt_mutex_init>:
 *           If the return value is any other values, it represents the initialization failed.
 *
 * @warning  This function can ONLY be called from threads.
 */
rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
{
8001354c:	fe010113          	addi	sp,sp,-32
80013550:	00112e23          	sw	ra,28(sp)
80013554:	00812c23          	sw	s0,24(sp)
80013558:	02010413          	addi	s0,sp,32
8001355c:	fea42623          	sw	a0,-20(s0)
80013560:	feb42423          	sw	a1,-24(s0)
80013564:	00060793          	mv	a5,a2
80013568:	fef403a3          	sb	a5,-25(s0)

    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);

    /* initialize object */
    rt_object_init(&(mutex->parent.parent), RT_Object_Class_Mutex, name);
8001356c:	fec42783          	lw	a5,-20(s0)
80013570:	fe842603          	lw	a2,-24(s0)
80013574:	00300593          	li	a1,3
80013578:	00078513          	mv	a0,a5
8001357c:	270030ef          	jal	ra,800167ec <rt_object_init>

    /* initialize ipc object */
    _ipc_object_init(&(mutex->parent));
80013580:	fec42783          	lw	a5,-20(s0)
80013584:	00078513          	mv	a0,a5
80013588:	b85ff0ef          	jal	ra,8001310c <_ipc_object_init>

    mutex->value = 1;
8001358c:	fec42783          	lw	a5,-20(s0)
80013590:	00100713          	li	a4,1
80013594:	02e79423          	sh	a4,40(a5)
    mutex->owner = RT_NULL;
80013598:	fec42783          	lw	a5,-20(s0)
8001359c:	0207a623          	sw	zero,44(a5)
    mutex->original_priority = 0xFF;
800135a0:	fec42783          	lw	a5,-20(s0)
800135a4:	fff00713          	li	a4,-1
800135a8:	02e78523          	sb	a4,42(a5)
    mutex->hold  = 0;
800135ac:	fec42783          	lw	a5,-20(s0)
800135b0:	020785a3          	sb	zero,43(a5)

    /* flag can only be RT_IPC_FLAG_PRIO. RT_IPC_FLAG_FIFO cannot solve the unbounded priority inversion problem */
    mutex->parent.parent.flag = RT_IPC_FLAG_PRIO;
800135b4:	fec42783          	lw	a5,-20(s0)
800135b8:	00100713          	li	a4,1
800135bc:	00e78aa3          	sb	a4,21(a5)

    return RT_EOK;
800135c0:	00000793          	li	a5,0
}
800135c4:	00078513          	mv	a0,a5
800135c8:	01c12083          	lw	ra,28(sp)
800135cc:	01812403          	lw	s0,24(sp)
800135d0:	02010113          	addi	sp,sp,32
800135d4:	00008067          	ret

800135d8 <rt_mutex_take>:
 *           If the return value is any other values, it means that the mutex take failed.
 *
 * @warning  This function can ONLY be called in the thread context. It MUST NOT BE called in interrupt context.
 */
rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t timeout)
{
800135d8:	fd010113          	addi	sp,sp,-48
800135dc:	02112623          	sw	ra,44(sp)
800135e0:	02812423          	sw	s0,40(sp)
800135e4:	03010413          	addi	s0,sp,48
800135e8:	fca42e23          	sw	a0,-36(s0)
800135ec:	fcb42c23          	sw	a1,-40(s0)
    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);
    RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);

    /* get current thread */
    thread = rt_thread_self();
800135f0:	1d0040ef          	jal	ra,800177c0 <rt_thread_self>
800135f4:	fea42423          	sw	a0,-24(s0)

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
800135f8:	aa9ec0ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
800135fc:	fea42623          	sw	a0,-20(s0)

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(mutex->parent.parent)));
80013600:	00071797          	auipc	a5,0x71
80013604:	a6478793          	addi	a5,a5,-1436 # 80084064 <rt_object_trytake_hook>
80013608:	0007a783          	lw	a5,0(a5)
8001360c:	00078e63          	beqz	a5,80013628 <rt_mutex_take+0x50>
80013610:	00071797          	auipc	a5,0x71
80013614:	a5478793          	addi	a5,a5,-1452 # 80084064 <rt_object_trytake_hook>
80013618:	0007a783          	lw	a5,0(a5)
8001361c:	fdc42703          	lw	a4,-36(s0)
80013620:	00070513          	mv	a0,a4
80013624:	000780e7          	jalr	a5
    RT_DEBUG_LOG(RT_DEBUG_IPC,
                 ("mutex_take: current thread %s, mutex value: %d, hold: %d\n",
                  thread->name, mutex->value, mutex->hold));

    /* reset thread error */
    thread->error = RT_EOK;
80013628:	fe842783          	lw	a5,-24(s0)
8001362c:	0207ae23          	sw	zero,60(a5)

    if (mutex->owner == thread)
80013630:	fdc42783          	lw	a5,-36(s0)
80013634:	02c7a783          	lw	a5,44(a5)
80013638:	fe842703          	lw	a4,-24(s0)
8001363c:	04f71063          	bne	a4,a5,8001367c <rt_mutex_take+0xa4>
    {
        if(mutex->hold < RT_MUTEX_HOLD_MAX)
80013640:	fdc42783          	lw	a5,-36(s0)
80013644:	02b7c703          	lbu	a4,43(a5)
80013648:	0ff00793          	li	a5,255
8001364c:	02f70063          	beq	a4,a5,8001366c <rt_mutex_take+0x94>
        {
            /* it's the same thread */
            mutex->hold ++;
80013650:	fdc42783          	lw	a5,-36(s0)
80013654:	02b7c783          	lbu	a5,43(a5)
80013658:	00178793          	addi	a5,a5,1
8001365c:	0ff7f713          	zext.b	a4,a5
80013660:	fdc42783          	lw	a5,-36(s0)
80013664:	02e785a3          	sb	a4,43(a5)
80013668:	1700006f          	j	800137d8 <rt_mutex_take+0x200>
        }
        else
        {
            rt_hw_interrupt_enable(level); /* enable interrupt */
8001366c:	fec42503          	lw	a0,-20(s0)
80013670:	a39ec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
            return -RT_EFULL; /* value overflowed */
80013674:	ffd00793          	li	a5,-3
80013678:	1940006f          	j	8001380c <rt_mutex_take+0x234>
    else
    {
        /* The value of mutex is 1 in initial status. Therefore, if the
         * value is great than 0, it indicates the mutex is avaible.
         */
        if (mutex->value > 0)
8001367c:	fdc42783          	lw	a5,-36(s0)
80013680:	0287d783          	lhu	a5,40(a5)
80013684:	06078c63          	beqz	a5,800136fc <rt_mutex_take+0x124>
        {
            /* mutex is available */
            mutex->value --;
80013688:	fdc42783          	lw	a5,-36(s0)
8001368c:	0287d783          	lhu	a5,40(a5)
80013690:	fff78793          	addi	a5,a5,-1
80013694:	01079713          	slli	a4,a5,0x10
80013698:	01075713          	srli	a4,a4,0x10
8001369c:	fdc42783          	lw	a5,-36(s0)
800136a0:	02e79423          	sh	a4,40(a5)

            /* set mutex owner and original priority */
            mutex->owner             = thread;
800136a4:	fdc42783          	lw	a5,-36(s0)
800136a8:	fe842703          	lw	a4,-24(s0)
800136ac:	02e7a623          	sw	a4,44(a5)
            mutex->original_priority = thread->current_priority;
800136b0:	fe842783          	lw	a5,-24(s0)
800136b4:	0417c703          	lbu	a4,65(a5)
800136b8:	fdc42783          	lw	a5,-36(s0)
800136bc:	02e78523          	sb	a4,42(a5)
            if(mutex->hold < RT_MUTEX_HOLD_MAX)
800136c0:	fdc42783          	lw	a5,-36(s0)
800136c4:	02b7c703          	lbu	a4,43(a5)
800136c8:	0ff00793          	li	a5,255
800136cc:	02f70063          	beq	a4,a5,800136ec <rt_mutex_take+0x114>
            {
                mutex->hold ++;
800136d0:	fdc42783          	lw	a5,-36(s0)
800136d4:	02b7c783          	lbu	a5,43(a5)
800136d8:	00178793          	addi	a5,a5,1
800136dc:	0ff7f713          	zext.b	a4,a5
800136e0:	fdc42783          	lw	a5,-36(s0)
800136e4:	02e785a3          	sb	a4,43(a5)
800136e8:	0f00006f          	j	800137d8 <rt_mutex_take+0x200>
            }
            else
            {
                rt_hw_interrupt_enable(level); /* enable interrupt */
800136ec:	fec42503          	lw	a0,-20(s0)
800136f0:	9b9ec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                return -RT_EFULL; /* value overflowed */
800136f4:	ffd00793          	li	a5,-3
800136f8:	1140006f          	j	8001380c <rt_mutex_take+0x234>
            }
        }
        else
        {
            /* no waiting, return with timeout */
            if (timeout == 0)
800136fc:	fd842783          	lw	a5,-40(s0)
80013700:	02079063          	bnez	a5,80013720 <rt_mutex_take+0x148>
            {
                /* set error as timeout */
                thread->error = -RT_ETIMEOUT;
80013704:	fe842783          	lw	a5,-24(s0)
80013708:	ffe00713          	li	a4,-2
8001370c:	02e7ae23          	sw	a4,60(a5)

                /* enable interrupt */
                rt_hw_interrupt_enable(level);
80013710:	fec42503          	lw	a0,-20(s0)
80013714:	995ec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

                return -RT_ETIMEOUT;
80013718:	ffe00793          	li	a5,-2
8001371c:	0f00006f          	j	8001380c <rt_mutex_take+0x234>
                /* mutex is unavailable, push to suspend list */
                RT_DEBUG_LOG(RT_DEBUG_IPC, ("mutex_take: suspend thread: %s\n",
                                            thread->name));

                /* change the owner thread priority of mutex */
                if (thread->current_priority < mutex->owner->current_priority)
80013720:	fe842783          	lw	a5,-24(s0)
80013724:	0417c703          	lbu	a4,65(a5)
80013728:	fdc42783          	lw	a5,-36(s0)
8001372c:	02c7a783          	lw	a5,44(a5)
80013730:	0417c783          	lbu	a5,65(a5)
80013734:	02f77263          	bgeu	a4,a5,80013758 <rt_mutex_take+0x180>
                {
                    /* change the owner thread priority */
                    rt_thread_control(mutex->owner,
80013738:	fdc42783          	lw	a5,-36(s0)
8001373c:	02c7a703          	lw	a4,44(a5)
                                      RT_THREAD_CTRL_CHANGE_PRIORITY,
                                      &thread->current_priority);
80013740:	fe842783          	lw	a5,-24(s0)
80013744:	04178793          	addi	a5,a5,65
                    rt_thread_control(mutex->owner,
80013748:	00078613          	mv	a2,a5
8001374c:	00200593          	li	a1,2
80013750:	00070513          	mv	a0,a4
80013754:	2dc040ef          	jal	ra,80017a30 <rt_thread_control>
                }

                /* suspend current thread */
                _ipc_list_suspend(&(mutex->parent.suspend_thread),
80013758:	fdc42783          	lw	a5,-36(s0)
8001375c:	02078713          	addi	a4,a5,32
80013760:	fdc42783          	lw	a5,-36(s0)
80013764:	0157c783          	lbu	a5,21(a5)
80013768:	00078613          	mv	a2,a5
8001376c:	fe842583          	lw	a1,-24(s0)
80013770:	00070513          	mv	a0,a4
80013774:	9d5ff0ef          	jal	ra,80013148 <_ipc_list_suspend>
                                    thread,
                                    mutex->parent.parent.flag);

                /* has waiting time, start thread timer */
                if (timeout > 0)
80013778:	fd842783          	lw	a5,-40(s0)
8001377c:	02f05863          	blez	a5,800137ac <rt_mutex_take+0x1d4>
                    RT_DEBUG_LOG(RT_DEBUG_IPC,
                                 ("mutex_take: start the timer of thread:%s\n",
                                  thread->name));

                    /* reset the timeout of thread timer and start it */
                    rt_timer_control(&(thread->thread_timer),
80013780:	fe842783          	lw	a5,-24(s0)
80013784:	05878793          	addi	a5,a5,88
80013788:	fd840713          	addi	a4,s0,-40
8001378c:	00070613          	mv	a2,a4
80013790:	00000593          	li	a1,0
80013794:	00078513          	mv	a0,a5
80013798:	409040ef          	jal	ra,800183a0 <rt_timer_control>
                                     RT_TIMER_CTRL_SET_TIME,
                                     &timeout);
                    rt_timer_start(&(thread->thread_timer));
8001379c:	fe842783          	lw	a5,-24(s0)
800137a0:	05878793          	addi	a5,a5,88
800137a4:	00078513          	mv	a0,a5
800137a8:	08d040ef          	jal	ra,80018034 <rt_timer_start>
                }

                /* enable interrupt */
                rt_hw_interrupt_enable(level);
800137ac:	fec42503          	lw	a0,-20(s0)
800137b0:	8f9ec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

                /* do schedule */
                rt_schedule();
800137b4:	6cc030ef          	jal	ra,80016e80 <rt_schedule>

                if (thread->error != RT_EOK)
800137b8:	fe842783          	lw	a5,-24(s0)
800137bc:	03c7a783          	lw	a5,60(a5)
800137c0:	00078863          	beqz	a5,800137d0 <rt_mutex_take+0x1f8>
                {
                    /* return error */
                    return thread->error;
800137c4:	fe842783          	lw	a5,-24(s0)
800137c8:	03c7a783          	lw	a5,60(a5)
800137cc:	0400006f          	j	8001380c <rt_mutex_take+0x234>
                }
                else
                {
                    /* the mutex is taken successfully. */
                    /* disable interrupt */
                    level = rt_hw_interrupt_disable();
800137d0:	8d1ec0ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
800137d4:	fea42623          	sw	a0,-20(s0)
            }
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
800137d8:	fec42503          	lw	a0,-20(s0)
800137dc:	8cdec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mutex->parent.parent)));
800137e0:	00071797          	auipc	a5,0x71
800137e4:	88878793          	addi	a5,a5,-1912 # 80084068 <rt_object_take_hook>
800137e8:	0007a783          	lw	a5,0(a5)
800137ec:	00078e63          	beqz	a5,80013808 <rt_mutex_take+0x230>
800137f0:	00071797          	auipc	a5,0x71
800137f4:	87878793          	addi	a5,a5,-1928 # 80084068 <rt_object_take_hook>
800137f8:	0007a783          	lw	a5,0(a5)
800137fc:	fdc42703          	lw	a4,-36(s0)
80013800:	00070513          	mv	a0,a4
80013804:	000780e7          	jalr	a5

    return RT_EOK;
80013808:	00000793          	li	a5,0
}
8001380c:	00078513          	mv	a0,a5
80013810:	02c12083          	lw	ra,44(sp)
80013814:	02812403          	lw	s0,40(sp)
80013818:	03010113          	addi	sp,sp,48
8001381c:	00008067          	ret

80013820 <rt_mutex_release>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that the mutex release failed.
 */
rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
80013820:	fd010113          	addi	sp,sp,-48
80013824:	02112623          	sw	ra,44(sp)
80013828:	02812423          	sw	s0,40(sp)
8001382c:	03010413          	addi	s0,sp,48
80013830:	fca42e23          	sw	a0,-36(s0)

    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);
    RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);

    need_schedule = RT_FALSE;
80013834:	fe042623          	sw	zero,-20(s0)

    /* only thread could release mutex because we need test the ownership */
    RT_DEBUG_IN_THREAD_CONTEXT;

    /* get current thread */
    thread = rt_thread_self();
80013838:	789030ef          	jal	ra,800177c0 <rt_thread_self>
8001383c:	fea42423          	sw	a0,-24(s0)

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
80013840:	861ec0ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80013844:	fea42223          	sw	a0,-28(s0)

    RT_DEBUG_LOG(RT_DEBUG_IPC,
                 ("mutex_release:current thread %s, mutex value: %d, hold: %d\n",
                  thread->name, mutex->value, mutex->hold));

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mutex->parent.parent)));
80013848:	00071797          	auipc	a5,0x71
8001384c:	82478793          	addi	a5,a5,-2012 # 8008406c <rt_object_put_hook>
80013850:	0007a783          	lw	a5,0(a5)
80013854:	00078e63          	beqz	a5,80013870 <rt_mutex_release+0x50>
80013858:	00071797          	auipc	a5,0x71
8001385c:	81478793          	addi	a5,a5,-2028 # 8008406c <rt_object_put_hook>
80013860:	0007a783          	lw	a5,0(a5)
80013864:	fdc42703          	lw	a4,-36(s0)
80013868:	00070513          	mv	a0,a4
8001386c:	000780e7          	jalr	a5

    /* mutex only can be released by owner */
    if (thread != mutex->owner)
80013870:	fdc42783          	lw	a5,-36(s0)
80013874:	02c7a783          	lw	a5,44(a5)
80013878:	fe842703          	lw	a4,-24(s0)
8001387c:	02f70063          	beq	a4,a5,8001389c <rt_mutex_release+0x7c>
    {
        thread->error = -RT_ERROR;
80013880:	fe842783          	lw	a5,-24(s0)
80013884:	fff00713          	li	a4,-1
80013888:	02e7ae23          	sw	a4,60(a5)

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
8001388c:	fe442503          	lw	a0,-28(s0)
80013890:	819ec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

        return -RT_ERROR;
80013894:	fff00793          	li	a5,-1
80013898:	16c0006f          	j	80013a04 <rt_mutex_release+0x1e4>
    }

    /* decrease hold */
    mutex->hold --;
8001389c:	fdc42783          	lw	a5,-36(s0)
800138a0:	02b7c783          	lbu	a5,43(a5)
800138a4:	fff78793          	addi	a5,a5,-1
800138a8:	0ff7f713          	zext.b	a4,a5
800138ac:	fdc42783          	lw	a5,-36(s0)
800138b0:	02e785a3          	sb	a4,43(a5)
    /* if no hold */
    if (mutex->hold == 0)
800138b4:	fdc42783          	lw	a5,-36(s0)
800138b8:	02b7c783          	lbu	a5,43(a5)
800138bc:	12079663          	bnez	a5,800139e8 <rt_mutex_release+0x1c8>
    {
        /* change the owner thread to original priority */
        if (mutex->original_priority != mutex->owner->current_priority)
800138c0:	fdc42783          	lw	a5,-36(s0)
800138c4:	02a7c703          	lbu	a4,42(a5)
800138c8:	fdc42783          	lw	a5,-36(s0)
800138cc:	02c7a783          	lw	a5,44(a5)
800138d0:	0417c783          	lbu	a5,65(a5)
800138d4:	02f70263          	beq	a4,a5,800138f8 <rt_mutex_release+0xd8>
        {
            rt_thread_control(mutex->owner,
800138d8:	fdc42783          	lw	a5,-36(s0)
800138dc:	02c7a703          	lw	a4,44(a5)
                              RT_THREAD_CTRL_CHANGE_PRIORITY,
                              &(mutex->original_priority));
800138e0:	fdc42783          	lw	a5,-36(s0)
800138e4:	02a78793          	addi	a5,a5,42
            rt_thread_control(mutex->owner,
800138e8:	00078613          	mv	a2,a5
800138ec:	00200593          	li	a1,2
800138f0:	00070513          	mv	a0,a4
800138f4:	13c040ef          	jal	ra,80017a30 <rt_thread_control>
        }

        /* wakeup suspended thread */
        if (!rt_list_isempty(&mutex->parent.suspend_thread))
800138f8:	fdc42783          	lw	a5,-36(s0)
800138fc:	02078793          	addi	a5,a5,32
80013900:	00078513          	mv	a0,a5
80013904:	fd0ff0ef          	jal	ra,800130d4 <rt_list_isempty>
80013908:	00050793          	mv	a5,a0
8001390c:	08079263          	bnez	a5,80013990 <rt_mutex_release+0x170>
        {
            /* get suspended thread */
            thread = rt_list_entry(mutex->parent.suspend_thread.next,
80013910:	fdc42783          	lw	a5,-36(s0)
80013914:	0207a783          	lw	a5,32(a5)
80013918:	fe078793          	addi	a5,a5,-32
8001391c:	fef42423          	sw	a5,-24(s0)

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("mutex_release: resume thread: %s\n",
                                        thread->name));

            /* set new owner and priority */
            mutex->owner             = thread;
80013920:	fdc42783          	lw	a5,-36(s0)
80013924:	fe842703          	lw	a4,-24(s0)
80013928:	02e7a623          	sw	a4,44(a5)
            mutex->original_priority = thread->current_priority;
8001392c:	fe842783          	lw	a5,-24(s0)
80013930:	0417c703          	lbu	a4,65(a5)
80013934:	fdc42783          	lw	a5,-36(s0)
80013938:	02e78523          	sb	a4,42(a5)

            if(mutex->hold < RT_MUTEX_HOLD_MAX)
8001393c:	fdc42783          	lw	a5,-36(s0)
80013940:	02b7c703          	lbu	a4,43(a5)
80013944:	0ff00793          	li	a5,255
80013948:	02f70c63          	beq	a4,a5,80013980 <rt_mutex_release+0x160>
            {
                mutex->hold ++;
8001394c:	fdc42783          	lw	a5,-36(s0)
80013950:	02b7c783          	lbu	a5,43(a5)
80013954:	00178793          	addi	a5,a5,1
80013958:	0ff7f713          	zext.b	a4,a5
8001395c:	fdc42783          	lw	a5,-36(s0)
80013960:	02e785a3          	sb	a4,43(a5)
                rt_hw_interrupt_enable(level); /* enable interrupt */
                return -RT_EFULL; /* value overflowed */
            }

            /* resume thread */
            _ipc_list_resume(&(mutex->parent.suspend_thread));
80013964:	fdc42783          	lw	a5,-36(s0)
80013968:	02078793          	addi	a5,a5,32
8001396c:	00078513          	mv	a0,a5
80013970:	8d1ff0ef          	jal	ra,80013240 <_ipc_list_resume>

            need_schedule = RT_TRUE;
80013974:	00100793          	li	a5,1
80013978:	fef42623          	sw	a5,-20(s0)
8001397c:	06c0006f          	j	800139e8 <rt_mutex_release+0x1c8>
                rt_hw_interrupt_enable(level); /* enable interrupt */
80013980:	fe442503          	lw	a0,-28(s0)
80013984:	f24ec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                return -RT_EFULL; /* value overflowed */
80013988:	ffd00793          	li	a5,-3
8001398c:	0780006f          	j	80013a04 <rt_mutex_release+0x1e4>
        }
        else
        {
            if(mutex->value < RT_MUTEX_VALUE_MAX)
80013990:	fdc42783          	lw	a5,-36(s0)
80013994:	0287d703          	lhu	a4,40(a5)
80013998:	000107b7          	lui	a5,0x10
8001399c:	fff78793          	addi	a5,a5,-1 # ffff <__STACKSIZE__+0xbfff>
800139a0:	02f70c63          	beq	a4,a5,800139d8 <rt_mutex_release+0x1b8>
            {
                /* increase value */
                mutex->value ++;
800139a4:	fdc42783          	lw	a5,-36(s0)
800139a8:	0287d783          	lhu	a5,40(a5)
800139ac:	00178793          	addi	a5,a5,1
800139b0:	01079713          	slli	a4,a5,0x10
800139b4:	01075713          	srli	a4,a4,0x10
800139b8:	fdc42783          	lw	a5,-36(s0)
800139bc:	02e79423          	sh	a4,40(a5)
                rt_hw_interrupt_enable(level); /* enable interrupt */
                return -RT_EFULL; /* value overflowed */
            }

            /* clear owner */
            mutex->owner             = RT_NULL;
800139c0:	fdc42783          	lw	a5,-36(s0)
800139c4:	0207a623          	sw	zero,44(a5)
            mutex->original_priority = 0xff;
800139c8:	fdc42783          	lw	a5,-36(s0)
800139cc:	fff00713          	li	a4,-1
800139d0:	02e78523          	sb	a4,42(a5)
800139d4:	0140006f          	j	800139e8 <rt_mutex_release+0x1c8>
                rt_hw_interrupt_enable(level); /* enable interrupt */
800139d8:	fe442503          	lw	a0,-28(s0)
800139dc:	eccec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
                return -RT_EFULL; /* value overflowed */
800139e0:	ffd00793          	li	a5,-3
800139e4:	0200006f          	j	80013a04 <rt_mutex_release+0x1e4>
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
800139e8:	fe442503          	lw	a0,-28(s0)
800139ec:	ebcec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    /* perform a schedule */
    if (need_schedule == RT_TRUE)
800139f0:	fec42703          	lw	a4,-20(s0)
800139f4:	00100793          	li	a5,1
800139f8:	00f71463          	bne	a4,a5,80013a00 <rt_mutex_release+0x1e0>
        rt_schedule();
800139fc:	484030ef          	jal	ra,80016e80 <rt_schedule>

    return RT_EOK;
80013a00:	00000793          	li	a5,0
}
80013a04:	00078513          	mv	a0,a5
80013a08:	02c12083          	lw	ra,44(sp)
80013a0c:	02812403          	lw	s0,40(sp)
80013a10:	03010113          	addi	sp,sp,48
80013a14:	00008067          	ret

80013a18 <rt_interrupt_enter>:
 * @note Please don't invoke this routine in application
 *
 * @see rt_interrupt_leave
 */
RT_WEAK void rt_interrupt_enter(void)
{
80013a18:	fe010113          	addi	sp,sp,-32
80013a1c:	00112e23          	sw	ra,28(sp)
80013a20:	00812c23          	sw	s0,24(sp)
80013a24:	02010413          	addi	s0,sp,32
    rt_base_t level;

    level = rt_hw_interrupt_disable();
80013a28:	e78ec0ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80013a2c:	fea42623          	sw	a0,-20(s0)
    rt_interrupt_nest ++;
80013a30:	00070797          	auipc	a5,0x70
80013a34:	61478793          	addi	a5,a5,1556 # 80084044 <rt_interrupt_nest>
80013a38:	0007c783          	lbu	a5,0(a5)
80013a3c:	0ff7f793          	zext.b	a5,a5
80013a40:	00178793          	addi	a5,a5,1
80013a44:	0ff7f713          	zext.b	a4,a5
80013a48:	00070797          	auipc	a5,0x70
80013a4c:	5fc78793          	addi	a5,a5,1532 # 80084044 <rt_interrupt_nest>
80013a50:	00e78023          	sb	a4,0(a5)
    RT_OBJECT_HOOK_CALL(rt_interrupt_enter_hook,());
80013a54:	00070797          	auipc	a5,0x70
80013a58:	5e878793          	addi	a5,a5,1512 # 8008403c <rt_interrupt_enter_hook>
80013a5c:	0007a783          	lw	a5,0(a5)
80013a60:	00078a63          	beqz	a5,80013a74 <rt_interrupt_enter+0x5c>
80013a64:	00070797          	auipc	a5,0x70
80013a68:	5d878793          	addi	a5,a5,1496 # 8008403c <rt_interrupt_enter_hook>
80013a6c:	0007a783          	lw	a5,0(a5)
80013a70:	000780e7          	jalr	a5
    rt_hw_interrupt_enable(level);
80013a74:	fec42503          	lw	a0,-20(s0)
80013a78:	e30ec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq has come..., irq current nest:%d\n",
                                (rt_int32_t)rt_interrupt_nest));
}
80013a7c:	00000013          	nop
80013a80:	01c12083          	lw	ra,28(sp)
80013a84:	01812403          	lw	s0,24(sp)
80013a88:	02010113          	addi	sp,sp,32
80013a8c:	00008067          	ret

80013a90 <rt_interrupt_leave>:
 * @note Please don't invoke this routine in application
 *
 * @see rt_interrupt_enter
 */
RT_WEAK void rt_interrupt_leave(void)
{
80013a90:	fe010113          	addi	sp,sp,-32
80013a94:	00112e23          	sw	ra,28(sp)
80013a98:	00812c23          	sw	s0,24(sp)
80013a9c:	02010413          	addi	s0,sp,32
    rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq is going to leave, irq current nest:%d\n",
                                (rt_int32_t)rt_interrupt_nest));

    level = rt_hw_interrupt_disable();
80013aa0:	e00ec0ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80013aa4:	fea42623          	sw	a0,-20(s0)
    RT_OBJECT_HOOK_CALL(rt_interrupt_leave_hook,());
80013aa8:	00070797          	auipc	a5,0x70
80013aac:	59878793          	addi	a5,a5,1432 # 80084040 <rt_interrupt_leave_hook>
80013ab0:	0007a783          	lw	a5,0(a5)
80013ab4:	00078a63          	beqz	a5,80013ac8 <rt_interrupt_leave+0x38>
80013ab8:	00070797          	auipc	a5,0x70
80013abc:	58878793          	addi	a5,a5,1416 # 80084040 <rt_interrupt_leave_hook>
80013ac0:	0007a783          	lw	a5,0(a5)
80013ac4:	000780e7          	jalr	a5
    rt_interrupt_nest --;
80013ac8:	00070797          	auipc	a5,0x70
80013acc:	57c78793          	addi	a5,a5,1404 # 80084044 <rt_interrupt_nest>
80013ad0:	0007c783          	lbu	a5,0(a5)
80013ad4:	0ff7f793          	zext.b	a5,a5
80013ad8:	fff78793          	addi	a5,a5,-1
80013adc:	0ff7f713          	zext.b	a4,a5
80013ae0:	00070797          	auipc	a5,0x70
80013ae4:	56478793          	addi	a5,a5,1380 # 80084044 <rt_interrupt_nest>
80013ae8:	00e78023          	sb	a4,0(a5)
    rt_hw_interrupt_enable(level);
80013aec:	fec42503          	lw	a0,-20(s0)
80013af0:	db8ec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
}
80013af4:	00000013          	nop
80013af8:	01c12083          	lw	ra,28(sp)
80013afc:	01812403          	lw	s0,24(sp)
80013b00:	02010113          	addi	sp,sp,32
80013b04:	00008067          	ret

80013b08 <rt_interrupt_get_nest>:
 * context is interrupt context.
 *
 * @return the number of nested interrupts.
 */
RT_WEAK rt_uint8_t rt_interrupt_get_nest(void)
{
80013b08:	fe010113          	addi	sp,sp,-32
80013b0c:	00112e23          	sw	ra,28(sp)
80013b10:	00812c23          	sw	s0,24(sp)
80013b14:	02010413          	addi	s0,sp,32
    rt_uint8_t ret;
    rt_base_t level;

    level = rt_hw_interrupt_disable();
80013b18:	d88ec0ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80013b1c:	fea42623          	sw	a0,-20(s0)
    ret = rt_interrupt_nest;
80013b20:	00070797          	auipc	a5,0x70
80013b24:	52478793          	addi	a5,a5,1316 # 80084044 <rt_interrupt_nest>
80013b28:	0007c783          	lbu	a5,0(a5)
80013b2c:	fef405a3          	sb	a5,-21(s0)
    rt_hw_interrupt_enable(level);
80013b30:	fec42503          	lw	a0,-20(s0)
80013b34:	d74ec0ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
    return ret;
80013b38:	feb44783          	lbu	a5,-21(s0)
}
80013b3c:	00078513          	mv	a0,a5
80013b40:	01c12083          	lw	ra,28(sp)
80013b44:	01812403          	lw	s0,24(sp)
80013b48:	02010113          	addi	sp,sp,32
80013b4c:	00008067          	ret

80013b50 <rt_strerror>:
 *
 * @param error the errorno code
 * @return a point to error message string
 */
const char *rt_strerror(rt_err_t error)
{
80013b50:	fe010113          	addi	sp,sp,-32
80013b54:	00812e23          	sw	s0,28(sp)
80013b58:	02010413          	addi	s0,sp,32
80013b5c:	fea42623          	sw	a0,-20(s0)
    if (error < 0)
80013b60:	fec42783          	lw	a5,-20(s0)
80013b64:	0007d863          	bgez	a5,80013b74 <rt_strerror+0x24>
        error = -error;
80013b68:	fec42783          	lw	a5,-20(s0)
80013b6c:	40f007b3          	neg	a5,a5
80013b70:	fef42623          	sw	a5,-20(s0)

    return (error > RT_EINVAL + 1) ?
           rt_errno_strs[RT_EINVAL + 1] :
80013b74:	fec42703          	lw	a4,-20(s0)
80013b78:	00b00793          	li	a5,11
80013b7c:	00e7da63          	bge	a5,a4,80013b90 <rt_strerror+0x40>
80013b80:	00015797          	auipc	a5,0x15
80013b84:	61878793          	addi	a5,a5,1560 # 80029198 <rt_errno_strs>
80013b88:	02c7a783          	lw	a5,44(a5)
80013b8c:	01c0006f          	j	80013ba8 <rt_strerror+0x58>
80013b90:	00015717          	auipc	a4,0x15
80013b94:	60870713          	addi	a4,a4,1544 # 80029198 <rt_errno_strs>
80013b98:	fec42783          	lw	a5,-20(s0)
80013b9c:	00279793          	slli	a5,a5,0x2
80013ba0:	00f707b3          	add	a5,a4,a5
80013ba4:	0007a783          	lw	a5,0(a5)
           rt_errno_strs[error];
}
80013ba8:	00078513          	mv	a0,a5
80013bac:	01c12403          	lw	s0,28(sp)
80013bb0:	02010113          	addi	sp,sp,32
80013bb4:	00008067          	ret

80013bb8 <rt_set_errno>:
 * This function sets the global errno for the current thread.
 *
 * @param error is the errno shall be set.
 */
void rt_set_errno(rt_err_t error)
{
80013bb8:	fd010113          	addi	sp,sp,-48
80013bbc:	02112623          	sw	ra,44(sp)
80013bc0:	02812423          	sw	s0,40(sp)
80013bc4:	03010413          	addi	s0,sp,48
80013bc8:	fca42e23          	sw	a0,-36(s0)
    rt_thread_t tid;

    if (rt_interrupt_get_nest() != 0)
80013bcc:	f3dff0ef          	jal	ra,80013b08 <rt_interrupt_get_nest>
80013bd0:	00050793          	mv	a5,a0
80013bd4:	00078c63          	beqz	a5,80013bec <rt_set_errno+0x34>
    {
        /* it's in interrupt context */
        __rt_errno = error;
80013bd8:	00070797          	auipc	a5,0x70
80013bdc:	47078793          	addi	a5,a5,1136 # 80084048 <__rt_errno>
80013be0:	fdc42703          	lw	a4,-36(s0)
80013be4:	00e7a023          	sw	a4,0(a5)

        return;
80013be8:	0340006f          	j	80013c1c <rt_set_errno+0x64>
    }

    tid = rt_thread_self();
80013bec:	3d5030ef          	jal	ra,800177c0 <rt_thread_self>
80013bf0:	fea42623          	sw	a0,-20(s0)
    if (tid == RT_NULL)
80013bf4:	fec42783          	lw	a5,-20(s0)
80013bf8:	00079c63          	bnez	a5,80013c10 <rt_set_errno+0x58>
    {
        __rt_errno = error;
80013bfc:	00070797          	auipc	a5,0x70
80013c00:	44c78793          	addi	a5,a5,1100 # 80084048 <__rt_errno>
80013c04:	fdc42703          	lw	a4,-36(s0)
80013c08:	00e7a023          	sw	a4,0(a5)

        return;
80013c0c:	0100006f          	j	80013c1c <rt_set_errno+0x64>
    }

    tid->error = error;
80013c10:	fec42783          	lw	a5,-20(s0)
80013c14:	fdc42703          	lw	a4,-36(s0)
80013c18:	02e7ae23          	sw	a4,60(a5)
}
80013c1c:	02c12083          	lw	ra,44(sp)
80013c20:	02812403          	lw	s0,40(sp)
80013c24:	03010113          	addi	sp,sp,48
80013c28:	00008067          	ret

80013c2c <_rt_errno>:
 * This function returns the address of the current thread errno.
 *
 * @return The errno address.
 */
int *_rt_errno(void)
{
80013c2c:	fe010113          	addi	sp,sp,-32
80013c30:	00112e23          	sw	ra,28(sp)
80013c34:	00812c23          	sw	s0,24(sp)
80013c38:	02010413          	addi	s0,sp,32
    rt_thread_t tid;

    if (rt_interrupt_get_nest() != 0)
80013c3c:	ecdff0ef          	jal	ra,80013b08 <rt_interrupt_get_nest>
80013c40:	00050793          	mv	a5,a0
80013c44:	00078863          	beqz	a5,80013c54 <_rt_errno+0x28>
        return (int *)&__rt_errno;
80013c48:	00070797          	auipc	a5,0x70
80013c4c:	40078793          	addi	a5,a5,1024 # 80084048 <__rt_errno>
80013c50:	0280006f          	j	80013c78 <_rt_errno+0x4c>

    tid = rt_thread_self();
80013c54:	36d030ef          	jal	ra,800177c0 <rt_thread_self>
80013c58:	fea42623          	sw	a0,-20(s0)
    if (tid != RT_NULL)
80013c5c:	fec42783          	lw	a5,-20(s0)
80013c60:	00078863          	beqz	a5,80013c70 <_rt_errno+0x44>
        return (int *) & (tid->error);
80013c64:	fec42783          	lw	a5,-20(s0)
80013c68:	03c78793          	addi	a5,a5,60
80013c6c:	00c0006f          	j	80013c78 <_rt_errno+0x4c>

    return (int *)&__rt_errno;
80013c70:	00070797          	auipc	a5,0x70
80013c74:	3d878793          	addi	a5,a5,984 # 80084048 <__rt_errno>
}
80013c78:	00078513          	mv	a0,a5
80013c7c:	01c12083          	lw	ra,28(sp)
80013c80:	01812403          	lw	s0,24(sp)
80013c84:	02010113          	addi	sp,sp,32
80013c88:	00008067          	ret

80013c8c <rt_memset>:
 * @param  count number of bytes to be set.
 *
 * @return The address of source memory.
 */
RT_WEAK void *rt_memset(void *s, int c, rt_ubase_t count)
{
80013c8c:	fc010113          	addi	sp,sp,-64
80013c90:	02812e23          	sw	s0,60(sp)
80013c94:	04010413          	addi	s0,sp,64
80013c98:	fca42623          	sw	a0,-52(s0)
80013c9c:	fcb42423          	sw	a1,-56(s0)
80013ca0:	fcc42223          	sw	a2,-60(s0)
#define LBLOCKSIZE      (sizeof(rt_ubase_t))
#define UNALIGNED(X)    ((long)X & (LBLOCKSIZE - 1))
#define TOO_SMALL(LEN)  ((LEN) < LBLOCKSIZE)

    unsigned int i;
    char *m = (char *)s;
80013ca4:	fcc42783          	lw	a5,-52(s0)
80013ca8:	fef42423          	sw	a5,-24(s0)
    unsigned long buffer;
    unsigned long *aligned_addr;
    unsigned char d = (unsigned int)c & (unsigned char)(-1);  /* To avoid sign extension, copy C to an
80013cac:	fc842783          	lw	a5,-56(s0)
80013cb0:	fef401a3          	sb	a5,-29(s0)
                                unsigned variable. (unsigned)((char)(-1))=0xFF for 8bit and =0xFFFF for 16bit: word independent */

    RT_ASSERT(LBLOCKSIZE == 2 || LBLOCKSIZE == 4 || LBLOCKSIZE == 8);

    if (!TOO_SMALL(count) && !UNALIGNED(s))
80013cb4:	fc442703          	lw	a4,-60(s0)
80013cb8:	00300793          	li	a5,3
80013cbc:	10e7f463          	bgeu	a5,a4,80013dc4 <rt_memset+0x138>
80013cc0:	fcc42783          	lw	a5,-52(s0)
80013cc4:	0037f793          	andi	a5,a5,3
80013cc8:	0e079e63          	bnez	a5,80013dc4 <rt_memset+0x138>
    {
        /* If we get this far, we know that count is large and s is word-aligned. */
        aligned_addr = (unsigned long *)s;
80013ccc:	fcc42783          	lw	a5,-52(s0)
80013cd0:	fef42223          	sw	a5,-28(s0)

        /* Store d into each char sized location in buffer so that
         * we can set large blocks quickly.
         */
        for (i = 0; i < LBLOCKSIZE; i++)
80013cd4:	fe042623          	sw	zero,-20(s0)
80013cd8:	0240006f          	j	80013cfc <rt_memset+0x70>
        {
            *(((unsigned char *)&buffer)+i) = d;
80013cdc:	fdc40713          	addi	a4,s0,-36
80013ce0:	fec42783          	lw	a5,-20(s0)
80013ce4:	00f707b3          	add	a5,a4,a5
80013ce8:	fe344703          	lbu	a4,-29(s0)
80013cec:	00e78023          	sb	a4,0(a5)
        for (i = 0; i < LBLOCKSIZE; i++)
80013cf0:	fec42783          	lw	a5,-20(s0)
80013cf4:	00178793          	addi	a5,a5,1
80013cf8:	fef42623          	sw	a5,-20(s0)
80013cfc:	fec42703          	lw	a4,-20(s0)
80013d00:	00300793          	li	a5,3
80013d04:	fce7fce3          	bgeu	a5,a4,80013cdc <rt_memset+0x50>
        }

        while (count >= LBLOCKSIZE * 4)
80013d08:	0600006f          	j	80013d68 <rt_memset+0xdc>
        {
            *aligned_addr++ = buffer;
80013d0c:	fe442783          	lw	a5,-28(s0)
80013d10:	00478713          	addi	a4,a5,4
80013d14:	fee42223          	sw	a4,-28(s0)
80013d18:	fdc42703          	lw	a4,-36(s0)
80013d1c:	00e7a023          	sw	a4,0(a5)
            *aligned_addr++ = buffer;
80013d20:	fe442783          	lw	a5,-28(s0)
80013d24:	00478713          	addi	a4,a5,4
80013d28:	fee42223          	sw	a4,-28(s0)
80013d2c:	fdc42703          	lw	a4,-36(s0)
80013d30:	00e7a023          	sw	a4,0(a5)
            *aligned_addr++ = buffer;
80013d34:	fe442783          	lw	a5,-28(s0)
80013d38:	00478713          	addi	a4,a5,4
80013d3c:	fee42223          	sw	a4,-28(s0)
80013d40:	fdc42703          	lw	a4,-36(s0)
80013d44:	00e7a023          	sw	a4,0(a5)
            *aligned_addr++ = buffer;
80013d48:	fe442783          	lw	a5,-28(s0)
80013d4c:	00478713          	addi	a4,a5,4
80013d50:	fee42223          	sw	a4,-28(s0)
80013d54:	fdc42703          	lw	a4,-36(s0)
80013d58:	00e7a023          	sw	a4,0(a5)
            count -= 4 * LBLOCKSIZE;
80013d5c:	fc442783          	lw	a5,-60(s0)
80013d60:	ff078793          	addi	a5,a5,-16
80013d64:	fcf42223          	sw	a5,-60(s0)
        while (count >= LBLOCKSIZE * 4)
80013d68:	fc442703          	lw	a4,-60(s0)
80013d6c:	00f00793          	li	a5,15
80013d70:	f8e7eee3          	bltu	a5,a4,80013d0c <rt_memset+0x80>
        }

        while (count >= LBLOCKSIZE)
80013d74:	0240006f          	j	80013d98 <rt_memset+0x10c>
        {
            *aligned_addr++ = buffer;
80013d78:	fe442783          	lw	a5,-28(s0)
80013d7c:	00478713          	addi	a4,a5,4
80013d80:	fee42223          	sw	a4,-28(s0)
80013d84:	fdc42703          	lw	a4,-36(s0)
80013d88:	00e7a023          	sw	a4,0(a5)
            count -= LBLOCKSIZE;
80013d8c:	fc442783          	lw	a5,-60(s0)
80013d90:	ffc78793          	addi	a5,a5,-4
80013d94:	fcf42223          	sw	a5,-60(s0)
        while (count >= LBLOCKSIZE)
80013d98:	fc442703          	lw	a4,-60(s0)
80013d9c:	00300793          	li	a5,3
80013da0:	fce7ece3          	bltu	a5,a4,80013d78 <rt_memset+0xec>
        }

        /* Pick up the remainder with a bytewise loop. */
        m = (char *)aligned_addr;
80013da4:	fe442783          	lw	a5,-28(s0)
80013da8:	fef42423          	sw	a5,-24(s0)
    }

    while (count--)
80013dac:	0180006f          	j	80013dc4 <rt_memset+0x138>
    {
        *m++ = (char)d;
80013db0:	fe842783          	lw	a5,-24(s0)
80013db4:	00178713          	addi	a4,a5,1
80013db8:	fee42423          	sw	a4,-24(s0)
80013dbc:	fe344703          	lbu	a4,-29(s0)
80013dc0:	00e78023          	sb	a4,0(a5)
    while (count--)
80013dc4:	fc442783          	lw	a5,-60(s0)
80013dc8:	fff78713          	addi	a4,a5,-1
80013dcc:	fce42223          	sw	a4,-60(s0)
80013dd0:	fe0790e3          	bnez	a5,80013db0 <rt_memset+0x124>
    }

    return s;
80013dd4:	fcc42783          	lw	a5,-52(s0)

#undef LBLOCKSIZE
#undef UNALIGNED
#undef TOO_SMALL
#endif /* RT_KSERVICE_USING_TINY_SIZE */
}
80013dd8:	00078513          	mv	a0,a5
80013ddc:	03c12403          	lw	s0,60(sp)
80013de0:	04010113          	addi	sp,sp,64
80013de4:	00008067          	ret

80013de8 <rt_memcpy>:
 * @param  count is the copied length.
 *
 * @return The address of destination memory
 */
RT_WEAK void *rt_memcpy(void *dst, const void *src, rt_ubase_t count)
{
80013de8:	fc010113          	addi	sp,sp,-64
80013dec:	02812e23          	sw	s0,60(sp)
80013df0:	04010413          	addi	s0,sp,64
80013df4:	fca42623          	sw	a0,-52(s0)
80013df8:	fcb42423          	sw	a1,-56(s0)
80013dfc:	fcc42223          	sw	a2,-60(s0)
    (((long)X & (sizeof (long) - 1)) | ((long)Y & (sizeof (long) - 1)))
#define BIGBLOCKSIZE    (sizeof (long) << 2)
#define LITTLEBLOCKSIZE (sizeof (long))
#define TOO_SMALL(LEN)  ((LEN) < BIGBLOCKSIZE)

    char *dst_ptr = (char *)dst;
80013e00:	fcc42783          	lw	a5,-52(s0)
80013e04:	fef42623          	sw	a5,-20(s0)
    char *src_ptr = (char *)src;
80013e08:	fc842783          	lw	a5,-56(s0)
80013e0c:	fef42423          	sw	a5,-24(s0)
    long *aligned_dst;
    long *aligned_src;
    rt_ubase_t len = count;
80013e10:	fc442783          	lw	a5,-60(s0)
80013e14:	fcf42e23          	sw	a5,-36(s0)

    /* If the size is small, or either SRC or DST is unaligned,
    then punt into the byte copy loop.  This should be rare. */
    if (!TOO_SMALL(len) && !UNALIGNED(src_ptr, dst_ptr))
80013e18:	fdc42703          	lw	a4,-36(s0)
80013e1c:	00f00793          	li	a5,15
80013e20:	12e7fa63          	bgeu	a5,a4,80013f54 <rt_memcpy+0x16c>
80013e24:	fe842703          	lw	a4,-24(s0)
80013e28:	fec42783          	lw	a5,-20(s0)
80013e2c:	00f767b3          	or	a5,a4,a5
80013e30:	0037f793          	andi	a5,a5,3
80013e34:	12079063          	bnez	a5,80013f54 <rt_memcpy+0x16c>
    {
        aligned_dst = (long *)dst_ptr;
80013e38:	fec42783          	lw	a5,-20(s0)
80013e3c:	fef42223          	sw	a5,-28(s0)
        aligned_src = (long *)src_ptr;
80013e40:	fe842783          	lw	a5,-24(s0)
80013e44:	fef42023          	sw	a5,-32(s0)

        /* Copy 4X long words at a time if possible. */
        while (len >= BIGBLOCKSIZE)
80013e48:	0900006f          	j	80013ed8 <rt_memcpy+0xf0>
        {
            *aligned_dst++ = *aligned_src++;
80013e4c:	fe042703          	lw	a4,-32(s0)
80013e50:	00470793          	addi	a5,a4,4
80013e54:	fef42023          	sw	a5,-32(s0)
80013e58:	fe442783          	lw	a5,-28(s0)
80013e5c:	00478693          	addi	a3,a5,4
80013e60:	fed42223          	sw	a3,-28(s0)
80013e64:	00072703          	lw	a4,0(a4)
80013e68:	00e7a023          	sw	a4,0(a5)
            *aligned_dst++ = *aligned_src++;
80013e6c:	fe042703          	lw	a4,-32(s0)
80013e70:	00470793          	addi	a5,a4,4
80013e74:	fef42023          	sw	a5,-32(s0)
80013e78:	fe442783          	lw	a5,-28(s0)
80013e7c:	00478693          	addi	a3,a5,4
80013e80:	fed42223          	sw	a3,-28(s0)
80013e84:	00072703          	lw	a4,0(a4)
80013e88:	00e7a023          	sw	a4,0(a5)
            *aligned_dst++ = *aligned_src++;
80013e8c:	fe042703          	lw	a4,-32(s0)
80013e90:	00470793          	addi	a5,a4,4
80013e94:	fef42023          	sw	a5,-32(s0)
80013e98:	fe442783          	lw	a5,-28(s0)
80013e9c:	00478693          	addi	a3,a5,4
80013ea0:	fed42223          	sw	a3,-28(s0)
80013ea4:	00072703          	lw	a4,0(a4)
80013ea8:	00e7a023          	sw	a4,0(a5)
            *aligned_dst++ = *aligned_src++;
80013eac:	fe042703          	lw	a4,-32(s0)
80013eb0:	00470793          	addi	a5,a4,4
80013eb4:	fef42023          	sw	a5,-32(s0)
80013eb8:	fe442783          	lw	a5,-28(s0)
80013ebc:	00478693          	addi	a3,a5,4
80013ec0:	fed42223          	sw	a3,-28(s0)
80013ec4:	00072703          	lw	a4,0(a4)
80013ec8:	00e7a023          	sw	a4,0(a5)
            len -= BIGBLOCKSIZE;
80013ecc:	fdc42783          	lw	a5,-36(s0)
80013ed0:	ff078793          	addi	a5,a5,-16
80013ed4:	fcf42e23          	sw	a5,-36(s0)
        while (len >= BIGBLOCKSIZE)
80013ed8:	fdc42703          	lw	a4,-36(s0)
80013edc:	00f00793          	li	a5,15
80013ee0:	f6e7e6e3          	bltu	a5,a4,80013e4c <rt_memcpy+0x64>
        }

        /* Copy one long word at a time if possible. */
        while (len >= LITTLEBLOCKSIZE)
80013ee4:	0300006f          	j	80013f14 <rt_memcpy+0x12c>
        {
            *aligned_dst++ = *aligned_src++;
80013ee8:	fe042703          	lw	a4,-32(s0)
80013eec:	00470793          	addi	a5,a4,4
80013ef0:	fef42023          	sw	a5,-32(s0)
80013ef4:	fe442783          	lw	a5,-28(s0)
80013ef8:	00478693          	addi	a3,a5,4
80013efc:	fed42223          	sw	a3,-28(s0)
80013f00:	00072703          	lw	a4,0(a4)
80013f04:	00e7a023          	sw	a4,0(a5)
            len -= LITTLEBLOCKSIZE;
80013f08:	fdc42783          	lw	a5,-36(s0)
80013f0c:	ffc78793          	addi	a5,a5,-4
80013f10:	fcf42e23          	sw	a5,-36(s0)
        while (len >= LITTLEBLOCKSIZE)
80013f14:	fdc42703          	lw	a4,-36(s0)
80013f18:	00300793          	li	a5,3
80013f1c:	fce7e6e3          	bltu	a5,a4,80013ee8 <rt_memcpy+0x100>
        }

        /* Pick up any residual with a byte copier. */
        dst_ptr = (char *)aligned_dst;
80013f20:	fe442783          	lw	a5,-28(s0)
80013f24:	fef42623          	sw	a5,-20(s0)
        src_ptr = (char *)aligned_src;
80013f28:	fe042783          	lw	a5,-32(s0)
80013f2c:	fef42423          	sw	a5,-24(s0)
    }

    while (len--)
80013f30:	0240006f          	j	80013f54 <rt_memcpy+0x16c>
        *dst_ptr++ = *src_ptr++;
80013f34:	fe842703          	lw	a4,-24(s0)
80013f38:	00170793          	addi	a5,a4,1
80013f3c:	fef42423          	sw	a5,-24(s0)
80013f40:	fec42783          	lw	a5,-20(s0)
80013f44:	00178693          	addi	a3,a5,1
80013f48:	fed42623          	sw	a3,-20(s0)
80013f4c:	00074703          	lbu	a4,0(a4)
80013f50:	00e78023          	sb	a4,0(a5)
    while (len--)
80013f54:	fdc42783          	lw	a5,-36(s0)
80013f58:	fff78713          	addi	a4,a5,-1
80013f5c:	fce42e23          	sw	a4,-36(s0)
80013f60:	fc079ae3          	bnez	a5,80013f34 <rt_memcpy+0x14c>

    return dst;
80013f64:	fcc42783          	lw	a5,-52(s0)
#undef UNALIGNED
#undef BIGBLOCKSIZE
#undef LITTLEBLOCKSIZE
#undef TOO_SMALL
#endif /* RT_KSERVICE_USING_TINY_SIZE */
}
80013f68:	00078513          	mv	a0,a5
80013f6c:	03c12403          	lw	s0,60(sp)
80013f70:	04010113          	addi	sp,sp,64
80013f74:	00008067          	ret

80013f78 <rt_memmove>:
 * @param  n is the copied length.
 *
 * @return The address of destination memory.
 */
void *rt_memmove(void *dest, const void *src, rt_size_t n)
{
80013f78:	fd010113          	addi	sp,sp,-48
80013f7c:	02812623          	sw	s0,44(sp)
80013f80:	03010413          	addi	s0,sp,48
80013f84:	fca42e23          	sw	a0,-36(s0)
80013f88:	fcb42c23          	sw	a1,-40(s0)
80013f8c:	fcc42a23          	sw	a2,-44(s0)
    char *tmp = (char *)dest, *s = (char *)src;
80013f90:	fdc42783          	lw	a5,-36(s0)
80013f94:	fef42623          	sw	a5,-20(s0)
80013f98:	fd842783          	lw	a5,-40(s0)
80013f9c:	fef42423          	sw	a5,-24(s0)

    if (s < tmp && tmp < s + n)
80013fa0:	fe842703          	lw	a4,-24(s0)
80013fa4:	fec42783          	lw	a5,-20(s0)
80013fa8:	08f77c63          	bgeu	a4,a5,80014040 <rt_memmove+0xc8>
80013fac:	fe842703          	lw	a4,-24(s0)
80013fb0:	fd442783          	lw	a5,-44(s0)
80013fb4:	00f707b3          	add	a5,a4,a5
80013fb8:	fec42703          	lw	a4,-20(s0)
80013fbc:	08f77263          	bgeu	a4,a5,80014040 <rt_memmove+0xc8>
    {
        tmp += n;
80013fc0:	fec42703          	lw	a4,-20(s0)
80013fc4:	fd442783          	lw	a5,-44(s0)
80013fc8:	00f707b3          	add	a5,a4,a5
80013fcc:	fef42623          	sw	a5,-20(s0)
        s += n;
80013fd0:	fe842703          	lw	a4,-24(s0)
80013fd4:	fd442783          	lw	a5,-44(s0)
80013fd8:	00f707b3          	add	a5,a4,a5
80013fdc:	fef42423          	sw	a5,-24(s0)

        while (n--)
80013fe0:	02c0006f          	j	8001400c <rt_memmove+0x94>
            *(--tmp) = *(--s);
80013fe4:	fe842783          	lw	a5,-24(s0)
80013fe8:	fff78793          	addi	a5,a5,-1
80013fec:	fef42423          	sw	a5,-24(s0)
80013ff0:	fec42783          	lw	a5,-20(s0)
80013ff4:	fff78793          	addi	a5,a5,-1
80013ff8:	fef42623          	sw	a5,-20(s0)
80013ffc:	fe842783          	lw	a5,-24(s0)
80014000:	0007c703          	lbu	a4,0(a5)
80014004:	fec42783          	lw	a5,-20(s0)
80014008:	00e78023          	sb	a4,0(a5)
        while (n--)
8001400c:	fd442783          	lw	a5,-44(s0)
80014010:	fff78713          	addi	a4,a5,-1
80014014:	fce42a23          	sw	a4,-44(s0)
80014018:	fc0796e3          	bnez	a5,80013fe4 <rt_memmove+0x6c>
    if (s < tmp && tmp < s + n)
8001401c:	0340006f          	j	80014050 <rt_memmove+0xd8>
    }
    else
    {
        while (n--)
            *tmp++ = *s++;
80014020:	fe842703          	lw	a4,-24(s0)
80014024:	00170793          	addi	a5,a4,1
80014028:	fef42423          	sw	a5,-24(s0)
8001402c:	fec42783          	lw	a5,-20(s0)
80014030:	00178693          	addi	a3,a5,1
80014034:	fed42623          	sw	a3,-20(s0)
80014038:	00074703          	lbu	a4,0(a4)
8001403c:	00e78023          	sb	a4,0(a5)
        while (n--)
80014040:	fd442783          	lw	a5,-44(s0)
80014044:	fff78713          	addi	a4,a5,-1
80014048:	fce42a23          	sw	a4,-44(s0)
8001404c:	fc079ae3          	bnez	a5,80014020 <rt_memmove+0xa8>
    }

    return dest;
80014050:	fdc42783          	lw	a5,-36(s0)
}
80014054:	00078513          	mv	a0,a5
80014058:	02c12403          	lw	s0,44(sp)
8001405c:	03010113          	addi	sp,sp,48
80014060:	00008067          	ret

80014064 <rt_strncpy>:
 * @param  n is the maximum copied length.
 *
 * @return The address where the copied content is stored.
 */
char *rt_strncpy(char *dst, const char *src, rt_size_t n)
{
80014064:	fd010113          	addi	sp,sp,-48
80014068:	02812623          	sw	s0,44(sp)
8001406c:	03010413          	addi	s0,sp,48
80014070:	fca42e23          	sw	a0,-36(s0)
80014074:	fcb42c23          	sw	a1,-40(s0)
80014078:	fcc42a23          	sw	a2,-44(s0)
    if (n != 0)
8001407c:	fd442783          	lw	a5,-44(s0)
80014080:	06078e63          	beqz	a5,800140fc <rt_strncpy+0x98>
    {
        char *d = dst;
80014084:	fdc42783          	lw	a5,-36(s0)
80014088:	fef42623          	sw	a5,-20(s0)
        const char *s = src;
8001408c:	fd842783          	lw	a5,-40(s0)
80014090:	fef42423          	sw	a5,-24(s0)

        do
        {
            if ((*d++ = *s++) == 0)
80014094:	fe842703          	lw	a4,-24(s0)
80014098:	00170793          	addi	a5,a4,1
8001409c:	fef42423          	sw	a5,-24(s0)
800140a0:	fec42783          	lw	a5,-20(s0)
800140a4:	00178693          	addi	a3,a5,1
800140a8:	fed42623          	sw	a3,-20(s0)
800140ac:	00074703          	lbu	a4,0(a4)
800140b0:	00e78023          	sb	a4,0(a5)
800140b4:	0007c783          	lbu	a5,0(a5)
800140b8:	02079863          	bnez	a5,800140e8 <rt_strncpy+0x84>
            {
                /* NUL pad the remaining n-1 bytes */
                while (--n != 0)
800140bc:	0140006f          	j	800140d0 <rt_strncpy+0x6c>
                    *d++ = 0;
800140c0:	fec42783          	lw	a5,-20(s0)
800140c4:	00178713          	addi	a4,a5,1
800140c8:	fee42623          	sw	a4,-20(s0)
800140cc:	00078023          	sb	zero,0(a5)
                while (--n != 0)
800140d0:	fd442783          	lw	a5,-44(s0)
800140d4:	fff78793          	addi	a5,a5,-1
800140d8:	fcf42a23          	sw	a5,-44(s0)
800140dc:	fd442783          	lw	a5,-44(s0)
800140e0:	fe0790e3          	bnez	a5,800140c0 <rt_strncpy+0x5c>
                break;
800140e4:	0180006f          	j	800140fc <rt_strncpy+0x98>
            }
        } while (--n != 0);
800140e8:	fd442783          	lw	a5,-44(s0)
800140ec:	fff78793          	addi	a5,a5,-1
800140f0:	fcf42a23          	sw	a5,-44(s0)
800140f4:	fd442783          	lw	a5,-44(s0)
800140f8:	f8079ee3          	bnez	a5,80014094 <rt_strncpy+0x30>
    }

    return (dst);
800140fc:	fdc42783          	lw	a5,-36(s0)
}
80014100:	00078513          	mv	a0,a5
80014104:	02c12403          	lw	s0,44(sp)
80014108:	03010113          	addi	sp,sp,48
8001410c:	00008067          	ret

80014110 <rt_strncmp>:
 *         If the result < 0, cs is smaller than ct.
 *         If the result > 0, cs is greater than ct.
 *         If the result = 0, cs is equal to ct.
 */
rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_size_t count)
{
80014110:	fd010113          	addi	sp,sp,-48
80014114:	02812623          	sw	s0,44(sp)
80014118:	03010413          	addi	s0,sp,48
8001411c:	fca42e23          	sw	a0,-36(s0)
80014120:	fcb42c23          	sw	a1,-40(s0)
80014124:	fcc42a23          	sw	a2,-44(s0)
    signed char __res = 0;
80014128:	fe0407a3          	sb	zero,-17(s0)

    while (count)
8001412c:	0500006f          	j	8001417c <rt_strncmp+0x6c>
    {
        if ((__res = *cs - *ct++) != 0 || !*cs++)
80014130:	fdc42783          	lw	a5,-36(s0)
80014134:	0007c703          	lbu	a4,0(a5)
80014138:	fd842783          	lw	a5,-40(s0)
8001413c:	00178693          	addi	a3,a5,1
80014140:	fcd42c23          	sw	a3,-40(s0)
80014144:	0007c783          	lbu	a5,0(a5)
80014148:	40f707b3          	sub	a5,a4,a5
8001414c:	0ff7f793          	zext.b	a5,a5
80014150:	fef407a3          	sb	a5,-17(s0)
80014154:	fef40783          	lb	a5,-17(s0)
80014158:	02079663          	bnez	a5,80014184 <rt_strncmp+0x74>
8001415c:	fdc42783          	lw	a5,-36(s0)
80014160:	00178713          	addi	a4,a5,1
80014164:	fce42e23          	sw	a4,-36(s0)
80014168:	0007c783          	lbu	a5,0(a5)
8001416c:	00078c63          	beqz	a5,80014184 <rt_strncmp+0x74>
            break;
        count --;
80014170:	fd442783          	lw	a5,-44(s0)
80014174:	fff78793          	addi	a5,a5,-1
80014178:	fcf42a23          	sw	a5,-44(s0)
    while (count)
8001417c:	fd442783          	lw	a5,-44(s0)
80014180:	fa0798e3          	bnez	a5,80014130 <rt_strncmp+0x20>
    }

    return __res;
80014184:	fef40783          	lb	a5,-17(s0)
}
80014188:	00078513          	mv	a0,a5
8001418c:	02c12403          	lw	s0,44(sp)
80014190:	03010113          	addi	sp,sp,48
80014194:	00008067          	ret

80014198 <rt_strcmp>:
 *         If the result < 0, cs is smaller than ct.
 *         If the result > 0, cs is greater than ct.
 *         If the result = 0, cs is equal to ct.
 */
rt_int32_t rt_strcmp(const char *cs, const char *ct)
{
80014198:	fe010113          	addi	sp,sp,-32
8001419c:	00812e23          	sw	s0,28(sp)
800141a0:	02010413          	addi	s0,sp,32
800141a4:	fea42623          	sw	a0,-20(s0)
800141a8:	feb42423          	sw	a1,-24(s0)
    while (*cs && *cs == *ct)
800141ac:	01c0006f          	j	800141c8 <rt_strcmp+0x30>
    {
        cs++;
800141b0:	fec42783          	lw	a5,-20(s0)
800141b4:	00178793          	addi	a5,a5,1
800141b8:	fef42623          	sw	a5,-20(s0)
        ct++;
800141bc:	fe842783          	lw	a5,-24(s0)
800141c0:	00178793          	addi	a5,a5,1
800141c4:	fef42423          	sw	a5,-24(s0)
    while (*cs && *cs == *ct)
800141c8:	fec42783          	lw	a5,-20(s0)
800141cc:	0007c783          	lbu	a5,0(a5)
800141d0:	00078c63          	beqz	a5,800141e8 <rt_strcmp+0x50>
800141d4:	fec42783          	lw	a5,-20(s0)
800141d8:	0007c703          	lbu	a4,0(a5)
800141dc:	fe842783          	lw	a5,-24(s0)
800141e0:	0007c783          	lbu	a5,0(a5)
800141e4:	fcf706e3          	beq	a4,a5,800141b0 <rt_strcmp+0x18>
    }

    return (*cs - *ct);
800141e8:	fec42783          	lw	a5,-20(s0)
800141ec:	0007c783          	lbu	a5,0(a5)
800141f0:	00078713          	mv	a4,a5
800141f4:	fe842783          	lw	a5,-24(s0)
800141f8:	0007c783          	lbu	a5,0(a5)
800141fc:	40f707b3          	sub	a5,a4,a5
}
80014200:	00078513          	mv	a0,a5
80014204:	01c12403          	lw	s0,28(sp)
80014208:	02010113          	addi	sp,sp,32
8001420c:	00008067          	ret

80014210 <rt_strlen>:
 * @param  s is the string
 *
 * @return The length of string.
 */
rt_size_t rt_strlen(const char *s)
{
80014210:	fd010113          	addi	sp,sp,-48
80014214:	02812623          	sw	s0,44(sp)
80014218:	03010413          	addi	s0,sp,48
8001421c:	fca42e23          	sw	a0,-36(s0)
    const char *sc;

    for (sc = s; *sc != '\0'; ++sc) /* nothing */
80014220:	fdc42783          	lw	a5,-36(s0)
80014224:	fef42623          	sw	a5,-20(s0)
80014228:	0100006f          	j	80014238 <rt_strlen+0x28>
8001422c:	fec42783          	lw	a5,-20(s0)
80014230:	00178793          	addi	a5,a5,1
80014234:	fef42623          	sw	a5,-20(s0)
80014238:	fec42783          	lw	a5,-20(s0)
8001423c:	0007c783          	lbu	a5,0(a5)
80014240:	fe0796e3          	bnez	a5,8001422c <rt_strlen+0x1c>
        ;

    return sc - s;
80014244:	fec42703          	lw	a4,-20(s0)
80014248:	fdc42783          	lw	a5,-36(s0)
8001424c:	40f707b3          	sub	a5,a4,a5
}
80014250:	00078513          	mv	a0,a5
80014254:	02c12403          	lw	s0,44(sp)
80014258:	03010113          	addi	sp,sp,48
8001425c:	00008067          	ret

80014260 <rt_strdup>:
 * @param  s is the string to be duplicated.
 *
 * @return The string address of the copy.
 */
char *rt_strdup(const char *s)
{
80014260:	fd010113          	addi	sp,sp,-48
80014264:	02112623          	sw	ra,44(sp)
80014268:	02812423          	sw	s0,40(sp)
8001426c:	03010413          	addi	s0,sp,48
80014270:	fca42e23          	sw	a0,-36(s0)
    rt_size_t len = rt_strlen(s) + 1;
80014274:	fdc42503          	lw	a0,-36(s0)
80014278:	f99ff0ef          	jal	ra,80014210 <rt_strlen>
8001427c:	00050793          	mv	a5,a0
80014280:	00178793          	addi	a5,a5,1
80014284:	fef42623          	sw	a5,-20(s0)
    char *tmp = (char *)rt_malloc(len);
80014288:	fec42503          	lw	a0,-20(s0)
8001428c:	240010ef          	jal	ra,800154cc <rt_malloc>
80014290:	fea42423          	sw	a0,-24(s0)

    if (!tmp)
80014294:	fe842783          	lw	a5,-24(s0)
80014298:	00079663          	bnez	a5,800142a4 <rt_strdup+0x44>
        return RT_NULL;
8001429c:	00000793          	li	a5,0
800142a0:	0180006f          	j	800142b8 <rt_strdup+0x58>

    rt_memcpy(tmp, s, len);
800142a4:	fec42603          	lw	a2,-20(s0)
800142a8:	fdc42583          	lw	a1,-36(s0)
800142ac:	fe842503          	lw	a0,-24(s0)
800142b0:	b39ff0ef          	jal	ra,80013de8 <rt_memcpy>

    return tmp;
800142b4:	fe842783          	lw	a5,-24(s0)
}
800142b8:	00078513          	mv	a0,a5
800142bc:	02c12083          	lw	ra,44(sp)
800142c0:	02812403          	lw	s0,40(sp)
800142c4:	03010113          	addi	sp,sp,48
800142c8:	00008067          	ret

800142cc <rt_show_version>:

/**
 * This function will show the version of rt-thread rtos
 */
void rt_show_version(void)
{
800142cc:	ff010113          	addi	sp,sp,-16
800142d0:	00112623          	sw	ra,12(sp)
800142d4:	00812423          	sw	s0,8(sp)
800142d8:	01010413          	addi	s0,sp,16
    rt_kprintf("\n \\ | /\n");
800142dc:	00013517          	auipc	a0,0x13
800142e0:	21850513          	addi	a0,a0,536 # 800274f4 <raise+0x1900>
800142e4:	745000ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("- RT -     Thread Operating System\n");
800142e8:	00013517          	auipc	a0,0x13
800142ec:	21850513          	addi	a0,a0,536 # 80027500 <raise+0x190c>
800142f0:	739000ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf(" / | \\     %d.%d.%d build %s %s\n",
800142f4:	00013797          	auipc	a5,0x13
800142f8:	23078793          	addi	a5,a5,560 # 80027524 <raise+0x1930>
800142fc:	00013717          	auipc	a4,0x13
80014300:	23470713          	addi	a4,a4,564 # 80027530 <raise+0x193c>
80014304:	00000693          	li	a3,0
80014308:	00000613          	li	a2,0
8001430c:	00500593          	li	a1,5
80014310:	00013517          	auipc	a0,0x13
80014314:	22c50513          	addi	a0,a0,556 # 8002753c <raise+0x1948>
80014318:	711000ef          	jal	ra,80015228 <rt_kprintf>
               (rt_int32_t)RT_VERSION_MAJOR, (rt_int32_t)RT_VERSION_MINOR, (rt_int32_t)RT_VERSION_PATCH, __DATE__, __TIME__);
    rt_kprintf(" 2006 - 2022 Copyright by RT-Thread team\n");
8001431c:	00013517          	auipc	a0,0x13
80014320:	24450513          	addi	a0,a0,580 # 80027560 <raise+0x196c>
80014324:	705000ef          	jal	ra,80015228 <rt_kprintf>
}
80014328:	00000013          	nop
8001432c:	00c12083          	lw	ra,12(sp)
80014330:	00812403          	lw	s0,8(sp)
80014334:	01010113          	addi	sp,sp,16
80014338:	00008067          	ret

8001433c <divide>:
#ifdef RT_KPRINTF_USING_LONGLONG
rt_inline int divide(long long *n, int base)
#else
rt_inline int divide(long *n, int base)
#endif /* RT_KPRINTF_USING_LONGLONG */
{
8001433c:	fd010113          	addi	sp,sp,-48
80014340:	02112623          	sw	ra,44(sp)
80014344:	02812423          	sw	s0,40(sp)
80014348:	03212223          	sw	s2,36(sp)
8001434c:	03312023          	sw	s3,32(sp)
80014350:	03010413          	addi	s0,sp,48
80014354:	fca42e23          	sw	a0,-36(s0)
80014358:	fcb42c23          	sw	a1,-40(s0)
    int res;

    /* optimized for processor which does not support divide instructions. */
#ifdef RT_KPRINTF_USING_LONGLONG
    res = (int)(((unsigned long long)*n) % base);
8001435c:	fdc42783          	lw	a5,-36(s0)
80014360:	0007a703          	lw	a4,0(a5)
80014364:	0047a783          	lw	a5,4(a5)
80014368:	00070513          	mv	a0,a4
8001436c:	00078593          	mv	a1,a5
80014370:	fd842783          	lw	a5,-40(s0)
80014374:	00078613          	mv	a2,a5
80014378:	41f7d793          	srai	a5,a5,0x1f
8001437c:	00078693          	mv	a3,a5
80014380:	cfcec0ef          	jal	ra,8000087c <__umoddi3>
80014384:	00050713          	mv	a4,a0
80014388:	00058793          	mv	a5,a1
8001438c:	fee42623          	sw	a4,-20(s0)
    *n = (long long)(((unsigned long long)*n) / base);
80014390:	fdc42783          	lw	a5,-36(s0)
80014394:	0007a703          	lw	a4,0(a5)
80014398:	0047a783          	lw	a5,4(a5)
8001439c:	00070513          	mv	a0,a4
800143a0:	00078593          	mv	a1,a5
800143a4:	fd842783          	lw	a5,-40(s0)
800143a8:	00078913          	mv	s2,a5
800143ac:	41f7d793          	srai	a5,a5,0x1f
800143b0:	00078993          	mv	s3,a5
800143b4:	00090613          	mv	a2,s2
800143b8:	00098693          	mv	a3,s3
800143bc:	890ec0ef          	jal	ra,8000044c <__udivdi3>
800143c0:	00050713          	mv	a4,a0
800143c4:	00058793          	mv	a5,a1
800143c8:	fdc42683          	lw	a3,-36(s0)
800143cc:	00e6a023          	sw	a4,0(a3) # 1000 <__STACKSIZE__-0x3000>
800143d0:	00f6a223          	sw	a5,4(a3)
#else
    res = (int)(((unsigned long)*n) % base);
    *n = (long)(((unsigned long)*n) / base);
#endif

    return res;
800143d4:	fec42783          	lw	a5,-20(s0)
}
800143d8:	00078513          	mv	a0,a5
800143dc:	02c12083          	lw	ra,44(sp)
800143e0:	02812403          	lw	s0,40(sp)
800143e4:	02412903          	lw	s2,36(sp)
800143e8:	02012983          	lw	s3,32(sp)
800143ec:	03010113          	addi	sp,sp,48
800143f0:	00008067          	ret

800143f4 <skip_atoi>:

rt_inline int skip_atoi(const char **s)
{
800143f4:	fd010113          	addi	sp,sp,-48
800143f8:	02812623          	sw	s0,44(sp)
800143fc:	03010413          	addi	s0,sp,48
80014400:	fca42e23          	sw	a0,-36(s0)
    int i = 0;
80014404:	fe042623          	sw	zero,-20(s0)
    while (_ISDIGIT(**s))
80014408:	0400006f          	j	80014448 <skip_atoi+0x54>
        i = i * 10 + *((*s)++) - '0';
8001440c:	fec42703          	lw	a4,-20(s0)
80014410:	00070793          	mv	a5,a4
80014414:	00279793          	slli	a5,a5,0x2
80014418:	00e787b3          	add	a5,a5,a4
8001441c:	00179793          	slli	a5,a5,0x1
80014420:	00078613          	mv	a2,a5
80014424:	fdc42783          	lw	a5,-36(s0)
80014428:	0007a783          	lw	a5,0(a5)
8001442c:	00178693          	addi	a3,a5,1
80014430:	fdc42703          	lw	a4,-36(s0)
80014434:	00d72023          	sw	a3,0(a4)
80014438:	0007c783          	lbu	a5,0(a5)
8001443c:	00f607b3          	add	a5,a2,a5
80014440:	fd078793          	addi	a5,a5,-48
80014444:	fef42623          	sw	a5,-20(s0)
    while (_ISDIGIT(**s))
80014448:	fdc42783          	lw	a5,-36(s0)
8001444c:	0007a783          	lw	a5,0(a5)
80014450:	0007c783          	lbu	a5,0(a5)
80014454:	fd078793          	addi	a5,a5,-48
80014458:	00078713          	mv	a4,a5
8001445c:	00900793          	li	a5,9
80014460:	fae7f6e3          	bgeu	a5,a4,8001440c <skip_atoi+0x18>

    return i;
80014464:	fec42783          	lw	a5,-20(s0)
}
80014468:	00078513          	mv	a0,a5
8001446c:	02c12403          	lw	s0,44(sp)
80014470:	03010113          	addi	sp,sp,48
80014474:	00008067          	ret

80014478 <print_number>:
                          int   s,
#ifdef RT_PRINTF_PRECISION
                          int   precision,
#endif /* RT_PRINTF_PRECISION */
                          int   type)
{
80014478:	f7010113          	addi	sp,sp,-144
8001447c:	08112623          	sw	ra,140(sp)
80014480:	08812423          	sw	s0,136(sp)
80014484:	09010413          	addi	s0,sp,144
80014488:	f8a42623          	sw	a0,-116(s0)
8001448c:	f8b42423          	sw	a1,-120(s0)
80014490:	f8c42023          	sw	a2,-128(s0)
80014494:	f8d42223          	sw	a3,-124(s0)
80014498:	f6e42e23          	sw	a4,-132(s0)
8001449c:	f6f42c23          	sw	a5,-136(s0)
800144a0:	f7042a23          	sw	a6,-140(s0)
800144a4:	f7142823          	sw	a7,-144(s0)
#ifdef RT_KPRINTF_USING_LONGLONG
    char tmp[64];
#else
    char tmp[32];
#endif /* RT_KPRINTF_USING_LONGLONG */
    int precision_bak = precision;
800144a8:	f7442783          	lw	a5,-140(s0)
800144ac:	fef42023          	sw	a5,-32(s0)
    const char *digits;
    static const char small_digits[] = "0123456789abcdef";
    static const char large_digits[] = "0123456789ABCDEF";
    int i, size;

    size = s;
800144b0:	f7842783          	lw	a5,-136(s0)
800144b4:	fef42223          	sw	a5,-28(s0)

    digits = (type & LARGE) ? large_digits : small_digits;
800144b8:	f7042783          	lw	a5,-144(s0)
800144bc:	0407f793          	andi	a5,a5,64
800144c0:	00078863          	beqz	a5,800144d0 <print_number+0x58>
800144c4:	00014797          	auipc	a5,0x14
800144c8:	1dc78793          	addi	a5,a5,476 # 800286a0 <large_digits.2>
800144cc:	00c0006f          	j	800144d8 <print_number+0x60>
800144d0:	00014797          	auipc	a5,0x14
800144d4:	1e478793          	addi	a5,a5,484 # 800286b4 <small_digits.1>
800144d8:	fcf42e23          	sw	a5,-36(s0)
    if (type & LEFT)
800144dc:	f7042783          	lw	a5,-144(s0)
800144e0:	0107f793          	andi	a5,a5,16
800144e4:	00078863          	beqz	a5,800144f4 <print_number+0x7c>
        type &= ~ZEROPAD;
800144e8:	f7042783          	lw	a5,-144(s0)
800144ec:	ffe7f793          	andi	a5,a5,-2
800144f0:	f6f42823          	sw	a5,-144(s0)

    c = (type & ZEROPAD) ? '0' : ' ';
800144f4:	f7042783          	lw	a5,-144(s0)
800144f8:	0017f793          	andi	a5,a5,1
800144fc:	00078663          	beqz	a5,80014508 <print_number+0x90>
80014500:	03000793          	li	a5,48
80014504:	0080006f          	j	8001450c <print_number+0x94>
80014508:	02000793          	li	a5,32
8001450c:	fcf40da3          	sb	a5,-37(s0)

    /* get sign */
    sign = 0;
80014510:	fe0407a3          	sb	zero,-17(s0)
    if (type & SIGN)
80014514:	f7042783          	lw	a5,-144(s0)
80014518:	0027f793          	andi	a5,a5,2
8001451c:	08078063          	beqz	a5,8001459c <print_number+0x124>
    {
        if (num < 0)
80014520:	f8042703          	lw	a4,-128(s0)
80014524:	f8442783          	lw	a5,-124(s0)
80014528:	0407d463          	bgez	a5,80014570 <print_number+0xf8>
        {
            sign = '-';
8001452c:	02d00793          	li	a5,45
80014530:	fef407a3          	sb	a5,-17(s0)
            num = -num;
80014534:	f8042503          	lw	a0,-128(s0)
80014538:	f8442583          	lw	a1,-124(s0)
8001453c:	00000713          	li	a4,0
80014540:	00000793          	li	a5,0
80014544:	40a70633          	sub	a2,a4,a0
80014548:	00060813          	mv	a6,a2
8001454c:	01073833          	sltu	a6,a4,a6
80014550:	40b786b3          	sub	a3,a5,a1
80014554:	410687b3          	sub	a5,a3,a6
80014558:	00078693          	mv	a3,a5
8001455c:	00060713          	mv	a4,a2
80014560:	00068793          	mv	a5,a3
80014564:	f8e42023          	sw	a4,-128(s0)
80014568:	f8f42223          	sw	a5,-124(s0)
8001456c:	0300006f          	j	8001459c <print_number+0x124>
        }
        else if (type & PLUS)
80014570:	f7042783          	lw	a5,-144(s0)
80014574:	0047f793          	andi	a5,a5,4
80014578:	00078863          	beqz	a5,80014588 <print_number+0x110>
            sign = '+';
8001457c:	02b00793          	li	a5,43
80014580:	fef407a3          	sb	a5,-17(s0)
80014584:	0180006f          	j	8001459c <print_number+0x124>
        else if (type & SPACE)
80014588:	f7042783          	lw	a5,-144(s0)
8001458c:	0087f793          	andi	a5,a5,8
80014590:	00078663          	beqz	a5,8001459c <print_number+0x124>
            sign = ' ';
80014594:	02000793          	li	a5,32
80014598:	fef407a3          	sb	a5,-17(s0)
        else if (base == 8)
            size--;
    }
#endif /* RT_PRINTF_SPECIAL */

    i = 0;
8001459c:	fe042423          	sw	zero,-24(s0)
    if (num == 0)
800145a0:	f8042603          	lw	a2,-128(s0)
800145a4:	f8442683          	lw	a3,-124(s0)
800145a8:	00060793          	mv	a5,a2
800145ac:	00d7e7b3          	or	a5,a5,a3
800145b0:	06079063          	bnez	a5,80014610 <print_number+0x198>
        tmp[i++] = '0';
800145b4:	fe842783          	lw	a5,-24(s0)
800145b8:	00178713          	addi	a4,a5,1
800145bc:	fee42423          	sw	a4,-24(s0)
800145c0:	ff078793          	addi	a5,a5,-16
800145c4:	008787b3          	add	a5,a5,s0
800145c8:	03000713          	li	a4,48
800145cc:	fae78423          	sb	a4,-88(a5)
800145d0:	0540006f          	j	80014624 <print_number+0x1ac>
    else
    {
        while (num != 0)
            tmp[i++] = digits[divide(&num, base)];
800145d4:	f8040793          	addi	a5,s0,-128
800145d8:	f7c42583          	lw	a1,-132(s0)
800145dc:	00078513          	mv	a0,a5
800145e0:	d5dff0ef          	jal	ra,8001433c <divide>
800145e4:	00050793          	mv	a5,a0
800145e8:	00078713          	mv	a4,a5
800145ec:	fdc42783          	lw	a5,-36(s0)
800145f0:	00e78733          	add	a4,a5,a4
800145f4:	fe842783          	lw	a5,-24(s0)
800145f8:	00178693          	addi	a3,a5,1
800145fc:	fed42423          	sw	a3,-24(s0)
80014600:	00074703          	lbu	a4,0(a4)
80014604:	ff078793          	addi	a5,a5,-16
80014608:	008787b3          	add	a5,a5,s0
8001460c:	fae78423          	sb	a4,-88(a5)
        while (num != 0)
80014610:	f8042603          	lw	a2,-128(s0)
80014614:	f8442683          	lw	a3,-124(s0)
80014618:	00060793          	mv	a5,a2
8001461c:	00d7e7b3          	or	a5,a5,a3
80014620:	fa079ae3          	bnez	a5,800145d4 <print_number+0x15c>
    }

#ifdef RT_PRINTF_PRECISION
    if (i > precision)
80014624:	fe842703          	lw	a4,-24(s0)
80014628:	f7442783          	lw	a5,-140(s0)
8001462c:	00e7d663          	bge	a5,a4,80014638 <print_number+0x1c0>
        precision = i;
80014630:	fe842783          	lw	a5,-24(s0)
80014634:	f6f42a23          	sw	a5,-140(s0)
    size -= precision;
80014638:	fe442703          	lw	a4,-28(s0)
8001463c:	f7442783          	lw	a5,-140(s0)
80014640:	40f707b3          	sub	a5,a4,a5
80014644:	fef42223          	sw	a5,-28(s0)
#else
    size -= i;
#endif /* RT_PRINTF_PRECISION */

    if (!(type & (ZEROPAD | LEFT)))
80014648:	f7042783          	lw	a5,-144(s0)
8001464c:	0117f793          	andi	a5,a5,17
80014650:	04079c63          	bnez	a5,800146a8 <print_number+0x230>
    {
        if ((sign) && (size > 0))
80014654:	fef44783          	lbu	a5,-17(s0)
80014658:	04078063          	beqz	a5,80014698 <print_number+0x220>
8001465c:	fe442783          	lw	a5,-28(s0)
80014660:	02f05c63          	blez	a5,80014698 <print_number+0x220>
            size--;
80014664:	fe442783          	lw	a5,-28(s0)
80014668:	fff78793          	addi	a5,a5,-1
8001466c:	fef42223          	sw	a5,-28(s0)

        while (size-- > 0)
80014670:	0280006f          	j	80014698 <print_number+0x220>
        {
            if (buf < end)
80014674:	f8c42703          	lw	a4,-116(s0)
80014678:	f8842783          	lw	a5,-120(s0)
8001467c:	00f77863          	bgeu	a4,a5,8001468c <print_number+0x214>
                *buf = ' ';
80014680:	f8c42783          	lw	a5,-116(s0)
80014684:	02000713          	li	a4,32
80014688:	00e78023          	sb	a4,0(a5)
            ++ buf;
8001468c:	f8c42783          	lw	a5,-116(s0)
80014690:	00178793          	addi	a5,a5,1
80014694:	f8f42623          	sw	a5,-116(s0)
        while (size-- > 0)
80014698:	fe442783          	lw	a5,-28(s0)
8001469c:	fff78713          	addi	a4,a5,-1
800146a0:	fee42223          	sw	a4,-28(s0)
800146a4:	fcf048e3          	bgtz	a5,80014674 <print_number+0x1fc>
        }
    }

    if (sign)
800146a8:	fef44783          	lbu	a5,-17(s0)
800146ac:	02078a63          	beqz	a5,800146e0 <print_number+0x268>
    {
        if (buf < end)
800146b0:	f8c42703          	lw	a4,-116(s0)
800146b4:	f8842783          	lw	a5,-120(s0)
800146b8:	00f77863          	bgeu	a4,a5,800146c8 <print_number+0x250>
        {
            *buf = sign;
800146bc:	f8c42783          	lw	a5,-116(s0)
800146c0:	fef44703          	lbu	a4,-17(s0)
800146c4:	00e78023          	sb	a4,0(a5)
        }
        -- size;
800146c8:	fe442783          	lw	a5,-28(s0)
800146cc:	fff78793          	addi	a5,a5,-1
800146d0:	fef42223          	sw	a5,-28(s0)
        ++ buf;
800146d4:	f8c42783          	lw	a5,-116(s0)
800146d8:	00178793          	addi	a5,a5,1
800146dc:	f8f42623          	sw	a5,-116(s0)
        }
    }
#endif /* RT_PRINTF_SPECIAL */

    /* no align to the left */
    if (!(type & LEFT))
800146e0:	f7042783          	lw	a5,-144(s0)
800146e4:	0107f793          	andi	a5,a5,16
800146e8:	06079263          	bnez	a5,8001474c <print_number+0x2d4>
    {
        while (size-- > 0)
800146ec:	0280006f          	j	80014714 <print_number+0x29c>
        {
            if (buf < end)
800146f0:	f8c42703          	lw	a4,-116(s0)
800146f4:	f8842783          	lw	a5,-120(s0)
800146f8:	00f77863          	bgeu	a4,a5,80014708 <print_number+0x290>
                *buf = c;
800146fc:	f8c42783          	lw	a5,-116(s0)
80014700:	fdb44703          	lbu	a4,-37(s0)
80014704:	00e78023          	sb	a4,0(a5)
            ++ buf;
80014708:	f8c42783          	lw	a5,-116(s0)
8001470c:	00178793          	addi	a5,a5,1
80014710:	f8f42623          	sw	a5,-116(s0)
        while (size-- > 0)
80014714:	fe442783          	lw	a5,-28(s0)
80014718:	fff78713          	addi	a4,a5,-1
8001471c:	fee42223          	sw	a4,-28(s0)
80014720:	fcf048e3          	bgtz	a5,800146f0 <print_number+0x278>
        }
    }

#ifdef RT_PRINTF_PRECISION
    while (i < precision--)
80014724:	0280006f          	j	8001474c <print_number+0x2d4>
    {
        if (buf < end)
80014728:	f8c42703          	lw	a4,-116(s0)
8001472c:	f8842783          	lw	a5,-120(s0)
80014730:	00f77863          	bgeu	a4,a5,80014740 <print_number+0x2c8>
            *buf = '0';
80014734:	f8c42783          	lw	a5,-116(s0)
80014738:	03000713          	li	a4,48
8001473c:	00e78023          	sb	a4,0(a5)
        ++ buf;
80014740:	f8c42783          	lw	a5,-116(s0)
80014744:	00178793          	addi	a5,a5,1
80014748:	f8f42623          	sw	a5,-116(s0)
    while (i < precision--)
8001474c:	f7442783          	lw	a5,-140(s0)
80014750:	fff78713          	addi	a4,a5,-1
80014754:	f6e42a23          	sw	a4,-140(s0)
80014758:	fe842703          	lw	a4,-24(s0)
8001475c:	fcf746e3          	blt	a4,a5,80014728 <print_number+0x2b0>
    }
#endif /* RT_PRINTF_PRECISION */

    /* put number in the temporary buffer */
    while (i-- > 0 && (precision_bak != 0))
80014760:	0340006f          	j	80014794 <print_number+0x31c>
    {
        if (buf < end)
80014764:	f8c42703          	lw	a4,-116(s0)
80014768:	f8842783          	lw	a5,-120(s0)
8001476c:	00f77e63          	bgeu	a4,a5,80014788 <print_number+0x310>
            *buf = tmp[i];
80014770:	fe842783          	lw	a5,-24(s0)
80014774:	ff078793          	addi	a5,a5,-16
80014778:	008787b3          	add	a5,a5,s0
8001477c:	fa87c703          	lbu	a4,-88(a5)
80014780:	f8c42783          	lw	a5,-116(s0)
80014784:	00e78023          	sb	a4,0(a5)
        ++ buf;
80014788:	f8c42783          	lw	a5,-116(s0)
8001478c:	00178793          	addi	a5,a5,1
80014790:	f8f42623          	sw	a5,-116(s0)
    while (i-- > 0 && (precision_bak != 0))
80014794:	fe842783          	lw	a5,-24(s0)
80014798:	fff78713          	addi	a4,a5,-1
8001479c:	fee42423          	sw	a4,-24(s0)
800147a0:	02f05a63          	blez	a5,800147d4 <print_number+0x35c>
800147a4:	fe042783          	lw	a5,-32(s0)
800147a8:	fa079ee3          	bnez	a5,80014764 <print_number+0x2ec>
    }

    while (size-- > 0)
800147ac:	0280006f          	j	800147d4 <print_number+0x35c>
    {
        if (buf < end)
800147b0:	f8c42703          	lw	a4,-116(s0)
800147b4:	f8842783          	lw	a5,-120(s0)
800147b8:	00f77863          	bgeu	a4,a5,800147c8 <print_number+0x350>
            *buf = ' ';
800147bc:	f8c42783          	lw	a5,-116(s0)
800147c0:	02000713          	li	a4,32
800147c4:	00e78023          	sb	a4,0(a5)
        ++ buf;
800147c8:	f8c42783          	lw	a5,-116(s0)
800147cc:	00178793          	addi	a5,a5,1
800147d0:	f8f42623          	sw	a5,-116(s0)
    while (size-- > 0)
800147d4:	fe442783          	lw	a5,-28(s0)
800147d8:	fff78713          	addi	a4,a5,-1
800147dc:	fee42223          	sw	a4,-28(s0)
800147e0:	fcf048e3          	bgtz	a5,800147b0 <print_number+0x338>
    }

    return buf;
800147e4:	f8c42783          	lw	a5,-116(s0)
}
800147e8:	00078513          	mv	a0,a5
800147ec:	08c12083          	lw	ra,140(sp)
800147f0:	08812403          	lw	s0,136(sp)
800147f4:	09010113          	addi	sp,sp,144
800147f8:	00008067          	ret

800147fc <rt_vsnprintf>:
 * @param  args is a list of variable parameters.
 *
 * @return The number of characters actually written to buffer.
 */
RT_WEAK int rt_vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
{
800147fc:	fb010113          	addi	sp,sp,-80
80014800:	04112623          	sw	ra,76(sp)
80014804:	04812423          	sw	s0,72(sp)
80014808:	05212223          	sw	s2,68(sp)
8001480c:	05312023          	sw	s3,64(sp)
80014810:	05010413          	addi	s0,sp,80
80014814:	faa42e23          	sw	a0,-68(s0)
80014818:	fab42c23          	sw	a1,-72(s0)
8001481c:	fac42a23          	sw	a2,-76(s0)
80014820:	fad42823          	sw	a3,-80(s0)

#ifdef RT_PRINTF_PRECISION
    int precision;      /* min. # of digits for integers and max for a string */
#endif /* RT_PRINTF_PRECISION */

    str = buf;
80014824:	fbc42783          	lw	a5,-68(s0)
80014828:	fcf42e23          	sw	a5,-36(s0)
    end = buf + size;
8001482c:	fbc42703          	lw	a4,-68(s0)
80014830:	fb842783          	lw	a5,-72(s0)
80014834:	00f707b3          	add	a5,a4,a5
80014838:	fcf42c23          	sw	a5,-40(s0)

    /* Make sure end is always >= buf */
    if (end < buf)
8001483c:	fd842703          	lw	a4,-40(s0)
80014840:	fbc42783          	lw	a5,-68(s0)
80014844:	76f77263          	bgeu	a4,a5,80014fa8 <rt_vsnprintf+0x7ac>
    {
        end  = ((char *) - 1);
80014848:	fff00793          	li	a5,-1
8001484c:	fcf42c23          	sw	a5,-40(s0)
        size = end - buf;
80014850:	fd842703          	lw	a4,-40(s0)
80014854:	fbc42783          	lw	a5,-68(s0)
80014858:	40f707b3          	sub	a5,a4,a5
8001485c:	faf42c23          	sw	a5,-72(s0)
    }

    for (; *fmt ; ++fmt)
80014860:	7480006f          	j	80014fa8 <rt_vsnprintf+0x7ac>
    {
        if (*fmt != '%')
80014864:	fb442783          	lw	a5,-76(s0)
80014868:	0007c703          	lbu	a4,0(a5)
8001486c:	02500793          	li	a5,37
80014870:	02f70863          	beq	a4,a5,800148a0 <rt_vsnprintf+0xa4>
        {
            if (str < end)
80014874:	fdc42703          	lw	a4,-36(s0)
80014878:	fd842783          	lw	a5,-40(s0)
8001487c:	00f77a63          	bgeu	a4,a5,80014890 <rt_vsnprintf+0x94>
                *str = *fmt;
80014880:	fb442783          	lw	a5,-76(s0)
80014884:	0007c703          	lbu	a4,0(a5)
80014888:	fdc42783          	lw	a5,-36(s0)
8001488c:	00e78023          	sb	a4,0(a5)
            ++ str;
80014890:	fdc42783          	lw	a5,-36(s0)
80014894:	00178793          	addi	a5,a5,1
80014898:	fcf42e23          	sw	a5,-36(s0)
            continue;
8001489c:	7000006f          	j	80014f9c <rt_vsnprintf+0x7a0>
        }

        /* process flags */
        flags = 0;
800148a0:	fc040923          	sb	zero,-46(s0)

        while (1)
        {
            /* skips the first '%' also */
            ++ fmt;
800148a4:	fb442783          	lw	a5,-76(s0)
800148a8:	00178793          	addi	a5,a5,1
800148ac:	faf42a23          	sw	a5,-76(s0)
            if (*fmt == '-') flags |= LEFT;
800148b0:	fb442783          	lw	a5,-76(s0)
800148b4:	0007c703          	lbu	a4,0(a5)
800148b8:	02d00793          	li	a5,45
800148bc:	00f71a63          	bne	a4,a5,800148d0 <rt_vsnprintf+0xd4>
800148c0:	fd244783          	lbu	a5,-46(s0)
800148c4:	0107e793          	ori	a5,a5,16
800148c8:	fcf40923          	sb	a5,-46(s0)
800148cc:	fd9ff06f          	j	800148a4 <rt_vsnprintf+0xa8>
            else if (*fmt == '+') flags |= PLUS;
800148d0:	fb442783          	lw	a5,-76(s0)
800148d4:	0007c703          	lbu	a4,0(a5)
800148d8:	02b00793          	li	a5,43
800148dc:	00f71a63          	bne	a4,a5,800148f0 <rt_vsnprintf+0xf4>
800148e0:	fd244783          	lbu	a5,-46(s0)
800148e4:	0047e793          	ori	a5,a5,4
800148e8:	fcf40923          	sb	a5,-46(s0)
800148ec:	fb9ff06f          	j	800148a4 <rt_vsnprintf+0xa8>
            else if (*fmt == ' ') flags |= SPACE;
800148f0:	fb442783          	lw	a5,-76(s0)
800148f4:	0007c703          	lbu	a4,0(a5)
800148f8:	02000793          	li	a5,32
800148fc:	00f71a63          	bne	a4,a5,80014910 <rt_vsnprintf+0x114>
80014900:	fd244783          	lbu	a5,-46(s0)
80014904:	0087e793          	ori	a5,a5,8
80014908:	fcf40923          	sb	a5,-46(s0)
8001490c:	f99ff06f          	j	800148a4 <rt_vsnprintf+0xa8>
            else if (*fmt == '#') flags |= SPECIAL;
80014910:	fb442783          	lw	a5,-76(s0)
80014914:	0007c703          	lbu	a4,0(a5)
80014918:	02300793          	li	a5,35
8001491c:	00f71a63          	bne	a4,a5,80014930 <rt_vsnprintf+0x134>
80014920:	fd244783          	lbu	a5,-46(s0)
80014924:	0207e793          	ori	a5,a5,32
80014928:	fcf40923          	sb	a5,-46(s0)
8001492c:	f79ff06f          	j	800148a4 <rt_vsnprintf+0xa8>
            else if (*fmt == '0') flags |= ZEROPAD;
80014930:	fb442783          	lw	a5,-76(s0)
80014934:	0007c703          	lbu	a4,0(a5)
80014938:	03000793          	li	a5,48
8001493c:	00f71a63          	bne	a4,a5,80014950 <rt_vsnprintf+0x154>
80014940:	fd244783          	lbu	a5,-46(s0)
80014944:	0017e793          	ori	a5,a5,1
80014948:	fcf40923          	sb	a5,-46(s0)
            ++ fmt;
8001494c:	f59ff06f          	j	800148a4 <rt_vsnprintf+0xa8>
            else break;
80014950:	00000013          	nop
        }

        /* get field width */
        field_width = -1;
80014954:	fff00793          	li	a5,-1
80014958:	fcf42623          	sw	a5,-52(s0)
        if (_ISDIGIT(*fmt)) field_width = skip_atoi(&fmt);
8001495c:	fb442783          	lw	a5,-76(s0)
80014960:	0007c783          	lbu	a5,0(a5)
80014964:	fd078793          	addi	a5,a5,-48
80014968:	00078713          	mv	a4,a5
8001496c:	00900793          	li	a5,9
80014970:	00e7ec63          	bltu	a5,a4,80014988 <rt_vsnprintf+0x18c>
80014974:	fb440793          	addi	a5,s0,-76
80014978:	00078513          	mv	a0,a5
8001497c:	a79ff0ef          	jal	ra,800143f4 <skip_atoi>
80014980:	fca42623          	sw	a0,-52(s0)
80014984:	0540006f          	j	800149d8 <rt_vsnprintf+0x1dc>
        else if (*fmt == '*')
80014988:	fb442783          	lw	a5,-76(s0)
8001498c:	0007c703          	lbu	a4,0(a5)
80014990:	02a00793          	li	a5,42
80014994:	04f71263          	bne	a4,a5,800149d8 <rt_vsnprintf+0x1dc>
        {
            ++ fmt;
80014998:	fb442783          	lw	a5,-76(s0)
8001499c:	00178793          	addi	a5,a5,1
800149a0:	faf42a23          	sw	a5,-76(s0)
            /* it's the next argument */
            field_width = va_arg(args, int);
800149a4:	fb042783          	lw	a5,-80(s0)
800149a8:	00478713          	addi	a4,a5,4
800149ac:	fae42823          	sw	a4,-80(s0)
800149b0:	0007a783          	lw	a5,0(a5)
800149b4:	fcf42623          	sw	a5,-52(s0)
            if (field_width < 0)
800149b8:	fcc42783          	lw	a5,-52(s0)
800149bc:	0007de63          	bgez	a5,800149d8 <rt_vsnprintf+0x1dc>
            {
                field_width = -field_width;
800149c0:	fcc42783          	lw	a5,-52(s0)
800149c4:	40f007b3          	neg	a5,a5
800149c8:	fcf42623          	sw	a5,-52(s0)
                flags |= LEFT;
800149cc:	fd244783          	lbu	a5,-46(s0)
800149d0:	0107e793          	ori	a5,a5,16
800149d4:	fcf40923          	sb	a5,-46(s0)
            }
        }

#ifdef RT_PRINTF_PRECISION
        /* get the precision */
        precision = -1;
800149d8:	fff00793          	li	a5,-1
800149dc:	fcf42423          	sw	a5,-56(s0)
        if (*fmt == '.')
800149e0:	fb442783          	lw	a5,-76(s0)
800149e4:	0007c703          	lbu	a4,0(a5)
800149e8:	02e00793          	li	a5,46
800149ec:	06f71c63          	bne	a4,a5,80014a64 <rt_vsnprintf+0x268>
        {
            ++ fmt;
800149f0:	fb442783          	lw	a5,-76(s0)
800149f4:	00178793          	addi	a5,a5,1
800149f8:	faf42a23          	sw	a5,-76(s0)
            if (_ISDIGIT(*fmt)) precision = skip_atoi(&fmt);
800149fc:	fb442783          	lw	a5,-76(s0)
80014a00:	0007c783          	lbu	a5,0(a5)
80014a04:	fd078793          	addi	a5,a5,-48
80014a08:	00078713          	mv	a4,a5
80014a0c:	00900793          	li	a5,9
80014a10:	00e7ec63          	bltu	a5,a4,80014a28 <rt_vsnprintf+0x22c>
80014a14:	fb440793          	addi	a5,s0,-76
80014a18:	00078513          	mv	a0,a5
80014a1c:	9d9ff0ef          	jal	ra,800143f4 <skip_atoi>
80014a20:	fca42423          	sw	a0,-56(s0)
80014a24:	0340006f          	j	80014a58 <rt_vsnprintf+0x25c>
            else if (*fmt == '*')
80014a28:	fb442783          	lw	a5,-76(s0)
80014a2c:	0007c703          	lbu	a4,0(a5)
80014a30:	02a00793          	li	a5,42
80014a34:	02f71263          	bne	a4,a5,80014a58 <rt_vsnprintf+0x25c>
            {
                ++ fmt;
80014a38:	fb442783          	lw	a5,-76(s0)
80014a3c:	00178793          	addi	a5,a5,1
80014a40:	faf42a23          	sw	a5,-76(s0)
                /* it's the next argument */
                precision = va_arg(args, int);
80014a44:	fb042783          	lw	a5,-80(s0)
80014a48:	00478713          	addi	a4,a5,4
80014a4c:	fae42823          	sw	a4,-80(s0)
80014a50:	0007a783          	lw	a5,0(a5)
80014a54:	fcf42423          	sw	a5,-56(s0)
            }
            if (precision < 0) precision = 0;
80014a58:	fc842783          	lw	a5,-56(s0)
80014a5c:	0007d463          	bgez	a5,80014a64 <rt_vsnprintf+0x268>
80014a60:	fc042423          	sw	zero,-56(s0)
        }
#endif /* RT_PRINTF_PRECISION */
        /* get the conversion qualifier */
        qualifier = 0;
80014a64:	fc0408a3          	sb	zero,-47(s0)
#ifdef RT_KPRINTF_USING_LONGLONG
        if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')
80014a68:	fb442783          	lw	a5,-76(s0)
80014a6c:	0007c703          	lbu	a4,0(a5)
80014a70:	06800793          	li	a5,104
80014a74:	02f70263          	beq	a4,a5,80014a98 <rt_vsnprintf+0x29c>
80014a78:	fb442783          	lw	a5,-76(s0)
80014a7c:	0007c703          	lbu	a4,0(a5)
80014a80:	06c00793          	li	a5,108
80014a84:	00f70a63          	beq	a4,a5,80014a98 <rt_vsnprintf+0x29c>
80014a88:	fb442783          	lw	a5,-76(s0)
80014a8c:	0007c703          	lbu	a4,0(a5)
80014a90:	04c00793          	li	a5,76
80014a94:	04f71663          	bne	a4,a5,80014ae0 <rt_vsnprintf+0x2e4>
#else
        if (*fmt == 'h' || *fmt == 'l')
#endif /* RT_KPRINTF_USING_LONGLONG */
        {
            qualifier = *fmt;
80014a98:	fb442783          	lw	a5,-76(s0)
80014a9c:	0007c783          	lbu	a5,0(a5)
80014aa0:	fcf408a3          	sb	a5,-47(s0)
            ++ fmt;
80014aa4:	fb442783          	lw	a5,-76(s0)
80014aa8:	00178793          	addi	a5,a5,1
80014aac:	faf42a23          	sw	a5,-76(s0)
#ifdef RT_KPRINTF_USING_LONGLONG
            if (qualifier == 'l' && *fmt == 'l')
80014ab0:	fd144703          	lbu	a4,-47(s0)
80014ab4:	06c00793          	li	a5,108
80014ab8:	02f71463          	bne	a4,a5,80014ae0 <rt_vsnprintf+0x2e4>
80014abc:	fb442783          	lw	a5,-76(s0)
80014ac0:	0007c703          	lbu	a4,0(a5)
80014ac4:	06c00793          	li	a5,108
80014ac8:	00f71c63          	bne	a4,a5,80014ae0 <rt_vsnprintf+0x2e4>
            {
                qualifier = 'L';
80014acc:	04c00793          	li	a5,76
80014ad0:	fcf408a3          	sb	a5,-47(s0)
                ++ fmt;
80014ad4:	fb442783          	lw	a5,-76(s0)
80014ad8:	00178793          	addi	a5,a5,1
80014adc:	faf42a23          	sw	a5,-76(s0)
            }
#endif /* RT_KPRINTF_USING_LONGLONG */
        }

        /* the default base */
        base = 10;
80014ae0:	00a00793          	li	a5,10
80014ae4:	fcf409a3          	sb	a5,-45(s0)

        switch (*fmt)
80014ae8:	fb442783          	lw	a5,-76(s0)
80014aec:	0007c783          	lbu	a5,0(a5)
80014af0:	fdb78793          	addi	a5,a5,-37
80014af4:	05300713          	li	a4,83
80014af8:	30f76863          	bltu	a4,a5,80014e08 <rt_vsnprintf+0x60c>
80014afc:	00279713          	slli	a4,a5,0x2
80014b00:	00014797          	auipc	a5,0x14
80014b04:	95078793          	addi	a5,a5,-1712 # 80028450 <__fsym_tail_desc+0x84>
80014b08:	00f707b3          	add	a5,a4,a5
80014b0c:	0007a703          	lw	a4,0(a5)
80014b10:	00014797          	auipc	a5,0x14
80014b14:	94078793          	addi	a5,a5,-1728 # 80028450 <__fsym_tail_desc+0x84>
80014b18:	00f707b3          	add	a5,a4,a5
80014b1c:	00078067          	jr	a5
        {
        case 'c':
            if (!(flags & LEFT))
80014b20:	fd244783          	lbu	a5,-46(s0)
80014b24:	0107f793          	andi	a5,a5,16
80014b28:	04079063          	bnez	a5,80014b68 <rt_vsnprintf+0x36c>
            {
                while (--field_width > 0)
80014b2c:	0280006f          	j	80014b54 <rt_vsnprintf+0x358>
                {
                    if (str < end) *str = ' ';
80014b30:	fdc42703          	lw	a4,-36(s0)
80014b34:	fd842783          	lw	a5,-40(s0)
80014b38:	00f77863          	bgeu	a4,a5,80014b48 <rt_vsnprintf+0x34c>
80014b3c:	fdc42783          	lw	a5,-36(s0)
80014b40:	02000713          	li	a4,32
80014b44:	00e78023          	sb	a4,0(a5)
                    ++ str;
80014b48:	fdc42783          	lw	a5,-36(s0)
80014b4c:	00178793          	addi	a5,a5,1
80014b50:	fcf42e23          	sw	a5,-36(s0)
                while (--field_width > 0)
80014b54:	fcc42783          	lw	a5,-52(s0)
80014b58:	fff78793          	addi	a5,a5,-1
80014b5c:	fcf42623          	sw	a5,-52(s0)
80014b60:	fcc42783          	lw	a5,-52(s0)
80014b64:	fcf046e3          	bgtz	a5,80014b30 <rt_vsnprintf+0x334>
                }
            }

            /* get character */
            c = (rt_uint8_t)va_arg(args, int);
80014b68:	fb042783          	lw	a5,-80(s0)
80014b6c:	00478713          	addi	a4,a5,4
80014b70:	fae42823          	sw	a4,-80(s0)
80014b74:	0007a783          	lw	a5,0(a5)
80014b78:	fcf403a3          	sb	a5,-57(s0)
            if (str < end) *str = c;
80014b7c:	fdc42703          	lw	a4,-36(s0)
80014b80:	fd842783          	lw	a5,-40(s0)
80014b84:	00f77863          	bgeu	a4,a5,80014b94 <rt_vsnprintf+0x398>
80014b88:	fdc42783          	lw	a5,-36(s0)
80014b8c:	fc744703          	lbu	a4,-57(s0)
80014b90:	00e78023          	sb	a4,0(a5)
            ++ str;
80014b94:	fdc42783          	lw	a5,-36(s0)
80014b98:	00178793          	addi	a5,a5,1
80014b9c:	fcf42e23          	sw	a5,-36(s0)

            /* put width */
            while (--field_width > 0)
80014ba0:	0280006f          	j	80014bc8 <rt_vsnprintf+0x3cc>
            {
                if (str < end) *str = ' ';
80014ba4:	fdc42703          	lw	a4,-36(s0)
80014ba8:	fd842783          	lw	a5,-40(s0)
80014bac:	00f77863          	bgeu	a4,a5,80014bbc <rt_vsnprintf+0x3c0>
80014bb0:	fdc42783          	lw	a5,-36(s0)
80014bb4:	02000713          	li	a4,32
80014bb8:	00e78023          	sb	a4,0(a5)
                ++ str;
80014bbc:	fdc42783          	lw	a5,-36(s0)
80014bc0:	00178793          	addi	a5,a5,1
80014bc4:	fcf42e23          	sw	a5,-36(s0)
            while (--field_width > 0)
80014bc8:	fcc42783          	lw	a5,-52(s0)
80014bcc:	fff78793          	addi	a5,a5,-1
80014bd0:	fcf42623          	sw	a5,-52(s0)
80014bd4:	fcc42783          	lw	a5,-52(s0)
80014bd8:	fcf046e3          	bgtz	a5,80014ba4 <rt_vsnprintf+0x3a8>
            }
            continue;
80014bdc:	3c00006f          	j	80014f9c <rt_vsnprintf+0x7a0>

        case 's':
            s = va_arg(args, char *);
80014be0:	fb042783          	lw	a5,-80(s0)
80014be4:	00478713          	addi	a4,a5,4
80014be8:	fae42823          	sw	a4,-80(s0)
80014bec:	0007a783          	lw	a5,0(a5)
80014bf0:	fcf42a23          	sw	a5,-44(s0)
            if (!s) s = "(NULL)";
80014bf4:	fd442783          	lw	a5,-44(s0)
80014bf8:	00079863          	bnez	a5,80014c08 <rt_vsnprintf+0x40c>
80014bfc:	00013797          	auipc	a5,0x13
80014c00:	99078793          	addi	a5,a5,-1648 # 8002758c <raise+0x1998>
80014c04:	fcf42a23          	sw	a5,-44(s0)

            for (len = 0; (len != field_width) && (s[len] != '\0'); len++);
80014c08:	fe042023          	sw	zero,-32(s0)
80014c0c:	0100006f          	j	80014c1c <rt_vsnprintf+0x420>
80014c10:	fe042783          	lw	a5,-32(s0)
80014c14:	00178793          	addi	a5,a5,1
80014c18:	fef42023          	sw	a5,-32(s0)
80014c1c:	fe042703          	lw	a4,-32(s0)
80014c20:	fcc42783          	lw	a5,-52(s0)
80014c24:	00f70c63          	beq	a4,a5,80014c3c <rt_vsnprintf+0x440>
80014c28:	fe042783          	lw	a5,-32(s0)
80014c2c:	fd442703          	lw	a4,-44(s0)
80014c30:	00f707b3          	add	a5,a4,a5
80014c34:	0007c783          	lbu	a5,0(a5)
80014c38:	fc079ce3          	bnez	a5,80014c10 <rt_vsnprintf+0x414>
#ifdef RT_PRINTF_PRECISION
            if (precision > 0 && len > precision) len = precision;
80014c3c:	fc842783          	lw	a5,-56(s0)
80014c40:	00f05c63          	blez	a5,80014c58 <rt_vsnprintf+0x45c>
80014c44:	fe042703          	lw	a4,-32(s0)
80014c48:	fc842783          	lw	a5,-56(s0)
80014c4c:	00e7d663          	bge	a5,a4,80014c58 <rt_vsnprintf+0x45c>
80014c50:	fc842783          	lw	a5,-56(s0)
80014c54:	fef42023          	sw	a5,-32(s0)
#endif /* RT_PRINTF_PRECISION */

            if (!(flags & LEFT))
80014c58:	fd244783          	lbu	a5,-46(s0)
80014c5c:	0107f793          	andi	a5,a5,16
80014c60:	04079063          	bnez	a5,80014ca0 <rt_vsnprintf+0x4a4>
            {
                while (len < field_width--)
80014c64:	0280006f          	j	80014c8c <rt_vsnprintf+0x490>
                {
                    if (str < end) *str = ' ';
80014c68:	fdc42703          	lw	a4,-36(s0)
80014c6c:	fd842783          	lw	a5,-40(s0)
80014c70:	00f77863          	bgeu	a4,a5,80014c80 <rt_vsnprintf+0x484>
80014c74:	fdc42783          	lw	a5,-36(s0)
80014c78:	02000713          	li	a4,32
80014c7c:	00e78023          	sb	a4,0(a5)
                    ++ str;
80014c80:	fdc42783          	lw	a5,-36(s0)
80014c84:	00178793          	addi	a5,a5,1
80014c88:	fcf42e23          	sw	a5,-36(s0)
                while (len < field_width--)
80014c8c:	fcc42783          	lw	a5,-52(s0)
80014c90:	fff78713          	addi	a4,a5,-1
80014c94:	fce42623          	sw	a4,-52(s0)
80014c98:	fe042703          	lw	a4,-32(s0)
80014c9c:	fcf746e3          	blt	a4,a5,80014c68 <rt_vsnprintf+0x46c>
                }
            }

            for (i = 0; i < len; ++i)
80014ca0:	fe042223          	sw	zero,-28(s0)
80014ca4:	0440006f          	j	80014ce8 <rt_vsnprintf+0x4ec>
            {
                if (str < end) *str = *s;
80014ca8:	fdc42703          	lw	a4,-36(s0)
80014cac:	fd842783          	lw	a5,-40(s0)
80014cb0:	00f77a63          	bgeu	a4,a5,80014cc4 <rt_vsnprintf+0x4c8>
80014cb4:	fd442783          	lw	a5,-44(s0)
80014cb8:	0007c703          	lbu	a4,0(a5)
80014cbc:	fdc42783          	lw	a5,-36(s0)
80014cc0:	00e78023          	sb	a4,0(a5)
                ++ str;
80014cc4:	fdc42783          	lw	a5,-36(s0)
80014cc8:	00178793          	addi	a5,a5,1
80014ccc:	fcf42e23          	sw	a5,-36(s0)
                ++ s;
80014cd0:	fd442783          	lw	a5,-44(s0)
80014cd4:	00178793          	addi	a5,a5,1
80014cd8:	fcf42a23          	sw	a5,-44(s0)
            for (i = 0; i < len; ++i)
80014cdc:	fe442783          	lw	a5,-28(s0)
80014ce0:	00178793          	addi	a5,a5,1
80014ce4:	fef42223          	sw	a5,-28(s0)
80014ce8:	fe442703          	lw	a4,-28(s0)
80014cec:	fe042783          	lw	a5,-32(s0)
80014cf0:	faf74ce3          	blt	a4,a5,80014ca8 <rt_vsnprintf+0x4ac>
            }

            while (len < field_width--)
80014cf4:	0280006f          	j	80014d1c <rt_vsnprintf+0x520>
            {
                if (str < end) *str = ' ';
80014cf8:	fdc42703          	lw	a4,-36(s0)
80014cfc:	fd842783          	lw	a5,-40(s0)
80014d00:	00f77863          	bgeu	a4,a5,80014d10 <rt_vsnprintf+0x514>
80014d04:	fdc42783          	lw	a5,-36(s0)
80014d08:	02000713          	li	a4,32
80014d0c:	00e78023          	sb	a4,0(a5)
                ++ str;
80014d10:	fdc42783          	lw	a5,-36(s0)
80014d14:	00178793          	addi	a5,a5,1
80014d18:	fcf42e23          	sw	a5,-36(s0)
            while (len < field_width--)
80014d1c:	fcc42783          	lw	a5,-52(s0)
80014d20:	fff78713          	addi	a4,a5,-1
80014d24:	fce42623          	sw	a4,-52(s0)
80014d28:	fe042703          	lw	a4,-32(s0)
80014d2c:	fcf746e3          	blt	a4,a5,80014cf8 <rt_vsnprintf+0x4fc>
            }
            continue;
80014d30:	26c0006f          	j	80014f9c <rt_vsnprintf+0x7a0>

        case 'p':
            if (field_width == -1)
80014d34:	fcc42703          	lw	a4,-52(s0)
80014d38:	fff00793          	li	a5,-1
80014d3c:	00f71c63          	bne	a4,a5,80014d54 <rt_vsnprintf+0x558>
            {
                field_width = sizeof(void *) << 1;
80014d40:	00800793          	li	a5,8
80014d44:	fcf42623          	sw	a5,-52(s0)
                flags |= ZEROPAD;
80014d48:	fd244783          	lbu	a5,-46(s0)
80014d4c:	0017e793          	ori	a5,a5,1
80014d50:	fcf40923          	sb	a5,-46(s0)
            }
#ifdef RT_PRINTF_PRECISION
            str = print_number(str, end,
                               (long)va_arg(args, void *),
80014d54:	fb042783          	lw	a5,-80(s0)
80014d58:	00478713          	addi	a4,a5,4
80014d5c:	fae42823          	sw	a4,-80(s0)
80014d60:	0007a783          	lw	a5,0(a5)
            str = print_number(str, end,
80014d64:	00078913          	mv	s2,a5
80014d68:	41f7d793          	srai	a5,a5,0x1f
80014d6c:	00078993          	mv	s3,a5
80014d70:	fd244783          	lbu	a5,-46(s0)
80014d74:	00078893          	mv	a7,a5
80014d78:	fc842803          	lw	a6,-56(s0)
80014d7c:	fcc42783          	lw	a5,-52(s0)
80014d80:	01000713          	li	a4,16
80014d84:	00090613          	mv	a2,s2
80014d88:	00098693          	mv	a3,s3
80014d8c:	fd842583          	lw	a1,-40(s0)
80014d90:	fdc42503          	lw	a0,-36(s0)
80014d94:	ee4ff0ef          	jal	ra,80014478 <print_number>
80014d98:	fca42e23          	sw	a0,-36(s0)
#else
            str = print_number(str, end,
                               (long)va_arg(args, void *),
                               16, field_width, flags);
#endif /* RT_PRINTF_PRECISION */
            continue;
80014d9c:	2000006f          	j	80014f9c <rt_vsnprintf+0x7a0>

        case '%':
            if (str < end) *str = '%';
80014da0:	fdc42703          	lw	a4,-36(s0)
80014da4:	fd842783          	lw	a5,-40(s0)
80014da8:	00f77863          	bgeu	a4,a5,80014db8 <rt_vsnprintf+0x5bc>
80014dac:	fdc42783          	lw	a5,-36(s0)
80014db0:	02500713          	li	a4,37
80014db4:	00e78023          	sb	a4,0(a5)
            ++ str;
80014db8:	fdc42783          	lw	a5,-36(s0)
80014dbc:	00178793          	addi	a5,a5,1
80014dc0:	fcf42e23          	sw	a5,-36(s0)
            continue;
80014dc4:	1d80006f          	j	80014f9c <rt_vsnprintf+0x7a0>

        /* integer number formats - set up the flags and "break" */
        case 'b':
            base = 2;
80014dc8:	00200793          	li	a5,2
80014dcc:	fcf409a3          	sb	a5,-45(s0)
            break;
80014dd0:	0a80006f          	j	80014e78 <rt_vsnprintf+0x67c>
        case 'o':
            base = 8;
80014dd4:	00800793          	li	a5,8
80014dd8:	fcf409a3          	sb	a5,-45(s0)
            break;
80014ddc:	09c0006f          	j	80014e78 <rt_vsnprintf+0x67c>

        case 'X':
            flags |= LARGE;
80014de0:	fd244783          	lbu	a5,-46(s0)
80014de4:	0407e793          	ori	a5,a5,64
80014de8:	fcf40923          	sb	a5,-46(s0)
        case 'x':
            base = 16;
80014dec:	01000793          	li	a5,16
80014df0:	fcf409a3          	sb	a5,-45(s0)
            break;
80014df4:	0840006f          	j	80014e78 <rt_vsnprintf+0x67c>

        case 'd':
        case 'i':
            flags |= SIGN;
80014df8:	fd244783          	lbu	a5,-46(s0)
80014dfc:	0027e793          	ori	a5,a5,2
80014e00:	fcf40923          	sb	a5,-46(s0)
        case 'u':
            break;
80014e04:	0700006f          	j	80014e74 <rt_vsnprintf+0x678>

        default:
            if (str < end) *str = '%';
80014e08:	fdc42703          	lw	a4,-36(s0)
80014e0c:	fd842783          	lw	a5,-40(s0)
80014e10:	00f77863          	bgeu	a4,a5,80014e20 <rt_vsnprintf+0x624>
80014e14:	fdc42783          	lw	a5,-36(s0)
80014e18:	02500713          	li	a4,37
80014e1c:	00e78023          	sb	a4,0(a5)
            ++ str;
80014e20:	fdc42783          	lw	a5,-36(s0)
80014e24:	00178793          	addi	a5,a5,1
80014e28:	fcf42e23          	sw	a5,-36(s0)

            if (*fmt)
80014e2c:	fb442783          	lw	a5,-76(s0)
80014e30:	0007c783          	lbu	a5,0(a5)
80014e34:	02078863          	beqz	a5,80014e64 <rt_vsnprintf+0x668>
            {
                if (str < end) *str = *fmt;
80014e38:	fdc42703          	lw	a4,-36(s0)
80014e3c:	fd842783          	lw	a5,-40(s0)
80014e40:	00f77a63          	bgeu	a4,a5,80014e54 <rt_vsnprintf+0x658>
80014e44:	fb442783          	lw	a5,-76(s0)
80014e48:	0007c703          	lbu	a4,0(a5)
80014e4c:	fdc42783          	lw	a5,-36(s0)
80014e50:	00e78023          	sb	a4,0(a5)
                ++ str;
80014e54:	fdc42783          	lw	a5,-36(s0)
80014e58:	00178793          	addi	a5,a5,1
80014e5c:	fcf42e23          	sw	a5,-36(s0)
            }
            else
            {
                -- fmt;
            }
            continue;
80014e60:	13c0006f          	j	80014f9c <rt_vsnprintf+0x7a0>
                -- fmt;
80014e64:	fb442783          	lw	a5,-76(s0)
80014e68:	fff78793          	addi	a5,a5,-1
80014e6c:	faf42a23          	sw	a5,-76(s0)
            continue;
80014e70:	12c0006f          	j	80014f9c <rt_vsnprintf+0x7a0>
            break;
80014e74:	00000013          	nop
        }

#ifdef RT_KPRINTF_USING_LONGLONG
        if (qualifier == 'L') num = va_arg(args, long long);
80014e78:	fd144703          	lbu	a4,-47(s0)
80014e7c:	04c00793          	li	a5,76
80014e80:	02f71663          	bne	a4,a5,80014eac <rt_vsnprintf+0x6b0>
80014e84:	fb042783          	lw	a5,-80(s0)
80014e88:	00778793          	addi	a5,a5,7
80014e8c:	ff87f793          	andi	a5,a5,-8
80014e90:	00878713          	addi	a4,a5,8
80014e94:	fae42823          	sw	a4,-80(s0)
80014e98:	0007a703          	lw	a4,0(a5)
80014e9c:	0047a783          	lw	a5,4(a5)
80014ea0:	fee42423          	sw	a4,-24(s0)
80014ea4:	fef42623          	sw	a5,-20(s0)
80014ea8:	0c80006f          	j	80014f70 <rt_vsnprintf+0x774>
        else if (qualifier == 'l')
80014eac:	fd144703          	lbu	a4,-47(s0)
80014eb0:	06c00793          	li	a5,108
80014eb4:	02f71e63          	bne	a4,a5,80014ef0 <rt_vsnprintf+0x6f4>
#else
        if (qualifier == 'l')
#endif /* RT_KPRINTF_USING_LONGLONG */
        {
            num = va_arg(args, rt_uint32_t);
80014eb8:	fb042783          	lw	a5,-80(s0)
80014ebc:	00478713          	addi	a4,a5,4
80014ec0:	fae42823          	sw	a4,-80(s0)
80014ec4:	0007a783          	lw	a5,0(a5)
80014ec8:	fef42423          	sw	a5,-24(s0)
80014ecc:	fe042623          	sw	zero,-20(s0)
            if (flags & SIGN) num = (rt_int32_t)num;
80014ed0:	fd244783          	lbu	a5,-46(s0)
80014ed4:	0027f793          	andi	a5,a5,2
80014ed8:	08078c63          	beqz	a5,80014f70 <rt_vsnprintf+0x774>
80014edc:	fe842783          	lw	a5,-24(s0)
80014ee0:	fef42423          	sw	a5,-24(s0)
80014ee4:	41f7d793          	srai	a5,a5,0x1f
80014ee8:	fef42623          	sw	a5,-20(s0)
80014eec:	0840006f          	j	80014f70 <rt_vsnprintf+0x774>
        }
        else if (qualifier == 'h')
80014ef0:	fd144703          	lbu	a4,-47(s0)
80014ef4:	06800793          	li	a5,104
80014ef8:	04f71263          	bne	a4,a5,80014f3c <rt_vsnprintf+0x740>
        {
            num = (rt_uint16_t)va_arg(args, int);
80014efc:	fb042783          	lw	a5,-80(s0)
80014f00:	00478713          	addi	a4,a5,4
80014f04:	fae42823          	sw	a4,-80(s0)
80014f08:	0007a783          	lw	a5,0(a5)
80014f0c:	01079793          	slli	a5,a5,0x10
80014f10:	0107d793          	srli	a5,a5,0x10
80014f14:	fef42423          	sw	a5,-24(s0)
80014f18:	fe042623          	sw	zero,-20(s0)
            if (flags & SIGN) num = (rt_int16_t)num;
80014f1c:	fd244783          	lbu	a5,-46(s0)
80014f20:	0027f793          	andi	a5,a5,2
80014f24:	04078663          	beqz	a5,80014f70 <rt_vsnprintf+0x774>
80014f28:	fe841783          	lh	a5,-24(s0)
80014f2c:	fef42423          	sw	a5,-24(s0)
80014f30:	41f7d793          	srai	a5,a5,0x1f
80014f34:	fef42623          	sw	a5,-20(s0)
80014f38:	0380006f          	j	80014f70 <rt_vsnprintf+0x774>
        }
        else
        {
            num = va_arg(args, rt_uint32_t);
80014f3c:	fb042783          	lw	a5,-80(s0)
80014f40:	00478713          	addi	a4,a5,4
80014f44:	fae42823          	sw	a4,-80(s0)
80014f48:	0007a783          	lw	a5,0(a5)
80014f4c:	fef42423          	sw	a5,-24(s0)
80014f50:	fe042623          	sw	zero,-20(s0)
            if (flags & SIGN) num = (rt_int32_t)num;
80014f54:	fd244783          	lbu	a5,-46(s0)
80014f58:	0027f793          	andi	a5,a5,2
80014f5c:	00078a63          	beqz	a5,80014f70 <rt_vsnprintf+0x774>
80014f60:	fe842783          	lw	a5,-24(s0)
80014f64:	fef42423          	sw	a5,-24(s0)
80014f68:	41f7d793          	srai	a5,a5,0x1f
80014f6c:	fef42623          	sw	a5,-20(s0)
        }
#ifdef RT_PRINTF_PRECISION
        str = print_number(str, end, num, base, field_width, precision, flags);
80014f70:	fe842603          	lw	a2,-24(s0)
80014f74:	fec42683          	lw	a3,-20(s0)
80014f78:	fd344703          	lbu	a4,-45(s0)
80014f7c:	fd244783          	lbu	a5,-46(s0)
80014f80:	00078893          	mv	a7,a5
80014f84:	fc842803          	lw	a6,-56(s0)
80014f88:	fcc42783          	lw	a5,-52(s0)
80014f8c:	fd842583          	lw	a1,-40(s0)
80014f90:	fdc42503          	lw	a0,-36(s0)
80014f94:	ce4ff0ef          	jal	ra,80014478 <print_number>
80014f98:	fca42e23          	sw	a0,-36(s0)
    for (; *fmt ; ++fmt)
80014f9c:	fb442783          	lw	a5,-76(s0)
80014fa0:	00178793          	addi	a5,a5,1
80014fa4:	faf42a23          	sw	a5,-76(s0)
80014fa8:	fb442783          	lw	a5,-76(s0)
80014fac:	0007c783          	lbu	a5,0(a5)
80014fb0:	8a079ae3          	bnez	a5,80014864 <rt_vsnprintf+0x68>
#else
        str = print_number(str, end, num, base, field_width, flags);
#endif /* RT_PRINTF_PRECISION */
    }

    if (size > 0)
80014fb4:	fb842783          	lw	a5,-72(s0)
80014fb8:	02078463          	beqz	a5,80014fe0 <rt_vsnprintf+0x7e4>
    {
        if (str < end) *str = '\0';
80014fbc:	fdc42703          	lw	a4,-36(s0)
80014fc0:	fd842783          	lw	a5,-40(s0)
80014fc4:	00f77863          	bgeu	a4,a5,80014fd4 <rt_vsnprintf+0x7d8>
80014fc8:	fdc42783          	lw	a5,-36(s0)
80014fcc:	00078023          	sb	zero,0(a5)
80014fd0:	0100006f          	j	80014fe0 <rt_vsnprintf+0x7e4>
        else
        {
            end[-1] = '\0';
80014fd4:	fd842783          	lw	a5,-40(s0)
80014fd8:	fff78793          	addi	a5,a5,-1
80014fdc:	00078023          	sb	zero,0(a5)
    }

    /* the trailing null byte doesn't count towards the total
    * ++str;
    */
    return str - buf;
80014fe0:	fdc42703          	lw	a4,-36(s0)
80014fe4:	fbc42783          	lw	a5,-68(s0)
80014fe8:	40f707b3          	sub	a5,a4,a5
}
80014fec:	00078513          	mv	a0,a5
80014ff0:	04c12083          	lw	ra,76(sp)
80014ff4:	04812403          	lw	s0,72(sp)
80014ff8:	04412903          	lw	s2,68(sp)
80014ffc:	04012983          	lw	s3,64(sp)
80015000:	05010113          	addi	sp,sp,80
80015004:	00008067          	ret

80015008 <rt_snprintf>:
 * @param  fmt is the format parameters.
 *
 * @return The number of characters actually written to buffer.
 */
int rt_snprintf(char *buf, rt_size_t size, const char *fmt, ...)
{
80015008:	fb010113          	addi	sp,sp,-80
8001500c:	02112623          	sw	ra,44(sp)
80015010:	02812423          	sw	s0,40(sp)
80015014:	03010413          	addi	s0,sp,48
80015018:	fca42e23          	sw	a0,-36(s0)
8001501c:	fcb42c23          	sw	a1,-40(s0)
80015020:	fcc42a23          	sw	a2,-44(s0)
80015024:	00d42623          	sw	a3,12(s0)
80015028:	00e42823          	sw	a4,16(s0)
8001502c:	00f42a23          	sw	a5,20(s0)
80015030:	01042c23          	sw	a6,24(s0)
80015034:	01142e23          	sw	a7,28(s0)
    rt_int32_t n;
    va_list args;

    va_start(args, fmt);
80015038:	02040793          	addi	a5,s0,32
8001503c:	fcf42823          	sw	a5,-48(s0)
80015040:	fd042783          	lw	a5,-48(s0)
80015044:	fec78793          	addi	a5,a5,-20
80015048:	fef42423          	sw	a5,-24(s0)
    n = rt_vsnprintf(buf, size, fmt, args);
8001504c:	fe842783          	lw	a5,-24(s0)
80015050:	00078693          	mv	a3,a5
80015054:	fd442603          	lw	a2,-44(s0)
80015058:	fd842583          	lw	a1,-40(s0)
8001505c:	fdc42503          	lw	a0,-36(s0)
80015060:	f9cff0ef          	jal	ra,800147fc <rt_vsnprintf>
80015064:	fea42623          	sw	a0,-20(s0)
    va_end(args);

    return n;
80015068:	fec42783          	lw	a5,-20(s0)
}
8001506c:	00078513          	mv	a0,a5
80015070:	02c12083          	lw	ra,44(sp)
80015074:	02812403          	lw	s0,40(sp)
80015078:	05010113          	addi	sp,sp,80
8001507c:	00008067          	ret

80015080 <rt_vsprintf>:
 * @param  arg_ptr is a list of variable parameters.
 *
 * @return The number of characters actually written to buffer.
 */
int rt_vsprintf(char *buf, const char *format, va_list arg_ptr)
{
80015080:	fe010113          	addi	sp,sp,-32
80015084:	00112e23          	sw	ra,28(sp)
80015088:	00812c23          	sw	s0,24(sp)
8001508c:	02010413          	addi	s0,sp,32
80015090:	fea42623          	sw	a0,-20(s0)
80015094:	feb42423          	sw	a1,-24(s0)
80015098:	fec42223          	sw	a2,-28(s0)
    return rt_vsnprintf(buf, (rt_size_t) - 1, format, arg_ptr);
8001509c:	fe442683          	lw	a3,-28(s0)
800150a0:	fe842603          	lw	a2,-24(s0)
800150a4:	fff00593          	li	a1,-1
800150a8:	fec42503          	lw	a0,-20(s0)
800150ac:	f50ff0ef          	jal	ra,800147fc <rt_vsnprintf>
800150b0:	00050793          	mv	a5,a0
}
800150b4:	00078513          	mv	a0,a5
800150b8:	01c12083          	lw	ra,28(sp)
800150bc:	01812403          	lw	s0,24(sp)
800150c0:	02010113          	addi	sp,sp,32
800150c4:	00008067          	ret

800150c8 <rt_sprintf>:
 * @param  format is the format parameters.
 *
 * @return The number of characters actually written to buffer.
 */
int rt_sprintf(char *buf, const char *format, ...)
{
800150c8:	fb010113          	addi	sp,sp,-80
800150cc:	02112623          	sw	ra,44(sp)
800150d0:	02812423          	sw	s0,40(sp)
800150d4:	03010413          	addi	s0,sp,48
800150d8:	fca42e23          	sw	a0,-36(s0)
800150dc:	fcb42c23          	sw	a1,-40(s0)
800150e0:	00c42423          	sw	a2,8(s0)
800150e4:	00d42623          	sw	a3,12(s0)
800150e8:	00e42823          	sw	a4,16(s0)
800150ec:	00f42a23          	sw	a5,20(s0)
800150f0:	01042c23          	sw	a6,24(s0)
800150f4:	01142e23          	sw	a7,28(s0)
    rt_int32_t n;
    va_list arg_ptr;

    va_start(arg_ptr, format);
800150f8:	02040793          	addi	a5,s0,32
800150fc:	fcf42a23          	sw	a5,-44(s0)
80015100:	fd442783          	lw	a5,-44(s0)
80015104:	fe878793          	addi	a5,a5,-24
80015108:	fef42423          	sw	a5,-24(s0)
    n = rt_vsprintf(buf, format, arg_ptr);
8001510c:	fe842783          	lw	a5,-24(s0)
80015110:	00078613          	mv	a2,a5
80015114:	fd842583          	lw	a1,-40(s0)
80015118:	fdc42503          	lw	a0,-36(s0)
8001511c:	f65ff0ef          	jal	ra,80015080 <rt_vsprintf>
80015120:	fea42623          	sw	a0,-20(s0)
    va_end(arg_ptr);

    return n;
80015124:	fec42783          	lw	a5,-20(s0)
}
80015128:	00078513          	mv	a0,a5
8001512c:	02c12083          	lw	ra,44(sp)
80015130:	02812403          	lw	s0,40(sp)
80015134:	05010113          	addi	sp,sp,80
80015138:	00008067          	ret

8001513c <rt_console_get_device>:
 * This function returns the device using in console.
 *
 * @return Returns the console device pointer or RT_NULL.
 */
rt_device_t rt_console_get_device(void)
{
8001513c:	ff010113          	addi	sp,sp,-16
80015140:	00812623          	sw	s0,12(sp)
80015144:	01010413          	addi	s0,sp,16
    return _console_device;
80015148:	0006f797          	auipc	a5,0x6f
8001514c:	f0478793          	addi	a5,a5,-252 # 8008404c <_console_device>
80015150:	0007a783          	lw	a5,0(a5)
}
80015154:	00078513          	mv	a0,a5
80015158:	00c12403          	lw	s0,12(sp)
8001515c:	01010113          	addi	sp,sp,16
80015160:	00008067          	ret

80015164 <rt_console_set_device>:
 * @param  name is the name of new console device.
 *
 * @return the old console device handler on successful, or RT_NULL on failure.
 */
rt_device_t rt_console_set_device(const char *name)
{
80015164:	fd010113          	addi	sp,sp,-48
80015168:	02112623          	sw	ra,44(sp)
8001516c:	02812423          	sw	s0,40(sp)
80015170:	03010413          	addi	s0,sp,48
80015174:	fca42e23          	sw	a0,-36(s0)
    rt_device_t new_device, old_device;

    /* save old device */
    old_device = _console_device;
80015178:	0006f797          	auipc	a5,0x6f
8001517c:	ed478793          	addi	a5,a5,-300 # 8008404c <_console_device>
80015180:	0007a783          	lw	a5,0(a5)
80015184:	fef42623          	sw	a5,-20(s0)

    /* find new console device */
    new_device = rt_device_find(name);
80015188:	fdc42503          	lw	a0,-36(s0)
8001518c:	f88fd0ef          	jal	ra,80012914 <rt_device_find>
80015190:	fea42423          	sw	a0,-24(s0)

    /* check whether it's a same device */
    if (new_device == old_device) return RT_NULL;
80015194:	fe842703          	lw	a4,-24(s0)
80015198:	fec42783          	lw	a5,-20(s0)
8001519c:	00f71663          	bne	a4,a5,800151a8 <rt_console_set_device+0x44>
800151a0:	00000793          	li	a5,0
800151a4:	0500006f          	j	800151f4 <rt_console_set_device+0x90>

    if (new_device != RT_NULL)
800151a8:	fe842783          	lw	a5,-24(s0)
800151ac:	04078263          	beqz	a5,800151f0 <rt_console_set_device+0x8c>
    {
        if (_console_device != RT_NULL)
800151b0:	0006f797          	auipc	a5,0x6f
800151b4:	e9c78793          	addi	a5,a5,-356 # 8008404c <_console_device>
800151b8:	0007a783          	lw	a5,0(a5)
800151bc:	00078c63          	beqz	a5,800151d4 <rt_console_set_device+0x70>
        {
            /* close old console device */
            rt_device_close(_console_device);
800151c0:	0006f797          	auipc	a5,0x6f
800151c4:	e8c78793          	addi	a5,a5,-372 # 8008404c <_console_device>
800151c8:	0007a783          	lw	a5,0(a5)
800151cc:	00078513          	mv	a0,a5
800151d0:	8d1fd0ef          	jal	ra,80012aa0 <rt_device_close>
        }

        /* set new console device */
        rt_device_open(new_device, RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_STREAM);
800151d4:	04300593          	li	a1,67
800151d8:	fe842503          	lw	a0,-24(s0)
800151dc:	f70fd0ef          	jal	ra,8001294c <rt_device_open>
        _console_device = new_device;
800151e0:	0006f797          	auipc	a5,0x6f
800151e4:	e6c78793          	addi	a5,a5,-404 # 8008404c <_console_device>
800151e8:	fe842703          	lw	a4,-24(s0)
800151ec:	00e7a023          	sw	a4,0(a5)
    }

    return old_device;
800151f0:	fec42783          	lw	a5,-20(s0)
}
800151f4:	00078513          	mv	a0,a5
800151f8:	02c12083          	lw	ra,44(sp)
800151fc:	02812403          	lw	s0,40(sp)
80015200:	03010113          	addi	sp,sp,48
80015204:	00008067          	ret

80015208 <rt_hw_console_output>:
RTM_EXPORT(rt_console_set_device);
#endif /* RT_USING_DEVICE */

RT_WEAK void rt_hw_console_output(const char *str)
{
80015208:	fe010113          	addi	sp,sp,-32
8001520c:	00812e23          	sw	s0,28(sp)
80015210:	02010413          	addi	s0,sp,32
80015214:	fea42623          	sw	a0,-20(s0)
    /* empty console output */
}
80015218:	00000013          	nop
8001521c:	01c12403          	lw	s0,28(sp)
80015220:	02010113          	addi	sp,sp,32
80015224:	00008067          	ret

80015228 <rt_kprintf>:
 * @param fmt is the format parameters.
 *
 * @return The number of characters actually written to buffer.
 */
RT_WEAK int rt_kprintf(const char *fmt, ...)
{
80015228:	fb010113          	addi	sp,sp,-80
8001522c:	02112623          	sw	ra,44(sp)
80015230:	02812423          	sw	s0,40(sp)
80015234:	03010413          	addi	s0,sp,48
80015238:	fca42e23          	sw	a0,-36(s0)
8001523c:	00b42223          	sw	a1,4(s0)
80015240:	00c42423          	sw	a2,8(s0)
80015244:	00d42623          	sw	a3,12(s0)
80015248:	00e42823          	sw	a4,16(s0)
8001524c:	00f42a23          	sw	a5,20(s0)
80015250:	01042c23          	sw	a6,24(s0)
80015254:	01142e23          	sw	a7,28(s0)
    va_list args;
    rt_size_t length;
    static char rt_log_buf[RT_CONSOLEBUF_SIZE];

    va_start(args, fmt);
80015258:	02040793          	addi	a5,s0,32
8001525c:	fcf42c23          	sw	a5,-40(s0)
80015260:	fd842783          	lw	a5,-40(s0)
80015264:	fe478793          	addi	a5,a5,-28
80015268:	fef42423          	sw	a5,-24(s0)
    /* the return value of vsnprintf is the number of bytes that would be
     * written to buffer had if the size of the buffer been sufficiently
     * large excluding the terminating null byte. If the output string
     * would be larger than the rt_log_buf, we have to adjust the output
     * length. */
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
8001526c:	fe842783          	lw	a5,-24(s0)
80015270:	00078693          	mv	a3,a5
80015274:	fdc42603          	lw	a2,-36(s0)
80015278:	0ff00593          	li	a1,255
8001527c:	00071517          	auipc	a0,0x71
80015280:	1a450513          	addi	a0,a0,420 # 80086420 <rt_log_buf.0>
80015284:	d78ff0ef          	jal	ra,800147fc <rt_vsnprintf>
80015288:	00050793          	mv	a5,a0
8001528c:	fef42623          	sw	a5,-20(s0)
    if (length > RT_CONSOLEBUF_SIZE - 1)
80015290:	fec42703          	lw	a4,-20(s0)
80015294:	0ff00793          	li	a5,255
80015298:	00e7f663          	bgeu	a5,a4,800152a4 <rt_kprintf+0x7c>
        length = RT_CONSOLEBUF_SIZE - 1;
8001529c:	0ff00793          	li	a5,255
800152a0:	fef42623          	sw	a5,-20(s0)
#ifdef RT_USING_DEVICE
    if (_console_device == RT_NULL)
800152a4:	0006f797          	auipc	a5,0x6f
800152a8:	da878793          	addi	a5,a5,-600 # 8008404c <_console_device>
800152ac:	0007a783          	lw	a5,0(a5)
800152b0:	00079a63          	bnez	a5,800152c4 <rt_kprintf+0x9c>
    {
        rt_hw_console_output(rt_log_buf);
800152b4:	00071517          	auipc	a0,0x71
800152b8:	16c50513          	addi	a0,a0,364 # 80086420 <rt_log_buf.0>
800152bc:	f4dff0ef          	jal	ra,80015208 <rt_hw_console_output>
800152c0:	0280006f          	j	800152e8 <rt_kprintf+0xc0>
    }
    else
    {
        rt_device_write(_console_device, 0, rt_log_buf, length);
800152c4:	0006f797          	auipc	a5,0x6f
800152c8:	d8878793          	addi	a5,a5,-632 # 8008404c <_console_device>
800152cc:	0007a783          	lw	a5,0(a5)
800152d0:	fec42683          	lw	a3,-20(s0)
800152d4:	00071617          	auipc	a2,0x71
800152d8:	14c60613          	addi	a2,a2,332 # 80086420 <rt_log_buf.0>
800152dc:	00000593          	li	a1,0
800152e0:	00078513          	mv	a0,a5
800152e4:	8f5fd0ef          	jal	ra,80012bd8 <rt_device_write>
#else
    rt_hw_console_output(rt_log_buf);
#endif /* RT_USING_DEVICE */
    va_end(args);

    return length;
800152e8:	fec42783          	lw	a5,-20(s0)
}
800152ec:	00078513          	mv	a0,a5
800152f0:	02c12083          	lw	ra,44(sp)
800152f4:	02812403          	lw	s0,40(sp)
800152f8:	05010113          	addi	sp,sp,80
800152fc:	00008067          	ret

80015300 <_heap_lock_init>:
#elif defined(RT_USING_MUTEX)
static struct rt_mutex _lock;
#endif

rt_inline void _heap_lock_init(void)
{
80015300:	ff010113          	addi	sp,sp,-16
80015304:	00112623          	sw	ra,12(sp)
80015308:	00812423          	sw	s0,8(sp)
8001530c:	01010413          	addi	s0,sp,16
#if defined(RT_USING_HEAP_ISR)
#elif defined(RT_USING_MUTEX)
    rt_mutex_init(&_lock, "heap", RT_IPC_FLAG_PRIO);
80015310:	00100613          	li	a2,1
80015314:	00012597          	auipc	a1,0x12
80015318:	28058593          	addi	a1,a1,640 # 80027594 <raise+0x19a0>
8001531c:	00071517          	auipc	a0,0x71
80015320:	0d450513          	addi	a0,a0,212 # 800863f0 <_lock>
80015324:	a28fe0ef          	jal	ra,8001354c <rt_mutex_init>
#endif
}
80015328:	00000013          	nop
8001532c:	00c12083          	lw	ra,12(sp)
80015330:	00812403          	lw	s0,8(sp)
80015334:	01010113          	addi	sp,sp,16
80015338:	00008067          	ret

8001533c <_heap_lock>:

rt_inline rt_base_t _heap_lock(void)
{
8001533c:	ff010113          	addi	sp,sp,-16
80015340:	00112623          	sw	ra,12(sp)
80015344:	00812423          	sw	s0,8(sp)
80015348:	01010413          	addi	s0,sp,16
#if defined(RT_USING_HEAP_ISR)
    return rt_hw_interrupt_disable();
#elif defined(RT_USING_MUTEX)
    if (rt_thread_self())
8001534c:	474020ef          	jal	ra,800177c0 <rt_thread_self>
80015350:	00050793          	mv	a5,a0
80015354:	00078e63          	beqz	a5,80015370 <_heap_lock+0x34>
        return rt_mutex_take(&_lock, RT_WAITING_FOREVER);
80015358:	fff00593          	li	a1,-1
8001535c:	00071517          	auipc	a0,0x71
80015360:	09450513          	addi	a0,a0,148 # 800863f0 <_lock>
80015364:	a74fe0ef          	jal	ra,800135d8 <rt_mutex_take>
80015368:	00050793          	mv	a5,a0
8001536c:	0080006f          	j	80015374 <_heap_lock+0x38>
    else
        return RT_EOK;
80015370:	00000793          	li	a5,0
#else
    rt_enter_critical();
    return RT_EOK;
#endif
}
80015374:	00078513          	mv	a0,a5
80015378:	00c12083          	lw	ra,12(sp)
8001537c:	00812403          	lw	s0,8(sp)
80015380:	01010113          	addi	sp,sp,16
80015384:	00008067          	ret

80015388 <_heap_unlock>:

rt_inline void _heap_unlock(rt_base_t level)
{
80015388:	fe010113          	addi	sp,sp,-32
8001538c:	00112e23          	sw	ra,28(sp)
80015390:	00812c23          	sw	s0,24(sp)
80015394:	02010413          	addi	s0,sp,32
80015398:	fea42623          	sw	a0,-20(s0)
#if defined(RT_USING_HEAP_ISR)
    rt_hw_interrupt_enable(level);
#elif defined(RT_USING_MUTEX)
    RT_ASSERT(level == RT_EOK);
    if (rt_thread_self())
8001539c:	424020ef          	jal	ra,800177c0 <rt_thread_self>
800153a0:	00050793          	mv	a5,a0
800153a4:	00078863          	beqz	a5,800153b4 <_heap_unlock+0x2c>
        rt_mutex_release(&_lock);
800153a8:	00071517          	auipc	a0,0x71
800153ac:	04850513          	addi	a0,a0,72 # 800863f0 <_lock>
800153b0:	c70fe0ef          	jal	ra,80013820 <rt_mutex_release>
#else
    rt_exit_critical();
#endif
}
800153b4:	00000013          	nop
800153b8:	01c12083          	lw	ra,28(sp)
800153bc:	01812403          	lw	s0,24(sp)
800153c0:	02010113          	addi	sp,sp,32
800153c4:	00008067          	ret

800153c8 <_smem_info>:

#if defined(RT_USING_SMALL_MEM_AS_HEAP)
static rt_smem_t system_heap;
rt_inline void _smem_info(rt_size_t *total,
    rt_size_t *used, rt_size_t *max_used)
{
800153c8:	fe010113          	addi	sp,sp,-32
800153cc:	00812e23          	sw	s0,28(sp)
800153d0:	02010413          	addi	s0,sp,32
800153d4:	fea42623          	sw	a0,-20(s0)
800153d8:	feb42423          	sw	a1,-24(s0)
800153dc:	fec42223          	sw	a2,-28(s0)
    if (total)
800153e0:	fec42783          	lw	a5,-20(s0)
800153e4:	00078e63          	beqz	a5,80015400 <_smem_info+0x38>
        *total = system_heap->total;
800153e8:	0006f797          	auipc	a5,0x6f
800153ec:	c7078793          	addi	a5,a5,-912 # 80084058 <system_heap>
800153f0:	0007a783          	lw	a5,0(a5)
800153f4:	0287a703          	lw	a4,40(a5)
800153f8:	fec42783          	lw	a5,-20(s0)
800153fc:	00e7a023          	sw	a4,0(a5)
    if (used)
80015400:	fe842783          	lw	a5,-24(s0)
80015404:	00078e63          	beqz	a5,80015420 <_smem_info+0x58>
        *used = system_heap->used;
80015408:	0006f797          	auipc	a5,0x6f
8001540c:	c5078793          	addi	a5,a5,-944 # 80084058 <system_heap>
80015410:	0007a783          	lw	a5,0(a5)
80015414:	02c7a703          	lw	a4,44(a5)
80015418:	fe842783          	lw	a5,-24(s0)
8001541c:	00e7a023          	sw	a4,0(a5)
    if (max_used)
80015420:	fe442783          	lw	a5,-28(s0)
80015424:	00078e63          	beqz	a5,80015440 <_smem_info+0x78>
        *max_used = system_heap->max;
80015428:	0006f797          	auipc	a5,0x6f
8001542c:	c3078793          	addi	a5,a5,-976 # 80084058 <system_heap>
80015430:	0007a783          	lw	a5,0(a5)
80015434:	0307a703          	lw	a4,48(a5)
80015438:	fe442783          	lw	a5,-28(s0)
8001543c:	00e7a023          	sw	a4,0(a5)
}
80015440:	00000013          	nop
80015444:	01c12403          	lw	s0,28(sp)
80015448:	02010113          	addi	sp,sp,32
8001544c:	00008067          	ret

80015450 <rt_system_heap_init>:
 * @param begin_addr the beginning address of system page.
 *
 * @param end_addr the end address of system page.
 */
RT_WEAK void rt_system_heap_init(void *begin_addr, void *end_addr)
{
80015450:	fd010113          	addi	sp,sp,-48
80015454:	02112623          	sw	ra,44(sp)
80015458:	02812423          	sw	s0,40(sp)
8001545c:	03010413          	addi	s0,sp,48
80015460:	fca42e23          	sw	a0,-36(s0)
80015464:	fcb42c23          	sw	a1,-40(s0)
    rt_ubase_t begin_align = RT_ALIGN((rt_ubase_t)begin_addr, RT_ALIGN_SIZE);
80015468:	fdc42783          	lw	a5,-36(s0)
8001546c:	00378793          	addi	a5,a5,3
80015470:	ffc7f793          	andi	a5,a5,-4
80015474:	fef42623          	sw	a5,-20(s0)
    rt_ubase_t end_align   = RT_ALIGN_DOWN((rt_ubase_t)end_addr, RT_ALIGN_SIZE);
80015478:	fd842783          	lw	a5,-40(s0)
8001547c:	ffc7f793          	andi	a5,a5,-4
80015480:	fef42423          	sw	a5,-24(s0)

    RT_ASSERT(end_align > begin_align);

    /* Initialize system memory heap */
    _MEM_INIT("heap", begin_addr, end_align - begin_align);
80015484:	fe842703          	lw	a4,-24(s0)
80015488:	fec42783          	lw	a5,-20(s0)
8001548c:	40f707b3          	sub	a5,a4,a5
80015490:	00078613          	mv	a2,a5
80015494:	fdc42583          	lw	a1,-36(s0)
80015498:	00012517          	auipc	a0,0x12
8001549c:	0fc50513          	addi	a0,a0,252 # 80027594 <raise+0x19a0>
800154a0:	52c000ef          	jal	ra,800159cc <rt_smem_init>
800154a4:	00050713          	mv	a4,a0
800154a8:	0006f797          	auipc	a5,0x6f
800154ac:	bb078793          	addi	a5,a5,-1104 # 80084058 <system_heap>
800154b0:	00e7a023          	sw	a4,0(a5)
    /* Initialize multi thread contention lock */
    _heap_lock_init();
800154b4:	e4dff0ef          	jal	ra,80015300 <_heap_lock_init>
}
800154b8:	00000013          	nop
800154bc:	02c12083          	lw	ra,44(sp)
800154c0:	02812403          	lw	s0,40(sp)
800154c4:	03010113          	addi	sp,sp,48
800154c8:	00008067          	ret

800154cc <rt_malloc>:
 * @param size is the minimum size of the requested block in bytes.
 *
 * @return the pointer to allocated memory or NULL if no free memory was found.
 */
RT_WEAK void *rt_malloc(rt_size_t size)
{
800154cc:	fd010113          	addi	sp,sp,-48
800154d0:	02112623          	sw	ra,44(sp)
800154d4:	02812423          	sw	s0,40(sp)
800154d8:	03010413          	addi	s0,sp,48
800154dc:	fca42e23          	sw	a0,-36(s0)
    rt_base_t level;
    void *ptr;

    /* Enter critical zone */
    level = _heap_lock();
800154e0:	e5dff0ef          	jal	ra,8001533c <_heap_lock>
800154e4:	fea42623          	sw	a0,-20(s0)
    /* allocate memory block from system heap */
    ptr = _MEM_MALLOC(size);
800154e8:	0006f797          	auipc	a5,0x6f
800154ec:	b7078793          	addi	a5,a5,-1168 # 80084058 <system_heap>
800154f0:	0007a783          	lw	a5,0(a5)
800154f4:	fdc42583          	lw	a1,-36(s0)
800154f8:	00078513          	mv	a0,a5
800154fc:	6d4000ef          	jal	ra,80015bd0 <rt_smem_alloc>
80015500:	fea42423          	sw	a0,-24(s0)
    /* Exit critical zone */
    _heap_unlock(level);
80015504:	fec42503          	lw	a0,-20(s0)
80015508:	e81ff0ef          	jal	ra,80015388 <_heap_unlock>
    /* call 'rt_malloc' hook */
    RT_OBJECT_HOOK_CALL(rt_malloc_hook, (ptr, size));
8001550c:	0006f797          	auipc	a5,0x6f
80015510:	b4478793          	addi	a5,a5,-1212 # 80084050 <rt_malloc_hook>
80015514:	0007a783          	lw	a5,0(a5)
80015518:	00078e63          	beqz	a5,80015534 <rt_malloc+0x68>
8001551c:	0006f797          	auipc	a5,0x6f
80015520:	b3478793          	addi	a5,a5,-1228 # 80084050 <rt_malloc_hook>
80015524:	0007a783          	lw	a5,0(a5)
80015528:	fdc42583          	lw	a1,-36(s0)
8001552c:	fe842503          	lw	a0,-24(s0)
80015530:	000780e7          	jalr	a5
    return ptr;
80015534:	fe842783          	lw	a5,-24(s0)
}
80015538:	00078513          	mv	a0,a5
8001553c:	02c12083          	lw	ra,44(sp)
80015540:	02812403          	lw	s0,40(sp)
80015544:	03010113          	addi	sp,sp,48
80015548:	00008067          	ret

8001554c <rt_realloc>:
 * @param newsize is the required new size.
 *
 * @return the changed memory block address.
 */
RT_WEAK void *rt_realloc(void *rmem, rt_size_t newsize)
{
8001554c:	fd010113          	addi	sp,sp,-48
80015550:	02112623          	sw	ra,44(sp)
80015554:	02812423          	sw	s0,40(sp)
80015558:	03010413          	addi	s0,sp,48
8001555c:	fca42e23          	sw	a0,-36(s0)
80015560:	fcb42c23          	sw	a1,-40(s0)
    rt_base_t level;
    void *nptr;

    /* Enter critical zone */
    level = _heap_lock();
80015564:	dd9ff0ef          	jal	ra,8001533c <_heap_lock>
80015568:	fea42623          	sw	a0,-20(s0)
    /* Change the size of previously allocated memory block */
    nptr = _MEM_REALLOC(rmem, newsize);
8001556c:	0006f797          	auipc	a5,0x6f
80015570:	aec78793          	addi	a5,a5,-1300 # 80084058 <system_heap>
80015574:	0007a783          	lw	a5,0(a5)
80015578:	fd842603          	lw	a2,-40(s0)
8001557c:	fdc42583          	lw	a1,-36(s0)
80015580:	00078513          	mv	a0,a5
80015584:	165000ef          	jal	ra,80015ee8 <rt_smem_realloc>
80015588:	fea42423          	sw	a0,-24(s0)
    /* Exit critical zone */
    _heap_unlock(level);
8001558c:	fec42503          	lw	a0,-20(s0)
80015590:	df9ff0ef          	jal	ra,80015388 <_heap_unlock>
    return nptr;
80015594:	fe842783          	lw	a5,-24(s0)
}
80015598:	00078513          	mv	a0,a5
8001559c:	02c12083          	lw	ra,44(sp)
800155a0:	02812403          	lw	s0,40(sp)
800155a4:	03010113          	addi	sp,sp,48
800155a8:	00008067          	ret

800155ac <rt_calloc>:
 * @param  size is the size of one object to allocate.
 *
 * @return pointer to allocated memory / NULL pointer if there is an error.
 */
RT_WEAK void *rt_calloc(rt_size_t count, rt_size_t size)
{
800155ac:	fd010113          	addi	sp,sp,-48
800155b0:	02112623          	sw	ra,44(sp)
800155b4:	02812423          	sw	s0,40(sp)
800155b8:	03010413          	addi	s0,sp,48
800155bc:	fca42e23          	sw	a0,-36(s0)
800155c0:	fcb42c23          	sw	a1,-40(s0)
    void *p;

    /* allocate 'count' objects of size 'size' */
    p = rt_malloc(count * size);
800155c4:	fdc42703          	lw	a4,-36(s0)
800155c8:	fd842783          	lw	a5,-40(s0)
800155cc:	02f707b3          	mul	a5,a4,a5
800155d0:	00078513          	mv	a0,a5
800155d4:	ef9ff0ef          	jal	ra,800154cc <rt_malloc>
800155d8:	fea42623          	sw	a0,-20(s0)
    /* zero the memory */
    if (p)
800155dc:	fec42783          	lw	a5,-20(s0)
800155e0:	02078063          	beqz	a5,80015600 <rt_calloc+0x54>
    {
        rt_memset(p, 0, count * size);
800155e4:	fdc42703          	lw	a4,-36(s0)
800155e8:	fd842783          	lw	a5,-40(s0)
800155ec:	02f707b3          	mul	a5,a4,a5
800155f0:	00078613          	mv	a2,a5
800155f4:	00000593          	li	a1,0
800155f8:	fec42503          	lw	a0,-20(s0)
800155fc:	e90fe0ef          	jal	ra,80013c8c <rt_memset>
    }
    return p;
80015600:	fec42783          	lw	a5,-20(s0)
}
80015604:	00078513          	mv	a0,a5
80015608:	02c12083          	lw	ra,44(sp)
8001560c:	02812403          	lw	s0,40(sp)
80015610:	03010113          	addi	sp,sp,48
80015614:	00008067          	ret

80015618 <rt_free>:
 *        rt_malloc. The released memory block is taken back to system heap.
 *
 * @param rmem the address of memory which will be released.
 */
RT_WEAK void rt_free(void *rmem)
{
80015618:	fd010113          	addi	sp,sp,-48
8001561c:	02112623          	sw	ra,44(sp)
80015620:	02812423          	sw	s0,40(sp)
80015624:	03010413          	addi	s0,sp,48
80015628:	fca42e23          	sw	a0,-36(s0)
    rt_base_t level;

    /* call 'rt_free' hook */
    RT_OBJECT_HOOK_CALL(rt_free_hook, (rmem));
8001562c:	0006f797          	auipc	a5,0x6f
80015630:	a2878793          	addi	a5,a5,-1496 # 80084054 <rt_free_hook>
80015634:	0007a783          	lw	a5,0(a5)
80015638:	00078c63          	beqz	a5,80015650 <rt_free+0x38>
8001563c:	0006f797          	auipc	a5,0x6f
80015640:	a1878793          	addi	a5,a5,-1512 # 80084054 <rt_free_hook>
80015644:	0007a783          	lw	a5,0(a5)
80015648:	fdc42503          	lw	a0,-36(s0)
8001564c:	000780e7          	jalr	a5
    /* NULL check */
    if (rmem == RT_NULL) return;
80015650:	fdc42783          	lw	a5,-36(s0)
80015654:	02078063          	beqz	a5,80015674 <rt_free+0x5c>
    /* Enter critical zone */
    level = _heap_lock();
80015658:	ce5ff0ef          	jal	ra,8001533c <_heap_lock>
8001565c:	fea42623          	sw	a0,-20(s0)
    _MEM_FREE(rmem);
80015660:	fdc42503          	lw	a0,-36(s0)
80015664:	2b5000ef          	jal	ra,80016118 <rt_smem_free>
    /* Exit critical zone */
    _heap_unlock(level);
80015668:	fec42503          	lw	a0,-20(s0)
8001566c:	d1dff0ef          	jal	ra,80015388 <_heap_unlock>
80015670:	0080006f          	j	80015678 <rt_free+0x60>
    if (rmem == RT_NULL) return;
80015674:	00000013          	nop
}
80015678:	02c12083          	lw	ra,44(sp)
8001567c:	02812403          	lw	s0,40(sp)
80015680:	03010113          	addi	sp,sp,48
80015684:	00008067          	ret

80015688 <rt_memory_info>:
* @param max_used is a pointer to get the maximum memory used.
*/
RT_WEAK void rt_memory_info(rt_size_t *total,
                            rt_size_t *used,
                            rt_size_t *max_used)
{
80015688:	fd010113          	addi	sp,sp,-48
8001568c:	02112623          	sw	ra,44(sp)
80015690:	02812423          	sw	s0,40(sp)
80015694:	03010413          	addi	s0,sp,48
80015698:	fca42e23          	sw	a0,-36(s0)
8001569c:	fcb42c23          	sw	a1,-40(s0)
800156a0:	fcc42a23          	sw	a2,-44(s0)
    rt_base_t level;

    /* Enter critical zone */
    level = _heap_lock();
800156a4:	c99ff0ef          	jal	ra,8001533c <_heap_lock>
800156a8:	fea42623          	sw	a0,-20(s0)
    _MEM_INFO(total, used, max_used);
800156ac:	fd442603          	lw	a2,-44(s0)
800156b0:	fd842583          	lw	a1,-40(s0)
800156b4:	fdc42503          	lw	a0,-36(s0)
800156b8:	d11ff0ef          	jal	ra,800153c8 <_smem_info>
    /* Exit critical zone */
    _heap_unlock(level);
800156bc:	fec42503          	lw	a0,-20(s0)
800156c0:	cc9ff0ef          	jal	ra,80015388 <_heap_unlock>
}
800156c4:	00000013          	nop
800156c8:	02c12083          	lw	ra,44(sp)
800156cc:	02812403          	lw	s0,40(sp)
800156d0:	03010113          	addi	sp,sp,48
800156d4:	00008067          	ret

800156d8 <__rt_ffs>:
 *
 * @return Return the index of the first bit set. If value is 0, then this function
 *         shall return 0.
 */
int __rt_ffs(int value)
{
800156d8:	fe010113          	addi	sp,sp,-32
800156dc:	00812e23          	sw	s0,28(sp)
800156e0:	02010413          	addi	s0,sp,32
800156e4:	fea42623          	sw	a0,-20(s0)
    if (value == 0) return 0;
800156e8:	fec42783          	lw	a5,-20(s0)
800156ec:	00079663          	bnez	a5,800156f8 <__rt_ffs+0x20>
800156f0:	00000793          	li	a5,0
800156f4:	0b80006f          	j	800157ac <__rt_ffs+0xd4>

    if (value & 0xff)
800156f8:	fec42783          	lw	a5,-20(s0)
800156fc:	0ff7f793          	zext.b	a5,a5
80015700:	02078263          	beqz	a5,80015724 <__rt_ffs+0x4c>
        return __lowest_bit_bitmap[value & 0xff] + 1;
80015704:	fec42783          	lw	a5,-20(s0)
80015708:	0ff7f793          	zext.b	a5,a5
8001570c:	00013717          	auipc	a4,0x13
80015710:	e9470713          	addi	a4,a4,-364 # 800285a0 <__lowest_bit_bitmap>
80015714:	00f707b3          	add	a5,a4,a5
80015718:	0007c783          	lbu	a5,0(a5)
8001571c:	00178793          	addi	a5,a5,1
80015720:	08c0006f          	j	800157ac <__rt_ffs+0xd4>

    if (value & 0xff00)
80015724:	fec42703          	lw	a4,-20(s0)
80015728:	000107b7          	lui	a5,0x10
8001572c:	f0078793          	addi	a5,a5,-256 # ff00 <__STACKSIZE__+0xbf00>
80015730:	00f777b3          	and	a5,a4,a5
80015734:	02078463          	beqz	a5,8001575c <__rt_ffs+0x84>
        return __lowest_bit_bitmap[(value & 0xff00) >> 8] + 9;
80015738:	fec42783          	lw	a5,-20(s0)
8001573c:	4087d793          	srai	a5,a5,0x8
80015740:	0ff7f793          	zext.b	a5,a5
80015744:	00013717          	auipc	a4,0x13
80015748:	e5c70713          	addi	a4,a4,-420 # 800285a0 <__lowest_bit_bitmap>
8001574c:	00f707b3          	add	a5,a4,a5
80015750:	0007c783          	lbu	a5,0(a5)
80015754:	00978793          	addi	a5,a5,9
80015758:	0540006f          	j	800157ac <__rt_ffs+0xd4>

    if (value & 0xff0000)
8001575c:	fec42703          	lw	a4,-20(s0)
80015760:	00ff07b7          	lui	a5,0xff0
80015764:	00f777b3          	and	a5,a4,a5
80015768:	02078463          	beqz	a5,80015790 <__rt_ffs+0xb8>
        return __lowest_bit_bitmap[(value & 0xff0000) >> 16] + 17;
8001576c:	fec42783          	lw	a5,-20(s0)
80015770:	4107d793          	srai	a5,a5,0x10
80015774:	0ff7f793          	zext.b	a5,a5
80015778:	00013717          	auipc	a4,0x13
8001577c:	e2870713          	addi	a4,a4,-472 # 800285a0 <__lowest_bit_bitmap>
80015780:	00f707b3          	add	a5,a4,a5
80015784:	0007c783          	lbu	a5,0(a5) # ff0000 <__STACKSIZE__+0xfec000>
80015788:	01178793          	addi	a5,a5,17
8001578c:	0200006f          	j	800157ac <__rt_ffs+0xd4>

    return __lowest_bit_bitmap[(value & 0xff000000) >> 24] + 25;
80015790:	fec42783          	lw	a5,-20(s0)
80015794:	0187d793          	srli	a5,a5,0x18
80015798:	00013717          	auipc	a4,0x13
8001579c:	e0870713          	addi	a4,a4,-504 # 800285a0 <__lowest_bit_bitmap>
800157a0:	00f707b3          	add	a5,a4,a5
800157a4:	0007c783          	lbu	a5,0(a5)
800157a8:	01978793          	addi	a5,a5,25
}
800157ac:	00078513          	mv	a0,a5
800157b0:	01c12403          	lw	s0,28(sp)
800157b4:	02010113          	addi	sp,sp,32
800157b8:	00008067          	ret

800157bc <rt_smem_setname>:
#define MIN_SIZE_ALIGNED     RT_ALIGN(MIN_SIZE, RT_ALIGN_SIZE)
#define SIZEOF_STRUCT_MEM    RT_ALIGN(sizeof(struct rt_small_mem_item), RT_ALIGN_SIZE)

#ifdef RT_USING_MEMTRACE
rt_inline void rt_smem_setname(struct rt_small_mem_item *mem, const char *name)
{
800157bc:	fd010113          	addi	sp,sp,-48
800157c0:	02812623          	sw	s0,44(sp)
800157c4:	03010413          	addi	s0,sp,48
800157c8:	fca42e23          	sw	a0,-36(s0)
800157cc:	fcb42c23          	sw	a1,-40(s0)
    int index;
    for (index = 0; index < sizeof(mem->thread); index ++)
800157d0:	fe042623          	sw	zero,-20(s0)
800157d4:	0440006f          	j	80015818 <rt_smem_setname+0x5c>
    {
        if (name[index] == '\0') break;
800157d8:	fec42783          	lw	a5,-20(s0)
800157dc:	fd842703          	lw	a4,-40(s0)
800157e0:	00f707b3          	add	a5,a4,a5
800157e4:	0007c783          	lbu	a5,0(a5)
800157e8:	04078063          	beqz	a5,80015828 <rt_smem_setname+0x6c>
        mem->thread[index] = name[index];
800157ec:	fec42783          	lw	a5,-20(s0)
800157f0:	fd842703          	lw	a4,-40(s0)
800157f4:	00f707b3          	add	a5,a4,a5
800157f8:	0007c703          	lbu	a4,0(a5)
800157fc:	fdc42683          	lw	a3,-36(s0)
80015800:	fec42783          	lw	a5,-20(s0)
80015804:	00f687b3          	add	a5,a3,a5
80015808:	00e78623          	sb	a4,12(a5)
    for (index = 0; index < sizeof(mem->thread); index ++)
8001580c:	fec42783          	lw	a5,-20(s0)
80015810:	00178793          	addi	a5,a5,1
80015814:	fef42623          	sw	a5,-20(s0)
80015818:	fec42703          	lw	a4,-20(s0)
8001581c:	00300793          	li	a5,3
80015820:	fae7fce3          	bgeu	a5,a4,800157d8 <rt_smem_setname+0x1c>
80015824:	02c0006f          	j	80015850 <rt_smem_setname+0x94>
        if (name[index] == '\0') break;
80015828:	00000013          	nop
    }

    for (; index < sizeof(mem->thread); index ++)
8001582c:	0240006f          	j	80015850 <rt_smem_setname+0x94>
    {
        mem->thread[index] = ' ';
80015830:	fdc42703          	lw	a4,-36(s0)
80015834:	fec42783          	lw	a5,-20(s0)
80015838:	00f707b3          	add	a5,a4,a5
8001583c:	02000713          	li	a4,32
80015840:	00e78623          	sb	a4,12(a5)
    for (; index < sizeof(mem->thread); index ++)
80015844:	fec42783          	lw	a5,-20(s0)
80015848:	00178793          	addi	a5,a5,1
8001584c:	fef42623          	sw	a5,-20(s0)
80015850:	fec42703          	lw	a4,-20(s0)
80015854:	00300793          	li	a5,3
80015858:	fce7fce3          	bgeu	a5,a4,80015830 <rt_smem_setname+0x74>
    }
}
8001585c:	00000013          	nop
80015860:	00000013          	nop
80015864:	02c12403          	lw	s0,44(sp)
80015868:	03010113          	addi	sp,sp,48
8001586c:	00008067          	ret

80015870 <plug_holes>:
#endif /* RT_USING_MEMTRACE */

static void plug_holes(struct rt_small_mem *m, struct rt_small_mem_item *mem)
{
80015870:	fd010113          	addi	sp,sp,-48
80015874:	02812623          	sw	s0,44(sp)
80015878:	03010413          	addi	s0,sp,48
8001587c:	fca42e23          	sw	a0,-36(s0)
80015880:	fcb42c23          	sw	a1,-40(s0)

    RT_ASSERT((rt_uint8_t *)mem >= m->heap_ptr);
    RT_ASSERT((rt_uint8_t *)mem < (rt_uint8_t *)m->heap_end);

    /* plug hole forward */
    nmem = (struct rt_small_mem_item *)&m->heap_ptr[mem->next];
80015884:	fdc42783          	lw	a5,-36(s0)
80015888:	0347a703          	lw	a4,52(a5)
8001588c:	fd842783          	lw	a5,-40(s0)
80015890:	0047a783          	lw	a5,4(a5)
80015894:	00f707b3          	add	a5,a4,a5
80015898:	fef42623          	sw	a5,-20(s0)
    if (mem != nmem && !MEM_ISUSED(nmem) &&
8001589c:	fd842703          	lw	a4,-40(s0)
800158a0:	fec42783          	lw	a5,-20(s0)
800158a4:	08f70263          	beq	a4,a5,80015928 <plug_holes+0xb8>
800158a8:	fec42783          	lw	a5,-20(s0)
800158ac:	0007a783          	lw	a5,0(a5)
800158b0:	0017f793          	andi	a5,a5,1
800158b4:	06079a63          	bnez	a5,80015928 <plug_holes+0xb8>
        (rt_uint8_t *)nmem != (rt_uint8_t *)m->heap_end)
800158b8:	fdc42783          	lw	a5,-36(s0)
800158bc:	0387a783          	lw	a5,56(a5)
    if (mem != nmem && !MEM_ISUSED(nmem) &&
800158c0:	fec42703          	lw	a4,-20(s0)
800158c4:	06f70263          	beq	a4,a5,80015928 <plug_holes+0xb8>
    {
        /* if mem->next is unused and not end of m->heap_ptr,
         * combine mem and mem->next
         */
        if (m->lfree == nmem)
800158c8:	fdc42783          	lw	a5,-36(s0)
800158cc:	03c7a783          	lw	a5,60(a5)
800158d0:	fec42703          	lw	a4,-20(s0)
800158d4:	00f71863          	bne	a4,a5,800158e4 <plug_holes+0x74>
        {
            m->lfree = mem;
800158d8:	fdc42783          	lw	a5,-36(s0)
800158dc:	fd842703          	lw	a4,-40(s0)
800158e0:	02e7ae23          	sw	a4,60(a5)
        }
        nmem->pool_ptr = 0;
800158e4:	fec42783          	lw	a5,-20(s0)
800158e8:	0007a023          	sw	zero,0(a5)
        mem->next = nmem->next;
800158ec:	fec42783          	lw	a5,-20(s0)
800158f0:	0047a703          	lw	a4,4(a5)
800158f4:	fd842783          	lw	a5,-40(s0)
800158f8:	00e7a223          	sw	a4,4(a5)
        ((struct rt_small_mem_item *)&m->heap_ptr[nmem->next])->prev = (rt_uint8_t *)mem - m->heap_ptr;
800158fc:	fdc42783          	lw	a5,-36(s0)
80015900:	0347a783          	lw	a5,52(a5)
80015904:	fd842703          	lw	a4,-40(s0)
80015908:	40f706b3          	sub	a3,a4,a5
8001590c:	fdc42783          	lw	a5,-36(s0)
80015910:	0347a703          	lw	a4,52(a5)
80015914:	fec42783          	lw	a5,-20(s0)
80015918:	0047a783          	lw	a5,4(a5)
8001591c:	00f707b3          	add	a5,a4,a5
80015920:	00068713          	mv	a4,a3
80015924:	00e7a423          	sw	a4,8(a5)
    }

    /* plug hole backward */
    pmem = (struct rt_small_mem_item *)&m->heap_ptr[mem->prev];
80015928:	fdc42783          	lw	a5,-36(s0)
8001592c:	0347a703          	lw	a4,52(a5)
80015930:	fd842783          	lw	a5,-40(s0)
80015934:	0087a783          	lw	a5,8(a5)
80015938:	00f707b3          	add	a5,a4,a5
8001593c:	fef42423          	sw	a5,-24(s0)
    if (pmem != mem && !MEM_ISUSED(pmem))
80015940:	fe842703          	lw	a4,-24(s0)
80015944:	fd842783          	lw	a5,-40(s0)
80015948:	06f70a63          	beq	a4,a5,800159bc <plug_holes+0x14c>
8001594c:	fe842783          	lw	a5,-24(s0)
80015950:	0007a783          	lw	a5,0(a5)
80015954:	0017f793          	andi	a5,a5,1
80015958:	06079263          	bnez	a5,800159bc <plug_holes+0x14c>
    {
        /* if mem->prev is unused, combine mem and mem->prev */
        if (m->lfree == mem)
8001595c:	fdc42783          	lw	a5,-36(s0)
80015960:	03c7a783          	lw	a5,60(a5)
80015964:	fd842703          	lw	a4,-40(s0)
80015968:	00f71863          	bne	a4,a5,80015978 <plug_holes+0x108>
        {
            m->lfree = pmem;
8001596c:	fdc42783          	lw	a5,-36(s0)
80015970:	fe842703          	lw	a4,-24(s0)
80015974:	02e7ae23          	sw	a4,60(a5)
        }
        mem->pool_ptr = 0;
80015978:	fd842783          	lw	a5,-40(s0)
8001597c:	0007a023          	sw	zero,0(a5)
        pmem->next = mem->next;
80015980:	fd842783          	lw	a5,-40(s0)
80015984:	0047a703          	lw	a4,4(a5)
80015988:	fe842783          	lw	a5,-24(s0)
8001598c:	00e7a223          	sw	a4,4(a5)
        ((struct rt_small_mem_item *)&m->heap_ptr[mem->next])->prev = (rt_uint8_t *)pmem - m->heap_ptr;
80015990:	fdc42783          	lw	a5,-36(s0)
80015994:	0347a783          	lw	a5,52(a5)
80015998:	fe842703          	lw	a4,-24(s0)
8001599c:	40f706b3          	sub	a3,a4,a5
800159a0:	fdc42783          	lw	a5,-36(s0)
800159a4:	0347a703          	lw	a4,52(a5)
800159a8:	fd842783          	lw	a5,-40(s0)
800159ac:	0047a783          	lw	a5,4(a5)
800159b0:	00f707b3          	add	a5,a4,a5
800159b4:	00068713          	mv	a4,a3
800159b8:	00e7a423          	sw	a4,8(a5)
    }
}
800159bc:	00000013          	nop
800159c0:	02c12403          	lw	s0,44(sp)
800159c4:	03010113          	addi	sp,sp,48
800159c8:	00008067          	ret

800159cc <rt_smem_init>:
 * @return Return a pointer to the memory object. When the return value is RT_NULL, it means the init failed.
 */
rt_smem_t rt_smem_init(const char    *name,
                     void          *begin_addr,
                     rt_size_t      size)
{
800159cc:	fc010113          	addi	sp,sp,-64
800159d0:	02112e23          	sw	ra,60(sp)
800159d4:	02812c23          	sw	s0,56(sp)
800159d8:	04010413          	addi	s0,sp,64
800159dc:	fca42623          	sw	a0,-52(s0)
800159e0:	fcb42423          	sw	a1,-56(s0)
800159e4:	fcc42223          	sw	a2,-60(s0)
    struct rt_small_mem_item *mem;
    struct rt_small_mem *small_mem;
    rt_ubase_t start_addr, begin_align, end_align, mem_size;

    small_mem = (struct rt_small_mem *)RT_ALIGN((rt_ubase_t)begin_addr, RT_ALIGN_SIZE);
800159e8:	fc842783          	lw	a5,-56(s0)
800159ec:	00378793          	addi	a5,a5,3
800159f0:	ffc7f793          	andi	a5,a5,-4
800159f4:	fef42623          	sw	a5,-20(s0)
    start_addr = (rt_ubase_t)small_mem + sizeof(*small_mem);
800159f8:	fec42783          	lw	a5,-20(s0)
800159fc:	04478793          	addi	a5,a5,68
80015a00:	fef42423          	sw	a5,-24(s0)
    begin_align = RT_ALIGN((rt_ubase_t)start_addr, RT_ALIGN_SIZE);
80015a04:	fe842783          	lw	a5,-24(s0)
80015a08:	00378793          	addi	a5,a5,3
80015a0c:	ffc7f793          	andi	a5,a5,-4
80015a10:	fef42223          	sw	a5,-28(s0)
    end_align   = RT_ALIGN_DOWN((rt_ubase_t)begin_addr + size, RT_ALIGN_SIZE);
80015a14:	fc842703          	lw	a4,-56(s0)
80015a18:	fc442783          	lw	a5,-60(s0)
80015a1c:	00f707b3          	add	a5,a4,a5
80015a20:	ffc7f793          	andi	a5,a5,-4
80015a24:	fef42023          	sw	a5,-32(s0)

    /* alignment addr */
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
80015a28:	fe042703          	lw	a4,-32(s0)
80015a2c:	02000793          	li	a5,32
80015a30:	16e7f263          	bgeu	a5,a4,80015b94 <rt_smem_init+0x1c8>
        ((end_align - 2 * SIZEOF_STRUCT_MEM) >= start_addr))
80015a34:	fe042783          	lw	a5,-32(s0)
80015a38:	fe078793          	addi	a5,a5,-32
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
80015a3c:	fe842703          	lw	a4,-24(s0)
80015a40:	14e7ea63          	bltu	a5,a4,80015b94 <rt_smem_init+0x1c8>
    {
        /* calculate the aligned memory size */
        mem_size = end_align - begin_align - 2 * SIZEOF_STRUCT_MEM;
80015a44:	fe042703          	lw	a4,-32(s0)
80015a48:	fe442783          	lw	a5,-28(s0)
80015a4c:	40f707b3          	sub	a5,a4,a5
80015a50:	fe078793          	addi	a5,a5,-32
80015a54:	fcf42e23          	sw	a5,-36(s0)
                   (rt_ubase_t)begin_addr, (rt_ubase_t)begin_addr + size);

        return RT_NULL;
    }

    rt_memset(small_mem, 0, sizeof(*small_mem));
80015a58:	04400613          	li	a2,68
80015a5c:	00000593          	li	a1,0
80015a60:	fec42503          	lw	a0,-20(s0)
80015a64:	a28fe0ef          	jal	ra,80013c8c <rt_memset>
    /* initialize small memory object */
    rt_object_init(&(small_mem->parent.parent), RT_Object_Class_Memory, name);
80015a68:	fec42783          	lw	a5,-20(s0)
80015a6c:	fcc42603          	lw	a2,-52(s0)
80015a70:	00c00593          	li	a1,12
80015a74:	00078513          	mv	a0,a5
80015a78:	575000ef          	jal	ra,800167ec <rt_object_init>
    small_mem->parent.algorithm = "small";
80015a7c:	fec42783          	lw	a5,-20(s0)
80015a80:	00012717          	auipc	a4,0x12
80015a84:	b1c70713          	addi	a4,a4,-1252 # 8002759c <raise+0x19a8>
80015a88:	02e7a023          	sw	a4,32(a5)
    small_mem->parent.address = begin_align;
80015a8c:	fec42783          	lw	a5,-20(s0)
80015a90:	fe442703          	lw	a4,-28(s0)
80015a94:	02e7a223          	sw	a4,36(a5)
    small_mem->parent.total = mem_size;
80015a98:	fec42783          	lw	a5,-20(s0)
80015a9c:	fdc42703          	lw	a4,-36(s0)
80015aa0:	02e7a423          	sw	a4,40(a5)
    small_mem->mem_size_aligned = mem_size;
80015aa4:	fec42783          	lw	a5,-20(s0)
80015aa8:	fdc42703          	lw	a4,-36(s0)
80015aac:	04e7a023          	sw	a4,64(a5)

    /* point to begin address of heap */
    small_mem->heap_ptr = (rt_uint8_t *)begin_align;
80015ab0:	fe442703          	lw	a4,-28(s0)
80015ab4:	fec42783          	lw	a5,-20(s0)
80015ab8:	02e7aa23          	sw	a4,52(a5)

    RT_DEBUG_LOG(RT_DEBUG_MEM, ("mem init, heap begin address 0x%x, size %d\n",
                                (rt_ubase_t)small_mem->heap_ptr, small_mem->mem_size_aligned));

    /* initialize the start of the heap */
    mem        = (struct rt_small_mem_item *)small_mem->heap_ptr;
80015abc:	fec42783          	lw	a5,-20(s0)
80015ac0:	0347a783          	lw	a5,52(a5)
80015ac4:	fcf42c23          	sw	a5,-40(s0)
    mem->pool_ptr = MEM_FREED();
80015ac8:	fec42783          	lw	a5,-20(s0)
80015acc:	ffe7f713          	andi	a4,a5,-2
80015ad0:	fd842783          	lw	a5,-40(s0)
80015ad4:	00e7a023          	sw	a4,0(a5)
    mem->next  = small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM;
80015ad8:	fec42783          	lw	a5,-20(s0)
80015adc:	0407a783          	lw	a5,64(a5)
80015ae0:	01078713          	addi	a4,a5,16
80015ae4:	fd842783          	lw	a5,-40(s0)
80015ae8:	00e7a223          	sw	a4,4(a5)
    mem->prev  = 0;
80015aec:	fd842783          	lw	a5,-40(s0)
80015af0:	0007a423          	sw	zero,8(a5)
#ifdef RT_USING_MEMTRACE
    rt_smem_setname(mem, "INIT");
80015af4:	00012597          	auipc	a1,0x12
80015af8:	ab058593          	addi	a1,a1,-1360 # 800275a4 <raise+0x19b0>
80015afc:	fd842503          	lw	a0,-40(s0)
80015b00:	cbdff0ef          	jal	ra,800157bc <rt_smem_setname>
#endif /* RT_USING_MEMTRACE */

    /* initialize the end of the heap */
    small_mem->heap_end        = (struct rt_small_mem_item *)&small_mem->heap_ptr[mem->next];
80015b04:	fec42783          	lw	a5,-20(s0)
80015b08:	0347a703          	lw	a4,52(a5)
80015b0c:	fd842783          	lw	a5,-40(s0)
80015b10:	0047a783          	lw	a5,4(a5)
80015b14:	00f70733          	add	a4,a4,a5
80015b18:	fec42783          	lw	a5,-20(s0)
80015b1c:	02e7ac23          	sw	a4,56(a5)
    small_mem->heap_end->pool_ptr = MEM_USED();
80015b20:	fec42703          	lw	a4,-20(s0)
80015b24:	fec42783          	lw	a5,-20(s0)
80015b28:	0387a783          	lw	a5,56(a5)
80015b2c:	00176713          	ori	a4,a4,1
80015b30:	00e7a023          	sw	a4,0(a5)
    small_mem->heap_end->next  = small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM;
80015b34:	fec42783          	lw	a5,-20(s0)
80015b38:	0407a703          	lw	a4,64(a5)
80015b3c:	fec42783          	lw	a5,-20(s0)
80015b40:	0387a783          	lw	a5,56(a5)
80015b44:	01070713          	addi	a4,a4,16
80015b48:	00e7a223          	sw	a4,4(a5)
    small_mem->heap_end->prev  = small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM;
80015b4c:	fec42783          	lw	a5,-20(s0)
80015b50:	0407a703          	lw	a4,64(a5)
80015b54:	fec42783          	lw	a5,-20(s0)
80015b58:	0387a783          	lw	a5,56(a5)
80015b5c:	01070713          	addi	a4,a4,16
80015b60:	00e7a423          	sw	a4,8(a5)
#ifdef RT_USING_MEMTRACE
    rt_smem_setname(small_mem->heap_end, "INIT");
80015b64:	fec42783          	lw	a5,-20(s0)
80015b68:	0387a783          	lw	a5,56(a5)
80015b6c:	00012597          	auipc	a1,0x12
80015b70:	a3858593          	addi	a1,a1,-1480 # 800275a4 <raise+0x19b0>
80015b74:	00078513          	mv	a0,a5
80015b78:	c45ff0ef          	jal	ra,800157bc <rt_smem_setname>
#endif /* RT_USING_MEMTRACE */

    /* initialize the lowest-free pointer to the start of the heap */
    small_mem->lfree = (struct rt_small_mem_item *)small_mem->heap_ptr;
80015b7c:	fec42783          	lw	a5,-20(s0)
80015b80:	0347a703          	lw	a4,52(a5)
80015b84:	fec42783          	lw	a5,-20(s0)
80015b88:	02e7ae23          	sw	a4,60(a5)

    return &small_mem->parent;
80015b8c:	fec42783          	lw	a5,-20(s0)
80015b90:	02c0006f          	j	80015bbc <rt_smem_init+0x1f0>
        rt_kprintf("mem init, error begin address 0x%x, and end address 0x%x\n",
80015b94:	fc842683          	lw	a3,-56(s0)
                   (rt_ubase_t)begin_addr, (rt_ubase_t)begin_addr + size);
80015b98:	fc842703          	lw	a4,-56(s0)
        rt_kprintf("mem init, error begin address 0x%x, and end address 0x%x\n",
80015b9c:	fc442783          	lw	a5,-60(s0)
80015ba0:	00f707b3          	add	a5,a4,a5
80015ba4:	00078613          	mv	a2,a5
80015ba8:	00068593          	mv	a1,a3
80015bac:	00012517          	auipc	a0,0x12
80015bb0:	a0050513          	addi	a0,a0,-1536 # 800275ac <raise+0x19b8>
80015bb4:	e74ff0ef          	jal	ra,80015228 <rt_kprintf>
        return RT_NULL;
80015bb8:	00000793          	li	a5,0
}
80015bbc:	00078513          	mv	a0,a5
80015bc0:	03c12083          	lw	ra,60(sp)
80015bc4:	03812403          	lw	s0,56(sp)
80015bc8:	04010113          	addi	sp,sp,64
80015bcc:	00008067          	ret

80015bd0 <rt_smem_alloc>:
 * @param size is the minimum size of the requested block in bytes.
 *
 * @return the pointer to allocated memory or NULL if no free memory was found.
 */
void *rt_smem_alloc(rt_smem_t m, rt_size_t size)
{
80015bd0:	fc010113          	addi	sp,sp,-64
80015bd4:	02112e23          	sw	ra,60(sp)
80015bd8:	02812c23          	sw	s0,56(sp)
80015bdc:	04010413          	addi	s0,sp,64
80015be0:	fca42623          	sw	a0,-52(s0)
80015be4:	fcb42423          	sw	a1,-56(s0)
    rt_size_t ptr, ptr2;
    struct rt_small_mem_item *mem, *mem2;
    struct rt_small_mem *small_mem;

    if (size == 0)
80015be8:	fc842783          	lw	a5,-56(s0)
80015bec:	00079663          	bnez	a5,80015bf8 <rt_smem_alloc+0x28>
        return RT_NULL;
80015bf0:	00000793          	li	a5,0
80015bf4:	2e00006f          	j	80015ed4 <rt_smem_alloc+0x304>
    else
    {
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("malloc size %d\n", size));
    }

    small_mem = (struct rt_small_mem *)m;
80015bf8:	fcc42783          	lw	a5,-52(s0)
80015bfc:	fef42423          	sw	a5,-24(s0)
    /* alignment size */
    size = RT_ALIGN(size, RT_ALIGN_SIZE);
80015c00:	fc842783          	lw	a5,-56(s0)
80015c04:	00378793          	addi	a5,a5,3
80015c08:	ffc7f793          	andi	a5,a5,-4
80015c0c:	fcf42423          	sw	a5,-56(s0)

    /* every data block must be at least MIN_SIZE_ALIGNED long */
    if (size < MIN_SIZE_ALIGNED)
80015c10:	fc842703          	lw	a4,-56(s0)
80015c14:	00b00793          	li	a5,11
80015c18:	00e7e663          	bltu	a5,a4,80015c24 <rt_smem_alloc+0x54>
        size = MIN_SIZE_ALIGNED;
80015c1c:	00c00793          	li	a5,12
80015c20:	fcf42423          	sw	a5,-56(s0)

    if (size > small_mem->mem_size_aligned)
80015c24:	fe842783          	lw	a5,-24(s0)
80015c28:	0407a783          	lw	a5,64(a5)
80015c2c:	fc842703          	lw	a4,-56(s0)
80015c30:	00e7f663          	bgeu	a5,a4,80015c3c <rt_smem_alloc+0x6c>
    {
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("no memory\n"));

        return RT_NULL;
80015c34:	00000793          	li	a5,0
80015c38:	29c0006f          	j	80015ed4 <rt_smem_alloc+0x304>
    }

    for (ptr = (rt_uint8_t *)small_mem->lfree - small_mem->heap_ptr;
80015c3c:	fe842783          	lw	a5,-24(s0)
80015c40:	03c7a703          	lw	a4,60(a5)
80015c44:	fe842783          	lw	a5,-24(s0)
80015c48:	0347a783          	lw	a5,52(a5)
80015c4c:	40f707b3          	sub	a5,a4,a5
80015c50:	fef42623          	sw	a5,-20(s0)
80015c54:	2640006f          	j	80015eb8 <rt_smem_alloc+0x2e8>
         ptr <= small_mem->mem_size_aligned - size;
         ptr = ((struct rt_small_mem_item *)&small_mem->heap_ptr[ptr])->next)
    {
        mem = (struct rt_small_mem_item *)&small_mem->heap_ptr[ptr];
80015c58:	fe842783          	lw	a5,-24(s0)
80015c5c:	0347a703          	lw	a4,52(a5)
80015c60:	fec42783          	lw	a5,-20(s0)
80015c64:	00f707b3          	add	a5,a4,a5
80015c68:	fef42223          	sw	a5,-28(s0)

        if ((!MEM_ISUSED(mem)) && (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size)
80015c6c:	fe442783          	lw	a5,-28(s0)
80015c70:	0007a783          	lw	a5,0(a5)
80015c74:	0017f793          	andi	a5,a5,1
80015c78:	22079463          	bnez	a5,80015ea0 <rt_smem_alloc+0x2d0>
80015c7c:	fe442783          	lw	a5,-28(s0)
80015c80:	0047a703          	lw	a4,4(a5)
80015c84:	fec42783          	lw	a5,-20(s0)
80015c88:	40f707b3          	sub	a5,a4,a5
80015c8c:	ff078793          	addi	a5,a5,-16
80015c90:	fc842703          	lw	a4,-56(s0)
80015c94:	20e7e663          	bltu	a5,a4,80015ea0 <rt_smem_alloc+0x2d0>
        {
            /* mem is not used and at least perfect fit is possible:
             * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

            if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >=
80015c98:	fe442783          	lw	a5,-28(s0)
80015c9c:	0047a703          	lw	a4,4(a5)
80015ca0:	fec42783          	lw	a5,-20(s0)
80015ca4:	40f707b3          	sub	a5,a4,a5
80015ca8:	ff078713          	addi	a4,a5,-16
                (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED))
80015cac:	fc842783          	lw	a5,-56(s0)
80015cb0:	01c78793          	addi	a5,a5,28
            if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >=
80015cb4:	0ef76663          	bltu	a4,a5,80015da0 <rt_smem_alloc+0x1d0>
                 * struct rt_small_mem_item would fit in but no data between mem2 and mem2->next
                 * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
                 *       region that couldn't hold data, but when mem->next gets freed,
                 *       the 2 regions would be combined, resulting in more free memory
                 */
                ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
80015cb8:	fec42703          	lw	a4,-20(s0)
80015cbc:	fc842783          	lw	a5,-56(s0)
80015cc0:	00f707b3          	add	a5,a4,a5
80015cc4:	01078793          	addi	a5,a5,16
80015cc8:	fef42023          	sw	a5,-32(s0)

                /* create mem2 struct */
                mem2       = (struct rt_small_mem_item *)&small_mem->heap_ptr[ptr2];
80015ccc:	fe842783          	lw	a5,-24(s0)
80015cd0:	0347a703          	lw	a4,52(a5)
80015cd4:	fe042783          	lw	a5,-32(s0)
80015cd8:	00f707b3          	add	a5,a4,a5
80015cdc:	fcf42e23          	sw	a5,-36(s0)
                mem2->pool_ptr = MEM_FREED();
80015ce0:	fe842783          	lw	a5,-24(s0)
80015ce4:	ffe7f713          	andi	a4,a5,-2
80015ce8:	fdc42783          	lw	a5,-36(s0)
80015cec:	00e7a023          	sw	a4,0(a5)
                mem2->next = mem->next;
80015cf0:	fe442783          	lw	a5,-28(s0)
80015cf4:	0047a703          	lw	a4,4(a5)
80015cf8:	fdc42783          	lw	a5,-36(s0)
80015cfc:	00e7a223          	sw	a4,4(a5)
                mem2->prev = ptr;
80015d00:	fdc42783          	lw	a5,-36(s0)
80015d04:	fec42703          	lw	a4,-20(s0)
80015d08:	00e7a423          	sw	a4,8(a5)
#ifdef RT_USING_MEMTRACE
                rt_smem_setname(mem2, "    ");
80015d0c:	00012597          	auipc	a1,0x12
80015d10:	8dc58593          	addi	a1,a1,-1828 # 800275e8 <raise+0x19f4>
80015d14:	fdc42503          	lw	a0,-36(s0)
80015d18:	aa5ff0ef          	jal	ra,800157bc <rt_smem_setname>
#endif /* RT_USING_MEMTRACE */

                /* and insert it between mem and mem->next */
                mem->next = ptr2;
80015d1c:	fe442783          	lw	a5,-28(s0)
80015d20:	fe042703          	lw	a4,-32(s0)
80015d24:	00e7a223          	sw	a4,4(a5)

                if (mem2->next != small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM)
80015d28:	fdc42783          	lw	a5,-36(s0)
80015d2c:	0047a703          	lw	a4,4(a5)
80015d30:	fe842783          	lw	a5,-24(s0)
80015d34:	0407a783          	lw	a5,64(a5)
80015d38:	01078793          	addi	a5,a5,16
80015d3c:	02f70063          	beq	a4,a5,80015d5c <rt_smem_alloc+0x18c>
                {
                    ((struct rt_small_mem_item *)&small_mem->heap_ptr[mem2->next])->prev = ptr2;
80015d40:	fe842783          	lw	a5,-24(s0)
80015d44:	0347a703          	lw	a4,52(a5)
80015d48:	fdc42783          	lw	a5,-36(s0)
80015d4c:	0047a783          	lw	a5,4(a5)
80015d50:	00f707b3          	add	a5,a4,a5
80015d54:	fe042703          	lw	a4,-32(s0)
80015d58:	00e7a423          	sw	a4,8(a5)
                }
                small_mem->parent.used += (size + SIZEOF_STRUCT_MEM);
80015d5c:	fe842783          	lw	a5,-24(s0)
80015d60:	02c7a703          	lw	a4,44(a5)
80015d64:	fc842783          	lw	a5,-56(s0)
80015d68:	00f707b3          	add	a5,a4,a5
80015d6c:	01078713          	addi	a4,a5,16
80015d70:	fe842783          	lw	a5,-24(s0)
80015d74:	02e7a623          	sw	a4,44(a5)
                if (small_mem->parent.max < small_mem->parent.used)
80015d78:	fe842783          	lw	a5,-24(s0)
80015d7c:	0307a703          	lw	a4,48(a5)
80015d80:	fe842783          	lw	a5,-24(s0)
80015d84:	02c7a783          	lw	a5,44(a5)
80015d88:	06f77663          	bgeu	a4,a5,80015df4 <rt_smem_alloc+0x224>
                    small_mem->parent.max = small_mem->parent.used;
80015d8c:	fe842783          	lw	a5,-24(s0)
80015d90:	02c7a703          	lw	a4,44(a5)
80015d94:	fe842783          	lw	a5,-24(s0)
80015d98:	02e7a823          	sw	a4,48(a5)
80015d9c:	0580006f          	j	80015df4 <rt_smem_alloc+0x224>
                 * take care of this).
                 * -> near fit or excact fit: do not split, no mem2 creation
                 * also can't move mem->next directly behind mem, since mem->next
                 * will always be used at this point!
                 */
                small_mem->parent.used += mem->next - ((rt_uint8_t *)mem - small_mem->heap_ptr);
80015da0:	fe842783          	lw	a5,-24(s0)
80015da4:	02c7a703          	lw	a4,44(a5)
80015da8:	fe442783          	lw	a5,-28(s0)
80015dac:	0047a783          	lw	a5,4(a5)
80015db0:	fe842683          	lw	a3,-24(s0)
80015db4:	0346a683          	lw	a3,52(a3)
80015db8:	fe442603          	lw	a2,-28(s0)
80015dbc:	40d606b3          	sub	a3,a2,a3
80015dc0:	40d787b3          	sub	a5,a5,a3
80015dc4:	00f70733          	add	a4,a4,a5
80015dc8:	fe842783          	lw	a5,-24(s0)
80015dcc:	02e7a623          	sw	a4,44(a5)
                if (small_mem->parent.max < small_mem->parent.used)
80015dd0:	fe842783          	lw	a5,-24(s0)
80015dd4:	0307a703          	lw	a4,48(a5)
80015dd8:	fe842783          	lw	a5,-24(s0)
80015ddc:	02c7a783          	lw	a5,44(a5)
80015de0:	00f77a63          	bgeu	a4,a5,80015df4 <rt_smem_alloc+0x224>
                    small_mem->parent.max = small_mem->parent.used;
80015de4:	fe842783          	lw	a5,-24(s0)
80015de8:	02c7a703          	lw	a4,44(a5)
80015dec:	fe842783          	lw	a5,-24(s0)
80015df0:	02e7a823          	sw	a4,48(a5)
            }
            /* set small memory object */
            mem->pool_ptr = MEM_USED();
80015df4:	fe842783          	lw	a5,-24(s0)
80015df8:	0017e713          	ori	a4,a5,1
80015dfc:	fe442783          	lw	a5,-28(s0)
80015e00:	00e7a023          	sw	a4,0(a5)
#ifdef RT_USING_MEMTRACE
            if (rt_thread_self())
80015e04:	1bd010ef          	jal	ra,800177c0 <rt_thread_self>
80015e08:	00050793          	mv	a5,a0
80015e0c:	00078e63          	beqz	a5,80015e28 <rt_smem_alloc+0x258>
                rt_smem_setname(mem, rt_thread_self()->name);
80015e10:	1b1010ef          	jal	ra,800177c0 <rt_thread_self>
80015e14:	00050793          	mv	a5,a0
80015e18:	00078593          	mv	a1,a5
80015e1c:	fe442503          	lw	a0,-28(s0)
80015e20:	99dff0ef          	jal	ra,800157bc <rt_smem_setname>
80015e24:	0140006f          	j	80015e38 <rt_smem_alloc+0x268>
            else
                rt_smem_setname(mem, "NONE");
80015e28:	00011597          	auipc	a1,0x11
80015e2c:	7c858593          	addi	a1,a1,1992 # 800275f0 <raise+0x19fc>
80015e30:	fe442503          	lw	a0,-28(s0)
80015e34:	989ff0ef          	jal	ra,800157bc <rt_smem_setname>
#endif /* RT_USING_MEMTRACE */

            if (mem == small_mem->lfree)
80015e38:	fe842783          	lw	a5,-24(s0)
80015e3c:	03c7a783          	lw	a5,60(a5)
80015e40:	fe442703          	lw	a4,-28(s0)
80015e44:	04f71863          	bne	a4,a5,80015e94 <rt_smem_alloc+0x2c4>
            {
                /* Find next free block after mem and update lowest free pointer */
                while (MEM_ISUSED(small_mem->lfree) && small_mem->lfree != small_mem->heap_end)
80015e48:	0240006f          	j	80015e6c <rt_smem_alloc+0x29c>
                    small_mem->lfree = (struct rt_small_mem_item *)&small_mem->heap_ptr[small_mem->lfree->next];
80015e4c:	fe842783          	lw	a5,-24(s0)
80015e50:	0347a703          	lw	a4,52(a5)
80015e54:	fe842783          	lw	a5,-24(s0)
80015e58:	03c7a783          	lw	a5,60(a5)
80015e5c:	0047a783          	lw	a5,4(a5)
80015e60:	00f70733          	add	a4,a4,a5
80015e64:	fe842783          	lw	a5,-24(s0)
80015e68:	02e7ae23          	sw	a4,60(a5)
                while (MEM_ISUSED(small_mem->lfree) && small_mem->lfree != small_mem->heap_end)
80015e6c:	fe842783          	lw	a5,-24(s0)
80015e70:	03c7a783          	lw	a5,60(a5)
80015e74:	0007a783          	lw	a5,0(a5)
80015e78:	0017f793          	andi	a5,a5,1
80015e7c:	00078c63          	beqz	a5,80015e94 <rt_smem_alloc+0x2c4>
80015e80:	fe842783          	lw	a5,-24(s0)
80015e84:	03c7a703          	lw	a4,60(a5)
80015e88:	fe842783          	lw	a5,-24(s0)
80015e8c:	0387a783          	lw	a5,56(a5)
80015e90:	faf71ee3          	bne	a4,a5,80015e4c <rt_smem_alloc+0x27c>
                         ("allocate memory at 0x%x, size: %d\n",
                          (rt_ubase_t)((rt_uint8_t *)mem + SIZEOF_STRUCT_MEM),
                          (rt_ubase_t)(mem->next - ((rt_uint8_t *)mem - small_mem->heap_ptr))));

            /* return the memory data except mem struct */
            return (rt_uint8_t *)mem + SIZEOF_STRUCT_MEM;
80015e94:	fe442783          	lw	a5,-28(s0)
80015e98:	01078793          	addi	a5,a5,16
80015e9c:	0380006f          	j	80015ed4 <rt_smem_alloc+0x304>
         ptr = ((struct rt_small_mem_item *)&small_mem->heap_ptr[ptr])->next)
80015ea0:	fe842783          	lw	a5,-24(s0)
80015ea4:	0347a703          	lw	a4,52(a5)
80015ea8:	fec42783          	lw	a5,-20(s0)
80015eac:	00f707b3          	add	a5,a4,a5
80015eb0:	0047a783          	lw	a5,4(a5)
80015eb4:	fef42623          	sw	a5,-20(s0)
         ptr <= small_mem->mem_size_aligned - size;
80015eb8:	fe842783          	lw	a5,-24(s0)
80015ebc:	0407a703          	lw	a4,64(a5)
80015ec0:	fc842783          	lw	a5,-56(s0)
80015ec4:	40f707b3          	sub	a5,a4,a5
80015ec8:	fec42703          	lw	a4,-20(s0)
80015ecc:	d8e7f6e3          	bgeu	a5,a4,80015c58 <rt_smem_alloc+0x88>
        }
    }

    return RT_NULL;
80015ed0:	00000793          	li	a5,0
}
80015ed4:	00078513          	mv	a0,a5
80015ed8:	03c12083          	lw	ra,60(sp)
80015edc:	03812403          	lw	s0,56(sp)
80015ee0:	04010113          	addi	sp,sp,64
80015ee4:	00008067          	ret

80015ee8 <rt_smem_realloc>:
 * @param newsize is the required new size.
 *
 * @return the changed memory block address.
 */
void *rt_smem_realloc(rt_smem_t m, void *rmem, rt_size_t newsize)
{
80015ee8:	fc010113          	addi	sp,sp,-64
80015eec:	02112e23          	sw	ra,60(sp)
80015ef0:	02812c23          	sw	s0,56(sp)
80015ef4:	04010413          	addi	s0,sp,64
80015ef8:	fca42623          	sw	a0,-52(s0)
80015efc:	fcb42423          	sw	a1,-56(s0)
80015f00:	fcc42223          	sw	a2,-60(s0)

    RT_ASSERT(m != RT_NULL);
    RT_ASSERT(rt_object_get_type(&m->parent) == RT_Object_Class_Memory);
    RT_ASSERT(rt_object_is_systemobject(&m->parent));

    small_mem = (struct rt_small_mem *)m;
80015f04:	fcc42783          	lw	a5,-52(s0)
80015f08:	fef42623          	sw	a5,-20(s0)
    /* alignment size */
    newsize = RT_ALIGN(newsize, RT_ALIGN_SIZE);
80015f0c:	fc442783          	lw	a5,-60(s0)
80015f10:	00378793          	addi	a5,a5,3
80015f14:	ffc7f793          	andi	a5,a5,-4
80015f18:	fcf42223          	sw	a5,-60(s0)
    if (newsize > small_mem->mem_size_aligned)
80015f1c:	fec42783          	lw	a5,-20(s0)
80015f20:	0407a783          	lw	a5,64(a5)
80015f24:	fc442703          	lw	a4,-60(s0)
80015f28:	00e7f663          	bgeu	a5,a4,80015f34 <rt_smem_realloc+0x4c>
    {
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("realloc: out of memory\n"));

        return RT_NULL;
80015f2c:	00000793          	li	a5,0
80015f30:	1d40006f          	j	80016104 <rt_smem_realloc+0x21c>
    }
    else if (newsize == 0)
80015f34:	fc442783          	lw	a5,-60(s0)
80015f38:	00079a63          	bnez	a5,80015f4c <rt_smem_realloc+0x64>
    {
        rt_smem_free(rmem);
80015f3c:	fc842503          	lw	a0,-56(s0)
80015f40:	1d8000ef          	jal	ra,80016118 <rt_smem_free>
        return RT_NULL;
80015f44:	00000793          	li	a5,0
80015f48:	1bc0006f          	j	80016104 <rt_smem_realloc+0x21c>
    }

    /* allocate a new memory block */
    if (rmem == RT_NULL)
80015f4c:	fc842783          	lw	a5,-56(s0)
80015f50:	00079e63          	bnez	a5,80015f6c <rt_smem_realloc+0x84>
        return rt_smem_alloc(&small_mem->parent, newsize);
80015f54:	fec42783          	lw	a5,-20(s0)
80015f58:	fc442583          	lw	a1,-60(s0)
80015f5c:	00078513          	mv	a0,a5
80015f60:	c71ff0ef          	jal	ra,80015bd0 <rt_smem_alloc>
80015f64:	00050793          	mv	a5,a0
80015f68:	19c0006f          	j	80016104 <rt_smem_realloc+0x21c>

    RT_ASSERT((((rt_ubase_t)rmem) & (RT_ALIGN_SIZE - 1)) == 0);
    RT_ASSERT((rt_uint8_t *)rmem >= (rt_uint8_t *)small_mem->heap_ptr);
    RT_ASSERT((rt_uint8_t *)rmem < (rt_uint8_t *)small_mem->heap_end);

    mem = (struct rt_small_mem_item *)((rt_uint8_t *)rmem - SIZEOF_STRUCT_MEM);
80015f6c:	fc842783          	lw	a5,-56(s0)
80015f70:	ff078793          	addi	a5,a5,-16
80015f74:	fef42423          	sw	a5,-24(s0)

    /* current memory block size */
    ptr = (rt_uint8_t *)mem - small_mem->heap_ptr;
80015f78:	fec42783          	lw	a5,-20(s0)
80015f7c:	0347a783          	lw	a5,52(a5)
80015f80:	fe842703          	lw	a4,-24(s0)
80015f84:	40f707b3          	sub	a5,a4,a5
80015f88:	fef42223          	sw	a5,-28(s0)
    size = mem->next - ptr - SIZEOF_STRUCT_MEM;
80015f8c:	fe842783          	lw	a5,-24(s0)
80015f90:	0047a703          	lw	a4,4(a5)
80015f94:	fe442783          	lw	a5,-28(s0)
80015f98:	40f707b3          	sub	a5,a4,a5
80015f9c:	ff078793          	addi	a5,a5,-16
80015fa0:	fef42023          	sw	a5,-32(s0)
    if (size == newsize)
80015fa4:	fe042703          	lw	a4,-32(s0)
80015fa8:	fc442783          	lw	a5,-60(s0)
80015fac:	00f71663          	bne	a4,a5,80015fb8 <rt_smem_realloc+0xd0>
    {
        /* the size is the same as */
        return rmem;
80015fb0:	fc842783          	lw	a5,-56(s0)
80015fb4:	1500006f          	j	80016104 <rt_smem_realloc+0x21c>
    }

    if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE < size)
80015fb8:	fc442783          	lw	a5,-60(s0)
80015fbc:	01c78793          	addi	a5,a5,28
80015fc0:	fe042703          	lw	a4,-32(s0)
80015fc4:	0ee7fc63          	bgeu	a5,a4,800160bc <rt_smem_realloc+0x1d4>
    {
        /* split memory block */
        small_mem->parent.used -= (size - newsize);
80015fc8:	fec42783          	lw	a5,-20(s0)
80015fcc:	02c7a703          	lw	a4,44(a5)
80015fd0:	fc442683          	lw	a3,-60(s0)
80015fd4:	fe042783          	lw	a5,-32(s0)
80015fd8:	40f687b3          	sub	a5,a3,a5
80015fdc:	00f70733          	add	a4,a4,a5
80015fe0:	fec42783          	lw	a5,-20(s0)
80015fe4:	02e7a623          	sw	a4,44(a5)

        ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
80015fe8:	fe442703          	lw	a4,-28(s0)
80015fec:	fc442783          	lw	a5,-60(s0)
80015ff0:	00f707b3          	add	a5,a4,a5
80015ff4:	01078793          	addi	a5,a5,16
80015ff8:	fcf42c23          	sw	a5,-40(s0)
        mem2 = (struct rt_small_mem_item *)&small_mem->heap_ptr[ptr2];
80015ffc:	fec42783          	lw	a5,-20(s0)
80016000:	0347a703          	lw	a4,52(a5)
80016004:	fd842783          	lw	a5,-40(s0)
80016008:	00f707b3          	add	a5,a4,a5
8001600c:	fcf42a23          	sw	a5,-44(s0)
        mem2->pool_ptr = MEM_FREED();
80016010:	fec42783          	lw	a5,-20(s0)
80016014:	ffe7f713          	andi	a4,a5,-2
80016018:	fd442783          	lw	a5,-44(s0)
8001601c:	00e7a023          	sw	a4,0(a5)
        mem2->next = mem->next;
80016020:	fe842783          	lw	a5,-24(s0)
80016024:	0047a703          	lw	a4,4(a5)
80016028:	fd442783          	lw	a5,-44(s0)
8001602c:	00e7a223          	sw	a4,4(a5)
        mem2->prev = ptr;
80016030:	fd442783          	lw	a5,-44(s0)
80016034:	fe442703          	lw	a4,-28(s0)
80016038:	00e7a423          	sw	a4,8(a5)
#ifdef RT_USING_MEMTRACE
        rt_smem_setname(mem2, "    ");
8001603c:	00011597          	auipc	a1,0x11
80016040:	5ac58593          	addi	a1,a1,1452 # 800275e8 <raise+0x19f4>
80016044:	fd442503          	lw	a0,-44(s0)
80016048:	f74ff0ef          	jal	ra,800157bc <rt_smem_setname>
#endif /* RT_USING_MEMTRACE */
        mem->next = ptr2;
8001604c:	fe842783          	lw	a5,-24(s0)
80016050:	fd842703          	lw	a4,-40(s0)
80016054:	00e7a223          	sw	a4,4(a5)
        if (mem2->next != small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM)
80016058:	fd442783          	lw	a5,-44(s0)
8001605c:	0047a703          	lw	a4,4(a5)
80016060:	fec42783          	lw	a5,-20(s0)
80016064:	0407a783          	lw	a5,64(a5)
80016068:	01078793          	addi	a5,a5,16
8001606c:	02f70063          	beq	a4,a5,8001608c <rt_smem_realloc+0x1a4>
        {
            ((struct rt_small_mem_item *)&small_mem->heap_ptr[mem2->next])->prev = ptr2;
80016070:	fec42783          	lw	a5,-20(s0)
80016074:	0347a703          	lw	a4,52(a5)
80016078:	fd442783          	lw	a5,-44(s0)
8001607c:	0047a783          	lw	a5,4(a5)
80016080:	00f707b3          	add	a5,a4,a5
80016084:	fd842703          	lw	a4,-40(s0)
80016088:	00e7a423          	sw	a4,8(a5)
        }

        if (mem2 < small_mem->lfree)
8001608c:	fec42783          	lw	a5,-20(s0)
80016090:	03c7a783          	lw	a5,60(a5)
80016094:	fd442703          	lw	a4,-44(s0)
80016098:	00f77863          	bgeu	a4,a5,800160a8 <rt_smem_realloc+0x1c0>
        {
            /* the splited struct is now the lowest */
            small_mem->lfree = mem2;
8001609c:	fec42783          	lw	a5,-20(s0)
800160a0:	fd442703          	lw	a4,-44(s0)
800160a4:	02e7ae23          	sw	a4,60(a5)
        }

        plug_holes(small_mem, mem2);
800160a8:	fd442583          	lw	a1,-44(s0)
800160ac:	fec42503          	lw	a0,-20(s0)
800160b0:	fc0ff0ef          	jal	ra,80015870 <plug_holes>

        return rmem;
800160b4:	fc842783          	lw	a5,-56(s0)
800160b8:	04c0006f          	j	80016104 <rt_smem_realloc+0x21c>
    }

    /* expand memory */
    nmem = rt_smem_alloc(&small_mem->parent, newsize);
800160bc:	fec42783          	lw	a5,-20(s0)
800160c0:	fc442583          	lw	a1,-60(s0)
800160c4:	00078513          	mv	a0,a5
800160c8:	b09ff0ef          	jal	ra,80015bd0 <rt_smem_alloc>
800160cc:	fca42e23          	sw	a0,-36(s0)
    if (nmem != RT_NULL) /* check memory */
800160d0:	fdc42783          	lw	a5,-36(s0)
800160d4:	02078663          	beqz	a5,80016100 <rt_smem_realloc+0x218>
    {
        rt_memcpy(nmem, rmem, size < newsize ? size : newsize);
800160d8:	fe042703          	lw	a4,-32(s0)
800160dc:	fc442783          	lw	a5,-60(s0)
800160e0:	00f77463          	bgeu	a4,a5,800160e8 <rt_smem_realloc+0x200>
800160e4:	00070793          	mv	a5,a4
800160e8:	00078613          	mv	a2,a5
800160ec:	fc842583          	lw	a1,-56(s0)
800160f0:	fdc42503          	lw	a0,-36(s0)
800160f4:	cf5fd0ef          	jal	ra,80013de8 <rt_memcpy>
        rt_smem_free(rmem);
800160f8:	fc842503          	lw	a0,-56(s0)
800160fc:	01c000ef          	jal	ra,80016118 <rt_smem_free>
    }

    return nmem;
80016100:	fdc42783          	lw	a5,-36(s0)
}
80016104:	00078513          	mv	a0,a5
80016108:	03c12083          	lw	ra,60(sp)
8001610c:	03812403          	lw	s0,56(sp)
80016110:	04010113          	addi	sp,sp,64
80016114:	00008067          	ret

80016118 <rt_smem_free>:
 *        rt_mem_alloc. The released memory block is taken back to system heap.
 *
 * @param rmem the address of memory which will be released.
 */
void rt_smem_free(void *rmem)
{
80016118:	fd010113          	addi	sp,sp,-48
8001611c:	02112623          	sw	ra,44(sp)
80016120:	02812423          	sw	s0,40(sp)
80016124:	03010413          	addi	s0,sp,48
80016128:	fca42e23          	sw	a0,-36(s0)
    struct rt_small_mem_item *mem;
    struct rt_small_mem *small_mem;

    if (rmem == RT_NULL)
8001612c:	fdc42783          	lw	a5,-36(s0)
80016130:	0a078063          	beqz	a5,800161d0 <rt_smem_free+0xb8>
        return;

    RT_ASSERT((((rt_ubase_t)rmem) & (RT_ALIGN_SIZE - 1)) == 0);

    /* Get the corresponding struct rt_small_mem_item ... */
    mem = (struct rt_small_mem_item *)((rt_uint8_t *)rmem - SIZEOF_STRUCT_MEM);
80016134:	fdc42783          	lw	a5,-36(s0)
80016138:	ff078793          	addi	a5,a5,-16
8001613c:	fef42623          	sw	a5,-20(s0)
    /* ... which has to be in a used state ... */
    small_mem = MEM_POOL(mem);
80016140:	fec42783          	lw	a5,-20(s0)
80016144:	0007a783          	lw	a5,0(a5)
80016148:	ffe7f793          	andi	a5,a5,-2
8001614c:	fef42423          	sw	a5,-24(s0)
                 ("release memory 0x%x, size: %d\n",
                  (rt_ubase_t)rmem,
                  (rt_ubase_t)(mem->next - ((rt_uint8_t *)mem - small_mem->heap_ptr))));

    /* ... and is now unused. */
    mem->pool_ptr = MEM_FREED();
80016150:	fe842783          	lw	a5,-24(s0)
80016154:	ffe7f713          	andi	a4,a5,-2
80016158:	fec42783          	lw	a5,-20(s0)
8001615c:	00e7a023          	sw	a4,0(a5)
#ifdef RT_USING_MEMTRACE
    rt_smem_setname(mem, "    ");
80016160:	00011597          	auipc	a1,0x11
80016164:	48858593          	addi	a1,a1,1160 # 800275e8 <raise+0x19f4>
80016168:	fec42503          	lw	a0,-20(s0)
8001616c:	e50ff0ef          	jal	ra,800157bc <rt_smem_setname>
#endif /* RT_USING_MEMTRACE */

    if (mem < small_mem->lfree)
80016170:	fe842783          	lw	a5,-24(s0)
80016174:	03c7a783          	lw	a5,60(a5)
80016178:	fec42703          	lw	a4,-20(s0)
8001617c:	00f77863          	bgeu	a4,a5,8001618c <rt_smem_free+0x74>
    {
        /* the newly freed struct is now the lowest */
        small_mem->lfree = mem;
80016180:	fe842783          	lw	a5,-24(s0)
80016184:	fec42703          	lw	a4,-20(s0)
80016188:	02e7ae23          	sw	a4,60(a5)
    }

    small_mem->parent.used -= (mem->next - ((rt_uint8_t *)mem - small_mem->heap_ptr));
8001618c:	fe842783          	lw	a5,-24(s0)
80016190:	02c7a703          	lw	a4,44(a5)
80016194:	fe842783          	lw	a5,-24(s0)
80016198:	0347a783          	lw	a5,52(a5)
8001619c:	fec42683          	lw	a3,-20(s0)
800161a0:	40f687b3          	sub	a5,a3,a5
800161a4:	00078693          	mv	a3,a5
800161a8:	fec42783          	lw	a5,-20(s0)
800161ac:	0047a783          	lw	a5,4(a5)
800161b0:	40f687b3          	sub	a5,a3,a5
800161b4:	00f70733          	add	a4,a4,a5
800161b8:	fe842783          	lw	a5,-24(s0)
800161bc:	02e7a623          	sw	a4,44(a5)

    /* finally, see if prev or next are free also */
    plug_holes(small_mem, mem);
800161c0:	fec42583          	lw	a1,-20(s0)
800161c4:	fe842503          	lw	a0,-24(s0)
800161c8:	ea8ff0ef          	jal	ra,80015870 <plug_holes>
800161cc:	0080006f          	j	800161d4 <rt_smem_free+0xbc>
        return;
800161d0:	00000013          	nop
}
800161d4:	02c12083          	lw	ra,44(sp)
800161d8:	02812403          	lw	s0,40(sp)
800161dc:	03010113          	addi	sp,sp,48
800161e0:	00008067          	ret

800161e4 <memcheck>:
#ifdef RT_USING_FINSH
#include <finsh.h>

#ifdef RT_USING_MEMTRACE
int memcheck(int argc, char *argv[])
{
800161e4:	fc010113          	addi	sp,sp,-64
800161e8:	02112e23          	sw	ra,60(sp)
800161ec:	02812c23          	sw	s0,56(sp)
800161f0:	04010413          	addi	s0,sp,64
800161f4:	fca42623          	sw	a0,-52(s0)
800161f8:	fcb42423          	sw	a1,-56(s0)
    struct rt_object_information *information;
    struct rt_list_node *node;
    struct rt_object *object;
    char *name;

    name = argc > 1 ? argv[1] : RT_NULL;
800161fc:	fcc42703          	lw	a4,-52(s0)
80016200:	00100793          	li	a5,1
80016204:	00e7d863          	bge	a5,a4,80016214 <memcheck+0x30>
80016208:	fc842783          	lw	a5,-56(s0)
8001620c:	0047a783          	lw	a5,4(a5)
80016210:	0080006f          	j	80016218 <memcheck+0x34>
80016214:	00000793          	li	a5,0
80016218:	fef42223          	sw	a5,-28(s0)
    level = rt_hw_interrupt_disable();
8001621c:	e85e90ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80016220:	fea42023          	sw	a0,-32(s0)
    /* get mem object */
    information = rt_object_get_information(RT_Object_Class_Memory);
80016224:	00c00513          	li	a0,12
80016228:	548000ef          	jal	ra,80016770 <rt_object_get_information>
8001622c:	fca42e23          	sw	a0,-36(s0)
    for (node = information->object_list.next;
80016230:	fdc42783          	lw	a5,-36(s0)
80016234:	0047a783          	lw	a5,4(a5)
80016238:	fef42423          	sw	a5,-24(s0)
8001623c:	0d00006f          	j	8001630c <memcheck+0x128>
         node != &(information->object_list);
         node  = node->next)
    {
        object = rt_list_entry(node, struct rt_object, list);
80016240:	fe842783          	lw	a5,-24(s0)
80016244:	fe878793          	addi	a5,a5,-24
80016248:	fcf42c23          	sw	a5,-40(s0)
        /* find the specified object */
        if (name != RT_NULL && rt_strncmp(name, object->name, RT_NAME_MAX) != 0)
8001624c:	fe442783          	lw	a5,-28(s0)
80016250:	02078063          	beqz	a5,80016270 <memcheck+0x8c>
80016254:	fd842783          	lw	a5,-40(s0)
80016258:	01400613          	li	a2,20
8001625c:	00078593          	mv	a1,a5
80016260:	fe442503          	lw	a0,-28(s0)
80016264:	eadfd0ef          	jal	ra,80014110 <rt_strncmp>
80016268:	00050793          	mv	a5,a0
8001626c:	08079863          	bnez	a5,800162fc <memcheck+0x118>
            continue;
        /* mem object */
        m = (struct rt_small_mem *)object;
80016270:	fd842783          	lw	a5,-40(s0)
80016274:	fcf42a23          	sw	a5,-44(s0)
        /* check mem */
        for (mem = (struct rt_small_mem_item *)m->heap_ptr; mem != m->heap_end; mem = (struct rt_small_mem_item *)&m->heap_ptr[mem->next])
80016278:	fd442783          	lw	a5,-44(s0)
8001627c:	0347a783          	lw	a5,52(a5)
80016280:	fef42623          	sw	a5,-20(s0)
80016284:	0640006f          	j	800162e8 <memcheck+0x104>
        {
            position = (rt_ubase_t)mem - (rt_ubase_t)m->heap_ptr;
80016288:	fec42783          	lw	a5,-20(s0)
8001628c:	fd442703          	lw	a4,-44(s0)
80016290:	03472703          	lw	a4,52(a4)
80016294:	40e787b3          	sub	a5,a5,a4
80016298:	fcf42823          	sw	a5,-48(s0)
            if (position < 0) goto __exit;
8001629c:	fd042783          	lw	a5,-48(s0)
800162a0:	0807c663          	bltz	a5,8001632c <memcheck+0x148>
            if (position > (int)m->mem_size_aligned) goto __exit;
800162a4:	fd442783          	lw	a5,-44(s0)
800162a8:	0407a783          	lw	a5,64(a5)
800162ac:	00078713          	mv	a4,a5
800162b0:	fd042783          	lw	a5,-48(s0)
800162b4:	08f74063          	blt	a4,a5,80016334 <memcheck+0x150>
            if (MEM_POOL(mem) != m) goto __exit;
800162b8:	fec42783          	lw	a5,-20(s0)
800162bc:	0007a783          	lw	a5,0(a5)
800162c0:	ffe7f793          	andi	a5,a5,-2
800162c4:	00078713          	mv	a4,a5
800162c8:	fd442783          	lw	a5,-44(s0)
800162cc:	06e79863          	bne	a5,a4,8001633c <memcheck+0x158>
        for (mem = (struct rt_small_mem_item *)m->heap_ptr; mem != m->heap_end; mem = (struct rt_small_mem_item *)&m->heap_ptr[mem->next])
800162d0:	fd442783          	lw	a5,-44(s0)
800162d4:	0347a703          	lw	a4,52(a5)
800162d8:	fec42783          	lw	a5,-20(s0)
800162dc:	0047a783          	lw	a5,4(a5)
800162e0:	00f707b3          	add	a5,a4,a5
800162e4:	fef42623          	sw	a5,-20(s0)
800162e8:	fd442783          	lw	a5,-44(s0)
800162ec:	0387a783          	lw	a5,56(a5)
800162f0:	fec42703          	lw	a4,-20(s0)
800162f4:	f8f71ae3          	bne	a4,a5,80016288 <memcheck+0xa4>
800162f8:	0080006f          	j	80016300 <memcheck+0x11c>
            continue;
800162fc:	00000013          	nop
         node  = node->next)
80016300:	fe842783          	lw	a5,-24(s0)
80016304:	0007a783          	lw	a5,0(a5)
80016308:	fef42423          	sw	a5,-24(s0)
         node != &(information->object_list);
8001630c:	fdc42783          	lw	a5,-36(s0)
80016310:	00478793          	addi	a5,a5,4
80016314:	fe842703          	lw	a4,-24(s0)
80016318:	f2f714e3          	bne	a4,a5,80016240 <memcheck+0x5c>
        }
    }
    rt_hw_interrupt_enable(level);
8001631c:	fe042503          	lw	a0,-32(s0)
80016320:	d89e90ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    return 0;
80016324:	00000793          	li	a5,0
80016328:	0900006f          	j	800163b8 <memcheck+0x1d4>
            if (position < 0) goto __exit;
8001632c:	00000013          	nop
80016330:	0100006f          	j	80016340 <memcheck+0x15c>
            if (position > (int)m->mem_size_aligned) goto __exit;
80016334:	00000013          	nop
80016338:	0080006f          	j	80016340 <memcheck+0x15c>
            if (MEM_POOL(mem) != m) goto __exit;
8001633c:	00000013          	nop
__exit:
    rt_kprintf("Memory block wrong:\n");
80016340:	00011517          	auipc	a0,0x11
80016344:	2b850513          	addi	a0,a0,696 # 800275f8 <raise+0x1a04>
80016348:	ee1fe0ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("   name: %s\n", m->parent.parent.name);
8001634c:	fd442783          	lw	a5,-44(s0)
80016350:	00078593          	mv	a1,a5
80016354:	00011517          	auipc	a0,0x11
80016358:	2bc50513          	addi	a0,a0,700 # 80027610 <raise+0x1a1c>
8001635c:	ecdfe0ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("address: 0x%08x\n", mem);
80016360:	fec42583          	lw	a1,-20(s0)
80016364:	00011517          	auipc	a0,0x11
80016368:	2bc50513          	addi	a0,a0,700 # 80027620 <raise+0x1a2c>
8001636c:	ebdfe0ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("   pool: 0x%04x\n", mem->pool_ptr);
80016370:	fec42783          	lw	a5,-20(s0)
80016374:	0007a783          	lw	a5,0(a5)
80016378:	00078593          	mv	a1,a5
8001637c:	00011517          	auipc	a0,0x11
80016380:	2b850513          	addi	a0,a0,696 # 80027634 <raise+0x1a40>
80016384:	ea5fe0ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("   size: %d\n", mem->next - position - SIZEOF_STRUCT_MEM);
80016388:	fec42783          	lw	a5,-20(s0)
8001638c:	0047a703          	lw	a4,4(a5)
80016390:	fd042783          	lw	a5,-48(s0)
80016394:	40f707b3          	sub	a5,a4,a5
80016398:	ff078793          	addi	a5,a5,-16
8001639c:	00078593          	mv	a1,a5
800163a0:	00011517          	auipc	a0,0x11
800163a4:	2a850513          	addi	a0,a0,680 # 80027648 <raise+0x1a54>
800163a8:	e81fe0ef          	jal	ra,80015228 <rt_kprintf>
    rt_hw_interrupt_enable(level);
800163ac:	fe042503          	lw	a0,-32(s0)
800163b0:	cf9e90ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    return 0;
800163b4:	00000793          	li	a5,0
}
800163b8:	00078513          	mv	a0,a5
800163bc:	03c12083          	lw	ra,60(sp)
800163c0:	03812403          	lw	s0,56(sp)
800163c4:	04010113          	addi	sp,sp,64
800163c8:	00008067          	ret

800163cc <memtrace>:
MSH_CMD_EXPORT(memcheck, check memory data);

int memtrace(int argc, char **argv)
{
800163cc:	fc010113          	addi	sp,sp,-64
800163d0:	02112e23          	sw	ra,60(sp)
800163d4:	02812c23          	sw	s0,56(sp)
800163d8:	04010413          	addi	s0,sp,64
800163dc:	fca42623          	sw	a0,-52(s0)
800163e0:	fcb42423          	sw	a1,-56(s0)
    struct rt_object_information *information;
    struct rt_list_node *node;
    struct rt_object *object;
    char *name;

    name = argc > 1 ? argv[1] : RT_NULL;
800163e4:	fcc42703          	lw	a4,-52(s0)
800163e8:	00100793          	li	a5,1
800163ec:	00e7d863          	bge	a5,a4,800163fc <memtrace+0x30>
800163f0:	fc842783          	lw	a5,-56(s0)
800163f4:	0047a783          	lw	a5,4(a5)
800163f8:	0080006f          	j	80016400 <memtrace+0x34>
800163fc:	00000793          	li	a5,0
80016400:	fef42223          	sw	a5,-28(s0)
    /* get mem object */
    information = rt_object_get_information(RT_Object_Class_Memory);
80016404:	00c00513          	li	a0,12
80016408:	368000ef          	jal	ra,80016770 <rt_object_get_information>
8001640c:	fea42023          	sw	a0,-32(s0)
    for (node = information->object_list.next;
80016410:	fe042783          	lw	a5,-32(s0)
80016414:	0047a783          	lw	a5,4(a5)
80016418:	fef42423          	sw	a5,-24(s0)
8001641c:	26c0006f          	j	80016688 <memtrace+0x2bc>
         node != &(information->object_list);
         node  = node->next)
    {
        object = rt_list_entry(node, struct rt_object, list);
80016420:	fe842783          	lw	a5,-24(s0)
80016424:	fe878793          	addi	a5,a5,-24
80016428:	fcf42e23          	sw	a5,-36(s0)
        /* find the specified object */
        if (name != RT_NULL && rt_strncmp(name, object->name, RT_NAME_MAX) != 0)
8001642c:	fe442783          	lw	a5,-28(s0)
80016430:	02078063          	beqz	a5,80016450 <memtrace+0x84>
80016434:	fdc42783          	lw	a5,-36(s0)
80016438:	01400613          	li	a2,20
8001643c:	00078593          	mv	a1,a5
80016440:	fe442503          	lw	a0,-28(s0)
80016444:	ccdfd0ef          	jal	ra,80014110 <rt_strncmp>
80016448:	00050793          	mv	a5,a0
8001644c:	22079663          	bnez	a5,80016678 <memtrace+0x2ac>
            continue;
        /* mem object */
        m = (struct rt_small_mem *)object;
80016450:	fdc42783          	lw	a5,-36(s0)
80016454:	fcf42c23          	sw	a5,-40(s0)
        /* show memory information */
        rt_kprintf("\nmemory heap address:\n");
80016458:	00011517          	auipc	a0,0x11
8001645c:	20050513          	addi	a0,a0,512 # 80027658 <raise+0x1a64>
80016460:	dc9fe0ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("name    : %s\n", m->parent.parent.name);
80016464:	fd842783          	lw	a5,-40(s0)
80016468:	00078593          	mv	a1,a5
8001646c:	00011517          	auipc	a0,0x11
80016470:	20450513          	addi	a0,a0,516 # 80027670 <raise+0x1a7c>
80016474:	db5fe0ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("total   : 0x%d\n", m->parent.total);
80016478:	fd842783          	lw	a5,-40(s0)
8001647c:	0287a783          	lw	a5,40(a5)
80016480:	00078593          	mv	a1,a5
80016484:	00011517          	auipc	a0,0x11
80016488:	1fc50513          	addi	a0,a0,508 # 80027680 <raise+0x1a8c>
8001648c:	d9dfe0ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("used    : 0x%d\n", m->parent.used);
80016490:	fd842783          	lw	a5,-40(s0)
80016494:	02c7a783          	lw	a5,44(a5)
80016498:	00078593          	mv	a1,a5
8001649c:	00011517          	auipc	a0,0x11
800164a0:	1f450513          	addi	a0,a0,500 # 80027690 <raise+0x1a9c>
800164a4:	d85fe0ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("max_used: 0x%d\n", m->parent.max);
800164a8:	fd842783          	lw	a5,-40(s0)
800164ac:	0307a783          	lw	a5,48(a5)
800164b0:	00078593          	mv	a1,a5
800164b4:	00011517          	auipc	a0,0x11
800164b8:	1ec50513          	addi	a0,a0,492 # 800276a0 <raise+0x1aac>
800164bc:	d6dfe0ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("heap_ptr: 0x%08x\n", m->heap_ptr);
800164c0:	fd842783          	lw	a5,-40(s0)
800164c4:	0347a783          	lw	a5,52(a5)
800164c8:	00078593          	mv	a1,a5
800164cc:	00011517          	auipc	a0,0x11
800164d0:	1e450513          	addi	a0,a0,484 # 800276b0 <raise+0x1abc>
800164d4:	d55fe0ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("lfree   : 0x%08x\n", m->lfree);
800164d8:	fd842783          	lw	a5,-40(s0)
800164dc:	03c7a783          	lw	a5,60(a5)
800164e0:	00078593          	mv	a1,a5
800164e4:	00011517          	auipc	a0,0x11
800164e8:	1e050513          	addi	a0,a0,480 # 800276c4 <raise+0x1ad0>
800164ec:	d3dfe0ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("heap_end: 0x%08x\n", m->heap_end);
800164f0:	fd842783          	lw	a5,-40(s0)
800164f4:	0387a783          	lw	a5,56(a5)
800164f8:	00078593          	mv	a1,a5
800164fc:	00011517          	auipc	a0,0x11
80016500:	1dc50513          	addi	a0,a0,476 # 800276d8 <raise+0x1ae4>
80016504:	d25fe0ef          	jal	ra,80015228 <rt_kprintf>
        rt_kprintf("\n--memory item information --\n");
80016508:	00011517          	auipc	a0,0x11
8001650c:	1e450513          	addi	a0,a0,484 # 800276ec <raise+0x1af8>
80016510:	d19fe0ef          	jal	ra,80015228 <rt_kprintf>
        for (mem = (struct rt_small_mem_item *)m->heap_ptr; mem != m->heap_end; mem = (struct rt_small_mem_item *)&m->heap_ptr[mem->next])
80016514:	fd842783          	lw	a5,-40(s0)
80016518:	0347a783          	lw	a5,52(a5)
8001651c:	fef42623          	sw	a5,-20(s0)
80016520:	1440006f          	j	80016664 <memtrace+0x298>
        {
            int size = MEM_SIZE(m, mem);
80016524:	fec42783          	lw	a5,-20(s0)
80016528:	0047a703          	lw	a4,4(a5)
8001652c:	fd842783          	lw	a5,-40(s0)
80016530:	0347a783          	lw	a5,52(a5)
80016534:	00078693          	mv	a3,a5
80016538:	fec42783          	lw	a5,-20(s0)
8001653c:	40f687b3          	sub	a5,a3,a5
80016540:	00f707b3          	add	a5,a4,a5
80016544:	ff078793          	addi	a5,a5,-16
80016548:	fcf42a23          	sw	a5,-44(s0)

            rt_kprintf("[0x%08x - ", mem);
8001654c:	fec42583          	lw	a1,-20(s0)
80016550:	00011517          	auipc	a0,0x11
80016554:	1bc50513          	addi	a0,a0,444 # 8002770c <raise+0x1b18>
80016558:	cd1fe0ef          	jal	ra,80015228 <rt_kprintf>
            if (size < 1024)
8001655c:	fd442703          	lw	a4,-44(s0)
80016560:	3ff00793          	li	a5,1023
80016564:	00e7cc63          	blt	a5,a4,8001657c <memtrace+0x1b0>
                rt_kprintf("%5d", size);
80016568:	fd442583          	lw	a1,-44(s0)
8001656c:	00011517          	auipc	a0,0x11
80016570:	1ac50513          	addi	a0,a0,428 # 80027718 <raise+0x1b24>
80016574:	cb5fe0ef          	jal	ra,80015228 <rt_kprintf>
80016578:	0640006f          	j	800165dc <memtrace+0x210>
            else if (size < 1024 * 1024)
8001657c:	fd442703          	lw	a4,-44(s0)
80016580:	001007b7          	lui	a5,0x100
80016584:	02f75663          	bge	a4,a5,800165b0 <memtrace+0x1e4>
                rt_kprintf("%4dK", size / 1024);
80016588:	fd442783          	lw	a5,-44(s0)
8001658c:	41f7d713          	srai	a4,a5,0x1f
80016590:	3ff77713          	andi	a4,a4,1023
80016594:	00f707b3          	add	a5,a4,a5
80016598:	40a7d793          	srai	a5,a5,0xa
8001659c:	00078593          	mv	a1,a5
800165a0:	00011517          	auipc	a0,0x11
800165a4:	17c50513          	addi	a0,a0,380 # 8002771c <raise+0x1b28>
800165a8:	c81fe0ef          	jal	ra,80015228 <rt_kprintf>
800165ac:	0300006f          	j	800165dc <memtrace+0x210>
            else
                rt_kprintf("%4dM", size / (1024 * 1024));
800165b0:	fd442783          	lw	a5,-44(s0)
800165b4:	41f7d693          	srai	a3,a5,0x1f
800165b8:	00100737          	lui	a4,0x100
800165bc:	fff70713          	addi	a4,a4,-1 # fffff <__STACKSIZE__+0xfbfff>
800165c0:	00e6f733          	and	a4,a3,a4
800165c4:	00f707b3          	add	a5,a4,a5
800165c8:	4147d793          	srai	a5,a5,0x14
800165cc:	00078593          	mv	a1,a5
800165d0:	00011517          	auipc	a0,0x11
800165d4:	15450513          	addi	a0,a0,340 # 80027724 <raise+0x1b30>
800165d8:	c51fe0ef          	jal	ra,80015228 <rt_kprintf>

            rt_kprintf("] %c%c%c%c", mem->thread[0], mem->thread[1], mem->thread[2], mem->thread[3]);
800165dc:	fec42783          	lw	a5,-20(s0)
800165e0:	00c7c783          	lbu	a5,12(a5) # 10000c <__STACKSIZE__+0xfc00c>
800165e4:	00078593          	mv	a1,a5
800165e8:	fec42783          	lw	a5,-20(s0)
800165ec:	00d7c783          	lbu	a5,13(a5)
800165f0:	00078613          	mv	a2,a5
800165f4:	fec42783          	lw	a5,-20(s0)
800165f8:	00e7c783          	lbu	a5,14(a5)
800165fc:	00078693          	mv	a3,a5
80016600:	fec42783          	lw	a5,-20(s0)
80016604:	00f7c783          	lbu	a5,15(a5)
80016608:	00078713          	mv	a4,a5
8001660c:	00011517          	auipc	a0,0x11
80016610:	12050513          	addi	a0,a0,288 # 8002772c <raise+0x1b38>
80016614:	c15fe0ef          	jal	ra,80015228 <rt_kprintf>
            if (MEM_POOL(mem) != m)
80016618:	fec42783          	lw	a5,-20(s0)
8001661c:	0007a783          	lw	a5,0(a5)
80016620:	ffe7f793          	andi	a5,a5,-2
80016624:	00078713          	mv	a4,a5
80016628:	fd842783          	lw	a5,-40(s0)
8001662c:	00e78a63          	beq	a5,a4,80016640 <memtrace+0x274>
                rt_kprintf(": ***\n");
80016630:	00011517          	auipc	a0,0x11
80016634:	10850513          	addi	a0,a0,264 # 80027738 <raise+0x1b44>
80016638:	bf1fe0ef          	jal	ra,80015228 <rt_kprintf>
8001663c:	0100006f          	j	8001664c <memtrace+0x280>
            else
                rt_kprintf("\n");
80016640:	00011517          	auipc	a0,0x11
80016644:	10050513          	addi	a0,a0,256 # 80027740 <raise+0x1b4c>
80016648:	be1fe0ef          	jal	ra,80015228 <rt_kprintf>
        for (mem = (struct rt_small_mem_item *)m->heap_ptr; mem != m->heap_end; mem = (struct rt_small_mem_item *)&m->heap_ptr[mem->next])
8001664c:	fd842783          	lw	a5,-40(s0)
80016650:	0347a703          	lw	a4,52(a5)
80016654:	fec42783          	lw	a5,-20(s0)
80016658:	0047a783          	lw	a5,4(a5)
8001665c:	00f707b3          	add	a5,a4,a5
80016660:	fef42623          	sw	a5,-20(s0)
80016664:	fd842783          	lw	a5,-40(s0)
80016668:	0387a783          	lw	a5,56(a5)
8001666c:	fec42703          	lw	a4,-20(s0)
80016670:	eaf71ae3          	bne	a4,a5,80016524 <memtrace+0x158>
80016674:	0080006f          	j	8001667c <memtrace+0x2b0>
            continue;
80016678:	00000013          	nop
         node  = node->next)
8001667c:	fe842783          	lw	a5,-24(s0)
80016680:	0007a783          	lw	a5,0(a5)
80016684:	fef42423          	sw	a5,-24(s0)
         node != &(information->object_list);
80016688:	fe042783          	lw	a5,-32(s0)
8001668c:	00478793          	addi	a5,a5,4
80016690:	fe842703          	lw	a4,-24(s0)
80016694:	d8f716e3          	bne	a4,a5,80016420 <memtrace+0x54>
        }
    }
    return 0;
80016698:	00000793          	li	a5,0
}
8001669c:	00078513          	mv	a0,a5
800166a0:	03c12083          	lw	ra,60(sp)
800166a4:	03812403          	lw	s0,56(sp)
800166a8:	04010113          	addi	sp,sp,64
800166ac:	00008067          	ret

800166b0 <rt_list_insert_after>:
    RT_Object_Info_Device,                             /**< The object is a device */
#endif
    RT_Object_Info_Timer,                              /**< The object is a timer. */
#ifdef RT_USING_MODULE
    RT_Object_Info_Module,                             /**< The object is a module. */
#endif
800166b0:	fe010113          	addi	sp,sp,-32
800166b4:	00812e23          	sw	s0,28(sp)
800166b8:	02010413          	addi	s0,sp,32
800166bc:	fea42623          	sw	a0,-20(s0)
800166c0:	feb42423          	sw	a1,-24(s0)
#ifdef RT_USING_HEAP
800166c4:	fec42783          	lw	a5,-20(s0)
800166c8:	0007a783          	lw	a5,0(a5)
800166cc:	fe842703          	lw	a4,-24(s0)
800166d0:	00e7a223          	sw	a4,4(a5)
    RT_Object_Info_Memory,                            /**< The object is a memory. */
800166d4:	fec42783          	lw	a5,-20(s0)
800166d8:	0007a703          	lw	a4,0(a5)
800166dc:	fe842783          	lw	a5,-24(s0)
800166e0:	00e7a023          	sw	a4,0(a5)
#endif
    RT_Object_Info_Unknown,                            /**< The object is unknown. */
800166e4:	fec42783          	lw	a5,-20(s0)
800166e8:	fe842703          	lw	a4,-24(s0)
800166ec:	00e7a023          	sw	a4,0(a5)
};
800166f0:	fe842783          	lw	a5,-24(s0)
800166f4:	fec42703          	lw	a4,-20(s0)
800166f8:	00e7a223          	sw	a4,4(a5)

800166fc:	00000013          	nop
80016700:	01c12403          	lw	s0,28(sp)
80016704:	02010113          	addi	sp,sp,32
80016708:	00008067          	ret

8001670c <rt_list_remove>:
    /* initialize object container - event */
    {RT_Object_Class_Event, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Event), sizeof(struct rt_event)},
#endif
#ifdef RT_USING_MAILBOX
    /* initialize object container - mailbox */
    {RT_Object_Class_MailBox, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MailBox), sizeof(struct rt_mailbox)},
8001670c:	fe010113          	addi	sp,sp,-32
80016710:	00812e23          	sw	s0,28(sp)
80016714:	02010413          	addi	s0,sp,32
80016718:	fea42623          	sw	a0,-20(s0)
#endif
8001671c:	fec42783          	lw	a5,-20(s0)
80016720:	0007a783          	lw	a5,0(a5)
80016724:	fec42703          	lw	a4,-20(s0)
80016728:	00472703          	lw	a4,4(a4)
8001672c:	00e7a223          	sw	a4,4(a5)
#ifdef RT_USING_MESSAGEQUEUE
80016730:	fec42783          	lw	a5,-20(s0)
80016734:	0047a783          	lw	a5,4(a5)
80016738:	fec42703          	lw	a4,-20(s0)
8001673c:	00072703          	lw	a4,0(a4)
80016740:	00e7a023          	sw	a4,0(a5)
    /* initialize object container - message queue */
    {RT_Object_Class_MessageQueue, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MessageQueue), sizeof(struct rt_messagequeue)},
80016744:	fec42783          	lw	a5,-20(s0)
80016748:	fec42703          	lw	a4,-20(s0)
8001674c:	00e7a223          	sw	a4,4(a5)
80016750:	fec42783          	lw	a5,-20(s0)
80016754:	0047a703          	lw	a4,4(a5)
80016758:	fec42783          	lw	a5,-20(s0)
8001675c:	00e7a023          	sw	a4,0(a5)
#endif
80016760:	00000013          	nop
80016764:	01c12403          	lw	s0,28(sp)
80016768:	02010113          	addi	sp,sp,32
8001676c:	00008067          	ret

80016770 <rt_object_get_information>:
 *
 * @return the object type information or RT_NULL
 */
struct rt_object_information *
rt_object_get_information(enum rt_object_class_type type)
{
80016770:	fd010113          	addi	sp,sp,-48
80016774:	02812623          	sw	s0,44(sp)
80016778:	03010413          	addi	s0,sp,48
8001677c:	fca42e23          	sw	a0,-36(s0)
    int index;

    for (index = 0; index < RT_Object_Info_Unknown; index ++)
80016780:	fe042623          	sw	zero,-20(s0)
80016784:	0480006f          	j	800167cc <rt_object_get_information+0x5c>
        if (_object_container[index].type == type) return &_object_container[index];
80016788:	00013717          	auipc	a4,0x13
8001678c:	a4070713          	addi	a4,a4,-1472 # 800291c8 <_object_container>
80016790:	fec42783          	lw	a5,-20(s0)
80016794:	00479793          	slli	a5,a5,0x4
80016798:	00f707b3          	add	a5,a4,a5
8001679c:	0007a783          	lw	a5,0(a5)
800167a0:	fdc42703          	lw	a4,-36(s0)
800167a4:	00f71e63          	bne	a4,a5,800167c0 <rt_object_get_information+0x50>
800167a8:	fec42783          	lw	a5,-20(s0)
800167ac:	00479713          	slli	a4,a5,0x4
800167b0:	00013797          	auipc	a5,0x13
800167b4:	a1878793          	addi	a5,a5,-1512 # 800291c8 <_object_container>
800167b8:	00f707b3          	add	a5,a4,a5
800167bc:	0200006f          	j	800167dc <rt_object_get_information+0x6c>
    for (index = 0; index < RT_Object_Info_Unknown; index ++)
800167c0:	fec42783          	lw	a5,-20(s0)
800167c4:	00178793          	addi	a5,a5,1
800167c8:	fef42623          	sw	a5,-20(s0)
800167cc:	fec42703          	lw	a4,-20(s0)
800167d0:	00900793          	li	a5,9
800167d4:	fae7dae3          	bge	a5,a4,80016788 <rt_object_get_information+0x18>

    return RT_NULL;
800167d8:	00000793          	li	a5,0
}
800167dc:	00078513          	mv	a0,a5
800167e0:	02c12403          	lw	s0,44(sp)
800167e4:	03010113          	addi	sp,sp,48
800167e8:	00008067          	ret

800167ec <rt_object_init>:
 * @param name is the object name. In system, the object's name must be unique.
 */
void rt_object_init(struct rt_object         *object,
                    enum rt_object_class_type type,
                    const char               *name)
{
800167ec:	fd010113          	addi	sp,sp,-48
800167f0:	02112623          	sw	ra,44(sp)
800167f4:	02812423          	sw	s0,40(sp)
800167f8:	03010413          	addi	s0,sp,48
800167fc:	fca42e23          	sw	a0,-36(s0)
80016800:	fcb42c23          	sw	a1,-40(s0)
80016804:	fcc42a23          	sw	a2,-44(s0)
#ifdef RT_USING_MODULE
    struct rt_dlmodule *module = dlmodule_self();
#endif /* RT_USING_MODULE */

    /* get object information */
    information = rt_object_get_information(type);
80016808:	fd842503          	lw	a0,-40(s0)
8001680c:	f65ff0ef          	jal	ra,80016770 <rt_object_get_information>
80016810:	fea42623          	sw	a0,-20(s0)
    rt_exit_critical();
#endif

    /* initialize object's parameters */
    /* set object type to static */
    object->type = type | RT_Object_Class_Static;
80016814:	fd842783          	lw	a5,-40(s0)
80016818:	0ff7f793          	zext.b	a5,a5
8001681c:	f807e793          	ori	a5,a5,-128
80016820:	0ff7f713          	zext.b	a4,a5
80016824:	fdc42783          	lw	a5,-36(s0)
80016828:	00e78a23          	sb	a4,20(a5)
    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
8001682c:	fdc42783          	lw	a5,-36(s0)
80016830:	01400613          	li	a2,20
80016834:	fd442583          	lw	a1,-44(s0)
80016838:	00078513          	mv	a0,a5
8001683c:	829fd0ef          	jal	ra,80014064 <rt_strncpy>

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
80016840:	0006e797          	auipc	a5,0x6e
80016844:	81c78793          	addi	a5,a5,-2020 # 8008405c <rt_object_attach_hook>
80016848:	0007a783          	lw	a5,0(a5)
8001684c:	00078c63          	beqz	a5,80016864 <rt_object_init+0x78>
80016850:	0006e797          	auipc	a5,0x6e
80016854:	80c78793          	addi	a5,a5,-2036 # 8008405c <rt_object_attach_hook>
80016858:	0007a783          	lw	a5,0(a5)
8001685c:	fdc42503          	lw	a0,-36(s0)
80016860:	000780e7          	jalr	a5

    /* lock interrupt */
    level = rt_hw_interrupt_disable();
80016864:	83de90ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80016868:	fea42423          	sw	a0,-24(s0)
    }
    else
#endif /* RT_USING_MODULE */
    {
        /* insert object into information object list */
        rt_list_insert_after(&(information->object_list), &(object->list));
8001686c:	fec42783          	lw	a5,-20(s0)
80016870:	00478713          	addi	a4,a5,4
80016874:	fdc42783          	lw	a5,-36(s0)
80016878:	01878793          	addi	a5,a5,24
8001687c:	00078593          	mv	a1,a5
80016880:	00070513          	mv	a0,a4
80016884:	e2dff0ef          	jal	ra,800166b0 <rt_list_insert_after>
    }

    /* unlock interrupt */
    rt_hw_interrupt_enable(level);
80016888:	fe842503          	lw	a0,-24(s0)
8001688c:	81de90ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
}
80016890:	00000013          	nop
80016894:	02c12083          	lw	ra,44(sp)
80016898:	02812403          	lw	s0,40(sp)
8001689c:	03010113          	addi	sp,sp,48
800168a0:	00008067          	ret

800168a4 <rt_object_detach>:
 *        and the memory of static object is not freed.
 *
 * @param object the specified object to be detached.
 */
void rt_object_detach(rt_object_t object)
{
800168a4:	fd010113          	addi	sp,sp,-48
800168a8:	02112623          	sw	ra,44(sp)
800168ac:	02812423          	sw	s0,40(sp)
800168b0:	03010413          	addi	s0,sp,48
800168b4:	fca42e23          	sw	a0,-36(s0)
    rt_base_t level;

    /* object check */
    RT_ASSERT(object != RT_NULL);

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
800168b8:	0006d797          	auipc	a5,0x6d
800168bc:	7a878793          	addi	a5,a5,1960 # 80084060 <rt_object_detach_hook>
800168c0:	0007a783          	lw	a5,0(a5)
800168c4:	00078c63          	beqz	a5,800168dc <rt_object_detach+0x38>
800168c8:	0006d797          	auipc	a5,0x6d
800168cc:	79878793          	addi	a5,a5,1944 # 80084060 <rt_object_detach_hook>
800168d0:	0007a783          	lw	a5,0(a5)
800168d4:	fdc42503          	lw	a0,-36(s0)
800168d8:	000780e7          	jalr	a5

    /* reset object type */
    object->type = 0;
800168dc:	fdc42783          	lw	a5,-36(s0)
800168e0:	00078a23          	sb	zero,20(a5)

    /* lock interrupt */
    level = rt_hw_interrupt_disable();
800168e4:	fbce90ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
800168e8:	fea42623          	sw	a0,-20(s0)

    /* remove from old list */
    rt_list_remove(&(object->list));
800168ec:	fdc42783          	lw	a5,-36(s0)
800168f0:	01878793          	addi	a5,a5,24
800168f4:	00078513          	mv	a0,a5
800168f8:	e15ff0ef          	jal	ra,8001670c <rt_list_remove>

    /* unlock interrupt */
    rt_hw_interrupt_enable(level);
800168fc:	fec42503          	lw	a0,-20(s0)
80016900:	fa8e90ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
}
80016904:	00000013          	nop
80016908:	02c12083          	lw	ra,44(sp)
8001690c:	02812403          	lw	s0,40(sp)
80016910:	03010113          	addi	sp,sp,48
80016914:	00008067          	ret

80016918 <rt_object_allocate>:
 * @param name is the object name. In system, the object's name must be unique.
 *
 * @return object
 */
rt_object_t rt_object_allocate(enum rt_object_class_type type, const char *name)
{
80016918:	fd010113          	addi	sp,sp,-48
8001691c:	02112623          	sw	ra,44(sp)
80016920:	02812423          	sw	s0,40(sp)
80016924:	03010413          	addi	s0,sp,48
80016928:	fca42e23          	sw	a0,-36(s0)
8001692c:	fcb42c23          	sw	a1,-40(s0)
#endif /* RT_USING_MODULE */

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get object information */
    information = rt_object_get_information(type);
80016930:	fdc42503          	lw	a0,-36(s0)
80016934:	e3dff0ef          	jal	ra,80016770 <rt_object_get_information>
80016938:	fea42623          	sw	a0,-20(s0)
    RT_ASSERT(information != RT_NULL);

    object = (struct rt_object *)RT_KERNEL_MALLOC(information->object_size);
8001693c:	fec42783          	lw	a5,-20(s0)
80016940:	00c7a783          	lw	a5,12(a5)
80016944:	00078513          	mv	a0,a5
80016948:	b85fe0ef          	jal	ra,800154cc <rt_malloc>
8001694c:	fea42423          	sw	a0,-24(s0)
    if (object == RT_NULL)
80016950:	fe842783          	lw	a5,-24(s0)
80016954:	00079663          	bnez	a5,80016960 <rt_object_allocate+0x48>
    {
        /* no memory can be allocated */
        return RT_NULL;
80016958:	00000793          	li	a5,0
8001695c:	09c0006f          	j	800169f8 <rt_object_allocate+0xe0>
    }

    /* clean memory data of object */
    rt_memset(object, 0x0, information->object_size);
80016960:	fec42783          	lw	a5,-20(s0)
80016964:	00c7a783          	lw	a5,12(a5)
80016968:	00078613          	mv	a2,a5
8001696c:	00000593          	li	a1,0
80016970:	fe842503          	lw	a0,-24(s0)
80016974:	b18fd0ef          	jal	ra,80013c8c <rt_memset>

    /* initialize object's parameters */

    /* set object type */
    object->type = type;
80016978:	fdc42783          	lw	a5,-36(s0)
8001697c:	0ff7f713          	zext.b	a4,a5
80016980:	fe842783          	lw	a5,-24(s0)
80016984:	00e78a23          	sb	a4,20(a5)

    /* set object flag */
    object->flag = 0;
80016988:	fe842783          	lw	a5,-24(s0)
8001698c:	00078aa3          	sb	zero,21(a5)

    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
80016990:	fe842783          	lw	a5,-24(s0)
80016994:	01400613          	li	a2,20
80016998:	fd842583          	lw	a1,-40(s0)
8001699c:	00078513          	mv	a0,a5
800169a0:	ec4fd0ef          	jal	ra,80014064 <rt_strncpy>

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
800169a4:	0006d797          	auipc	a5,0x6d
800169a8:	6b878793          	addi	a5,a5,1720 # 8008405c <rt_object_attach_hook>
800169ac:	0007a783          	lw	a5,0(a5)
800169b0:	00078c63          	beqz	a5,800169c8 <rt_object_allocate+0xb0>
800169b4:	0006d797          	auipc	a5,0x6d
800169b8:	6a878793          	addi	a5,a5,1704 # 8008405c <rt_object_attach_hook>
800169bc:	0007a783          	lw	a5,0(a5)
800169c0:	fe842503          	lw	a0,-24(s0)
800169c4:	000780e7          	jalr	a5

    /* lock interrupt */
    level = rt_hw_interrupt_disable();
800169c8:	ed8e90ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
800169cc:	fea42223          	sw	a0,-28(s0)
    }
    else
#endif /* RT_USING_MODULE */
    {
        /* insert object into information object list */
        rt_list_insert_after(&(information->object_list), &(object->list));
800169d0:	fec42783          	lw	a5,-20(s0)
800169d4:	00478713          	addi	a4,a5,4
800169d8:	fe842783          	lw	a5,-24(s0)
800169dc:	01878793          	addi	a5,a5,24
800169e0:	00078593          	mv	a1,a5
800169e4:	00070513          	mv	a0,a4
800169e8:	cc9ff0ef          	jal	ra,800166b0 <rt_list_insert_after>
    }

    /* unlock interrupt */
    rt_hw_interrupt_enable(level);
800169ec:	fe442503          	lw	a0,-28(s0)
800169f0:	eb8e90ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    /* return object */
    return object;
800169f4:	fe842783          	lw	a5,-24(s0)
}
800169f8:	00078513          	mv	a0,a5
800169fc:	02c12083          	lw	ra,44(sp)
80016a00:	02812403          	lw	s0,40(sp)
80016a04:	03010113          	addi	sp,sp,48
80016a08:	00008067          	ret

80016a0c <rt_object_delete>:
 * @brief This function will delete an object and release object memory.
 *
 * @param object is the specified object to be deleted.
 */
void rt_object_delete(rt_object_t object)
{
80016a0c:	fd010113          	addi	sp,sp,-48
80016a10:	02112623          	sw	ra,44(sp)
80016a14:	02812423          	sw	s0,40(sp)
80016a18:	03010413          	addi	s0,sp,48
80016a1c:	fca42e23          	sw	a0,-36(s0)

    /* object check */
    RT_ASSERT(object != RT_NULL);
    RT_ASSERT(!(object->type & RT_Object_Class_Static));

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
80016a20:	0006d797          	auipc	a5,0x6d
80016a24:	64078793          	addi	a5,a5,1600 # 80084060 <rt_object_detach_hook>
80016a28:	0007a783          	lw	a5,0(a5)
80016a2c:	00078c63          	beqz	a5,80016a44 <rt_object_delete+0x38>
80016a30:	0006d797          	auipc	a5,0x6d
80016a34:	63078793          	addi	a5,a5,1584 # 80084060 <rt_object_detach_hook>
80016a38:	0007a783          	lw	a5,0(a5)
80016a3c:	fdc42503          	lw	a0,-36(s0)
80016a40:	000780e7          	jalr	a5

    /* reset object type */
    object->type = RT_Object_Class_Null;
80016a44:	fdc42783          	lw	a5,-36(s0)
80016a48:	00078a23          	sb	zero,20(a5)

    /* lock interrupt */
    level = rt_hw_interrupt_disable();
80016a4c:	e54e90ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80016a50:	fea42623          	sw	a0,-20(s0)

    /* remove from old list */
    rt_list_remove(&(object->list));
80016a54:	fdc42783          	lw	a5,-36(s0)
80016a58:	01878793          	addi	a5,a5,24
80016a5c:	00078513          	mv	a0,a5
80016a60:	cadff0ef          	jal	ra,8001670c <rt_list_remove>

    /* unlock interrupt */
    rt_hw_interrupt_enable(level);
80016a64:	fec42503          	lw	a0,-20(s0)
80016a68:	e40e90ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    /* free the memory of object */
    RT_KERNEL_FREE(object);
80016a6c:	fdc42503          	lw	a0,-36(s0)
80016a70:	ba9fe0ef          	jal	ra,80015618 <rt_free>
}
80016a74:	00000013          	nop
80016a78:	02c12083          	lw	ra,44(sp)
80016a7c:	02812403          	lw	s0,40(sp)
80016a80:	03010113          	addi	sp,sp,48
80016a84:	00008067          	ret

80016a88 <rt_object_is_systemobject>:
 * @param object is the specified object to be judged.
 *
 * @return RT_TRUE if a system object, RT_FALSE for others.
 */
rt_bool_t rt_object_is_systemobject(rt_object_t object)
{
80016a88:	fe010113          	addi	sp,sp,-32
80016a8c:	00812e23          	sw	s0,28(sp)
80016a90:	02010413          	addi	s0,sp,32
80016a94:	fea42623          	sw	a0,-20(s0)
    /* object check */
    RT_ASSERT(object != RT_NULL);

    if (object->type & RT_Object_Class_Static)
80016a98:	fec42783          	lw	a5,-20(s0)
80016a9c:	0147c783          	lbu	a5,20(a5)
80016aa0:	01879793          	slli	a5,a5,0x18
80016aa4:	4187d793          	srai	a5,a5,0x18
80016aa8:	0007d663          	bgez	a5,80016ab4 <rt_object_is_systemobject+0x2c>
        return RT_TRUE;
80016aac:	00100793          	li	a5,1
80016ab0:	0080006f          	j	80016ab8 <rt_object_is_systemobject+0x30>

    return RT_FALSE;
80016ab4:	00000793          	li	a5,0
}
80016ab8:	00078513          	mv	a0,a5
80016abc:	01c12403          	lw	s0,28(sp)
80016ac0:	02010113          	addi	sp,sp,32
80016ac4:	00008067          	ret

80016ac8 <rt_object_find>:
 * in object container.
 *
 * @note this function shall not be invoked in interrupt status.
 */
rt_object_t rt_object_find(const char *name, rt_uint8_t type)
{
80016ac8:	fd010113          	addi	sp,sp,-48
80016acc:	02112623          	sw	ra,44(sp)
80016ad0:	02812423          	sw	s0,40(sp)
80016ad4:	03010413          	addi	s0,sp,48
80016ad8:	fca42e23          	sw	a0,-36(s0)
80016adc:	00058793          	mv	a5,a1
80016ae0:	fcf40da3          	sb	a5,-37(s0)
    struct rt_object *object = RT_NULL;
80016ae4:	fe042423          	sw	zero,-24(s0)
    struct rt_list_node *node = RT_NULL;
80016ae8:	fe042623          	sw	zero,-20(s0)
    struct rt_object_information *information = RT_NULL;
80016aec:	fe042223          	sw	zero,-28(s0)

    information = rt_object_get_information((enum rt_object_class_type)type);
80016af0:	fdb44783          	lbu	a5,-37(s0)
80016af4:	00078513          	mv	a0,a5
80016af8:	c79ff0ef          	jal	ra,80016770 <rt_object_get_information>
80016afc:	fea42223          	sw	a0,-28(s0)

    /* parameter check */
    if ((name == RT_NULL) || (information == RT_NULL)) return RT_NULL;
80016b00:	fdc42783          	lw	a5,-36(s0)
80016b04:	00078663          	beqz	a5,80016b10 <rt_object_find+0x48>
80016b08:	fe442783          	lw	a5,-28(s0)
80016b0c:	00079663          	bnez	a5,80016b18 <rt_object_find+0x50>
80016b10:	00000793          	li	a5,0
80016b14:	0700006f          	j	80016b84 <rt_object_find+0xbc>

    /* which is invoke in interrupt status */
    RT_DEBUG_NOT_IN_INTERRUPT;

    /* enter critical */
    rt_enter_critical();
80016b18:	011000ef          	jal	ra,80017328 <rt_enter_critical>

    /* try to find object */
    rt_list_for_each(node, &(information->object_list))
80016b1c:	fe442783          	lw	a5,-28(s0)
80016b20:	0047a783          	lw	a5,4(a5)
80016b24:	fef42623          	sw	a5,-20(s0)
80016b28:	0440006f          	j	80016b6c <rt_object_find+0xa4>
    {
        object = rt_list_entry(node, struct rt_object, list);
80016b2c:	fec42783          	lw	a5,-20(s0)
80016b30:	fe878793          	addi	a5,a5,-24
80016b34:	fef42423          	sw	a5,-24(s0)
        if (rt_strncmp(object->name, name, RT_NAME_MAX) == 0)
80016b38:	fe842783          	lw	a5,-24(s0)
80016b3c:	01400613          	li	a2,20
80016b40:	fdc42583          	lw	a1,-36(s0)
80016b44:	00078513          	mv	a0,a5
80016b48:	dc8fd0ef          	jal	ra,80014110 <rt_strncmp>
80016b4c:	00050793          	mv	a5,a0
80016b50:	00079863          	bnez	a5,80016b60 <rt_object_find+0x98>
        {
            /* leave critical */
            rt_exit_critical();
80016b54:	03d000ef          	jal	ra,80017390 <rt_exit_critical>

            return object;
80016b58:	fe842783          	lw	a5,-24(s0)
80016b5c:	0280006f          	j	80016b84 <rt_object_find+0xbc>
    rt_list_for_each(node, &(information->object_list))
80016b60:	fec42783          	lw	a5,-20(s0)
80016b64:	0007a783          	lw	a5,0(a5)
80016b68:	fef42623          	sw	a5,-20(s0)
80016b6c:	fe442783          	lw	a5,-28(s0)
80016b70:	00478793          	addi	a5,a5,4
80016b74:	fec42703          	lw	a4,-20(s0)
80016b78:	faf71ae3          	bne	a4,a5,80016b2c <rt_object_find+0x64>
        }
    }

    /* leave critical */
    rt_exit_critical();
80016b7c:	015000ef          	jal	ra,80017390 <rt_exit_critical>

    return RT_NULL;
80016b80:	00000793          	li	a5,0
}
80016b84:	00078513          	mv	a0,a5
80016b88:	02c12083          	lw	ra,44(sp)
80016b8c:	02812403          	lw	s0,40(sp)
80016b90:	03010113          	addi	sp,sp,48
80016b94:	00008067          	ret

80016b98 <rt_list_init>:
#ifndef RT_USING_SMP
extern volatile rt_uint8_t rt_interrupt_nest;
static rt_int16_t rt_scheduler_lock_nest;
struct rt_thread *rt_current_thread = RT_NULL;
rt_uint8_t rt_current_priority;
#endif /* RT_USING_SMP */
80016b98:	fe010113          	addi	sp,sp,-32
80016b9c:	00812e23          	sw	s0,28(sp)
80016ba0:	02010413          	addi	s0,sp,32
80016ba4:	fea42623          	sw	a0,-20(s0)

80016ba8:	fec42783          	lw	a5,-20(s0)
80016bac:	fec42703          	lw	a4,-20(s0)
80016bb0:	00e7a223          	sw	a4,4(a5)
80016bb4:	fec42783          	lw	a5,-20(s0)
80016bb8:	0047a703          	lw	a4,4(a5)
80016bbc:	fec42783          	lw	a5,-20(s0)
80016bc0:	00e7a023          	sw	a4,0(a5)
#ifndef __on_rt_scheduler_hook
80016bc4:	00000013          	nop
80016bc8:	01c12403          	lw	s0,28(sp)
80016bcc:	02010113          	addi	sp,sp,32
80016bd0:	00008067          	ret

80016bd4 <rt_list_insert_after>:
    #define __on_rt_scheduler_switch_hook(tid)      __ON_HOOK_ARGS(rt_scheduler_switch_hook, (tid))
#endif

#if defined(RT_USING_HOOK) && defined(RT_HOOK_USING_FUNC_PTR)
static void (*rt_scheduler_hook)(struct rt_thread *from, struct rt_thread *to);
static void (*rt_scheduler_switch_hook)(struct rt_thread *tid);
80016bd4:	fe010113          	addi	sp,sp,-32
80016bd8:	00812e23          	sw	s0,28(sp)
80016bdc:	02010413          	addi	s0,sp,32
80016be0:	fea42623          	sw	a0,-20(s0)
80016be4:	feb42423          	sw	a1,-24(s0)

80016be8:	fec42783          	lw	a5,-20(s0)
80016bec:	0007a783          	lw	a5,0(a5)
80016bf0:	fe842703          	lw	a4,-24(s0)
80016bf4:	00e7a223          	sw	a4,4(a5)
/**
80016bf8:	fec42783          	lw	a5,-20(s0)
80016bfc:	0007a703          	lw	a4,0(a5)
80016c00:	fe842783          	lw	a5,-24(s0)
80016c04:	00e7a023          	sw	a4,0(a5)
 * @addtogroup Hook
 */
80016c08:	fec42783          	lw	a5,-20(s0)
80016c0c:	fe842703          	lw	a4,-24(s0)
80016c10:	00e7a023          	sw	a4,0(a5)

80016c14:	fe842783          	lw	a5,-24(s0)
80016c18:	fec42703          	lw	a4,-20(s0)
80016c1c:	00e7a223          	sw	a4,4(a5)
/**@{*/
80016c20:	00000013          	nop
80016c24:	01c12403          	lw	s0,28(sp)
80016c28:	02010113          	addi	sp,sp,32
80016c2c:	00008067          	ret

80016c30 <rt_list_insert_before>:
 *        switch happens.
 *
 * @param hook is the hook function.
 */
void rt_scheduler_sethook(void (*hook)(struct rt_thread *from, struct rt_thread *to))
{
80016c30:	fe010113          	addi	sp,sp,-32
80016c34:	00812e23          	sw	s0,28(sp)
80016c38:	02010413          	addi	s0,sp,32
80016c3c:	fea42623          	sw	a0,-20(s0)
80016c40:	feb42423          	sw	a1,-24(s0)
    rt_scheduler_hook = hook;
80016c44:	fec42783          	lw	a5,-20(s0)
80016c48:	0047a783          	lw	a5,4(a5)
80016c4c:	fe842703          	lw	a4,-24(s0)
80016c50:	00e7a023          	sw	a4,0(a5)
}
80016c54:	fec42783          	lw	a5,-20(s0)
80016c58:	0047a703          	lw	a4,4(a5)
80016c5c:	fe842783          	lw	a5,-24(s0)
80016c60:	00e7a223          	sw	a4,4(a5)

/**
80016c64:	fec42783          	lw	a5,-20(s0)
80016c68:	fe842703          	lw	a4,-24(s0)
80016c6c:	00e7a223          	sw	a4,4(a5)
 * @brief This function will set a hook function, which will be invoked when context
80016c70:	fe842783          	lw	a5,-24(s0)
80016c74:	fec42703          	lw	a4,-20(s0)
80016c78:	00e7a023          	sw	a4,0(a5)
 *        switch happens.
80016c7c:	00000013          	nop
80016c80:	01c12403          	lw	s0,28(sp)
80016c84:	02010113          	addi	sp,sp,32
80016c88:	00008067          	ret

80016c8c <rt_list_remove>:
 * @param hook is the hook function.
 */
void rt_scheduler_switch_sethook(void (*hook)(struct rt_thread *tid))
{
    rt_scheduler_switch_hook = hook;
}
80016c8c:	fe010113          	addi	sp,sp,-32
80016c90:	00812e23          	sw	s0,28(sp)
80016c94:	02010413          	addi	s0,sp,32
80016c98:	fea42623          	sw	a0,-20(s0)

80016c9c:	fec42783          	lw	a5,-20(s0)
80016ca0:	0007a783          	lw	a5,0(a5)
80016ca4:	fec42703          	lw	a4,-20(s0)
80016ca8:	00472703          	lw	a4,4(a4)
80016cac:	00e7a223          	sw	a4,4(a5)
/**@}*/
80016cb0:	fec42783          	lw	a5,-20(s0)
80016cb4:	0047a783          	lw	a5,4(a5)
80016cb8:	fec42703          	lw	a4,-20(s0)
80016cbc:	00072703          	lw	a4,0(a4)
80016cc0:	00e7a023          	sw	a4,0(a5)
#endif /* RT_USING_HOOK */

80016cc4:	fec42783          	lw	a5,-20(s0)
80016cc8:	fec42703          	lw	a4,-20(s0)
80016ccc:	00e7a223          	sw	a4,4(a5)
80016cd0:	fec42783          	lw	a5,-20(s0)
80016cd4:	0047a703          	lw	a4,4(a5)
80016cd8:	fec42783          	lw	a5,-20(s0)
80016cdc:	00e7a023          	sw	a4,0(a5)
#ifdef RT_USING_OVERFLOW_CHECK
80016ce0:	00000013          	nop
80016ce4:	01c12403          	lw	s0,28(sp)
80016ce8:	02010113          	addi	sp,sp,32
80016cec:	00008067          	ret

80016cf0 <rt_list_isempty>:
{
    RT_ASSERT(thread != RT_NULL);

#ifdef ARCH_CPU_STACK_GROWS_UPWARD
    if (*((rt_uint8_t *)((rt_ubase_t)thread->stack_addr + thread->stack_size - 1)) != '#' ||
#else
80016cf0:	fe010113          	addi	sp,sp,-32
80016cf4:	00812e23          	sw	s0,28(sp)
80016cf8:	02010413          	addi	s0,sp,32
80016cfc:	fea42623          	sw	a0,-20(s0)
    if (*((rt_uint8_t *)thread->stack_addr) != '#' ||
80016d00:	fec42783          	lw	a5,-20(s0)
80016d04:	0007a783          	lw	a5,0(a5)
80016d08:	fec42703          	lw	a4,-20(s0)
80016d0c:	40f707b3          	sub	a5,a4,a5
80016d10:	0017b793          	seqz	a5,a5
80016d14:	0ff7f793          	zext.b	a5,a5
#endif /* ARCH_CPU_STACK_GROWS_UPWARD */
80016d18:	00078513          	mv	a0,a5
80016d1c:	01c12403          	lw	s0,28(sp)
80016d20:	02010113          	addi	sp,sp,32
80016d24:	00008067          	ret

80016d28 <_scheduler_get_highest_priority_thread>:

    return highest_priority_thread;
}
#else
static struct rt_thread* _scheduler_get_highest_priority_thread(rt_ubase_t *highest_prio)
{
80016d28:	fd010113          	addi	sp,sp,-48
80016d2c:	02112623          	sw	ra,44(sp)
80016d30:	02812423          	sw	s0,40(sp)
80016d34:	03010413          	addi	s0,sp,48
80016d38:	fca42e23          	sw	a0,-36(s0)
    rt_ubase_t number;

    number = __rt_ffs(rt_thread_ready_priority_group) - 1;
    highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
#else
    highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
80016d3c:	0006d797          	auipc	a5,0x6d
80016d40:	33478793          	addi	a5,a5,820 # 80084070 <rt_thread_ready_priority_group>
80016d44:	0007a783          	lw	a5,0(a5)
80016d48:	00078513          	mv	a0,a5
80016d4c:	98dfe0ef          	jal	ra,800156d8 <__rt_ffs>
80016d50:	00050793          	mv	a5,a0
80016d54:	fff78793          	addi	a5,a5,-1
80016d58:	fef42623          	sw	a5,-20(s0)
#endif /* RT_THREAD_PRIORITY_MAX > 32 */

    /* get highest ready priority thread */
    highest_priority_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
80016d5c:	0006f717          	auipc	a4,0x6f
80016d60:	7c470713          	addi	a4,a4,1988 # 80086520 <rt_thread_priority_table>
80016d64:	fec42783          	lw	a5,-20(s0)
80016d68:	00379793          	slli	a5,a5,0x3
80016d6c:	00f707b3          	add	a5,a4,a5
80016d70:	0007a783          	lw	a5,0(a5)
80016d74:	fe078793          	addi	a5,a5,-32
80016d78:	fef42423          	sw	a5,-24(s0)
                              struct rt_thread,
                              tlist);

    *highest_prio = highest_ready_priority;
80016d7c:	fdc42783          	lw	a5,-36(s0)
80016d80:	fec42703          	lw	a4,-20(s0)
80016d84:	00e7a023          	sw	a4,0(a5)

    return highest_priority_thread;
80016d88:	fe842783          	lw	a5,-24(s0)
}
80016d8c:	00078513          	mv	a0,a5
80016d90:	02c12083          	lw	ra,44(sp)
80016d94:	02812403          	lw	s0,40(sp)
80016d98:	03010113          	addi	sp,sp,48
80016d9c:	00008067          	ret

80016da0 <rt_system_scheduler_init>:

/**
 * @brief This function will initialize the system scheduler.
 */
void rt_system_scheduler_init(void)
{
80016da0:	fe010113          	addi	sp,sp,-32
80016da4:	00112e23          	sw	ra,28(sp)
80016da8:	00812c23          	sw	s0,24(sp)
80016dac:	02010413          	addi	s0,sp,32
    int cpu;
#endif /* RT_USING_SMP */
    rt_base_t offset;

#ifndef RT_USING_SMP
    rt_scheduler_lock_nest = 0;
80016db0:	0006d797          	auipc	a5,0x6d
80016db4:	2c478793          	addi	a5,a5,708 # 80084074 <rt_scheduler_lock_nest>
80016db8:	00079023          	sh	zero,0(a5)
#endif /* RT_USING_SMP */

    RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("start scheduler: max priority 0x%02x\n",
                                      RT_THREAD_PRIORITY_MAX));

    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
80016dbc:	fe042623          	sw	zero,-20(s0)
80016dc0:	02c0006f          	j	80016dec <rt_system_scheduler_init+0x4c>
    {
        rt_list_init(&rt_thread_priority_table[offset]);
80016dc4:	fec42783          	lw	a5,-20(s0)
80016dc8:	00379713          	slli	a4,a5,0x3
80016dcc:	0006f797          	auipc	a5,0x6f
80016dd0:	75478793          	addi	a5,a5,1876 # 80086520 <rt_thread_priority_table>
80016dd4:	00f707b3          	add	a5,a4,a5
80016dd8:	00078513          	mv	a0,a5
80016ddc:	dbdff0ef          	jal	ra,80016b98 <rt_list_init>
    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
80016de0:	fec42783          	lw	a5,-20(s0)
80016de4:	00178793          	addi	a5,a5,1
80016de8:	fef42623          	sw	a5,-20(s0)
80016dec:	fec42703          	lw	a4,-20(s0)
80016df0:	01f00793          	li	a5,31
80016df4:	fce7d8e3          	bge	a5,a4,80016dc4 <rt_system_scheduler_init+0x24>
#endif /* RT_THREAD_PRIORITY_MAX > 32 */
    }
#endif /* RT_USING_SMP */

    /* initialize ready priority group */
    rt_thread_ready_priority_group = 0;
80016df8:	0006d797          	auipc	a5,0x6d
80016dfc:	27878793          	addi	a5,a5,632 # 80084070 <rt_thread_ready_priority_group>
80016e00:	0007a023          	sw	zero,0(a5)

#if RT_THREAD_PRIORITY_MAX > 32
    /* initialize ready table */
    rt_memset(rt_thread_ready_table, 0, sizeof(rt_thread_ready_table));
#endif /* RT_THREAD_PRIORITY_MAX > 32 */
}
80016e04:	00000013          	nop
80016e08:	01c12083          	lw	ra,28(sp)
80016e0c:	01812403          	lw	s0,24(sp)
80016e10:	02010113          	addi	sp,sp,32
80016e14:	00008067          	ret

80016e18 <rt_system_scheduler_start>:
/**
 * @brief This function will startup the scheduler. It will select one thread
 *        with the highest priority level, then switch to it.
 */
void rt_system_scheduler_start(void)
{
80016e18:	fe010113          	addi	sp,sp,-32
80016e1c:	00112e23          	sw	ra,28(sp)
80016e20:	00812c23          	sw	s0,24(sp)
80016e24:	02010413          	addi	s0,sp,32
    struct rt_thread *to_thread;
    rt_ubase_t highest_ready_priority;

    to_thread = _scheduler_get_highest_priority_thread(&highest_ready_priority);
80016e28:	fe840793          	addi	a5,s0,-24
80016e2c:	00078513          	mv	a0,a5
80016e30:	ef9ff0ef          	jal	ra,80016d28 <_scheduler_get_highest_priority_thread>
80016e34:	fea42623          	sw	a0,-20(s0)

#ifdef RT_USING_SMP
    to_thread->oncpu = rt_hw_cpu_id();
#else
    rt_current_thread = to_thread;
80016e38:	0006d797          	auipc	a5,0x6d
80016e3c:	24078793          	addi	a5,a5,576 # 80084078 <rt_current_thread>
80016e40:	fec42703          	lw	a4,-20(s0)
80016e44:	00e7a023          	sw	a4,0(a5)
#endif /* RT_USING_SMP */

    rt_schedule_remove_thread(to_thread);
80016e48:	fec42503          	lw	a0,-20(s0)
80016e4c:	444000ef          	jal	ra,80017290 <rt_schedule_remove_thread>
    to_thread->stat = RT_THREAD_RUNNING;
80016e50:	fec42783          	lw	a5,-20(s0)
80016e54:	00300713          	li	a4,3
80016e58:	04e78023          	sb	a4,64(a5)

    /* switch to new thread */
#ifdef RT_USING_SMP
    rt_hw_context_switch_to((rt_ubase_t)&to_thread->sp, to_thread);
#else
    rt_hw_context_switch_to((rt_ubase_t)&to_thread->sp);
80016e5c:	fec42783          	lw	a5,-20(s0)
80016e60:	02878793          	addi	a5,a5,40
80016e64:	00078513          	mv	a0,a5
80016e68:	a48e90ef          	jal	ra,800000b0 <rt_hw_context_switch_to>
#endif /* RT_USING_SMP */

    /* never come back */
}
80016e6c:	00000013          	nop
80016e70:	01c12083          	lw	ra,28(sp)
80016e74:	01812403          	lw	s0,24(sp)
80016e78:	02010113          	addi	sp,sp,32
80016e7c:	00008067          	ret

80016e80 <rt_schedule>:
/**
 * @brief This function will perform scheduling once. It will select one thread
 *        with the highest priority, and switch to it immediately.
 */
void rt_schedule(void)
{
80016e80:	fd010113          	addi	sp,sp,-48
80016e84:	02112623          	sw	ra,44(sp)
80016e88:	02812423          	sw	s0,40(sp)
80016e8c:	03010413          	addi	s0,sp,48
    rt_base_t level;
    struct rt_thread *to_thread;
    struct rt_thread *from_thread;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
80016e90:	a10e90ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80016e94:	fea42223          	sw	a0,-28(s0)

    /* check the scheduler is enabled or not */
    if (rt_scheduler_lock_nest == 0)
80016e98:	0006d797          	auipc	a5,0x6d
80016e9c:	1dc78793          	addi	a5,a5,476 # 80084074 <rt_scheduler_lock_nest>
80016ea0:	00079783          	lh	a5,0(a5)
80016ea4:	28079463          	bnez	a5,8001712c <rt_schedule+0x2ac>
    {
        rt_ubase_t highest_ready_priority;

        if (rt_thread_ready_priority_group != 0)
80016ea8:	0006d797          	auipc	a5,0x6d
80016eac:	1c878793          	addi	a5,a5,456 # 80084070 <rt_thread_ready_priority_group>
80016eb0:	0007a783          	lw	a5,0(a5)
80016eb4:	26078c63          	beqz	a5,8001712c <rt_schedule+0x2ac>
        {
            /* need_insert_from_thread: need to insert from_thread to ready queue */
            int need_insert_from_thread = 0;
80016eb8:	fe042423          	sw	zero,-24(s0)

            to_thread = _scheduler_get_highest_priority_thread(&highest_ready_priority);
80016ebc:	fdc40793          	addi	a5,s0,-36
80016ec0:	00078513          	mv	a0,a5
80016ec4:	e65ff0ef          	jal	ra,80016d28 <_scheduler_get_highest_priority_thread>
80016ec8:	fea42623          	sw	a0,-20(s0)

            if ((rt_current_thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_RUNNING)
80016ecc:	0006d797          	auipc	a5,0x6d
80016ed0:	1ac78793          	addi	a5,a5,428 # 80084078 <rt_current_thread>
80016ed4:	0007a783          	lw	a5,0(a5)
80016ed8:	0407c783          	lbu	a5,64(a5)
80016edc:	0077f713          	andi	a4,a5,7
80016ee0:	00300793          	li	a5,3
80016ee4:	0af71663          	bne	a4,a5,80016f90 <rt_schedule+0x110>
            {
                if (rt_current_thread->current_priority < highest_ready_priority)
80016ee8:	0006d797          	auipc	a5,0x6d
80016eec:	19078793          	addi	a5,a5,400 # 80084078 <rt_current_thread>
80016ef0:	0007a783          	lw	a5,0(a5)
80016ef4:	0417c783          	lbu	a5,65(a5)
80016ef8:	00078713          	mv	a4,a5
80016efc:	fdc42783          	lw	a5,-36(s0)
80016f00:	00f77c63          	bgeu	a4,a5,80016f18 <rt_schedule+0x98>
                {
                    to_thread = rt_current_thread;
80016f04:	0006d797          	auipc	a5,0x6d
80016f08:	17478793          	addi	a5,a5,372 # 80084078 <rt_current_thread>
80016f0c:	0007a783          	lw	a5,0(a5)
80016f10:	fef42623          	sw	a5,-20(s0)
80016f14:	0540006f          	j	80016f68 <rt_schedule+0xe8>
                }
                else if (rt_current_thread->current_priority == highest_ready_priority && (rt_current_thread->stat & RT_THREAD_STAT_YIELD_MASK) == 0)
80016f18:	0006d797          	auipc	a5,0x6d
80016f1c:	16078793          	addi	a5,a5,352 # 80084078 <rt_current_thread>
80016f20:	0007a783          	lw	a5,0(a5)
80016f24:	0417c783          	lbu	a5,65(a5)
80016f28:	00078713          	mv	a4,a5
80016f2c:	fdc42783          	lw	a5,-36(s0)
80016f30:	02f71863          	bne	a4,a5,80016f60 <rt_schedule+0xe0>
80016f34:	0006d797          	auipc	a5,0x6d
80016f38:	14478793          	addi	a5,a5,324 # 80084078 <rt_current_thread>
80016f3c:	0007a783          	lw	a5,0(a5)
80016f40:	0407c783          	lbu	a5,64(a5)
80016f44:	0087f793          	andi	a5,a5,8
80016f48:	00079c63          	bnez	a5,80016f60 <rt_schedule+0xe0>
                {
                    to_thread = rt_current_thread;
80016f4c:	0006d797          	auipc	a5,0x6d
80016f50:	12c78793          	addi	a5,a5,300 # 80084078 <rt_current_thread>
80016f54:	0007a783          	lw	a5,0(a5)
80016f58:	fef42623          	sw	a5,-20(s0)
80016f5c:	00c0006f          	j	80016f68 <rt_schedule+0xe8>
                }
                else
                {
                    need_insert_from_thread = 1;
80016f60:	00100793          	li	a5,1
80016f64:	fef42423          	sw	a5,-24(s0)
                }
                rt_current_thread->stat &= ~RT_THREAD_STAT_YIELD_MASK;
80016f68:	0006d797          	auipc	a5,0x6d
80016f6c:	11078793          	addi	a5,a5,272 # 80084078 <rt_current_thread>
80016f70:	0007a783          	lw	a5,0(a5)
80016f74:	0407c703          	lbu	a4,64(a5)
80016f78:	0006d797          	auipc	a5,0x6d
80016f7c:	10078793          	addi	a5,a5,256 # 80084078 <rt_current_thread>
80016f80:	0007a783          	lw	a5,0(a5)
80016f84:	ff777713          	andi	a4,a4,-9
80016f88:	0ff77713          	zext.b	a4,a4
80016f8c:	04e78023          	sb	a4,64(a5)
            }

            if (to_thread != rt_current_thread)
80016f90:	0006d797          	auipc	a5,0x6d
80016f94:	0e878793          	addi	a5,a5,232 # 80084078 <rt_current_thread>
80016f98:	0007a783          	lw	a5,0(a5)
80016f9c:	fec42703          	lw	a4,-20(s0)
80016fa0:	12f70a63          	beq	a4,a5,800170d4 <rt_schedule+0x254>
            {
                /* if the destination thread is not the same as current thread */
                rt_current_priority = (rt_uint8_t)highest_ready_priority;
80016fa4:	fdc42783          	lw	a5,-36(s0)
80016fa8:	0ff7f713          	zext.b	a4,a5
80016fac:	0006d797          	auipc	a5,0x6d
80016fb0:	0d078793          	addi	a5,a5,208 # 8008407c <rt_current_priority>
80016fb4:	00e78023          	sb	a4,0(a5)
                from_thread         = rt_current_thread;
80016fb8:	0006d797          	auipc	a5,0x6d
80016fbc:	0c078793          	addi	a5,a5,192 # 80084078 <rt_current_thread>
80016fc0:	0007a783          	lw	a5,0(a5)
80016fc4:	fef42023          	sw	a5,-32(s0)
                rt_current_thread   = to_thread;
80016fc8:	0006d797          	auipc	a5,0x6d
80016fcc:	0b078793          	addi	a5,a5,176 # 80084078 <rt_current_thread>
80016fd0:	fec42703          	lw	a4,-20(s0)
80016fd4:	00e7a023          	sw	a4,0(a5)

                RT_OBJECT_HOOK_CALL(rt_scheduler_hook, (from_thread, to_thread));
80016fd8:	0006d797          	auipc	a5,0x6d
80016fdc:	0a878793          	addi	a5,a5,168 # 80084080 <rt_scheduler_hook>
80016fe0:	0007a783          	lw	a5,0(a5)
80016fe4:	00078e63          	beqz	a5,80017000 <rt_schedule+0x180>
80016fe8:	0006d797          	auipc	a5,0x6d
80016fec:	09878793          	addi	a5,a5,152 # 80084080 <rt_scheduler_hook>
80016ff0:	0007a783          	lw	a5,0(a5)
80016ff4:	fec42583          	lw	a1,-20(s0)
80016ff8:	fe042503          	lw	a0,-32(s0)
80016ffc:	000780e7          	jalr	a5

                if (need_insert_from_thread)
80017000:	fe842783          	lw	a5,-24(s0)
80017004:	00078663          	beqz	a5,80017010 <rt_schedule+0x190>
                {
                    rt_schedule_insert_thread(from_thread);
80017008:	fe042503          	lw	a0,-32(s0)
8001700c:	13c000ef          	jal	ra,80017148 <rt_schedule_insert_thread>
                }

                rt_schedule_remove_thread(to_thread);
80017010:	fec42503          	lw	a0,-20(s0)
80017014:	27c000ef          	jal	ra,80017290 <rt_schedule_remove_thread>
                to_thread->stat = RT_THREAD_RUNNING | (to_thread->stat & ~RT_THREAD_STAT_MASK);
80017018:	fec42783          	lw	a5,-20(s0)
8001701c:	0407c783          	lbu	a5,64(a5)
80017020:	01879793          	slli	a5,a5,0x18
80017024:	4187d793          	srai	a5,a5,0x18
80017028:	ff87f793          	andi	a5,a5,-8
8001702c:	01879793          	slli	a5,a5,0x18
80017030:	4187d793          	srai	a5,a5,0x18
80017034:	0037e793          	ori	a5,a5,3
80017038:	01879793          	slli	a5,a5,0x18
8001703c:	4187d793          	srai	a5,a5,0x18
80017040:	0ff7f713          	zext.b	a4,a5
80017044:	fec42783          	lw	a5,-20(s0)
80017048:	04e78023          	sb	a4,64(a5)

#ifdef RT_USING_OVERFLOW_CHECK
                _scheduler_stack_check(to_thread);
#endif /* RT_USING_OVERFLOW_CHECK */

                if (rt_interrupt_nest == 0)
8001704c:	0006d797          	auipc	a5,0x6d
80017050:	ff878793          	addi	a5,a5,-8 # 80084044 <rt_interrupt_nest>
80017054:	0007c783          	lbu	a5,0(a5)
80017058:	0ff7f793          	zext.b	a5,a5
8001705c:	04079a63          	bnez	a5,800170b0 <rt_schedule+0x230>
                {
                    extern void rt_thread_handle_sig(rt_bool_t clean_state);

                    RT_OBJECT_HOOK_CALL(rt_scheduler_switch_hook, (from_thread));
80017060:	0006d797          	auipc	a5,0x6d
80017064:	02478793          	addi	a5,a5,36 # 80084084 <rt_scheduler_switch_hook>
80017068:	0007a783          	lw	a5,0(a5)
8001706c:	00078c63          	beqz	a5,80017084 <rt_schedule+0x204>
80017070:	0006d797          	auipc	a5,0x6d
80017074:	01478793          	addi	a5,a5,20 # 80084084 <rt_scheduler_switch_hook>
80017078:	0007a783          	lw	a5,0(a5)
8001707c:	fe042503          	lw	a0,-32(s0)
80017080:	000780e7          	jalr	a5

                    rt_hw_context_switch((rt_ubase_t)&from_thread->sp,
80017084:	fe042783          	lw	a5,-32(s0)
80017088:	02878793          	addi	a5,a5,40
8001708c:	00078713          	mv	a4,a5
                            (rt_ubase_t)&to_thread->sp);
80017090:	fec42783          	lw	a5,-20(s0)
80017094:	02878793          	addi	a5,a5,40
                    rt_hw_context_switch((rt_ubase_t)&from_thread->sp,
80017098:	00078593          	mv	a1,a5
8001709c:	00070513          	mv	a0,a4
800170a0:	820e90ef          	jal	ra,800000c0 <rt_hw_context_switch>

                    /* enable interrupt */
                    rt_hw_interrupt_enable(level);
800170a4:	fe442503          	lw	a0,-28(s0)
800170a8:	800e90ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    /* enable interrupt */
    rt_hw_interrupt_enable(level);

__exit:
    return;
800170ac:	08c0006f          	j	80017138 <rt_schedule+0x2b8>
                    rt_hw_context_switch_interrupt((rt_ubase_t)&from_thread->sp,
800170b0:	fe042783          	lw	a5,-32(s0)
800170b4:	02878793          	addi	a5,a5,40
800170b8:	00078713          	mv	a4,a5
                            (rt_ubase_t)&to_thread->sp);
800170bc:	fec42783          	lw	a5,-20(s0)
800170c0:	02878793          	addi	a5,a5,40
                    rt_hw_context_switch_interrupt((rt_ubase_t)&from_thread->sp,
800170c4:	00078593          	mv	a1,a5
800170c8:	00070513          	mv	a0,a4
800170cc:	86dfa0ef          	jal	ra,80011938 <rt_hw_context_switch_interrupt>
800170d0:	05c0006f          	j	8001712c <rt_schedule+0x2ac>
                rt_schedule_remove_thread(rt_current_thread);
800170d4:	0006d797          	auipc	a5,0x6d
800170d8:	fa478793          	addi	a5,a5,-92 # 80084078 <rt_current_thread>
800170dc:	0007a783          	lw	a5,0(a5)
800170e0:	00078513          	mv	a0,a5
800170e4:	1ac000ef          	jal	ra,80017290 <rt_schedule_remove_thread>
                rt_current_thread->stat = RT_THREAD_RUNNING | (rt_current_thread->stat & ~RT_THREAD_STAT_MASK);
800170e8:	0006d797          	auipc	a5,0x6d
800170ec:	f9078793          	addi	a5,a5,-112 # 80084078 <rt_current_thread>
800170f0:	0007a783          	lw	a5,0(a5)
800170f4:	0407c783          	lbu	a5,64(a5)
800170f8:	01879793          	slli	a5,a5,0x18
800170fc:	4187d793          	srai	a5,a5,0x18
80017100:	ff87f793          	andi	a5,a5,-8
80017104:	01879793          	slli	a5,a5,0x18
80017108:	4187d793          	srai	a5,a5,0x18
8001710c:	0037e793          	ori	a5,a5,3
80017110:	01879713          	slli	a4,a5,0x18
80017114:	41875713          	srai	a4,a4,0x18
80017118:	0006d797          	auipc	a5,0x6d
8001711c:	f6078793          	addi	a5,a5,-160 # 80084078 <rt_current_thread>
80017120:	0007a783          	lw	a5,0(a5)
80017124:	0ff77713          	zext.b	a4,a4
80017128:	04e78023          	sb	a4,64(a5)
    rt_hw_interrupt_enable(level);
8001712c:	fe442503          	lw	a0,-28(s0)
80017130:	f79e80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
    return;
80017134:	00000013          	nop
}
80017138:	02c12083          	lw	ra,44(sp)
8001713c:	02812403          	lw	s0,40(sp)
80017140:	03010113          	addi	sp,sp,48
80017144:	00008067          	ret

80017148 <rt_schedule_insert_thread>:
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
}
#else
void rt_schedule_insert_thread(struct rt_thread *thread)
{
80017148:	fd010113          	addi	sp,sp,-48
8001714c:	02112623          	sw	ra,44(sp)
80017150:	02812423          	sw	s0,40(sp)
80017154:	03010413          	addi	s0,sp,48
80017158:	fca42e23          	sw	a0,-36(s0)
    rt_base_t level;

    RT_ASSERT(thread != RT_NULL);

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
8001715c:	f45e80ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80017160:	fea42623          	sw	a0,-20(s0)

    /* it's current thread, it should be RUNNING thread */
    if (thread == rt_current_thread)
80017164:	0006d797          	auipc	a5,0x6d
80017168:	f1478793          	addi	a5,a5,-236 # 80084078 <rt_current_thread>
8001716c:	0007a783          	lw	a5,0(a5)
80017170:	fdc42703          	lw	a4,-36(s0)
80017174:	02f71e63          	bne	a4,a5,800171b0 <rt_schedule_insert_thread+0x68>
    {
        thread->stat = RT_THREAD_RUNNING | (thread->stat & ~RT_THREAD_STAT_MASK);
80017178:	fdc42783          	lw	a5,-36(s0)
8001717c:	0407c783          	lbu	a5,64(a5)
80017180:	01879793          	slli	a5,a5,0x18
80017184:	4187d793          	srai	a5,a5,0x18
80017188:	ff87f793          	andi	a5,a5,-8
8001718c:	01879793          	slli	a5,a5,0x18
80017190:	4187d793          	srai	a5,a5,0x18
80017194:	0037e793          	ori	a5,a5,3
80017198:	01879793          	slli	a5,a5,0x18
8001719c:	4187d793          	srai	a5,a5,0x18
800171a0:	0ff7f713          	zext.b	a4,a5
800171a4:	fdc42783          	lw	a5,-36(s0)
800171a8:	04e78023          	sb	a4,64(a5)
        goto __exit;
800171ac:	0c80006f          	j	80017274 <rt_schedule_insert_thread+0x12c>
    }

    /* READY thread, insert to ready queue */
    thread->stat = RT_THREAD_READY | (thread->stat & ~RT_THREAD_STAT_MASK);
800171b0:	fdc42783          	lw	a5,-36(s0)
800171b4:	0407c783          	lbu	a5,64(a5)
800171b8:	01879793          	slli	a5,a5,0x18
800171bc:	4187d793          	srai	a5,a5,0x18
800171c0:	ff87f793          	andi	a5,a5,-8
800171c4:	01879793          	slli	a5,a5,0x18
800171c8:	4187d793          	srai	a5,a5,0x18
800171cc:	0017e793          	ori	a5,a5,1
800171d0:	01879793          	slli	a5,a5,0x18
800171d4:	4187d793          	srai	a5,a5,0x18
800171d8:	0ff7f713          	zext.b	a4,a5
800171dc:	fdc42783          	lw	a5,-36(s0)
800171e0:	04e78023          	sb	a4,64(a5)
    /* there is no time slices left(YIELD), inserting thread before ready list*/
    if((thread->stat & RT_THREAD_STAT_YIELD_MASK) != 0)
800171e4:	fdc42783          	lw	a5,-36(s0)
800171e8:	0407c783          	lbu	a5,64(a5)
800171ec:	0087f793          	andi	a5,a5,8
800171f0:	02078a63          	beqz	a5,80017224 <rt_schedule_insert_thread+0xdc>
    {
        rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
800171f4:	fdc42783          	lw	a5,-36(s0)
800171f8:	0417c783          	lbu	a5,65(a5)
800171fc:	00379713          	slli	a4,a5,0x3
80017200:	0006f797          	auipc	a5,0x6f
80017204:	32078793          	addi	a5,a5,800 # 80086520 <rt_thread_priority_table>
80017208:	00f70733          	add	a4,a4,a5
8001720c:	fdc42783          	lw	a5,-36(s0)
80017210:	02078793          	addi	a5,a5,32
80017214:	00078593          	mv	a1,a5
80017218:	00070513          	mv	a0,a4
8001721c:	a15ff0ef          	jal	ra,80016c30 <rt_list_insert_before>
80017220:	0300006f          	j	80017250 <rt_schedule_insert_thread+0x108>
                              &(thread->tlist));
    }
    /* there are some time slices left, inserting thread after ready list to schedule it firstly at next time*/
    else
    {
        rt_list_insert_after(&(rt_thread_priority_table[thread->current_priority]),
80017224:	fdc42783          	lw	a5,-36(s0)
80017228:	0417c783          	lbu	a5,65(a5)
8001722c:	00379713          	slli	a4,a5,0x3
80017230:	0006f797          	auipc	a5,0x6f
80017234:	2f078793          	addi	a5,a5,752 # 80086520 <rt_thread_priority_table>
80017238:	00f70733          	add	a4,a4,a5
8001723c:	fdc42783          	lw	a5,-36(s0)
80017240:	02078793          	addi	a5,a5,32
80017244:	00078593          	mv	a1,a5
80017248:	00070513          	mv	a0,a4
8001724c:	989ff0ef          	jal	ra,80016bd4 <rt_list_insert_after>

    /* set priority mask */
#if RT_THREAD_PRIORITY_MAX > 32
    rt_thread_ready_table[thread->number] |= thread->high_mask;
#endif /* RT_THREAD_PRIORITY_MAX > 32 */
    rt_thread_ready_priority_group |= thread->number_mask;
80017250:	fdc42783          	lw	a5,-36(s0)
80017254:	0447a703          	lw	a4,68(a5)
80017258:	0006d797          	auipc	a5,0x6d
8001725c:	e1878793          	addi	a5,a5,-488 # 80084070 <rt_thread_ready_priority_group>
80017260:	0007a783          	lw	a5,0(a5)
80017264:	00f76733          	or	a4,a4,a5
80017268:	0006d797          	auipc	a5,0x6d
8001726c:	e0878793          	addi	a5,a5,-504 # 80084070 <rt_thread_ready_priority_group>
80017270:	00e7a023          	sw	a4,0(a5)

__exit:
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
80017274:	fec42503          	lw	a0,-20(s0)
80017278:	e31e80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
}
8001727c:	00000013          	nop
80017280:	02c12083          	lw	ra,44(sp)
80017284:	02812403          	lw	s0,40(sp)
80017288:	03010113          	addi	sp,sp,48
8001728c:	00008067          	ret

80017290 <rt_schedule_remove_thread>:
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
}
#else
void rt_schedule_remove_thread(struct rt_thread *thread)
{
80017290:	fd010113          	addi	sp,sp,-48
80017294:	02112623          	sw	ra,44(sp)
80017298:	02812423          	sw	s0,40(sp)
8001729c:	03010413          	addi	s0,sp,48
800172a0:	fca42e23          	sw	a0,-36(s0)
    rt_base_t level;

    RT_ASSERT(thread != RT_NULL);

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
800172a4:	dfde80ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
800172a8:	fea42623          	sw	a0,-20(s0)
    RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("remove thread[%.*s], the priority: %d\n",
                                      RT_NAME_MAX, thread->name,
                                      thread->current_priority));

    /* remove thread from ready list */
    rt_list_remove(&(thread->tlist));
800172ac:	fdc42783          	lw	a5,-36(s0)
800172b0:	02078793          	addi	a5,a5,32
800172b4:	00078513          	mv	a0,a5
800172b8:	9d5ff0ef          	jal	ra,80016c8c <rt_list_remove>
    if (rt_list_isempty(&(rt_thread_priority_table[thread->current_priority])))
800172bc:	fdc42783          	lw	a5,-36(s0)
800172c0:	0417c783          	lbu	a5,65(a5)
800172c4:	00379713          	slli	a4,a5,0x3
800172c8:	0006f797          	auipc	a5,0x6f
800172cc:	25878793          	addi	a5,a5,600 # 80086520 <rt_thread_priority_table>
800172d0:	00f707b3          	add	a5,a4,a5
800172d4:	00078513          	mv	a0,a5
800172d8:	a19ff0ef          	jal	ra,80016cf0 <rt_list_isempty>
800172dc:	00050793          	mv	a5,a0
800172e0:	02078663          	beqz	a5,8001730c <rt_schedule_remove_thread+0x7c>
        if (rt_thread_ready_table[thread->number] == 0)
        {
            rt_thread_ready_priority_group &= ~thread->number_mask;
        }
#else
        rt_thread_ready_priority_group &= ~thread->number_mask;
800172e4:	fdc42783          	lw	a5,-36(s0)
800172e8:	0447a783          	lw	a5,68(a5)
800172ec:	fff7c713          	not	a4,a5
800172f0:	0006d797          	auipc	a5,0x6d
800172f4:	d8078793          	addi	a5,a5,-640 # 80084070 <rt_thread_ready_priority_group>
800172f8:	0007a783          	lw	a5,0(a5)
800172fc:	00f77733          	and	a4,a4,a5
80017300:	0006d797          	auipc	a5,0x6d
80017304:	d7078793          	addi	a5,a5,-656 # 80084070 <rt_thread_ready_priority_group>
80017308:	00e7a023          	sw	a4,0(a5)
#endif /* RT_THREAD_PRIORITY_MAX > 32 */
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
8001730c:	fec42503          	lw	a0,-20(s0)
80017310:	d99e80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
}
80017314:	00000013          	nop
80017318:	02c12083          	lw	ra,44(sp)
8001731c:	02812403          	lw	s0,40(sp)
80017320:	03010113          	addi	sp,sp,48
80017324:	00008067          	ret

80017328 <rt_enter_critical>:
    /* enable interrupt */
    rt_hw_local_irq_enable(level);
}
#else
void rt_enter_critical(void)
{
80017328:	fe010113          	addi	sp,sp,-32
8001732c:	00112e23          	sw	ra,28(sp)
80017330:	00812c23          	sw	s0,24(sp)
80017334:	02010413          	addi	s0,sp,32
    rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
80017338:	d69e80ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8001733c:	fea42623          	sw	a0,-20(s0)

    /*
     * the maximal number of nest is RT_UINT16_MAX, which is big
     * enough and does not check here
     */
    rt_scheduler_lock_nest ++;
80017340:	0006d797          	auipc	a5,0x6d
80017344:	d3478793          	addi	a5,a5,-716 # 80084074 <rt_scheduler_lock_nest>
80017348:	00079783          	lh	a5,0(a5)
8001734c:	01079793          	slli	a5,a5,0x10
80017350:	0107d793          	srli	a5,a5,0x10
80017354:	00178793          	addi	a5,a5,1
80017358:	01079793          	slli	a5,a5,0x10
8001735c:	0107d793          	srli	a5,a5,0x10
80017360:	01079713          	slli	a4,a5,0x10
80017364:	41075713          	srai	a4,a4,0x10
80017368:	0006d797          	auipc	a5,0x6d
8001736c:	d0c78793          	addi	a5,a5,-756 # 80084074 <rt_scheduler_lock_nest>
80017370:	00e79023          	sh	a4,0(a5)

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
80017374:	fec42503          	lw	a0,-20(s0)
80017378:	d31e80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
}
8001737c:	00000013          	nop
80017380:	01c12083          	lw	ra,28(sp)
80017384:	01812403          	lw	s0,24(sp)
80017388:	02010113          	addi	sp,sp,32
8001738c:	00008067          	ret

80017390 <rt_exit_critical>:
        rt_hw_local_irq_enable(level);
    }
}
#else
void rt_exit_critical(void)
{
80017390:	fe010113          	addi	sp,sp,-32
80017394:	00112e23          	sw	ra,28(sp)
80017398:	00812c23          	sw	s0,24(sp)
8001739c:	02010413          	addi	s0,sp,32
    rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
800173a0:	d01e80ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
800173a4:	fea42623          	sw	a0,-20(s0)

    rt_scheduler_lock_nest --;
800173a8:	0006d797          	auipc	a5,0x6d
800173ac:	ccc78793          	addi	a5,a5,-820 # 80084074 <rt_scheduler_lock_nest>
800173b0:	00079783          	lh	a5,0(a5)
800173b4:	01079793          	slli	a5,a5,0x10
800173b8:	0107d793          	srli	a5,a5,0x10
800173bc:	fff78793          	addi	a5,a5,-1
800173c0:	01079793          	slli	a5,a5,0x10
800173c4:	0107d793          	srli	a5,a5,0x10
800173c8:	01079713          	slli	a4,a5,0x10
800173cc:	41075713          	srai	a4,a4,0x10
800173d0:	0006d797          	auipc	a5,0x6d
800173d4:	ca478793          	addi	a5,a5,-860 # 80084074 <rt_scheduler_lock_nest>
800173d8:	00e79023          	sh	a4,0(a5)
    if (rt_scheduler_lock_nest <= 0)
800173dc:	0006d797          	auipc	a5,0x6d
800173e0:	c9878793          	addi	a5,a5,-872 # 80084074 <rt_scheduler_lock_nest>
800173e4:	00079783          	lh	a5,0(a5)
800173e8:	02f04863          	bgtz	a5,80017418 <rt_exit_critical+0x88>
    {
        rt_scheduler_lock_nest = 0;
800173ec:	0006d797          	auipc	a5,0x6d
800173f0:	c8878793          	addi	a5,a5,-888 # 80084074 <rt_scheduler_lock_nest>
800173f4:	00079023          	sh	zero,0(a5)
        /* enable interrupt */
        rt_hw_interrupt_enable(level);
800173f8:	fec42503          	lw	a0,-20(s0)
800173fc:	cade80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

        if (rt_current_thread)
80017400:	0006d797          	auipc	a5,0x6d
80017404:	c7878793          	addi	a5,a5,-904 # 80084078 <rt_current_thread>
80017408:	0007a783          	lw	a5,0(a5)
8001740c:	00078a63          	beqz	a5,80017420 <rt_exit_critical+0x90>
        {
            /* if scheduler is started, do a schedule */
            rt_schedule();
80017410:	a71ff0ef          	jal	ra,80016e80 <rt_schedule>
    else
    {
        /* enable interrupt */
        rt_hw_interrupt_enable(level);
    }
}
80017414:	00c0006f          	j	80017420 <rt_exit_critical+0x90>
        rt_hw_interrupt_enable(level);
80017418:	fec42503          	lw	a0,-20(s0)
8001741c:	c8de80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
}
80017420:	00000013          	nop
80017424:	01c12083          	lw	ra,28(sp)
80017428:	01812403          	lw	s0,24(sp)
8001742c:	02010113          	addi	sp,sp,32
80017430:	00008067          	ret

80017434 <rt_list_init>:
#ifndef __on_rt_thread_suspend_hook
    #define __on_rt_thread_suspend_hook(thread)     __ON_HOOK_ARGS(rt_thread_suspend_hook, (thread))
#endif
#ifndef __on_rt_thread_resume_hook
    #define __on_rt_thread_resume_hook(thread)      __ON_HOOK_ARGS(rt_thread_resume_hook, (thread))
#endif
80017434:	fe010113          	addi	sp,sp,-32
80017438:	00812e23          	sw	s0,28(sp)
8001743c:	02010413          	addi	s0,sp,32
80017440:	fea42623          	sw	a0,-20(s0)

80017444:	fec42783          	lw	a5,-20(s0)
80017448:	fec42703          	lw	a4,-20(s0)
8001744c:	00e7a223          	sw	a4,4(a5)
80017450:	fec42783          	lw	a5,-20(s0)
80017454:	0047a703          	lw	a4,4(a5)
80017458:	fec42783          	lw	a5,-20(s0)
8001745c:	00e7a023          	sw	a4,0(a5)
#if defined(RT_USING_HOOK) && defined(RT_HOOK_USING_FUNC_PTR)
80017460:	00000013          	nop
80017464:	01c12403          	lw	s0,28(sp)
80017468:	02010113          	addi	sp,sp,32
8001746c:	00008067          	ret

80017470 <rt_list_remove>:
 * @param   hook is the specified hook function.
 */
void rt_thread_inited_sethook(void (*hook)(rt_thread_t thread))
{
    rt_thread_inited_hook = hook;
}
80017470:	fe010113          	addi	sp,sp,-32
80017474:	00812e23          	sw	s0,28(sp)
80017478:	02010413          	addi	s0,sp,32
8001747c:	fea42623          	sw	a0,-20(s0)
#endif /* defined(RT_USING_HOOK) && defined(RT_HOOK_USING_FUNC_PTR) */
80017480:	fec42783          	lw	a5,-20(s0)
80017484:	0007a783          	lw	a5,0(a5)
80017488:	fec42703          	lw	a4,-20(s0)
8001748c:	00472703          	lw	a4,4(a4)
80017490:	00e7a223          	sw	a4,4(a5)

80017494:	fec42783          	lw	a5,-20(s0)
80017498:	0047a783          	lw	a5,4(a5)
8001749c:	fec42703          	lw	a4,-20(s0)
800174a0:	00072703          	lw	a4,0(a4)
800174a4:	00e7a023          	sw	a4,0(a5)
static void _thread_exit(void)
{
800174a8:	fec42783          	lw	a5,-20(s0)
800174ac:	fec42703          	lw	a4,-20(s0)
800174b0:	00e7a223          	sw	a4,4(a5)
800174b4:	fec42783          	lw	a5,-20(s0)
800174b8:	0047a703          	lw	a4,4(a5)
800174bc:	fec42783          	lw	a5,-20(s0)
800174c0:	00e7a023          	sw	a4,0(a5)
    struct rt_thread *thread;
800174c4:	00000013          	nop
800174c8:	01c12403          	lw	s0,28(sp)
800174cc:	02010113          	addi	sp,sp,32
800174d0:	00008067          	ret

800174d4 <_thread_exit>:
{
800174d4:	fe010113          	addi	sp,sp,-32
800174d8:	00112e23          	sw	ra,28(sp)
800174dc:	00812c23          	sw	s0,24(sp)
800174e0:	02010413          	addi	s0,sp,32
    rt_base_t level;

    /* get current thread */
    thread = rt_thread_self();
800174e4:	2dc000ef          	jal	ra,800177c0 <rt_thread_self>
800174e8:	fea42623          	sw	a0,-20(s0)

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
800174ec:	bb5e80ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
800174f0:	fea42423          	sw	a0,-24(s0)

    /* remove from schedule */
    rt_schedule_remove_thread(thread);
800174f4:	fec42503          	lw	a0,-20(s0)
800174f8:	d99ff0ef          	jal	ra,80017290 <rt_schedule_remove_thread>

    /* remove it from timer list */
    rt_timer_detach(&thread->thread_timer);
800174fc:	fec42783          	lw	a5,-20(s0)
80017500:	05878793          	addi	a5,a5,88
80017504:	00078513          	mv	a0,a5
80017508:	2c5000ef          	jal	ra,80017fcc <rt_timer_detach>

    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
8001750c:	fec42783          	lw	a5,-20(s0)
80017510:	00400713          	li	a4,4
80017514:	04e78023          	sb	a4,64(a5)

    /* insert to defunct thread list */
    rt_thread_defunct_enqueue(thread);
80017518:	fec42503          	lw	a0,-20(s0)
8001751c:	89dfb0ef          	jal	ra,80012db8 <rt_thread_defunct_enqueue>

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
80017520:	fe842503          	lw	a0,-24(s0)
80017524:	b85e80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    /* switch to next task */
    rt_schedule();
80017528:	959ff0ef          	jal	ra,80016e80 <rt_schedule>
}
8001752c:	00000013          	nop
80017530:	01c12083          	lw	ra,28(sp)
80017534:	01812403          	lw	s0,24(sp)
80017538:	02010113          	addi	sp,sp,32
8001753c:	00008067          	ret

80017540 <_thread_timeout>:
 *          when thread is timeout to wait some resource.
 *
 * @param   parameter is the parameter of thread timeout function
 */
static void _thread_timeout(void *parameter)
{
80017540:	fd010113          	addi	sp,sp,-48
80017544:	02112623          	sw	ra,44(sp)
80017548:	02812423          	sw	s0,40(sp)
8001754c:	03010413          	addi	s0,sp,48
80017550:	fca42e23          	sw	a0,-36(s0)
    struct rt_thread *thread;
    rt_base_t level;

    thread = (struct rt_thread *)parameter;
80017554:	fdc42783          	lw	a5,-36(s0)
80017558:	fef42623          	sw	a5,-20(s0)
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
8001755c:	b45e80ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80017560:	fea42423          	sw	a0,-24(s0)

    /* set error number */
    thread->error = -RT_ETIMEOUT;
80017564:	fec42783          	lw	a5,-20(s0)
80017568:	ffe00713          	li	a4,-2
8001756c:	02e7ae23          	sw	a4,60(a5)

    /* remove from suspend list */
    rt_list_remove(&(thread->tlist));
80017570:	fec42783          	lw	a5,-20(s0)
80017574:	02078793          	addi	a5,a5,32
80017578:	00078513          	mv	a0,a5
8001757c:	ef5ff0ef          	jal	ra,80017470 <rt_list_remove>

    /* insert to schedule ready list */
    rt_schedule_insert_thread(thread);
80017580:	fec42503          	lw	a0,-20(s0)
80017584:	bc5ff0ef          	jal	ra,80017148 <rt_schedule_insert_thread>

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
80017588:	fe842503          	lw	a0,-24(s0)
8001758c:	b1de80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    /* do schedule */
    rt_schedule();
80017590:	8f1ff0ef          	jal	ra,80016e80 <rt_schedule>
}
80017594:	00000013          	nop
80017598:	02c12083          	lw	ra,44(sp)
8001759c:	02812403          	lw	s0,40(sp)
800175a0:	03010113          	addi	sp,sp,48
800175a4:	00008067          	ret

800175a8 <_thread_init>:
                             void             *parameter,
                             void             *stack_start,
                             rt_uint32_t       stack_size,
                             rt_uint8_t        priority,
                             rt_uint32_t       tick)
{
800175a8:	fd010113          	addi	sp,sp,-48
800175ac:	02112623          	sw	ra,44(sp)
800175b0:	02812423          	sw	s0,40(sp)
800175b4:	03010413          	addi	s0,sp,48
800175b8:	fea42623          	sw	a0,-20(s0)
800175bc:	feb42423          	sw	a1,-24(s0)
800175c0:	fec42223          	sw	a2,-28(s0)
800175c4:	fed42023          	sw	a3,-32(s0)
800175c8:	fce42e23          	sw	a4,-36(s0)
800175cc:	fcf42c23          	sw	a5,-40(s0)
800175d0:	00080793          	mv	a5,a6
800175d4:	fd142823          	sw	a7,-48(s0)
800175d8:	fcf40ba3          	sb	a5,-41(s0)
    /* init thread list */
    rt_list_init(&(thread->tlist));
800175dc:	fec42783          	lw	a5,-20(s0)
800175e0:	02078793          	addi	a5,a5,32
800175e4:	00078513          	mv	a0,a5
800175e8:	e4dff0ef          	jal	ra,80017434 <rt_list_init>

    thread->entry = (void *)entry;
800175ec:	fec42783          	lw	a5,-20(s0)
800175f0:	fe442703          	lw	a4,-28(s0)
800175f4:	02e7a623          	sw	a4,44(a5)
    thread->parameter = parameter;
800175f8:	fec42783          	lw	a5,-20(s0)
800175fc:	fe042703          	lw	a4,-32(s0)
80017600:	02e7a823          	sw	a4,48(a5)

    /* stack init */
    thread->stack_addr = stack_start;
80017604:	fec42783          	lw	a5,-20(s0)
80017608:	fdc42703          	lw	a4,-36(s0)
8001760c:	02e7aa23          	sw	a4,52(a5)
    thread->stack_size = stack_size;
80017610:	fec42783          	lw	a5,-20(s0)
80017614:	fd842703          	lw	a4,-40(s0)
80017618:	02e7ac23          	sw	a4,56(a5)

    /* init thread stack */
    rt_memset(thread->stack_addr, '#', thread->stack_size);
8001761c:	fec42783          	lw	a5,-20(s0)
80017620:	0347a703          	lw	a4,52(a5)
80017624:	fec42783          	lw	a5,-20(s0)
80017628:	0387a783          	lw	a5,56(a5)
8001762c:	00078613          	mv	a2,a5
80017630:	02300593          	li	a1,35
80017634:	00070513          	mv	a0,a4
80017638:	e54fc0ef          	jal	ra,80013c8c <rt_memset>
#ifdef ARCH_CPU_STACK_GROWS_UPWARD
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
                                          (void *)((char *)thread->stack_addr),
                                          (void *)_thread_exit);
#else
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
8001763c:	fec42783          	lw	a5,-20(s0)
80017640:	02c7a503          	lw	a0,44(a5)
80017644:	fec42783          	lw	a5,-20(s0)
80017648:	0307a583          	lw	a1,48(a5)
                                          (rt_uint8_t *)((char *)thread->stack_addr + thread->stack_size - sizeof(rt_ubase_t)),
8001764c:	fec42783          	lw	a5,-20(s0)
80017650:	0347a703          	lw	a4,52(a5)
80017654:	fec42783          	lw	a5,-20(s0)
80017658:	0387a783          	lw	a5,56(a5)
8001765c:	ffc78793          	addi	a5,a5,-4
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
80017660:	00f707b3          	add	a5,a4,a5
80017664:	00000697          	auipc	a3,0x0
80017668:	e7068693          	addi	a3,a3,-400 # 800174d4 <_thread_exit>
8001766c:	00078613          	mv	a2,a5
80017670:	9e0fa0ef          	jal	ra,80011850 <rt_hw_stack_init>
80017674:	00050713          	mv	a4,a0
80017678:	fec42783          	lw	a5,-20(s0)
8001767c:	02e7a423          	sw	a4,40(a5)
                                          (void *)_thread_exit);
#endif /* ARCH_CPU_STACK_GROWS_UPWARD */

    /* priority init */
    RT_ASSERT(priority < RT_THREAD_PRIORITY_MAX);
    thread->current_priority = priority;
80017680:	fec42783          	lw	a5,-20(s0)
80017684:	fd744703          	lbu	a4,-41(s0)
80017688:	04e780a3          	sb	a4,65(a5)

    thread->number_mask = 0;
8001768c:	fec42783          	lw	a5,-20(s0)
80017690:	0407a223          	sw	zero,68(a5)

#ifdef RT_USING_EVENT
    thread->event_set = 0;
80017694:	fec42783          	lw	a5,-20(s0)
80017698:	0407a423          	sw	zero,72(a5)
    thread->event_info = 0;
8001769c:	fec42783          	lw	a5,-20(s0)
800176a0:	04078623          	sb	zero,76(a5)
    thread->number = 0;
    thread->high_mask = 0;
#endif /* RT_THREAD_PRIORITY_MAX > 32 */

    /* tick init */
    thread->init_tick      = tick;
800176a4:	fec42783          	lw	a5,-20(s0)
800176a8:	fd042703          	lw	a4,-48(s0)
800176ac:	04e7a823          	sw	a4,80(a5)
    thread->remaining_tick = tick;
800176b0:	fec42783          	lw	a5,-20(s0)
800176b4:	fd042703          	lw	a4,-48(s0)
800176b8:	04e7aa23          	sw	a4,84(a5)

    /* error and flags */
    thread->error = RT_EOK;
800176bc:	fec42783          	lw	a5,-20(s0)
800176c0:	0207ae23          	sw	zero,60(a5)
    thread->stat  = RT_THREAD_INIT;
800176c4:	fec42783          	lw	a5,-20(s0)
800176c8:	04078023          	sb	zero,64(a5)
    thread->cpus_lock_nest = 0;
    thread->critical_lock_nest = 0;
#endif /* RT_USING_SMP */

    /* initialize cleanup function and user data */
    thread->cleanup   = 0;
800176cc:	fec42783          	lw	a5,-20(s0)
800176d0:	0807a823          	sw	zero,144(a5)
    thread->user_data = 0;
800176d4:	fec42783          	lw	a5,-20(s0)
800176d8:	0807aa23          	sw	zero,148(a5)

    /* initialize thread timer */
    rt_timer_init(&(thread->thread_timer),
800176dc:	fec42783          	lw	a5,-20(s0)
800176e0:	05878513          	addi	a0,a5,88
                  thread->name,
800176e4:	fec42583          	lw	a1,-20(s0)
    rt_timer_init(&(thread->thread_timer),
800176e8:	00000793          	li	a5,0
800176ec:	00000713          	li	a4,0
800176f0:	fec42683          	lw	a3,-20(s0)
800176f4:	00000617          	auipc	a2,0x0
800176f8:	e4c60613          	addi	a2,a2,-436 # 80017540 <_thread_timeout>
800176fc:	065000ef          	jal	ra,80017f60 <rt_timer_init>

#ifdef RT_USING_MODULE
    thread->module_id = 0;
#endif /* RT_USING_MODULE */

    RT_OBJECT_HOOK_CALL(rt_thread_inited_hook, (thread));
80017700:	0006d797          	auipc	a5,0x6d
80017704:	99078793          	addi	a5,a5,-1648 # 80084090 <rt_thread_inited_hook>
80017708:	0007a783          	lw	a5,0(a5)
8001770c:	00078c63          	beqz	a5,80017724 <_thread_init+0x17c>
80017710:	0006d797          	auipc	a5,0x6d
80017714:	98078793          	addi	a5,a5,-1664 # 80084090 <rt_thread_inited_hook>
80017718:	0007a783          	lw	a5,0(a5)
8001771c:	fec42503          	lw	a0,-20(s0)
80017720:	000780e7          	jalr	a5

    return RT_EOK;
80017724:	00000793          	li	a5,0
}
80017728:	00078513          	mv	a0,a5
8001772c:	02c12083          	lw	ra,44(sp)
80017730:	02812403          	lw	s0,40(sp)
80017734:	03010113          	addi	sp,sp,48
80017738:	00008067          	ret

8001773c <rt_thread_init>:
                        void             *parameter,
                        void             *stack_start,
                        rt_uint32_t       stack_size,
                        rt_uint8_t        priority,
                        rt_uint32_t       tick)
{
8001773c:	fd010113          	addi	sp,sp,-48
80017740:	02112623          	sw	ra,44(sp)
80017744:	02812423          	sw	s0,40(sp)
80017748:	03010413          	addi	s0,sp,48
8001774c:	fea42623          	sw	a0,-20(s0)
80017750:	feb42423          	sw	a1,-24(s0)
80017754:	fec42223          	sw	a2,-28(s0)
80017758:	fed42023          	sw	a3,-32(s0)
8001775c:	fce42e23          	sw	a4,-36(s0)
80017760:	fcf42c23          	sw	a5,-40(s0)
80017764:	00080793          	mv	a5,a6
80017768:	fd142823          	sw	a7,-48(s0)
8001776c:	fcf40ba3          	sb	a5,-41(s0)
    /* parameter check */
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT(stack_start != RT_NULL);

    /* initialize thread object */
    rt_object_init((rt_object_t)thread, RT_Object_Class_Thread, name);
80017770:	fe842603          	lw	a2,-24(s0)
80017774:	00100593          	li	a1,1
80017778:	fec42503          	lw	a0,-20(s0)
8001777c:	870ff0ef          	jal	ra,800167ec <rt_object_init>

    return _thread_init(thread,
80017780:	fd744783          	lbu	a5,-41(s0)
80017784:	fd042883          	lw	a7,-48(s0)
80017788:	00078813          	mv	a6,a5
8001778c:	fd842783          	lw	a5,-40(s0)
80017790:	fdc42703          	lw	a4,-36(s0)
80017794:	fe042683          	lw	a3,-32(s0)
80017798:	fe442603          	lw	a2,-28(s0)
8001779c:	fe842583          	lw	a1,-24(s0)
800177a0:	fec42503          	lw	a0,-20(s0)
800177a4:	e05ff0ef          	jal	ra,800175a8 <_thread_init>
800177a8:	00050793          	mv	a5,a0
                        parameter,
                        stack_start,
                        stack_size,
                        priority,
                        tick);
}
800177ac:	00078513          	mv	a0,a5
800177b0:	02c12083          	lw	ra,44(sp)
800177b4:	02812403          	lw	s0,40(sp)
800177b8:	03010113          	addi	sp,sp,48
800177bc:	00008067          	ret

800177c0 <rt_thread_self>:
 * @brief   This function will return self thread object.
 *
 * @return  The self thread object.
 */
rt_thread_t rt_thread_self(void)
{
800177c0:	ff010113          	addi	sp,sp,-16
800177c4:	00812623          	sw	s0,12(sp)
800177c8:	01010413          	addi	s0,sp,16
    rt_hw_local_irq_enable(lock);
    return self;
#else
    extern rt_thread_t rt_current_thread;

    return rt_current_thread;
800177cc:	0006d797          	auipc	a5,0x6d
800177d0:	8ac78793          	addi	a5,a5,-1876 # 80084078 <rt_current_thread>
800177d4:	0007a783          	lw	a5,0(a5)
#endif /* RT_USING_SMP */
}
800177d8:	00078513          	mv	a0,a5
800177dc:	00c12403          	lw	s0,12(sp)
800177e0:	01010113          	addi	sp,sp,16
800177e4:	00008067          	ret

800177e8 <rt_thread_startup>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_startup(rt_thread_t thread)
{
800177e8:	fe010113          	addi	sp,sp,-32
800177ec:	00112e23          	sw	ra,28(sp)
800177f0:	00812c23          	sw	s0,24(sp)
800177f4:	02010413          	addi	s0,sp,32
800177f8:	fea42623          	sw	a0,-20(s0)
#if RT_THREAD_PRIORITY_MAX > 32
    thread->number      = thread->current_priority >> 3;            /* 5bit */
    thread->number_mask = 1L << thread->number;
    thread->high_mask   = 1L << (thread->current_priority & 0x07);  /* 3bit */
#else
    thread->number_mask = 1L << thread->current_priority;
800177fc:	fec42783          	lw	a5,-20(s0)
80017800:	0417c783          	lbu	a5,65(a5)
80017804:	00078713          	mv	a4,a5
80017808:	00100793          	li	a5,1
8001780c:	00e797b3          	sll	a5,a5,a4
80017810:	00078713          	mv	a4,a5
80017814:	fec42783          	lw	a5,-20(s0)
80017818:	04e7a223          	sw	a4,68(a5)
#endif /* RT_THREAD_PRIORITY_MAX > 32 */

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("startup a thread:%s with priority:%d\n",
                                   thread->name, thread->current_priority));
    /* change thread stat */
    thread->stat = RT_THREAD_SUSPEND;
8001781c:	fec42783          	lw	a5,-20(s0)
80017820:	00200713          	li	a4,2
80017824:	04e78023          	sb	a4,64(a5)
    /* then resume it */
    rt_thread_resume(thread);
80017828:	fec42503          	lw	a0,-20(s0)
8001782c:	430000ef          	jal	ra,80017c5c <rt_thread_resume>
    if (rt_thread_self() != RT_NULL)
80017830:	f91ff0ef          	jal	ra,800177c0 <rt_thread_self>
80017834:	00050793          	mv	a5,a0
80017838:	00078463          	beqz	a5,80017840 <rt_thread_startup+0x58>
    {
        /* do a scheduling */
        rt_schedule();
8001783c:	e44ff0ef          	jal	ra,80016e80 <rt_schedule>
    }

    return RT_EOK;
80017840:	00000793          	li	a5,0
}
80017844:	00078513          	mv	a0,a5
80017848:	01c12083          	lw	ra,28(sp)
8001784c:	01812403          	lw	s0,24(sp)
80017850:	02010113          	addi	sp,sp,32
80017854:	00008067          	ret

80017858 <rt_thread_detach>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_detach(rt_thread_t thread)
{
80017858:	fd010113          	addi	sp,sp,-48
8001785c:	02112623          	sw	ra,44(sp)
80017860:	02812423          	sw	s0,40(sp)
80017864:	03010413          	addi	s0,sp,48
80017868:	fca42e23          	sw	a0,-36(s0)
    /* parameter check */
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread));

    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_CLOSE)
8001786c:	fdc42783          	lw	a5,-36(s0)
80017870:	0407c783          	lbu	a5,64(a5)
80017874:	0077f713          	andi	a4,a5,7
80017878:	00400793          	li	a5,4
8001787c:	00f71663          	bne	a4,a5,80017888 <rt_thread_detach+0x30>
        return RT_EOK;
80017880:	00000793          	li	a5,0
80017884:	0540006f          	j	800178d8 <rt_thread_detach+0x80>

    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
80017888:	fdc42783          	lw	a5,-36(s0)
8001788c:	0407c783          	lbu	a5,64(a5)
80017890:	0077f793          	andi	a5,a5,7
80017894:	00078663          	beqz	a5,800178a0 <rt_thread_detach+0x48>
    {
        /* remove from schedule */
        rt_schedule_remove_thread(thread);
80017898:	fdc42503          	lw	a0,-36(s0)
8001789c:	9f5ff0ef          	jal	ra,80017290 <rt_schedule_remove_thread>
    }

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
800178a0:	801e80ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
800178a4:	fea42623          	sw	a0,-20(s0)

    /* release thread timer */
    rt_timer_detach(&(thread->thread_timer));
800178a8:	fdc42783          	lw	a5,-36(s0)
800178ac:	05878793          	addi	a5,a5,88
800178b0:	00078513          	mv	a0,a5
800178b4:	718000ef          	jal	ra,80017fcc <rt_timer_detach>

    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
800178b8:	fdc42783          	lw	a5,-36(s0)
800178bc:	00400713          	li	a4,4
800178c0:	04e78023          	sb	a4,64(a5)

    /* insert to defunct thread list */
    rt_thread_defunct_enqueue(thread);
800178c4:	fdc42503          	lw	a0,-36(s0)
800178c8:	cf0fb0ef          	jal	ra,80012db8 <rt_thread_defunct_enqueue>

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
800178cc:	fec42503          	lw	a0,-20(s0)
800178d0:	fd8e80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    return RT_EOK;
800178d4:	00000793          	li	a5,0
}
800178d8:	00078513          	mv	a0,a5
800178dc:	02c12083          	lw	ra,44(sp)
800178e0:	02812403          	lw	s0,40(sp)
800178e4:	03010113          	addi	sp,sp,48
800178e8:	00008067          	ret

800178ec <rt_thread_create>:
                             void (*entry)(void *parameter),
                             void       *parameter,
                             rt_uint32_t stack_size,
                             rt_uint8_t  priority,
                             rt_uint32_t tick)
{
800178ec:	fc010113          	addi	sp,sp,-64
800178f0:	02112e23          	sw	ra,60(sp)
800178f4:	02812c23          	sw	s0,56(sp)
800178f8:	04010413          	addi	s0,sp,64
800178fc:	fca42e23          	sw	a0,-36(s0)
80017900:	fcb42c23          	sw	a1,-40(s0)
80017904:	fcc42a23          	sw	a2,-44(s0)
80017908:	fcd42823          	sw	a3,-48(s0)
8001790c:	fcf42423          	sw	a5,-56(s0)
80017910:	00070793          	mv	a5,a4
80017914:	fcf407a3          	sb	a5,-49(s0)
    struct rt_thread *thread;
    void *stack_start;

    thread = (struct rt_thread *)rt_object_allocate(RT_Object_Class_Thread,
80017918:	fdc42583          	lw	a1,-36(s0)
8001791c:	00100513          	li	a0,1
80017920:	ff9fe0ef          	jal	ra,80016918 <rt_object_allocate>
80017924:	fea42623          	sw	a0,-20(s0)
                                                    name);
    if (thread == RT_NULL)
80017928:	fec42783          	lw	a5,-20(s0)
8001792c:	00079663          	bnez	a5,80017938 <rt_thread_create+0x4c>
        return RT_NULL;
80017930:	00000793          	li	a5,0
80017934:	0540006f          	j	80017988 <rt_thread_create+0x9c>

    stack_start = (void *)RT_KERNEL_MALLOC(stack_size);
80017938:	fd042503          	lw	a0,-48(s0)
8001793c:	b91fd0ef          	jal	ra,800154cc <rt_malloc>
80017940:	fea42423          	sw	a0,-24(s0)
    if (stack_start == RT_NULL)
80017944:	fe842783          	lw	a5,-24(s0)
80017948:	00079a63          	bnez	a5,8001795c <rt_thread_create+0x70>
    {
        /* allocate stack failure */
        rt_object_delete((rt_object_t)thread);
8001794c:	fec42503          	lw	a0,-20(s0)
80017950:	8bcff0ef          	jal	ra,80016a0c <rt_object_delete>

        return RT_NULL;
80017954:	00000793          	li	a5,0
80017958:	0300006f          	j	80017988 <rt_thread_create+0x9c>
    }

    _thread_init(thread,
8001795c:	fcf44783          	lbu	a5,-49(s0)
80017960:	fc842883          	lw	a7,-56(s0)
80017964:	00078813          	mv	a6,a5
80017968:	fd042783          	lw	a5,-48(s0)
8001796c:	fe842703          	lw	a4,-24(s0)
80017970:	fd442683          	lw	a3,-44(s0)
80017974:	fd842603          	lw	a2,-40(s0)
80017978:	fdc42583          	lw	a1,-36(s0)
8001797c:	fec42503          	lw	a0,-20(s0)
80017980:	c29ff0ef          	jal	ra,800175a8 <_thread_init>
                 stack_start,
                 stack_size,
                 priority,
                 tick);

    return thread;
80017984:	fec42783          	lw	a5,-20(s0)
}
80017988:	00078513          	mv	a0,a5
8001798c:	03c12083          	lw	ra,60(sp)
80017990:	03812403          	lw	s0,56(sp)
80017994:	04010113          	addi	sp,sp,64
80017998:	00008067          	ret

8001799c <rt_thread_delete>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_delete(rt_thread_t thread)
{
8001799c:	fd010113          	addi	sp,sp,-48
800179a0:	02112623          	sw	ra,44(sp)
800179a4:	02812423          	sw	s0,40(sp)
800179a8:	03010413          	addi	s0,sp,48
800179ac:	fca42e23          	sw	a0,-36(s0)
    /* parameter check */
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread) == RT_FALSE);

    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_CLOSE)
800179b0:	fdc42783          	lw	a5,-36(s0)
800179b4:	0407c783          	lbu	a5,64(a5)
800179b8:	0077f713          	andi	a4,a5,7
800179bc:	00400793          	li	a5,4
800179c0:	00f71663          	bne	a4,a5,800179cc <rt_thread_delete+0x30>
        return RT_EOK;
800179c4:	00000793          	li	a5,0
800179c8:	0540006f          	j	80017a1c <rt_thread_delete+0x80>

    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
800179cc:	fdc42783          	lw	a5,-36(s0)
800179d0:	0407c783          	lbu	a5,64(a5)
800179d4:	0077f793          	andi	a5,a5,7
800179d8:	00078663          	beqz	a5,800179e4 <rt_thread_delete+0x48>
    {
        /* remove from schedule */
        rt_schedule_remove_thread(thread);
800179dc:	fdc42503          	lw	a0,-36(s0)
800179e0:	8b1ff0ef          	jal	ra,80017290 <rt_schedule_remove_thread>
    }

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
800179e4:	ebce80ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
800179e8:	fea42623          	sw	a0,-20(s0)

    /* release thread timer */
    rt_timer_detach(&(thread->thread_timer));
800179ec:	fdc42783          	lw	a5,-36(s0)
800179f0:	05878793          	addi	a5,a5,88
800179f4:	00078513          	mv	a0,a5
800179f8:	5d4000ef          	jal	ra,80017fcc <rt_timer_detach>

    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
800179fc:	fdc42783          	lw	a5,-36(s0)
80017a00:	00400713          	li	a4,4
80017a04:	04e78023          	sb	a4,64(a5)

    /* insert to defunct thread list */
    rt_thread_defunct_enqueue(thread);
80017a08:	fdc42503          	lw	a0,-36(s0)
80017a0c:	bacfb0ef          	jal	ra,80012db8 <rt_thread_defunct_enqueue>

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
80017a10:	fec42503          	lw	a0,-20(s0)
80017a14:	e94e80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    return RT_EOK;
80017a18:	00000793          	li	a5,0
}
80017a1c:	00078513          	mv	a0,a5
80017a20:	02c12083          	lw	ra,44(sp)
80017a24:	02812403          	lw	s0,40(sp)
80017a28:	03010113          	addi	sp,sp,48
80017a2c:	00008067          	ret

80017a30 <rt_thread_control>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_control(rt_thread_t thread, int cmd, void *arg)
{
80017a30:	fd010113          	addi	sp,sp,-48
80017a34:	02112623          	sw	ra,44(sp)
80017a38:	02812423          	sw	s0,40(sp)
80017a3c:	03010413          	addi	s0,sp,48
80017a40:	fca42e23          	sw	a0,-36(s0)
80017a44:	fcb42c23          	sw	a1,-40(s0)
80017a48:	fcc42a23          	sw	a2,-44(s0)

    /* parameter check */
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    switch (cmd)
80017a4c:	fd842703          	lw	a4,-40(s0)
80017a50:	00200793          	li	a5,2
80017a54:	02f70463          	beq	a4,a5,80017a7c <rt_thread_control+0x4c>
80017a58:	fd842703          	lw	a4,-40(s0)
80017a5c:	00200793          	li	a5,2
80017a60:	10e7c263          	blt	a5,a4,80017b64 <rt_thread_control+0x134>
80017a64:	fd842783          	lw	a5,-40(s0)
80017a68:	0a078863          	beqz	a5,80017b18 <rt_thread_control+0xe8>
80017a6c:	fd842703          	lw	a4,-40(s0)
80017a70:	00100793          	li	a5,1
80017a74:	0af70a63          	beq	a4,a5,80017b28 <rt_thread_control+0xf8>
            break;
        }
    #endif /* RT_USING_SMP */

        default:
            break;
80017a78:	0ec0006f          	j	80017b64 <rt_thread_control+0x134>
            level = rt_hw_interrupt_disable();
80017a7c:	e24e80ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80017a80:	fea42423          	sw	a0,-24(s0)
            if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY)
80017a84:	fdc42783          	lw	a5,-36(s0)
80017a88:	0407c783          	lbu	a5,64(a5)
80017a8c:	0077f713          	andi	a4,a5,7
80017a90:	00100793          	li	a5,1
80017a94:	04f71463          	bne	a4,a5,80017adc <rt_thread_control+0xac>
                rt_schedule_remove_thread(thread);
80017a98:	fdc42503          	lw	a0,-36(s0)
80017a9c:	ff4ff0ef          	jal	ra,80017290 <rt_schedule_remove_thread>
                thread->current_priority = *(rt_uint8_t *)arg;
80017aa0:	fd442783          	lw	a5,-44(s0)
80017aa4:	0007c703          	lbu	a4,0(a5)
80017aa8:	fdc42783          	lw	a5,-36(s0)
80017aac:	04e780a3          	sb	a4,65(a5)
                thread->number_mask = 1 << thread->current_priority;
80017ab0:	fdc42783          	lw	a5,-36(s0)
80017ab4:	0417c783          	lbu	a5,65(a5)
80017ab8:	00078713          	mv	a4,a5
80017abc:	00100793          	li	a5,1
80017ac0:	00e797b3          	sll	a5,a5,a4
80017ac4:	00078713          	mv	a4,a5
80017ac8:	fdc42783          	lw	a5,-36(s0)
80017acc:	04e7a223          	sw	a4,68(a5)
                rt_schedule_insert_thread(thread);
80017ad0:	fdc42503          	lw	a0,-36(s0)
80017ad4:	e74ff0ef          	jal	ra,80017148 <rt_schedule_insert_thread>
80017ad8:	0340006f          	j	80017b0c <rt_thread_control+0xdc>
                thread->current_priority = *(rt_uint8_t *)arg;
80017adc:	fd442783          	lw	a5,-44(s0)
80017ae0:	0007c703          	lbu	a4,0(a5)
80017ae4:	fdc42783          	lw	a5,-36(s0)
80017ae8:	04e780a3          	sb	a4,65(a5)
                thread->number_mask = 1 << thread->current_priority;
80017aec:	fdc42783          	lw	a5,-36(s0)
80017af0:	0417c783          	lbu	a5,65(a5)
80017af4:	00078713          	mv	a4,a5
80017af8:	00100793          	li	a5,1
80017afc:	00e797b3          	sll	a5,a5,a4
80017b00:	00078713          	mv	a4,a5
80017b04:	fdc42783          	lw	a5,-36(s0)
80017b08:	04e7a223          	sw	a4,68(a5)
            rt_hw_interrupt_enable(level);
80017b0c:	fe842503          	lw	a0,-24(s0)
80017b10:	d98e80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>
            break;
80017b14:	0540006f          	j	80017b68 <rt_thread_control+0x138>
            return rt_thread_startup(thread);
80017b18:	fdc42503          	lw	a0,-36(s0)
80017b1c:	ccdff0ef          	jal	ra,800177e8 <rt_thread_startup>
80017b20:	00050793          	mv	a5,a0
80017b24:	0480006f          	j	80017b6c <rt_thread_control+0x13c>
            if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
80017b28:	fdc42503          	lw	a0,-36(s0)
80017b2c:	f5dfe0ef          	jal	ra,80016a88 <rt_object_is_systemobject>
80017b30:	00050713          	mv	a4,a0
80017b34:	00100793          	li	a5,1
80017b38:	00f71a63          	bne	a4,a5,80017b4c <rt_thread_control+0x11c>
                rt_err = rt_thread_detach(thread);
80017b3c:	fdc42503          	lw	a0,-36(s0)
80017b40:	d19ff0ef          	jal	ra,80017858 <rt_thread_detach>
80017b44:	fea42623          	sw	a0,-20(s0)
80017b48:	0100006f          	j	80017b58 <rt_thread_control+0x128>
                rt_err = rt_thread_delete(thread);
80017b4c:	fdc42503          	lw	a0,-36(s0)
80017b50:	e4dff0ef          	jal	ra,8001799c <rt_thread_delete>
80017b54:	fea42623          	sw	a0,-20(s0)
            rt_schedule();
80017b58:	b28ff0ef          	jal	ra,80016e80 <rt_schedule>
            return rt_err;
80017b5c:	fec42783          	lw	a5,-20(s0)
80017b60:	00c0006f          	j	80017b6c <rt_thread_control+0x13c>
            break;
80017b64:	00000013          	nop
    }

    return RT_EOK;
80017b68:	00000793          	li	a5,0
}
80017b6c:	00078513          	mv	a0,a5
80017b70:	02c12083          	lw	ra,44(sp)
80017b74:	02812403          	lw	s0,40(sp)
80017b78:	03010113          	addi	sp,sp,48
80017b7c:	00008067          	ret

80017b80 <rt_thread_suspend>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_suspend(rt_thread_t thread)
{
80017b80:	fd010113          	addi	sp,sp,-48
80017b84:	02112623          	sw	ra,44(sp)
80017b88:	02812423          	sw	s0,40(sp)
80017b8c:	03010413          	addi	s0,sp,48
80017b90:	fca42e23          	sw	a0,-36(s0)
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    RT_ASSERT(thread == rt_thread_self());

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend:  %s\n", thread->name));

    stat = thread->stat & RT_THREAD_STAT_MASK;
80017b94:	fdc42783          	lw	a5,-36(s0)
80017b98:	0407c783          	lbu	a5,64(a5)
80017b9c:	0077f793          	andi	a5,a5,7
80017ba0:	fef42623          	sw	a5,-20(s0)
    if ((stat != RT_THREAD_READY) && (stat != RT_THREAD_RUNNING))
80017ba4:	fec42703          	lw	a4,-20(s0)
80017ba8:	00100793          	li	a5,1
80017bac:	00f70c63          	beq	a4,a5,80017bc4 <rt_thread_suspend+0x44>
80017bb0:	fec42703          	lw	a4,-20(s0)
80017bb4:	00300793          	li	a5,3
80017bb8:	00f70663          	beq	a4,a5,80017bc4 <rt_thread_suspend+0x44>
    {
        RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend: thread disorder, 0x%2x\n", thread->stat));
        return -RT_ERROR;
80017bbc:	fff00793          	li	a5,-1
80017bc0:	0880006f          	j	80017c48 <rt_thread_suspend+0xc8>
    }

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
80017bc4:	cdce80ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80017bc8:	fea42423          	sw	a0,-24(s0)

    /* change thread stat */
    rt_schedule_remove_thread(thread);
80017bcc:	fdc42503          	lw	a0,-36(s0)
80017bd0:	ec0ff0ef          	jal	ra,80017290 <rt_schedule_remove_thread>
    thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
80017bd4:	fdc42783          	lw	a5,-36(s0)
80017bd8:	0407c783          	lbu	a5,64(a5)
80017bdc:	01879793          	slli	a5,a5,0x18
80017be0:	4187d793          	srai	a5,a5,0x18
80017be4:	ff87f793          	andi	a5,a5,-8
80017be8:	01879793          	slli	a5,a5,0x18
80017bec:	4187d793          	srai	a5,a5,0x18
80017bf0:	0027e793          	ori	a5,a5,2
80017bf4:	01879793          	slli	a5,a5,0x18
80017bf8:	4187d793          	srai	a5,a5,0x18
80017bfc:	0ff7f713          	zext.b	a4,a5
80017c00:	fdc42783          	lw	a5,-36(s0)
80017c04:	04e78023          	sb	a4,64(a5)

    /* stop thread timer anyway */
    rt_timer_stop(&(thread->thread_timer));
80017c08:	fdc42783          	lw	a5,-36(s0)
80017c0c:	05878793          	addi	a5,a5,88
80017c10:	00078513          	mv	a0,a5
80017c14:	6f0000ef          	jal	ra,80018304 <rt_timer_stop>

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
80017c18:	fe842503          	lw	a0,-24(s0)
80017c1c:	c8ce80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_thread_suspend_hook, (thread));
80017c20:	0006c797          	auipc	a5,0x6c
80017c24:	46878793          	addi	a5,a5,1128 # 80084088 <rt_thread_suspend_hook>
80017c28:	0007a783          	lw	a5,0(a5)
80017c2c:	00078c63          	beqz	a5,80017c44 <rt_thread_suspend+0xc4>
80017c30:	0006c797          	auipc	a5,0x6c
80017c34:	45878793          	addi	a5,a5,1112 # 80084088 <rt_thread_suspend_hook>
80017c38:	0007a783          	lw	a5,0(a5)
80017c3c:	fdc42503          	lw	a0,-36(s0)
80017c40:	000780e7          	jalr	a5
    return RT_EOK;
80017c44:	00000793          	li	a5,0
}
80017c48:	00078513          	mv	a0,a5
80017c4c:	02c12083          	lw	ra,44(sp)
80017c50:	02812403          	lw	s0,40(sp)
80017c54:	03010113          	addi	sp,sp,48
80017c58:	00008067          	ret

80017c5c <rt_thread_resume>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_resume(rt_thread_t thread)
{
80017c5c:	fd010113          	addi	sp,sp,-48
80017c60:	02112623          	sw	ra,44(sp)
80017c64:	02812423          	sw	s0,40(sp)
80017c68:	03010413          	addi	s0,sp,48
80017c6c:	fca42e23          	sw	a0,-36(s0)
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume:  %s\n", thread->name));

    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_SUSPEND)
80017c70:	fdc42783          	lw	a5,-36(s0)
80017c74:	0407c783          	lbu	a5,64(a5)
80017c78:	0077f713          	andi	a4,a5,7
80017c7c:	00200793          	li	a5,2
80017c80:	00f70663          	beq	a4,a5,80017c8c <rt_thread_resume+0x30>
    {
        RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume: thread disorder, %d\n",
                                       thread->stat));

        return -RT_ERROR;
80017c84:	fff00793          	li	a5,-1
80017c88:	0640006f          	j	80017cec <rt_thread_resume+0x90>
    }

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
80017c8c:	c14e80ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80017c90:	fea42623          	sw	a0,-20(s0)

    /* remove from suspend list */
    rt_list_remove(&(thread->tlist));
80017c94:	fdc42783          	lw	a5,-36(s0)
80017c98:	02078793          	addi	a5,a5,32
80017c9c:	00078513          	mv	a0,a5
80017ca0:	fd0ff0ef          	jal	ra,80017470 <rt_list_remove>

    rt_timer_stop(&thread->thread_timer);
80017ca4:	fdc42783          	lw	a5,-36(s0)
80017ca8:	05878793          	addi	a5,a5,88
80017cac:	00078513          	mv	a0,a5
80017cb0:	654000ef          	jal	ra,80018304 <rt_timer_stop>

    /* insert to schedule ready list */
    rt_schedule_insert_thread(thread);
80017cb4:	fdc42503          	lw	a0,-36(s0)
80017cb8:	c90ff0ef          	jal	ra,80017148 <rt_schedule_insert_thread>

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
80017cbc:	fec42503          	lw	a0,-20(s0)
80017cc0:	be8e80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_thread_resume_hook, (thread));
80017cc4:	0006c797          	auipc	a5,0x6c
80017cc8:	3c878793          	addi	a5,a5,968 # 8008408c <rt_thread_resume_hook>
80017ccc:	0007a783          	lw	a5,0(a5)
80017cd0:	00078c63          	beqz	a5,80017ce8 <rt_thread_resume+0x8c>
80017cd4:	0006c797          	auipc	a5,0x6c
80017cd8:	3b878793          	addi	a5,a5,952 # 8008408c <rt_thread_resume_hook>
80017cdc:	0007a783          	lw	a5,0(a5)
80017ce0:	fdc42503          	lw	a0,-36(s0)
80017ce4:	000780e7          	jalr	a5
    return RT_EOK;
80017ce8:	00000793          	li	a5,0
}
80017cec:	00078513          	mv	a0,a5
80017cf0:	02c12083          	lw	ra,44(sp)
80017cf4:	02812403          	lw	s0,40(sp)
80017cf8:	03010113          	addi	sp,sp,48
80017cfc:	00008067          	ret

80017d00 <rt_list_init>:
/* soft timer status */
static rt_uint8_t _soft_timer_status = RT_SOFT_TIMER_IDLE;
/* soft timer list */
static rt_list_t _soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL];
static struct rt_thread _timer_thread;
ALIGN(RT_ALIGN_SIZE)
80017d00:	fe010113          	addi	sp,sp,-32
80017d04:	00812e23          	sw	s0,28(sp)
80017d08:	02010413          	addi	s0,sp,32
80017d0c:	fea42623          	sw	a0,-20(s0)
static rt_uint8_t _timer_thread_stack[RT_TIMER_THREAD_STACK_SIZE];
80017d10:	fec42783          	lw	a5,-20(s0)
80017d14:	fec42703          	lw	a4,-20(s0)
80017d18:	00e7a223          	sw	a4,4(a5)
80017d1c:	fec42783          	lw	a5,-20(s0)
80017d20:	0047a703          	lw	a4,4(a5)
80017d24:	fec42783          	lw	a5,-20(s0)
80017d28:	00e7a023          	sw	a4,0(a5)
#endif /* RT_USING_TIMER_SOFT */
80017d2c:	00000013          	nop
80017d30:	01c12403          	lw	s0,28(sp)
80017d34:	02010113          	addi	sp,sp,32
80017d38:	00008067          	ret

80017d3c <rt_list_insert_after>:
#endif
#ifndef __on_rt_object_put_hook
    #define __on_rt_object_put_hook(parent)         __ON_HOOK_ARGS(rt_object_put_hook, (parent))
#endif
#ifndef __on_rt_timer_enter_hook
    #define __on_rt_timer_enter_hook(t)             __ON_HOOK_ARGS(rt_timer_enter_hook, (t))
80017d3c:	fe010113          	addi	sp,sp,-32
80017d40:	00812e23          	sw	s0,28(sp)
80017d44:	02010413          	addi	s0,sp,32
80017d48:	fea42623          	sw	a0,-20(s0)
80017d4c:	feb42423          	sw	a1,-24(s0)
#endif
80017d50:	fec42783          	lw	a5,-20(s0)
80017d54:	0007a783          	lw	a5,0(a5)
80017d58:	fe842703          	lw	a4,-24(s0)
80017d5c:	00e7a223          	sw	a4,4(a5)
#ifndef __on_rt_timer_exit_hook
80017d60:	fec42783          	lw	a5,-20(s0)
80017d64:	0007a703          	lw	a4,0(a5)
80017d68:	fe842783          	lw	a5,-24(s0)
80017d6c:	00e7a023          	sw	a4,0(a5)
    #define __on_rt_timer_exit_hook(t)              __ON_HOOK_ARGS(rt_timer_exit_hook, (t))
#endif
80017d70:	fec42783          	lw	a5,-20(s0)
80017d74:	fe842703          	lw	a4,-24(s0)
80017d78:	00e7a023          	sw	a4,0(a5)

80017d7c:	fe842783          	lw	a5,-24(s0)
80017d80:	fec42703          	lw	a4,-20(s0)
80017d84:	00e7a223          	sw	a4,4(a5)
#if defined(RT_USING_HOOK) && defined(RT_HOOK_USING_FUNC_PTR)
80017d88:	00000013          	nop
80017d8c:	01c12403          	lw	s0,28(sp)
80017d90:	02010113          	addi	sp,sp,32
80017d94:	00008067          	ret

80017d98 <rt_list_remove>:
 */
void rt_timer_enter_sethook(void (*hook)(struct rt_timer *timer))
{
    rt_timer_enter_hook = hook;
}

80017d98:	fe010113          	addi	sp,sp,-32
80017d9c:	00812e23          	sw	s0,28(sp)
80017da0:	02010413          	addi	s0,sp,32
80017da4:	fea42623          	sw	a0,-20(s0)
/**
80017da8:	fec42783          	lw	a5,-20(s0)
80017dac:	0007a783          	lw	a5,0(a5)
80017db0:	fec42703          	lw	a4,-20(s0)
80017db4:	00472703          	lw	a4,4(a4)
80017db8:	00e7a223          	sw	a4,4(a5)
 * @brief This function will set a hook function, which will be
80017dbc:	fec42783          	lw	a5,-20(s0)
80017dc0:	0047a783          	lw	a5,4(a5)
80017dc4:	fec42703          	lw	a4,-20(s0)
80017dc8:	00072703          	lw	a4,0(a4)
80017dcc:	00e7a023          	sw	a4,0(a5)
 *        invoked when exit timer timeout callback function.
 *
80017dd0:	fec42783          	lw	a5,-20(s0)
80017dd4:	fec42703          	lw	a4,-20(s0)
80017dd8:	00e7a223          	sw	a4,4(a5)
80017ddc:	fec42783          	lw	a5,-20(s0)
80017de0:	0047a703          	lw	a4,4(a5)
80017de4:	fec42783          	lw	a5,-20(s0)
80017de8:	00e7a023          	sw	a4,0(a5)
 * @param hook is the function point of timer
80017dec:	00000013          	nop
80017df0:	01c12403          	lw	s0,28(sp)
80017df4:	02010113          	addi	sp,sp,32
80017df8:	00008067          	ret

80017dfc <rt_list_isempty>:
void rt_timer_exit_sethook(void (*hook)(struct rt_timer *timer))
{
    rt_timer_exit_hook = hook;
}

/**@}*/
80017dfc:	fe010113          	addi	sp,sp,-32
80017e00:	00812e23          	sw	s0,28(sp)
80017e04:	02010413          	addi	s0,sp,32
80017e08:	fea42623          	sw	a0,-20(s0)
#endif /* RT_USING_HOOK */
80017e0c:	fec42783          	lw	a5,-20(s0)
80017e10:	0007a783          	lw	a5,0(a5)
80017e14:	fec42703          	lw	a4,-20(s0)
80017e18:	40f707b3          	sub	a5,a4,a5
80017e1c:	0017b793          	seqz	a5,a5
80017e20:	0ff7f793          	zext.b	a5,a5

80017e24:	00078513          	mv	a0,a5
80017e28:	01c12403          	lw	s0,28(sp)
80017e2c:	02010113          	addi	sp,sp,32
80017e30:	00008067          	ret

80017e34 <_timer_init>:
static void _timer_init(rt_timer_t timer,
                        void (*timeout)(void *parameter),
                        void      *parameter,
                        rt_tick_t  time,
                        rt_uint8_t flag)
{
80017e34:	fc010113          	addi	sp,sp,-64
80017e38:	02112e23          	sw	ra,60(sp)
80017e3c:	02812c23          	sw	s0,56(sp)
80017e40:	04010413          	addi	s0,sp,64
80017e44:	fca42e23          	sw	a0,-36(s0)
80017e48:	fcb42c23          	sw	a1,-40(s0)
80017e4c:	fcc42a23          	sw	a2,-44(s0)
80017e50:	fcd42823          	sw	a3,-48(s0)
80017e54:	00070793          	mv	a5,a4
80017e58:	fcf407a3          	sb	a5,-49(s0)
    int i;

    /* set flag */
    timer->parent.flag  = flag;
80017e5c:	fdc42783          	lw	a5,-36(s0)
80017e60:	fcf44703          	lbu	a4,-49(s0)
80017e64:	00e78aa3          	sb	a4,21(a5)

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
80017e68:	fdc42783          	lw	a5,-36(s0)
80017e6c:	0157c783          	lbu	a5,21(a5)
80017e70:	ffe7f793          	andi	a5,a5,-2
80017e74:	0ff7f713          	zext.b	a4,a5
80017e78:	fdc42783          	lw	a5,-36(s0)
80017e7c:	00e78aa3          	sb	a4,21(a5)

    timer->timeout_func = timeout;
80017e80:	fdc42783          	lw	a5,-36(s0)
80017e84:	fd842703          	lw	a4,-40(s0)
80017e88:	02e7a423          	sw	a4,40(a5)
    timer->parameter    = parameter;
80017e8c:	fdc42783          	lw	a5,-36(s0)
80017e90:	fd442703          	lw	a4,-44(s0)
80017e94:	02e7a623          	sw	a4,44(a5)

    timer->timeout_tick = 0;
80017e98:	fdc42783          	lw	a5,-36(s0)
80017e9c:	0207aa23          	sw	zero,52(a5)
    timer->init_tick    = time;
80017ea0:	fdc42783          	lw	a5,-36(s0)
80017ea4:	fd042703          	lw	a4,-48(s0)
80017ea8:	02e7a823          	sw	a4,48(a5)

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
80017eac:	fe042623          	sw	zero,-20(s0)
80017eb0:	02c0006f          	j	80017edc <_timer_init+0xa8>
    {
        rt_list_init(&(timer->row[i]));
80017eb4:	fec42783          	lw	a5,-20(s0)
80017eb8:	00478793          	addi	a5,a5,4
80017ebc:	00379793          	slli	a5,a5,0x3
80017ec0:	fdc42703          	lw	a4,-36(s0)
80017ec4:	00f707b3          	add	a5,a4,a5
80017ec8:	00078513          	mv	a0,a5
80017ecc:	e35ff0ef          	jal	ra,80017d00 <rt_list_init>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
80017ed0:	fec42783          	lw	a5,-20(s0)
80017ed4:	00178793          	addi	a5,a5,1
80017ed8:	fef42623          	sw	a5,-20(s0)
80017edc:	fec42783          	lw	a5,-20(s0)
80017ee0:	fcf05ae3          	blez	a5,80017eb4 <_timer_init+0x80>
    }
}
80017ee4:	00000013          	nop
80017ee8:	00000013          	nop
80017eec:	03c12083          	lw	ra,60(sp)
80017ef0:	03812403          	lw	s0,56(sp)
80017ef4:	04010113          	addi	sp,sp,64
80017ef8:	00008067          	ret

80017efc <_timer_remove>:
 * @brief Remove the timer
 *
 * @param timer the point of the timer
 */
rt_inline void _timer_remove(rt_timer_t timer)
{
80017efc:	fd010113          	addi	sp,sp,-48
80017f00:	02112623          	sw	ra,44(sp)
80017f04:	02812423          	sw	s0,40(sp)
80017f08:	03010413          	addi	s0,sp,48
80017f0c:	fca42e23          	sw	a0,-36(s0)
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
80017f10:	fe042623          	sw	zero,-20(s0)
80017f14:	02c0006f          	j	80017f40 <_timer_remove+0x44>
    {
        rt_list_remove(&timer->row[i]);
80017f18:	fec42783          	lw	a5,-20(s0)
80017f1c:	00478793          	addi	a5,a5,4
80017f20:	00379793          	slli	a5,a5,0x3
80017f24:	fdc42703          	lw	a4,-36(s0)
80017f28:	00f707b3          	add	a5,a4,a5
80017f2c:	00078513          	mv	a0,a5
80017f30:	e69ff0ef          	jal	ra,80017d98 <rt_list_remove>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
80017f34:	fec42783          	lw	a5,-20(s0)
80017f38:	00178793          	addi	a5,a5,1
80017f3c:	fef42623          	sw	a5,-20(s0)
80017f40:	fec42783          	lw	a5,-20(s0)
80017f44:	fcf05ae3          	blez	a5,80017f18 <_timer_remove+0x1c>
    }
}
80017f48:	00000013          	nop
80017f4c:	00000013          	nop
80017f50:	02c12083          	lw	ra,44(sp)
80017f54:	02812403          	lw	s0,40(sp)
80017f58:	03010113          	addi	sp,sp,48
80017f5c:	00008067          	ret

80017f60 <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
80017f60:	fd010113          	addi	sp,sp,-48
80017f64:	02112623          	sw	ra,44(sp)
80017f68:	02812423          	sw	s0,40(sp)
80017f6c:	03010413          	addi	s0,sp,48
80017f70:	fea42623          	sw	a0,-20(s0)
80017f74:	feb42423          	sw	a1,-24(s0)
80017f78:	fec42223          	sw	a2,-28(s0)
80017f7c:	fed42023          	sw	a3,-32(s0)
80017f80:	fce42e23          	sw	a4,-36(s0)
80017f84:	fcf40da3          	sb	a5,-37(s0)
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(timeout != RT_NULL);
    RT_ASSERT(time < RT_TICK_MAX / 2);

    /* timer object initialization */
    rt_object_init(&(timer->parent), RT_Object_Class_Timer, name);
80017f88:	fec42783          	lw	a5,-20(s0)
80017f8c:	fe842603          	lw	a2,-24(s0)
80017f90:	00a00593          	li	a1,10
80017f94:	00078513          	mv	a0,a5
80017f98:	855fe0ef          	jal	ra,800167ec <rt_object_init>

    _timer_init(timer, timeout, parameter, time, flag);
80017f9c:	fdb44783          	lbu	a5,-37(s0)
80017fa0:	00078713          	mv	a4,a5
80017fa4:	fdc42683          	lw	a3,-36(s0)
80017fa8:	fe042603          	lw	a2,-32(s0)
80017fac:	fe442583          	lw	a1,-28(s0)
80017fb0:	fec42503          	lw	a0,-20(s0)
80017fb4:	e81ff0ef          	jal	ra,80017e34 <_timer_init>
}
80017fb8:	00000013          	nop
80017fbc:	02c12083          	lw	ra,44(sp)
80017fc0:	02812403          	lw	s0,40(sp)
80017fc4:	03010113          	addi	sp,sp,48
80017fc8:	00008067          	ret

80017fcc <rt_timer_detach>:
 * @param timer is the timer to be detached
 *
 * @return the status of detach
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
80017fcc:	fd010113          	addi	sp,sp,-48
80017fd0:	02112623          	sw	ra,44(sp)
80017fd4:	02812423          	sw	s0,40(sp)
80017fd8:	03010413          	addi	s0,sp,48
80017fdc:	fca42e23          	sw	a0,-36(s0)
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
    RT_ASSERT(rt_object_is_systemobject(&timer->parent));

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
80017fe0:	8c0e80ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80017fe4:	fea42623          	sw	a0,-20(s0)

    _timer_remove(timer);
80017fe8:	fdc42503          	lw	a0,-36(s0)
80017fec:	f11ff0ef          	jal	ra,80017efc <_timer_remove>
    /* stop timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
80017ff0:	fdc42783          	lw	a5,-36(s0)
80017ff4:	0157c783          	lbu	a5,21(a5)
80017ff8:	ffe7f793          	andi	a5,a5,-2
80017ffc:	0ff7f713          	zext.b	a4,a5
80018000:	fdc42783          	lw	a5,-36(s0)
80018004:	00e78aa3          	sb	a4,21(a5)

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
80018008:	fec42503          	lw	a0,-20(s0)
8001800c:	89ce80ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    rt_object_detach(&(timer->parent));
80018010:	fdc42783          	lw	a5,-36(s0)
80018014:	00078513          	mv	a0,a5
80018018:	88dfe0ef          	jal	ra,800168a4 <rt_object_detach>

    return RT_EOK;
8001801c:	00000793          	li	a5,0
}
80018020:	00078513          	mv	a0,a5
80018024:	02c12083          	lw	ra,44(sp)
80018028:	02812403          	lw	s0,40(sp)
8001802c:	03010113          	addi	sp,sp,48
80018030:	00008067          	ret

80018034 <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
80018034:	fc010113          	addi	sp,sp,-64
80018038:	02112e23          	sw	ra,60(sp)
8001803c:	02812c23          	sw	s0,56(sp)
80018040:	04010413          	addi	s0,sp,64
80018044:	fca42623          	sw	a0,-52(s0)

    /* parameter check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    need_schedule = RT_FALSE;
80018048:	fe042223          	sw	zero,-28(s0)

    /* stop timer firstly */
    level = rt_hw_interrupt_disable();
8001804c:	854e80ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
80018050:	fea42023          	sw	a0,-32(s0)
    /* remove timer from list */
    _timer_remove(timer);
80018054:	fcc42503          	lw	a0,-52(s0)
80018058:	ea5ff0ef          	jal	ra,80017efc <_timer_remove>
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
8001805c:	fcc42783          	lw	a5,-52(s0)
80018060:	0157c783          	lbu	a5,21(a5)
80018064:	ffe7f793          	andi	a5,a5,-2
80018068:	0ff7f713          	zext.b	a4,a5
8001806c:	fcc42783          	lw	a5,-52(s0)
80018070:	00e78aa3          	sb	a4,21(a5)

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(timer->parent)));
80018074:	0006c797          	auipc	a5,0x6c
80018078:	ff478793          	addi	a5,a5,-12 # 80084068 <rt_object_take_hook>
8001807c:	0007a783          	lw	a5,0(a5)
80018080:	00078e63          	beqz	a5,8001809c <rt_timer_start+0x68>
80018084:	0006c797          	auipc	a5,0x6c
80018088:	fe478793          	addi	a5,a5,-28 # 80084068 <rt_object_take_hook>
8001808c:	0007a783          	lw	a5,0(a5)
80018090:	fcc42703          	lw	a4,-52(s0)
80018094:	00070513          	mv	a0,a4
80018098:	000780e7          	jalr	a5

    timer->timeout_tick = rt_tick_get() + timer->init_tick;
8001809c:	cb0fa0ef          	jal	ra,8001254c <rt_tick_get>
800180a0:	00050713          	mv	a4,a0
800180a4:	fcc42783          	lw	a5,-52(s0)
800180a8:	0307a783          	lw	a5,48(a5)
800180ac:	00f70733          	add	a4,a4,a5
800180b0:	fcc42783          	lw	a5,-52(s0)
800180b4:	02e7aa23          	sw	a4,52(a5)
    }
    else
#endif /* RT_USING_TIMER_SOFT */
    {
        /* insert timer to system timer list */
        timer_list = _timer_list;
800180b8:	0006c797          	auipc	a5,0x6c
800180bc:	fdc78793          	addi	a5,a5,-36 # 80084094 <_timer_list>
800180c0:	fcf42e23          	sw	a5,-36(s0)
    }

    row_head[0]  = &timer_list[0];
800180c4:	fdc42783          	lw	a5,-36(s0)
800180c8:	fcf42823          	sw	a5,-48(s0)
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
800180cc:	fe042623          	sw	zero,-20(s0)
800180d0:	11c0006f          	j	800181ec <rt_timer_start+0x1b8>
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
800180d4:	fec42783          	lw	a5,-20(s0)
800180d8:	00279793          	slli	a5,a5,0x2
800180dc:	ff078793          	addi	a5,a5,-16
800180e0:	008787b3          	add	a5,a5,s0
800180e4:	fe07a783          	lw	a5,-32(a5)
800180e8:	0007a783          	lw	a5,0(a5)
800180ec:	fcf42c23          	sw	a5,-40(s0)

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
800180f0:	fec42783          	lw	a5,-20(s0)
800180f4:	00379793          	slli	a5,a5,0x3
800180f8:	02078793          	addi	a5,a5,32
800180fc:	40f007b3          	neg	a5,a5
80018100:	fd842703          	lw	a4,-40(s0)
80018104:	00f707b3          	add	a5,a4,a5
80018108:	fcf42a23          	sw	a5,-44(s0)
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
8001810c:	fd442783          	lw	a5,-44(s0)
80018110:	0347a703          	lw	a4,52(a5)
80018114:	fcc42783          	lw	a5,-52(s0)
80018118:	0347a783          	lw	a5,52(a5)
8001811c:	02f70463          	beq	a4,a5,80018144 <rt_timer_start+0x110>
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
80018120:	fd442783          	lw	a5,-44(s0)
80018124:	0347a703          	lw	a4,52(a5)
80018128:	fcc42783          	lw	a5,-52(s0)
8001812c:	0347a783          	lw	a5,52(a5)
80018130:	40f70733          	sub	a4,a4,a5
80018134:	800007b7          	lui	a5,0x80000
80018138:	ffe78793          	addi	a5,a5,-2 # 7ffffffe <__STACKSIZE__+0x7fffbffe>
8001813c:	06e7f463          	bgeu	a5,a4,800181a4 <rt_timer_start+0x170>
80018140:	0080006f          	j	80018148 <rt_timer_start+0x114>
                continue;
80018144:	00000013          	nop
             row_head[row_lvl]  = row_head[row_lvl]->next)
80018148:	fec42783          	lw	a5,-20(s0)
8001814c:	00279793          	slli	a5,a5,0x2
80018150:	ff078793          	addi	a5,a5,-16
80018154:	008787b3          	add	a5,a5,s0
80018158:	fe07a783          	lw	a5,-32(a5)
8001815c:	0007a703          	lw	a4,0(a5)
80018160:	fec42783          	lw	a5,-20(s0)
80018164:	00279793          	slli	a5,a5,0x2
80018168:	ff078793          	addi	a5,a5,-16
8001816c:	008787b3          	add	a5,a5,s0
80018170:	fee7a023          	sw	a4,-32(a5)
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
80018174:	fec42783          	lw	a5,-20(s0)
80018178:	00279793          	slli	a5,a5,0x2
8001817c:	ff078793          	addi	a5,a5,-16
80018180:	008787b3          	add	a5,a5,s0
80018184:	fe07a703          	lw	a4,-32(a5)
80018188:	fec42783          	lw	a5,-20(s0)
8001818c:	00379793          	slli	a5,a5,0x3
80018190:	fdc42683          	lw	a3,-36(s0)
80018194:	00f687b3          	add	a5,a3,a5
80018198:	0047a783          	lw	a5,4(a5)
8001819c:	f2f71ce3          	bne	a4,a5,800180d4 <rt_timer_start+0xa0>
800181a0:	0080006f          	j	800181a8 <rt_timer_start+0x174>
            {
                break;
800181a4:	00000013          	nop
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
800181a8:	fec42783          	lw	a5,-20(s0)
800181ac:	02078a63          	beqz	a5,800181e0 <rt_timer_start+0x1ac>
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
800181b0:	fec42783          	lw	a5,-20(s0)
800181b4:	00279793          	slli	a5,a5,0x2
800181b8:	ff078793          	addi	a5,a5,-16
800181bc:	008787b3          	add	a5,a5,s0
800181c0:	fe07a703          	lw	a4,-32(a5)
800181c4:	fec42783          	lw	a5,-20(s0)
800181c8:	00178793          	addi	a5,a5,1
800181cc:	00870713          	addi	a4,a4,8
800181d0:	00279793          	slli	a5,a5,0x2
800181d4:	ff078793          	addi	a5,a5,-16
800181d8:	008787b3          	add	a5,a5,s0
800181dc:	fee7a023          	sw	a4,-32(a5)
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
800181e0:	fec42783          	lw	a5,-20(s0)
800181e4:	00178793          	addi	a5,a5,1
800181e8:	fef42623          	sw	a5,-20(s0)
800181ec:	fec42783          	lw	a5,-20(s0)
800181f0:	f80782e3          	beqz	a5,80018174 <rt_timer_start+0x140>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
800181f4:	0006c797          	auipc	a5,0x6c
800181f8:	eb078793          	addi	a5,a5,-336 # 800840a4 <random_nr.0>
800181fc:	0007a783          	lw	a5,0(a5)
80018200:	00178713          	addi	a4,a5,1
80018204:	0006c797          	auipc	a5,0x6c
80018208:	ea078793          	addi	a5,a5,-352 # 800840a4 <random_nr.0>
8001820c:	00e7a023          	sw	a4,0(a5)
    tst_nr = random_nr;
80018210:	0006c797          	auipc	a5,0x6c
80018214:	e9478793          	addi	a5,a5,-364 # 800840a4 <random_nr.0>
80018218:	0007a783          	lw	a5,0(a5)
8001821c:	fef42423          	sw	a5,-24(s0)

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
80018220:	fd042703          	lw	a4,-48(s0)
80018224:	fcc42783          	lw	a5,-52(s0)
80018228:	02078793          	addi	a5,a5,32
8001822c:	00078593          	mv	a1,a5
80018230:	00070513          	mv	a0,a4
80018234:	b09ff0ef          	jal	ra,80017d3c <rt_list_insert_after>
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
80018238:	00200793          	li	a5,2
8001823c:	fef42623          	sw	a5,-20(s0)
80018240:	06c0006f          	j	800182ac <rt_timer_start+0x278>
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
80018244:	fe842783          	lw	a5,-24(s0)
80018248:	0037f793          	andi	a5,a5,3
8001824c:	06079863          	bnez	a5,800182bc <rt_timer_start+0x288>
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
80018250:	00100713          	li	a4,1
80018254:	fec42783          	lw	a5,-20(s0)
80018258:	40f707b3          	sub	a5,a4,a5
8001825c:	00279793          	slli	a5,a5,0x2
80018260:	ff078793          	addi	a5,a5,-16
80018264:	008787b3          	add	a5,a5,s0
80018268:	fe07a683          	lw	a3,-32(a5)
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
8001826c:	00100713          	li	a4,1
80018270:	fec42783          	lw	a5,-20(s0)
80018274:	40f707b3          	sub	a5,a4,a5
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
80018278:	00478793          	addi	a5,a5,4
8001827c:	00379793          	slli	a5,a5,0x3
80018280:	fcc42703          	lw	a4,-52(s0)
80018284:	00f707b3          	add	a5,a4,a5
80018288:	00078593          	mv	a1,a5
8001828c:	00068513          	mv	a0,a3
80018290:	aadff0ef          	jal	ra,80017d3c <rt_list_insert_after>
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
80018294:	fe842783          	lw	a5,-24(s0)
80018298:	0027d793          	srli	a5,a5,0x2
8001829c:	fef42423          	sw	a5,-24(s0)
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
800182a0:	fec42783          	lw	a5,-20(s0)
800182a4:	00178793          	addi	a5,a5,1
800182a8:	fef42623          	sw	a5,-20(s0)
800182ac:	fec42703          	lw	a4,-20(s0)
800182b0:	00100793          	li	a5,1
800182b4:	f8e7f8e3          	bgeu	a5,a4,80018244 <rt_timer_start+0x210>
800182b8:	0080006f          	j	800182c0 <rt_timer_start+0x28c>
            break;
800182bc:	00000013          	nop
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
800182c0:	fcc42783          	lw	a5,-52(s0)
800182c4:	0157c783          	lbu	a5,21(a5)
800182c8:	0017e793          	ori	a5,a5,1
800182cc:	0ff7f713          	zext.b	a4,a5
800182d0:	fcc42783          	lw	a5,-52(s0)
800182d4:	00e78aa3          	sb	a4,21(a5)
        }
    }
#endif /* RT_USING_TIMER_SOFT */

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
800182d8:	fe042503          	lw	a0,-32(s0)
800182dc:	dcde70ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    if (need_schedule)
800182e0:	fe442783          	lw	a5,-28(s0)
800182e4:	00078463          	beqz	a5,800182ec <rt_timer_start+0x2b8>
    {
        rt_schedule();
800182e8:	b99fe0ef          	jal	ra,80016e80 <rt_schedule>
    }

    return RT_EOK;
800182ec:	00000793          	li	a5,0
}
800182f0:	00078513          	mv	a0,a5
800182f4:	03c12083          	lw	ra,60(sp)
800182f8:	03812403          	lw	s0,56(sp)
800182fc:	04010113          	addi	sp,sp,64
80018300:	00008067          	ret

80018304 <rt_timer_stop>:
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
80018304:	fd010113          	addi	sp,sp,-48
80018308:	02112623          	sw	ra,44(sp)
8001830c:	02812423          	sw	s0,40(sp)
80018310:	03010413          	addi	s0,sp,48
80018314:	fca42e23          	sw	a0,-36(s0)

    /* parameter check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
80018318:	fdc42783          	lw	a5,-36(s0)
8001831c:	0157c783          	lbu	a5,21(a5)
80018320:	0017f793          	andi	a5,a5,1
80018324:	00079663          	bnez	a5,80018330 <rt_timer_stop+0x2c>
        return -RT_ERROR;
80018328:	fff00793          	li	a5,-1
8001832c:	0600006f          	j	8001838c <rt_timer_stop+0x88>

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(timer->parent)));
80018330:	0006c797          	auipc	a5,0x6c
80018334:	d3c78793          	addi	a5,a5,-708 # 8008406c <rt_object_put_hook>
80018338:	0007a783          	lw	a5,0(a5)
8001833c:	00078e63          	beqz	a5,80018358 <rt_timer_stop+0x54>
80018340:	0006c797          	auipc	a5,0x6c
80018344:	d2c78793          	addi	a5,a5,-724 # 8008406c <rt_object_put_hook>
80018348:	0007a783          	lw	a5,0(a5)
8001834c:	fdc42703          	lw	a4,-36(s0)
80018350:	00070513          	mv	a0,a4
80018354:	000780e7          	jalr	a5

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
80018358:	d49e70ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
8001835c:	fea42623          	sw	a0,-20(s0)

    _timer_remove(timer);
80018360:	fdc42503          	lw	a0,-36(s0)
80018364:	b99ff0ef          	jal	ra,80017efc <_timer_remove>
    /* change status */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
80018368:	fdc42783          	lw	a5,-36(s0)
8001836c:	0157c783          	lbu	a5,21(a5)
80018370:	ffe7f793          	andi	a5,a5,-2
80018374:	0ff7f713          	zext.b	a4,a5
80018378:	fdc42783          	lw	a5,-36(s0)
8001837c:	00e78aa3          	sb	a4,21(a5)

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
80018380:	fec42503          	lw	a0,-20(s0)
80018384:	d25e70ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    return RT_EOK;
80018388:	00000793          	li	a5,0
}
8001838c:	00078513          	mv	a0,a5
80018390:	02c12083          	lw	ra,44(sp)
80018394:	02812403          	lw	s0,40(sp)
80018398:	03010113          	addi	sp,sp,48
8001839c:	00008067          	ret

800183a0 <rt_timer_control>:
 * @param arg the argument
 *
 * @return the statu of control
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
800183a0:	fd010113          	addi	sp,sp,-48
800183a4:	02112623          	sw	ra,44(sp)
800183a8:	02812423          	sw	s0,40(sp)
800183ac:	03010413          	addi	s0,sp,48
800183b0:	fca42e23          	sw	a0,-36(s0)
800183b4:	fcb42c23          	sw	a1,-40(s0)
800183b8:	fcc42a23          	sw	a2,-44(s0)

    /* parameter check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    level = rt_hw_interrupt_disable();
800183bc:	ce5e70ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
800183c0:	fea42623          	sw	a0,-20(s0)
    switch (cmd)
800183c4:	fd842703          	lw	a4,-40(s0)
800183c8:	00500793          	li	a5,5
800183cc:	0ce7e663          	bltu	a5,a4,80018498 <rt_timer_control+0xf8>
800183d0:	fd842783          	lw	a5,-40(s0)
800183d4:	00279713          	slli	a4,a5,0x2
800183d8:	00010797          	auipc	a5,0x10
800183dc:	33c78793          	addi	a5,a5,828 # 80028714 <__fsym_memtrace_desc+0x20>
800183e0:	00f707b3          	add	a5,a4,a5
800183e4:	0007a703          	lw	a4,0(a5)
800183e8:	00010797          	auipc	a5,0x10
800183ec:	32c78793          	addi	a5,a5,812 # 80028714 <__fsym_memtrace_desc+0x20>
800183f0:	00f707b3          	add	a5,a4,a5
800183f4:	00078067          	jr	a5
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
800183f8:	fdc42783          	lw	a5,-36(s0)
800183fc:	0307a703          	lw	a4,48(a5)
80018400:	fd442783          	lw	a5,-44(s0)
80018404:	00e7a023          	sw	a4,0(a5)
        break;
80018408:	0940006f          	j	8001849c <rt_timer_control+0xfc>

    case RT_TIMER_CTRL_SET_TIME:
        RT_ASSERT((*(rt_tick_t *)arg) < RT_TICK_MAX / 2);
        timer->init_tick = *(rt_tick_t *)arg;
8001840c:	fd442783          	lw	a5,-44(s0)
80018410:	0007a703          	lw	a4,0(a5)
80018414:	fdc42783          	lw	a5,-36(s0)
80018418:	02e7a823          	sw	a4,48(a5)
        break;
8001841c:	0800006f          	j	8001849c <rt_timer_control+0xfc>

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
80018420:	fdc42783          	lw	a5,-36(s0)
80018424:	0157c783          	lbu	a5,21(a5)
80018428:	ffd7f793          	andi	a5,a5,-3
8001842c:	0ff7f713          	zext.b	a4,a5
80018430:	fdc42783          	lw	a5,-36(s0)
80018434:	00e78aa3          	sb	a4,21(a5)
        break;
80018438:	0640006f          	j	8001849c <rt_timer_control+0xfc>

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
8001843c:	fdc42783          	lw	a5,-36(s0)
80018440:	0157c783          	lbu	a5,21(a5)
80018444:	0027e793          	ori	a5,a5,2
80018448:	0ff7f713          	zext.b	a4,a5
8001844c:	fdc42783          	lw	a5,-36(s0)
80018450:	00e78aa3          	sb	a4,21(a5)
        break;
80018454:	0480006f          	j	8001849c <rt_timer_control+0xfc>

    case RT_TIMER_CTRL_GET_STATE:
        if(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
80018458:	fdc42783          	lw	a5,-36(s0)
8001845c:	0157c783          	lbu	a5,21(a5)
80018460:	0017f793          	andi	a5,a5,1
80018464:	00078a63          	beqz	a5,80018478 <rt_timer_control+0xd8>
        {
            /*timer is start and run*/
            *(rt_uint32_t *)arg = RT_TIMER_FLAG_ACTIVATED;
80018468:	fd442783          	lw	a5,-44(s0)
8001846c:	00100713          	li	a4,1
80018470:	00e7a023          	sw	a4,0(a5)
        else
        {
            /*timer is stop*/
            *(rt_uint32_t *)arg = RT_TIMER_FLAG_DEACTIVATED;
        }
        break;
80018474:	0280006f          	j	8001849c <rt_timer_control+0xfc>
            *(rt_uint32_t *)arg = RT_TIMER_FLAG_DEACTIVATED;
80018478:	fd442783          	lw	a5,-44(s0)
8001847c:	0007a023          	sw	zero,0(a5)
        break;
80018480:	01c0006f          	j	8001849c <rt_timer_control+0xfc>

    case RT_TIMER_CTRL_GET_REMAIN_TIME:
        *(rt_tick_t *)arg =  timer->timeout_tick;
80018484:	fdc42783          	lw	a5,-36(s0)
80018488:	0347a703          	lw	a4,52(a5)
8001848c:	fd442783          	lw	a5,-44(s0)
80018490:	00e7a023          	sw	a4,0(a5)
        break;
80018494:	0080006f          	j	8001849c <rt_timer_control+0xfc>

    default:
        break;
80018498:	00000013          	nop
    }
    rt_hw_interrupt_enable(level);
8001849c:	fec42503          	lw	a0,-20(s0)
800184a0:	c09e70ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    return RT_EOK;
800184a4:	00000793          	li	a5,0
}
800184a8:	00078513          	mv	a0,a5
800184ac:	02c12083          	lw	ra,44(sp)
800184b0:	02812403          	lw	s0,40(sp)
800184b4:	03010113          	addi	sp,sp,48
800184b8:	00008067          	ret

800184bc <rt_timer_check>:
 *        the corresponding timeout function will be invoked.
 *
 * @note This function shall be invoked in operating system timer interrupt.
 */
void rt_timer_check(void)
{
800184bc:	fd010113          	addi	sp,sp,-48
800184c0:	02112623          	sw	ra,44(sp)
800184c4:	02812423          	sw	s0,40(sp)
800184c8:	03010413          	addi	s0,sp,48
    struct rt_timer *t;
    rt_tick_t current_tick;
    rt_base_t level;
    rt_list_t list;

    rt_list_init(&list);
800184cc:	fdc40793          	addi	a5,s0,-36
800184d0:	00078513          	mv	a0,a5
800184d4:	82dff0ef          	jal	ra,80017d00 <rt_list_init>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check enter\n"));

    current_tick = rt_tick_get();
800184d8:	874fa0ef          	jal	ra,8001254c <rt_tick_get>
800184dc:	fea42623          	sw	a0,-20(s0)

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
800184e0:	bc1e70ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
800184e4:	fea42423          	sw	a0,-24(s0)

    while (!rt_list_isempty(&_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
800184e8:	14c0006f          	j	80018634 <rt_timer_check+0x178>
    {
        t = rt_list_entry(_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
800184ec:	0006c797          	auipc	a5,0x6c
800184f0:	ba878793          	addi	a5,a5,-1112 # 80084094 <_timer_list>
800184f4:	0007a783          	lw	a5,0(a5)
800184f8:	fe078793          	addi	a5,a5,-32
800184fc:	fef42223          	sw	a5,-28(s0)

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
80018500:	fe442783          	lw	a5,-28(s0)
80018504:	0347a783          	lw	a5,52(a5)
80018508:	fec42703          	lw	a4,-20(s0)
8001850c:	40f70733          	sub	a4,a4,a5
80018510:	800007b7          	lui	a5,0x80000
80018514:	ffe78793          	addi	a5,a5,-2 # 7ffffffe <__STACKSIZE__+0x7fffbffe>
80018518:	12e7ea63          	bltu	a5,a4,8001864c <rt_timer_check+0x190>
        {
            RT_OBJECT_HOOK_CALL(rt_timer_enter_hook, (t));
8001851c:	0006c797          	auipc	a5,0x6c
80018520:	b8078793          	addi	a5,a5,-1152 # 8008409c <rt_timer_enter_hook>
80018524:	0007a783          	lw	a5,0(a5)
80018528:	00078c63          	beqz	a5,80018540 <rt_timer_check+0x84>
8001852c:	0006c797          	auipc	a5,0x6c
80018530:	b7078793          	addi	a5,a5,-1168 # 8008409c <rt_timer_enter_hook>
80018534:	0007a783          	lw	a5,0(a5)
80018538:	fe442503          	lw	a0,-28(s0)
8001853c:	000780e7          	jalr	a5

            /* remove timer from timer list firstly */
            _timer_remove(t);
80018540:	fe442503          	lw	a0,-28(s0)
80018544:	9b9ff0ef          	jal	ra,80017efc <_timer_remove>
            if (!(t->parent.flag & RT_TIMER_FLAG_PERIODIC))
80018548:	fe442783          	lw	a5,-28(s0)
8001854c:	0157c783          	lbu	a5,21(a5)
80018550:	0027f793          	andi	a5,a5,2
80018554:	00079e63          	bnez	a5,80018570 <rt_timer_check+0xb4>
            {
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
80018558:	fe442783          	lw	a5,-28(s0)
8001855c:	0157c783          	lbu	a5,21(a5)
80018560:	ffe7f793          	andi	a5,a5,-2
80018564:	0ff7f713          	zext.b	a4,a5
80018568:	fe442783          	lw	a5,-28(s0)
8001856c:	00e78aa3          	sb	a4,21(a5)
            }
            /* add timer to temporary list  */
            rt_list_insert_after(&list, &(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
80018570:	fe442783          	lw	a5,-28(s0)
80018574:	02078713          	addi	a4,a5,32
80018578:	fdc40793          	addi	a5,s0,-36
8001857c:	00070593          	mv	a1,a4
80018580:	00078513          	mv	a0,a5
80018584:	fb8ff0ef          	jal	ra,80017d3c <rt_list_insert_after>
            /* call timeout function */
            t->timeout_func(t->parameter);
80018588:	fe442783          	lw	a5,-28(s0)
8001858c:	0287a783          	lw	a5,40(a5)
80018590:	fe442703          	lw	a4,-28(s0)
80018594:	02c72703          	lw	a4,44(a4)
80018598:	00070513          	mv	a0,a4
8001859c:	000780e7          	jalr	a5

            /* re-get tick */
            current_tick = rt_tick_get();
800185a0:	fadf90ef          	jal	ra,8001254c <rt_tick_get>
800185a4:	fea42623          	sw	a0,-20(s0)

            RT_OBJECT_HOOK_CALL(rt_timer_exit_hook, (t));
800185a8:	0006c797          	auipc	a5,0x6c
800185ac:	af878793          	addi	a5,a5,-1288 # 800840a0 <rt_timer_exit_hook>
800185b0:	0007a783          	lw	a5,0(a5)
800185b4:	00078c63          	beqz	a5,800185cc <rt_timer_check+0x110>
800185b8:	0006c797          	auipc	a5,0x6c
800185bc:	ae878793          	addi	a5,a5,-1304 # 800840a0 <rt_timer_exit_hook>
800185c0:	0007a783          	lw	a5,0(a5)
800185c4:	fe442503          	lw	a0,-28(s0)
800185c8:	000780e7          	jalr	a5
            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* Check whether the timer object is detached or started again */
            if (rt_list_isempty(&list))
800185cc:	fdc40793          	addi	a5,s0,-36
800185d0:	00078513          	mv	a0,a5
800185d4:	829ff0ef          	jal	ra,80017dfc <rt_list_isempty>
800185d8:	00050793          	mv	a5,a0
800185dc:	00078463          	beqz	a5,800185e4 <rt_timer_check+0x128>
            {
                continue;
800185e0:	0540006f          	j	80018634 <rt_timer_check+0x178>
            }
            rt_list_remove(&(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
800185e4:	fe442783          	lw	a5,-28(s0)
800185e8:	02078793          	addi	a5,a5,32
800185ec:	00078513          	mv	a0,a5
800185f0:	fa8ff0ef          	jal	ra,80017d98 <rt_list_remove>
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
800185f4:	fe442783          	lw	a5,-28(s0)
800185f8:	0157c783          	lbu	a5,21(a5)
800185fc:	0027f793          	andi	a5,a5,2
80018600:	02078a63          	beqz	a5,80018634 <rt_timer_check+0x178>
                (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
80018604:	fe442783          	lw	a5,-28(s0)
80018608:	0157c783          	lbu	a5,21(a5)
8001860c:	0017f793          	andi	a5,a5,1
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
80018610:	02078263          	beqz	a5,80018634 <rt_timer_check+0x178>
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
80018614:	fe442783          	lw	a5,-28(s0)
80018618:	0157c783          	lbu	a5,21(a5)
8001861c:	ffe7f793          	andi	a5,a5,-2
80018620:	0ff7f713          	zext.b	a4,a5
80018624:	fe442783          	lw	a5,-28(s0)
80018628:	00e78aa3          	sb	a4,21(a5)
                rt_timer_start(t);
8001862c:	fe442503          	lw	a0,-28(s0)
80018630:	a05ff0ef          	jal	ra,80018034 <rt_timer_start>
    while (!rt_list_isempty(&_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
80018634:	0006c517          	auipc	a0,0x6c
80018638:	a6050513          	addi	a0,a0,-1440 # 80084094 <_timer_list>
8001863c:	fc0ff0ef          	jal	ra,80017dfc <rt_list_isempty>
80018640:	00050793          	mv	a5,a0
80018644:	ea0784e3          	beqz	a5,800184ec <rt_timer_check+0x30>
80018648:	0080006f          	j	80018650 <rt_timer_check+0x194>
            }
        }
        else break;
8001864c:	00000013          	nop
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
80018650:	fe842503          	lw	a0,-24(s0)
80018654:	a55e70ef          	jal	ra,800000a8 <rt_hw_interrupt_enable>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check leave\n"));
}
80018658:	00000013          	nop
8001865c:	02c12083          	lw	ra,44(sp)
80018660:	02812403          	lw	s0,40(sp)
80018664:	03010113          	addi	sp,sp,48
80018668:	00008067          	ret

8001866c <rt_system_timer_init>:
 * @ingroup SystemInit
 *
 * @brief This function will initialize system timer
 */
void rt_system_timer_init(void)
{
8001866c:	fe010113          	addi	sp,sp,-32
80018670:	00112e23          	sw	ra,28(sp)
80018674:	00812c23          	sw	s0,24(sp)
80018678:	02010413          	addi	s0,sp,32
    rt_size_t i;

    for (i = 0; i < sizeof(_timer_list) / sizeof(_timer_list[0]); i++)
8001867c:	fe042623          	sw	zero,-20(s0)
80018680:	02c0006f          	j	800186ac <rt_system_timer_init+0x40>
    {
        rt_list_init(_timer_list + i);
80018684:	fec42783          	lw	a5,-20(s0)
80018688:	00379713          	slli	a4,a5,0x3
8001868c:	0006c797          	auipc	a5,0x6c
80018690:	a0878793          	addi	a5,a5,-1528 # 80084094 <_timer_list>
80018694:	00f707b3          	add	a5,a4,a5
80018698:	00078513          	mv	a0,a5
8001869c:	e64ff0ef          	jal	ra,80017d00 <rt_list_init>
    for (i = 0; i < sizeof(_timer_list) / sizeof(_timer_list[0]); i++)
800186a0:	fec42783          	lw	a5,-20(s0)
800186a4:	00178793          	addi	a5,a5,1
800186a8:	fef42623          	sw	a5,-20(s0)
800186ac:	fec42783          	lw	a5,-20(s0)
800186b0:	fc078ae3          	beqz	a5,80018684 <rt_system_timer_init+0x18>
    }
}
800186b4:	00000013          	nop
800186b8:	00000013          	nop
800186bc:	01c12083          	lw	ra,28(sp)
800186c0:	01812403          	lw	s0,24(sp)
800186c4:	02010113          	addi	sp,sp,32
800186c8:	00008067          	ret

800186cc <rt_system_timer_thread_init>:
 * @ingroup SystemInit
 *
 * @brief This function will initialize system timer thread
 */
void rt_system_timer_thread_init(void)
{
800186cc:	ff010113          	addi	sp,sp,-16
800186d0:	00812623          	sw	s0,12(sp)
800186d4:	01010413          	addi	s0,sp,16
                   10);

    /* startup */
    rt_thread_startup(&_timer_thread);
#endif /* RT_USING_TIMER_SOFT */
}
800186d8:	00000013          	nop
800186dc:	00c12403          	lw	s0,12(sp)
800186e0:	01010113          	addi	sp,sp,16
800186e4:	00008067          	ret

800186e8 <calc_func>:
                               list_cmp      cmp,
                               core_results *res);

ee_s16
calc_func(ee_s16 *pdata, core_results *res)
{
800186e8:	fd010113          	addi	sp,sp,-48
800186ec:	02112623          	sw	ra,44(sp)
800186f0:	02812423          	sw	s0,40(sp)
800186f4:	03010413          	addi	s0,sp,48
800186f8:	fca42e23          	sw	a0,-36(s0)
800186fc:	fcb42c23          	sw	a1,-40(s0)
    ee_s16 data = *pdata;
80018700:	fdc42783          	lw	a5,-36(s0)
80018704:	0007d783          	lhu	a5,0(a5)
80018708:	fef41523          	sh	a5,-22(s0)
    ee_s16 retval;
    ee_u8  optype
        = (data >> 7)
          & 1;  /* bit 7 indicates if the function result has been cached */
8001870c:	fea41783          	lh	a5,-22(s0)
80018710:	4077d793          	srai	a5,a5,0x7
80018714:	01079793          	slli	a5,a5,0x10
80018718:	4107d793          	srai	a5,a5,0x10
8001871c:	0ff7f793          	zext.b	a5,a5
    ee_u8  optype
80018720:	0017f793          	andi	a5,a5,1
80018724:	fef404a3          	sb	a5,-23(s0)
    if (optype) /* if cached, use cache */
80018728:	fe944783          	lbu	a5,-23(s0)
8001872c:	00078c63          	beqz	a5,80018744 <calc_func+0x5c>
        return (data & 0x007f);
80018730:	fea45783          	lhu	a5,-22(s0)
80018734:	07f7f793          	andi	a5,a5,127
80018738:	01079793          	slli	a5,a5,0x10
8001873c:	4107d793          	srai	a5,a5,0x10
80018740:	18c0006f          	j	800188cc <calc_func+0x1e4>
    else
    {                             /* otherwise calculate and cache the result */
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
80018744:	fea45783          	lhu	a5,-22(s0)
80018748:	0077f793          	andi	a5,a5,7
8001874c:	fef41323          	sh	a5,-26(s0)
        ee_s16 dtype
            = ((data >> 3)
               & 0xf);       /* bits 3-6 is specific data for the operation */
80018750:	fea41783          	lh	a5,-22(s0)
80018754:	4037d793          	srai	a5,a5,0x3
80018758:	01079793          	slli	a5,a5,0x10
8001875c:	4107d793          	srai	a5,a5,0x10
        ee_s16 dtype
80018760:	00f7f793          	andi	a5,a5,15
80018764:	fef41623          	sh	a5,-20(s0)
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
80018768:	fec45783          	lhu	a5,-20(s0)
8001876c:	00479793          	slli	a5,a5,0x4
80018770:	01079793          	slli	a5,a5,0x10
80018774:	4107d793          	srai	a5,a5,0x10
80018778:	fec45703          	lhu	a4,-20(s0)
8001877c:	00e7e7b3          	or	a5,a5,a4
80018780:	fef41623          	sh	a5,-20(s0)
        switch (flag)
80018784:	fe641783          	lh	a5,-26(s0)
80018788:	00078863          	beqz	a5,80018798 <calc_func+0xb0>
8001878c:	00100713          	li	a4,1
80018790:	06e78863          	beq	a5,a4,80018800 <calc_func+0x118>
80018794:	0b40006f          	j	80018848 <calc_func+0x160>
        {
            case 0:
                if (dtype < 0x22) /* set min period for bit corruption */
80018798:	fec41703          	lh	a4,-20(s0)
8001879c:	02100793          	li	a5,33
800187a0:	00e7c663          	blt	a5,a4,800187ac <calc_func+0xc4>
                    dtype = 0x22;
800187a4:	02200793          	li	a5,34
800187a8:	fef41623          	sh	a5,-20(s0)
                retval = core_bench_state(res->size,
800187ac:	fd842783          	lw	a5,-40(s0)
800187b0:	0187a503          	lw	a0,24(a5)
                                          res->memblock[3],
800187b4:	fd842783          	lw	a5,-40(s0)
800187b8:	0147a583          	lw	a1,20(a5)
                retval = core_bench_state(res->size,
800187bc:	fd842783          	lw	a5,-40(s0)
800187c0:	00079603          	lh	a2,0(a5)
800187c4:	fd842783          	lw	a5,-40(s0)
800187c8:	00279683          	lh	a3,2(a5)
800187cc:	fd842783          	lw	a5,-40(s0)
800187d0:	0387d783          	lhu	a5,56(a5)
800187d4:	fec41703          	lh	a4,-20(s0)
800187d8:	161020ef          	jal	ra,8001b138 <core_bench_state>
800187dc:	00050793          	mv	a5,a0
800187e0:	fef41723          	sh	a5,-18(s0)
                                          res->seed1,
                                          res->seed2,
                                          dtype,
                                          res->crc);
                if (res->crcstate == 0)
800187e4:	fd842783          	lw	a5,-40(s0)
800187e8:	03e7d783          	lhu	a5,62(a5)
800187ec:	06079463          	bnez	a5,80018854 <calc_func+0x16c>
                    res->crcstate = retval;
800187f0:	fee45703          	lhu	a4,-18(s0)
800187f4:	fd842783          	lw	a5,-40(s0)
800187f8:	02e79f23          	sh	a4,62(a5)
                break;
800187fc:	0580006f          	j	80018854 <calc_func+0x16c>
            case 1:
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
80018800:	fd842783          	lw	a5,-40(s0)
80018804:	02878713          	addi	a4,a5,40
80018808:	fd842783          	lw	a5,-40(s0)
8001880c:	0387d683          	lhu	a3,56(a5)
80018810:	fec41783          	lh	a5,-20(s0)
80018814:	00068613          	mv	a2,a3
80018818:	00078593          	mv	a1,a5
8001881c:	00070513          	mv	a0,a4
80018820:	4e1010ef          	jal	ra,8001a500 <core_bench_matrix>
80018824:	00050793          	mv	a5,a0
80018828:	fef41723          	sh	a5,-18(s0)
                if (res->crcmatrix == 0)
8001882c:	fd842783          	lw	a5,-40(s0)
80018830:	03c7d783          	lhu	a5,60(a5)
80018834:	02079463          	bnez	a5,8001885c <calc_func+0x174>
                    res->crcmatrix = retval;
80018838:	fee45703          	lhu	a4,-18(s0)
8001883c:	fd842783          	lw	a5,-40(s0)
80018840:	02e79e23          	sh	a4,60(a5)
                break;
80018844:	0180006f          	j	8001885c <calc_func+0x174>
            default:
                retval = data;
80018848:	fea45783          	lhu	a5,-22(s0)
8001884c:	fef41723          	sh	a5,-18(s0)
                break;
80018850:	0100006f          	j	80018860 <calc_func+0x178>
                break;
80018854:	00000013          	nop
80018858:	0080006f          	j	80018860 <calc_func+0x178>
                break;
8001885c:	00000013          	nop
        }
        res->crc = crcu16(retval, res->crc);
80018860:	fee45703          	lhu	a4,-18(s0)
80018864:	fd842783          	lw	a5,-40(s0)
80018868:	0387d783          	lhu	a5,56(a5)
8001886c:	00078593          	mv	a1,a5
80018870:	00070513          	mv	a0,a4
80018874:	3c0030ef          	jal	ra,8001bc34 <crcu16>
80018878:	00050793          	mv	a5,a0
8001887c:	00078713          	mv	a4,a5
80018880:	fd842783          	lw	a5,-40(s0)
80018884:	02e79c23          	sh	a4,56(a5)
        retval &= 0x007f;
80018888:	fee45783          	lhu	a5,-18(s0)
8001888c:	07f7f793          	andi	a5,a5,127
80018890:	fef41723          	sh	a5,-18(s0)
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
80018894:	fea45783          	lhu	a5,-22(s0)
80018898:	f007f793          	andi	a5,a5,-256
8001889c:	01079793          	slli	a5,a5,0x10
800188a0:	4107d793          	srai	a5,a5,0x10
800188a4:	0807e793          	ori	a5,a5,128
800188a8:	01079793          	slli	a5,a5,0x10
800188ac:	4107d793          	srai	a5,a5,0x10
800188b0:	fee45703          	lhu	a4,-18(s0)
800188b4:	00e7e7b3          	or	a5,a5,a4
800188b8:	01079713          	slli	a4,a5,0x10
800188bc:	41075713          	srai	a4,a4,0x10
800188c0:	fdc42783          	lw	a5,-36(s0)
800188c4:	00e79023          	sh	a4,0(a5)
        return retval;
800188c8:	fee41783          	lh	a5,-18(s0)
    }
}
800188cc:	00078513          	mv	a0,a5
800188d0:	02c12083          	lw	ra,44(sp)
800188d4:	02812403          	lw	s0,40(sp)
800188d8:	03010113          	addi	sp,sp,48
800188dc:	00008067          	ret

800188e0 <cmp_complex>:

        Can be used by mergesort.
*/
ee_s32
cmp_complex(list_data *a, list_data *b, core_results *res)
{
800188e0:	fd010113          	addi	sp,sp,-48
800188e4:	02112623          	sw	ra,44(sp)
800188e8:	02812423          	sw	s0,40(sp)
800188ec:	03010413          	addi	s0,sp,48
800188f0:	fca42e23          	sw	a0,-36(s0)
800188f4:	fcb42c23          	sw	a1,-40(s0)
800188f8:	fcc42a23          	sw	a2,-44(s0)
    ee_s16 val1 = calc_func(&(a->data16), res);
800188fc:	fdc42783          	lw	a5,-36(s0)
80018900:	fd442583          	lw	a1,-44(s0)
80018904:	00078513          	mv	a0,a5
80018908:	de1ff0ef          	jal	ra,800186e8 <calc_func>
8001890c:	00050793          	mv	a5,a0
80018910:	fef41723          	sh	a5,-18(s0)
    ee_s16 val2 = calc_func(&(b->data16), res);
80018914:	fd842783          	lw	a5,-40(s0)
80018918:	fd442583          	lw	a1,-44(s0)
8001891c:	00078513          	mv	a0,a5
80018920:	dc9ff0ef          	jal	ra,800186e8 <calc_func>
80018924:	00050793          	mv	a5,a0
80018928:	fef41623          	sh	a5,-20(s0)
    return val1 - val2;
8001892c:	fee41703          	lh	a4,-18(s0)
80018930:	fec41783          	lh	a5,-20(s0)
80018934:	40f707b3          	sub	a5,a4,a5
}
80018938:	00078513          	mv	a0,a5
8001893c:	02c12083          	lw	ra,44(sp)
80018940:	02812403          	lw	s0,40(sp)
80018944:	03010113          	addi	sp,sp,48
80018948:	00008067          	ret

8001894c <cmp_idx>:

        Can be used by mergesort.
*/
ee_s32
cmp_idx(list_data *a, list_data *b, core_results *res)
{
8001894c:	fe010113          	addi	sp,sp,-32
80018950:	00812e23          	sw	s0,28(sp)
80018954:	02010413          	addi	s0,sp,32
80018958:	fea42623          	sw	a0,-20(s0)
8001895c:	feb42423          	sw	a1,-24(s0)
80018960:	fec42223          	sw	a2,-28(s0)
    if (res == NULL)
80018964:	fe442783          	lw	a5,-28(s0)
80018968:	08079e63          	bnez	a5,80018a04 <cmp_idx+0xb8>
    {
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
8001896c:	fec42783          	lw	a5,-20(s0)
80018970:	00079783          	lh	a5,0(a5)
80018974:	f007f793          	andi	a5,a5,-256
80018978:	01079713          	slli	a4,a5,0x10
8001897c:	41075713          	srai	a4,a4,0x10
80018980:	fec42783          	lw	a5,-20(s0)
80018984:	00079783          	lh	a5,0(a5)
80018988:	01079793          	slli	a5,a5,0x10
8001898c:	0107d793          	srli	a5,a5,0x10
80018990:	0087d793          	srli	a5,a5,0x8
80018994:	01079793          	slli	a5,a5,0x10
80018998:	0107d793          	srli	a5,a5,0x10
8001899c:	01079793          	slli	a5,a5,0x10
800189a0:	4107d793          	srai	a5,a5,0x10
800189a4:	00f767b3          	or	a5,a4,a5
800189a8:	01079713          	slli	a4,a5,0x10
800189ac:	41075713          	srai	a4,a4,0x10
800189b0:	fec42783          	lw	a5,-20(s0)
800189b4:	00e79023          	sh	a4,0(a5)
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
800189b8:	fe842783          	lw	a5,-24(s0)
800189bc:	00079783          	lh	a5,0(a5)
800189c0:	f007f793          	andi	a5,a5,-256
800189c4:	01079713          	slli	a4,a5,0x10
800189c8:	41075713          	srai	a4,a4,0x10
800189cc:	fe842783          	lw	a5,-24(s0)
800189d0:	00079783          	lh	a5,0(a5)
800189d4:	01079793          	slli	a5,a5,0x10
800189d8:	0107d793          	srli	a5,a5,0x10
800189dc:	0087d793          	srli	a5,a5,0x8
800189e0:	01079793          	slli	a5,a5,0x10
800189e4:	0107d793          	srli	a5,a5,0x10
800189e8:	01079793          	slli	a5,a5,0x10
800189ec:	4107d793          	srai	a5,a5,0x10
800189f0:	00f767b3          	or	a5,a4,a5
800189f4:	01079713          	slli	a4,a5,0x10
800189f8:	41075713          	srai	a4,a4,0x10
800189fc:	fe842783          	lw	a5,-24(s0)
80018a00:	00e79023          	sh	a4,0(a5)
    }
    return a->idx - b->idx;
80018a04:	fec42783          	lw	a5,-20(s0)
80018a08:	00279783          	lh	a5,2(a5)
80018a0c:	00078713          	mv	a4,a5
80018a10:	fe842783          	lw	a5,-24(s0)
80018a14:	00279783          	lh	a5,2(a5)
80018a18:	40f707b3          	sub	a5,a4,a5
}
80018a1c:	00078513          	mv	a0,a5
80018a20:	01c12403          	lw	s0,28(sp)
80018a24:	02010113          	addi	sp,sp,32
80018a28:	00008067          	ret

80018a2c <copy_info>:

void
copy_info(list_data *to, list_data *from)
{
80018a2c:	fe010113          	addi	sp,sp,-32
80018a30:	00812e23          	sw	s0,28(sp)
80018a34:	02010413          	addi	s0,sp,32
80018a38:	fea42623          	sw	a0,-20(s0)
80018a3c:	feb42423          	sw	a1,-24(s0)
    to->data16 = from->data16;
80018a40:	fe842783          	lw	a5,-24(s0)
80018a44:	00079703          	lh	a4,0(a5)
80018a48:	fec42783          	lw	a5,-20(s0)
80018a4c:	00e79023          	sh	a4,0(a5)
    to->idx    = from->idx;
80018a50:	fe842783          	lw	a5,-24(s0)
80018a54:	00279703          	lh	a4,2(a5)
80018a58:	fec42783          	lw	a5,-20(s0)
80018a5c:	00e79123          	sh	a4,2(a5)
}
80018a60:	00000013          	nop
80018a64:	01c12403          	lw	s0,28(sp)
80018a68:	02010113          	addi	sp,sp,32
80018a6c:	00008067          	ret

80018a70 <core_bench_list>:
        - Single remove/reinsert
        * At the end of this function, the list is back to original state
*/
ee_u16
core_bench_list(core_results *res, ee_s16 finder_idx)
{
80018a70:	fc010113          	addi	sp,sp,-64
80018a74:	02112e23          	sw	ra,60(sp)
80018a78:	02812c23          	sw	s0,56(sp)
80018a7c:	04010413          	addi	s0,sp,64
80018a80:	fca42623          	sw	a0,-52(s0)
80018a84:	00058793          	mv	a5,a1
80018a88:	fcf41523          	sh	a5,-54(s0)
    ee_u16     retval = 0;
80018a8c:	fe041723          	sh	zero,-18(s0)
    ee_u16     found = 0, missed = 0;
80018a90:	fe041623          	sh	zero,-20(s0)
80018a94:	fe041523          	sh	zero,-22(s0)
    list_head *list     = res->list;
80018a98:	fcc42783          	lw	a5,-52(s0)
80018a9c:	0247a783          	lw	a5,36(a5)
80018aa0:	fef42223          	sw	a5,-28(s0)
    ee_s16     find_num = res->seed3;
80018aa4:	fcc42783          	lw	a5,-52(s0)
80018aa8:	0047d783          	lhu	a5,4(a5)
80018aac:	fcf41e23          	sh	a5,-36(s0)
    list_head *this_find;
    list_head *finder, *remover;
    list_data  info = {0};
80018ab0:	fc042823          	sw	zero,-48(s0)
    ee_s16     i;

    info.idx = finder_idx;
80018ab4:	fca45783          	lhu	a5,-54(s0)
80018ab8:	fcf41923          	sh	a5,-46(s0)
    /* find <find_num> values in the list, and change the list each time
     * (reverse and cache if value found) */
    for (i = 0; i < find_num; i++)
80018abc:	fc041f23          	sh	zero,-34(s0)
80018ac0:	1780006f          	j	80018c38 <core_bench_list+0x1c8>
    {
        info.data16 = (i & 0xff);
80018ac4:	fde45783          	lhu	a5,-34(s0)
80018ac8:	0ff7f793          	zext.b	a5,a5
80018acc:	01079793          	slli	a5,a5,0x10
80018ad0:	4107d793          	srai	a5,a5,0x10
80018ad4:	fcf41823          	sh	a5,-48(s0)
        this_find   = core_list_find(list, &info);
80018ad8:	fd040793          	addi	a5,s0,-48
80018adc:	00078593          	mv	a1,a5
80018ae0:	fe442503          	lw	a0,-28(s0)
80018ae4:	738000ef          	jal	ra,8001921c <core_list_find>
80018ae8:	fca42a23          	sw	a0,-44(s0)
        list        = core_list_reverse(list);
80018aec:	fe442503          	lw	a0,-28(s0)
80018af0:	7d0000ef          	jal	ra,800192c0 <core_list_reverse>
80018af4:	fea42223          	sw	a0,-28(s0)
        if (this_find == NULL)
80018af8:	fd442783          	lw	a5,-44(s0)
80018afc:	04079863          	bnez	a5,80018b4c <core_bench_list+0xdc>
        {
            missed++;
80018b00:	fea45783          	lhu	a5,-22(s0)
80018b04:	00178793          	addi	a5,a5,1
80018b08:	fef41523          	sh	a5,-22(s0)
            retval += (list->next->info->data16 >> 8) & 1;
80018b0c:	fe442783          	lw	a5,-28(s0)
80018b10:	0007a783          	lw	a5,0(a5)
80018b14:	0047a783          	lw	a5,4(a5)
80018b18:	00079783          	lh	a5,0(a5)
80018b1c:	4087d793          	srai	a5,a5,0x8
80018b20:	01079793          	slli	a5,a5,0x10
80018b24:	4107d793          	srai	a5,a5,0x10
80018b28:	01079793          	slli	a5,a5,0x10
80018b2c:	0107d793          	srli	a5,a5,0x10
80018b30:	0017f793          	andi	a5,a5,1
80018b34:	01079793          	slli	a5,a5,0x10
80018b38:	0107d793          	srli	a5,a5,0x10
80018b3c:	fee45703          	lhu	a4,-18(s0)
80018b40:	00e787b3          	add	a5,a5,a4
80018b44:	fef41723          	sh	a5,-18(s0)
80018b48:	0a80006f          	j	80018bf0 <core_bench_list+0x180>
        }
        else
        {
            found++;
80018b4c:	fec45783          	lhu	a5,-20(s0)
80018b50:	00178793          	addi	a5,a5,1
80018b54:	fef41623          	sh	a5,-20(s0)
            if (this_find->info->data16 & 0x1) /* use found value */
80018b58:	fd442783          	lw	a5,-44(s0)
80018b5c:	0047a783          	lw	a5,4(a5)
80018b60:	00079783          	lh	a5,0(a5)
80018b64:	01079793          	slli	a5,a5,0x10
80018b68:	0107d793          	srli	a5,a5,0x10
80018b6c:	0017f793          	andi	a5,a5,1
80018b70:	02078e63          	beqz	a5,80018bac <core_bench_list+0x13c>
                retval += (this_find->info->data16 >> 9) & 1;
80018b74:	fd442783          	lw	a5,-44(s0)
80018b78:	0047a783          	lw	a5,4(a5)
80018b7c:	00079783          	lh	a5,0(a5)
80018b80:	4097d793          	srai	a5,a5,0x9
80018b84:	01079793          	slli	a5,a5,0x10
80018b88:	4107d793          	srai	a5,a5,0x10
80018b8c:	01079793          	slli	a5,a5,0x10
80018b90:	0107d793          	srli	a5,a5,0x10
80018b94:	0017f793          	andi	a5,a5,1
80018b98:	01079793          	slli	a5,a5,0x10
80018b9c:	0107d793          	srli	a5,a5,0x10
80018ba0:	fee45703          	lhu	a4,-18(s0)
80018ba4:	00e787b3          	add	a5,a5,a4
80018ba8:	fef41723          	sh	a5,-18(s0)
            /* and cache next item at the head of the list (if any) */
            if (this_find->next != NULL)
80018bac:	fd442783          	lw	a5,-44(s0)
80018bb0:	0007a783          	lw	a5,0(a5)
80018bb4:	02078e63          	beqz	a5,80018bf0 <core_bench_list+0x180>
            {
                finder          = this_find->next;
80018bb8:	fd442783          	lw	a5,-44(s0)
80018bbc:	0007a783          	lw	a5,0(a5)
80018bc0:	fef42023          	sw	a5,-32(s0)
                this_find->next = finder->next;
80018bc4:	fe042783          	lw	a5,-32(s0)
80018bc8:	0007a703          	lw	a4,0(a5)
80018bcc:	fd442783          	lw	a5,-44(s0)
80018bd0:	00e7a023          	sw	a4,0(a5)
                finder->next    = list->next;
80018bd4:	fe442783          	lw	a5,-28(s0)
80018bd8:	0007a703          	lw	a4,0(a5)
80018bdc:	fe042783          	lw	a5,-32(s0)
80018be0:	00e7a023          	sw	a4,0(a5)
                list->next      = finder;
80018be4:	fe442783          	lw	a5,-28(s0)
80018be8:	fe042703          	lw	a4,-32(s0)
80018bec:	00e7a023          	sw	a4,0(a5)
            }
        }
        if (info.idx >= 0)
80018bf0:	fd241783          	lh	a5,-46(s0)
80018bf4:	0207c463          	bltz	a5,80018c1c <core_bench_list+0x1ac>
            info.idx++;
80018bf8:	fd241783          	lh	a5,-46(s0)
80018bfc:	01079793          	slli	a5,a5,0x10
80018c00:	0107d793          	srli	a5,a5,0x10
80018c04:	00178793          	addi	a5,a5,1
80018c08:	01079793          	slli	a5,a5,0x10
80018c0c:	0107d793          	srli	a5,a5,0x10
80018c10:	01079793          	slli	a5,a5,0x10
80018c14:	4107d793          	srai	a5,a5,0x10
80018c18:	fcf41923          	sh	a5,-46(s0)
    for (i = 0; i < find_num; i++)
80018c1c:	fde41783          	lh	a5,-34(s0)
80018c20:	01079793          	slli	a5,a5,0x10
80018c24:	0107d793          	srli	a5,a5,0x10
80018c28:	00178793          	addi	a5,a5,1
80018c2c:	01079793          	slli	a5,a5,0x10
80018c30:	0107d793          	srli	a5,a5,0x10
80018c34:	fcf41f23          	sh	a5,-34(s0)
80018c38:	fde41703          	lh	a4,-34(s0)
80018c3c:	fdc41783          	lh	a5,-36(s0)
80018c40:	e8f742e3          	blt	a4,a5,80018ac4 <core_bench_list+0x54>
#if CORE_DEBUG
        ee_printf("List find %d: [%d,%d,%d]\n", i, retval, missed, found);
#endif
    }
    retval += found * 4 - missed;
80018c44:	fec45783          	lhu	a5,-20(s0)
80018c48:	00279793          	slli	a5,a5,0x2
80018c4c:	01079793          	slli	a5,a5,0x10
80018c50:	0107d793          	srli	a5,a5,0x10
80018c54:	fea45703          	lhu	a4,-22(s0)
80018c58:	40e787b3          	sub	a5,a5,a4
80018c5c:	01079793          	slli	a5,a5,0x10
80018c60:	0107d793          	srli	a5,a5,0x10
80018c64:	fee45703          	lhu	a4,-18(s0)
80018c68:	00e787b3          	add	a5,a5,a4
80018c6c:	fef41723          	sh	a5,-18(s0)
    /* sort the list by data content and remove one item*/
    if (finder_idx > 0)
80018c70:	fca41783          	lh	a5,-54(s0)
80018c74:	00f05e63          	blez	a5,80018c90 <core_bench_list+0x220>
        list = core_list_mergesort(list, cmp_complex, res);
80018c78:	fcc42603          	lw	a2,-52(s0)
80018c7c:	00000597          	auipc	a1,0x0
80018c80:	c6458593          	addi	a1,a1,-924 # 800188e0 <cmp_complex>
80018c84:	fe442503          	lw	a0,-28(s0)
80018c88:	694000ef          	jal	ra,8001931c <core_list_mergesort>
80018c8c:	fea42223          	sw	a0,-28(s0)
    remover = core_list_remove(list->next);
80018c90:	fe442783          	lw	a5,-28(s0)
80018c94:	0007a783          	lw	a5,0(a5)
80018c98:	00078513          	mv	a0,a5
80018c9c:	4a0000ef          	jal	ra,8001913c <core_list_remove>
80018ca0:	fca42c23          	sw	a0,-40(s0)
    /* CRC data content of list from location of index N forward, and then undo
     * remove */
    finder = core_list_find(list, &info);
80018ca4:	fd040793          	addi	a5,s0,-48
80018ca8:	00078593          	mv	a1,a5
80018cac:	fe442503          	lw	a0,-28(s0)
80018cb0:	56c000ef          	jal	ra,8001921c <core_list_find>
80018cb4:	fea42023          	sw	a0,-32(s0)
    if (!finder)
80018cb8:	fe042783          	lw	a5,-32(s0)
80018cbc:	04079263          	bnez	a5,80018d00 <core_bench_list+0x290>
        finder = list->next;
80018cc0:	fe442783          	lw	a5,-28(s0)
80018cc4:	0007a783          	lw	a5,0(a5)
80018cc8:	fef42023          	sw	a5,-32(s0)
    while (finder)
80018ccc:	0340006f          	j	80018d00 <core_bench_list+0x290>
    {
        retval = crc16(list->info->data16, retval);
80018cd0:	fe442783          	lw	a5,-28(s0)
80018cd4:	0047a783          	lw	a5,4(a5)
80018cd8:	00079783          	lh	a5,0(a5)
80018cdc:	fee45703          	lhu	a4,-18(s0)
80018ce0:	00070593          	mv	a1,a4
80018ce4:	00078513          	mv	a0,a5
80018ce8:	054030ef          	jal	ra,8001bd3c <crc16>
80018cec:	00050793          	mv	a5,a0
80018cf0:	fef41723          	sh	a5,-18(s0)
        finder = finder->next;
80018cf4:	fe042783          	lw	a5,-32(s0)
80018cf8:	0007a783          	lw	a5,0(a5)
80018cfc:	fef42023          	sw	a5,-32(s0)
    while (finder)
80018d00:	fe042783          	lw	a5,-32(s0)
80018d04:	fc0796e3          	bnez	a5,80018cd0 <core_bench_list+0x260>
    }
#if CORE_DEBUG
    ee_printf("List sort 1: %04x\n", retval);
#endif
    remover = core_list_undo_remove(remover, list->next);
80018d08:	fe442783          	lw	a5,-28(s0)
80018d0c:	0007a783          	lw	a5,0(a5)
80018d10:	00078593          	mv	a1,a5
80018d14:	fd842503          	lw	a0,-40(s0)
80018d18:	498000ef          	jal	ra,800191b0 <core_list_undo_remove>
80018d1c:	fca42c23          	sw	a0,-40(s0)
    /* sort the list by index, in effect returning the list to original state */
    list = core_list_mergesort(list, cmp_idx, NULL);
80018d20:	00000613          	li	a2,0
80018d24:	00000597          	auipc	a1,0x0
80018d28:	c2858593          	addi	a1,a1,-984 # 8001894c <cmp_idx>
80018d2c:	fe442503          	lw	a0,-28(s0)
80018d30:	5ec000ef          	jal	ra,8001931c <core_list_mergesort>
80018d34:	fea42223          	sw	a0,-28(s0)
    /* CRC data content of list */
    finder = list->next;
80018d38:	fe442783          	lw	a5,-28(s0)
80018d3c:	0007a783          	lw	a5,0(a5)
80018d40:	fef42023          	sw	a5,-32(s0)
    while (finder)
80018d44:	0340006f          	j	80018d78 <core_bench_list+0x308>
    {
        retval = crc16(list->info->data16, retval);
80018d48:	fe442783          	lw	a5,-28(s0)
80018d4c:	0047a783          	lw	a5,4(a5)
80018d50:	00079783          	lh	a5,0(a5)
80018d54:	fee45703          	lhu	a4,-18(s0)
80018d58:	00070593          	mv	a1,a4
80018d5c:	00078513          	mv	a0,a5
80018d60:	7dd020ef          	jal	ra,8001bd3c <crc16>
80018d64:	00050793          	mv	a5,a0
80018d68:	fef41723          	sh	a5,-18(s0)
        finder = finder->next;
80018d6c:	fe042783          	lw	a5,-32(s0)
80018d70:	0007a783          	lw	a5,0(a5)
80018d74:	fef42023          	sw	a5,-32(s0)
    while (finder)
80018d78:	fe042783          	lw	a5,-32(s0)
80018d7c:	fc0796e3          	bnez	a5,80018d48 <core_bench_list+0x2d8>
    }
#if CORE_DEBUG
    ee_printf("List sort 2: %04x\n", retval);
#endif
    return retval;
80018d80:	fee45783          	lhu	a5,-18(s0)
}
80018d84:	00078513          	mv	a0,a5
80018d88:	03c12083          	lw	ra,60(sp)
80018d8c:	03812403          	lw	s0,56(sp)
80018d90:	04010113          	addi	sp,sp,64
80018d94:	00008067          	ret

80018d98 <core_list_init>:
        Pointer to the head of the list.

*/
list_head *
core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed)
{
80018d98:	fb010113          	addi	sp,sp,-80
80018d9c:	04112623          	sw	ra,76(sp)
80018da0:	04812423          	sw	s0,72(sp)
80018da4:	05010413          	addi	s0,sp,80
80018da8:	faa42e23          	sw	a0,-68(s0)
80018dac:	fab42c23          	sw	a1,-72(s0)
80018db0:	00060793          	mv	a5,a2
80018db4:	faf41b23          	sh	a5,-74(s0)
    /* calculated pointers for the list */
    ee_u32 per_item = 16 + sizeof(struct list_data_s);
80018db8:	01400793          	li	a5,20
80018dbc:	fef42223          	sw	a5,-28(s0)
    ee_u32 size     = (blksize / per_item)
80018dc0:	fbc42703          	lw	a4,-68(s0)
80018dc4:	fe442783          	lw	a5,-28(s0)
80018dc8:	02f757b3          	divu	a5,a4,a5
80018dcc:	ffe78793          	addi	a5,a5,-2
80018dd0:	fef42023          	sw	a5,-32(s0)
                  - 2; /* to accommodate systems with 64b pointers, and make sure
                          same code is executed, set max list elements */
    list_head *memblock_end  = memblock + size;
80018dd4:	fb842703          	lw	a4,-72(s0)
80018dd8:	fe042783          	lw	a5,-32(s0)
80018ddc:	00379793          	slli	a5,a5,0x3
80018de0:	00f707b3          	add	a5,a4,a5
80018de4:	fcf42e23          	sw	a5,-36(s0)
    list_data *datablock     = (list_data *)(memblock_end);
80018de8:	fdc42783          	lw	a5,-36(s0)
80018dec:	fcf42423          	sw	a5,-56(s0)
    list_data *datablock_end = datablock + size;
80018df0:	fc842703          	lw	a4,-56(s0)
80018df4:	fe042783          	lw	a5,-32(s0)
80018df8:	00279793          	slli	a5,a5,0x2
80018dfc:	00f707b3          	add	a5,a4,a5
80018e00:	fcf42c23          	sw	a5,-40(s0)
    /* some useful variables */
    ee_u32     i;
    list_head *finder, *list = memblock;
80018e04:	fb842783          	lw	a5,-72(s0)
80018e08:	fcf42a23          	sw	a5,-44(s0)
    list_data  info;

    /* create a fake items for the list head and tail */
    list->next         = NULL;
80018e0c:	fd442783          	lw	a5,-44(s0)
80018e10:	0007a023          	sw	zero,0(a5)
    list->info         = datablock;
80018e14:	fc842703          	lw	a4,-56(s0)
80018e18:	fd442783          	lw	a5,-44(s0)
80018e1c:	00e7a223          	sw	a4,4(a5)
    list->info->idx    = 0x0000;
80018e20:	fd442783          	lw	a5,-44(s0)
80018e24:	0047a783          	lw	a5,4(a5)
80018e28:	00079123          	sh	zero,2(a5)
    list->info->data16 = (ee_s16)0x8080;
80018e2c:	fd442783          	lw	a5,-44(s0)
80018e30:	0047a783          	lw	a5,4(a5)
80018e34:	ffff8737          	lui	a4,0xffff8
80018e38:	08070713          	addi	a4,a4,128 # ffff8080 <__bss_end+0x7ff718c4>
80018e3c:	00e79023          	sh	a4,0(a5)
    memblock++;
80018e40:	fb842783          	lw	a5,-72(s0)
80018e44:	00878793          	addi	a5,a5,8
80018e48:	faf42c23          	sw	a5,-72(s0)
    datablock++;
80018e4c:	fc842783          	lw	a5,-56(s0)
80018e50:	00478793          	addi	a5,a5,4
80018e54:	fcf42423          	sw	a5,-56(s0)
    info.idx    = 0x7fff;
80018e58:	ffff87b7          	lui	a5,0xffff8
80018e5c:	fff7c793          	not	a5,a5
80018e60:	fcf41323          	sh	a5,-58(s0)
    info.data16 = (ee_s16)0xffff;
80018e64:	fff00793          	li	a5,-1
80018e68:	fcf41223          	sh	a5,-60(s0)
    core_list_insert_new(
80018e6c:	fc840693          	addi	a3,s0,-56
80018e70:	fb840613          	addi	a2,s0,-72
80018e74:	fc440593          	addi	a1,s0,-60
80018e78:	fd842783          	lw	a5,-40(s0)
80018e7c:	fdc42703          	lw	a4,-36(s0)
80018e80:	fd442503          	lw	a0,-44(s0)
80018e84:	1cc000ef          	jal	ra,80019050 <core_list_insert_new>
        list, &info, &memblock, &datablock, memblock_end, datablock_end);

    /* then insert size items */
    for (i = 0; i < size; i++)
80018e88:	fe042623          	sw	zero,-20(s0)
80018e8c:	0a40006f          	j	80018f30 <core_list_init+0x198>
    {
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
80018e90:	fec42783          	lw	a5,-20(s0)
80018e94:	01079713          	slli	a4,a5,0x10
80018e98:	01075713          	srli	a4,a4,0x10
80018e9c:	fb645783          	lhu	a5,-74(s0)
80018ea0:	00f747b3          	xor	a5,a4,a5
80018ea4:	01079793          	slli	a5,a5,0x10
80018ea8:	0107d793          	srli	a5,a5,0x10
80018eac:	00f7f793          	andi	a5,a5,15
80018eb0:	fcf41823          	sh	a5,-48(s0)
        ee_u16 dat
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
80018eb4:	fd045783          	lhu	a5,-48(s0)
80018eb8:	00379793          	slli	a5,a5,0x3
80018ebc:	01079713          	slli	a4,a5,0x10
80018ec0:	01075713          	srli	a4,a4,0x10
80018ec4:	fec42783          	lw	a5,-20(s0)
80018ec8:	01079793          	slli	a5,a5,0x10
80018ecc:	0107d793          	srli	a5,a5,0x10
80018ed0:	0077f793          	andi	a5,a5,7
80018ed4:	01079793          	slli	a5,a5,0x10
80018ed8:	0107d793          	srli	a5,a5,0x10
        ee_u16 dat
80018edc:	00f767b3          	or	a5,a4,a5
80018ee0:	fcf41723          	sh	a5,-50(s0)
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
80018ee4:	fce41783          	lh	a5,-50(s0)
80018ee8:	00879793          	slli	a5,a5,0x8
80018eec:	01079713          	slli	a4,a5,0x10
80018ef0:	41075713          	srai	a4,a4,0x10
80018ef4:	fce41783          	lh	a5,-50(s0)
80018ef8:	00f767b3          	or	a5,a4,a5
80018efc:	01079793          	slli	a5,a5,0x10
80018f00:	4107d793          	srai	a5,a5,0x10
80018f04:	fcf41223          	sh	a5,-60(s0)
                                            upper bits with rebuild value */
        core_list_insert_new(
80018f08:	fc840693          	addi	a3,s0,-56
80018f0c:	fb840613          	addi	a2,s0,-72
80018f10:	fc440593          	addi	a1,s0,-60
80018f14:	fd842783          	lw	a5,-40(s0)
80018f18:	fdc42703          	lw	a4,-36(s0)
80018f1c:	fd442503          	lw	a0,-44(s0)
80018f20:	130000ef          	jal	ra,80019050 <core_list_insert_new>
    for (i = 0; i < size; i++)
80018f24:	fec42783          	lw	a5,-20(s0)
80018f28:	00178793          	addi	a5,a5,1 # ffff8001 <__bss_end+0x7ff71845>
80018f2c:	fef42623          	sw	a5,-20(s0)
80018f30:	fec42703          	lw	a4,-20(s0)
80018f34:	fe042783          	lw	a5,-32(s0)
80018f38:	f4f76ce3          	bltu	a4,a5,80018e90 <core_list_init+0xf8>
            list, &info, &memblock, &datablock, memblock_end, datablock_end);
    }
    /* and now index the list so we know initial seed order of the list */
    finder = list->next;
80018f3c:	fd442783          	lw	a5,-44(s0)
80018f40:	0007a783          	lw	a5,0(a5)
80018f44:	fef42423          	sw	a5,-24(s0)
    i      = 1;
80018f48:	00100793          	li	a5,1
80018f4c:	fef42623          	sw	a5,-20(s0)
    while (finder->next != NULL)
80018f50:	0c40006f          	j	80019014 <core_list_init+0x27c>
    {
        if (i < size / 5) /* first 20% of the list in order */
80018f54:	fe042703          	lw	a4,-32(s0)
80018f58:	00500793          	li	a5,5
80018f5c:	02f757b3          	divu	a5,a4,a5
80018f60:	fec42703          	lw	a4,-20(s0)
80018f64:	02f77463          	bgeu	a4,a5,80018f8c <core_list_init+0x1f4>
            finder->info->idx = i++;
80018f68:	fec42783          	lw	a5,-20(s0)
80018f6c:	00178713          	addi	a4,a5,1
80018f70:	fee42623          	sw	a4,-20(s0)
80018f74:	fe842703          	lw	a4,-24(s0)
80018f78:	00472703          	lw	a4,4(a4)
80018f7c:	01079793          	slli	a5,a5,0x10
80018f80:	4107d793          	srai	a5,a5,0x10
80018f84:	00f71123          	sh	a5,2(a4)
80018f88:	0800006f          	j	80019008 <core_list_init+0x270>
        else
        {
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
80018f8c:	fec42783          	lw	a5,-20(s0)
80018f90:	00178713          	addi	a4,a5,1
80018f94:	fee42623          	sw	a4,-20(s0)
80018f98:	01079713          	slli	a4,a5,0x10
80018f9c:	01075713          	srli	a4,a4,0x10
80018fa0:	fb645783          	lhu	a5,-74(s0)
80018fa4:	00f747b3          	xor	a5,a4,a5
80018fa8:	fcf41923          	sh	a5,-46(s0)
            finder->info->idx = 0x3fff
                                & (((i & 0x07) << 8)
80018fac:	fec42783          	lw	a5,-20(s0)
80018fb0:	01079793          	slli	a5,a5,0x10
80018fb4:	0107d793          	srli	a5,a5,0x10
80018fb8:	00879793          	slli	a5,a5,0x8
80018fbc:	01079793          	slli	a5,a5,0x10
80018fc0:	0107d793          	srli	a5,a5,0x10
80018fc4:	7007f793          	andi	a5,a5,1792
80018fc8:	01079793          	slli	a5,a5,0x10
80018fcc:	0107d793          	srli	a5,a5,0x10
                                   | pat); /* make sure the mixed items end up
80018fd0:	fd245703          	lhu	a4,-46(s0)
80018fd4:	00e7e7b3          	or	a5,a5,a4
80018fd8:	01079793          	slli	a5,a5,0x10
80018fdc:	0107d793          	srli	a5,a5,0x10
                                & (((i & 0x07) << 8)
80018fe0:	01079693          	slli	a3,a5,0x10
80018fe4:	4106d693          	srai	a3,a3,0x10
            finder->info->idx = 0x3fff
80018fe8:	fe842783          	lw	a5,-24(s0)
80018fec:	0047a783          	lw	a5,4(a5)
                                & (((i & 0x07) << 8)
80018ff0:	00004737          	lui	a4,0x4
80018ff4:	fff70713          	addi	a4,a4,-1 # 3fff <__STACKSIZE__-0x1>
80018ff8:	00e6f733          	and	a4,a3,a4
80018ffc:	01071713          	slli	a4,a4,0x10
80019000:	41075713          	srai	a4,a4,0x10
            finder->info->idx = 0x3fff
80019004:	00e79123          	sh	a4,2(a5)
                                              after the ones in sequence */
        }
        finder = finder->next;
80019008:	fe842783          	lw	a5,-24(s0)
8001900c:	0007a783          	lw	a5,0(a5)
80019010:	fef42423          	sw	a5,-24(s0)
    while (finder->next != NULL)
80019014:	fe842783          	lw	a5,-24(s0)
80019018:	0007a783          	lw	a5,0(a5)
8001901c:	f2079ce3          	bnez	a5,80018f54 <core_list_init+0x1bc>
    }
    list = core_list_mergesort(list, cmp_idx, NULL);
80019020:	00000613          	li	a2,0
80019024:	00000597          	auipc	a1,0x0
80019028:	92858593          	addi	a1,a1,-1752 # 8001894c <cmp_idx>
8001902c:	fd442503          	lw	a0,-44(s0)
80019030:	2ec000ef          	jal	ra,8001931c <core_list_mergesort>
80019034:	fca42a23          	sw	a0,-44(s0)
            "[%04x,%04x]", finder->info->idx, (ee_u16)finder->info->data16);
        finder = finder->next;
    }
    ee_printf("\n");
#endif
    return list;
80019038:	fd442783          	lw	a5,-44(s0)
}
8001903c:	00078513          	mv	a0,a5
80019040:	04c12083          	lw	ra,76(sp)
80019044:	04812403          	lw	s0,72(sp)
80019048:	05010113          	addi	sp,sp,80
8001904c:	00008067          	ret

80019050 <core_list_insert_new>:
                     list_data * info,
                     list_head **memblock,
                     list_data **datablock,
                     list_head * memblock_end,
                     list_data * datablock_end)
{
80019050:	fc010113          	addi	sp,sp,-64
80019054:	02112e23          	sw	ra,60(sp)
80019058:	02812c23          	sw	s0,56(sp)
8001905c:	04010413          	addi	s0,sp,64
80019060:	fca42e23          	sw	a0,-36(s0)
80019064:	fcb42c23          	sw	a1,-40(s0)
80019068:	fcc42a23          	sw	a2,-44(s0)
8001906c:	fcd42823          	sw	a3,-48(s0)
80019070:	fce42623          	sw	a4,-52(s0)
80019074:	fcf42423          	sw	a5,-56(s0)
    list_head *newitem;

    if ((*memblock + 1) >= memblock_end)
80019078:	fd442783          	lw	a5,-44(s0)
8001907c:	0007a783          	lw	a5,0(a5)
80019080:	00878793          	addi	a5,a5,8
80019084:	fcc42703          	lw	a4,-52(s0)
80019088:	00e7e663          	bltu	a5,a4,80019094 <core_list_insert_new+0x44>
        return NULL;
8001908c:	00000793          	li	a5,0
80019090:	0980006f          	j	80019128 <core_list_insert_new+0xd8>
    if ((*datablock + 1) >= datablock_end)
80019094:	fd042783          	lw	a5,-48(s0)
80019098:	0007a783          	lw	a5,0(a5)
8001909c:	00478793          	addi	a5,a5,4
800190a0:	fc842703          	lw	a4,-56(s0)
800190a4:	00e7e663          	bltu	a5,a4,800190b0 <core_list_insert_new+0x60>
        return NULL;
800190a8:	00000793          	li	a5,0
800190ac:	07c0006f          	j	80019128 <core_list_insert_new+0xd8>

    newitem = *memblock;
800190b0:	fd442783          	lw	a5,-44(s0)
800190b4:	0007a783          	lw	a5,0(a5)
800190b8:	fef42623          	sw	a5,-20(s0)
    (*memblock)++;
800190bc:	fd442783          	lw	a5,-44(s0)
800190c0:	0007a783          	lw	a5,0(a5)
800190c4:	00878713          	addi	a4,a5,8
800190c8:	fd442783          	lw	a5,-44(s0)
800190cc:	00e7a023          	sw	a4,0(a5)
    newitem->next      = insert_point->next;
800190d0:	fdc42783          	lw	a5,-36(s0)
800190d4:	0007a703          	lw	a4,0(a5)
800190d8:	fec42783          	lw	a5,-20(s0)
800190dc:	00e7a023          	sw	a4,0(a5)
    insert_point->next = newitem;
800190e0:	fdc42783          	lw	a5,-36(s0)
800190e4:	fec42703          	lw	a4,-20(s0)
800190e8:	00e7a023          	sw	a4,0(a5)

    newitem->info = *datablock;
800190ec:	fd042783          	lw	a5,-48(s0)
800190f0:	0007a703          	lw	a4,0(a5)
800190f4:	fec42783          	lw	a5,-20(s0)
800190f8:	00e7a223          	sw	a4,4(a5)
    (*datablock)++;
800190fc:	fd042783          	lw	a5,-48(s0)
80019100:	0007a783          	lw	a5,0(a5)
80019104:	00478713          	addi	a4,a5,4
80019108:	fd042783          	lw	a5,-48(s0)
8001910c:	00e7a023          	sw	a4,0(a5)
    copy_info(newitem->info, info);
80019110:	fec42783          	lw	a5,-20(s0)
80019114:	0047a783          	lw	a5,4(a5)
80019118:	fd842583          	lw	a1,-40(s0)
8001911c:	00078513          	mv	a0,a5
80019120:	90dff0ef          	jal	ra,80018a2c <copy_info>

    return newitem;
80019124:	fec42783          	lw	a5,-20(s0)
}
80019128:	00078513          	mv	a0,a5
8001912c:	03c12083          	lw	ra,60(sp)
80019130:	03812403          	lw	s0,56(sp)
80019134:	04010113          	addi	sp,sp,64
80019138:	00008067          	ret

8001913c <core_list_remove>:
        Returns:
        Removed item.
*/
list_head *
core_list_remove(list_head *item)
{
8001913c:	fd010113          	addi	sp,sp,-48
80019140:	02812623          	sw	s0,44(sp)
80019144:	03010413          	addi	s0,sp,48
80019148:	fca42e23          	sw	a0,-36(s0)
    list_data *tmp;
    list_head *ret = item->next;
8001914c:	fdc42783          	lw	a5,-36(s0)
80019150:	0007a783          	lw	a5,0(a5)
80019154:	fef42623          	sw	a5,-20(s0)
    /* swap data pointers */
    tmp        = item->info;
80019158:	fdc42783          	lw	a5,-36(s0)
8001915c:	0047a783          	lw	a5,4(a5)
80019160:	fef42423          	sw	a5,-24(s0)
    item->info = ret->info;
80019164:	fec42783          	lw	a5,-20(s0)
80019168:	0047a703          	lw	a4,4(a5)
8001916c:	fdc42783          	lw	a5,-36(s0)
80019170:	00e7a223          	sw	a4,4(a5)
    ret->info  = tmp;
80019174:	fec42783          	lw	a5,-20(s0)
80019178:	fe842703          	lw	a4,-24(s0)
8001917c:	00e7a223          	sw	a4,4(a5)
    /* and eliminate item */
    item->next = item->next->next;
80019180:	fdc42783          	lw	a5,-36(s0)
80019184:	0007a783          	lw	a5,0(a5)
80019188:	0007a703          	lw	a4,0(a5)
8001918c:	fdc42783          	lw	a5,-36(s0)
80019190:	00e7a023          	sw	a4,0(a5)
    ret->next  = NULL;
80019194:	fec42783          	lw	a5,-20(s0)
80019198:	0007a023          	sw	zero,0(a5)
    return ret;
8001919c:	fec42783          	lw	a5,-20(s0)
}
800191a0:	00078513          	mv	a0,a5
800191a4:	02c12403          	lw	s0,44(sp)
800191a8:	03010113          	addi	sp,sp,48
800191ac:	00008067          	ret

800191b0 <core_list_undo_remove>:
        The item that was linked back to the list.

*/
list_head *
core_list_undo_remove(list_head *item_removed, list_head *item_modified)
{
800191b0:	fd010113          	addi	sp,sp,-48
800191b4:	02812623          	sw	s0,44(sp)
800191b8:	03010413          	addi	s0,sp,48
800191bc:	fca42e23          	sw	a0,-36(s0)
800191c0:	fcb42c23          	sw	a1,-40(s0)
    list_data *tmp;
    /* swap data pointers */
    tmp                 = item_removed->info;
800191c4:	fdc42783          	lw	a5,-36(s0)
800191c8:	0047a783          	lw	a5,4(a5)
800191cc:	fef42623          	sw	a5,-20(s0)
    item_removed->info  = item_modified->info;
800191d0:	fd842783          	lw	a5,-40(s0)
800191d4:	0047a703          	lw	a4,4(a5)
800191d8:	fdc42783          	lw	a5,-36(s0)
800191dc:	00e7a223          	sw	a4,4(a5)
    item_modified->info = tmp;
800191e0:	fd842783          	lw	a5,-40(s0)
800191e4:	fec42703          	lw	a4,-20(s0)
800191e8:	00e7a223          	sw	a4,4(a5)
    /* and insert item */
    item_removed->next  = item_modified->next;
800191ec:	fd842783          	lw	a5,-40(s0)
800191f0:	0007a703          	lw	a4,0(a5)
800191f4:	fdc42783          	lw	a5,-36(s0)
800191f8:	00e7a023          	sw	a4,0(a5)
    item_modified->next = item_removed;
800191fc:	fd842783          	lw	a5,-40(s0)
80019200:	fdc42703          	lw	a4,-36(s0)
80019204:	00e7a023          	sw	a4,0(a5)
    return item_removed;
80019208:	fdc42783          	lw	a5,-36(s0)
}
8001920c:	00078513          	mv	a0,a5
80019210:	02c12403          	lw	s0,44(sp)
80019214:	03010113          	addi	sp,sp,48
80019218:	00008067          	ret

8001921c <core_list_find>:
        Returns:
        Found item, or NULL if not found.
*/
list_head *
core_list_find(list_head *list, list_data *info)
{
8001921c:	fe010113          	addi	sp,sp,-32
80019220:	00812e23          	sw	s0,28(sp)
80019224:	02010413          	addi	s0,sp,32
80019228:	fea42623          	sw	a0,-20(s0)
8001922c:	feb42423          	sw	a1,-24(s0)
    if (info->idx >= 0)
80019230:	fe842783          	lw	a5,-24(s0)
80019234:	00279783          	lh	a5,2(a5)
80019238:	0407c463          	bltz	a5,80019280 <core_list_find+0x64>
    {
        while (list && (list->info->idx != info->idx))
8001923c:	0100006f          	j	8001924c <core_list_find+0x30>
            list = list->next;
80019240:	fec42783          	lw	a5,-20(s0)
80019244:	0007a783          	lw	a5,0(a5)
80019248:	fef42623          	sw	a5,-20(s0)
        while (list && (list->info->idx != info->idx))
8001924c:	fec42783          	lw	a5,-20(s0)
80019250:	00078e63          	beqz	a5,8001926c <core_list_find+0x50>
80019254:	fec42783          	lw	a5,-20(s0)
80019258:	0047a783          	lw	a5,4(a5)
8001925c:	00279703          	lh	a4,2(a5)
80019260:	fe842783          	lw	a5,-24(s0)
80019264:	00279783          	lh	a5,2(a5)
80019268:	fcf71ce3          	bne	a4,a5,80019240 <core_list_find+0x24>
        return list;
8001926c:	fec42783          	lw	a5,-20(s0)
80019270:	0400006f          	j	800192b0 <core_list_find+0x94>
    }
    else
    {
        while (list && ((list->info->data16 & 0xff) != info->data16))
            list = list->next;
80019274:	fec42783          	lw	a5,-20(s0)
80019278:	0007a783          	lw	a5,0(a5)
8001927c:	fef42623          	sw	a5,-20(s0)
        while (list && ((list->info->data16 & 0xff) != info->data16))
80019280:	fec42783          	lw	a5,-20(s0)
80019284:	02078463          	beqz	a5,800192ac <core_list_find+0x90>
80019288:	fec42783          	lw	a5,-20(s0)
8001928c:	0047a783          	lw	a5,4(a5)
80019290:	00079783          	lh	a5,0(a5)
80019294:	01079793          	slli	a5,a5,0x10
80019298:	0107d793          	srli	a5,a5,0x10
8001929c:	0ff7f793          	zext.b	a5,a5
800192a0:	fe842703          	lw	a4,-24(s0)
800192a4:	00071703          	lh	a4,0(a4)
800192a8:	fce796e3          	bne	a5,a4,80019274 <core_list_find+0x58>
        return list;
800192ac:	fec42783          	lw	a5,-20(s0)
    }
}
800192b0:	00078513          	mv	a0,a5
800192b4:	01c12403          	lw	s0,28(sp)
800192b8:	02010113          	addi	sp,sp,32
800192bc:	00008067          	ret

800192c0 <core_list_reverse>:
        Found item, or NULL if not found.
*/

list_head *
core_list_reverse(list_head *list)
{
800192c0:	fd010113          	addi	sp,sp,-48
800192c4:	02812623          	sw	s0,44(sp)
800192c8:	03010413          	addi	s0,sp,48
800192cc:	fca42e23          	sw	a0,-36(s0)
    list_head *next = NULL, *tmp;
800192d0:	fe042623          	sw	zero,-20(s0)
    while (list)
800192d4:	02c0006f          	j	80019300 <core_list_reverse+0x40>
    {
        tmp        = list->next;
800192d8:	fdc42783          	lw	a5,-36(s0)
800192dc:	0007a783          	lw	a5,0(a5)
800192e0:	fef42423          	sw	a5,-24(s0)
        list->next = next;
800192e4:	fdc42783          	lw	a5,-36(s0)
800192e8:	fec42703          	lw	a4,-20(s0)
800192ec:	00e7a023          	sw	a4,0(a5)
        next       = list;
800192f0:	fdc42783          	lw	a5,-36(s0)
800192f4:	fef42623          	sw	a5,-20(s0)
        list       = tmp;
800192f8:	fe842783          	lw	a5,-24(s0)
800192fc:	fcf42e23          	sw	a5,-36(s0)
    while (list)
80019300:	fdc42783          	lw	a5,-36(s0)
80019304:	fc079ae3          	bnez	a5,800192d8 <core_list_reverse+0x18>
    }
    return next;
80019308:	fec42783          	lw	a5,-20(s0)
}
8001930c:	00078513          	mv	a0,a5
80019310:	02c12403          	lw	s0,44(sp)
80019314:	03010113          	addi	sp,sp,48
80019318:	00008067          	ret

8001931c <core_list_mergesort>:
        but the algorithm could theoretically modify where the list starts.

 */
list_head *
core_list_mergesort(list_head *list, list_cmp cmp, core_results *res)
{
8001931c:	fb010113          	addi	sp,sp,-80
80019320:	04112623          	sw	ra,76(sp)
80019324:	04812423          	sw	s0,72(sp)
80019328:	05010413          	addi	s0,sp,80
8001932c:	faa42e23          	sw	a0,-68(s0)
80019330:	fab42c23          	sw	a1,-72(s0)
80019334:	fac42a23          	sw	a2,-76(s0)
    list_head *p, *q, *e, *tail;
    ee_s32     insize, nmerges, psize, qsize, i;

    insize = 1;
80019338:	00100793          	li	a5,1
8001933c:	fcf42e23          	sw	a5,-36(s0)

    while (1)
    {
        p    = list;
80019340:	fbc42783          	lw	a5,-68(s0)
80019344:	fef42623          	sw	a5,-20(s0)
        list = NULL;
80019348:	fa042e23          	sw	zero,-68(s0)
        tail = NULL;
8001934c:	fe042023          	sw	zero,-32(s0)

        nmerges = 0; /* count number of merges we do in this pass */
80019350:	fc042c23          	sw	zero,-40(s0)

        while (p)
80019354:	1880006f          	j	800194dc <core_list_mergesort+0x1c0>
        {
            nmerges++; /* there exists a merge to be done */
80019358:	fd842783          	lw	a5,-40(s0)
8001935c:	00178793          	addi	a5,a5,1
80019360:	fcf42c23          	sw	a5,-40(s0)
            /* step `insize' places along from p */
            q     = p;
80019364:	fec42783          	lw	a5,-20(s0)
80019368:	fef42423          	sw	a5,-24(s0)
            psize = 0;
8001936c:	fc042a23          	sw	zero,-44(s0)
            for (i = 0; i < insize; i++)
80019370:	fc042623          	sw	zero,-52(s0)
80019374:	0300006f          	j	800193a4 <core_list_mergesort+0x88>
            {
                psize++;
80019378:	fd442783          	lw	a5,-44(s0)
8001937c:	00178793          	addi	a5,a5,1
80019380:	fcf42a23          	sw	a5,-44(s0)
                q = q->next;
80019384:	fe842783          	lw	a5,-24(s0)
80019388:	0007a783          	lw	a5,0(a5)
8001938c:	fef42423          	sw	a5,-24(s0)
                if (!q)
80019390:	fe842783          	lw	a5,-24(s0)
80019394:	02078063          	beqz	a5,800193b4 <core_list_mergesort+0x98>
            for (i = 0; i < insize; i++)
80019398:	fcc42783          	lw	a5,-52(s0)
8001939c:	00178793          	addi	a5,a5,1
800193a0:	fcf42623          	sw	a5,-52(s0)
800193a4:	fcc42703          	lw	a4,-52(s0)
800193a8:	fdc42783          	lw	a5,-36(s0)
800193ac:	fcf746e3          	blt	a4,a5,80019378 <core_list_mergesort+0x5c>
800193b0:	0080006f          	j	800193b8 <core_list_mergesort+0x9c>
                    break;
800193b4:	00000013          	nop
            }

            /* if q hasn't fallen off end, we have two lists to merge */
            qsize = insize;
800193b8:	fdc42783          	lw	a5,-36(s0)
800193bc:	fcf42823          	sw	a5,-48(s0)

            /* now we have two lists; merge them */
            while (psize > 0 || (qsize > 0 && q))
800193c0:	0fc0006f          	j	800194bc <core_list_mergesort+0x1a0>
            {

                /* decide whether next element of merge comes from p or q */
                if (psize == 0)
800193c4:	fd442783          	lw	a5,-44(s0)
800193c8:	02079463          	bnez	a5,800193f0 <core_list_mergesort+0xd4>
                {
                    /* p is empty; e must come from q. */
                    e = q;
800193cc:	fe842783          	lw	a5,-24(s0)
800193d0:	fef42223          	sw	a5,-28(s0)
                    q = q->next;
800193d4:	fe842783          	lw	a5,-24(s0)
800193d8:	0007a783          	lw	a5,0(a5)
800193dc:	fef42423          	sw	a5,-24(s0)
                    qsize--;
800193e0:	fd042783          	lw	a5,-48(s0)
800193e4:	fff78793          	addi	a5,a5,-1
800193e8:	fcf42823          	sw	a5,-48(s0)
800193ec:	0a80006f          	j	80019494 <core_list_mergesort+0x178>
                }
                else if (qsize == 0 || !q)
800193f0:	fd042783          	lw	a5,-48(s0)
800193f4:	00078663          	beqz	a5,80019400 <core_list_mergesort+0xe4>
800193f8:	fe842783          	lw	a5,-24(s0)
800193fc:	02079463          	bnez	a5,80019424 <core_list_mergesort+0x108>
                {
                    /* q is empty; e must come from p. */
                    e = p;
80019400:	fec42783          	lw	a5,-20(s0)
80019404:	fef42223          	sw	a5,-28(s0)
                    p = p->next;
80019408:	fec42783          	lw	a5,-20(s0)
8001940c:	0007a783          	lw	a5,0(a5)
80019410:	fef42623          	sw	a5,-20(s0)
                    psize--;
80019414:	fd442783          	lw	a5,-44(s0)
80019418:	fff78793          	addi	a5,a5,-1
8001941c:	fcf42a23          	sw	a5,-44(s0)
80019420:	0740006f          	j	80019494 <core_list_mergesort+0x178>
                }
                else if (cmp(p->info, q->info, res) <= 0)
80019424:	fec42783          	lw	a5,-20(s0)
80019428:	0047a703          	lw	a4,4(a5)
8001942c:	fe842783          	lw	a5,-24(s0)
80019430:	0047a683          	lw	a3,4(a5)
80019434:	fb842783          	lw	a5,-72(s0)
80019438:	fb442603          	lw	a2,-76(s0)
8001943c:	00068593          	mv	a1,a3
80019440:	00070513          	mv	a0,a4
80019444:	000780e7          	jalr	a5
80019448:	00050793          	mv	a5,a0
8001944c:	02f04463          	bgtz	a5,80019474 <core_list_mergesort+0x158>
                {
                    /* First element of p is lower (or same); e must come from
                     * p. */
                    e = p;
80019450:	fec42783          	lw	a5,-20(s0)
80019454:	fef42223          	sw	a5,-28(s0)
                    p = p->next;
80019458:	fec42783          	lw	a5,-20(s0)
8001945c:	0007a783          	lw	a5,0(a5)
80019460:	fef42623          	sw	a5,-20(s0)
                    psize--;
80019464:	fd442783          	lw	a5,-44(s0)
80019468:	fff78793          	addi	a5,a5,-1
8001946c:	fcf42a23          	sw	a5,-44(s0)
80019470:	0240006f          	j	80019494 <core_list_mergesort+0x178>
                }
                else
                {
                    /* First element of q is lower; e must come from q. */
                    e = q;
80019474:	fe842783          	lw	a5,-24(s0)
80019478:	fef42223          	sw	a5,-28(s0)
                    q = q->next;
8001947c:	fe842783          	lw	a5,-24(s0)
80019480:	0007a783          	lw	a5,0(a5)
80019484:	fef42423          	sw	a5,-24(s0)
                    qsize--;
80019488:	fd042783          	lw	a5,-48(s0)
8001948c:	fff78793          	addi	a5,a5,-1
80019490:	fcf42823          	sw	a5,-48(s0)
                }

                /* add the next element to the merged list */
                if (tail)
80019494:	fe042783          	lw	a5,-32(s0)
80019498:	00078a63          	beqz	a5,800194ac <core_list_mergesort+0x190>
                {
                    tail->next = e;
8001949c:	fe042783          	lw	a5,-32(s0)
800194a0:	fe442703          	lw	a4,-28(s0)
800194a4:	00e7a023          	sw	a4,0(a5)
800194a8:	00c0006f          	j	800194b4 <core_list_mergesort+0x198>
                }
                else
                {
                    list = e;
800194ac:	fe442783          	lw	a5,-28(s0)
800194b0:	faf42e23          	sw	a5,-68(s0)
                }
                tail = e;
800194b4:	fe442783          	lw	a5,-28(s0)
800194b8:	fef42023          	sw	a5,-32(s0)
            while (psize > 0 || (qsize > 0 && q))
800194bc:	fd442783          	lw	a5,-44(s0)
800194c0:	f0f042e3          	bgtz	a5,800193c4 <core_list_mergesort+0xa8>
800194c4:	fd042783          	lw	a5,-48(s0)
800194c8:	00f05663          	blez	a5,800194d4 <core_list_mergesort+0x1b8>
800194cc:	fe842783          	lw	a5,-24(s0)
800194d0:	ee079ae3          	bnez	a5,800193c4 <core_list_mergesort+0xa8>
            }

            /* now p has stepped `insize' places along, and q has too */
            p = q;
800194d4:	fe842783          	lw	a5,-24(s0)
800194d8:	fef42623          	sw	a5,-20(s0)
        while (p)
800194dc:	fec42783          	lw	a5,-20(s0)
800194e0:	e6079ce3          	bnez	a5,80019358 <core_list_mergesort+0x3c>
        }

        tail->next = NULL;
800194e4:	fe042783          	lw	a5,-32(s0)
800194e8:	0007a023          	sw	zero,0(a5)

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
800194ec:	fd842703          	lw	a4,-40(s0)
800194f0:	00100793          	li	a5,1
800194f4:	00e7c663          	blt	a5,a4,80019500 <core_list_mergesort+0x1e4>
            return list;
800194f8:	fbc42783          	lw	a5,-68(s0)
800194fc:	0140006f          	j	80019510 <core_list_mergesort+0x1f4>

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
80019500:	fdc42783          	lw	a5,-36(s0)
80019504:	00179793          	slli	a5,a5,0x1
80019508:	fcf42e23          	sw	a5,-36(s0)
        p    = list;
8001950c:	e35ff06f          	j	80019340 <core_list_mergesort+0x24>
    }
#if COMPILER_REQUIRES_SORT_RETURN
    return list;
#endif
}
80019510:	00078513          	mv	a0,a5
80019514:	04c12083          	lw	ra,76(sp)
80019518:	04812403          	lw	s0,72(sp)
8001951c:	05010113          	addi	sp,sp,80
80019520:	00008067          	ret

80019524 <iterate>:
                                    (ee_u16)0xe5a4,
                                    (ee_u16)0x8e3a,
                                    (ee_u16)0x8d84 };
void *
iterate(void *pres)
{
80019524:	fd010113          	addi	sp,sp,-48
80019528:	02112623          	sw	ra,44(sp)
8001952c:	02812423          	sw	s0,40(sp)
80019530:	03010413          	addi	s0,sp,48
80019534:	fca42e23          	sw	a0,-36(s0)
    ee_u32        i;
    ee_u16        crc;
    core_results *res        = (core_results *)pres;
80019538:	fdc42783          	lw	a5,-36(s0)
8001953c:	fef42423          	sw	a5,-24(s0)
    ee_u32        iterations = res->iterations;
80019540:	fe842783          	lw	a5,-24(s0)
80019544:	01c7a783          	lw	a5,28(a5)
80019548:	fef42223          	sw	a5,-28(s0)
    res->crc                 = 0;
8001954c:	fe842783          	lw	a5,-24(s0)
80019550:	02079c23          	sh	zero,56(a5)
    res->crclist             = 0;
80019554:	fe842783          	lw	a5,-24(s0)
80019558:	02079d23          	sh	zero,58(a5)
    res->crcmatrix           = 0;
8001955c:	fe842783          	lw	a5,-24(s0)
80019560:	02079e23          	sh	zero,60(a5)
    res->crcstate            = 0;
80019564:	fe842783          	lw	a5,-24(s0)
80019568:	02079f23          	sh	zero,62(a5)

    for (i = 0; i < iterations; i++)
8001956c:	fe042623          	sw	zero,-20(s0)
80019570:	0a00006f          	j	80019610 <iterate+0xec>
    {
        crc      = core_bench_list(res, 1);
80019574:	00100593          	li	a1,1
80019578:	fe842503          	lw	a0,-24(s0)
8001957c:	cf4ff0ef          	jal	ra,80018a70 <core_bench_list>
80019580:	00050793          	mv	a5,a0
80019584:	fef41123          	sh	a5,-30(s0)
        res->crc = crcu16(crc, res->crc);
80019588:	fe842783          	lw	a5,-24(s0)
8001958c:	0387d703          	lhu	a4,56(a5)
80019590:	fe245783          	lhu	a5,-30(s0)
80019594:	00070593          	mv	a1,a4
80019598:	00078513          	mv	a0,a5
8001959c:	698020ef          	jal	ra,8001bc34 <crcu16>
800195a0:	00050793          	mv	a5,a0
800195a4:	00078713          	mv	a4,a5
800195a8:	fe842783          	lw	a5,-24(s0)
800195ac:	02e79c23          	sh	a4,56(a5)
        crc      = core_bench_list(res, -1);
800195b0:	fff00593          	li	a1,-1
800195b4:	fe842503          	lw	a0,-24(s0)
800195b8:	cb8ff0ef          	jal	ra,80018a70 <core_bench_list>
800195bc:	00050793          	mv	a5,a0
800195c0:	fef41123          	sh	a5,-30(s0)
        res->crc = crcu16(crc, res->crc);
800195c4:	fe842783          	lw	a5,-24(s0)
800195c8:	0387d703          	lhu	a4,56(a5)
800195cc:	fe245783          	lhu	a5,-30(s0)
800195d0:	00070593          	mv	a1,a4
800195d4:	00078513          	mv	a0,a5
800195d8:	65c020ef          	jal	ra,8001bc34 <crcu16>
800195dc:	00050793          	mv	a5,a0
800195e0:	00078713          	mv	a4,a5
800195e4:	fe842783          	lw	a5,-24(s0)
800195e8:	02e79c23          	sh	a4,56(a5)
        if (i == 0)
800195ec:	fec42783          	lw	a5,-20(s0)
800195f0:	00079a63          	bnez	a5,80019604 <iterate+0xe0>
            res->crclist = res->crc;
800195f4:	fe842783          	lw	a5,-24(s0)
800195f8:	0387d703          	lhu	a4,56(a5)
800195fc:	fe842783          	lw	a5,-24(s0)
80019600:	02e79d23          	sh	a4,58(a5)
    for (i = 0; i < iterations; i++)
80019604:	fec42783          	lw	a5,-20(s0)
80019608:	00178793          	addi	a5,a5,1
8001960c:	fef42623          	sw	a5,-20(s0)
80019610:	fec42703          	lw	a4,-20(s0)
80019614:	fe442783          	lw	a5,-28(s0)
80019618:	f4f76ee3          	bltu	a4,a5,80019574 <iterate+0x50>
    }
    return NULL;
8001961c:	00000793          	li	a5,0
}
80019620:	00078513          	mv	a0,a5
80019624:	02c12083          	lw	ra,44(sp)
80019628:	02812403          	lw	s0,40(sp)
8001962c:	03010113          	addi	sp,sp,48
80019630:	00008067          	ret

80019634 <coremark_main>:
*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE
coremark_main(void)
{
80019634:	81010113          	addi	sp,sp,-2032
80019638:	7e112623          	sw	ra,2028(sp)
8001963c:	7e812423          	sw	s0,2024(sp)
80019640:	7e912223          	sw	s1,2020(sp)
80019644:	7f010413          	addi	s0,sp,2032
80019648:	fa010113          	addi	sp,sp,-96
    int   argc = 0;
8001964c:	fc042623          	sw	zero,-52(s0)
#else
MAIN_RETURN_TYPE
coremark_main(int argc, char *argv[])
{
#endif
    ee_u16       i, j = 0, num_algorithms = 0;
80019650:	fe041623          	sh	zero,-20(s0)
80019654:	fe041523          	sh	zero,-22(s0)
    ee_s16       known_id = -1, total_errors = 0;
80019658:	fff00793          	li	a5,-1
8001965c:	fef41423          	sh	a5,-24(s0)
80019660:	fe041323          	sh	zero,-26(s0)
    ee_u16       seedcrc = 0;
80019664:	fc041b23          	sh	zero,-42(s0)
    core_results results[MULTITHREAD];
#if (MEM_METHOD == MEM_STACK)
    ee_u8 stack_memblock[TOTAL_DATA_SIZE * MULTITHREAD];
#endif
    /* first call any initializations needed */
    portable_init(&(results[0].port), &argc, argv);
80019668:	fc840693          	addi	a3,s0,-56
8001966c:	fcc40713          	addi	a4,s0,-52
80019670:	f8440793          	addi	a5,s0,-124
80019674:	04278793          	addi	a5,a5,66
80019678:	00068613          	mv	a2,a3
8001967c:	00070593          	mv	a1,a4
80019680:	00078513          	mv	a0,a5
80019684:	259010ef          	jal	ra,8001b0dc <portable_init>
    if (sizeof(struct list_head_s) > 128)
    {
        ee_printf("list_head structure too big for comparable data!\n");
        return MAIN_RETURN_VAL;
    }
    results[0].seed1      = get_seed(1);
80019688:	00100513          	li	a0,1
8001968c:	3d8020ef          	jal	ra,8001ba64 <get_seed_32>
80019690:	00050793          	mv	a5,a0
80019694:	01079793          	slli	a5,a5,0x10
80019698:	4107d793          	srai	a5,a5,0x10
8001969c:	f8f41223          	sh	a5,-124(s0)
    results[0].seed2      = get_seed(2);
800196a0:	00200513          	li	a0,2
800196a4:	3c0020ef          	jal	ra,8001ba64 <get_seed_32>
800196a8:	00050793          	mv	a5,a0
800196ac:	01079793          	slli	a5,a5,0x10
800196b0:	4107d793          	srai	a5,a5,0x10
800196b4:	f8f41323          	sh	a5,-122(s0)
    results[0].seed3      = get_seed(3);
800196b8:	00300513          	li	a0,3
800196bc:	3a8020ef          	jal	ra,8001ba64 <get_seed_32>
800196c0:	00050793          	mv	a5,a0
800196c4:	01079793          	slli	a5,a5,0x10
800196c8:	4107d793          	srai	a5,a5,0x10
800196cc:	f8f41423          	sh	a5,-120(s0)
    results[0].iterations = get_seed_32(4);
800196d0:	00400513          	li	a0,4
800196d4:	390020ef          	jal	ra,8001ba64 <get_seed_32>
800196d8:	00050793          	mv	a5,a0
800196dc:	faf42023          	sw	a5,-96(s0)
#if CORE_DEBUG
    results[0].iterations = 1;
#endif
    results[0].execs = get_seed_32(5);
800196e0:	00500513          	li	a0,5
800196e4:	380020ef          	jal	ra,8001ba64 <get_seed_32>
800196e8:	00050793          	mv	a5,a0
800196ec:	faf42223          	sw	a5,-92(s0)
    if (results[0].execs == 0)
800196f0:	fa442783          	lw	a5,-92(s0)
800196f4:	00079663          	bnez	a5,80019700 <coremark_main+0xcc>
    { /* if not supplied, execute all algorithms */
        results[0].execs = ALL_ALGORITHMS_MASK;
800196f8:	00700793          	li	a5,7
800196fc:	faf42223          	sw	a5,-92(s0)
    }
    /* put in some default values based on one seed only for easy testing */
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
80019700:	f8441783          	lh	a5,-124(s0)
80019704:	02079263          	bnez	a5,80019728 <coremark_main+0xf4>
80019708:	f8641783          	lh	a5,-122(s0)
8001970c:	00079e63          	bnez	a5,80019728 <coremark_main+0xf4>
        && (results[0].seed3 == 0))
80019710:	f8841783          	lh	a5,-120(s0)
80019714:	00079a63          	bnez	a5,80019728 <coremark_main+0xf4>
    { /* performance run */
        results[0].seed1 = 0;
80019718:	f8041223          	sh	zero,-124(s0)
        results[0].seed2 = 0;
8001971c:	f8041323          	sh	zero,-122(s0)
        results[0].seed3 = 0x66;
80019720:	06600793          	li	a5,102
80019724:	f8f41423          	sh	a5,-120(s0)
    }
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
80019728:	f8441703          	lh	a4,-124(s0)
8001972c:	00100793          	li	a5,1
80019730:	02f71a63          	bne	a4,a5,80019764 <coremark_main+0x130>
80019734:	f8641783          	lh	a5,-122(s0)
80019738:	02079663          	bnez	a5,80019764 <coremark_main+0x130>
        && (results[0].seed3 == 0))
8001973c:	f8841783          	lh	a5,-120(s0)
80019740:	02079263          	bnez	a5,80019764 <coremark_main+0x130>
    { /* validation run */
        results[0].seed1 = 0x3415;
80019744:	000037b7          	lui	a5,0x3
80019748:	41578793          	addi	a5,a5,1045 # 3415 <__STACKSIZE__-0xbeb>
8001974c:	f8f41223          	sh	a5,-124(s0)
        results[0].seed2 = 0x3415;
80019750:	000037b7          	lui	a5,0x3
80019754:	41578793          	addi	a5,a5,1045 # 3415 <__STACKSIZE__-0xbeb>
80019758:	f8f41323          	sh	a5,-122(s0)
        results[0].seed3 = 0x66;
8001975c:	06600793          	li	a5,102
80019760:	f8f41423          	sh	a5,-120(s0)
        results[i].seed3       = results[0].seed3;
        results[i].err         = 0;
        results[i].execs       = results[0].execs;
    }
#elif (MEM_METHOD == MEM_STACK)
for (i = 0; i < MULTITHREAD; i++)
80019764:	fe041723          	sh	zero,-18(s0)
80019768:	1280006f          	j	80019890 <coremark_main+0x25c>
{
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
8001976c:	fee45703          	lhu	a4,-18(s0)
80019770:	7d000793          	li	a5,2000
80019774:	02f707b3          	mul	a5,a4,a5
80019778:	00078693          	mv	a3,a5
8001977c:	fee45703          	lhu	a4,-18(s0)
80019780:	fffff7b7          	lui	a5,0xfffff
80019784:	7c478793          	addi	a5,a5,1988 # fffff7c4 <__bss_end+0x7ff79008>
80019788:	ff078793          	addi	a5,a5,-16
8001978c:	008787b3          	add	a5,a5,s0
80019790:	00d786b3          	add	a3,a5,a3
80019794:	00070793          	mv	a5,a4
80019798:	00479793          	slli	a5,a5,0x4
8001979c:	00e787b3          	add	a5,a5,a4
800197a0:	00279793          	slli	a5,a5,0x2
800197a4:	ff078793          	addi	a5,a5,-16
800197a8:	008787b3          	add	a5,a5,s0
800197ac:	f8d7ae23          	sw	a3,-100(a5)
    results[i].size        = TOTAL_DATA_SIZE;
800197b0:	fee45703          	lhu	a4,-18(s0)
800197b4:	00070793          	mv	a5,a4
800197b8:	00479793          	slli	a5,a5,0x4
800197bc:	00e787b3          	add	a5,a5,a4
800197c0:	00279793          	slli	a5,a5,0x2
800197c4:	ff078793          	addi	a5,a5,-16
800197c8:	008787b3          	add	a5,a5,s0
800197cc:	7d000713          	li	a4,2000
800197d0:	fae7a623          	sw	a4,-84(a5)
    results[i].seed1       = results[0].seed1;
800197d4:	fee45703          	lhu	a4,-18(s0)
800197d8:	f8441683          	lh	a3,-124(s0)
800197dc:	00070793          	mv	a5,a4
800197e0:	00479793          	slli	a5,a5,0x4
800197e4:	00e787b3          	add	a5,a5,a4
800197e8:	00279793          	slli	a5,a5,0x2
800197ec:	ff078793          	addi	a5,a5,-16
800197f0:	008787b3          	add	a5,a5,s0
800197f4:	f8d79a23          	sh	a3,-108(a5)
    results[i].seed2       = results[0].seed2;
800197f8:	fee45703          	lhu	a4,-18(s0)
800197fc:	f8641683          	lh	a3,-122(s0)
80019800:	00070793          	mv	a5,a4
80019804:	00479793          	slli	a5,a5,0x4
80019808:	00e787b3          	add	a5,a5,a4
8001980c:	00279793          	slli	a5,a5,0x2
80019810:	ff078793          	addi	a5,a5,-16
80019814:	008787b3          	add	a5,a5,s0
80019818:	f8d79b23          	sh	a3,-106(a5)
    results[i].seed3       = results[0].seed3;
8001981c:	fee45703          	lhu	a4,-18(s0)
80019820:	f8841683          	lh	a3,-120(s0)
80019824:	00070793          	mv	a5,a4
80019828:	00479793          	slli	a5,a5,0x4
8001982c:	00e787b3          	add	a5,a5,a4
80019830:	00279793          	slli	a5,a5,0x2
80019834:	ff078793          	addi	a5,a5,-16
80019838:	008787b3          	add	a5,a5,s0
8001983c:	f8d79c23          	sh	a3,-104(a5)
    results[i].err         = 0;
80019840:	fee45703          	lhu	a4,-18(s0)
80019844:	00070793          	mv	a5,a4
80019848:	00479793          	slli	a5,a5,0x4
8001984c:	00e787b3          	add	a5,a5,a4
80019850:	00279793          	slli	a5,a5,0x2
80019854:	ff078793          	addi	a5,a5,-16
80019858:	008787b3          	add	a5,a5,s0
8001985c:	fc079a23          	sh	zero,-44(a5)
    results[i].execs       = results[0].execs;
80019860:	fee45703          	lhu	a4,-18(s0)
80019864:	fa442683          	lw	a3,-92(s0)
80019868:	00070793          	mv	a5,a4
8001986c:	00479793          	slli	a5,a5,0x4
80019870:	00e787b3          	add	a5,a5,a4
80019874:	00279793          	slli	a5,a5,0x2
80019878:	ff078793          	addi	a5,a5,-16
8001987c:	008787b3          	add	a5,a5,s0
80019880:	fad7aa23          	sw	a3,-76(a5)
for (i = 0; i < MULTITHREAD; i++)
80019884:	fee45783          	lhu	a5,-18(s0)
80019888:	00178793          	addi	a5,a5,1
8001988c:	fef41723          	sh	a5,-18(s0)
80019890:	fee45783          	lhu	a5,-18(s0)
80019894:	ec078ce3          	beqz	a5,8001976c <coremark_main+0x138>
#else
#error "Please define a way to initialize a memory block."
#endif
    /* Data init */
    /* Find out how space much we have based on number of algorithms */
    for (i = 0; i < NUM_ALGORITHMS; i++)
80019898:	fe041723          	sh	zero,-18(s0)
8001989c:	0380006f          	j	800198d4 <coremark_main+0x2a0>
    {
        if ((1 << (ee_u32)i) & results[0].execs)
800198a0:	fee45783          	lhu	a5,-18(s0)
800198a4:	00100713          	li	a4,1
800198a8:	00f717b3          	sll	a5,a4,a5
800198ac:	00078713          	mv	a4,a5
800198b0:	fa442783          	lw	a5,-92(s0)
800198b4:	00f777b3          	and	a5,a4,a5
800198b8:	00078863          	beqz	a5,800198c8 <coremark_main+0x294>
            num_algorithms++;
800198bc:	fea45783          	lhu	a5,-22(s0)
800198c0:	00178793          	addi	a5,a5,1
800198c4:	fef41523          	sh	a5,-22(s0)
    for (i = 0; i < NUM_ALGORITHMS; i++)
800198c8:	fee45783          	lhu	a5,-18(s0)
800198cc:	00178793          	addi	a5,a5,1
800198d0:	fef41723          	sh	a5,-18(s0)
800198d4:	fee45703          	lhu	a4,-18(s0)
800198d8:	00200793          	li	a5,2
800198dc:	fce7f2e3          	bgeu	a5,a4,800198a0 <coremark_main+0x26c>
    }
    for (i = 0; i < MULTITHREAD; i++)
800198e0:	fe041723          	sh	zero,-18(s0)
800198e4:	0580006f          	j	8001993c <coremark_main+0x308>
        results[i].size = results[i].size / num_algorithms;
800198e8:	fee45703          	lhu	a4,-18(s0)
800198ec:	00070793          	mv	a5,a4
800198f0:	00479793          	slli	a5,a5,0x4
800198f4:	00e787b3          	add	a5,a5,a4
800198f8:	00279793          	slli	a5,a5,0x2
800198fc:	ff078793          	addi	a5,a5,-16
80019900:	008787b3          	add	a5,a5,s0
80019904:	fac7a683          	lw	a3,-84(a5)
80019908:	fea45783          	lhu	a5,-22(s0)
8001990c:	fee45703          	lhu	a4,-18(s0)
80019910:	02f6d6b3          	divu	a3,a3,a5
80019914:	00070793          	mv	a5,a4
80019918:	00479793          	slli	a5,a5,0x4
8001991c:	00e787b3          	add	a5,a5,a4
80019920:	00279793          	slli	a5,a5,0x2
80019924:	ff078793          	addi	a5,a5,-16
80019928:	008787b3          	add	a5,a5,s0
8001992c:	fad7a623          	sw	a3,-84(a5)
    for (i = 0; i < MULTITHREAD; i++)
80019930:	fee45783          	lhu	a5,-18(s0)
80019934:	00178793          	addi	a5,a5,1
80019938:	fef41723          	sh	a5,-18(s0)
8001993c:	fee45783          	lhu	a5,-18(s0)
80019940:	fa0784e3          	beqz	a5,800198e8 <coremark_main+0x2b4>
    /* Assign pointers */
    for (i = 0; i < NUM_ALGORITHMS; i++)
80019944:	fe041723          	sh	zero,-18(s0)
80019948:	0b00006f          	j	800199f8 <coremark_main+0x3c4>
    {
        ee_u32 ctx;
        if ((1 << (ee_u32)i) & results[0].execs)
8001994c:	fee45783          	lhu	a5,-18(s0)
80019950:	00100713          	li	a4,1
80019954:	00f717b3          	sll	a5,a4,a5
80019958:	00078713          	mv	a4,a5
8001995c:	fa442783          	lw	a5,-92(s0)
80019960:	00f777b3          	and	a5,a4,a5
80019964:	08078463          	beqz	a5,800199ec <coremark_main+0x3b8>
        {
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
80019968:	fe042023          	sw	zero,-32(s0)
8001996c:	06c0006f          	j	800199d8 <coremark_main+0x3a4>
                results[ctx].memblock[i + 1]
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
80019970:	fe042703          	lw	a4,-32(s0)
80019974:	00070793          	mv	a5,a4
80019978:	00479793          	slli	a5,a5,0x4
8001997c:	00e787b3          	add	a5,a5,a4
80019980:	00279793          	slli	a5,a5,0x2
80019984:	ff078793          	addi	a5,a5,-16
80019988:	008787b3          	add	a5,a5,s0
8001998c:	f9c7a703          	lw	a4,-100(a5)
80019990:	f9c42683          	lw	a3,-100(s0)
80019994:	fec45783          	lhu	a5,-20(s0)
80019998:	02f687b3          	mul	a5,a3,a5
                results[ctx].memblock[i + 1]
8001999c:	fee45683          	lhu	a3,-18(s0)
800199a0:	00168613          	addi	a2,a3,1
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
800199a4:	00f706b3          	add	a3,a4,a5
800199a8:	fe042703          	lw	a4,-32(s0)
800199ac:	00070793          	mv	a5,a4
800199b0:	00479793          	slli	a5,a5,0x4
800199b4:	00e787b3          	add	a5,a5,a4
800199b8:	00c787b3          	add	a5,a5,a2
800199bc:	00279793          	slli	a5,a5,0x2
800199c0:	ff078793          	addi	a5,a5,-16
800199c4:	008787b3          	add	a5,a5,s0
800199c8:	f8d7ae23          	sw	a3,-100(a5)
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
800199cc:	fe042783          	lw	a5,-32(s0)
800199d0:	00178793          	addi	a5,a5,1
800199d4:	fef42023          	sw	a5,-32(s0)
800199d8:	fe042783          	lw	a5,-32(s0)
800199dc:	f8078ae3          	beqz	a5,80019970 <coremark_main+0x33c>
            j++;
800199e0:	fec45783          	lhu	a5,-20(s0)
800199e4:	00178793          	addi	a5,a5,1
800199e8:	fef41623          	sh	a5,-20(s0)
    for (i = 0; i < NUM_ALGORITHMS; i++)
800199ec:	fee45783          	lhu	a5,-18(s0)
800199f0:	00178793          	addi	a5,a5,1
800199f4:	fef41723          	sh	a5,-18(s0)
800199f8:	fee45703          	lhu	a4,-18(s0)
800199fc:	00200793          	li	a5,2
80019a00:	f4e7f6e3          	bgeu	a5,a4,8001994c <coremark_main+0x318>
        }
    }
    /* call inits */
    for (i = 0; i < MULTITHREAD; i++)
80019a04:	fe041723          	sh	zero,-18(s0)
80019a08:	1e80006f          	j	80019bf0 <coremark_main+0x5bc>
    {
        if (results[i].execs & ID_LIST)
80019a0c:	fee45703          	lhu	a4,-18(s0)
80019a10:	00070793          	mv	a5,a4
80019a14:	00479793          	slli	a5,a5,0x4
80019a18:	00e787b3          	add	a5,a5,a4
80019a1c:	00279793          	slli	a5,a5,0x2
80019a20:	ff078793          	addi	a5,a5,-16
80019a24:	008787b3          	add	a5,a5,s0
80019a28:	fb47a783          	lw	a5,-76(a5)
80019a2c:	0017f793          	andi	a5,a5,1
80019a30:	06078c63          	beqz	a5,80019aa8 <coremark_main+0x474>
        {
            results[i].list = core_list_init(
80019a34:	f9c42683          	lw	a3,-100(s0)
80019a38:	fee45703          	lhu	a4,-18(s0)
                results[0].size, results[i].memblock[1], results[i].seed1);
80019a3c:	00070793          	mv	a5,a4
80019a40:	00479793          	slli	a5,a5,0x4
80019a44:	00e787b3          	add	a5,a5,a4
80019a48:	00279793          	slli	a5,a5,0x2
80019a4c:	ff078793          	addi	a5,a5,-16
80019a50:	008787b3          	add	a5,a5,s0
80019a54:	fa07a583          	lw	a1,-96(a5)
            results[i].list = core_list_init(
80019a58:	fee45703          	lhu	a4,-18(s0)
80019a5c:	00070793          	mv	a5,a4
80019a60:	00479793          	slli	a5,a5,0x4
80019a64:	00e787b3          	add	a5,a5,a4
80019a68:	00279793          	slli	a5,a5,0x2
80019a6c:	ff078793          	addi	a5,a5,-16
80019a70:	008787b3          	add	a5,a5,s0
80019a74:	f9479783          	lh	a5,-108(a5)
80019a78:	fee45483          	lhu	s1,-18(s0)
80019a7c:	00078613          	mv	a2,a5
80019a80:	00068513          	mv	a0,a3
80019a84:	b14ff0ef          	jal	ra,80018d98 <core_list_init>
80019a88:	00050713          	mv	a4,a0
80019a8c:	00048793          	mv	a5,s1
80019a90:	00479793          	slli	a5,a5,0x4
80019a94:	009787b3          	add	a5,a5,s1
80019a98:	00279793          	slli	a5,a5,0x2
80019a9c:	ff078793          	addi	a5,a5,-16
80019aa0:	008787b3          	add	a5,a5,s0
80019aa4:	fae7ac23          	sw	a4,-72(a5)
        }
        if (results[i].execs & ID_MATRIX)
80019aa8:	fee45703          	lhu	a4,-18(s0)
80019aac:	00070793          	mv	a5,a4
80019ab0:	00479793          	slli	a5,a5,0x4
80019ab4:	00e787b3          	add	a5,a5,a4
80019ab8:	00279793          	slli	a5,a5,0x2
80019abc:	ff078793          	addi	a5,a5,-16
80019ac0:	008787b3          	add	a5,a5,s0
80019ac4:	fb47a783          	lw	a5,-76(a5)
80019ac8:	0027f793          	andi	a5,a5,2
80019acc:	0a078063          	beqz	a5,80019b6c <coremark_main+0x538>
        {
            core_init_matrix(results[0].size,
80019ad0:	f9c42503          	lw	a0,-100(s0)
80019ad4:	fee45703          	lhu	a4,-18(s0)
80019ad8:	00070793          	mv	a5,a4
80019adc:	00479793          	slli	a5,a5,0x4
80019ae0:	00e787b3          	add	a5,a5,a4
80019ae4:	00279793          	slli	a5,a5,0x2
80019ae8:	ff078793          	addi	a5,a5,-16
80019aec:	008787b3          	add	a5,a5,s0
80019af0:	fa47a583          	lw	a1,-92(a5)
                             results[i].memblock[2],
                             (ee_s32)results[i].seed1
80019af4:	fee45703          	lhu	a4,-18(s0)
80019af8:	00070793          	mv	a5,a4
80019afc:	00479793          	slli	a5,a5,0x4
80019b00:	00e787b3          	add	a5,a5,a4
80019b04:	00279793          	slli	a5,a5,0x2
80019b08:	ff078793          	addi	a5,a5,-16
80019b0c:	008787b3          	add	a5,a5,s0
80019b10:	f9479783          	lh	a5,-108(a5)
80019b14:	00078693          	mv	a3,a5
                                 | (((ee_s32)results[i].seed2) << 16),
80019b18:	fee45703          	lhu	a4,-18(s0)
80019b1c:	00070793          	mv	a5,a4
80019b20:	00479793          	slli	a5,a5,0x4
80019b24:	00e787b3          	add	a5,a5,a4
80019b28:	00279793          	slli	a5,a5,0x2
80019b2c:	ff078793          	addi	a5,a5,-16
80019b30:	008787b3          	add	a5,a5,s0
80019b34:	f9679783          	lh	a5,-106(a5)
80019b38:	01079793          	slli	a5,a5,0x10
            core_init_matrix(results[0].size,
80019b3c:	00f6e633          	or	a2,a3,a5
                             &(results[i].mat));
80019b40:	fee45703          	lhu	a4,-18(s0)
            core_init_matrix(results[0].size,
80019b44:	f8440693          	addi	a3,s0,-124
80019b48:	00070793          	mv	a5,a4
80019b4c:	00479793          	slli	a5,a5,0x4
80019b50:	00e787b3          	add	a5,a5,a4
80019b54:	00279793          	slli	a5,a5,0x2
80019b58:	02078793          	addi	a5,a5,32
80019b5c:	00f687b3          	add	a5,a3,a5
80019b60:	00878793          	addi	a5,a5,8
80019b64:	00078693          	mv	a3,a5
80019b68:	405000ef          	jal	ra,8001a76c <core_init_matrix>
        }
        if (results[i].execs & ID_STATE)
80019b6c:	fee45703          	lhu	a4,-18(s0)
80019b70:	00070793          	mv	a5,a4
80019b74:	00479793          	slli	a5,a5,0x4
80019b78:	00e787b3          	add	a5,a5,a4
80019b7c:	00279793          	slli	a5,a5,0x2
80019b80:	ff078793          	addi	a5,a5,-16
80019b84:	008787b3          	add	a5,a5,s0
80019b88:	fb47a783          	lw	a5,-76(a5)
80019b8c:	0047f793          	andi	a5,a5,4
80019b90:	04078a63          	beqz	a5,80019be4 <coremark_main+0x5b0>
        {
            core_init_state(
80019b94:	f9c42683          	lw	a3,-100(s0)
80019b98:	fee45703          	lhu	a4,-18(s0)
80019b9c:	00070793          	mv	a5,a4
80019ba0:	00479793          	slli	a5,a5,0x4
80019ba4:	00e787b3          	add	a5,a5,a4
80019ba8:	00279793          	slli	a5,a5,0x2
80019bac:	ff078793          	addi	a5,a5,-16
80019bb0:	008787b3          	add	a5,a5,s0
80019bb4:	f9479583          	lh	a1,-108(a5)
80019bb8:	fee45703          	lhu	a4,-18(s0)
                results[0].size, results[i].seed1, results[i].memblock[3]);
80019bbc:	00070793          	mv	a5,a4
80019bc0:	00479793          	slli	a5,a5,0x4
80019bc4:	00e787b3          	add	a5,a5,a4
80019bc8:	00279793          	slli	a5,a5,0x2
80019bcc:	ff078793          	addi	a5,a5,-16
80019bd0:	008787b3          	add	a5,a5,s0
80019bd4:	fa87a783          	lw	a5,-88(a5)
            core_init_state(
80019bd8:	00078613          	mv	a2,a5
80019bdc:	00068513          	mv	a0,a3
80019be0:	005010ef          	jal	ra,8001b3e4 <core_init_state>
    for (i = 0; i < MULTITHREAD; i++)
80019be4:	fee45783          	lhu	a5,-18(s0)
80019be8:	00178793          	addi	a5,a5,1
80019bec:	fef41723          	sh	a5,-18(s0)
80019bf0:	fee45783          	lhu	a5,-18(s0)
80019bf4:	e0078ce3          	beqz	a5,80019a0c <coremark_main+0x3d8>
        }
    }

    /* automatically determine number of iterations if not set */
    if (results[0].iterations == 0)
80019bf8:	fa042783          	lw	a5,-96(s0)
80019bfc:	08079863          	bnez	a5,80019c8c <coremark_main+0x658>
    {
        secs_ret secs_passed = 0;
80019c00:	fc042e23          	sw	zero,-36(s0)
        ee_u32   divisor;
        results[0].iterations = 1;
80019c04:	00100793          	li	a5,1
80019c08:	faf42023          	sw	a5,-96(s0)
        while (secs_passed < (secs_ret)1)
80019c0c:	0440006f          	j	80019c50 <coremark_main+0x61c>
        {
            results[0].iterations *= 10;
80019c10:	fa042703          	lw	a4,-96(s0)
80019c14:	00070793          	mv	a5,a4
80019c18:	00279793          	slli	a5,a5,0x2
80019c1c:	00e787b3          	add	a5,a5,a4
80019c20:	00179793          	slli	a5,a5,0x1
80019c24:	faf42023          	sw	a5,-96(s0)
            start_time();
80019c28:	3d0010ef          	jal	ra,8001aff8 <start_time>
            iterate(&results[0]);
80019c2c:	f8440793          	addi	a5,s0,-124
80019c30:	00078513          	mv	a0,a5
80019c34:	8f1ff0ef          	jal	ra,80019524 <iterate>
            stop_time();
80019c38:	3f8010ef          	jal	ra,8001b030 <stop_time>
            secs_passed = time_in_secs(get_time());
80019c3c:	42c010ef          	jal	ra,8001b068 <get_time>
80019c40:	00050793          	mv	a5,a0
80019c44:	00078513          	mv	a0,a5
80019c48:	460010ef          	jal	ra,8001b0a8 <time_in_secs>
80019c4c:	fca42e23          	sw	a0,-36(s0)
        while (secs_passed < (secs_ret)1)
80019c50:	fdc42783          	lw	a5,-36(s0)
80019c54:	fa078ee3          	beqz	a5,80019c10 <coremark_main+0x5dc>
        }
        /* now we know it executes for at least 1 sec, set actual run time at
         * about 10 secs */
        divisor = (ee_u32)secs_passed;
80019c58:	fdc42783          	lw	a5,-36(s0)
80019c5c:	fcf42c23          	sw	a5,-40(s0)
        if (divisor == 0) /* some machines cast float to int as 0 since this
80019c60:	fd842783          	lw	a5,-40(s0)
80019c64:	00079663          	bnez	a5,80019c70 <coremark_main+0x63c>
                             conversion is not defined by ANSI, but we know at
                             least one second passed */
            divisor = 1;
80019c68:	00100793          	li	a5,1
80019c6c:	fcf42c23          	sw	a5,-40(s0)
        results[0].iterations *= 1 + 10 / divisor;
80019c70:	fa042703          	lw	a4,-96(s0)
80019c74:	00a00693          	li	a3,10
80019c78:	fd842783          	lw	a5,-40(s0)
80019c7c:	02f6d7b3          	divu	a5,a3,a5
80019c80:	00178793          	addi	a5,a5,1
80019c84:	02f707b3          	mul	a5,a4,a5
80019c88:	faf42023          	sw	a5,-96(s0)
    }
    /* perform actual benchmark */
    start_time();
80019c8c:	36c010ef          	jal	ra,8001aff8 <start_time>
    for (i = 0; i < default_num_contexts; i++)
    {
        core_stop_parallel(&results[i]);
    }
#else
    iterate(&results[0]);
80019c90:	f8440793          	addi	a5,s0,-124
80019c94:	00078513          	mv	a0,a5
80019c98:	88dff0ef          	jal	ra,80019524 <iterate>
#endif
    stop_time();
80019c9c:	394010ef          	jal	ra,8001b030 <stop_time>
    total_time = get_time();
80019ca0:	3c8010ef          	jal	ra,8001b068 <get_time>
80019ca4:	fca42823          	sw	a0,-48(s0)
    /* get a function of the input to report */
    seedcrc = crc16(results[0].seed1, seedcrc);
80019ca8:	f8441783          	lh	a5,-124(s0)
80019cac:	fd645703          	lhu	a4,-42(s0)
80019cb0:	00070593          	mv	a1,a4
80019cb4:	00078513          	mv	a0,a5
80019cb8:	084020ef          	jal	ra,8001bd3c <crc16>
80019cbc:	00050793          	mv	a5,a0
80019cc0:	fcf41b23          	sh	a5,-42(s0)
    seedcrc = crc16(results[0].seed2, seedcrc);
80019cc4:	f8641783          	lh	a5,-122(s0)
80019cc8:	fd645703          	lhu	a4,-42(s0)
80019ccc:	00070593          	mv	a1,a4
80019cd0:	00078513          	mv	a0,a5
80019cd4:	068020ef          	jal	ra,8001bd3c <crc16>
80019cd8:	00050793          	mv	a5,a0
80019cdc:	fcf41b23          	sh	a5,-42(s0)
    seedcrc = crc16(results[0].seed3, seedcrc);
80019ce0:	f8841783          	lh	a5,-120(s0)
80019ce4:	fd645703          	lhu	a4,-42(s0)
80019ce8:	00070593          	mv	a1,a4
80019cec:	00078513          	mv	a0,a5
80019cf0:	04c020ef          	jal	ra,8001bd3c <crc16>
80019cf4:	00050793          	mv	a5,a0
80019cf8:	fcf41b23          	sh	a5,-42(s0)
    seedcrc = crc16(results[0].size, seedcrc);
80019cfc:	f9c42783          	lw	a5,-100(s0)
80019d00:	01079793          	slli	a5,a5,0x10
80019d04:	4107d793          	srai	a5,a5,0x10
80019d08:	fd645703          	lhu	a4,-42(s0)
80019d0c:	00070593          	mv	a1,a4
80019d10:	00078513          	mv	a0,a5
80019d14:	028020ef          	jal	ra,8001bd3c <crc16>
80019d18:	00050793          	mv	a5,a0
80019d1c:	fcf41b23          	sh	a5,-42(s0)

    switch (seedcrc)
80019d20:	fd645783          	lhu	a5,-42(s0)
80019d24:	0000f737          	lui	a4,0xf
80019d28:	9f570713          	addi	a4,a4,-1547 # e9f5 <__STACKSIZE__+0xa9f5>
80019d2c:	0ae78063          	beq	a5,a4,80019dcc <coremark_main+0x798>
80019d30:	0000f737          	lui	a4,0xf
80019d34:	9f570713          	addi	a4,a4,-1547 # e9f5 <__STACKSIZE__+0xa9f5>
80019d38:	0cf74263          	blt	a4,a5,80019dfc <coremark_main+0x7c8>
80019d3c:	00009737          	lui	a4,0x9
80019d40:	a0270713          	addi	a4,a4,-1534 # 8a02 <__STACKSIZE__+0x4a02>
80019d44:	04e78263          	beq	a5,a4,80019d88 <coremark_main+0x754>
80019d48:	00009737          	lui	a4,0x9
80019d4c:	a0270713          	addi	a4,a4,-1534 # 8a02 <__STACKSIZE__+0x4a02>
80019d50:	0af74663          	blt	a4,a5,80019dfc <coremark_main+0x7c8>
80019d54:	00008737          	lui	a4,0x8
80019d58:	b0570713          	addi	a4,a4,-1275 # 7b05 <__STACKSIZE__+0x3b05>
80019d5c:	04e78063          	beq	a5,a4,80019d9c <coremark_main+0x768>
80019d60:	00008737          	lui	a4,0x8
80019d64:	b0570713          	addi	a4,a4,-1275 # 7b05 <__STACKSIZE__+0x3b05>
80019d68:	08f74a63          	blt	a4,a5,80019dfc <coremark_main+0x7c8>
80019d6c:	00002737          	lui	a4,0x2
80019d70:	8f270713          	addi	a4,a4,-1806 # 18f2 <__STACKSIZE__-0x270e>
80019d74:	06e78863          	beq	a5,a4,80019de4 <coremark_main+0x7b0>
80019d78:	00005737          	lui	a4,0x5
80019d7c:	eaf70713          	addi	a4,a4,-337 # 4eaf <__STACKSIZE__+0xeaf>
80019d80:	02e78a63          	beq	a5,a4,80019db4 <coremark_main+0x780>
80019d84:	0780006f          	j	80019dfc <coremark_main+0x7c8>
    {                /* test known output for common seeds */
        case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
            known_id = 0;
80019d88:	fe041423          	sh	zero,-24(s0)
            ee_printf("6k performance run parameters for coremark.\n");
80019d8c:	0000e517          	auipc	a0,0xe
80019d90:	9d050513          	addi	a0,a0,-1584 # 8002775c <raise+0x1b68>
80019d94:	125020ef          	jal	ra,8001c6b8 <printf>
            break;
80019d98:	0700006f          	j	80019e08 <coremark_main+0x7d4>
        case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per
                        algorithm */
            known_id = 1;
80019d9c:	00100793          	li	a5,1
80019da0:	fef41423          	sh	a5,-24(s0)
            ee_printf("6k validation run parameters for coremark.\n");
80019da4:	0000e517          	auipc	a0,0xe
80019da8:	9e850513          	addi	a0,a0,-1560 # 8002778c <raise+0x1b98>
80019dac:	10d020ef          	jal	ra,8001c6b8 <printf>
            break;
80019db0:	0580006f          	j	80019e08 <coremark_main+0x7d4>
        case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm
                      */
            known_id = 2;
80019db4:	00200793          	li	a5,2
80019db8:	fef41423          	sh	a5,-24(s0)
            ee_printf("Profile generation run parameters for coremark.\n");
80019dbc:	0000e517          	auipc	a0,0xe
80019dc0:	9fc50513          	addi	a0,a0,-1540 # 800277b8 <raise+0x1bc4>
80019dc4:	0f5020ef          	jal	ra,8001c6b8 <printf>
            break;
80019dc8:	0400006f          	j	80019e08 <coremark_main+0x7d4>
        case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
            known_id = 3;
80019dcc:	00300793          	li	a5,3
80019dd0:	fef41423          	sh	a5,-24(s0)
            ee_printf("2K performance run parameters for coremark.\n");
80019dd4:	0000e517          	auipc	a0,0xe
80019dd8:	a1850513          	addi	a0,a0,-1512 # 800277ec <raise+0x1bf8>
80019ddc:	0dd020ef          	jal	ra,8001c6b8 <printf>
            break;
80019de0:	0280006f          	j	80019e08 <coremark_main+0x7d4>
        case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per
                        algorithm */
            known_id = 4;
80019de4:	00400793          	li	a5,4
80019de8:	fef41423          	sh	a5,-24(s0)
            ee_printf("2K validation run parameters for coremark.\n");
80019dec:	0000e517          	auipc	a0,0xe
80019df0:	a3050513          	addi	a0,a0,-1488 # 8002781c <raise+0x1c28>
80019df4:	0c5020ef          	jal	ra,8001c6b8 <printf>
            break;
80019df8:	0100006f          	j	80019e08 <coremark_main+0x7d4>
        default:
            total_errors = -1;
80019dfc:	fff00793          	li	a5,-1
80019e00:	fef41323          	sh	a5,-26(s0)
            break;
80019e04:	00000013          	nop
    }
    if (known_id >= 0)
80019e08:	fe841783          	lh	a5,-24(s0)
80019e0c:	3a07c463          	bltz	a5,8001a1b4 <coremark_main+0xb80>
    {
        for (i = 0; i < default_num_contexts; i++)
80019e10:	fe041723          	sh	zero,-18(s0)
80019e14:	3900006f          	j	8001a1a4 <coremark_main+0xb70>
        {
            results[i].err = 0;
80019e18:	fee45703          	lhu	a4,-18(s0)
80019e1c:	00070793          	mv	a5,a4
80019e20:	00479793          	slli	a5,a5,0x4
80019e24:	00e787b3          	add	a5,a5,a4
80019e28:	00279793          	slli	a5,a5,0x2
80019e2c:	ff078793          	addi	a5,a5,-16
80019e30:	008787b3          	add	a5,a5,s0
80019e34:	fc079a23          	sh	zero,-44(a5)
            if ((results[i].execs & ID_LIST)
80019e38:	fee45703          	lhu	a4,-18(s0)
80019e3c:	00070793          	mv	a5,a4
80019e40:	00479793          	slli	a5,a5,0x4
80019e44:	00e787b3          	add	a5,a5,a4
80019e48:	00279793          	slli	a5,a5,0x2
80019e4c:	ff078793          	addi	a5,a5,-16
80019e50:	008787b3          	add	a5,a5,s0
80019e54:	fb47a783          	lw	a5,-76(a5)
80019e58:	0017f793          	andi	a5,a5,1
80019e5c:	0e078463          	beqz	a5,80019f44 <coremark_main+0x910>
                && (results[i].crclist != list_known_crc[known_id]))
80019e60:	fee45703          	lhu	a4,-18(s0)
80019e64:	00070793          	mv	a5,a4
80019e68:	00479793          	slli	a5,a5,0x4
80019e6c:	00e787b3          	add	a5,a5,a4
80019e70:	00279793          	slli	a5,a5,0x2
80019e74:	ff078793          	addi	a5,a5,-16
80019e78:	008787b3          	add	a5,a5,s0
80019e7c:	fce7d703          	lhu	a4,-50(a5)
80019e80:	fe841783          	lh	a5,-24(s0)
80019e84:	0000f697          	auipc	a3,0xf
80019e88:	3e468693          	addi	a3,a3,996 # 80029268 <list_known_crc>
80019e8c:	00179793          	slli	a5,a5,0x1
80019e90:	00f687b3          	add	a5,a3,a5
80019e94:	0007d783          	lhu	a5,0(a5)
80019e98:	0af70663          	beq	a4,a5,80019f44 <coremark_main+0x910>
            {
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
80019e9c:	fee45583          	lhu	a1,-18(s0)
                          i,
                          results[i].crclist,
80019ea0:	fee45703          	lhu	a4,-18(s0)
80019ea4:	00070793          	mv	a5,a4
80019ea8:	00479793          	slli	a5,a5,0x4
80019eac:	00e787b3          	add	a5,a5,a4
80019eb0:	00279793          	slli	a5,a5,0x2
80019eb4:	ff078793          	addi	a5,a5,-16
80019eb8:	008787b3          	add	a5,a5,s0
80019ebc:	fce7d783          	lhu	a5,-50(a5)
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
80019ec0:	00078613          	mv	a2,a5
                          list_known_crc[known_id]);
80019ec4:	fe841783          	lh	a5,-24(s0)
80019ec8:	0000f717          	auipc	a4,0xf
80019ecc:	3a070713          	addi	a4,a4,928 # 80029268 <list_known_crc>
80019ed0:	00179793          	slli	a5,a5,0x1
80019ed4:	00f707b3          	add	a5,a4,a5
80019ed8:	0007d783          	lhu	a5,0(a5)
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
80019edc:	00078693          	mv	a3,a5
80019ee0:	0000e517          	auipc	a0,0xe
80019ee4:	96850513          	addi	a0,a0,-1688 # 80027848 <raise+0x1c54>
80019ee8:	7d0020ef          	jal	ra,8001c6b8 <printf>
                results[i].err++;
80019eec:	fee45703          	lhu	a4,-18(s0)
80019ef0:	00070793          	mv	a5,a4
80019ef4:	00479793          	slli	a5,a5,0x4
80019ef8:	00e787b3          	add	a5,a5,a4
80019efc:	00279793          	slli	a5,a5,0x2
80019f00:	ff078793          	addi	a5,a5,-16
80019f04:	008787b3          	add	a5,a5,s0
80019f08:	fd479783          	lh	a5,-44(a5)
80019f0c:	01079793          	slli	a5,a5,0x10
80019f10:	0107d793          	srli	a5,a5,0x10
80019f14:	00178793          	addi	a5,a5,1
80019f18:	01079793          	slli	a5,a5,0x10
80019f1c:	0107d793          	srli	a5,a5,0x10
80019f20:	01079693          	slli	a3,a5,0x10
80019f24:	4106d693          	srai	a3,a3,0x10
80019f28:	00070793          	mv	a5,a4
80019f2c:	00479793          	slli	a5,a5,0x4
80019f30:	00e787b3          	add	a5,a5,a4
80019f34:	00279793          	slli	a5,a5,0x2
80019f38:	ff078793          	addi	a5,a5,-16
80019f3c:	008787b3          	add	a5,a5,s0
80019f40:	fcd79a23          	sh	a3,-44(a5)
            }
            if ((results[i].execs & ID_MATRIX)
80019f44:	fee45703          	lhu	a4,-18(s0)
80019f48:	00070793          	mv	a5,a4
80019f4c:	00479793          	slli	a5,a5,0x4
80019f50:	00e787b3          	add	a5,a5,a4
80019f54:	00279793          	slli	a5,a5,0x2
80019f58:	ff078793          	addi	a5,a5,-16
80019f5c:	008787b3          	add	a5,a5,s0
80019f60:	fb47a783          	lw	a5,-76(a5)
80019f64:	0027f793          	andi	a5,a5,2
80019f68:	0e078463          	beqz	a5,8001a050 <coremark_main+0xa1c>
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
80019f6c:	fee45703          	lhu	a4,-18(s0)
80019f70:	00070793          	mv	a5,a4
80019f74:	00479793          	slli	a5,a5,0x4
80019f78:	00e787b3          	add	a5,a5,a4
80019f7c:	00279793          	slli	a5,a5,0x2
80019f80:	ff078793          	addi	a5,a5,-16
80019f84:	008787b3          	add	a5,a5,s0
80019f88:	fd07d703          	lhu	a4,-48(a5)
80019f8c:	fe841783          	lh	a5,-24(s0)
80019f90:	0000f697          	auipc	a3,0xf
80019f94:	2e468693          	addi	a3,a3,740 # 80029274 <matrix_known_crc>
80019f98:	00179793          	slli	a5,a5,0x1
80019f9c:	00f687b3          	add	a5,a3,a5
80019fa0:	0007d783          	lhu	a5,0(a5)
80019fa4:	0af70663          	beq	a4,a5,8001a050 <coremark_main+0xa1c>
            {
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
80019fa8:	fee45583          	lhu	a1,-18(s0)
                          i,
                          results[i].crcmatrix,
80019fac:	fee45703          	lhu	a4,-18(s0)
80019fb0:	00070793          	mv	a5,a4
80019fb4:	00479793          	slli	a5,a5,0x4
80019fb8:	00e787b3          	add	a5,a5,a4
80019fbc:	00279793          	slli	a5,a5,0x2
80019fc0:	ff078793          	addi	a5,a5,-16
80019fc4:	008787b3          	add	a5,a5,s0
80019fc8:	fd07d783          	lhu	a5,-48(a5)
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
80019fcc:	00078613          	mv	a2,a5
                          matrix_known_crc[known_id]);
80019fd0:	fe841783          	lh	a5,-24(s0)
80019fd4:	0000f717          	auipc	a4,0xf
80019fd8:	2a070713          	addi	a4,a4,672 # 80029274 <matrix_known_crc>
80019fdc:	00179793          	slli	a5,a5,0x1
80019fe0:	00f707b3          	add	a5,a4,a5
80019fe4:	0007d783          	lhu	a5,0(a5)
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
80019fe8:	00078693          	mv	a3,a5
80019fec:	0000e517          	auipc	a0,0xe
80019ff0:	88c50513          	addi	a0,a0,-1908 # 80027878 <raise+0x1c84>
80019ff4:	6c4020ef          	jal	ra,8001c6b8 <printf>
                results[i].err++;
80019ff8:	fee45703          	lhu	a4,-18(s0)
80019ffc:	00070793          	mv	a5,a4
8001a000:	00479793          	slli	a5,a5,0x4
8001a004:	00e787b3          	add	a5,a5,a4
8001a008:	00279793          	slli	a5,a5,0x2
8001a00c:	ff078793          	addi	a5,a5,-16
8001a010:	008787b3          	add	a5,a5,s0
8001a014:	fd479783          	lh	a5,-44(a5)
8001a018:	01079793          	slli	a5,a5,0x10
8001a01c:	0107d793          	srli	a5,a5,0x10
8001a020:	00178793          	addi	a5,a5,1
8001a024:	01079793          	slli	a5,a5,0x10
8001a028:	0107d793          	srli	a5,a5,0x10
8001a02c:	01079693          	slli	a3,a5,0x10
8001a030:	4106d693          	srai	a3,a3,0x10
8001a034:	00070793          	mv	a5,a4
8001a038:	00479793          	slli	a5,a5,0x4
8001a03c:	00e787b3          	add	a5,a5,a4
8001a040:	00279793          	slli	a5,a5,0x2
8001a044:	ff078793          	addi	a5,a5,-16
8001a048:	008787b3          	add	a5,a5,s0
8001a04c:	fcd79a23          	sh	a3,-44(a5)
            }
            if ((results[i].execs & ID_STATE)
8001a050:	fee45703          	lhu	a4,-18(s0)
8001a054:	00070793          	mv	a5,a4
8001a058:	00479793          	slli	a5,a5,0x4
8001a05c:	00e787b3          	add	a5,a5,a4
8001a060:	00279793          	slli	a5,a5,0x2
8001a064:	ff078793          	addi	a5,a5,-16
8001a068:	008787b3          	add	a5,a5,s0
8001a06c:	fb47a783          	lw	a5,-76(a5)
8001a070:	0047f793          	andi	a5,a5,4
8001a074:	0e078463          	beqz	a5,8001a15c <coremark_main+0xb28>
                && (results[i].crcstate != state_known_crc[known_id]))
8001a078:	fee45703          	lhu	a4,-18(s0)
8001a07c:	00070793          	mv	a5,a4
8001a080:	00479793          	slli	a5,a5,0x4
8001a084:	00e787b3          	add	a5,a5,a4
8001a088:	00279793          	slli	a5,a5,0x2
8001a08c:	ff078793          	addi	a5,a5,-16
8001a090:	008787b3          	add	a5,a5,s0
8001a094:	fd27d703          	lhu	a4,-46(a5)
8001a098:	fe841783          	lh	a5,-24(s0)
8001a09c:	0000f697          	auipc	a3,0xf
8001a0a0:	1e468693          	addi	a3,a3,484 # 80029280 <state_known_crc>
8001a0a4:	00179793          	slli	a5,a5,0x1
8001a0a8:	00f687b3          	add	a5,a3,a5
8001a0ac:	0007d783          	lhu	a5,0(a5)
8001a0b0:	0af70663          	beq	a4,a5,8001a15c <coremark_main+0xb28>
            {
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
8001a0b4:	fee45583          	lhu	a1,-18(s0)
                          i,
                          results[i].crcstate,
8001a0b8:	fee45703          	lhu	a4,-18(s0)
8001a0bc:	00070793          	mv	a5,a4
8001a0c0:	00479793          	slli	a5,a5,0x4
8001a0c4:	00e787b3          	add	a5,a5,a4
8001a0c8:	00279793          	slli	a5,a5,0x2
8001a0cc:	ff078793          	addi	a5,a5,-16
8001a0d0:	008787b3          	add	a5,a5,s0
8001a0d4:	fd27d783          	lhu	a5,-46(a5)
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
8001a0d8:	00078613          	mv	a2,a5
                          state_known_crc[known_id]);
8001a0dc:	fe841783          	lh	a5,-24(s0)
8001a0e0:	0000f717          	auipc	a4,0xf
8001a0e4:	1a070713          	addi	a4,a4,416 # 80029280 <state_known_crc>
8001a0e8:	00179793          	slli	a5,a5,0x1
8001a0ec:	00f707b3          	add	a5,a4,a5
8001a0f0:	0007d783          	lhu	a5,0(a5)
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
8001a0f4:	00078693          	mv	a3,a5
8001a0f8:	0000d517          	auipc	a0,0xd
8001a0fc:	7b450513          	addi	a0,a0,1972 # 800278ac <raise+0x1cb8>
8001a100:	5b8020ef          	jal	ra,8001c6b8 <printf>
                results[i].err++;
8001a104:	fee45703          	lhu	a4,-18(s0)
8001a108:	00070793          	mv	a5,a4
8001a10c:	00479793          	slli	a5,a5,0x4
8001a110:	00e787b3          	add	a5,a5,a4
8001a114:	00279793          	slli	a5,a5,0x2
8001a118:	ff078793          	addi	a5,a5,-16
8001a11c:	008787b3          	add	a5,a5,s0
8001a120:	fd479783          	lh	a5,-44(a5)
8001a124:	01079793          	slli	a5,a5,0x10
8001a128:	0107d793          	srli	a5,a5,0x10
8001a12c:	00178793          	addi	a5,a5,1
8001a130:	01079793          	slli	a5,a5,0x10
8001a134:	0107d793          	srli	a5,a5,0x10
8001a138:	01079693          	slli	a3,a5,0x10
8001a13c:	4106d693          	srai	a3,a3,0x10
8001a140:	00070793          	mv	a5,a4
8001a144:	00479793          	slli	a5,a5,0x4
8001a148:	00e787b3          	add	a5,a5,a4
8001a14c:	00279793          	slli	a5,a5,0x2
8001a150:	ff078793          	addi	a5,a5,-16
8001a154:	008787b3          	add	a5,a5,s0
8001a158:	fcd79a23          	sh	a3,-44(a5)
            }
            total_errors += results[i].err;
8001a15c:	fee45703          	lhu	a4,-18(s0)
8001a160:	00070793          	mv	a5,a4
8001a164:	00479793          	slli	a5,a5,0x4
8001a168:	00e787b3          	add	a5,a5,a4
8001a16c:	00279793          	slli	a5,a5,0x2
8001a170:	ff078793          	addi	a5,a5,-16
8001a174:	008787b3          	add	a5,a5,s0
8001a178:	fd479783          	lh	a5,-44(a5)
8001a17c:	01079713          	slli	a4,a5,0x10
8001a180:	01075713          	srli	a4,a4,0x10
8001a184:	fe645783          	lhu	a5,-26(s0)
8001a188:	00f707b3          	add	a5,a4,a5
8001a18c:	01079793          	slli	a5,a5,0x10
8001a190:	0107d793          	srli	a5,a5,0x10
8001a194:	fef41323          	sh	a5,-26(s0)
        for (i = 0; i < default_num_contexts; i++)
8001a198:	fee45783          	lhu	a5,-18(s0)
8001a19c:	00178793          	addi	a5,a5,1
8001a1a0:	fef41723          	sh	a5,-18(s0)
8001a1a4:	fee45703          	lhu	a4,-18(s0)
8001a1a8:	80c18793          	addi	a5,gp,-2036 # 80029574 <default_num_contexts>
8001a1ac:	0007a783          	lw	a5,0(a5)
8001a1b0:	c6f764e3          	bltu	a4,a5,80019e18 <coremark_main+0x7e4>
        }
    }
    total_errors += check_data_types();
8001a1b4:	3d9010ef          	jal	ra,8001bd8c <check_data_types>
8001a1b8:	00050793          	mv	a5,a0
8001a1bc:	00078713          	mv	a4,a5
8001a1c0:	fe645783          	lhu	a5,-26(s0)
8001a1c4:	00f707b3          	add	a5,a4,a5
8001a1c8:	01079793          	slli	a5,a5,0x10
8001a1cc:	0107d793          	srli	a5,a5,0x10
8001a1d0:	fef41323          	sh	a5,-26(s0)
    /* and report results */
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
8001a1d4:	f9c42783          	lw	a5,-100(s0)
8001a1d8:	00078593          	mv	a1,a5
8001a1dc:	0000d517          	auipc	a0,0xd
8001a1e0:	70050513          	addi	a0,a0,1792 # 800278dc <raise+0x1ce8>
8001a1e4:	4d4020ef          	jal	ra,8001c6b8 <printf>
    ee_printf("Total ticks      : %lu\n", (long unsigned)total_time);
8001a1e8:	fd042583          	lw	a1,-48(s0)
8001a1ec:	0000d517          	auipc	a0,0xd
8001a1f0:	70850513          	addi	a0,a0,1800 # 800278f4 <raise+0x1d00>
8001a1f4:	4c4020ef          	jal	ra,8001c6b8 <printf>
    if (time_in_secs(total_time) > 0)
        ee_printf("Iterations/Sec   : %f\n",
                  default_num_contexts * results[0].iterations
                      / time_in_secs(total_time));
#else
    ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
8001a1f8:	fd042503          	lw	a0,-48(s0)
8001a1fc:	6ad000ef          	jal	ra,8001b0a8 <time_in_secs>
8001a200:	00050793          	mv	a5,a0
8001a204:	00078593          	mv	a1,a5
8001a208:	0000d517          	auipc	a0,0xd
8001a20c:	70450513          	addi	a0,a0,1796 # 8002790c <raise+0x1d18>
8001a210:	4a8020ef          	jal	ra,8001c6b8 <printf>
    if (time_in_secs(total_time) > 0)
8001a214:	fd042503          	lw	a0,-48(s0)
8001a218:	691000ef          	jal	ra,8001b0a8 <time_in_secs>
8001a21c:	00050793          	mv	a5,a0
8001a220:	02078a63          	beqz	a5,8001a254 <coremark_main+0xc20>
        ee_printf("Iterations/Sec   : %d\n",
                  default_num_contexts * results[0].iterations
8001a224:	fa042703          	lw	a4,-96(s0)
8001a228:	80c18793          	addi	a5,gp,-2036 # 80029574 <default_num_contexts>
8001a22c:	0007a783          	lw	a5,0(a5)
8001a230:	02f704b3          	mul	s1,a4,a5
                      / time_in_secs(total_time));
8001a234:	fd042503          	lw	a0,-48(s0)
8001a238:	671000ef          	jal	ra,8001b0a8 <time_in_secs>
8001a23c:	00050793          	mv	a5,a0
        ee_printf("Iterations/Sec   : %d\n",
8001a240:	02f4d7b3          	divu	a5,s1,a5
8001a244:	00078593          	mv	a1,a5
8001a248:	0000d517          	auipc	a0,0xd
8001a24c:	6dc50513          	addi	a0,a0,1756 # 80027924 <raise+0x1d30>
8001a250:	468020ef          	jal	ra,8001c6b8 <printf>
#endif
    if (time_in_secs(total_time) < 10)
8001a254:	fd042503          	lw	a0,-48(s0)
8001a258:	651000ef          	jal	ra,8001b0a8 <time_in_secs>
8001a25c:	00050713          	mv	a4,a0
8001a260:	00900793          	li	a5,9
8001a264:	02e7e663          	bltu	a5,a4,8001a290 <coremark_main+0xc5c>
    {
        ee_printf(
8001a268:	0000d517          	auipc	a0,0xd
8001a26c:	6d450513          	addi	a0,a0,1748 # 8002793c <raise+0x1d48>
8001a270:	448020ef          	jal	ra,8001c6b8 <printf>
            "ERROR! Must execute for at least 10 secs for a valid result!\n");
        total_errors++;
8001a274:	fe641783          	lh	a5,-26(s0)
8001a278:	01079793          	slli	a5,a5,0x10
8001a27c:	0107d793          	srli	a5,a5,0x10
8001a280:	00178793          	addi	a5,a5,1
8001a284:	01079793          	slli	a5,a5,0x10
8001a288:	0107d793          	srli	a5,a5,0x10
8001a28c:	fef41323          	sh	a5,-26(s0)
    }

    ee_printf("Iterations       : %lu\n",
              (long unsigned)default_num_contexts * results[0].iterations);
8001a290:	fa042703          	lw	a4,-96(s0)
8001a294:	80c18793          	addi	a5,gp,-2036 # 80029574 <default_num_contexts>
8001a298:	0007a783          	lw	a5,0(a5)
    ee_printf("Iterations       : %lu\n",
8001a29c:	02f707b3          	mul	a5,a4,a5
8001a2a0:	00078593          	mv	a1,a5
8001a2a4:	0000d517          	auipc	a0,0xd
8001a2a8:	6d850513          	addi	a0,a0,1752 # 8002797c <raise+0x1d88>
8001a2ac:	40c020ef          	jal	ra,8001c6b8 <printf>
    ee_printf("Compiler version : %s\n", COMPILER_VERSION);
8001a2b0:	0000d597          	auipc	a1,0xd
8001a2b4:	6e458593          	addi	a1,a1,1764 # 80027994 <raise+0x1da0>
8001a2b8:	0000d517          	auipc	a0,0xd
8001a2bc:	70050513          	addi	a0,a0,1792 # 800279b8 <raise+0x1dc4>
8001a2c0:	3f8020ef          	jal	ra,8001c6b8 <printf>
    ee_printf("Compiler flags   : %s\n", COMPILER_FLAGS);
8001a2c4:	0000d597          	auipc	a1,0xd
8001a2c8:	70c58593          	addi	a1,a1,1804 # 800279d0 <raise+0x1ddc>
8001a2cc:	0000d517          	auipc	a0,0xd
8001a2d0:	73050513          	addi	a0,a0,1840 # 800279fc <raise+0x1e08>
8001a2d4:	3e4020ef          	jal	ra,8001c6b8 <printf>
#if (MULTITHREAD > 1)
    ee_printf("Parallel %s : %d\n", PARALLEL_METHOD, default_num_contexts);
#endif
    ee_printf("Memory location  : %s\n", MEM_LOCATION);
8001a2d8:	0000d597          	auipc	a1,0xd
8001a2dc:	73c58593          	addi	a1,a1,1852 # 80027a14 <raise+0x1e20>
8001a2e0:	0000d517          	auipc	a0,0xd
8001a2e4:	73c50513          	addi	a0,a0,1852 # 80027a1c <raise+0x1e28>
8001a2e8:	3d0020ef          	jal	ra,8001c6b8 <printf>
    /* output for verification */
    ee_printf("seedcrc          : 0x%04x\n", seedcrc);
8001a2ec:	fd645783          	lhu	a5,-42(s0)
8001a2f0:	00078593          	mv	a1,a5
8001a2f4:	0000d517          	auipc	a0,0xd
8001a2f8:	74050513          	addi	a0,a0,1856 # 80027a34 <raise+0x1e40>
8001a2fc:	3bc020ef          	jal	ra,8001c6b8 <printf>
    if (results[0].execs & ID_LIST)
8001a300:	fa442783          	lw	a5,-92(s0)
8001a304:	0017f793          	andi	a5,a5,1
8001a308:	06078063          	beqz	a5,8001a368 <coremark_main+0xd34>
        for (i = 0; i < default_num_contexts; i++)
8001a30c:	fe041723          	sh	zero,-18(s0)
8001a310:	0480006f          	j	8001a358 <coremark_main+0xd24>
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
8001a314:	fee45683          	lhu	a3,-18(s0)
8001a318:	fee45703          	lhu	a4,-18(s0)
8001a31c:	00070793          	mv	a5,a4
8001a320:	00479793          	slli	a5,a5,0x4
8001a324:	00e787b3          	add	a5,a5,a4
8001a328:	00279793          	slli	a5,a5,0x2
8001a32c:	ff078793          	addi	a5,a5,-16
8001a330:	008787b3          	add	a5,a5,s0
8001a334:	fce7d783          	lhu	a5,-50(a5)
8001a338:	00078613          	mv	a2,a5
8001a33c:	00068593          	mv	a1,a3
8001a340:	0000d517          	auipc	a0,0xd
8001a344:	71050513          	addi	a0,a0,1808 # 80027a50 <raise+0x1e5c>
8001a348:	370020ef          	jal	ra,8001c6b8 <printf>
        for (i = 0; i < default_num_contexts; i++)
8001a34c:	fee45783          	lhu	a5,-18(s0)
8001a350:	00178793          	addi	a5,a5,1
8001a354:	fef41723          	sh	a5,-18(s0)
8001a358:	fee45703          	lhu	a4,-18(s0)
8001a35c:	80c18793          	addi	a5,gp,-2036 # 80029574 <default_num_contexts>
8001a360:	0007a783          	lw	a5,0(a5)
8001a364:	faf768e3          	bltu	a4,a5,8001a314 <coremark_main+0xce0>
    if (results[0].execs & ID_MATRIX)
8001a368:	fa442783          	lw	a5,-92(s0)
8001a36c:	0027f793          	andi	a5,a5,2
8001a370:	06078063          	beqz	a5,8001a3d0 <coremark_main+0xd9c>
        for (i = 0; i < default_num_contexts; i++)
8001a374:	fe041723          	sh	zero,-18(s0)
8001a378:	0480006f          	j	8001a3c0 <coremark_main+0xd8c>
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
8001a37c:	fee45683          	lhu	a3,-18(s0)
8001a380:	fee45703          	lhu	a4,-18(s0)
8001a384:	00070793          	mv	a5,a4
8001a388:	00479793          	slli	a5,a5,0x4
8001a38c:	00e787b3          	add	a5,a5,a4
8001a390:	00279793          	slli	a5,a5,0x2
8001a394:	ff078793          	addi	a5,a5,-16
8001a398:	008787b3          	add	a5,a5,s0
8001a39c:	fd07d783          	lhu	a5,-48(a5)
8001a3a0:	00078613          	mv	a2,a5
8001a3a4:	00068593          	mv	a1,a3
8001a3a8:	0000d517          	auipc	a0,0xd
8001a3ac:	6c450513          	addi	a0,a0,1732 # 80027a6c <raise+0x1e78>
8001a3b0:	308020ef          	jal	ra,8001c6b8 <printf>
        for (i = 0; i < default_num_contexts; i++)
8001a3b4:	fee45783          	lhu	a5,-18(s0)
8001a3b8:	00178793          	addi	a5,a5,1
8001a3bc:	fef41723          	sh	a5,-18(s0)
8001a3c0:	fee45703          	lhu	a4,-18(s0)
8001a3c4:	80c18793          	addi	a5,gp,-2036 # 80029574 <default_num_contexts>
8001a3c8:	0007a783          	lw	a5,0(a5)
8001a3cc:	faf768e3          	bltu	a4,a5,8001a37c <coremark_main+0xd48>
    if (results[0].execs & ID_STATE)
8001a3d0:	fa442783          	lw	a5,-92(s0)
8001a3d4:	0047f793          	andi	a5,a5,4
8001a3d8:	06078063          	beqz	a5,8001a438 <coremark_main+0xe04>
        for (i = 0; i < default_num_contexts; i++)
8001a3dc:	fe041723          	sh	zero,-18(s0)
8001a3e0:	0480006f          	j	8001a428 <coremark_main+0xdf4>
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
8001a3e4:	fee45683          	lhu	a3,-18(s0)
8001a3e8:	fee45703          	lhu	a4,-18(s0)
8001a3ec:	00070793          	mv	a5,a4
8001a3f0:	00479793          	slli	a5,a5,0x4
8001a3f4:	00e787b3          	add	a5,a5,a4
8001a3f8:	00279793          	slli	a5,a5,0x2
8001a3fc:	ff078793          	addi	a5,a5,-16
8001a400:	008787b3          	add	a5,a5,s0
8001a404:	fd27d783          	lhu	a5,-46(a5)
8001a408:	00078613          	mv	a2,a5
8001a40c:	00068593          	mv	a1,a3
8001a410:	0000d517          	auipc	a0,0xd
8001a414:	67850513          	addi	a0,a0,1656 # 80027a88 <raise+0x1e94>
8001a418:	2a0020ef          	jal	ra,8001c6b8 <printf>
        for (i = 0; i < default_num_contexts; i++)
8001a41c:	fee45783          	lhu	a5,-18(s0)
8001a420:	00178793          	addi	a5,a5,1
8001a424:	fef41723          	sh	a5,-18(s0)
8001a428:	fee45703          	lhu	a4,-18(s0)
8001a42c:	80c18793          	addi	a5,gp,-2036 # 80029574 <default_num_contexts>
8001a430:	0007a783          	lw	a5,0(a5)
8001a434:	faf768e3          	bltu	a4,a5,8001a3e4 <coremark_main+0xdb0>
    for (i = 0; i < default_num_contexts; i++)
8001a438:	fe041723          	sh	zero,-18(s0)
8001a43c:	0480006f          	j	8001a484 <coremark_main+0xe50>
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
8001a440:	fee45683          	lhu	a3,-18(s0)
8001a444:	fee45703          	lhu	a4,-18(s0)
8001a448:	00070793          	mv	a5,a4
8001a44c:	00479793          	slli	a5,a5,0x4
8001a450:	00e787b3          	add	a5,a5,a4
8001a454:	00279793          	slli	a5,a5,0x2
8001a458:	ff078793          	addi	a5,a5,-16
8001a45c:	008787b3          	add	a5,a5,s0
8001a460:	fcc7d783          	lhu	a5,-52(a5)
8001a464:	00078613          	mv	a2,a5
8001a468:	00068593          	mv	a1,a3
8001a46c:	0000d517          	auipc	a0,0xd
8001a470:	63850513          	addi	a0,a0,1592 # 80027aa4 <raise+0x1eb0>
8001a474:	244020ef          	jal	ra,8001c6b8 <printf>
    for (i = 0; i < default_num_contexts; i++)
8001a478:	fee45783          	lhu	a5,-18(s0)
8001a47c:	00178793          	addi	a5,a5,1
8001a480:	fef41723          	sh	a5,-18(s0)
8001a484:	fee45703          	lhu	a4,-18(s0)
8001a488:	80c18793          	addi	a5,gp,-2036 # 80029574 <default_num_contexts>
8001a48c:	0007a783          	lw	a5,0(a5)
8001a490:	faf768e3          	bltu	a4,a5,8001a440 <coremark_main+0xe0c>
    if (total_errors == 0)
8001a494:	fe641783          	lh	a5,-26(s0)
8001a498:	00079863          	bnez	a5,8001a4a8 <coremark_main+0xe74>
    {
        ee_printf(
8001a49c:	0000d517          	auipc	a0,0xd
8001a4a0:	62450513          	addi	a0,a0,1572 # 80027ac0 <raise+0x1ecc>
8001a4a4:	214020ef          	jal	ra,8001c6b8 <printf>
#endif
            ee_printf("\n");
        }
#endif
    }
    if (total_errors > 0)
8001a4a8:	fe641783          	lh	a5,-26(s0)
8001a4ac:	00f05863          	blez	a5,8001a4bc <coremark_main+0xe88>
        ee_printf("Errors detected\n");
8001a4b0:	0000d517          	auipc	a0,0xd
8001a4b4:	65c50513          	addi	a0,a0,1628 # 80027b0c <raise+0x1f18>
8001a4b8:	200020ef          	jal	ra,8001c6b8 <printf>
    if (total_errors < 0)
8001a4bc:	fe641783          	lh	a5,-26(s0)
8001a4c0:	0007d863          	bgez	a5,8001a4d0 <coremark_main+0xe9c>
        ee_printf(
8001a4c4:	0000d517          	auipc	a0,0xd
8001a4c8:	65c50513          	addi	a0,a0,1628 # 80027b20 <raise+0x1f2c>
8001a4cc:	1ec020ef          	jal	ra,8001c6b8 <printf>
#if (MEM_METHOD == MEM_MALLOC)
    for (i = 0; i < MULTITHREAD; i++)
        portable_free(results[i].memblock[0]);
#endif
    /* And last call any target specific code for finalizing */
    portable_fini(&(results[0].port));
8001a4d0:	f8440793          	addi	a5,s0,-124
8001a4d4:	04278793          	addi	a5,a5,66
8001a4d8:	00078513          	mv	a0,a5
8001a4dc:	435000ef          	jal	ra,8001b110 <portable_fini>

    return MAIN_RETURN_VAL;
8001a4e0:	00000793          	li	a5,0
}
8001a4e4:	00078513          	mv	a0,a5
8001a4e8:	06010113          	addi	sp,sp,96
8001a4ec:	7ec12083          	lw	ra,2028(sp)
8001a4f0:	7e812403          	lw	s0,2024(sp)
8001a4f4:	7e412483          	lw	s1,2020(sp)
8001a4f8:	7f010113          	addi	sp,sp,2032
8001a4fc:	00008067          	ret

8001a500 <core_bench_matrix>:
        Iterate <matrix_test> N times,
        changing the matrix values slightly by a constant amount each time.
*/
ee_u16
core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc)
{
8001a500:	fc010113          	addi	sp,sp,-64
8001a504:	02112e23          	sw	ra,60(sp)
8001a508:	02812c23          	sw	s0,56(sp)
8001a50c:	04010413          	addi	s0,sp,64
8001a510:	fca42623          	sw	a0,-52(s0)
8001a514:	00058793          	mv	a5,a1
8001a518:	00060713          	mv	a4,a2
8001a51c:	fcf41523          	sh	a5,-54(s0)
8001a520:	00070793          	mv	a5,a4
8001a524:	fcf41423          	sh	a5,-56(s0)
    ee_u32  N   = p->N;
8001a528:	fcc42783          	lw	a5,-52(s0)
8001a52c:	0007a783          	lw	a5,0(a5)
8001a530:	fef42623          	sw	a5,-20(s0)
    MATRES *C   = p->C;
8001a534:	fcc42783          	lw	a5,-52(s0)
8001a538:	00c7a783          	lw	a5,12(a5)
8001a53c:	fef42423          	sw	a5,-24(s0)
    MATDAT *A   = p->A;
8001a540:	fcc42783          	lw	a5,-52(s0)
8001a544:	0047a783          	lw	a5,4(a5)
8001a548:	fef42223          	sw	a5,-28(s0)
    MATDAT *B   = p->B;
8001a54c:	fcc42783          	lw	a5,-52(s0)
8001a550:	0087a783          	lw	a5,8(a5)
8001a554:	fef42023          	sw	a5,-32(s0)
    MATDAT  val = (MATDAT)seed;
8001a558:	fca45783          	lhu	a5,-54(s0)
8001a55c:	fcf41f23          	sh	a5,-34(s0)

    crc = crc16(matrix_test(N, C, A, B, val), crc);
8001a560:	fde41783          	lh	a5,-34(s0)
8001a564:	00078713          	mv	a4,a5
8001a568:	fe042683          	lw	a3,-32(s0)
8001a56c:	fe442603          	lw	a2,-28(s0)
8001a570:	fe842583          	lw	a1,-24(s0)
8001a574:	fec42503          	lw	a0,-20(s0)
8001a578:	03c000ef          	jal	ra,8001a5b4 <matrix_test>
8001a57c:	00050793          	mv	a5,a0
8001a580:	00078713          	mv	a4,a5
8001a584:	fc845783          	lhu	a5,-56(s0)
8001a588:	00078593          	mv	a1,a5
8001a58c:	00070513          	mv	a0,a4
8001a590:	7ac010ef          	jal	ra,8001bd3c <crc16>
8001a594:	00050793          	mv	a5,a0
8001a598:	fcf41423          	sh	a5,-56(s0)

    return crc;
8001a59c:	fc845783          	lhu	a5,-56(s0)
}
8001a5a0:	00078513          	mv	a0,a5
8001a5a4:	03c12083          	lw	ra,60(sp)
8001a5a8:	03812403          	lw	s0,56(sp)
8001a5ac:	04010113          	addi	sp,sp,64
8001a5b0:	00008067          	ret

8001a5b4 <matrix_test>:

        After the last step, matrix A is back to original contents.
*/
ee_s16
matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val)
{
8001a5b4:	fc010113          	addi	sp,sp,-64
8001a5b8:	02112e23          	sw	ra,60(sp)
8001a5bc:	02812c23          	sw	s0,56(sp)
8001a5c0:	04010413          	addi	s0,sp,64
8001a5c4:	fca42e23          	sw	a0,-36(s0)
8001a5c8:	fcb42c23          	sw	a1,-40(s0)
8001a5cc:	fcc42a23          	sw	a2,-44(s0)
8001a5d0:	fcd42823          	sw	a3,-48(s0)
8001a5d4:	00070793          	mv	a5,a4
8001a5d8:	fcf41723          	sh	a5,-50(s0)
    ee_u16 crc     = 0;
8001a5dc:	fe041723          	sh	zero,-18(s0)
    MATDAT clipval = matrix_big(val);
8001a5e0:	fce45783          	lhu	a5,-50(s0)
8001a5e4:	00078713          	mv	a4,a5
8001a5e8:	fffff7b7          	lui	a5,0xfffff
8001a5ec:	00f767b3          	or	a5,a4,a5
8001a5f0:	fef41623          	sh	a5,-20(s0)

    matrix_add_const(N, A, val); /* make sure data changes  */
8001a5f4:	fce41783          	lh	a5,-50(s0)
8001a5f8:	00078613          	mv	a2,a5
8001a5fc:	fd442583          	lw	a1,-44(s0)
8001a600:	fdc42503          	lw	a0,-36(s0)
8001a604:	564000ef          	jal	ra,8001ab68 <matrix_add_const>
#if CORE_DEBUG
    printmat(A, N, "matrix_add_const");
#endif
    matrix_mul_const(N, C, A, val);
8001a608:	fce41783          	lh	a5,-50(s0)
8001a60c:	00078693          	mv	a3,a5
8001a610:	fd442603          	lw	a2,-44(s0)
8001a614:	fd842583          	lw	a1,-40(s0)
8001a618:	fdc42503          	lw	a0,-36(s0)
8001a61c:	484000ef          	jal	ra,8001aaa0 <matrix_mul_const>
    crc = crc16(matrix_sum(N, C, clipval), crc);
8001a620:	fec41783          	lh	a5,-20(s0)
8001a624:	00078613          	mv	a2,a5
8001a628:	fd842583          	lw	a1,-40(s0)
8001a62c:	fdc42503          	lw	a0,-36(s0)
8001a630:	360000ef          	jal	ra,8001a990 <matrix_sum>
8001a634:	00050793          	mv	a5,a0
8001a638:	00078713          	mv	a4,a5
8001a63c:	fee45783          	lhu	a5,-18(s0)
8001a640:	00078593          	mv	a1,a5
8001a644:	00070513          	mv	a0,a4
8001a648:	6f4010ef          	jal	ra,8001bd3c <crc16>
8001a64c:	00050793          	mv	a5,a0
8001a650:	fef41723          	sh	a5,-18(s0)
#if CORE_DEBUG
    printmatC(C, N, "matrix_mul_const");
#endif
    matrix_mul_vect(N, C, A, B);
8001a654:	fd042683          	lw	a3,-48(s0)
8001a658:	fd442603          	lw	a2,-44(s0)
8001a65c:	fd842583          	lw	a1,-40(s0)
8001a660:	fdc42503          	lw	a0,-36(s0)
8001a664:	5dc000ef          	jal	ra,8001ac40 <matrix_mul_vect>
    crc = crc16(matrix_sum(N, C, clipval), crc);
8001a668:	fec41783          	lh	a5,-20(s0)
8001a66c:	00078613          	mv	a2,a5
8001a670:	fd842583          	lw	a1,-40(s0)
8001a674:	fdc42503          	lw	a0,-36(s0)
8001a678:	318000ef          	jal	ra,8001a990 <matrix_sum>
8001a67c:	00050793          	mv	a5,a0
8001a680:	00078713          	mv	a4,a5
8001a684:	fee45783          	lhu	a5,-18(s0)
8001a688:	00078593          	mv	a1,a5
8001a68c:	00070513          	mv	a0,a4
8001a690:	6ac010ef          	jal	ra,8001bd3c <crc16>
8001a694:	00050793          	mv	a5,a0
8001a698:	fef41723          	sh	a5,-18(s0)
#if CORE_DEBUG
    printmatC(C, N, "matrix_mul_vect");
#endif
    matrix_mul_matrix(N, C, A, B);
8001a69c:	fd042683          	lw	a3,-48(s0)
8001a6a0:	fd442603          	lw	a2,-44(s0)
8001a6a4:	fd842583          	lw	a1,-40(s0)
8001a6a8:	fdc42503          	lw	a0,-36(s0)
8001a6ac:	684000ef          	jal	ra,8001ad30 <matrix_mul_matrix>
    crc = crc16(matrix_sum(N, C, clipval), crc);
8001a6b0:	fec41783          	lh	a5,-20(s0)
8001a6b4:	00078613          	mv	a2,a5
8001a6b8:	fd842583          	lw	a1,-40(s0)
8001a6bc:	fdc42503          	lw	a0,-36(s0)
8001a6c0:	2d0000ef          	jal	ra,8001a990 <matrix_sum>
8001a6c4:	00050793          	mv	a5,a0
8001a6c8:	00078713          	mv	a4,a5
8001a6cc:	fee45783          	lhu	a5,-18(s0)
8001a6d0:	00078593          	mv	a1,a5
8001a6d4:	00070513          	mv	a0,a4
8001a6d8:	664010ef          	jal	ra,8001bd3c <crc16>
8001a6dc:	00050793          	mv	a5,a0
8001a6e0:	fef41723          	sh	a5,-18(s0)
#if CORE_DEBUG
    printmatC(C, N, "matrix_mul_matrix");
#endif
    matrix_mul_matrix_bitextract(N, C, A, B);
8001a6e4:	fd042683          	lw	a3,-48(s0)
8001a6e8:	fd442603          	lw	a2,-44(s0)
8001a6ec:	fd842583          	lw	a1,-40(s0)
8001a6f0:	fdc42503          	lw	a0,-36(s0)
8001a6f4:	78c000ef          	jal	ra,8001ae80 <matrix_mul_matrix_bitextract>
    crc = crc16(matrix_sum(N, C, clipval), crc);
8001a6f8:	fec41783          	lh	a5,-20(s0)
8001a6fc:	00078613          	mv	a2,a5
8001a700:	fd842583          	lw	a1,-40(s0)
8001a704:	fdc42503          	lw	a0,-36(s0)
8001a708:	288000ef          	jal	ra,8001a990 <matrix_sum>
8001a70c:	00050793          	mv	a5,a0
8001a710:	00078713          	mv	a4,a5
8001a714:	fee45783          	lhu	a5,-18(s0)
8001a718:	00078593          	mv	a1,a5
8001a71c:	00070513          	mv	a0,a4
8001a720:	61c010ef          	jal	ra,8001bd3c <crc16>
8001a724:	00050793          	mv	a5,a0
8001a728:	fef41723          	sh	a5,-18(s0)
#if CORE_DEBUG
    printmatC(C, N, "matrix_mul_matrix_bitextract");
#endif

    matrix_add_const(N, A, -val); /* return matrix to initial value */
8001a72c:	fce45783          	lhu	a5,-50(s0)
8001a730:	40f007b3          	neg	a5,a5
8001a734:	01079793          	slli	a5,a5,0x10
8001a738:	0107d793          	srli	a5,a5,0x10
8001a73c:	01079793          	slli	a5,a5,0x10
8001a740:	4107d793          	srai	a5,a5,0x10
8001a744:	00078613          	mv	a2,a5
8001a748:	fd442583          	lw	a1,-44(s0)
8001a74c:	fdc42503          	lw	a0,-36(s0)
8001a750:	418000ef          	jal	ra,8001ab68 <matrix_add_const>
    return crc;
8001a754:	fee41783          	lh	a5,-18(s0)
}
8001a758:	00078513          	mv	a0,a5
8001a75c:	03c12083          	lw	ra,60(sp)
8001a760:	03812403          	lw	s0,56(sp)
8001a764:	04010113          	addi	sp,sp,64
8001a768:	00008067          	ret

8001a76c <core_init_matrix>:
        The seed parameter MUST be supplied from a source that cannot be
   determined at compile time
*/
ee_u32
core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p)
{
8001a76c:	fc010113          	addi	sp,sp,-64
8001a770:	02812e23          	sw	s0,60(sp)
8001a774:	04010413          	addi	s0,sp,64
8001a778:	fca42623          	sw	a0,-52(s0)
8001a77c:	fcb42423          	sw	a1,-56(s0)
8001a780:	fcc42223          	sw	a2,-60(s0)
8001a784:	fcd42023          	sw	a3,-64(s0)
    ee_u32  N = 0;
8001a788:	fe042023          	sw	zero,-32(s0)
    MATDAT *A;
    MATDAT *B;
    ee_s32  order = 1;
8001a78c:	00100793          	li	a5,1
8001a790:	fef42623          	sw	a5,-20(s0)
    MATDAT  val;
    ee_u32  i = 0, j = 0;
8001a794:	fe042423          	sw	zero,-24(s0)
8001a798:	fe042223          	sw	zero,-28(s0)
    if (seed == 0)
8001a79c:	fc442783          	lw	a5,-60(s0)
8001a7a0:	02079663          	bnez	a5,8001a7cc <core_init_matrix+0x60>
        seed = 1;
8001a7a4:	00100793          	li	a5,1
8001a7a8:	fcf42223          	sw	a5,-60(s0)
    while (j < blksize)
8001a7ac:	0200006f          	j	8001a7cc <core_init_matrix+0x60>
    {
        i++;
8001a7b0:	fe842783          	lw	a5,-24(s0)
8001a7b4:	00178793          	addi	a5,a5,1 # fffff001 <__bss_end+0x7ff78845>
8001a7b8:	fef42423          	sw	a5,-24(s0)
        j = i * i * 2 * 4;
8001a7bc:	fe842783          	lw	a5,-24(s0)
8001a7c0:	02f787b3          	mul	a5,a5,a5
8001a7c4:	00379793          	slli	a5,a5,0x3
8001a7c8:	fef42223          	sw	a5,-28(s0)
    while (j < blksize)
8001a7cc:	fe442703          	lw	a4,-28(s0)
8001a7d0:	fcc42783          	lw	a5,-52(s0)
8001a7d4:	fcf76ee3          	bltu	a4,a5,8001a7b0 <core_init_matrix+0x44>
    }
    N = i - 1;
8001a7d8:	fe842783          	lw	a5,-24(s0)
8001a7dc:	fff78793          	addi	a5,a5,-1
8001a7e0:	fef42023          	sw	a5,-32(s0)
    A = (MATDAT *)align_mem(memblk);
8001a7e4:	fc842783          	lw	a5,-56(s0)
8001a7e8:	fff78793          	addi	a5,a5,-1
8001a7ec:	ffc7f793          	andi	a5,a5,-4
8001a7f0:	00478793          	addi	a5,a5,4
8001a7f4:	fcf42e23          	sw	a5,-36(s0)
    B = A + N * N;
8001a7f8:	fe042783          	lw	a5,-32(s0)
8001a7fc:	02f787b3          	mul	a5,a5,a5
8001a800:	00179793          	slli	a5,a5,0x1
8001a804:	fdc42703          	lw	a4,-36(s0)
8001a808:	00f707b3          	add	a5,a4,a5
8001a80c:	fcf42c23          	sw	a5,-40(s0)

    for (i = 0; i < N; i++)
8001a810:	fe042423          	sw	zero,-24(s0)
8001a814:	10c0006f          	j	8001a920 <core_init_matrix+0x1b4>
    {
        for (j = 0; j < N; j++)
8001a818:	fe042223          	sw	zero,-28(s0)
8001a81c:	0ec0006f          	j	8001a908 <core_init_matrix+0x19c>
        {
            seed         = ((order * seed) % 65536);
8001a820:	fec42703          	lw	a4,-20(s0)
8001a824:	fc442783          	lw	a5,-60(s0)
8001a828:	02f70733          	mul	a4,a4,a5
8001a82c:	41f75793          	srai	a5,a4,0x1f
8001a830:	0107d793          	srli	a5,a5,0x10
8001a834:	00f706b3          	add	a3,a4,a5
8001a838:	00010737          	lui	a4,0x10
8001a83c:	fff70713          	addi	a4,a4,-1 # ffff <__STACKSIZE__+0xbfff>
8001a840:	00e6f733          	and	a4,a3,a4
8001a844:	40f707b3          	sub	a5,a4,a5
8001a848:	fcf42223          	sw	a5,-60(s0)
            val          = (seed + order);
8001a84c:	fc442783          	lw	a5,-60(s0)
8001a850:	01079713          	slli	a4,a5,0x10
8001a854:	01075713          	srli	a4,a4,0x10
8001a858:	fec42783          	lw	a5,-20(s0)
8001a85c:	01079793          	slli	a5,a5,0x10
8001a860:	0107d793          	srli	a5,a5,0x10
8001a864:	00f707b3          	add	a5,a4,a5
8001a868:	01079793          	slli	a5,a5,0x10
8001a86c:	0107d793          	srli	a5,a5,0x10
8001a870:	fcf41b23          	sh	a5,-42(s0)
            val          = matrix_clip(val, 0);
            B[i * N + j] = val;
8001a874:	fe842703          	lw	a4,-24(s0)
8001a878:	fe042783          	lw	a5,-32(s0)
8001a87c:	02f70733          	mul	a4,a4,a5
8001a880:	fe442783          	lw	a5,-28(s0)
8001a884:	00f707b3          	add	a5,a4,a5
8001a888:	00179793          	slli	a5,a5,0x1
8001a88c:	fd842703          	lw	a4,-40(s0)
8001a890:	00f707b3          	add	a5,a4,a5
8001a894:	fd645703          	lhu	a4,-42(s0)
8001a898:	00e79023          	sh	a4,0(a5)
            val          = (val + order);
8001a89c:	fec42783          	lw	a5,-20(s0)
8001a8a0:	01079713          	slli	a4,a5,0x10
8001a8a4:	01075713          	srli	a4,a4,0x10
8001a8a8:	fd645783          	lhu	a5,-42(s0)
8001a8ac:	00f707b3          	add	a5,a4,a5
8001a8b0:	01079793          	slli	a5,a5,0x10
8001a8b4:	0107d793          	srli	a5,a5,0x10
8001a8b8:	fcf41b23          	sh	a5,-42(s0)
            val          = matrix_clip(val, 1);
8001a8bc:	fd645783          	lhu	a5,-42(s0)
8001a8c0:	0ff7f793          	zext.b	a5,a5
8001a8c4:	fcf41b23          	sh	a5,-42(s0)
            A[i * N + j] = val;
8001a8c8:	fe842703          	lw	a4,-24(s0)
8001a8cc:	fe042783          	lw	a5,-32(s0)
8001a8d0:	02f70733          	mul	a4,a4,a5
8001a8d4:	fe442783          	lw	a5,-28(s0)
8001a8d8:	00f707b3          	add	a5,a4,a5
8001a8dc:	00179793          	slli	a5,a5,0x1
8001a8e0:	fdc42703          	lw	a4,-36(s0)
8001a8e4:	00f707b3          	add	a5,a4,a5
8001a8e8:	fd645703          	lhu	a4,-42(s0)
8001a8ec:	00e79023          	sh	a4,0(a5)
            order++;
8001a8f0:	fec42783          	lw	a5,-20(s0)
8001a8f4:	00178793          	addi	a5,a5,1
8001a8f8:	fef42623          	sw	a5,-20(s0)
        for (j = 0; j < N; j++)
8001a8fc:	fe442783          	lw	a5,-28(s0)
8001a900:	00178793          	addi	a5,a5,1
8001a904:	fef42223          	sw	a5,-28(s0)
8001a908:	fe442703          	lw	a4,-28(s0)
8001a90c:	fe042783          	lw	a5,-32(s0)
8001a910:	f0f768e3          	bltu	a4,a5,8001a820 <core_init_matrix+0xb4>
    for (i = 0; i < N; i++)
8001a914:	fe842783          	lw	a5,-24(s0)
8001a918:	00178793          	addi	a5,a5,1
8001a91c:	fef42423          	sw	a5,-24(s0)
8001a920:	fe842703          	lw	a4,-24(s0)
8001a924:	fe042783          	lw	a5,-32(s0)
8001a928:	eef768e3          	bltu	a4,a5,8001a818 <core_init_matrix+0xac>
        }
    }

    p->A = A;
8001a92c:	fc042783          	lw	a5,-64(s0)
8001a930:	fdc42703          	lw	a4,-36(s0)
8001a934:	00e7a223          	sw	a4,4(a5)
    p->B = B;
8001a938:	fc042783          	lw	a5,-64(s0)
8001a93c:	fd842703          	lw	a4,-40(s0)
8001a940:	00e7a423          	sw	a4,8(a5)
    p->C = (MATRES *)align_mem(B + N * N);
8001a944:	fe042783          	lw	a5,-32(s0)
8001a948:	02f787b3          	mul	a5,a5,a5
8001a94c:	00179793          	slli	a5,a5,0x1
8001a950:	fd842703          	lw	a4,-40(s0)
8001a954:	00f707b3          	add	a5,a4,a5
8001a958:	fff78793          	addi	a5,a5,-1
8001a95c:	ffc7f793          	andi	a5,a5,-4
8001a960:	00478793          	addi	a5,a5,4
8001a964:	00078713          	mv	a4,a5
8001a968:	fc042783          	lw	a5,-64(s0)
8001a96c:	00e7a623          	sw	a4,12(a5)
    p->N = N;
8001a970:	fe042703          	lw	a4,-32(s0)
8001a974:	fc042783          	lw	a5,-64(s0)
8001a978:	00e7a023          	sw	a4,0(a5)
#if CORE_DEBUG
    printmat(A, N, "A");
    printmat(B, N, "B");
#endif
    return N;
8001a97c:	fe042783          	lw	a5,-32(s0)
}
8001a980:	00078513          	mv	a0,a5
8001a984:	03c12403          	lw	s0,60(sp)
8001a988:	04010113          	addi	sp,sp,64
8001a98c:	00008067          	ret

8001a990 <matrix_sum>:

        Otherwise, reset the accumulator and add 10 to the result.
*/
ee_s16
matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval)
{
8001a990:	fc010113          	addi	sp,sp,-64
8001a994:	02812e23          	sw	s0,60(sp)
8001a998:	04010413          	addi	s0,sp,64
8001a99c:	fca42623          	sw	a0,-52(s0)
8001a9a0:	fcb42423          	sw	a1,-56(s0)
8001a9a4:	00060793          	mv	a5,a2
8001a9a8:	fcf41323          	sh	a5,-58(s0)
    MATRES tmp = 0, prev = 0, cur = 0;
8001a9ac:	fe042623          	sw	zero,-20(s0)
8001a9b0:	fe042423          	sw	zero,-24(s0)
8001a9b4:	fc042c23          	sw	zero,-40(s0)
    ee_s16 ret = 0;
8001a9b8:	fe041323          	sh	zero,-26(s0)
    ee_u32 i, j;
    for (i = 0; i < N; i++)
8001a9bc:	fe042023          	sw	zero,-32(s0)
8001a9c0:	0c00006f          	j	8001aa80 <matrix_sum+0xf0>
    {
        for (j = 0; j < N; j++)
8001a9c4:	fc042e23          	sw	zero,-36(s0)
8001a9c8:	0a00006f          	j	8001aa68 <matrix_sum+0xd8>
        {
            cur = C[i * N + j];
8001a9cc:	fe042703          	lw	a4,-32(s0)
8001a9d0:	fcc42783          	lw	a5,-52(s0)
8001a9d4:	02f70733          	mul	a4,a4,a5
8001a9d8:	fdc42783          	lw	a5,-36(s0)
8001a9dc:	00f707b3          	add	a5,a4,a5
8001a9e0:	00279793          	slli	a5,a5,0x2
8001a9e4:	fc842703          	lw	a4,-56(s0)
8001a9e8:	00f707b3          	add	a5,a4,a5
8001a9ec:	0007a783          	lw	a5,0(a5)
8001a9f0:	fcf42c23          	sw	a5,-40(s0)
            tmp += cur;
8001a9f4:	fec42703          	lw	a4,-20(s0)
8001a9f8:	fd842783          	lw	a5,-40(s0)
8001a9fc:	00f707b3          	add	a5,a4,a5
8001aa00:	fef42623          	sw	a5,-20(s0)
            if (tmp > clipval)
8001aa04:	fc641783          	lh	a5,-58(s0)
8001aa08:	fec42703          	lw	a4,-20(s0)
8001aa0c:	02e7d063          	bge	a5,a4,8001aa2c <matrix_sum+0x9c>
            {
                ret += 10;
8001aa10:	fe645783          	lhu	a5,-26(s0)
8001aa14:	00a78793          	addi	a5,a5,10
8001aa18:	01079793          	slli	a5,a5,0x10
8001aa1c:	0107d793          	srli	a5,a5,0x10
8001aa20:	fef41323          	sh	a5,-26(s0)
                tmp = 0;
8001aa24:	fe042623          	sw	zero,-20(s0)
8001aa28:	02c0006f          	j	8001aa54 <matrix_sum+0xc4>
            }
            else
            {
                ret += (cur > prev) ? 1 : 0;
8001aa2c:	fd842703          	lw	a4,-40(s0)
8001aa30:	fe842783          	lw	a5,-24(s0)
8001aa34:	00e7a7b3          	slt	a5,a5,a4
8001aa38:	0ff7f793          	zext.b	a5,a5
8001aa3c:	00078713          	mv	a4,a5
8001aa40:	fe645783          	lhu	a5,-26(s0)
8001aa44:	00f707b3          	add	a5,a4,a5
8001aa48:	01079793          	slli	a5,a5,0x10
8001aa4c:	0107d793          	srli	a5,a5,0x10
8001aa50:	fef41323          	sh	a5,-26(s0)
            }
            prev = cur;
8001aa54:	fd842783          	lw	a5,-40(s0)
8001aa58:	fef42423          	sw	a5,-24(s0)
        for (j = 0; j < N; j++)
8001aa5c:	fdc42783          	lw	a5,-36(s0)
8001aa60:	00178793          	addi	a5,a5,1
8001aa64:	fcf42e23          	sw	a5,-36(s0)
8001aa68:	fdc42703          	lw	a4,-36(s0)
8001aa6c:	fcc42783          	lw	a5,-52(s0)
8001aa70:	f4f76ee3          	bltu	a4,a5,8001a9cc <matrix_sum+0x3c>
    for (i = 0; i < N; i++)
8001aa74:	fe042783          	lw	a5,-32(s0)
8001aa78:	00178793          	addi	a5,a5,1
8001aa7c:	fef42023          	sw	a5,-32(s0)
8001aa80:	fe042703          	lw	a4,-32(s0)
8001aa84:	fcc42783          	lw	a5,-52(s0)
8001aa88:	f2f76ee3          	bltu	a4,a5,8001a9c4 <matrix_sum+0x34>
        }
    }
    return ret;
8001aa8c:	fe641783          	lh	a5,-26(s0)
}
8001aa90:	00078513          	mv	a0,a5
8001aa94:	03c12403          	lw	s0,60(sp)
8001aa98:	04010113          	addi	sp,sp,64
8001aa9c:	00008067          	ret

8001aaa0 <matrix_mul_const>:
        Multiply a matrix by a constant.
        This could be used as a scaler for instance.
*/
void
matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val)
{
8001aaa0:	fd010113          	addi	sp,sp,-48
8001aaa4:	02812623          	sw	s0,44(sp)
8001aaa8:	03010413          	addi	s0,sp,48
8001aaac:	fca42e23          	sw	a0,-36(s0)
8001aab0:	fcb42c23          	sw	a1,-40(s0)
8001aab4:	fcc42a23          	sw	a2,-44(s0)
8001aab8:	00068793          	mv	a5,a3
8001aabc:	fcf41923          	sh	a5,-46(s0)
    ee_u32 i, j;
    for (i = 0; i < N; i++)
8001aac0:	fe042623          	sw	zero,-20(s0)
8001aac4:	0840006f          	j	8001ab48 <matrix_mul_const+0xa8>
    {
        for (j = 0; j < N; j++)
8001aac8:	fe042423          	sw	zero,-24(s0)
8001aacc:	0640006f          	j	8001ab30 <matrix_mul_const+0x90>
        {
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
8001aad0:	fec42703          	lw	a4,-20(s0)
8001aad4:	fdc42783          	lw	a5,-36(s0)
8001aad8:	02f70733          	mul	a4,a4,a5
8001aadc:	fe842783          	lw	a5,-24(s0)
8001aae0:	00f707b3          	add	a5,a4,a5
8001aae4:	00179793          	slli	a5,a5,0x1
8001aae8:	fd442703          	lw	a4,-44(s0)
8001aaec:	00f707b3          	add	a5,a4,a5
8001aaf0:	00079783          	lh	a5,0(a5)
8001aaf4:	00078613          	mv	a2,a5
8001aaf8:	fd241703          	lh	a4,-46(s0)
8001aafc:	fec42683          	lw	a3,-20(s0)
8001ab00:	fdc42783          	lw	a5,-36(s0)
8001ab04:	02f686b3          	mul	a3,a3,a5
8001ab08:	fe842783          	lw	a5,-24(s0)
8001ab0c:	00f687b3          	add	a5,a3,a5
8001ab10:	00279793          	slli	a5,a5,0x2
8001ab14:	fd842683          	lw	a3,-40(s0)
8001ab18:	00f687b3          	add	a5,a3,a5
8001ab1c:	02e60733          	mul	a4,a2,a4
8001ab20:	00e7a023          	sw	a4,0(a5)
        for (j = 0; j < N; j++)
8001ab24:	fe842783          	lw	a5,-24(s0)
8001ab28:	00178793          	addi	a5,a5,1
8001ab2c:	fef42423          	sw	a5,-24(s0)
8001ab30:	fe842703          	lw	a4,-24(s0)
8001ab34:	fdc42783          	lw	a5,-36(s0)
8001ab38:	f8f76ce3          	bltu	a4,a5,8001aad0 <matrix_mul_const+0x30>
    for (i = 0; i < N; i++)
8001ab3c:	fec42783          	lw	a5,-20(s0)
8001ab40:	00178793          	addi	a5,a5,1
8001ab44:	fef42623          	sw	a5,-20(s0)
8001ab48:	fec42703          	lw	a4,-20(s0)
8001ab4c:	fdc42783          	lw	a5,-36(s0)
8001ab50:	f6f76ce3          	bltu	a4,a5,8001aac8 <matrix_mul_const+0x28>
        }
    }
}
8001ab54:	00000013          	nop
8001ab58:	00000013          	nop
8001ab5c:	02c12403          	lw	s0,44(sp)
8001ab60:	03010113          	addi	sp,sp,48
8001ab64:	00008067          	ret

8001ab68 <matrix_add_const>:
/* Function: matrix_add_const
        Add a constant value to all elements of a matrix.
*/
void
matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val)
{
8001ab68:	fd010113          	addi	sp,sp,-48
8001ab6c:	02812623          	sw	s0,44(sp)
8001ab70:	03010413          	addi	s0,sp,48
8001ab74:	fca42e23          	sw	a0,-36(s0)
8001ab78:	fcb42c23          	sw	a1,-40(s0)
8001ab7c:	00060793          	mv	a5,a2
8001ab80:	fcf41b23          	sh	a5,-42(s0)
    ee_u32 i, j;
    for (i = 0; i < N; i++)
8001ab84:	fe042623          	sw	zero,-20(s0)
8001ab88:	0980006f          	j	8001ac20 <matrix_add_const+0xb8>
    {
        for (j = 0; j < N; j++)
8001ab8c:	fe042423          	sw	zero,-24(s0)
8001ab90:	0780006f          	j	8001ac08 <matrix_add_const+0xa0>
        {
            A[i * N + j] += val;
8001ab94:	fec42703          	lw	a4,-20(s0)
8001ab98:	fdc42783          	lw	a5,-36(s0)
8001ab9c:	02f70733          	mul	a4,a4,a5
8001aba0:	fe842783          	lw	a5,-24(s0)
8001aba4:	00f707b3          	add	a5,a4,a5
8001aba8:	00179793          	slli	a5,a5,0x1
8001abac:	fd842703          	lw	a4,-40(s0)
8001abb0:	00f707b3          	add	a5,a4,a5
8001abb4:	00079783          	lh	a5,0(a5)
8001abb8:	01079713          	slli	a4,a5,0x10
8001abbc:	01075713          	srli	a4,a4,0x10
8001abc0:	fd645783          	lhu	a5,-42(s0)
8001abc4:	00f707b3          	add	a5,a4,a5
8001abc8:	01079693          	slli	a3,a5,0x10
8001abcc:	0106d693          	srli	a3,a3,0x10
8001abd0:	fec42703          	lw	a4,-20(s0)
8001abd4:	fdc42783          	lw	a5,-36(s0)
8001abd8:	02f70733          	mul	a4,a4,a5
8001abdc:	fe842783          	lw	a5,-24(s0)
8001abe0:	00f707b3          	add	a5,a4,a5
8001abe4:	00179793          	slli	a5,a5,0x1
8001abe8:	fd842703          	lw	a4,-40(s0)
8001abec:	00f707b3          	add	a5,a4,a5
8001abf0:	01069713          	slli	a4,a3,0x10
8001abf4:	41075713          	srai	a4,a4,0x10
8001abf8:	00e79023          	sh	a4,0(a5)
        for (j = 0; j < N; j++)
8001abfc:	fe842783          	lw	a5,-24(s0)
8001ac00:	00178793          	addi	a5,a5,1
8001ac04:	fef42423          	sw	a5,-24(s0)
8001ac08:	fe842703          	lw	a4,-24(s0)
8001ac0c:	fdc42783          	lw	a5,-36(s0)
8001ac10:	f8f762e3          	bltu	a4,a5,8001ab94 <matrix_add_const+0x2c>
    for (i = 0; i < N; i++)
8001ac14:	fec42783          	lw	a5,-20(s0)
8001ac18:	00178793          	addi	a5,a5,1
8001ac1c:	fef42623          	sw	a5,-20(s0)
8001ac20:	fec42703          	lw	a4,-20(s0)
8001ac24:	fdc42783          	lw	a5,-36(s0)
8001ac28:	f6f762e3          	bltu	a4,a5,8001ab8c <matrix_add_const+0x24>
        }
    }
}
8001ac2c:	00000013          	nop
8001ac30:	00000013          	nop
8001ac34:	02c12403          	lw	s0,44(sp)
8001ac38:	03010113          	addi	sp,sp,48
8001ac3c:	00008067          	ret

8001ac40 <matrix_mul_vect>:
        This is common in many simple filters (e.g. fir where a vector of
   coefficients is applied to the matrix.)
*/
void
matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
8001ac40:	fd010113          	addi	sp,sp,-48
8001ac44:	02812623          	sw	s0,44(sp)
8001ac48:	03010413          	addi	s0,sp,48
8001ac4c:	fca42e23          	sw	a0,-36(s0)
8001ac50:	fcb42c23          	sw	a1,-40(s0)
8001ac54:	fcc42a23          	sw	a2,-44(s0)
8001ac58:	fcd42823          	sw	a3,-48(s0)
    ee_u32 i, j;
    for (i = 0; i < N; i++)
8001ac5c:	fe042623          	sw	zero,-20(s0)
8001ac60:	0b00006f          	j	8001ad10 <matrix_mul_vect+0xd0>
    {
        C[i] = 0;
8001ac64:	fec42783          	lw	a5,-20(s0)
8001ac68:	00279793          	slli	a5,a5,0x2
8001ac6c:	fd842703          	lw	a4,-40(s0)
8001ac70:	00f707b3          	add	a5,a4,a5
8001ac74:	0007a023          	sw	zero,0(a5)
        for (j = 0; j < N; j++)
8001ac78:	fe042423          	sw	zero,-24(s0)
8001ac7c:	07c0006f          	j	8001acf8 <matrix_mul_vect+0xb8>
        {
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
8001ac80:	fec42783          	lw	a5,-20(s0)
8001ac84:	00279793          	slli	a5,a5,0x2
8001ac88:	fd842703          	lw	a4,-40(s0)
8001ac8c:	00f707b3          	add	a5,a4,a5
8001ac90:	0007a683          	lw	a3,0(a5)
8001ac94:	fec42703          	lw	a4,-20(s0)
8001ac98:	fdc42783          	lw	a5,-36(s0)
8001ac9c:	02f70733          	mul	a4,a4,a5
8001aca0:	fe842783          	lw	a5,-24(s0)
8001aca4:	00f707b3          	add	a5,a4,a5
8001aca8:	00179793          	slli	a5,a5,0x1
8001acac:	fd442703          	lw	a4,-44(s0)
8001acb0:	00f707b3          	add	a5,a4,a5
8001acb4:	00079783          	lh	a5,0(a5)
8001acb8:	00078613          	mv	a2,a5
8001acbc:	fe842783          	lw	a5,-24(s0)
8001acc0:	00179793          	slli	a5,a5,0x1
8001acc4:	fd042703          	lw	a4,-48(s0)
8001acc8:	00f707b3          	add	a5,a4,a5
8001accc:	00079783          	lh	a5,0(a5)
8001acd0:	02f60733          	mul	a4,a2,a5
8001acd4:	fec42783          	lw	a5,-20(s0)
8001acd8:	00279793          	slli	a5,a5,0x2
8001acdc:	fd842603          	lw	a2,-40(s0)
8001ace0:	00f607b3          	add	a5,a2,a5
8001ace4:	00e68733          	add	a4,a3,a4
8001ace8:	00e7a023          	sw	a4,0(a5)
        for (j = 0; j < N; j++)
8001acec:	fe842783          	lw	a5,-24(s0)
8001acf0:	00178793          	addi	a5,a5,1
8001acf4:	fef42423          	sw	a5,-24(s0)
8001acf8:	fe842703          	lw	a4,-24(s0)
8001acfc:	fdc42783          	lw	a5,-36(s0)
8001ad00:	f8f760e3          	bltu	a4,a5,8001ac80 <matrix_mul_vect+0x40>
    for (i = 0; i < N; i++)
8001ad04:	fec42783          	lw	a5,-20(s0)
8001ad08:	00178793          	addi	a5,a5,1
8001ad0c:	fef42623          	sw	a5,-20(s0)
8001ad10:	fec42703          	lw	a4,-20(s0)
8001ad14:	fdc42783          	lw	a5,-36(s0)
8001ad18:	f4f766e3          	bltu	a4,a5,8001ac64 <matrix_mul_vect+0x24>
        }
    }
}
8001ad1c:	00000013          	nop
8001ad20:	00000013          	nop
8001ad24:	02c12403          	lw	s0,44(sp)
8001ad28:	03010113          	addi	sp,sp,48
8001ad2c:	00008067          	ret

8001ad30 <matrix_mul_matrix>:
        Basic code is used in many algorithms, mostly with minor changes such as
   scaling.
*/
void
matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
8001ad30:	fd010113          	addi	sp,sp,-48
8001ad34:	02812623          	sw	s0,44(sp)
8001ad38:	03010413          	addi	s0,sp,48
8001ad3c:	fca42e23          	sw	a0,-36(s0)
8001ad40:	fcb42c23          	sw	a1,-40(s0)
8001ad44:	fcc42a23          	sw	a2,-44(s0)
8001ad48:	fcd42823          	sw	a3,-48(s0)
    ee_u32 i, j, k;
    for (i = 0; i < N; i++)
8001ad4c:	fe042623          	sw	zero,-20(s0)
8001ad50:	1100006f          	j	8001ae60 <matrix_mul_matrix+0x130>
    {
        for (j = 0; j < N; j++)
8001ad54:	fe042423          	sw	zero,-24(s0)
8001ad58:	0f00006f          	j	8001ae48 <matrix_mul_matrix+0x118>
        {
            C[i * N + j] = 0;
8001ad5c:	fec42703          	lw	a4,-20(s0)
8001ad60:	fdc42783          	lw	a5,-36(s0)
8001ad64:	02f70733          	mul	a4,a4,a5
8001ad68:	fe842783          	lw	a5,-24(s0)
8001ad6c:	00f707b3          	add	a5,a4,a5
8001ad70:	00279793          	slli	a5,a5,0x2
8001ad74:	fd842703          	lw	a4,-40(s0)
8001ad78:	00f707b3          	add	a5,a4,a5
8001ad7c:	0007a023          	sw	zero,0(a5)
            for (k = 0; k < N; k++)
8001ad80:	fe042223          	sw	zero,-28(s0)
8001ad84:	0ac0006f          	j	8001ae30 <matrix_mul_matrix+0x100>
            {
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
8001ad88:	fec42703          	lw	a4,-20(s0)
8001ad8c:	fdc42783          	lw	a5,-36(s0)
8001ad90:	02f70733          	mul	a4,a4,a5
8001ad94:	fe842783          	lw	a5,-24(s0)
8001ad98:	00f707b3          	add	a5,a4,a5
8001ad9c:	00279793          	slli	a5,a5,0x2
8001ada0:	fd842703          	lw	a4,-40(s0)
8001ada4:	00f707b3          	add	a5,a4,a5
8001ada8:	0007a683          	lw	a3,0(a5)
8001adac:	fec42703          	lw	a4,-20(s0)
8001adb0:	fdc42783          	lw	a5,-36(s0)
8001adb4:	02f70733          	mul	a4,a4,a5
8001adb8:	fe442783          	lw	a5,-28(s0)
8001adbc:	00f707b3          	add	a5,a4,a5
8001adc0:	00179793          	slli	a5,a5,0x1
8001adc4:	fd442703          	lw	a4,-44(s0)
8001adc8:	00f707b3          	add	a5,a4,a5
8001adcc:	00079783          	lh	a5,0(a5)
8001add0:	00078613          	mv	a2,a5
8001add4:	fe442703          	lw	a4,-28(s0)
8001add8:	fdc42783          	lw	a5,-36(s0)
8001addc:	02f70733          	mul	a4,a4,a5
8001ade0:	fe842783          	lw	a5,-24(s0)
8001ade4:	00f707b3          	add	a5,a4,a5
8001ade8:	00179793          	slli	a5,a5,0x1
8001adec:	fd042703          	lw	a4,-48(s0)
8001adf0:	00f707b3          	add	a5,a4,a5
8001adf4:	00079783          	lh	a5,0(a5)
8001adf8:	02f60733          	mul	a4,a2,a5
8001adfc:	fec42603          	lw	a2,-20(s0)
8001ae00:	fdc42783          	lw	a5,-36(s0)
8001ae04:	02f60633          	mul	a2,a2,a5
8001ae08:	fe842783          	lw	a5,-24(s0)
8001ae0c:	00f607b3          	add	a5,a2,a5
8001ae10:	00279793          	slli	a5,a5,0x2
8001ae14:	fd842603          	lw	a2,-40(s0)
8001ae18:	00f607b3          	add	a5,a2,a5
8001ae1c:	00e68733          	add	a4,a3,a4
8001ae20:	00e7a023          	sw	a4,0(a5)
            for (k = 0; k < N; k++)
8001ae24:	fe442783          	lw	a5,-28(s0)
8001ae28:	00178793          	addi	a5,a5,1
8001ae2c:	fef42223          	sw	a5,-28(s0)
8001ae30:	fe442703          	lw	a4,-28(s0)
8001ae34:	fdc42783          	lw	a5,-36(s0)
8001ae38:	f4f768e3          	bltu	a4,a5,8001ad88 <matrix_mul_matrix+0x58>
        for (j = 0; j < N; j++)
8001ae3c:	fe842783          	lw	a5,-24(s0)
8001ae40:	00178793          	addi	a5,a5,1
8001ae44:	fef42423          	sw	a5,-24(s0)
8001ae48:	fe842703          	lw	a4,-24(s0)
8001ae4c:	fdc42783          	lw	a5,-36(s0)
8001ae50:	f0f766e3          	bltu	a4,a5,8001ad5c <matrix_mul_matrix+0x2c>
    for (i = 0; i < N; i++)
8001ae54:	fec42783          	lw	a5,-20(s0)
8001ae58:	00178793          	addi	a5,a5,1
8001ae5c:	fef42623          	sw	a5,-20(s0)
8001ae60:	fec42703          	lw	a4,-20(s0)
8001ae64:	fdc42783          	lw	a5,-36(s0)
8001ae68:	eef766e3          	bltu	a4,a5,8001ad54 <matrix_mul_matrix+0x24>
            }
        }
    }
}
8001ae6c:	00000013          	nop
8001ae70:	00000013          	nop
8001ae74:	02c12403          	lw	s0,44(sp)
8001ae78:	03010113          	addi	sp,sp,48
8001ae7c:	00008067          	ret

8001ae80 <matrix_mul_matrix_bitextract>:
        Basic code is used in many algorithms, mostly with minor changes such as
   scaling.
*/
void
matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
8001ae80:	fd010113          	addi	sp,sp,-48
8001ae84:	02812623          	sw	s0,44(sp)
8001ae88:	03010413          	addi	s0,sp,48
8001ae8c:	fca42e23          	sw	a0,-36(s0)
8001ae90:	fcb42c23          	sw	a1,-40(s0)
8001ae94:	fcc42a23          	sw	a2,-44(s0)
8001ae98:	fcd42823          	sw	a3,-48(s0)
    ee_u32 i, j, k;
    for (i = 0; i < N; i++)
8001ae9c:	fe042623          	sw	zero,-20(s0)
8001aea0:	1380006f          	j	8001afd8 <matrix_mul_matrix_bitextract+0x158>
    {
        for (j = 0; j < N; j++)
8001aea4:	fe042423          	sw	zero,-24(s0)
8001aea8:	1180006f          	j	8001afc0 <matrix_mul_matrix_bitextract+0x140>
        {
            C[i * N + j] = 0;
8001aeac:	fec42703          	lw	a4,-20(s0)
8001aeb0:	fdc42783          	lw	a5,-36(s0)
8001aeb4:	02f70733          	mul	a4,a4,a5
8001aeb8:	fe842783          	lw	a5,-24(s0)
8001aebc:	00f707b3          	add	a5,a4,a5
8001aec0:	00279793          	slli	a5,a5,0x2
8001aec4:	fd842703          	lw	a4,-40(s0)
8001aec8:	00f707b3          	add	a5,a4,a5
8001aecc:	0007a023          	sw	zero,0(a5)
            for (k = 0; k < N; k++)
8001aed0:	fe042223          	sw	zero,-28(s0)
8001aed4:	0d40006f          	j	8001afa8 <matrix_mul_matrix_bitextract+0x128>
            {
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
8001aed8:	fec42703          	lw	a4,-20(s0)
8001aedc:	fdc42783          	lw	a5,-36(s0)
8001aee0:	02f70733          	mul	a4,a4,a5
8001aee4:	fe442783          	lw	a5,-28(s0)
8001aee8:	00f707b3          	add	a5,a4,a5
8001aeec:	00179793          	slli	a5,a5,0x1
8001aef0:	fd442703          	lw	a4,-44(s0)
8001aef4:	00f707b3          	add	a5,a4,a5
8001aef8:	00079783          	lh	a5,0(a5)
8001aefc:	00078693          	mv	a3,a5
8001af00:	fe442703          	lw	a4,-28(s0)
8001af04:	fdc42783          	lw	a5,-36(s0)
8001af08:	02f70733          	mul	a4,a4,a5
8001af0c:	fe842783          	lw	a5,-24(s0)
8001af10:	00f707b3          	add	a5,a4,a5
8001af14:	00179793          	slli	a5,a5,0x1
8001af18:	fd042703          	lw	a4,-48(s0)
8001af1c:	00f707b3          	add	a5,a4,a5
8001af20:	00079783          	lh	a5,0(a5)
8001af24:	02f687b3          	mul	a5,a3,a5
8001af28:	fef42023          	sw	a5,-32(s0)
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
8001af2c:	fec42703          	lw	a4,-20(s0)
8001af30:	fdc42783          	lw	a5,-36(s0)
8001af34:	02f70733          	mul	a4,a4,a5
8001af38:	fe842783          	lw	a5,-24(s0)
8001af3c:	00f707b3          	add	a5,a4,a5
8001af40:	00279793          	slli	a5,a5,0x2
8001af44:	fd842703          	lw	a4,-40(s0)
8001af48:	00f707b3          	add	a5,a4,a5
8001af4c:	0007a783          	lw	a5,0(a5)
8001af50:	00078693          	mv	a3,a5
8001af54:	fe042783          	lw	a5,-32(s0)
8001af58:	4027d793          	srai	a5,a5,0x2
8001af5c:	00f7f713          	andi	a4,a5,15
8001af60:	fe042783          	lw	a5,-32(s0)
8001af64:	4057d793          	srai	a5,a5,0x5
8001af68:	07f7f793          	andi	a5,a5,127
8001af6c:	02f707b3          	mul	a5,a4,a5
8001af70:	00f686b3          	add	a3,a3,a5
8001af74:	fec42703          	lw	a4,-20(s0)
8001af78:	fdc42783          	lw	a5,-36(s0)
8001af7c:	02f70733          	mul	a4,a4,a5
8001af80:	fe842783          	lw	a5,-24(s0)
8001af84:	00f707b3          	add	a5,a4,a5
8001af88:	00279793          	slli	a5,a5,0x2
8001af8c:	fd842703          	lw	a4,-40(s0)
8001af90:	00f707b3          	add	a5,a4,a5
8001af94:	00068713          	mv	a4,a3
8001af98:	00e7a023          	sw	a4,0(a5)
            for (k = 0; k < N; k++)
8001af9c:	fe442783          	lw	a5,-28(s0)
8001afa0:	00178793          	addi	a5,a5,1
8001afa4:	fef42223          	sw	a5,-28(s0)
8001afa8:	fe442703          	lw	a4,-28(s0)
8001afac:	fdc42783          	lw	a5,-36(s0)
8001afb0:	f2f764e3          	bltu	a4,a5,8001aed8 <matrix_mul_matrix_bitextract+0x58>
        for (j = 0; j < N; j++)
8001afb4:	fe842783          	lw	a5,-24(s0)
8001afb8:	00178793          	addi	a5,a5,1
8001afbc:	fef42423          	sw	a5,-24(s0)
8001afc0:	fe842703          	lw	a4,-24(s0)
8001afc4:	fdc42783          	lw	a5,-36(s0)
8001afc8:	eef762e3          	bltu	a4,a5,8001aeac <matrix_mul_matrix_bitextract+0x2c>
    for (i = 0; i < N; i++)
8001afcc:	fec42783          	lw	a5,-20(s0)
8001afd0:	00178793          	addi	a5,a5,1
8001afd4:	fef42623          	sw	a5,-20(s0)
8001afd8:	fec42703          	lw	a4,-20(s0)
8001afdc:	fdc42783          	lw	a5,-36(s0)
8001afe0:	ecf762e3          	bltu	a4,a5,8001aea4 <matrix_mul_matrix_bitextract+0x24>
            }
        }
    }
}
8001afe4:	00000013          	nop
8001afe8:	00000013          	nop
8001afec:	02c12403          	lw	s0,44(sp)
8001aff0:	03010113          	addi	sp,sp,48
8001aff4:	00008067          	ret

8001aff8 <start_time>:
   example code) or zeroing some system parameters - e.g. setting the cpu clocks
   cycles to 0.
*/
void
start_time(void)
{
8001aff8:	ff010113          	addi	sp,sp,-16
8001affc:	00112623          	sw	ra,12(sp)
8001b000:	00812423          	sw	s0,8(sp)
8001b004:	01010413          	addi	s0,sp,16
    GETMYTIME(&start_time_val);
8001b008:	bfcf60ef          	jal	ra,80011404 <clock>
8001b00c:	00050713          	mv	a4,a0
8001b010:	00069797          	auipc	a5,0x69
8001b014:	0a878793          	addi	a5,a5,168 # 800840b8 <start_time_val>
8001b018:	00e7a023          	sw	a4,0(a5)
}
8001b01c:	00000013          	nop
8001b020:	00c12083          	lw	ra,12(sp)
8001b024:	00812403          	lw	s0,8(sp)
8001b028:	01010113          	addi	sp,sp,16
8001b02c:	00008067          	ret

8001b030 <stop_time>:
   example code) or other system parameters - e.g. reading the current value of
   cpu cycles counter.
*/
void
stop_time(void)
{
8001b030:	ff010113          	addi	sp,sp,-16
8001b034:	00112623          	sw	ra,12(sp)
8001b038:	00812423          	sw	s0,8(sp)
8001b03c:	01010413          	addi	s0,sp,16
    GETMYTIME(&stop_time_val);
8001b040:	bc4f60ef          	jal	ra,80011404 <clock>
8001b044:	00050713          	mv	a4,a0
8001b048:	00069797          	auipc	a5,0x69
8001b04c:	07478793          	addi	a5,a5,116 # 800840bc <stop_time_val>
8001b050:	00e7a023          	sw	a4,0(a5)
}
8001b054:	00000013          	nop
8001b058:	00c12083          	lw	ra,12(sp)
8001b05c:	00812403          	lw	s0,8(sp)
8001b060:	01010113          	addi	sp,sp,16
8001b064:	00008067          	ret

8001b068 <get_time>:
   sample implementation returns millisecs by default, and the resolution is
   controlled by <TIMER_RES_DIVIDER>
*/
CORE_TICKS
get_time(void)
{
8001b068:	fe010113          	addi	sp,sp,-32
8001b06c:	00812e23          	sw	s0,28(sp)
8001b070:	02010413          	addi	s0,sp,32
    CORE_TICKS elapsed
        = (CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
8001b074:	00069797          	auipc	a5,0x69
8001b078:	04878793          	addi	a5,a5,72 # 800840bc <stop_time_val>
8001b07c:	0007a703          	lw	a4,0(a5)
8001b080:	00069797          	auipc	a5,0x69
8001b084:	03878793          	addi	a5,a5,56 # 800840b8 <start_time_val>
8001b088:	0007a783          	lw	a5,0(a5)
    CORE_TICKS elapsed
8001b08c:	40f707b3          	sub	a5,a4,a5
8001b090:	fef42623          	sw	a5,-20(s0)
    return elapsed;
8001b094:	fec42783          	lw	a5,-20(s0)
}
8001b098:	00078513          	mv	a0,a5
8001b09c:	01c12403          	lw	s0,28(sp)
8001b0a0:	02010113          	addi	sp,sp,32
8001b0a4:	00008067          	ret

8001b0a8 <time_in_secs>:
   floating point. Default implementation implemented by the EE_TICKS_PER_SEC
   macro above.
*/
secs_ret
time_in_secs(CORE_TICKS ticks)
{
8001b0a8:	fd010113          	addi	sp,sp,-48
8001b0ac:	02812623          	sw	s0,44(sp)
8001b0b0:	03010413          	addi	s0,sp,48
8001b0b4:	fca42e23          	sw	a0,-36(s0)
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
8001b0b8:	fdc42703          	lw	a4,-36(s0)
8001b0bc:	00a00793          	li	a5,10
8001b0c0:	02f757b3          	divu	a5,a4,a5
8001b0c4:	fef42623          	sw	a5,-20(s0)
    return retval;
8001b0c8:	fec42783          	lw	a5,-20(s0)
}
8001b0cc:	00078513          	mv	a0,a5
8001b0d0:	02c12403          	lw	s0,44(sp)
8001b0d4:	03010113          	addi	sp,sp,48
8001b0d8:	00008067          	ret

8001b0dc <portable_init>:
        Target specific initialization code
        Test for some common mistakes.
*/
void
portable_init(core_portable *p, int *argc, char *argv[])
{
8001b0dc:	fe010113          	addi	sp,sp,-32
8001b0e0:	00812e23          	sw	s0,28(sp)
8001b0e4:	02010413          	addi	s0,sp,32
8001b0e8:	fea42623          	sw	a0,-20(s0)
8001b0ec:	feb42423          	sw	a1,-24(s0)
8001b0f0:	fec42223          	sw	a2,-28(s0)
    }
    if (sizeof(ee_u32) != 4)
    {
        ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
    }
    p->portable_id = 1;
8001b0f4:	fec42783          	lw	a5,-20(s0)
8001b0f8:	00100713          	li	a4,1
8001b0fc:	00e78023          	sb	a4,0(a5)
}
8001b100:	00000013          	nop
8001b104:	01c12403          	lw	s0,28(sp)
8001b108:	02010113          	addi	sp,sp,32
8001b10c:	00008067          	ret

8001b110 <portable_fini>:
/* Function : portable_fini
        Target specific final code
*/
void
portable_fini(core_portable *p)
{
8001b110:	fe010113          	addi	sp,sp,-32
8001b114:	00812e23          	sw	s0,28(sp)
8001b118:	02010413          	addi	s0,sp,32
8001b11c:	fea42623          	sw	a0,-20(s0)
    p->portable_id = 0;
8001b120:	fec42783          	lw	a5,-20(s0)
8001b124:	00078023          	sb	zero,0(a5)
}
8001b128:	00000013          	nop
8001b12c:	01c12403          	lw	s0,28(sp)
8001b130:	02010113          	addi	sp,sp,32
8001b134:	00008067          	ret

8001b138 <core_bench_state>:
                 ee_u8 *memblock,
                 ee_s16 seed1,
                 ee_s16 seed2,
                 ee_s16 step,
                 ee_u16 crc)
{
8001b138:	f9010113          	addi	sp,sp,-112
8001b13c:	06112623          	sw	ra,108(sp)
8001b140:	06812423          	sw	s0,104(sp)
8001b144:	07010413          	addi	s0,sp,112
8001b148:	f8a42e23          	sw	a0,-100(s0)
8001b14c:	f8b42c23          	sw	a1,-104(s0)
8001b150:	00060593          	mv	a1,a2
8001b154:	00068613          	mv	a2,a3
8001b158:	00070693          	mv	a3,a4
8001b15c:	00078713          	mv	a4,a5
8001b160:	00058793          	mv	a5,a1
8001b164:	f8f41b23          	sh	a5,-106(s0)
8001b168:	00060793          	mv	a5,a2
8001b16c:	f8f41a23          	sh	a5,-108(s0)
8001b170:	00068793          	mv	a5,a3
8001b174:	f8f41923          	sh	a5,-110(s0)
8001b178:	00070793          	mv	a5,a4
8001b17c:	f8f41823          	sh	a5,-112(s0)
    ee_u32 final_counts[NUM_CORE_STATES];
    ee_u32 track_counts[NUM_CORE_STATES];
    ee_u8 *p = memblock;
8001b180:	f9842783          	lw	a5,-104(s0)
8001b184:	faf42023          	sw	a5,-96(s0)
    ee_u32 i;

#if CORE_DEBUG
    ee_printf("State Bench: %d,%d,%d,%04x\n", seed1, seed2, step, crc);
#endif
    for (i = 0; i < NUM_CORE_STATES; i++)
8001b188:	fe042623          	sw	zero,-20(s0)
8001b18c:	04c0006f          	j	8001b1d8 <core_bench_state+0xa0>
    {
        final_counts[i] = track_counts[i] = 0;
8001b190:	fec42783          	lw	a5,-20(s0)
8001b194:	00279793          	slli	a5,a5,0x2
8001b198:	ff078793          	addi	a5,a5,-16
8001b19c:	008787b3          	add	a5,a5,s0
8001b1a0:	fa07aa23          	sw	zero,-76(a5)
8001b1a4:	fec42783          	lw	a5,-20(s0)
8001b1a8:	00279793          	slli	a5,a5,0x2
8001b1ac:	ff078793          	addi	a5,a5,-16
8001b1b0:	008787b3          	add	a5,a5,s0
8001b1b4:	fb47a703          	lw	a4,-76(a5)
8001b1b8:	fec42783          	lw	a5,-20(s0)
8001b1bc:	00279793          	slli	a5,a5,0x2
8001b1c0:	ff078793          	addi	a5,a5,-16
8001b1c4:	008787b3          	add	a5,a5,s0
8001b1c8:	fce7aa23          	sw	a4,-44(a5)
    for (i = 0; i < NUM_CORE_STATES; i++)
8001b1cc:	fec42783          	lw	a5,-20(s0)
8001b1d0:	00178793          	addi	a5,a5,1
8001b1d4:	fef42623          	sw	a5,-20(s0)
8001b1d8:	fec42703          	lw	a4,-20(s0)
8001b1dc:	00700793          	li	a5,7
8001b1e0:	fae7f8e3          	bgeu	a5,a4,8001b190 <core_bench_state+0x58>
    }
    /* run the state machine over the input */
    while (*p != 0)
8001b1e4:	0480006f          	j	8001b22c <core_bench_state+0xf4>
    {
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
8001b1e8:	fa440713          	addi	a4,s0,-92
8001b1ec:	fa040793          	addi	a5,s0,-96
8001b1f0:	00070593          	mv	a1,a4
8001b1f4:	00078513          	mv	a0,a5
8001b1f8:	4c4000ef          	jal	ra,8001b6bc <core_state_transition>
8001b1fc:	fea42223          	sw	a0,-28(s0)
        final_counts[fstate]++;
8001b200:	fe442783          	lw	a5,-28(s0)
8001b204:	00279793          	slli	a5,a5,0x2
8001b208:	ff078793          	addi	a5,a5,-16
8001b20c:	008787b3          	add	a5,a5,s0
8001b210:	fd47a783          	lw	a5,-44(a5)
8001b214:	00178713          	addi	a4,a5,1
8001b218:	fe442783          	lw	a5,-28(s0)
8001b21c:	00279793          	slli	a5,a5,0x2
8001b220:	ff078793          	addi	a5,a5,-16
8001b224:	008787b3          	add	a5,a5,s0
8001b228:	fce7aa23          	sw	a4,-44(a5)
    while (*p != 0)
8001b22c:	fa042783          	lw	a5,-96(s0)
8001b230:	0007c783          	lbu	a5,0(a5)
8001b234:	fa079ae3          	bnez	a5,8001b1e8 <core_bench_state+0xb0>
    }
    ee_printf("\n");
#else
    }
#endif
    p = memblock;
8001b238:	f9842783          	lw	a5,-104(s0)
8001b23c:	faf42023          	sw	a5,-96(s0)
    while (p < (memblock + blksize))
8001b240:	0440006f          	j	8001b284 <core_bench_state+0x14c>
    { /* insert some corruption */
        if (*p != ',')
8001b244:	fa042783          	lw	a5,-96(s0)
8001b248:	0007c703          	lbu	a4,0(a5)
8001b24c:	02c00793          	li	a5,44
8001b250:	02f70263          	beq	a4,a5,8001b274 <core_bench_state+0x13c>
            *p ^= (ee_u8)seed1;
8001b254:	fa042783          	lw	a5,-96(s0)
8001b258:	0007c683          	lbu	a3,0(a5)
8001b25c:	f9645783          	lhu	a5,-106(s0)
8001b260:	0ff7f713          	zext.b	a4,a5
8001b264:	fa042783          	lw	a5,-96(s0)
8001b268:	00e6c733          	xor	a4,a3,a4
8001b26c:	0ff77713          	zext.b	a4,a4
8001b270:	00e78023          	sb	a4,0(a5)
        p += step;
8001b274:	fa042703          	lw	a4,-96(s0)
8001b278:	f9241783          	lh	a5,-110(s0)
8001b27c:	00f707b3          	add	a5,a4,a5
8001b280:	faf42023          	sw	a5,-96(s0)
    while (p < (memblock + blksize))
8001b284:	f9842703          	lw	a4,-104(s0)
8001b288:	f9c42783          	lw	a5,-100(s0)
8001b28c:	00f70733          	add	a4,a4,a5
8001b290:	fa042783          	lw	a5,-96(s0)
8001b294:	fae7e8e3          	bltu	a5,a4,8001b244 <core_bench_state+0x10c>
    }
    p = memblock;
8001b298:	f9842783          	lw	a5,-104(s0)
8001b29c:	faf42023          	sw	a5,-96(s0)
    /* run the state machine over the input again */
    while (*p != 0)
8001b2a0:	0480006f          	j	8001b2e8 <core_bench_state+0x1b0>
    {
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
8001b2a4:	fa440713          	addi	a4,s0,-92
8001b2a8:	fa040793          	addi	a5,s0,-96
8001b2ac:	00070593          	mv	a1,a4
8001b2b0:	00078513          	mv	a0,a5
8001b2b4:	408000ef          	jal	ra,8001b6bc <core_state_transition>
8001b2b8:	fea42423          	sw	a0,-24(s0)
        final_counts[fstate]++;
8001b2bc:	fe842783          	lw	a5,-24(s0)
8001b2c0:	00279793          	slli	a5,a5,0x2
8001b2c4:	ff078793          	addi	a5,a5,-16
8001b2c8:	008787b3          	add	a5,a5,s0
8001b2cc:	fd47a783          	lw	a5,-44(a5)
8001b2d0:	00178713          	addi	a4,a5,1
8001b2d4:	fe842783          	lw	a5,-24(s0)
8001b2d8:	00279793          	slli	a5,a5,0x2
8001b2dc:	ff078793          	addi	a5,a5,-16
8001b2e0:	008787b3          	add	a5,a5,s0
8001b2e4:	fce7aa23          	sw	a4,-44(a5)
    while (*p != 0)
8001b2e8:	fa042783          	lw	a5,-96(s0)
8001b2ec:	0007c783          	lbu	a5,0(a5)
8001b2f0:	fa079ae3          	bnez	a5,8001b2a4 <core_bench_state+0x16c>
    }
    ee_printf("\n");
#else
    }
#endif
    p = memblock;
8001b2f4:	f9842783          	lw	a5,-104(s0)
8001b2f8:	faf42023          	sw	a5,-96(s0)
    while (p < (memblock + blksize))
8001b2fc:	0440006f          	j	8001b340 <core_bench_state+0x208>
    { /* undo corruption is seed1 and seed2 are equal */
        if (*p != ',')
8001b300:	fa042783          	lw	a5,-96(s0)
8001b304:	0007c703          	lbu	a4,0(a5)
8001b308:	02c00793          	li	a5,44
8001b30c:	02f70263          	beq	a4,a5,8001b330 <core_bench_state+0x1f8>
            *p ^= (ee_u8)seed2;
8001b310:	fa042783          	lw	a5,-96(s0)
8001b314:	0007c683          	lbu	a3,0(a5)
8001b318:	f9445783          	lhu	a5,-108(s0)
8001b31c:	0ff7f713          	zext.b	a4,a5
8001b320:	fa042783          	lw	a5,-96(s0)
8001b324:	00e6c733          	xor	a4,a3,a4
8001b328:	0ff77713          	zext.b	a4,a4
8001b32c:	00e78023          	sb	a4,0(a5)
        p += step;
8001b330:	fa042703          	lw	a4,-96(s0)
8001b334:	f9241783          	lh	a5,-110(s0)
8001b338:	00f707b3          	add	a5,a4,a5
8001b33c:	faf42023          	sw	a5,-96(s0)
    while (p < (memblock + blksize))
8001b340:	f9842703          	lw	a4,-104(s0)
8001b344:	f9c42783          	lw	a5,-100(s0)
8001b348:	00f70733          	add	a4,a4,a5
8001b34c:	fa042783          	lw	a5,-96(s0)
8001b350:	fae7e8e3          	bltu	a5,a4,8001b300 <core_bench_state+0x1c8>
    }
    /* end timing */
    for (i = 0; i < NUM_CORE_STATES; i++)
8001b354:	fe042623          	sw	zero,-20(s0)
8001b358:	0680006f          	j	8001b3c0 <core_bench_state+0x288>
    {
        crc = crcu32(final_counts[i], crc);
8001b35c:	fec42783          	lw	a5,-20(s0)
8001b360:	00279793          	slli	a5,a5,0x2
8001b364:	ff078793          	addi	a5,a5,-16
8001b368:	008787b3          	add	a5,a5,s0
8001b36c:	fd47a783          	lw	a5,-44(a5)
8001b370:	f9045703          	lhu	a4,-112(s0)
8001b374:	00070593          	mv	a1,a4
8001b378:	00078513          	mv	a0,a5
8001b37c:	141000ef          	jal	ra,8001bcbc <crcu32>
8001b380:	00050793          	mv	a5,a0
8001b384:	f8f41823          	sh	a5,-112(s0)
        crc = crcu32(track_counts[i], crc);
8001b388:	fec42783          	lw	a5,-20(s0)
8001b38c:	00279793          	slli	a5,a5,0x2
8001b390:	ff078793          	addi	a5,a5,-16
8001b394:	008787b3          	add	a5,a5,s0
8001b398:	fb47a783          	lw	a5,-76(a5)
8001b39c:	f9045703          	lhu	a4,-112(s0)
8001b3a0:	00070593          	mv	a1,a4
8001b3a4:	00078513          	mv	a0,a5
8001b3a8:	115000ef          	jal	ra,8001bcbc <crcu32>
8001b3ac:	00050793          	mv	a5,a0
8001b3b0:	f8f41823          	sh	a5,-112(s0)
    for (i = 0; i < NUM_CORE_STATES; i++)
8001b3b4:	fec42783          	lw	a5,-20(s0)
8001b3b8:	00178793          	addi	a5,a5,1
8001b3bc:	fef42623          	sw	a5,-20(s0)
8001b3c0:	fec42703          	lw	a4,-20(s0)
8001b3c4:	00700793          	li	a5,7
8001b3c8:	f8e7fae3          	bgeu	a5,a4,8001b35c <core_bench_state+0x224>
    }
    return crc;
8001b3cc:	f9045783          	lhu	a5,-112(s0)
}
8001b3d0:	00078513          	mv	a0,a5
8001b3d4:	06c12083          	lw	ra,108(sp)
8001b3d8:	06812403          	lw	s0,104(sp)
8001b3dc:	07010113          	addi	sp,sp,112
8001b3e0:	00008067          	ret

8001b3e4 <core_init_state>:
        The seed parameter MUST be supplied from a source that cannot be
   determined at compile time
*/
void
core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p)
{
8001b3e4:	fd010113          	addi	sp,sp,-48
8001b3e8:	02812623          	sw	s0,44(sp)
8001b3ec:	03010413          	addi	s0,sp,48
8001b3f0:	fca42e23          	sw	a0,-36(s0)
8001b3f4:	00058793          	mv	a5,a1
8001b3f8:	fcc42a23          	sw	a2,-44(s0)
8001b3fc:	fcf41d23          	sh	a5,-38(s0)
    ee_u32 total = 0, next = 0, i;
8001b400:	fe042623          	sw	zero,-20(s0)
8001b404:	fe042423          	sw	zero,-24(s0)
    ee_u8 *buf = 0;
8001b408:	fe042023          	sw	zero,-32(s0)
#if CORE_DEBUG
    ee_u8 *start = p;
    ee_printf("State: %d,%d\n", size, seed);
#endif
    size--;
8001b40c:	fdc42783          	lw	a5,-36(s0)
8001b410:	fff78793          	addi	a5,a5,-1
8001b414:	fcf42e23          	sw	a5,-36(s0)
    next = 0;
8001b418:	fe042423          	sw	zero,-24(s0)
    while ((total + next + 1) < size)
8001b41c:	1ec0006f          	j	8001b608 <core_init_state+0x224>
    {
        if (next > 0)
8001b420:	fe842783          	lw	a5,-24(s0)
8001b424:	06078e63          	beqz	a5,8001b4a0 <core_init_state+0xbc>
        {
            for (i = 0; i < next; i++)
8001b428:	fe042223          	sw	zero,-28(s0)
8001b42c:	0380006f          	j	8001b464 <core_init_state+0x80>
                *(p + total + i) = buf[i];
8001b430:	fe042703          	lw	a4,-32(s0)
8001b434:	fe442783          	lw	a5,-28(s0)
8001b438:	00f70733          	add	a4,a4,a5
8001b43c:	fec42683          	lw	a3,-20(s0)
8001b440:	fe442783          	lw	a5,-28(s0)
8001b444:	00f687b3          	add	a5,a3,a5
8001b448:	fd442683          	lw	a3,-44(s0)
8001b44c:	00f687b3          	add	a5,a3,a5
8001b450:	00074703          	lbu	a4,0(a4)
8001b454:	00e78023          	sb	a4,0(a5)
            for (i = 0; i < next; i++)
8001b458:	fe442783          	lw	a5,-28(s0)
8001b45c:	00178793          	addi	a5,a5,1
8001b460:	fef42223          	sw	a5,-28(s0)
8001b464:	fe442703          	lw	a4,-28(s0)
8001b468:	fe842783          	lw	a5,-24(s0)
8001b46c:	fcf762e3          	bltu	a4,a5,8001b430 <core_init_state+0x4c>
            *(p + total + i) = ',';
8001b470:	fec42703          	lw	a4,-20(s0)
8001b474:	fe442783          	lw	a5,-28(s0)
8001b478:	00f707b3          	add	a5,a4,a5
8001b47c:	fd442703          	lw	a4,-44(s0)
8001b480:	00f707b3          	add	a5,a4,a5
8001b484:	02c00713          	li	a4,44
8001b488:	00e78023          	sb	a4,0(a5)
            total += next + 1;
8001b48c:	fe842703          	lw	a4,-24(s0)
8001b490:	fec42783          	lw	a5,-20(s0)
8001b494:	00f707b3          	add	a5,a4,a5
8001b498:	00178793          	addi	a5,a5,1
8001b49c:	fef42623          	sw	a5,-20(s0)
        }
        seed++;
8001b4a0:	fda41783          	lh	a5,-38(s0)
8001b4a4:	01079793          	slli	a5,a5,0x10
8001b4a8:	0107d793          	srli	a5,a5,0x10
8001b4ac:	00178793          	addi	a5,a5,1
8001b4b0:	01079793          	slli	a5,a5,0x10
8001b4b4:	0107d793          	srli	a5,a5,0x10
8001b4b8:	fcf41d23          	sh	a5,-38(s0)
        switch (seed & 0x7)
8001b4bc:	fda45783          	lhu	a5,-38(s0)
8001b4c0:	0077f793          	andi	a5,a5,7
8001b4c4:	00700713          	li	a4,7
8001b4c8:	0ee78e63          	beq	a5,a4,8001b5c4 <core_init_state+0x1e0>
8001b4cc:	00700713          	li	a4,7
8001b4d0:	12f74a63          	blt	a4,a5,8001b604 <core_init_state+0x220>
8001b4d4:	00600713          	li	a4,6
8001b4d8:	12f74663          	blt	a4,a5,8001b604 <core_init_state+0x220>
8001b4dc:	00500713          	li	a4,5
8001b4e0:	0ae7d263          	bge	a5,a4,8001b584 <core_init_state+0x1a0>
8001b4e4:	00200713          	li	a4,2
8001b4e8:	00f74663          	blt	a4,a5,8001b4f4 <core_init_state+0x110>
8001b4ec:	0007dc63          	bgez	a5,8001b504 <core_init_state+0x120>
8001b4f0:	1140006f          	j	8001b604 <core_init_state+0x220>
8001b4f4:	ffd78713          	addi	a4,a5,-3
8001b4f8:	00100793          	li	a5,1
8001b4fc:	10e7e463          	bltu	a5,a4,8001b604 <core_init_state+0x220>
8001b500:	0440006f          	j	8001b544 <core_init_state+0x160>
        {
            case 0: /* int */
            case 1: /* int */
            case 2: /* int */
                buf  = intpat[(seed >> 3) & 0x3];
8001b504:	fda41783          	lh	a5,-38(s0)
8001b508:	4037d793          	srai	a5,a5,0x3
8001b50c:	01079793          	slli	a5,a5,0x10
8001b510:	4107d793          	srai	a5,a5,0x10
8001b514:	01079793          	slli	a5,a5,0x10
8001b518:	0107d793          	srli	a5,a5,0x10
8001b51c:	0037f793          	andi	a5,a5,3
8001b520:	0000e717          	auipc	a4,0xe
8001b524:	d6c70713          	addi	a4,a4,-660 # 8002928c <intpat>
8001b528:	00279793          	slli	a5,a5,0x2
8001b52c:	00f707b3          	add	a5,a4,a5
8001b530:	0007a783          	lw	a5,0(a5)
8001b534:	fef42023          	sw	a5,-32(s0)
                next = 4;
8001b538:	00400793          	li	a5,4
8001b53c:	fef42423          	sw	a5,-24(s0)
                break;
8001b540:	0c80006f          	j	8001b608 <core_init_state+0x224>
            case 3: /* float */
            case 4: /* float */
                buf  = floatpat[(seed >> 3) & 0x3];
8001b544:	fda41783          	lh	a5,-38(s0)
8001b548:	4037d793          	srai	a5,a5,0x3
8001b54c:	01079793          	slli	a5,a5,0x10
8001b550:	4107d793          	srai	a5,a5,0x10
8001b554:	01079793          	slli	a5,a5,0x10
8001b558:	0107d793          	srli	a5,a5,0x10
8001b55c:	0037f793          	andi	a5,a5,3
8001b560:	0000e717          	auipc	a4,0xe
8001b564:	d3c70713          	addi	a4,a4,-708 # 8002929c <floatpat>
8001b568:	00279793          	slli	a5,a5,0x2
8001b56c:	00f707b3          	add	a5,a4,a5
8001b570:	0007a783          	lw	a5,0(a5)
8001b574:	fef42023          	sw	a5,-32(s0)
                next = 8;
8001b578:	00800793          	li	a5,8
8001b57c:	fef42423          	sw	a5,-24(s0)
                break;
8001b580:	0880006f          	j	8001b608 <core_init_state+0x224>
            case 5: /* scientific */
            case 6: /* scientific */
                buf  = scipat[(seed >> 3) & 0x3];
8001b584:	fda41783          	lh	a5,-38(s0)
8001b588:	4037d793          	srai	a5,a5,0x3
8001b58c:	01079793          	slli	a5,a5,0x10
8001b590:	4107d793          	srai	a5,a5,0x10
8001b594:	01079793          	slli	a5,a5,0x10
8001b598:	0107d793          	srli	a5,a5,0x10
8001b59c:	0037f793          	andi	a5,a5,3
8001b5a0:	0000e717          	auipc	a4,0xe
8001b5a4:	d0c70713          	addi	a4,a4,-756 # 800292ac <scipat>
8001b5a8:	00279793          	slli	a5,a5,0x2
8001b5ac:	00f707b3          	add	a5,a4,a5
8001b5b0:	0007a783          	lw	a5,0(a5)
8001b5b4:	fef42023          	sw	a5,-32(s0)
                next = 8;
8001b5b8:	00800793          	li	a5,8
8001b5bc:	fef42423          	sw	a5,-24(s0)
                break;
8001b5c0:	0480006f          	j	8001b608 <core_init_state+0x224>
            case 7: /* invalid */
                buf  = errpat[(seed >> 3) & 0x3];
8001b5c4:	fda41783          	lh	a5,-38(s0)
8001b5c8:	4037d793          	srai	a5,a5,0x3
8001b5cc:	01079793          	slli	a5,a5,0x10
8001b5d0:	4107d793          	srai	a5,a5,0x10
8001b5d4:	01079793          	slli	a5,a5,0x10
8001b5d8:	0107d793          	srli	a5,a5,0x10
8001b5dc:	0037f793          	andi	a5,a5,3
8001b5e0:	0000e717          	auipc	a4,0xe
8001b5e4:	cdc70713          	addi	a4,a4,-804 # 800292bc <errpat>
8001b5e8:	00279793          	slli	a5,a5,0x2
8001b5ec:	00f707b3          	add	a5,a4,a5
8001b5f0:	0007a783          	lw	a5,0(a5)
8001b5f4:	fef42023          	sw	a5,-32(s0)
                next = 8;
8001b5f8:	00800793          	li	a5,8
8001b5fc:	fef42423          	sw	a5,-24(s0)
                break;
8001b600:	0080006f          	j	8001b608 <core_init_state+0x224>
            default: /* Never happen, just to make some compilers happy */
                break;
8001b604:	00000013          	nop
    while ((total + next + 1) < size)
8001b608:	fec42703          	lw	a4,-20(s0)
8001b60c:	fe842783          	lw	a5,-24(s0)
8001b610:	00f707b3          	add	a5,a4,a5
8001b614:	00178793          	addi	a5,a5,1
8001b618:	fdc42703          	lw	a4,-36(s0)
8001b61c:	e0e7e2e3          	bltu	a5,a4,8001b420 <core_init_state+0x3c>
        }
    }
    size++;
8001b620:	fdc42783          	lw	a5,-36(s0)
8001b624:	00178793          	addi	a5,a5,1
8001b628:	fcf42e23          	sw	a5,-36(s0)
    while (total < size)
8001b62c:	0200006f          	j	8001b64c <core_init_state+0x268>
    { /* fill the rest with 0 */
        *(p + total) = 0;
8001b630:	fd442703          	lw	a4,-44(s0)
8001b634:	fec42783          	lw	a5,-20(s0)
8001b638:	00f707b3          	add	a5,a4,a5
8001b63c:	00078023          	sb	zero,0(a5)
        total++;
8001b640:	fec42783          	lw	a5,-20(s0)
8001b644:	00178793          	addi	a5,a5,1
8001b648:	fef42623          	sw	a5,-20(s0)
    while (total < size)
8001b64c:	fec42703          	lw	a4,-20(s0)
8001b650:	fdc42783          	lw	a5,-36(s0)
8001b654:	fcf76ee3          	bltu	a4,a5,8001b630 <core_init_state+0x24c>
    }
#if CORE_DEBUG
    ee_printf("State Input: %s\n", start);
#endif
}
8001b658:	00000013          	nop
8001b65c:	00000013          	nop
8001b660:	02c12403          	lw	s0,44(sp)
8001b664:	03010113          	addi	sp,sp,48
8001b668:	00008067          	ret

8001b66c <ee_isdigit>:

static ee_u8
ee_isdigit(ee_u8 c)
{
8001b66c:	fd010113          	addi	sp,sp,-48
8001b670:	02812623          	sw	s0,44(sp)
8001b674:	03010413          	addi	s0,sp,48
8001b678:	00050793          	mv	a5,a0
8001b67c:	fcf40fa3          	sb	a5,-33(s0)
    ee_u8 retval;
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
8001b680:	fdf44783          	lbu	a5,-33(s0)
8001b684:	0307b793          	sltiu	a5,a5,48
8001b688:	0017c793          	xori	a5,a5,1
8001b68c:	0ff7f713          	zext.b	a4,a5
8001b690:	fdf44783          	lbu	a5,-33(s0)
8001b694:	03a7b793          	sltiu	a5,a5,58
8001b698:	0ff7f793          	zext.b	a5,a5
8001b69c:	00f777b3          	and	a5,a4,a5
8001b6a0:	0ff7f793          	zext.b	a5,a5
8001b6a4:	fef407a3          	sb	a5,-17(s0)
    return retval;
8001b6a8:	fef44783          	lbu	a5,-17(s0)
}
8001b6ac:	00078513          	mv	a0,a5
8001b6b0:	02c12403          	lw	s0,44(sp)
8001b6b4:	03010113          	addi	sp,sp,48
8001b6b8:	00008067          	ret

8001b6bc <core_state_transition>:
   end state is returned (either specific format determined or invalid).
*/

enum CORE_STATE
core_state_transition(ee_u8 **instr, ee_u32 *transition_count)
{
8001b6bc:	fd010113          	addi	sp,sp,-48
8001b6c0:	02112623          	sw	ra,44(sp)
8001b6c4:	02812423          	sw	s0,40(sp)
8001b6c8:	03010413          	addi	s0,sp,48
8001b6cc:	fca42e23          	sw	a0,-36(s0)
8001b6d0:	fcb42c23          	sw	a1,-40(s0)
    ee_u8 *         str = *instr;
8001b6d4:	fdc42783          	lw	a5,-36(s0)
8001b6d8:	0007a783          	lw	a5,0(a5)
8001b6dc:	fef42623          	sw	a5,-20(s0)
    ee_u8           NEXT_SYMBOL;
    enum CORE_STATE state = CORE_START;
8001b6e0:	fe042423          	sw	zero,-24(s0)
    for (; *str && state != CORE_INVALID; str++)
8001b6e4:	3440006f          	j	8001ba28 <core_state_transition+0x36c>
    {
        NEXT_SYMBOL = *str;
8001b6e8:	fec42783          	lw	a5,-20(s0)
8001b6ec:	0007c783          	lbu	a5,0(a5)
8001b6f0:	fef403a3          	sb	a5,-25(s0)
        if (NEXT_SYMBOL == ',') /* end of this input */
8001b6f4:	fe744703          	lbu	a4,-25(s0)
8001b6f8:	02c00793          	li	a5,44
8001b6fc:	00f71a63          	bne	a4,a5,8001b710 <core_state_transition+0x54>
        {
            str++;
8001b700:	fec42783          	lw	a5,-20(s0)
8001b704:	00178793          	addi	a5,a5,1
8001b708:	fef42623          	sw	a5,-20(s0)
            break;
8001b70c:	3340006f          	j	8001ba40 <core_state_transition+0x384>
        }
        switch (state)
8001b710:	fe842703          	lw	a4,-24(s0)
8001b714:	00700793          	li	a5,7
8001b718:	2ee7e463          	bltu	a5,a4,8001ba00 <core_state_transition+0x344>
8001b71c:	fe842783          	lw	a5,-24(s0)
8001b720:	00279713          	slli	a4,a5,0x2
8001b724:	0000d797          	auipc	a5,0xd
8001b728:	03c78793          	addi	a5,a5,60 # 80028760 <__fsym_coremark_main_desc+0x24>
8001b72c:	00f707b3          	add	a5,a4,a5
8001b730:	0007a703          	lw	a4,0(a5)
8001b734:	0000d797          	auipc	a5,0xd
8001b738:	02c78793          	addi	a5,a5,44 # 80028760 <__fsym_coremark_main_desc+0x24>
8001b73c:	00f707b3          	add	a5,a4,a5
8001b740:	00078067          	jr	a5
        {
            case CORE_START:
                if (ee_isdigit(NEXT_SYMBOL))
8001b744:	fe744783          	lbu	a5,-25(s0)
8001b748:	00078513          	mv	a0,a5
8001b74c:	f21ff0ef          	jal	ra,8001b66c <ee_isdigit>
8001b750:	00050793          	mv	a5,a0
8001b754:	00078863          	beqz	a5,8001b764 <core_state_transition+0xa8>
                {
                    state = CORE_INT;
8001b758:	00400793          	li	a5,4
8001b75c:	fef42423          	sw	a5,-24(s0)
8001b760:	05c0006f          	j	8001b7bc <core_state_transition+0x100>
                }
                else if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
8001b764:	fe744703          	lbu	a4,-25(s0)
8001b768:	02b00793          	li	a5,43
8001b76c:	00f70863          	beq	a4,a5,8001b77c <core_state_transition+0xc0>
8001b770:	fe744703          	lbu	a4,-25(s0)
8001b774:	02d00793          	li	a5,45
8001b778:	00f71863          	bne	a4,a5,8001b788 <core_state_transition+0xcc>
                {
                    state = CORE_S1;
8001b77c:	00200793          	li	a5,2
8001b780:	fef42423          	sw	a5,-24(s0)
8001b784:	0380006f          	j	8001b7bc <core_state_transition+0x100>
                }
                else if (NEXT_SYMBOL == '.')
8001b788:	fe744703          	lbu	a4,-25(s0)
8001b78c:	02e00793          	li	a5,46
8001b790:	00f71863          	bne	a4,a5,8001b7a0 <core_state_transition+0xe4>
                {
                    state = CORE_FLOAT;
8001b794:	00500793          	li	a5,5
8001b798:	fef42423          	sw	a5,-24(s0)
8001b79c:	0200006f          	j	8001b7bc <core_state_transition+0x100>
                }
                else
                {
                    state = CORE_INVALID;
8001b7a0:	00100793          	li	a5,1
8001b7a4:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_INVALID]++;
8001b7a8:	fd842783          	lw	a5,-40(s0)
8001b7ac:	00478793          	addi	a5,a5,4
8001b7b0:	0007a703          	lw	a4,0(a5)
8001b7b4:	00170713          	addi	a4,a4,1
8001b7b8:	00e7a023          	sw	a4,0(a5)
                }
                transition_count[CORE_START]++;
8001b7bc:	fd842783          	lw	a5,-40(s0)
8001b7c0:	0007a783          	lw	a5,0(a5)
8001b7c4:	00178713          	addi	a4,a5,1
8001b7c8:	fd842783          	lw	a5,-40(s0)
8001b7cc:	00e7a023          	sw	a4,0(a5)
                break;
8001b7d0:	24c0006f          	j	8001ba1c <core_state_transition+0x360>
            case CORE_S1:
                if (ee_isdigit(NEXT_SYMBOL))
8001b7d4:	fe744783          	lbu	a5,-25(s0)
8001b7d8:	00078513          	mv	a0,a5
8001b7dc:	e91ff0ef          	jal	ra,8001b66c <ee_isdigit>
8001b7e0:	00050793          	mv	a5,a0
8001b7e4:	02078263          	beqz	a5,8001b808 <core_state_transition+0x14c>
                {
                    state = CORE_INT;
8001b7e8:	00400793          	li	a5,4
8001b7ec:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_S1]++;
8001b7f0:	fd842783          	lw	a5,-40(s0)
8001b7f4:	00878793          	addi	a5,a5,8
8001b7f8:	0007a703          	lw	a4,0(a5)
8001b7fc:	00170713          	addi	a4,a4,1
8001b800:	00e7a023          	sw	a4,0(a5)
                else
                {
                    state = CORE_INVALID;
                    transition_count[CORE_S1]++;
                }
                break;
8001b804:	2180006f          	j	8001ba1c <core_state_transition+0x360>
                else if (NEXT_SYMBOL == '.')
8001b808:	fe744703          	lbu	a4,-25(s0)
8001b80c:	02e00793          	li	a5,46
8001b810:	02f71263          	bne	a4,a5,8001b834 <core_state_transition+0x178>
                    state = CORE_FLOAT;
8001b814:	00500793          	li	a5,5
8001b818:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_S1]++;
8001b81c:	fd842783          	lw	a5,-40(s0)
8001b820:	00878793          	addi	a5,a5,8
8001b824:	0007a703          	lw	a4,0(a5)
8001b828:	00170713          	addi	a4,a4,1
8001b82c:	00e7a023          	sw	a4,0(a5)
                break;
8001b830:	1ec0006f          	j	8001ba1c <core_state_transition+0x360>
                    state = CORE_INVALID;
8001b834:	00100793          	li	a5,1
8001b838:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_S1]++;
8001b83c:	fd842783          	lw	a5,-40(s0)
8001b840:	00878793          	addi	a5,a5,8
8001b844:	0007a703          	lw	a4,0(a5)
8001b848:	00170713          	addi	a4,a4,1
8001b84c:	00e7a023          	sw	a4,0(a5)
                break;
8001b850:	1cc0006f          	j	8001ba1c <core_state_transition+0x360>
            case CORE_INT:
                if (NEXT_SYMBOL == '.')
8001b854:	fe744703          	lbu	a4,-25(s0)
8001b858:	02e00793          	li	a5,46
8001b85c:	02f71263          	bne	a4,a5,8001b880 <core_state_transition+0x1c4>
                {
                    state = CORE_FLOAT;
8001b860:	00500793          	li	a5,5
8001b864:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_INT]++;
8001b868:	fd842783          	lw	a5,-40(s0)
8001b86c:	01078793          	addi	a5,a5,16
8001b870:	0007a703          	lw	a4,0(a5)
8001b874:	00170713          	addi	a4,a4,1
8001b878:	00e7a023          	sw	a4,0(a5)
                else if (!ee_isdigit(NEXT_SYMBOL))
                {
                    state = CORE_INVALID;
                    transition_count[CORE_INT]++;
                }
                break;
8001b87c:	18c0006f          	j	8001ba08 <core_state_transition+0x34c>
                else if (!ee_isdigit(NEXT_SYMBOL))
8001b880:	fe744783          	lbu	a5,-25(s0)
8001b884:	00078513          	mv	a0,a5
8001b888:	de5ff0ef          	jal	ra,8001b66c <ee_isdigit>
8001b88c:	00050793          	mv	a5,a0
8001b890:	16079c63          	bnez	a5,8001ba08 <core_state_transition+0x34c>
                    state = CORE_INVALID;
8001b894:	00100793          	li	a5,1
8001b898:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_INT]++;
8001b89c:	fd842783          	lw	a5,-40(s0)
8001b8a0:	01078793          	addi	a5,a5,16
8001b8a4:	0007a703          	lw	a4,0(a5)
8001b8a8:	00170713          	addi	a4,a4,1
8001b8ac:	00e7a023          	sw	a4,0(a5)
                break;
8001b8b0:	1580006f          	j	8001ba08 <core_state_transition+0x34c>
            case CORE_FLOAT:
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
8001b8b4:	fe744703          	lbu	a4,-25(s0)
8001b8b8:	04500793          	li	a5,69
8001b8bc:	00f70863          	beq	a4,a5,8001b8cc <core_state_transition+0x210>
8001b8c0:	fe744703          	lbu	a4,-25(s0)
8001b8c4:	06500793          	li	a5,101
8001b8c8:	02f71263          	bne	a4,a5,8001b8ec <core_state_transition+0x230>
                {
                    state = CORE_S2;
8001b8cc:	00300793          	li	a5,3
8001b8d0:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_FLOAT]++;
8001b8d4:	fd842783          	lw	a5,-40(s0)
8001b8d8:	01478793          	addi	a5,a5,20
8001b8dc:	0007a703          	lw	a4,0(a5)
8001b8e0:	00170713          	addi	a4,a4,1
8001b8e4:	00e7a023          	sw	a4,0(a5)
                else if (!ee_isdigit(NEXT_SYMBOL))
                {
                    state = CORE_INVALID;
                    transition_count[CORE_FLOAT]++;
                }
                break;
8001b8e8:	1280006f          	j	8001ba10 <core_state_transition+0x354>
                else if (!ee_isdigit(NEXT_SYMBOL))
8001b8ec:	fe744783          	lbu	a5,-25(s0)
8001b8f0:	00078513          	mv	a0,a5
8001b8f4:	d79ff0ef          	jal	ra,8001b66c <ee_isdigit>
8001b8f8:	00050793          	mv	a5,a0
8001b8fc:	10079a63          	bnez	a5,8001ba10 <core_state_transition+0x354>
                    state = CORE_INVALID;
8001b900:	00100793          	li	a5,1
8001b904:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_FLOAT]++;
8001b908:	fd842783          	lw	a5,-40(s0)
8001b90c:	01478793          	addi	a5,a5,20
8001b910:	0007a703          	lw	a4,0(a5)
8001b914:	00170713          	addi	a4,a4,1
8001b918:	00e7a023          	sw	a4,0(a5)
                break;
8001b91c:	0f40006f          	j	8001ba10 <core_state_transition+0x354>
            case CORE_S2:
                if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
8001b920:	fe744703          	lbu	a4,-25(s0)
8001b924:	02b00793          	li	a5,43
8001b928:	00f70863          	beq	a4,a5,8001b938 <core_state_transition+0x27c>
8001b92c:	fe744703          	lbu	a4,-25(s0)
8001b930:	02d00793          	li	a5,45
8001b934:	02f71263          	bne	a4,a5,8001b958 <core_state_transition+0x29c>
                {
                    state = CORE_EXPONENT;
8001b938:	00600793          	li	a5,6
8001b93c:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_S2]++;
8001b940:	fd842783          	lw	a5,-40(s0)
8001b944:	00c78793          	addi	a5,a5,12
8001b948:	0007a703          	lw	a4,0(a5)
8001b94c:	00170713          	addi	a4,a4,1
8001b950:	00e7a023          	sw	a4,0(a5)
                else
                {
                    state = CORE_INVALID;
                    transition_count[CORE_S2]++;
                }
                break;
8001b954:	0c80006f          	j	8001ba1c <core_state_transition+0x360>
                    state = CORE_INVALID;
8001b958:	00100793          	li	a5,1
8001b95c:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_S2]++;
8001b960:	fd842783          	lw	a5,-40(s0)
8001b964:	00c78793          	addi	a5,a5,12
8001b968:	0007a703          	lw	a4,0(a5)
8001b96c:	00170713          	addi	a4,a4,1
8001b970:	00e7a023          	sw	a4,0(a5)
                break;
8001b974:	0a80006f          	j	8001ba1c <core_state_transition+0x360>
            case CORE_EXPONENT:
                if (ee_isdigit(NEXT_SYMBOL))
8001b978:	fe744783          	lbu	a5,-25(s0)
8001b97c:	00078513          	mv	a0,a5
8001b980:	cedff0ef          	jal	ra,8001b66c <ee_isdigit>
8001b984:	00050793          	mv	a5,a0
8001b988:	02078263          	beqz	a5,8001b9ac <core_state_transition+0x2f0>
                {
                    state = CORE_SCIENTIFIC;
8001b98c:	00700793          	li	a5,7
8001b990:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_EXPONENT]++;
8001b994:	fd842783          	lw	a5,-40(s0)
8001b998:	01878793          	addi	a5,a5,24
8001b99c:	0007a703          	lw	a4,0(a5)
8001b9a0:	00170713          	addi	a4,a4,1
8001b9a4:	00e7a023          	sw	a4,0(a5)
                else
                {
                    state = CORE_INVALID;
                    transition_count[CORE_EXPONENT]++;
                }
                break;
8001b9a8:	0740006f          	j	8001ba1c <core_state_transition+0x360>
                    state = CORE_INVALID;
8001b9ac:	00100793          	li	a5,1
8001b9b0:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_EXPONENT]++;
8001b9b4:	fd842783          	lw	a5,-40(s0)
8001b9b8:	01878793          	addi	a5,a5,24
8001b9bc:	0007a703          	lw	a4,0(a5)
8001b9c0:	00170713          	addi	a4,a4,1
8001b9c4:	00e7a023          	sw	a4,0(a5)
                break;
8001b9c8:	0540006f          	j	8001ba1c <core_state_transition+0x360>
            case CORE_SCIENTIFIC:
                if (!ee_isdigit(NEXT_SYMBOL))
8001b9cc:	fe744783          	lbu	a5,-25(s0)
8001b9d0:	00078513          	mv	a0,a5
8001b9d4:	c99ff0ef          	jal	ra,8001b66c <ee_isdigit>
8001b9d8:	00050793          	mv	a5,a0
8001b9dc:	02079e63          	bnez	a5,8001ba18 <core_state_transition+0x35c>
                {
                    state = CORE_INVALID;
8001b9e0:	00100793          	li	a5,1
8001b9e4:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_INVALID]++;
8001b9e8:	fd842783          	lw	a5,-40(s0)
8001b9ec:	00478793          	addi	a5,a5,4
8001b9f0:	0007a703          	lw	a4,0(a5)
8001b9f4:	00170713          	addi	a4,a4,1
8001b9f8:	00e7a023          	sw	a4,0(a5)
                }
                break;
8001b9fc:	01c0006f          	j	8001ba18 <core_state_transition+0x35c>
            default:
                break;
8001ba00:	00000013          	nop
8001ba04:	0180006f          	j	8001ba1c <core_state_transition+0x360>
                break;
8001ba08:	00000013          	nop
8001ba0c:	0100006f          	j	8001ba1c <core_state_transition+0x360>
                break;
8001ba10:	00000013          	nop
8001ba14:	0080006f          	j	8001ba1c <core_state_transition+0x360>
                break;
8001ba18:	00000013          	nop
    for (; *str && state != CORE_INVALID; str++)
8001ba1c:	fec42783          	lw	a5,-20(s0)
8001ba20:	00178793          	addi	a5,a5,1
8001ba24:	fef42623          	sw	a5,-20(s0)
8001ba28:	fec42783          	lw	a5,-20(s0)
8001ba2c:	0007c783          	lbu	a5,0(a5)
8001ba30:	00078863          	beqz	a5,8001ba40 <core_state_transition+0x384>
8001ba34:	fe842703          	lw	a4,-24(s0)
8001ba38:	00100793          	li	a5,1
8001ba3c:	caf716e3          	bne	a4,a5,8001b6e8 <core_state_transition+0x2c>
        }
    }
    *instr = str;
8001ba40:	fdc42783          	lw	a5,-36(s0)
8001ba44:	fec42703          	lw	a4,-20(s0)
8001ba48:	00e7a023          	sw	a4,0(a5)
    return state;
8001ba4c:	fe842783          	lw	a5,-24(s0)
}
8001ba50:	00078513          	mv	a0,a5
8001ba54:	02c12083          	lw	ra,44(sp)
8001ba58:	02812403          	lw	s0,40(sp)
8001ba5c:	03010113          	addi	sp,sp,48
8001ba60:	00008067          	ret

8001ba64 <get_seed_32>:
extern volatile ee_s32 seed3_volatile;
extern volatile ee_s32 seed4_volatile;
extern volatile ee_s32 seed5_volatile;
ee_s32
get_seed_32(int i)
{
8001ba64:	fd010113          	addi	sp,sp,-48
8001ba68:	02812623          	sw	s0,44(sp)
8001ba6c:	03010413          	addi	s0,sp,48
8001ba70:	fca42e23          	sw	a0,-36(s0)
    ee_s32 retval;
    switch (i)
8001ba74:	fdc42703          	lw	a4,-36(s0)
8001ba78:	00500793          	li	a5,5
8001ba7c:	08e7e863          	bltu	a5,a4,8001bb0c <get_seed_32+0xa8>
8001ba80:	fdc42783          	lw	a5,-36(s0)
8001ba84:	00279713          	slli	a4,a5,0x2
8001ba88:	0000d797          	auipc	a5,0xd
8001ba8c:	cf878793          	addi	a5,a5,-776 # 80028780 <__fsym_coremark_main_desc+0x44>
8001ba90:	00f707b3          	add	a5,a4,a5
8001ba94:	0007a703          	lw	a4,0(a5)
8001ba98:	0000d797          	auipc	a5,0xd
8001ba9c:	ce878793          	addi	a5,a5,-792 # 80028780 <__fsym_coremark_main_desc+0x44>
8001baa0:	00f707b3          	add	a5,a4,a5
8001baa4:	00078067          	jr	a5
    {
        case 1:
            retval = seed1_volatile;
8001baa8:	00068797          	auipc	a5,0x68
8001baac:	60078793          	addi	a5,a5,1536 # 800840a8 <seed1_volatile>
8001bab0:	0007a783          	lw	a5,0(a5)
8001bab4:	fef42623          	sw	a5,-20(s0)
            break;
8001bab8:	05c0006f          	j	8001bb14 <get_seed_32+0xb0>
        case 2:
            retval = seed2_volatile;
8001babc:	00068797          	auipc	a5,0x68
8001bac0:	5f078793          	addi	a5,a5,1520 # 800840ac <seed2_volatile>
8001bac4:	0007a783          	lw	a5,0(a5)
8001bac8:	fef42623          	sw	a5,-20(s0)
            break;
8001bacc:	0480006f          	j	8001bb14 <get_seed_32+0xb0>
        case 3:
            retval = seed3_volatile;
8001bad0:	0000e797          	auipc	a5,0xe
8001bad4:	aa078793          	addi	a5,a5,-1376 # 80029570 <seed3_volatile>
8001bad8:	0007a783          	lw	a5,0(a5)
8001badc:	fef42623          	sw	a5,-20(s0)
            break;
8001bae0:	0340006f          	j	8001bb14 <get_seed_32+0xb0>
        case 4:
            retval = seed4_volatile;
8001bae4:	00068797          	auipc	a5,0x68
8001bae8:	5cc78793          	addi	a5,a5,1484 # 800840b0 <seed4_volatile>
8001baec:	0007a783          	lw	a5,0(a5)
8001baf0:	fef42623          	sw	a5,-20(s0)
            break;
8001baf4:	0200006f          	j	8001bb14 <get_seed_32+0xb0>
        case 5:
            retval = seed5_volatile;
8001baf8:	00068797          	auipc	a5,0x68
8001bafc:	5bc78793          	addi	a5,a5,1468 # 800840b4 <seed5_volatile>
8001bb00:	0007a783          	lw	a5,0(a5)
8001bb04:	fef42623          	sw	a5,-20(s0)
            break;
8001bb08:	00c0006f          	j	8001bb14 <get_seed_32+0xb0>
        default:
            retval = 0;
8001bb0c:	fe042623          	sw	zero,-20(s0)
            break;
8001bb10:	00000013          	nop
    }
    return retval;
8001bb14:	fec42783          	lw	a5,-20(s0)
}
8001bb18:	00078513          	mv	a0,a5
8001bb1c:	02c12403          	lw	s0,44(sp)
8001bb20:	03010113          	addi	sp,sp,48
8001bb24:	00008067          	ret

8001bb28 <crcu8>:
        Service functions to calculate 16b CRC code.

*/
ee_u16
crcu8(ee_u8 data, ee_u16 crc)
{
8001bb28:	fd010113          	addi	sp,sp,-48
8001bb2c:	02812623          	sw	s0,44(sp)
8001bb30:	03010413          	addi	s0,sp,48
8001bb34:	00050793          	mv	a5,a0
8001bb38:	00058713          	mv	a4,a1
8001bb3c:	fcf40fa3          	sb	a5,-33(s0)
8001bb40:	00070793          	mv	a5,a4
8001bb44:	fcf41e23          	sh	a5,-36(s0)
    ee_u8 i = 0, x16 = 0, carry = 0;
8001bb48:	fe0407a3          	sb	zero,-17(s0)
8001bb4c:	fe0406a3          	sb	zero,-19(s0)
8001bb50:	fe040723          	sb	zero,-18(s0)

    for (i = 0; i < 8; i++)
8001bb54:	fe0407a3          	sb	zero,-17(s0)
8001bb58:	0bc0006f          	j	8001bc14 <crcu8+0xec>
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
8001bb5c:	fdc45783          	lhu	a5,-36(s0)
8001bb60:	01879713          	slli	a4,a5,0x18
8001bb64:	41875713          	srai	a4,a4,0x18
8001bb68:	fdf40783          	lb	a5,-33(s0)
8001bb6c:	00f747b3          	xor	a5,a4,a5
8001bb70:	01879793          	slli	a5,a5,0x18
8001bb74:	4187d793          	srai	a5,a5,0x18
8001bb78:	0ff7f793          	zext.b	a5,a5
8001bb7c:	0017f793          	andi	a5,a5,1
8001bb80:	fef406a3          	sb	a5,-19(s0)
        data >>= 1;
8001bb84:	fdf44783          	lbu	a5,-33(s0)
8001bb88:	0017d793          	srli	a5,a5,0x1
8001bb8c:	fcf40fa3          	sb	a5,-33(s0)

        if (x16 == 1)
8001bb90:	fed44703          	lbu	a4,-19(s0)
8001bb94:	00100793          	li	a5,1
8001bb98:	02f71463          	bne	a4,a5,8001bbc0 <crcu8+0x98>
        {
            crc ^= 0x4002;
8001bb9c:	fdc45783          	lhu	a5,-36(s0)
8001bba0:	00078713          	mv	a4,a5
8001bba4:	000047b7          	lui	a5,0x4
8001bba8:	00278793          	addi	a5,a5,2 # 4002 <__STACKSIZE__+0x2>
8001bbac:	00f747b3          	xor	a5,a4,a5
8001bbb0:	fcf41e23          	sh	a5,-36(s0)
            carry = 1;
8001bbb4:	00100793          	li	a5,1
8001bbb8:	fef40723          	sb	a5,-18(s0)
8001bbbc:	0080006f          	j	8001bbc4 <crcu8+0x9c>
        }
        else
            carry = 0;
8001bbc0:	fe040723          	sb	zero,-18(s0)
        crc >>= 1;
8001bbc4:	fdc45783          	lhu	a5,-36(s0)
8001bbc8:	0017d793          	srli	a5,a5,0x1
8001bbcc:	fcf41e23          	sh	a5,-36(s0)
        if (carry)
8001bbd0:	fee44783          	lbu	a5,-18(s0)
8001bbd4:	00078e63          	beqz	a5,8001bbf0 <crcu8+0xc8>
            crc |= 0x8000;
8001bbd8:	fdc45783          	lhu	a5,-36(s0)
8001bbdc:	00078713          	mv	a4,a5
8001bbe0:	ffff87b7          	lui	a5,0xffff8
8001bbe4:	00f767b3          	or	a5,a4,a5
8001bbe8:	fcf41e23          	sh	a5,-36(s0)
8001bbec:	01c0006f          	j	8001bc08 <crcu8+0xe0>
        else
            crc &= 0x7fff;
8001bbf0:	fdc45783          	lhu	a5,-36(s0)
8001bbf4:	00078713          	mv	a4,a5
8001bbf8:	000087b7          	lui	a5,0x8
8001bbfc:	fff78793          	addi	a5,a5,-1 # 7fff <__STACKSIZE__+0x3fff>
8001bc00:	00f777b3          	and	a5,a4,a5
8001bc04:	fcf41e23          	sh	a5,-36(s0)
    for (i = 0; i < 8; i++)
8001bc08:	fef44783          	lbu	a5,-17(s0)
8001bc0c:	00178793          	addi	a5,a5,1
8001bc10:	fef407a3          	sb	a5,-17(s0)
8001bc14:	fef44703          	lbu	a4,-17(s0)
8001bc18:	00700793          	li	a5,7
8001bc1c:	f4e7f0e3          	bgeu	a5,a4,8001bb5c <crcu8+0x34>
    }
    return crc;
8001bc20:	fdc45783          	lhu	a5,-36(s0)
}
8001bc24:	00078513          	mv	a0,a5
8001bc28:	02c12403          	lw	s0,44(sp)
8001bc2c:	03010113          	addi	sp,sp,48
8001bc30:	00008067          	ret

8001bc34 <crcu16>:
ee_u16
crcu16(ee_u16 newval, ee_u16 crc)
{
8001bc34:	fe010113          	addi	sp,sp,-32
8001bc38:	00112e23          	sw	ra,28(sp)
8001bc3c:	00812c23          	sw	s0,24(sp)
8001bc40:	02010413          	addi	s0,sp,32
8001bc44:	00050793          	mv	a5,a0
8001bc48:	00058713          	mv	a4,a1
8001bc4c:	fef41723          	sh	a5,-18(s0)
8001bc50:	00070793          	mv	a5,a4
8001bc54:	fef41623          	sh	a5,-20(s0)
    crc = crcu8((ee_u8)(newval), crc);
8001bc58:	fee45783          	lhu	a5,-18(s0)
8001bc5c:	0ff7f793          	zext.b	a5,a5
8001bc60:	fec45703          	lhu	a4,-20(s0)
8001bc64:	00070593          	mv	a1,a4
8001bc68:	00078513          	mv	a0,a5
8001bc6c:	ebdff0ef          	jal	ra,8001bb28 <crcu8>
8001bc70:	00050793          	mv	a5,a0
8001bc74:	fef41623          	sh	a5,-20(s0)
    crc = crcu8((ee_u8)((newval) >> 8), crc);
8001bc78:	fee45783          	lhu	a5,-18(s0)
8001bc7c:	0087d793          	srli	a5,a5,0x8
8001bc80:	01079793          	slli	a5,a5,0x10
8001bc84:	0107d793          	srli	a5,a5,0x10
8001bc88:	0ff7f793          	zext.b	a5,a5
8001bc8c:	fec45703          	lhu	a4,-20(s0)
8001bc90:	00070593          	mv	a1,a4
8001bc94:	00078513          	mv	a0,a5
8001bc98:	e91ff0ef          	jal	ra,8001bb28 <crcu8>
8001bc9c:	00050793          	mv	a5,a0
8001bca0:	fef41623          	sh	a5,-20(s0)
    return crc;
8001bca4:	fec45783          	lhu	a5,-20(s0)
}
8001bca8:	00078513          	mv	a0,a5
8001bcac:	01c12083          	lw	ra,28(sp)
8001bcb0:	01812403          	lw	s0,24(sp)
8001bcb4:	02010113          	addi	sp,sp,32
8001bcb8:	00008067          	ret

8001bcbc <crcu32>:
ee_u16
crcu32(ee_u32 newval, ee_u16 crc)
{
8001bcbc:	fe010113          	addi	sp,sp,-32
8001bcc0:	00112e23          	sw	ra,28(sp)
8001bcc4:	00812c23          	sw	s0,24(sp)
8001bcc8:	02010413          	addi	s0,sp,32
8001bccc:	fea42623          	sw	a0,-20(s0)
8001bcd0:	00058793          	mv	a5,a1
8001bcd4:	fef41523          	sh	a5,-22(s0)
    crc = crc16((ee_s16)newval, crc);
8001bcd8:	fec42783          	lw	a5,-20(s0)
8001bcdc:	01079793          	slli	a5,a5,0x10
8001bce0:	4107d793          	srai	a5,a5,0x10
8001bce4:	fea45703          	lhu	a4,-22(s0)
8001bce8:	00070593          	mv	a1,a4
8001bcec:	00078513          	mv	a0,a5
8001bcf0:	04c000ef          	jal	ra,8001bd3c <crc16>
8001bcf4:	00050793          	mv	a5,a0
8001bcf8:	fef41523          	sh	a5,-22(s0)
    crc = crc16((ee_s16)(newval >> 16), crc);
8001bcfc:	fec42783          	lw	a5,-20(s0)
8001bd00:	0107d793          	srli	a5,a5,0x10
8001bd04:	01079793          	slli	a5,a5,0x10
8001bd08:	4107d793          	srai	a5,a5,0x10
8001bd0c:	fea45703          	lhu	a4,-22(s0)
8001bd10:	00070593          	mv	a1,a4
8001bd14:	00078513          	mv	a0,a5
8001bd18:	024000ef          	jal	ra,8001bd3c <crc16>
8001bd1c:	00050793          	mv	a5,a0
8001bd20:	fef41523          	sh	a5,-22(s0)
    return crc;
8001bd24:	fea45783          	lhu	a5,-22(s0)
}
8001bd28:	00078513          	mv	a0,a5
8001bd2c:	01c12083          	lw	ra,28(sp)
8001bd30:	01812403          	lw	s0,24(sp)
8001bd34:	02010113          	addi	sp,sp,32
8001bd38:	00008067          	ret

8001bd3c <crc16>:
ee_u16
crc16(ee_s16 newval, ee_u16 crc)
{
8001bd3c:	fe010113          	addi	sp,sp,-32
8001bd40:	00112e23          	sw	ra,28(sp)
8001bd44:	00812c23          	sw	s0,24(sp)
8001bd48:	02010413          	addi	s0,sp,32
8001bd4c:	00050793          	mv	a5,a0
8001bd50:	00058713          	mv	a4,a1
8001bd54:	fef41723          	sh	a5,-18(s0)
8001bd58:	00070793          	mv	a5,a4
8001bd5c:	fef41623          	sh	a5,-20(s0)
    return crcu16((ee_u16)newval, crc);
8001bd60:	fee45783          	lhu	a5,-18(s0)
8001bd64:	fec45703          	lhu	a4,-20(s0)
8001bd68:	00070593          	mv	a1,a4
8001bd6c:	00078513          	mv	a0,a5
8001bd70:	ec5ff0ef          	jal	ra,8001bc34 <crcu16>
8001bd74:	00050793          	mv	a5,a0
}
8001bd78:	00078513          	mv	a0,a5
8001bd7c:	01c12083          	lw	ra,28(sp)
8001bd80:	01812403          	lw	s0,24(sp)
8001bd84:	02010113          	addi	sp,sp,32
8001bd88:	00008067          	ret

8001bd8c <check_data_types>:

ee_u8
check_data_types()
{
8001bd8c:	fe010113          	addi	sp,sp,-32
8001bd90:	00112e23          	sw	ra,28(sp)
8001bd94:	00812c23          	sw	s0,24(sp)
8001bd98:	02010413          	addi	s0,sp,32
    ee_u8 retval = 0;
8001bd9c:	fe0407a3          	sb	zero,-17(s0)
    {
        ee_printf(
            "ERROR: ee_ptr_int is not a datatype that holds an int pointer!\n");
        retval++;
    }
    if (retval > 0)
8001bda0:	fef44783          	lbu	a5,-17(s0)
8001bda4:	00078863          	beqz	a5,8001bdb4 <check_data_types+0x28>
    {
        ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
8001bda8:	0000c517          	auipc	a0,0xc
8001bdac:	e8c50513          	addi	a0,a0,-372 # 80027c34 <raise+0x2040>
8001bdb0:	109000ef          	jal	ra,8001c6b8 <printf>
    }
    return retval;
8001bdb4:	fef44783          	lbu	a5,-17(s0)
}
8001bdb8:	00078513          	mv	a0,a5
8001bdbc:	01c12083          	lw	ra,28(sp)
8001bdc0:	01812403          	lw	s0,24(sp)
8001bdc4:	02010113          	addi	sp,sp,32
8001bdc8:	00008067          	ret

8001bdcc <main>:
#include <rthw.h>
#include <stdio.h>
#include <string.h>


int main(void) {
8001bdcc:	ff010113          	addi	sp,sp,-16
8001bdd0:	00112623          	sw	ra,12(sp)
8001bdd4:	00812423          	sw	s0,8(sp)
8001bdd8:	01010413          	addi	s0,sp,16
    rt_kprintf("RT-Thread on PGL22G RV32 IP Core!\n");
8001bddc:	0000c517          	auipc	a0,0xc
8001bde0:	e9050513          	addi	a0,a0,-368 # 80027c6c <raise+0x2078>
8001bde4:	c44f90ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("Long Live CHIRO! In CHIRO We Trust!\n");
8001bde8:	0000c517          	auipc	a0,0xc
8001bdec:	ea850513          	addi	a0,a0,-344 # 80027c90 <raise+0x209c>
8001bdf0:	c38f90ef          	jal	ra,80015228 <rt_kprintf>
    int coremark_main(void);
    coremark_main();
8001bdf4:	841fd0ef          	jal	ra,80019634 <coremark_main>
    return 0;
8001bdf8:	00000793          	li	a5,0
8001bdfc:	00078513          	mv	a0,a5
8001be00:	00c12083          	lw	ra,12(sp)
8001be04:	00812403          	lw	s0,8(sp)
8001be08:	01010113          	addi	sp,sp,16
8001be0c:	00008067          	ret

8001be10 <primary_cpu_entry>:
#include "riscv_io.h"
#include "plic.h"
#include "interrupt.h"

void primary_cpu_entry(void)
{
8001be10:	ff010113          	addi	sp,sp,-16
8001be14:	00112623          	sw	ra,12(sp)
8001be18:	00812423          	sw	s0,8(sp)
8001be1c:	01010413          	addi	s0,sp,16
    extern void entry(void);

    /* disable global interrupt */
    rt_memset(&__bss_start, 0x0, (rt_uint8_t*)&__bss_end - (rt_uint8_t*)&__bss_start);
8001be20:	0006b717          	auipc	a4,0x6b
8001be24:	99c70713          	addi	a4,a4,-1636 # 800867bc <__bss_end>
8001be28:	00068797          	auipc	a5,0x68
8001be2c:	1d878793          	addi	a5,a5,472 # 80084000 <filesystem_operation_table>
8001be30:	40f707b3          	sub	a5,a4,a5
8001be34:	00078613          	mv	a2,a5
8001be38:	00000593          	li	a1,0
8001be3c:	00068517          	auipc	a0,0x68
8001be40:	1c450513          	addi	a0,a0,452 # 80084000 <filesystem_operation_table>
8001be44:	e49f70ef          	jal	ra,80013c8c <rt_memset>

    rt_hw_interrupt_disable();
8001be48:	a58e40ef          	jal	ra,800000a0 <rt_hw_interrupt_disable>
    entry();
8001be4c:	93df60ef          	jal	ra,80012788 <entry>
}
8001be50:	00000013          	nop
8001be54:	00c12083          	lw	ra,12(sp)
8001be58:	00812403          	lw	s0,8(sp)
8001be5c:	01010113          	addi	sp,sp,16
8001be60:	00008067          	ret

8001be64 <rt_hw_board_init>:


void rt_hw_board_init(void)
{
8001be64:	ff010113          	addi	sp,sp,-16
8001be68:	00112623          	sw	ra,12(sp)
8001be6c:	00812423          	sw	s0,8(sp)
8001be70:	01010413          	addi	s0,sp,16
    /* initalize interrupt */
    rt_hw_interrupt_init();
8001be74:	b9df50ef          	jal	ra,80011a10 <rt_hw_interrupt_init>
    /* initialize hardware interrupt */
    rt_hw_uart_init();
8001be78:	2c8000ef          	jal	ra,8001c140 <rt_hw_uart_init>
    rt_kprintf("If you see this line, then uart works!\n");
8001be7c:	0000c517          	auipc	a0,0xc
8001be80:	e3c50513          	addi	a0,a0,-452 # 80027cb8 <raise+0x20c4>
8001be84:	ba4f90ef          	jal	ra,80015228 <rt_kprintf>

#ifdef RT_USING_HEAP
    /* initialize memory system */
    rt_system_heap_init(RT_HW_HEAP_BEGIN, RT_HW_HEAP_END);
8001be88:	0006b717          	auipc	a4,0x6b
8001be8c:	93470713          	addi	a4,a4,-1740 # 800867bc <__bss_end>
8001be90:	000407b7          	lui	a5,0x40
8001be94:	00f707b3          	add	a5,a4,a5
8001be98:	00078593          	mv	a1,a5
8001be9c:	0006b517          	auipc	a0,0x6b
8001bea0:	92050513          	addi	a0,a0,-1760 # 800867bc <__bss_end>
8001bea4:	dacf90ef          	jal	ra,80015450 <rt_system_heap_init>
#endif

#if defined(RT_USING_CONSOLE) && defined(RT_USING_DEVICE)
    /* set console device */
    rt_console_set_device("uart");
8001bea8:	0000c517          	auipc	a0,0xc
8001beac:	e3850513          	addi	a0,a0,-456 # 80027ce0 <raise+0x20ec>
8001beb0:	ab4f90ef          	jal	ra,80015164 <rt_console_set_device>
#endif

    rt_hw_tick_init();
8001beb4:	e08f60ef          	jal	ra,800124bc <rt_hw_tick_init>

    rt_kprintf("Memory info:\n");
8001beb8:	0000c517          	auipc	a0,0xc
8001bebc:	e3050513          	addi	a0,a0,-464 # 80027ce8 <raise+0x20f4>
8001bec0:	b68f90ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf(" stack: [0x%08x, 0x%08x)\n", (rt_ubase_t) RT_HW_STACK_BEGIN, (rt_ubase_t) RT_HW_STACK_END);
8001bec4:	00064697          	auipc	a3,0x64
8001bec8:	13c68693          	addi	a3,a3,316 # 80080000 <__STACK_ADDR__>
8001becc:	00064717          	auipc	a4,0x64
8001bed0:	13470713          	addi	a4,a4,308 # 80080000 <__STACK_ADDR__>
8001bed4:	000047b7          	lui	a5,0x4
8001bed8:	00f707b3          	add	a5,a4,a5
8001bedc:	00078613          	mv	a2,a5
8001bee0:	00068593          	mv	a1,a3
8001bee4:	0000c517          	auipc	a0,0xc
8001bee8:	e1450513          	addi	a0,a0,-492 # 80027cf8 <raise+0x2104>
8001beec:	b3cf90ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("   bss: [0x%08x, 0x%08x)\n", (rt_ubase_t) RT_HW_BSS_BEGIN, (rt_ubase_t) RT_HW_BSS_END);
8001bef0:	00068797          	auipc	a5,0x68
8001bef4:	11078793          	addi	a5,a5,272 # 80084000 <filesystem_operation_table>
8001bef8:	0006b717          	auipc	a4,0x6b
8001befc:	8c470713          	addi	a4,a4,-1852 # 800867bc <__bss_end>
8001bf00:	00070613          	mv	a2,a4
8001bf04:	00078593          	mv	a1,a5
8001bf08:	0000c517          	auipc	a0,0xc
8001bf0c:	e0c50513          	addi	a0,a0,-500 # 80027d14 <raise+0x2120>
8001bf10:	b18f90ef          	jal	ra,80015228 <rt_kprintf>
    rt_kprintf("  heap: [0x%08x, 0x%08x)\n", (rt_ubase_t) RT_HW_HEAP_BEGIN, (rt_ubase_t) RT_HW_HEAP_END);
8001bf14:	0006b697          	auipc	a3,0x6b
8001bf18:	8a868693          	addi	a3,a3,-1880 # 800867bc <__bss_end>
8001bf1c:	0006b717          	auipc	a4,0x6b
8001bf20:	8a070713          	addi	a4,a4,-1888 # 800867bc <__bss_end>
8001bf24:	000407b7          	lui	a5,0x40
8001bf28:	00f707b3          	add	a5,a4,a5
8001bf2c:	00078613          	mv	a2,a5
8001bf30:	00068593          	mv	a1,a3
8001bf34:	0000c517          	auipc	a0,0xc
8001bf38:	dfc50513          	addi	a0,a0,-516 # 80027d30 <raise+0x213c>
8001bf3c:	aecf90ef          	jal	ra,80015228 <rt_kprintf>

#ifdef RT_USING_COMPONENTS_INIT
    rt_components_board_init();
8001bf40:	f88f60ef          	jal	ra,800126c8 <rt_components_board_init>
#endif
}
8001bf44:	00000013          	nop
8001bf48:	00c12083          	lw	ra,12(sp)
8001bf4c:	00812403          	lw	s0,8(sp)
8001bf50:	01010113          	addi	sp,sp,16
8001bf54:	00008067          	ret

8001bf58 <uart_read_reg_cache>:
    // uart_write_reg(LCR, lcr | (1 << 7));
    // uart_write_reg(DLL, 0x03);
    // uart_write_reg(DLM, 0x00);

    // lcr = 0;
    // uart_write_reg(LCR, lcr | (3 << 0));
8001bf58:	fe010113          	addi	sp,sp,-32
8001bf5c:	00812e23          	sw	s0,28(sp)
8001bf60:	02010413          	addi	s0,sp,32
8001bf64:	fea42623          	sw	a0,-20(s0)

    // /*
8001bf68:	fec42283          	lw	t0,-20(s0)
8001bf6c:	0000500f          	.word	0x0000500f
    //  * enable receive interrupts.
    //  */
    // uint8_t ier = uart_read_reg(IER);
8001bf70:	fec42703          	lw	a4,-20(s0)
8001bf74:	150007b7          	lui	a5,0x15000
8001bf78:	00f707b3          	add	a5,a4,a5
8001bf7c:	00279793          	slli	a5,a5,0x2
8001bf80:	0007a783          	lw	a5,0(a5) # 15000000 <__STACKSIZE__+0x14ffc000>
    // uart_write_reg(IER, ier | (1 << 0));
8001bf84:	00078513          	mv	a0,a5
8001bf88:	01c12403          	lw	s0,28(sp)
8001bf8c:	02010113          	addi	sp,sp,32
8001bf90:	00008067          	ret

8001bf94 <virt_uart_init>:
{
8001bf94:	ff010113          	addi	sp,sp,-16
8001bf98:	00812623          	sw	s0,12(sp)
8001bf9c:	01010413          	addi	s0,sp,16

    uart_write_reg(4, 0);
8001bfa0:	540007b7          	lui	a5,0x54000
8001bfa4:	01078793          	addi	a5,a5,16 # 54000010 <__STACKSIZE__+0x53ffc010>
8001bfa8:	0007a023          	sw	zero,0(a5)
    uart_write_reg(2, 1);
8001bfac:	540007b7          	lui	a5,0x54000
8001bfb0:	00878793          	addi	a5,a5,8 # 54000008 <__STACKSIZE__+0x53ffc008>
8001bfb4:	00100713          	li	a4,1
8001bfb8:	00e7a023          	sw	a4,0(a5)
    uart_write_reg(3, 1);
8001bfbc:	540007b7          	lui	a5,0x54000
8001bfc0:	00c78793          	addi	a5,a5,12 # 5400000c <__STACKSIZE__+0x53ffc00c>
8001bfc4:	00100713          	li	a4,1
8001bfc8:	00e7a023          	sw	a4,0(a5)
}
8001bfcc:	00000013          	nop
8001bfd0:	00c12403          	lw	s0,12(sp)
8001bfd4:	01010113          	addi	sp,sp,16
8001bfd8:	00008067          	ret

8001bfdc <rt_uart_configure>:

/*
 * UART interface
 */
static rt_err_t rt_uart_configure(struct rt_serial_device *serial, struct serial_configure *cfg)
{
8001bfdc:	fe010113          	addi	sp,sp,-32
8001bfe0:	00812e23          	sw	s0,28(sp)
8001bfe4:	02010413          	addi	s0,sp,32
8001bfe8:	fea42623          	sw	a0,-20(s0)
8001bfec:	feb42423          	sw	a1,-24(s0)
    struct device_uart *uart;

    RT_ASSERT(serial != RT_NULL);
    serial->config = *cfg;
8001bff0:	fec42783          	lw	a5,-20(s0)
8001bff4:	fe842703          	lw	a4,-24(s0)
8001bff8:	00072683          	lw	a3,0(a4)
8001bffc:	04d7aa23          	sw	a3,84(a5)
8001c000:	00472703          	lw	a4,4(a4)
8001c004:	04e7ac23          	sw	a4,88(a5)

    return (RT_EOK);
8001c008:	00000793          	li	a5,0
}
8001c00c:	00078513          	mv	a0,a5
8001c010:	01c12403          	lw	s0,28(sp)
8001c014:	02010113          	addi	sp,sp,32
8001c018:	00008067          	ret

8001c01c <uart_control>:

static rt_err_t uart_control(struct rt_serial_device *serial, int cmd, void *arg)
{
8001c01c:	fd010113          	addi	sp,sp,-48
8001c020:	02812623          	sw	s0,44(sp)
8001c024:	03010413          	addi	s0,sp,48
8001c028:	fca42e23          	sw	a0,-36(s0)
8001c02c:	fcb42c23          	sw	a1,-40(s0)
8001c030:	fcc42a23          	sw	a2,-44(s0)
    struct device_uart *uart;

    uart = serial->parent.user_data;
8001c034:	fdc42783          	lw	a5,-36(s0)
8001c038:	04c7a783          	lw	a5,76(a5)
8001c03c:	fef42623          	sw	a5,-20(s0)
    rt_uint32_t channel = 1;
8001c040:	00100793          	li	a5,1
8001c044:	fef42423          	sw	a5,-24(s0)
    {
    case RT_DEVICE_CTRL_CLR_INT:
        break;

    case RT_DEVICE_CTRL_SET_INT:
        break;
8001c048:	00000013          	nop
    }

    return (RT_EOK);
8001c04c:	00000793          	li	a5,0
}
8001c050:	00078513          	mv	a0,a5
8001c054:	02c12403          	lw	s0,44(sp)
8001c058:	03010113          	addi	sp,sp,48
8001c05c:	00008067          	ret

8001c060 <drv_uart_putc>:

static int drv_uart_putc(struct rt_serial_device *serial, char c)
{
8001c060:	fe010113          	addi	sp,sp,-32
8001c064:	00112e23          	sw	ra,28(sp)
8001c068:	00812c23          	sw	s0,24(sp)
8001c06c:	02010413          	addi	s0,sp,32
8001c070:	fea42623          	sw	a0,-20(s0)
8001c074:	00058793          	mv	a5,a1
8001c078:	fef405a3          	sb	a5,-21(s0)
    // while ((uart_read_reg(LSR) & LSR_TX_IDLE) == 0);
    // // uint32_t delay = 0x1f;
    // // while (delay--);
    // return uart_write_reg(THR, c);
    while (uart_read_reg(0) & 0x80000000)
8001c07c:	00000013          	nop
8001c080:	00000513          	li	a0,0
8001c084:	ed5ff0ef          	jal	ra,8001bf58 <uart_read_reg_cache>
8001c088:	00050793          	mv	a5,a0
8001c08c:	fe07cae3          	bltz	a5,8001c080 <drv_uart_putc+0x20>
		;

	uart_write_reg(0, c);
8001c090:	540007b7          	lui	a5,0x54000
8001c094:	feb44703          	lbu	a4,-21(s0)
8001c098:	00e7a023          	sw	a4,0(a5) # 54000000 <__STACKSIZE__+0x53ffc000>
}
8001c09c:	00000013          	nop
8001c0a0:	00078513          	mv	a0,a5
8001c0a4:	01c12083          	lw	ra,28(sp)
8001c0a8:	01812403          	lw	s0,24(sp)
8001c0ac:	02010113          	addi	sp,sp,32
8001c0b0:	00008067          	ret

8001c0b4 <drv_uart_getc>:

static int drv_uart_getc(struct rt_serial_device *serial)
{
8001c0b4:	fd010113          	addi	sp,sp,-48
8001c0b8:	02112623          	sw	ra,44(sp)
8001c0bc:	02812423          	sw	s0,40(sp)
8001c0c0:	03010413          	addi	s0,sp,48
8001c0c4:	fca42e23          	sw	a0,-36(s0)
    //     return uart_read_reg(RHR);
    // } else {
    //     return -1;
    // }
    // //return sbi_console_getchar();
    uint32_t ret = uart_read_reg(1);
8001c0c8:	00100513          	li	a0,1
8001c0cc:	e8dff0ef          	jal	ra,8001bf58 <uart_read_reg_cache>
8001c0d0:	fea42623          	sw	a0,-20(s0)
	if (!(ret & 0x80000000))
8001c0d4:	fec42783          	lw	a5,-20(s0)
8001c0d8:	0007c863          	bltz	a5,8001c0e8 <drv_uart_getc+0x34>
		return ret & 0xff;
8001c0dc:	fec42783          	lw	a5,-20(s0)
8001c0e0:	0ff7f793          	zext.b	a5,a5
8001c0e4:	0080006f          	j	8001c0ec <drv_uart_getc+0x38>
	return -1;
8001c0e8:	fff00793          	li	a5,-1
}
8001c0ec:	00078513          	mv	a0,a5
8001c0f0:	02c12083          	lw	ra,44(sp)
8001c0f4:	02812403          	lw	s0,40(sp)
8001c0f8:	03010113          	addi	sp,sp,48
8001c0fc:	00008067          	ret

8001c100 <rt_hw_uart_isr>:

static void rt_hw_uart_isr(int irqno, void *param)
{
8001c100:	fd010113          	addi	sp,sp,-48
8001c104:	02112623          	sw	ra,44(sp)
8001c108:	02812423          	sw	s0,40(sp)
8001c10c:	03010413          	addi	s0,sp,48
8001c110:	fca42e23          	sw	a0,-36(s0)
8001c114:	fcb42c23          	sw	a1,-40(s0)
    struct rt_serial_device *serial = (struct rt_serial_device*)param;
8001c118:	fd842783          	lw	a5,-40(s0)
8001c11c:	fef42623          	sw	a5,-20(s0)
    rt_hw_serial_isr(serial, RT_SERIAL_EVENT_RX_IND);
8001c120:	00100593          	li	a1,1
8001c124:	fec42503          	lw	a0,-20(s0)
8001c128:	b7cf00ef          	jal	ra,8000c4a4 <rt_hw_serial_isr>
}
8001c12c:	00000013          	nop
8001c130:	02c12083          	lw	ra,44(sp)
8001c134:	02812403          	lw	s0,40(sp)
8001c138:	03010113          	addi	sp,sp,48
8001c13c:	00008067          	ret

8001c140 <rt_hw_uart_init>:

/*
 * UART Initiation
 */
int rt_hw_uart_init(void)
{
8001c140:	fe010113          	addi	sp,sp,-32
8001c144:	00112e23          	sw	ra,28(sp)
8001c148:	00812c23          	sw	s0,24(sp)
8001c14c:	02010413          	addi	s0,sp,32
    struct rt_serial_device *serial;
    struct device_uart      *uart;
    struct serial_configure config = RT_SERIAL_CONFIG_DEFAULT;
8001c150:	0001c7b7          	lui	a5,0x1c
8001c154:	20078793          	addi	a5,a5,512 # 1c200 <__STACKSIZE__+0x18200>
8001c158:	fef42023          	sw	a5,-32(s0)
8001c15c:	fe442783          	lw	a5,-28(s0)
8001c160:	ff07f793          	andi	a5,a5,-16
8001c164:	0087e793          	ori	a5,a5,8
8001c168:	fef42223          	sw	a5,-28(s0)
8001c16c:	fe442783          	lw	a5,-28(s0)
8001c170:	fcf7f793          	andi	a5,a5,-49
8001c174:	fef42223          	sw	a5,-28(s0)
8001c178:	fe442783          	lw	a5,-28(s0)
8001c17c:	f3f7f793          	andi	a5,a5,-193
8001c180:	fef42223          	sw	a5,-28(s0)
8001c184:	fe442783          	lw	a5,-28(s0)
8001c188:	eff7f793          	andi	a5,a5,-257
8001c18c:	fef42223          	sw	a5,-28(s0)
8001c190:	fe442783          	lw	a5,-28(s0)
8001c194:	dff7f793          	andi	a5,a5,-513
8001c198:	fef42223          	sw	a5,-28(s0)
8001c19c:	fe442703          	lw	a4,-28(s0)
8001c1a0:	fc0007b7          	lui	a5,0xfc000
8001c1a4:	3ff78793          	addi	a5,a5,1023 # fc0003ff <__bss_end+0x7bf79c43>
8001c1a8:	00f77733          	and	a4,a4,a5
8001c1ac:	000107b7          	lui	a5,0x10
8001c1b0:	00f767b3          	or	a5,a4,a5
8001c1b4:	fef42223          	sw	a5,-28(s0)
8001c1b8:	fe442703          	lw	a4,-28(s0)
8001c1bc:	fc0007b7          	lui	a5,0xfc000
8001c1c0:	fff78793          	addi	a5,a5,-1 # fbffffff <__bss_end+0x7bf79843>
8001c1c4:	00f777b3          	and	a5,a4,a5
8001c1c8:	fef42223          	sw	a5,-28(s0)
8001c1cc:	fe442703          	lw	a4,-28(s0)
8001c1d0:	080007b7          	lui	a5,0x8000
8001c1d4:	fff78793          	addi	a5,a5,-1 # 7ffffff <__STACKSIZE__+0x7ffbfff>
8001c1d8:	00f777b3          	and	a5,a4,a5
8001c1dc:	fef42223          	sw	a5,-28(s0)
    {
        serial  = &serial1;
8001c1e0:	0006a797          	auipc	a5,0x6a
8001c1e4:	44078793          	addi	a5,a5,1088 # 80086620 <serial1>
8001c1e8:	fef42623          	sw	a5,-20(s0)
        uart    = &uart1;
8001c1ec:	00068797          	auipc	a5,0x68
8001c1f0:	ed478793          	addi	a5,a5,-300 # 800840c0 <uart1>
8001c1f4:	fef42423          	sw	a5,-24(s0)

        serial->ops              = &_uart_ops;
8001c1f8:	fec42783          	lw	a5,-20(s0)
8001c1fc:	0000c717          	auipc	a4,0xc
8001c200:	59c70713          	addi	a4,a4,1436 # 80028798 <_uart_ops>
8001c204:	04e7a823          	sw	a4,80(a5)
        serial->config           = config;
8001c208:	fec42783          	lw	a5,-20(s0)
8001c20c:	fe042703          	lw	a4,-32(s0)
8001c210:	04e7aa23          	sw	a4,84(a5)
8001c214:	fe442703          	lw	a4,-28(s0)
8001c218:	04e7ac23          	sw	a4,88(a5)
        serial->config.baud_rate = UART_DEFAULT_BAUDRATE;
8001c21c:	fec42783          	lw	a5,-20(s0)
8001c220:	0001c737          	lui	a4,0x1c
8001c224:	20070713          	addi	a4,a4,512 # 1c200 <__STACKSIZE__+0x18200>
8001c228:	04e7aa23          	sw	a4,84(a5)

        uart->hw_base   = UART_BASE;
8001c22c:	fe842783          	lw	a5,-24(s0)
8001c230:	54000737          	lui	a4,0x54000
8001c234:	00e7a023          	sw	a4,0(a5)
        uart->irqno     = UART0_IRQ;
8001c238:	fe842783          	lw	a5,-24(s0)
8001c23c:	00a00713          	li	a4,10
8001c240:	00e7a223          	sw	a4,4(a5)

        virt_uart_init();
8001c244:	d51ff0ef          	jal	ra,8001bf94 <virt_uart_init>

        rt_hw_serial_register(serial,
8001c248:	fe842683          	lw	a3,-24(s0)
8001c24c:	14300613          	li	a2,323
8001c250:	0000c597          	auipc	a1,0xc
8001c254:	afc58593          	addi	a1,a1,-1284 # 80027d4c <raise+0x2158>
8001c258:	fec42503          	lw	a0,-20(s0)
8001c25c:	964f00ef          	jal	ra,8000c3c0 <rt_hw_serial_register>
                              "uart",
                              RT_DEVICE_FLAG_STREAM | RT_DEVICE_FLAG_RDWR | RT_DEVICE_FLAG_INT_RX,
                              uart);
        rt_hw_interrupt_install(uart->irqno, rt_hw_uart_isr, serial, "uart");
8001c260:	fe842783          	lw	a5,-24(s0)
8001c264:	0047a783          	lw	a5,4(a5)
8001c268:	0000c697          	auipc	a3,0xc
8001c26c:	ae468693          	addi	a3,a3,-1308 # 80027d4c <raise+0x2158>
8001c270:	fec42603          	lw	a2,-20(s0)
8001c274:	00000597          	auipc	a1,0x0
8001c278:	e8c58593          	addi	a1,a1,-372 # 8001c100 <rt_hw_uart_isr>
8001c27c:	00078513          	mv	a0,a5
8001c280:	899f50ef          	jal	ra,80011b18 <rt_hw_interrupt_install>

        rt_hw_interrupt_umask(uart->irqno);
8001c284:	fe842783          	lw	a5,-24(s0)
8001c288:	0047a783          	lw	a5,4(a5)
8001c28c:	00078513          	mv	a0,a5
8001c290:	84df50ef          	jal	ra,80011adc <rt_hw_interrupt_umask>
    }

    return 0;
8001c294:	00000793          	li	a5,0
}
8001c298:	00078513          	mv	a0,a5
8001c29c:	01c12083          	lw	ra,28(sp)
8001c2a0:	01812403          	lw	s0,24(sp)
8001c2a4:	02010113          	addi	sp,sp,32
8001c2a8:	00008067          	ret

8001c2ac <__raw_hartid>:
#include <stdint.h>
#include "plic.h"
#include <riscv_io.h>
#include "encoding.h"

/*
8001c2ac:	fe010113          	addi	sp,sp,-32
8001c2b0:	00812e23          	sw	s0,28(sp)
8001c2b4:	02010413          	addi	s0,sp,32
* Each PLIC interrupt source can be assigned a priority by writing
* to its 32-bit memory-mapped priority register.
8001c2b8:	f14027f3          	csrr	a5,mhartid
8001c2bc:	fef42623          	sw	a5,-20(s0)
* The QEMU-virt (the same as FU540-C000) supports 7 levels of priority.
8001c2c0:	fec42783          	lw	a5,-20(s0)
* A priority value of 0 is reserved to mean "never interrupt" and
8001c2c4:	00078513          	mv	a0,a5
8001c2c8:	01c12403          	lw	s0,28(sp)
8001c2cc:	02010113          	addi	sp,sp,32
8001c2d0:	00008067          	ret

8001c2d4 <plic_set_priority>:
* Ties between global interrupts of the same priority are broken by
* the Interrupt ID; interrupts with the lowest ID have the highest
* effective priority.
*/
void plic_set_priority(int irq, int priority)
{
8001c2d4:	fe010113          	addi	sp,sp,-32
8001c2d8:	00812e23          	sw	s0,28(sp)
8001c2dc:	02010413          	addi	s0,sp,32
8001c2e0:	fea42623          	sw	a0,-20(s0)
8001c2e4:	feb42423          	sw	a1,-24(s0)
    *(uint32_t*)PLIC_PRIORITY(irq) = priority;
8001c2e8:	fec42703          	lw	a4,-20(s0)
8001c2ec:	030007b7          	lui	a5,0x3000
8001c2f0:	00f707b3          	add	a5,a4,a5
8001c2f4:	00279793          	slli	a5,a5,0x2
8001c2f8:	00078713          	mv	a4,a5
8001c2fc:	fe842783          	lw	a5,-24(s0)
8001c300:	00f72023          	sw	a5,0(a4) # 54000000 <__STACKSIZE__+0x53ffc000>
}
8001c304:	00000013          	nop
8001c308:	01c12403          	lw	s0,28(sp)
8001c30c:	02010113          	addi	sp,sp,32
8001c310:	00008067          	ret

8001c314 <plic_irq_enable>:
/*
* Each global interrupt can be enabled by setting the corresponding
* bit in the enables registers.
*/
void plic_irq_enable(int irq)
{
8001c314:	fd010113          	addi	sp,sp,-48
8001c318:	02112623          	sw	ra,44(sp)
8001c31c:	02812423          	sw	s0,40(sp)
8001c320:	03010413          	addi	s0,sp,48
8001c324:	fca42e23          	sw	a0,-36(s0)
    int hart = __raw_hartid();
8001c328:	f85ff0ef          	jal	ra,8001c2ac <__raw_hartid>
8001c32c:	00050793          	mv	a5,a0
8001c330:	fef42623          	sw	a5,-20(s0)
    *(uint32_t*)PLIC_ENABLE(hart) = ((*(uint32_t*)PLIC_ENABLE(hart)) | (1 << irq));
8001c334:	fec42703          	lw	a4,-20(s0)
8001c338:	000c07b7          	lui	a5,0xc0
8001c33c:	02078793          	addi	a5,a5,32 # c0020 <__STACKSIZE__+0xbc020>
8001c340:	00f707b3          	add	a5,a4,a5
8001c344:	00879793          	slli	a5,a5,0x8
8001c348:	0007a783          	lw	a5,0(a5)
8001c34c:	fdc42703          	lw	a4,-36(s0)
8001c350:	00100693          	li	a3,1
8001c354:	00e69733          	sll	a4,a3,a4
8001c358:	00070613          	mv	a2,a4
8001c35c:	fec42683          	lw	a3,-20(s0)
8001c360:	000c0737          	lui	a4,0xc0
8001c364:	02070713          	addi	a4,a4,32 # c0020 <__STACKSIZE__+0xbc020>
8001c368:	00e68733          	add	a4,a3,a4
8001c36c:	00871713          	slli	a4,a4,0x8
8001c370:	00c7e7b3          	or	a5,a5,a2
8001c374:	00f72023          	sw	a5,0(a4)
    set_csr(mie, read_csr(mie) | MIP_MEIP);
8001c378:	304027f3          	csrr	a5,mie
8001c37c:	fef42423          	sw	a5,-24(s0)
8001c380:	fe842703          	lw	a4,-24(s0)
8001c384:	000017b7          	lui	a5,0x1
8001c388:	80078793          	addi	a5,a5,-2048 # 800 <__STACKSIZE__-0x3800>
8001c38c:	00f767b3          	or	a5,a4,a5
8001c390:	3047a7f3          	csrrs	a5,mie,a5
8001c394:	fef42223          	sw	a5,-28(s0)
}
8001c398:	00000013          	nop
8001c39c:	02c12083          	lw	ra,44(sp)
8001c3a0:	02812403          	lw	s0,40(sp)
8001c3a4:	03010113          	addi	sp,sp,48
8001c3a8:	00008067          	ret

8001c3ac <plic_set_threshold>:
* For example, a threshold value of zero permits all interrupts with
* non-zero priority, whereas a value of 7 masks all interrupts.
* Notice, the threshold is global for PLIC, not for each interrupt source.
*/
void plic_set_threshold(int threshold)
{
8001c3ac:	fd010113          	addi	sp,sp,-48
8001c3b0:	02112623          	sw	ra,44(sp)
8001c3b4:	02812423          	sw	s0,40(sp)
8001c3b8:	03010413          	addi	s0,sp,48
8001c3bc:	fca42e23          	sw	a0,-36(s0)
    int hart = __raw_hartid();
8001c3c0:	eedff0ef          	jal	ra,8001c2ac <__raw_hartid>
8001c3c4:	00050793          	mv	a5,a0
8001c3c8:	fef42623          	sw	a5,-20(s0)
    *(uint32_t*)PLIC_THRESHOLD(hart) = threshold;
8001c3cc:	fec42703          	lw	a4,-20(s0)
8001c3d0:	000067b7          	lui	a5,0x6
8001c3d4:	10078793          	addi	a5,a5,256 # 6100 <__STACKSIZE__+0x2100>
8001c3d8:	00f707b3          	add	a5,a4,a5
8001c3dc:	00d79793          	slli	a5,a5,0xd
8001c3e0:	00078713          	mv	a4,a5
8001c3e4:	fdc42783          	lw	a5,-36(s0)
8001c3e8:	00f72023          	sw	a5,0(a4)
}
8001c3ec:	00000013          	nop
8001c3f0:	02c12083          	lw	ra,44(sp)
8001c3f4:	02812403          	lw	s0,40(sp)
8001c3f8:	03010113          	addi	sp,sp,48
8001c3fc:	00008067          	ret

8001c400 <plic_claim>:
 * RETURN VALUE:
 *    the ID of the highest-priority pending interrupt or zero if there
 *    is no pending interrupt.
 */
int plic_claim(void)
{
8001c400:	fe010113          	addi	sp,sp,-32
8001c404:	00112e23          	sw	ra,28(sp)
8001c408:	00812c23          	sw	s0,24(sp)
8001c40c:	02010413          	addi	s0,sp,32
    int hart = __raw_hartid();
8001c410:	e9dff0ef          	jal	ra,8001c2ac <__raw_hartid>
8001c414:	00050793          	mv	a5,a0
8001c418:	fef42623          	sw	a5,-20(s0)
    int irq = *(uint32_t*)PLIC_CLAIM(hart);
8001c41c:	fec42783          	lw	a5,-20(s0)
8001c420:	00d79713          	slli	a4,a5,0xd
8001c424:	0c2007b7          	lui	a5,0xc200
8001c428:	00478793          	addi	a5,a5,4 # c200004 <__STACKSIZE__+0xc1fc004>
8001c42c:	00f707b3          	add	a5,a4,a5
8001c430:	0007a783          	lw	a5,0(a5)
8001c434:	fef42423          	sw	a5,-24(s0)
    return irq;
8001c438:	fe842783          	lw	a5,-24(s0)
}
8001c43c:	00078513          	mv	a0,a5
8001c440:	01c12083          	lw	ra,28(sp)
8001c444:	01812403          	lw	s0,24(sp)
8001c448:	02010113          	addi	sp,sp,32
8001c44c:	00008067          	ret

8001c450 <plic_complete>:
 *    interrupt source that is currently enabled for the target, the completion
 *    is silently ignored.
 * RETURN VALUE: none
 */
void plic_complete(int irq)
{
8001c450:	fd010113          	addi	sp,sp,-48
8001c454:	02112623          	sw	ra,44(sp)
8001c458:	02812423          	sw	s0,40(sp)
8001c45c:	03010413          	addi	s0,sp,48
8001c460:	fca42e23          	sw	a0,-36(s0)
    int hart = __raw_hartid();
8001c464:	e49ff0ef          	jal	ra,8001c2ac <__raw_hartid>
8001c468:	00050793          	mv	a5,a0
8001c46c:	fef42623          	sw	a5,-20(s0)
    *(uint32_t*)PLIC_COMPLETE(hart) = irq;
8001c470:	fec42783          	lw	a5,-20(s0)
8001c474:	00d79713          	slli	a4,a5,0xd
8001c478:	0c2007b7          	lui	a5,0xc200
8001c47c:	00478793          	addi	a5,a5,4 # c200004 <__STACKSIZE__+0xc1fc004>
8001c480:	00f707b3          	add	a5,a4,a5
8001c484:	00078713          	mv	a4,a5
8001c488:	fdc42783          	lw	a5,-36(s0)
8001c48c:	00f72023          	sw	a5,0(a4)
}
8001c490:	00000013          	nop
8001c494:	02c12083          	lw	ra,44(sp)
8001c498:	02812403          	lw	s0,40(sp)
8001c49c:	03010113          	addi	sp,sp,48
8001c4a0:	00008067          	ret

8001c4a4 <atoi>:
8001c4a4:	00a00613          	li	a2,10
8001c4a8:	00000593          	li	a1,0
8001c4ac:	1f40006f          	j	8001c6a0 <strtol>

8001c4b0 <_strtol_l.constprop.0>:
8001c4b0:	ff010113          	addi	sp,sp,-16
8001c4b4:	00112623          	sw	ra,12(sp)
8001c4b8:	00812423          	sw	s0,8(sp)
8001c4bc:	00912223          	sw	s1,4(sp)
8001c4c0:	02400793          	li	a5,36
8001c4c4:	0cd7e263          	bltu	a5,a3,8001c588 <_strtol_l.constprop.0+0xd8>
8001c4c8:	00100793          	li	a5,1
8001c4cc:	0af68e63          	beq	a3,a5,8001c588 <_strtol_l.constprop.0+0xd8>
8001c4d0:	800288b7          	lui	a7,0x80028
8001c4d4:	00068293          	mv	t0,a3
8001c4d8:	00058793          	mv	a5,a1
8001c4dc:	7ad88893          	addi	a7,a7,1965 # 800287ad <_ctype_+0x1>
8001c4e0:	0007c803          	lbu	a6,0(a5)
8001c4e4:	00078313          	mv	t1,a5
8001c4e8:	00178793          	addi	a5,a5,1
8001c4ec:	01088733          	add	a4,a7,a6
8001c4f0:	00074703          	lbu	a4,0(a4)
8001c4f4:	00877713          	andi	a4,a4,8
8001c4f8:	fe0714e3          	bnez	a4,8001c4e0 <_strtol_l.constprop.0+0x30>
8001c4fc:	02d00713          	li	a4,45
8001c500:	16e80463          	beq	a6,a4,8001c668 <_strtol_l.constprop.0+0x1b8>
8001c504:	02b00713          	li	a4,43
8001c508:	0ae80263          	beq	a6,a4,8001c5ac <_strtol_l.constprop.0+0xfc>
8001c50c:	800003b7          	lui	t2,0x80000
8001c510:	fff38393          	addi	t2,t2,-1 # 7fffffff <__STACKSIZE__+0x7fffbfff>
8001c514:	00000493          	li	s1,0
8001c518:	0a069663          	bnez	a3,8001c5c4 <_strtol_l.constprop.0+0x114>
8001c51c:	03000713          	li	a4,48
8001c520:	14e80e63          	beq	a6,a4,8001c67c <_strtol_l.constprop.0+0x1cc>
8001c524:	00a00293          	li	t0,10
8001c528:	00a00693          	li	a3,10
8001c52c:	0253f433          	remu	s0,t2,t0
8001c530:	00000313          	li	t1,0
8001c534:	00000893          	li	a7,0
8001c538:	00900e13          	li	t3,9
8001c53c:	01900f93          	li	t6,25
8001c540:	fff00e93          	li	t4,-1
8001c544:	0253df33          	divu	t5,t2,t0
8001c548:	fd080713          	addi	a4,a6,-48
8001c54c:	00ee7863          	bgeu	t3,a4,8001c55c <_strtol_l.constprop.0+0xac>
8001c550:	fbf80713          	addi	a4,a6,-65
8001c554:	0aefe463          	bltu	t6,a4,8001c5fc <_strtol_l.constprop.0+0x14c>
8001c558:	fc980713          	addi	a4,a6,-55
8001c55c:	0ad75863          	bge	a4,a3,8001c60c <_strtol_l.constprop.0+0x15c>
8001c560:	01d30e63          	beq	t1,t4,8001c57c <_strtol_l.constprop.0+0xcc>
8001c564:	fff00313          	li	t1,-1
8001c568:	011f6a63          	bltu	t5,a7,8001c57c <_strtol_l.constprop.0+0xcc>
8001c56c:	0d1f0a63          	beq	t5,a7,8001c640 <_strtol_l.constprop.0+0x190>
8001c570:	00100313          	li	t1,1
8001c574:	025888b3          	mul	a7,a7,t0
8001c578:	011708b3          	add	a7,a4,a7
8001c57c:	00178793          	addi	a5,a5,1
8001c580:	fff7c803          	lbu	a6,-1(a5)
8001c584:	fc5ff06f          	j	8001c548 <_strtol_l.constprop.0+0x98>
8001c588:	fddf40ef          	jal	ra,80011564 <__errno>
8001c58c:	00c12083          	lw	ra,12(sp)
8001c590:	00812403          	lw	s0,8(sp)
8001c594:	01600793          	li	a5,22
8001c598:	00f52023          	sw	a5,0(a0)
8001c59c:	00412483          	lw	s1,4(sp)
8001c5a0:	00000513          	li	a0,0
8001c5a4:	01010113          	addi	sp,sp,16
8001c5a8:	00008067          	ret
8001c5ac:	800003b7          	lui	t2,0x80000
8001c5b0:	0007c803          	lbu	a6,0(a5)
8001c5b4:	fff38393          	addi	t2,t2,-1 # 7fffffff <__STACKSIZE__+0x7fffbfff>
8001c5b8:	00230793          	addi	a5,t1,2
8001c5bc:	00000493          	li	s1,0
8001c5c0:	f4068ee3          	beqz	a3,8001c51c <_strtol_l.constprop.0+0x6c>
8001c5c4:	01000713          	li	a4,16
8001c5c8:	f6e692e3          	bne	a3,a4,8001c52c <_strtol_l.constprop.0+0x7c>
8001c5cc:	03000713          	li	a4,48
8001c5d0:	01000293          	li	t0,16
8001c5d4:	f4e81ce3          	bne	a6,a4,8001c52c <_strtol_l.constprop.0+0x7c>
8001c5d8:	0007c703          	lbu	a4,0(a5)
8001c5dc:	05800893          	li	a7,88
8001c5e0:	0df77713          	andi	a4,a4,223
8001c5e4:	f51714e3          	bne	a4,a7,8001c52c <_strtol_l.constprop.0+0x7c>
8001c5e8:	0017c803          	lbu	a6,1(a5)
8001c5ec:	01000293          	li	t0,16
8001c5f0:	00278793          	addi	a5,a5,2
8001c5f4:	01000693          	li	a3,16
8001c5f8:	f35ff06f          	j	8001c52c <_strtol_l.constprop.0+0x7c>
8001c5fc:	f9f80713          	addi	a4,a6,-97
8001c600:	00efe663          	bltu	t6,a4,8001c60c <_strtol_l.constprop.0+0x15c>
8001c604:	fa980713          	addi	a4,a6,-87
8001c608:	f4d74ce3          	blt	a4,a3,8001c560 <_strtol_l.constprop.0+0xb0>
8001c60c:	fff00713          	li	a4,-1
8001c610:	02e30c63          	beq	t1,a4,8001c648 <_strtol_l.constprop.0+0x198>
8001c614:	00048463          	beqz	s1,8001c61c <_strtol_l.constprop.0+0x16c>
8001c618:	411008b3          	neg	a7,a7
8001c61c:	00060663          	beqz	a2,8001c628 <_strtol_l.constprop.0+0x178>
8001c620:	06031c63          	bnez	t1,8001c698 <_strtol_l.constprop.0+0x1e8>
8001c624:	00b62023          	sw	a1,0(a2)
8001c628:	00c12083          	lw	ra,12(sp)
8001c62c:	00812403          	lw	s0,8(sp)
8001c630:	00412483          	lw	s1,4(sp)
8001c634:	00088513          	mv	a0,a7
8001c638:	01010113          	addi	sp,sp,16
8001c63c:	00008067          	ret
8001c640:	f2e44ee3          	blt	s0,a4,8001c57c <_strtol_l.constprop.0+0xcc>
8001c644:	f2dff06f          	j	8001c570 <_strtol_l.constprop.0+0xc0>
8001c648:	02200713          	li	a4,34
8001c64c:	00e52023          	sw	a4,0(a0)
8001c650:	00038893          	mv	a7,t2
8001c654:	fc060ae3          	beqz	a2,8001c628 <_strtol_l.constprop.0+0x178>
8001c658:	fff78593          	addi	a1,a5,-1
8001c65c:	00038893          	mv	a7,t2
8001c660:	00b62023          	sw	a1,0(a2)
8001c664:	fc5ff06f          	j	8001c628 <_strtol_l.constprop.0+0x178>
8001c668:	0007c803          	lbu	a6,0(a5)
8001c66c:	800003b7          	lui	t2,0x80000
8001c670:	00230793          	addi	a5,t1,2
8001c674:	00100493          	li	s1,1
8001c678:	ea1ff06f          	j	8001c518 <_strtol_l.constprop.0+0x68>
8001c67c:	0007c703          	lbu	a4,0(a5)
8001c680:	05800893          	li	a7,88
8001c684:	00800293          	li	t0,8
8001c688:	0df77713          	andi	a4,a4,223
8001c68c:	00800693          	li	a3,8
8001c690:	e9171ee3          	bne	a4,a7,8001c52c <_strtol_l.constprop.0+0x7c>
8001c694:	f55ff06f          	j	8001c5e8 <_strtol_l.constprop.0+0x138>
8001c698:	00088393          	mv	t2,a7
8001c69c:	fbdff06f          	j	8001c658 <_strtol_l.constprop.0+0x1a8>

8001c6a0 <strtol>:
8001c6a0:	00050793          	mv	a5,a0
8001c6a4:	8101a503          	lw	a0,-2032(gp) # 80029578 <_impure_ptr>
8001c6a8:	00060693          	mv	a3,a2
8001c6ac:	00058613          	mv	a2,a1
8001c6b0:	00078593          	mv	a1,a5
8001c6b4:	dfdff06f          	j	8001c4b0 <_strtol_l.constprop.0>

8001c6b8 <printf>:
8001c6b8:	8101a303          	lw	t1,-2032(gp) # 80029578 <_impure_ptr>
8001c6bc:	fc010113          	addi	sp,sp,-64
8001c6c0:	02c12423          	sw	a2,40(sp)
8001c6c4:	02d12623          	sw	a3,44(sp)
8001c6c8:	02b12223          	sw	a1,36(sp)
8001c6cc:	02e12823          	sw	a4,48(sp)
8001c6d0:	02f12a23          	sw	a5,52(sp)
8001c6d4:	03012c23          	sw	a6,56(sp)
8001c6d8:	03112e23          	sw	a7,60(sp)
8001c6dc:	00832583          	lw	a1,8(t1)
8001c6e0:	02410693          	addi	a3,sp,36
8001c6e4:	00050613          	mv	a2,a0
8001c6e8:	00030513          	mv	a0,t1
8001c6ec:	00112e23          	sw	ra,28(sp)
8001c6f0:	00d12623          	sw	a3,12(sp)
8001c6f4:	44d000ef          	jal	ra,8001d340 <_vfprintf_r>
8001c6f8:	01c12083          	lw	ra,28(sp)
8001c6fc:	04010113          	addi	sp,sp,64
8001c700:	00008067          	ret

8001c704 <memcmp>:
8001c704:	00300793          	li	a5,3
8001c708:	02c7fe63          	bgeu	a5,a2,8001c744 <memcmp+0x40>
8001c70c:	00b567b3          	or	a5,a0,a1
8001c710:	0037f793          	andi	a5,a5,3
8001c714:	02079463          	bnez	a5,8001c73c <memcmp+0x38>
8001c718:	00300693          	li	a3,3
8001c71c:	0140006f          	j	8001c730 <memcmp+0x2c>
8001c720:	ffc60613          	addi	a2,a2,-4
8001c724:	00450513          	addi	a0,a0,4
8001c728:	00458593          	addi	a1,a1,4
8001c72c:	00c6fc63          	bgeu	a3,a2,8001c744 <memcmp+0x40>
8001c730:	00052703          	lw	a4,0(a0)
8001c734:	0005a783          	lw	a5,0(a1)
8001c738:	fef704e3          	beq	a4,a5,8001c720 <memcmp+0x1c>
8001c73c:	fff60693          	addi	a3,a2,-1
8001c740:	00c0006f          	j	8001c74c <memcmp+0x48>
8001c744:	fff60693          	addi	a3,a2,-1
8001c748:	02060863          	beqz	a2,8001c778 <memcmp+0x74>
8001c74c:	00168693          	addi	a3,a3,1
8001c750:	00d586b3          	add	a3,a1,a3
8001c754:	0080006f          	j	8001c75c <memcmp+0x58>
8001c758:	02d58063          	beq	a1,a3,8001c778 <memcmp+0x74>
8001c75c:	00054783          	lbu	a5,0(a0)
8001c760:	0005c703          	lbu	a4,0(a1)
8001c764:	00150513          	addi	a0,a0,1
8001c768:	00158593          	addi	a1,a1,1
8001c76c:	fee786e3          	beq	a5,a4,8001c758 <memcmp+0x54>
8001c770:	40e78533          	sub	a0,a5,a4
8001c774:	00008067          	ret
8001c778:	00000513          	li	a0,0
8001c77c:	00008067          	ret

8001c780 <strcat>:
8001c780:	ff010113          	addi	sp,sp,-16
8001c784:	00812423          	sw	s0,8(sp)
8001c788:	00112623          	sw	ra,12(sp)
8001c78c:	00357793          	andi	a5,a0,3
8001c790:	00050413          	mv	s0,a0
8001c794:	04079463          	bnez	a5,8001c7dc <strcat+0x5c>
8001c798:	00052703          	lw	a4,0(a0)
8001c79c:	feff0637          	lui	a2,0xfeff0
8001c7a0:	eff60613          	addi	a2,a2,-257 # fefefeff <__bss_end+0x7ef69743>
8001c7a4:	00c707b3          	add	a5,a4,a2
8001c7a8:	808086b7          	lui	a3,0x80808
8001c7ac:	fff74713          	not	a4,a4
8001c7b0:	00e7f7b3          	and	a5,a5,a4
8001c7b4:	08068693          	addi	a3,a3,128 # 80808080 <__bss_end+0x7818c4>
8001c7b8:	00d7f7b3          	and	a5,a5,a3
8001c7bc:	02079063          	bnez	a5,8001c7dc <strcat+0x5c>
8001c7c0:	00452703          	lw	a4,4(a0)
8001c7c4:	00450513          	addi	a0,a0,4
8001c7c8:	00c707b3          	add	a5,a4,a2
8001c7cc:	fff74713          	not	a4,a4
8001c7d0:	00e7f7b3          	and	a5,a5,a4
8001c7d4:	00d7f7b3          	and	a5,a5,a3
8001c7d8:	fe0784e3          	beqz	a5,8001c7c0 <strcat+0x40>
8001c7dc:	00054783          	lbu	a5,0(a0)
8001c7e0:	00078863          	beqz	a5,8001c7f0 <strcat+0x70>
8001c7e4:	00154783          	lbu	a5,1(a0)
8001c7e8:	00150513          	addi	a0,a0,1
8001c7ec:	fe079ce3          	bnez	a5,8001c7e4 <strcat+0x64>
8001c7f0:	2a1000ef          	jal	ra,8001d290 <strcpy>
8001c7f4:	00c12083          	lw	ra,12(sp)
8001c7f8:	00040513          	mv	a0,s0
8001c7fc:	00812403          	lw	s0,8(sp)
8001c800:	01010113          	addi	sp,sp,16
8001c804:	00008067          	ret

8001c808 <strchr>:
8001c808:	0ff5f693          	zext.b	a3,a1
8001c80c:	00357793          	andi	a5,a0,3
8001c810:	0c068063          	beqz	a3,8001c8d0 <strchr+0xc8>
8001c814:	00078e63          	beqz	a5,8001c830 <strchr+0x28>
8001c818:	00054783          	lbu	a5,0(a0)
8001c81c:	0a078663          	beqz	a5,8001c8c8 <strchr+0xc0>
8001c820:	0ad78663          	beq	a5,a3,8001c8cc <strchr+0xc4>
8001c824:	00150513          	addi	a0,a0,1
8001c828:	00357793          	andi	a5,a0,3
8001c82c:	fe0796e3          	bnez	a5,8001c818 <strchr+0x10>
8001c830:	0ff5f593          	zext.b	a1,a1
8001c834:	00859793          	slli	a5,a1,0x8
8001c838:	00b787b3          	add	a5,a5,a1
8001c83c:	00052703          	lw	a4,0(a0)
8001c840:	01079313          	slli	t1,a5,0x10
8001c844:	00f36333          	or	t1,t1,a5
8001c848:	feff0837          	lui	a6,0xfeff0
8001c84c:	00e34633          	xor	a2,t1,a4
8001c850:	eff80813          	addi	a6,a6,-257 # fefefeff <__bss_end+0x7ef69743>
8001c854:	fff74793          	not	a5,a4
8001c858:	010605b3          	add	a1,a2,a6
8001c85c:	01070733          	add	a4,a4,a6
8001c860:	fff64613          	not	a2,a2
8001c864:	00e7f7b3          	and	a5,a5,a4
8001c868:	808088b7          	lui	a7,0x80808
8001c86c:	00c5f733          	and	a4,a1,a2
8001c870:	00e7e7b3          	or	a5,a5,a4
8001c874:	08088893          	addi	a7,a7,128 # 80808080 <__bss_end+0x7818c4>
8001c878:	0117f7b3          	and	a5,a5,a7
8001c87c:	02079a63          	bnez	a5,8001c8b0 <strchr+0xa8>
8001c880:	00452703          	lw	a4,4(a0)
8001c884:	00450513          	addi	a0,a0,4
8001c888:	00674633          	xor	a2,a4,t1
8001c88c:	010707b3          	add	a5,a4,a6
8001c890:	010605b3          	add	a1,a2,a6
8001c894:	fff74713          	not	a4,a4
8001c898:	fff64613          	not	a2,a2
8001c89c:	00e7f7b3          	and	a5,a5,a4
8001c8a0:	00c5f733          	and	a4,a1,a2
8001c8a4:	00e7e7b3          	or	a5,a5,a4
8001c8a8:	0117f7b3          	and	a5,a5,a7
8001c8ac:	fc078ae3          	beqz	a5,8001c880 <strchr+0x78>
8001c8b0:	00054783          	lbu	a5,0(a0)
8001c8b4:	00078a63          	beqz	a5,8001c8c8 <strchr+0xc0>
8001c8b8:	08f68663          	beq	a3,a5,8001c944 <strchr+0x13c>
8001c8bc:	00154783          	lbu	a5,1(a0)
8001c8c0:	00150513          	addi	a0,a0,1
8001c8c4:	fe079ae3          	bnez	a5,8001c8b8 <strchr+0xb0>
8001c8c8:	00000513          	li	a0,0
8001c8cc:	00008067          	ret
8001c8d0:	00078c63          	beqz	a5,8001c8e8 <strchr+0xe0>
8001c8d4:	00054783          	lbu	a5,0(a0)
8001c8d8:	fe078ae3          	beqz	a5,8001c8cc <strchr+0xc4>
8001c8dc:	00150513          	addi	a0,a0,1
8001c8e0:	00357793          	andi	a5,a0,3
8001c8e4:	fe0798e3          	bnez	a5,8001c8d4 <strchr+0xcc>
8001c8e8:	00052703          	lw	a4,0(a0)
8001c8ec:	feff0637          	lui	a2,0xfeff0
8001c8f0:	eff60613          	addi	a2,a2,-257 # fefefeff <__bss_end+0x7ef69743>
8001c8f4:	fff74793          	not	a5,a4
8001c8f8:	808086b7          	lui	a3,0x80808
8001c8fc:	00c70733          	add	a4,a4,a2
8001c900:	00e7f7b3          	and	a5,a5,a4
8001c904:	08068693          	addi	a3,a3,128 # 80808080 <__bss_end+0x7818c4>
8001c908:	00d7f7b3          	and	a5,a5,a3
8001c90c:	02079063          	bnez	a5,8001c92c <strchr+0x124>
8001c910:	00452703          	lw	a4,4(a0)
8001c914:	00450513          	addi	a0,a0,4
8001c918:	00c707b3          	add	a5,a4,a2
8001c91c:	fff74713          	not	a4,a4
8001c920:	00e7f7b3          	and	a5,a5,a4
8001c924:	00d7f7b3          	and	a5,a5,a3
8001c928:	fe0784e3          	beqz	a5,8001c910 <strchr+0x108>
8001c92c:	00054783          	lbu	a5,0(a0)
8001c930:	f8078ee3          	beqz	a5,8001c8cc <strchr+0xc4>
8001c934:	00154783          	lbu	a5,1(a0)
8001c938:	00150513          	addi	a0,a0,1
8001c93c:	fe079ce3          	bnez	a5,8001c934 <strchr+0x12c>
8001c940:	00008067          	ret
8001c944:	00008067          	ret

8001c948 <strncmp>:
8001c948:	0c060063          	beqz	a2,8001ca08 <strncmp+0xc0>
8001c94c:	00b567b3          	or	a5,a0,a1
8001c950:	0037f793          	andi	a5,a5,3
8001c954:	06079863          	bnez	a5,8001c9c4 <strncmp+0x7c>
8001c958:	00300793          	li	a5,3
8001c95c:	06c7f463          	bgeu	a5,a2,8001c9c4 <strncmp+0x7c>
8001c960:	feff0337          	lui	t1,0xfeff0
8001c964:	808088b7          	lui	a7,0x80808
8001c968:	eff30313          	addi	t1,t1,-257 # fefefeff <__bss_end+0x7ef69743>
8001c96c:	08088893          	addi	a7,a7,128 # 80808080 <__bss_end+0x7818c4>
8001c970:	00300e13          	li	t3,3
8001c974:	01c0006f          	j	8001c990 <strncmp+0x48>
8001c978:	ffc60613          	addi	a2,a2,-4
8001c97c:	08060663          	beqz	a2,8001ca08 <strncmp+0xc0>
8001c980:	08079463          	bnez	a5,8001ca08 <strncmp+0xc0>
8001c984:	00450513          	addi	a0,a0,4
8001c988:	00458593          	addi	a1,a1,4
8001c98c:	02ce7c63          	bgeu	t3,a2,8001c9c4 <strncmp+0x7c>
8001c990:	00052703          	lw	a4,0(a0)
8001c994:	0005a683          	lw	a3,0(a1)
8001c998:	006707b3          	add	a5,a4,t1
8001c99c:	fff74813          	not	a6,a4
8001c9a0:	0107f7b3          	and	a5,a5,a6
8001c9a4:	0117f7b3          	and	a5,a5,a7
8001c9a8:	fcd708e3          	beq	a4,a3,8001c978 <strncmp+0x30>
8001c9ac:	00054703          	lbu	a4,0(a0)
8001c9b0:	0005c683          	lbu	a3,0(a1)
8001c9b4:	00050813          	mv	a6,a0
8001c9b8:	02d70c63          	beq	a4,a3,8001c9f0 <strncmp+0xa8>
8001c9bc:	40d70533          	sub	a0,a4,a3
8001c9c0:	00008067          	ret
8001c9c4:	00054703          	lbu	a4,0(a0)
8001c9c8:	0005c683          	lbu	a3,0(a1)
8001c9cc:	fee698e3          	bne	a3,a4,8001c9bc <strncmp+0x74>
8001c9d0:	00100793          	li	a5,1
8001c9d4:	02f60a63          	beq	a2,a5,8001ca08 <strncmp+0xc0>
8001c9d8:	00050813          	mv	a6,a0
8001c9dc:	0140006f          	j	8001c9f0 <strncmp+0xa8>
8001c9e0:	00054703          	lbu	a4,0(a0)
8001c9e4:	0005c683          	lbu	a3,0(a1)
8001c9e8:	fcd71ae3          	bne	a4,a3,8001c9bc <strncmp+0x74>
8001c9ec:	00078e63          	beqz	a5,8001ca08 <strncmp+0xc0>
8001c9f0:	00150513          	addi	a0,a0,1
8001c9f4:	40a607b3          	sub	a5,a2,a0
8001c9f8:	fff78793          	addi	a5,a5,-1
8001c9fc:	00158593          	addi	a1,a1,1
8001ca00:	00f807b3          	add	a5,a6,a5
8001ca04:	fc071ee3          	bnez	a4,8001c9e0 <strncmp+0x98>
8001ca08:	00000513          	li	a0,0
8001ca0c:	00008067          	ret

8001ca10 <strncpy>:
8001ca10:	00b567b3          	or	a5,a0,a1
8001ca14:	0037f793          	andi	a5,a5,3
8001ca18:	00050713          	mv	a4,a0
8001ca1c:	06079a63          	bnez	a5,8001ca90 <strncpy+0x80>
8001ca20:	00300793          	li	a5,3
8001ca24:	06c7f663          	bgeu	a5,a2,8001ca90 <strncpy+0x80>
8001ca28:	feff0337          	lui	t1,0xfeff0
8001ca2c:	808088b7          	lui	a7,0x80808
8001ca30:	eff30313          	addi	t1,t1,-257 # fefefeff <__bss_end+0x7ef69743>
8001ca34:	08088893          	addi	a7,a7,128 # 80808080 <__bss_end+0x7818c4>
8001ca38:	00300e13          	li	t3,3
8001ca3c:	0180006f          	j	8001ca54 <strncpy+0x44>
8001ca40:	00d72023          	sw	a3,0(a4)
8001ca44:	ffc60613          	addi	a2,a2,-4
8001ca48:	00470713          	addi	a4,a4,4
8001ca4c:	00458593          	addi	a1,a1,4
8001ca50:	04ce7063          	bgeu	t3,a2,8001ca90 <strncpy+0x80>
8001ca54:	0005a683          	lw	a3,0(a1)
8001ca58:	006687b3          	add	a5,a3,t1
8001ca5c:	fff6c813          	not	a6,a3
8001ca60:	0107f7b3          	and	a5,a5,a6
8001ca64:	0117f7b3          	and	a5,a5,a7
8001ca68:	fc078ce3          	beqz	a5,8001ca40 <strncpy+0x30>
8001ca6c:	00158593          	addi	a1,a1,1
8001ca70:	00170793          	addi	a5,a4,1
8001ca74:	02060463          	beqz	a2,8001ca9c <strncpy+0x8c>
8001ca78:	fff5c683          	lbu	a3,-1(a1)
8001ca7c:	fff60813          	addi	a6,a2,-1
8001ca80:	fed78fa3          	sb	a3,-1(a5)
8001ca84:	00068e63          	beqz	a3,8001caa0 <strncpy+0x90>
8001ca88:	00078713          	mv	a4,a5
8001ca8c:	00080613          	mv	a2,a6
8001ca90:	00158593          	addi	a1,a1,1
8001ca94:	00170793          	addi	a5,a4,1
8001ca98:	fe0610e3          	bnez	a2,8001ca78 <strncpy+0x68>
8001ca9c:	00008067          	ret
8001caa0:	00c70733          	add	a4,a4,a2
8001caa4:	00080a63          	beqz	a6,8001cab8 <strncpy+0xa8>
8001caa8:	00178793          	addi	a5,a5,1
8001caac:	fe078fa3          	sb	zero,-1(a5)
8001cab0:	fee79ce3          	bne	a5,a4,8001caa8 <strncpy+0x98>
8001cab4:	00008067          	ret
8001cab8:	00008067          	ret

8001cabc <strrchr>:
8001cabc:	ff010113          	addi	sp,sp,-16
8001cac0:	00812423          	sw	s0,8(sp)
8001cac4:	00912223          	sw	s1,4(sp)
8001cac8:	00112623          	sw	ra,12(sp)
8001cacc:	0ff5f713          	zext.b	a4,a1
8001cad0:	0ff5f413          	zext.b	s0,a1
8001cad4:	00050793          	mv	a5,a0
8001cad8:	00000493          	li	s1,0
8001cadc:	00071863          	bnez	a4,8001caec <strrchr+0x30>
8001cae0:	0340006f          	j	8001cb14 <strrchr+0x58>
8001cae4:	00150793          	addi	a5,a0,1
8001cae8:	00050493          	mv	s1,a0
8001caec:	00078513          	mv	a0,a5
8001caf0:	00040593          	mv	a1,s0
8001caf4:	d15ff0ef          	jal	ra,8001c808 <strchr>
8001caf8:	fe0516e3          	bnez	a0,8001cae4 <strrchr+0x28>
8001cafc:	00c12083          	lw	ra,12(sp)
8001cb00:	00812403          	lw	s0,8(sp)
8001cb04:	00048513          	mv	a0,s1
8001cb08:	00412483          	lw	s1,4(sp)
8001cb0c:	01010113          	addi	sp,sp,16
8001cb10:	00008067          	ret
8001cb14:	00040593          	mv	a1,s0
8001cb18:	00812403          	lw	s0,8(sp)
8001cb1c:	00c12083          	lw	ra,12(sp)
8001cb20:	00412483          	lw	s1,4(sp)
8001cb24:	01010113          	addi	sp,sp,16
8001cb28:	ce1ff06f          	j	8001c808 <strchr>

8001cb2c <critical_factorization>:
8001cb2c:	00100793          	li	a5,1
8001cb30:	10b7f863          	bgeu	a5,a1,8001cc40 <critical_factorization+0x114>
8001cb34:	00100e13          	li	t3,1
8001cb38:	00100693          	li	a3,1
8001cb3c:	00000813          	li	a6,0
8001cb40:	fff00313          	li	t1,-1
8001cb44:	0180006f          	j	8001cb5c <critical_factorization+0x30>
8001cb48:	40678e33          	sub	t3,a5,t1
8001cb4c:	00078813          	mv	a6,a5
8001cb50:	00100693          	li	a3,1
8001cb54:	00d807b3          	add	a5,a6,a3
8001cb58:	02b7fc63          	bgeu	a5,a1,8001cb90 <critical_factorization+0x64>
8001cb5c:	00650733          	add	a4,a0,t1
8001cb60:	00d70733          	add	a4,a4,a3
8001cb64:	00f508b3          	add	a7,a0,a5
8001cb68:	0008c883          	lbu	a7,0(a7)
8001cb6c:	00074703          	lbu	a4,0(a4)
8001cb70:	fce8ece3          	bltu	a7,a4,8001cb48 <critical_factorization+0x1c>
8001cb74:	08e88c63          	beq	a7,a4,8001cc0c <critical_factorization+0xe0>
8001cb78:	00080313          	mv	t1,a6
8001cb7c:	00100693          	li	a3,1
8001cb80:	00180813          	addi	a6,a6,1
8001cb84:	00d807b3          	add	a5,a6,a3
8001cb88:	00100e13          	li	t3,1
8001cb8c:	fcb7e8e3          	bltu	a5,a1,8001cb5c <critical_factorization+0x30>
8001cb90:	01c62023          	sw	t3,0(a2)
8001cb94:	00100e93          	li	t4,1
8001cb98:	00100693          	li	a3,1
8001cb9c:	00000813          	li	a6,0
8001cba0:	fff00e13          	li	t3,-1
8001cba4:	00100793          	li	a5,1
8001cba8:	0180006f          	j	8001cbc0 <critical_factorization+0x94>
8001cbac:	41c78eb3          	sub	t4,a5,t3
8001cbb0:	00078813          	mv	a6,a5
8001cbb4:	00100693          	li	a3,1
8001cbb8:	00d807b3          	add	a5,a6,a3
8001cbbc:	02b7fc63          	bgeu	a5,a1,8001cbf4 <critical_factorization+0xc8>
8001cbc0:	01c50733          	add	a4,a0,t3
8001cbc4:	00d70733          	add	a4,a4,a3
8001cbc8:	00f508b3          	add	a7,a0,a5
8001cbcc:	0008c883          	lbu	a7,0(a7)
8001cbd0:	00074703          	lbu	a4,0(a4)
8001cbd4:	fd176ce3          	bltu	a4,a7,8001cbac <critical_factorization+0x80>
8001cbd8:	04e88063          	beq	a7,a4,8001cc18 <critical_factorization+0xec>
8001cbdc:	00080e13          	mv	t3,a6
8001cbe0:	00100693          	li	a3,1
8001cbe4:	00180813          	addi	a6,a6,1
8001cbe8:	00d807b3          	add	a5,a6,a3
8001cbec:	00100e93          	li	t4,1
8001cbf0:	fcb7e8e3          	bltu	a5,a1,8001cbc0 <critical_factorization+0x94>
8001cbf4:	001e0e13          	addi	t3,t3,1
8001cbf8:	00130513          	addi	a0,t1,1
8001cbfc:	04ae6063          	bltu	t3,a0,8001cc3c <critical_factorization+0x110>
8001cc00:	01d62023          	sw	t4,0(a2)
8001cc04:	000e0513          	mv	a0,t3
8001cc08:	00008067          	ret
8001cc0c:	01c68c63          	beq	a3,t3,8001cc24 <critical_factorization+0xf8>
8001cc10:	00168693          	addi	a3,a3,1
8001cc14:	f41ff06f          	j	8001cb54 <critical_factorization+0x28>
8001cc18:	01d68c63          	beq	a3,t4,8001cc30 <critical_factorization+0x104>
8001cc1c:	00168693          	addi	a3,a3,1
8001cc20:	f99ff06f          	j	8001cbb8 <critical_factorization+0x8c>
8001cc24:	00d80833          	add	a6,a6,a3
8001cc28:	00100693          	li	a3,1
8001cc2c:	f29ff06f          	j	8001cb54 <critical_factorization+0x28>
8001cc30:	00d80833          	add	a6,a6,a3
8001cc34:	00100693          	li	a3,1
8001cc38:	f81ff06f          	j	8001cbb8 <critical_factorization+0x8c>
8001cc3c:	00008067          	ret
8001cc40:	00100e93          	li	t4,1
8001cc44:	00000e13          	li	t3,0
8001cc48:	01d62023          	sw	t4,0(a2)
8001cc4c:	000e0513          	mv	a0,t3
8001cc50:	00008067          	ret

8001cc54 <two_way_long_needle>:
8001cc54:	bb010113          	addi	sp,sp,-1104
8001cc58:	43612823          	sw	s6,1072(sp)
8001cc5c:	00060b13          	mv	s6,a2
8001cc60:	44912223          	sw	s1,1092(sp)
8001cc64:	43812423          	sw	s8,1064(sp)
8001cc68:	00050493          	mv	s1,a0
8001cc6c:	00058c13          	mv	s8,a1
8001cc70:	00c10613          	addi	a2,sp,12
8001cc74:	00068593          	mv	a1,a3
8001cc78:	000b0513          	mv	a0,s6
8001cc7c:	43712623          	sw	s7,1068(sp)
8001cc80:	43912223          	sw	s9,1060(sp)
8001cc84:	44112623          	sw	ra,1100(sp)
8001cc88:	44812423          	sw	s0,1096(sp)
8001cc8c:	45212023          	sw	s2,1088(sp)
8001cc90:	43312e23          	sw	s3,1084(sp)
8001cc94:	43412c23          	sw	s4,1080(sp)
8001cc98:	43512a23          	sw	s5,1076(sp)
8001cc9c:	43a12023          	sw	s10,1056(sp)
8001cca0:	41b12e23          	sw	s11,1052(sp)
8001cca4:	00068b93          	mv	s7,a3
8001cca8:	e85ff0ef          	jal	ra,8001cb2c <critical_factorization>
8001ccac:	00050c93          	mv	s9,a0
8001ccb0:	01010793          	addi	a5,sp,16
8001ccb4:	41010713          	addi	a4,sp,1040
8001ccb8:	0177a023          	sw	s7,0(a5)
8001ccbc:	00478793          	addi	a5,a5,4
8001ccc0:	fee79ce3          	bne	a5,a4,8001ccb8 <two_way_long_needle+0x64>
8001ccc4:	020b8a63          	beqz	s7,8001ccf8 <two_way_long_needle+0xa4>
8001ccc8:	fffb8613          	addi	a2,s7,-1
8001cccc:	016b85b3          	add	a1,s7,s6
8001ccd0:	000b0713          	mv	a4,s6
8001ccd4:	00cb0633          	add	a2,s6,a2
8001ccd8:	00074783          	lbu	a5,0(a4)
8001ccdc:	40e606b3          	sub	a3,a2,a4
8001cce0:	00170713          	addi	a4,a4,1
8001cce4:	00279793          	slli	a5,a5,0x2
8001cce8:	41078793          	addi	a5,a5,1040
8001ccec:	002787b3          	add	a5,a5,sp
8001ccf0:	c0d7a023          	sw	a3,-1024(a5)
8001ccf4:	feb712e3          	bne	a4,a1,8001ccd8 <two_way_long_needle+0x84>
8001ccf8:	00c12903          	lw	s2,12(sp)
8001ccfc:	000c8613          	mv	a2,s9
8001cd00:	000b0513          	mv	a0,s6
8001cd04:	012b05b3          	add	a1,s6,s2
8001cd08:	9fdff0ef          	jal	ra,8001c704 <memcmp>
8001cd0c:	14051863          	bnez	a0,8001ce5c <two_way_long_needle+0x208>
8001cd10:	000019b7          	lui	s3,0x1
8001cd14:	80098993          	addi	s3,s3,-2048 # 800 <__STACKSIZE__-0x3800>
8001cd18:	00100a13          	li	s4,1
8001cd1c:	00000d93          	li	s11,0
8001cd20:	00000413          	li	s0,0
8001cd24:	417c06b3          	sub	a3,s8,s7
8001cd28:	013be9b3          	or	s3,s7,s3
8001cd2c:	fffb8d13          	addi	s10,s7,-1
8001cd30:	419a0a33          	sub	s4,s4,s9
8001cd34:	412b8ab3          	sub	s5,s7,s2
8001cd38:	0286ee63          	bltu	a3,s0,8001cd74 <two_way_long_needle+0x120>
8001cd3c:	00848633          	add	a2,s1,s0
8001cd40:	01a607b3          	add	a5,a2,s10
8001cd44:	0007c783          	lbu	a5,0(a5)
8001cd48:	00279793          	slli	a5,a5,0x2
8001cd4c:	41078793          	addi	a5,a5,1040
8001cd50:	002787b3          	add	a5,a5,sp
8001cd54:	c007a783          	lw	a5,-1024(a5)
8001cd58:	06078a63          	beqz	a5,8001cdcc <two_way_long_needle+0x178>
8001cd5c:	000d8663          	beqz	s11,8001cd68 <two_way_long_needle+0x114>
8001cd60:	0127f463          	bgeu	a5,s2,8001cd68 <two_way_long_needle+0x114>
8001cd64:	000a8793          	mv	a5,s5
8001cd68:	00f40433          	add	s0,s0,a5
8001cd6c:	00000d93          	li	s11,0
8001cd70:	fc86f6e3          	bgeu	a3,s0,8001cd3c <two_way_long_needle+0xe8>
8001cd74:	01848533          	add	a0,s1,s8
8001cd78:	00098593          	mv	a1,s3
8001cd7c:	e20f40ef          	jal	ra,8001139c <strnlen>
8001cd80:	00ac0c33          	add	s8,s8,a0
8001cd84:	417c06b3          	sub	a3,s8,s7
8001cd88:	fa86fae3          	bgeu	a3,s0,8001cd3c <two_way_long_needle+0xe8>
8001cd8c:	00000513          	li	a0,0
8001cd90:	44c12083          	lw	ra,1100(sp)
8001cd94:	44812403          	lw	s0,1096(sp)
8001cd98:	44412483          	lw	s1,1092(sp)
8001cd9c:	44012903          	lw	s2,1088(sp)
8001cda0:	43c12983          	lw	s3,1084(sp)
8001cda4:	43812a03          	lw	s4,1080(sp)
8001cda8:	43412a83          	lw	s5,1076(sp)
8001cdac:	43012b03          	lw	s6,1072(sp)
8001cdb0:	42c12b83          	lw	s7,1068(sp)
8001cdb4:	42812c03          	lw	s8,1064(sp)
8001cdb8:	42412c83          	lw	s9,1060(sp)
8001cdbc:	42012d03          	lw	s10,1056(sp)
8001cdc0:	41c12d83          	lw	s11,1052(sp)
8001cdc4:	45010113          	addi	sp,sp,1104
8001cdc8:	00008067          	ret
8001cdcc:	000d8713          	mv	a4,s11
8001cdd0:	019df463          	bgeu	s11,s9,8001cdd8 <two_way_long_needle+0x184>
8001cdd4:	000c8713          	mv	a4,s9
8001cdd8:	01a76863          	bltu	a4,s10,8001cde8 <two_way_long_needle+0x194>
8001cddc:	0380006f          	j	8001ce14 <two_way_long_needle+0x1c0>
8001cde0:	00170713          	addi	a4,a4,1
8001cde4:	02ed0863          	beq	s10,a4,8001ce14 <two_way_long_needle+0x1c0>
8001cde8:	00e407b3          	add	a5,s0,a4
8001cdec:	00eb0833          	add	a6,s6,a4
8001cdf0:	00f487b3          	add	a5,s1,a5
8001cdf4:	00084803          	lbu	a6,0(a6)
8001cdf8:	0007c783          	lbu	a5,0(a5)
8001cdfc:	fef802e3          	beq	a6,a5,8001cde0 <two_way_long_needle+0x18c>
8001ce00:	01a77a63          	bgeu	a4,s10,8001ce14 <two_way_long_needle+0x1c0>
8001ce04:	008a0433          	add	s0,s4,s0
8001ce08:	00e40433          	add	s0,s0,a4
8001ce0c:	00000d93          	li	s11,0
8001ce10:	f29ff06f          	j	8001cd38 <two_way_long_needle+0xe4>
8001ce14:	fffc8713          	addi	a4,s9,-1
8001ce18:	019de863          	bltu	s11,s9,8001ce28 <two_way_long_needle+0x1d4>
8001ce1c:	1580006f          	j	8001cf74 <two_way_long_needle+0x320>
8001ce20:	02ed8463          	beq	s11,a4,8001ce48 <two_way_long_needle+0x1f4>
8001ce24:	00050713          	mv	a4,a0
8001ce28:	00e407b3          	add	a5,s0,a4
8001ce2c:	00eb05b3          	add	a1,s6,a4
8001ce30:	00f487b3          	add	a5,s1,a5
8001ce34:	0005c583          	lbu	a1,0(a1)
8001ce38:	0007c783          	lbu	a5,0(a5)
8001ce3c:	fff70513          	addi	a0,a4,-1
8001ce40:	fef580e3          	beq	a1,a5,8001ce20 <two_way_long_needle+0x1cc>
8001ce44:	00170713          	addi	a4,a4,1
8001ce48:	001d8d93          	addi	s11,s11,1
8001ce4c:	13b76063          	bltu	a4,s11,8001cf6c <two_way_long_needle+0x318>
8001ce50:	01240433          	add	s0,s0,s2
8001ce54:	000a8d93          	mv	s11,s5
8001ce58:	ee1ff06f          	j	8001cd38 <two_way_long_needle+0xe4>
8001ce5c:	419b89b3          	sub	s3,s7,s9
8001ce60:	1199e263          	bltu	s3,s9,8001cf64 <two_way_long_needle+0x310>
8001ce64:	00001437          	lui	s0,0x1
8001ce68:	00198993          	addi	s3,s3,1
8001ce6c:	80040413          	addi	s0,s0,-2048 # 800 <__STACKSIZE__-0x3800>
8001ce70:	00100913          	li	s2,1
8001ce74:	01312623          	sw	s3,12(sp)
8001ce78:	00000a13          	li	s4,0
8001ce7c:	417c06b3          	sub	a3,s8,s7
8001ce80:	008be433          	or	s0,s7,s0
8001ce84:	fffb8a93          	addi	s5,s7,-1
8001ce88:	41990933          	sub	s2,s2,s9
8001ce8c:	fff00d13          	li	s10,-1
8001ce90:	0346e663          	bltu	a3,s4,8001cebc <two_way_long_needle+0x268>
8001ce94:	01448533          	add	a0,s1,s4
8001ce98:	015507b3          	add	a5,a0,s5
8001ce9c:	0007c783          	lbu	a5,0(a5)
8001cea0:	00279793          	slli	a5,a5,0x2
8001cea4:	41078793          	addi	a5,a5,1040
8001cea8:	002787b3          	add	a5,a5,sp
8001ceac:	c007a783          	lw	a5,-1024(a5)
8001ceb0:	04078263          	beqz	a5,8001cef4 <two_way_long_needle+0x2a0>
8001ceb4:	00fa0a33          	add	s4,s4,a5
8001ceb8:	fd46fee3          	bgeu	a3,s4,8001ce94 <two_way_long_needle+0x240>
8001cebc:	01848533          	add	a0,s1,s8
8001cec0:	00040593          	mv	a1,s0
8001cec4:	cd8f40ef          	jal	ra,8001139c <strnlen>
8001cec8:	00ac0c33          	add	s8,s8,a0
8001cecc:	417c06b3          	sub	a3,s8,s7
8001ced0:	eb46eee3          	bltu	a3,s4,8001cd8c <two_way_long_needle+0x138>
8001ced4:	01448533          	add	a0,s1,s4
8001ced8:	015507b3          	add	a5,a0,s5
8001cedc:	0007c783          	lbu	a5,0(a5)
8001cee0:	00279793          	slli	a5,a5,0x2
8001cee4:	41078793          	addi	a5,a5,1040
8001cee8:	002787b3          	add	a5,a5,sp
8001ceec:	c007a783          	lw	a5,-1024(a5)
8001cef0:	fc0792e3          	bnez	a5,8001ceb4 <two_way_long_needle+0x260>
8001cef4:	000c8713          	mv	a4,s9
8001cef8:	015ce863          	bltu	s9,s5,8001cf08 <two_way_long_needle+0x2b4>
8001cefc:	0340006f          	j	8001cf30 <two_way_long_needle+0x2dc>
8001cf00:	00170713          	addi	a4,a4,1
8001cf04:	03570663          	beq	a4,s5,8001cf30 <two_way_long_needle+0x2dc>
8001cf08:	00ea07b3          	add	a5,s4,a4
8001cf0c:	00eb05b3          	add	a1,s6,a4
8001cf10:	00f487b3          	add	a5,s1,a5
8001cf14:	0005c603          	lbu	a2,0(a1)
8001cf18:	0007c783          	lbu	a5,0(a5)
8001cf1c:	fef602e3          	beq	a2,a5,8001cf00 <two_way_long_needle+0x2ac>
8001cf20:	01577863          	bgeu	a4,s5,8001cf30 <two_way_long_needle+0x2dc>
8001cf24:	01490a33          	add	s4,s2,s4
8001cf28:	00ea0a33          	add	s4,s4,a4
8001cf2c:	f65ff06f          	j	8001ce90 <two_way_long_needle+0x23c>
8001cf30:	fffc8793          	addi	a5,s9,-1
8001cf34:	01a79663          	bne	a5,s10,8001cf40 <two_way_long_needle+0x2ec>
8001cf38:	e59ff06f          	j	8001cd90 <two_way_long_needle+0x13c>
8001cf3c:	e5a78ae3          	beq	a5,s10,8001cd90 <two_way_long_needle+0x13c>
8001cf40:	00fa0733          	add	a4,s4,a5
8001cf44:	00fb0633          	add	a2,s6,a5
8001cf48:	00e48733          	add	a4,s1,a4
8001cf4c:	00064603          	lbu	a2,0(a2)
8001cf50:	00074703          	lbu	a4,0(a4)
8001cf54:	fff78793          	addi	a5,a5,-1
8001cf58:	fee602e3          	beq	a2,a4,8001cf3c <two_way_long_needle+0x2e8>
8001cf5c:	013a0a33          	add	s4,s4,s3
8001cf60:	f31ff06f          	j	8001ce90 <two_way_long_needle+0x23c>
8001cf64:	000c8993          	mv	s3,s9
8001cf68:	efdff06f          	j	8001ce64 <two_way_long_needle+0x210>
8001cf6c:	00060513          	mv	a0,a2
8001cf70:	e21ff06f          	j	8001cd90 <two_way_long_needle+0x13c>
8001cf74:	000c8713          	mv	a4,s9
8001cf78:	ed1ff06f          	j	8001ce48 <two_way_long_needle+0x1f4>

8001cf7c <strstr>:
8001cf7c:	fa010113          	addi	sp,sp,-96
8001cf80:	04812c23          	sw	s0,88(sp)
8001cf84:	04912a23          	sw	s1,84(sp)
8001cf88:	04112e23          	sw	ra,92(sp)
8001cf8c:	05212823          	sw	s2,80(sp)
8001cf90:	05312623          	sw	s3,76(sp)
8001cf94:	05412423          	sw	s4,72(sp)
8001cf98:	00058493          	mv	s1,a1
8001cf9c:	0005c583          	lbu	a1,0(a1)
8001cfa0:	00050413          	mv	s0,a0
8001cfa4:	0e058863          	beqz	a1,8001d094 <strstr+0x118>
8001cfa8:	0014c603          	lbu	a2,1(s1)
8001cfac:	1a060c63          	beqz	a2,8001d164 <strstr+0x1e8>
8001cfb0:	0024c703          	lbu	a4,2(s1)
8001cfb4:	10070263          	beqz	a4,8001d0b8 <strstr+0x13c>
8001cfb8:	0034c503          	lbu	a0,3(s1)
8001cfbc:	1c050863          	beqz	a0,8001d18c <strstr+0x210>
8001cfc0:	0044c783          	lbu	a5,4(s1)
8001cfc4:	12078463          	beqz	a5,8001d0ec <strstr+0x170>
8001cfc8:	00048513          	mv	a0,s1
8001cfcc:	238000ef          	jal	ra,8001d204 <strlen>
8001cfd0:	00050913          	mv	s2,a0
8001cfd4:	20056593          	ori	a1,a0,512
8001cfd8:	00040513          	mv	a0,s0
8001cfdc:	bc0f40ef          	jal	ra,8001139c <strnlen>
8001cfe0:	15256a63          	bltu	a0,s2,8001d134 <strstr+0x1b8>
8001cfe4:	0fe00793          	li	a5,254
8001cfe8:	1f27e663          	bltu	a5,s2,8001d1d4 <strstr+0x258>
8001cfec:	412509b3          	sub	s3,a0,s2
8001cff0:	04000613          	li	a2,64
8001cff4:	00190593          	addi	a1,s2,1
8001cff8:	00010513          	mv	a0,sp
8001cffc:	013409b3          	add	s3,s0,s3
8001d000:	9f4e30ef          	jal	ra,800001f4 <memset>
8001d004:	02090a63          	beqz	s2,8001d038 <strstr+0xbc>
8001d008:	0ff97613          	zext.b	a2,s2
8001d00c:	00048713          	mv	a4,s1
8001d010:	009905b3          	add	a1,s2,s1
8001d014:	00c48633          	add	a2,s1,a2
8001d018:	00074783          	lbu	a5,0(a4)
8001d01c:	40e606b3          	sub	a3,a2,a4
8001d020:	00170713          	addi	a4,a4,1
8001d024:	03f7f793          	andi	a5,a5,63
8001d028:	04078793          	addi	a5,a5,64
8001d02c:	002787b3          	add	a5,a5,sp
8001d030:	fcd78023          	sb	a3,-64(a5)
8001d034:	fee592e3          	bne	a1,a4,8001d018 <strstr+0x9c>
8001d038:	fff40413          	addi	s0,s0,-1
8001d03c:	012407b3          	add	a5,s0,s2
8001d040:	0007c783          	lbu	a5,0(a5)
8001d044:	03f7f793          	andi	a5,a5,63
8001d048:	04078793          	addi	a5,a5,64
8001d04c:	002787b3          	add	a5,a5,sp
8001d050:	fc07c783          	lbu	a5,-64(a5)
8001d054:	00f40433          	add	s0,s0,a5
8001d058:	0089f863          	bgeu	s3,s0,8001d068 <strstr+0xec>
8001d05c:	0e00006f          	j	8001d13c <strstr+0x1c0>
8001d060:	01440433          	add	s0,s0,s4
8001d064:	0c89ec63          	bltu	s3,s0,8001d13c <strstr+0x1c0>
8001d068:	012407b3          	add	a5,s0,s2
8001d06c:	0007c783          	lbu	a5,0(a5)
8001d070:	00040513          	mv	a0,s0
8001d074:	00090613          	mv	a2,s2
8001d078:	03f7f793          	andi	a5,a5,63
8001d07c:	04078793          	addi	a5,a5,64
8001d080:	002787b3          	add	a5,a5,sp
8001d084:	00048593          	mv	a1,s1
8001d088:	fc07ca03          	lbu	s4,-64(a5)
8001d08c:	e78ff0ef          	jal	ra,8001c704 <memcmp>
8001d090:	fc0518e3          	bnez	a0,8001d060 <strstr+0xe4>
8001d094:	05c12083          	lw	ra,92(sp)
8001d098:	00040513          	mv	a0,s0
8001d09c:	05812403          	lw	s0,88(sp)
8001d0a0:	05412483          	lw	s1,84(sp)
8001d0a4:	05012903          	lw	s2,80(sp)
8001d0a8:	04c12983          	lw	s3,76(sp)
8001d0ac:	04812a03          	lw	s4,72(sp)
8001d0b0:	06010113          	addi	sp,sp,96
8001d0b4:	00008067          	ret
8001d0b8:	00054703          	lbu	a4,0(a0)
8001d0bc:	01059593          	slli	a1,a1,0x10
8001d0c0:	00c5e5b3          	or	a1,a1,a2
8001d0c4:	00000793          	li	a5,0
8001d0c8:	06070663          	beqz	a4,8001d134 <strstr+0x1b8>
8001d0cc:	01079793          	slli	a5,a5,0x10
8001d0d0:	00040693          	mv	a3,s0
8001d0d4:	00f767b3          	or	a5,a4,a5
8001d0d8:	00140413          	addi	s0,s0,1
8001d0dc:	00044703          	lbu	a4,0(s0)
8001d0e0:	fef594e3          	bne	a1,a5,8001d0c8 <strstr+0x14c>
8001d0e4:	fff68413          	addi	s0,a3,-1
8001d0e8:	fadff06f          	j	8001d094 <strstr+0x118>
8001d0ec:	01859793          	slli	a5,a1,0x18
8001d0f0:	01061613          	slli	a2,a2,0x10
8001d0f4:	00044683          	lbu	a3,0(s0)
8001d0f8:	00c7e7b3          	or	a5,a5,a2
8001d0fc:	00a7e7b3          	or	a5,a5,a0
8001d100:	00871713          	slli	a4,a4,0x8
8001d104:	00e7e7b3          	or	a5,a5,a4
8001d108:	02068663          	beqz	a3,8001d134 <strstr+0x1b8>
8001d10c:	00000713          	li	a4,0
8001d110:	0080006f          	j	8001d118 <strstr+0x19c>
8001d114:	06e78863          	beq	a5,a4,8001d184 <strstr+0x208>
8001d118:	00040613          	mv	a2,s0
8001d11c:	00871713          	slli	a4,a4,0x8
8001d120:	00140413          	addi	s0,s0,1
8001d124:	00e6e733          	or	a4,a3,a4
8001d128:	00044683          	lbu	a3,0(s0)
8001d12c:	fe0694e3          	bnez	a3,8001d114 <strstr+0x198>
8001d130:	04e78a63          	beq	a5,a4,8001d184 <strstr+0x208>
8001d134:	00000413          	li	s0,0
8001d138:	f5dff06f          	j	8001d094 <strstr+0x118>
8001d13c:	01298533          	add	a0,s3,s2
8001d140:	00054783          	lbu	a5,0(a0)
8001d144:	fe0788e3          	beqz	a5,8001d134 <strstr+0x1b8>
8001d148:	000015b7          	lui	a1,0x1
8001d14c:	80058593          	addi	a1,a1,-2048 # 800 <__STACKSIZE__-0x3800>
8001d150:	a4cf40ef          	jal	ra,8001139c <strnlen>
8001d154:	00a989b3          	add	s3,s3,a0
8001d158:	ee89f0e3          	bgeu	s3,s0,8001d038 <strstr+0xbc>
8001d15c:	00000413          	li	s0,0
8001d160:	f35ff06f          	j	8001d094 <strstr+0x118>
8001d164:	05812403          	lw	s0,88(sp)
8001d168:	05c12083          	lw	ra,92(sp)
8001d16c:	05412483          	lw	s1,84(sp)
8001d170:	05012903          	lw	s2,80(sp)
8001d174:	04c12983          	lw	s3,76(sp)
8001d178:	04812a03          	lw	s4,72(sp)
8001d17c:	06010113          	addi	sp,sp,96
8001d180:	e88ff06f          	j	8001c808 <strchr>
8001d184:	ffd60413          	addi	s0,a2,-3
8001d188:	f0dff06f          	j	8001d094 <strstr+0x118>
8001d18c:	00044683          	lbu	a3,0(s0)
8001d190:	01859793          	slli	a5,a1,0x18
8001d194:	01061613          	slli	a2,a2,0x10
8001d198:	00c7e7b3          	or	a5,a5,a2
8001d19c:	00871713          	slli	a4,a4,0x8
8001d1a0:	00e7e7b3          	or	a5,a5,a4
8001d1a4:	f80688e3          	beqz	a3,8001d134 <strstr+0x1b8>
8001d1a8:	00000713          	li	a4,0
8001d1ac:	0080006f          	j	8001d1b4 <strstr+0x238>
8001d1b0:	f80682e3          	beqz	a3,8001d134 <strstr+0x1b8>
8001d1b4:	00e6e733          	or	a4,a3,a4
8001d1b8:	00040613          	mv	a2,s0
8001d1bc:	00871713          	slli	a4,a4,0x8
8001d1c0:	00140413          	addi	s0,s0,1
8001d1c4:	00044683          	lbu	a3,0(s0)
8001d1c8:	fee794e3          	bne	a5,a4,8001d1b0 <strstr+0x234>
8001d1cc:	ffe60413          	addi	s0,a2,-2
8001d1d0:	ec5ff06f          	j	8001d094 <strstr+0x118>
8001d1d4:	00050593          	mv	a1,a0
8001d1d8:	00040513          	mv	a0,s0
8001d1dc:	05812403          	lw	s0,88(sp)
8001d1e0:	05c12083          	lw	ra,92(sp)
8001d1e4:	04c12983          	lw	s3,76(sp)
8001d1e8:	04812a03          	lw	s4,72(sp)
8001d1ec:	00090693          	mv	a3,s2
8001d1f0:	00048613          	mv	a2,s1
8001d1f4:	05012903          	lw	s2,80(sp)
8001d1f8:	05412483          	lw	s1,84(sp)
8001d1fc:	06010113          	addi	sp,sp,96
8001d200:	a55ff06f          	j	8001cc54 <two_way_long_needle>

8001d204 <strlen>:
8001d204:	00357793          	andi	a5,a0,3
8001d208:	00050713          	mv	a4,a0
8001d20c:	04079c63          	bnez	a5,8001d264 <strlen+0x60>
8001d210:	7f7f86b7          	lui	a3,0x7f7f8
8001d214:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__STACKSIZE__+0x7f7f3f7f>
8001d218:	fff00593          	li	a1,-1
8001d21c:	00072603          	lw	a2,0(a4)
8001d220:	00470713          	addi	a4,a4,4
8001d224:	00d677b3          	and	a5,a2,a3
8001d228:	00d787b3          	add	a5,a5,a3
8001d22c:	00c7e7b3          	or	a5,a5,a2
8001d230:	00d7e7b3          	or	a5,a5,a3
8001d234:	feb784e3          	beq	a5,a1,8001d21c <strlen+0x18>
8001d238:	ffc74683          	lbu	a3,-4(a4)
8001d23c:	40a707b3          	sub	a5,a4,a0
8001d240:	04068463          	beqz	a3,8001d288 <strlen+0x84>
8001d244:	ffd74683          	lbu	a3,-3(a4)
8001d248:	02068c63          	beqz	a3,8001d280 <strlen+0x7c>
8001d24c:	ffe74503          	lbu	a0,-2(a4)
8001d250:	00a03533          	snez	a0,a0
8001d254:	00f50533          	add	a0,a0,a5
8001d258:	ffe50513          	addi	a0,a0,-2
8001d25c:	00008067          	ret
8001d260:	fa0688e3          	beqz	a3,8001d210 <strlen+0xc>
8001d264:	00074783          	lbu	a5,0(a4)
8001d268:	00170713          	addi	a4,a4,1
8001d26c:	00377693          	andi	a3,a4,3
8001d270:	fe0798e3          	bnez	a5,8001d260 <strlen+0x5c>
8001d274:	40a70733          	sub	a4,a4,a0
8001d278:	fff70513          	addi	a0,a4,-1
8001d27c:	00008067          	ret
8001d280:	ffd78513          	addi	a0,a5,-3
8001d284:	00008067          	ret
8001d288:	ffc78513          	addi	a0,a5,-4
8001d28c:	00008067          	ret

8001d290 <strcpy>:
8001d290:	00b567b3          	or	a5,a0,a1
8001d294:	0037f793          	andi	a5,a5,3
8001d298:	08079263          	bnez	a5,8001d31c <strcpy+0x8c>
8001d29c:	0005a703          	lw	a4,0(a1)
8001d2a0:	7f7f86b7          	lui	a3,0x7f7f8
8001d2a4:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__STACKSIZE__+0x7f7f3f7f>
8001d2a8:	00d777b3          	and	a5,a4,a3
8001d2ac:	00d787b3          	add	a5,a5,a3
8001d2b0:	00e7e7b3          	or	a5,a5,a4
8001d2b4:	00d7e7b3          	or	a5,a5,a3
8001d2b8:	fff00613          	li	a2,-1
8001d2bc:	06c79e63          	bne	a5,a2,8001d338 <strcpy+0xa8>
8001d2c0:	00050613          	mv	a2,a0
8001d2c4:	fff00813          	li	a6,-1
8001d2c8:	00e62023          	sw	a4,0(a2)
8001d2cc:	0045a703          	lw	a4,4(a1)
8001d2d0:	00458593          	addi	a1,a1,4
8001d2d4:	00460613          	addi	a2,a2,4
8001d2d8:	00d777b3          	and	a5,a4,a3
8001d2dc:	00d787b3          	add	a5,a5,a3
8001d2e0:	00e7e7b3          	or	a5,a5,a4
8001d2e4:	00d7e7b3          	or	a5,a5,a3
8001d2e8:	ff0780e3          	beq	a5,a6,8001d2c8 <strcpy+0x38>
8001d2ec:	0005c783          	lbu	a5,0(a1)
8001d2f0:	0015c703          	lbu	a4,1(a1)
8001d2f4:	0025c683          	lbu	a3,2(a1)
8001d2f8:	00f60023          	sb	a5,0(a2)
8001d2fc:	00078a63          	beqz	a5,8001d310 <strcpy+0x80>
8001d300:	00e600a3          	sb	a4,1(a2)
8001d304:	00070663          	beqz	a4,8001d310 <strcpy+0x80>
8001d308:	00d60123          	sb	a3,2(a2)
8001d30c:	00069463          	bnez	a3,8001d314 <strcpy+0x84>
8001d310:	00008067          	ret
8001d314:	000601a3          	sb	zero,3(a2)
8001d318:	00008067          	ret
8001d31c:	00050793          	mv	a5,a0
8001d320:	0005c703          	lbu	a4,0(a1)
8001d324:	00178793          	addi	a5,a5,1
8001d328:	00158593          	addi	a1,a1,1
8001d32c:	fee78fa3          	sb	a4,-1(a5)
8001d330:	fe0718e3          	bnez	a4,8001d320 <strcpy+0x90>
8001d334:	00008067          	ret
8001d338:	00050613          	mv	a2,a0
8001d33c:	fb1ff06f          	j	8001d2ec <strcpy+0x5c>

8001d340 <_vfprintf_r>:
8001d340:	e3010113          	addi	sp,sp,-464
8001d344:	1c112623          	sw	ra,460(sp)
8001d348:	1c812423          	sw	s0,456(sp)
8001d34c:	1d212023          	sw	s2,448(sp)
8001d350:	1b712623          	sw	s7,428(sp)
8001d354:	00058913          	mv	s2,a1
8001d358:	00060b93          	mv	s7,a2
8001d35c:	00d12a23          	sw	a3,20(sp)
8001d360:	1c912223          	sw	s1,452(sp)
8001d364:	1b312e23          	sw	s3,444(sp)
8001d368:	1b412c23          	sw	s4,440(sp)
8001d36c:	1b512a23          	sw	s5,436(sp)
8001d370:	1b612823          	sw	s6,432(sp)
8001d374:	1b812423          	sw	s8,424(sp)
8001d378:	1b912223          	sw	s9,420(sp)
8001d37c:	1ba12023          	sw	s10,416(sp)
8001d380:	19b12e23          	sw	s11,412(sp)
8001d384:	00050413          	mv	s0,a0
8001d388:	00a12423          	sw	a0,8(sp)
8001d38c:	599040ef          	jal	ra,80022124 <_localeconv_r>
8001d390:	00052703          	lw	a4,0(a0)
8001d394:	00070513          	mv	a0,a4
8001d398:	02e12823          	sw	a4,48(sp)
8001d39c:	e69ff0ef          	jal	ra,8001d204 <strlen>
8001d3a0:	02a12623          	sw	a0,44(sp)
8001d3a4:	0c012823          	sw	zero,208(sp)
8001d3a8:	0c012a23          	sw	zero,212(sp)
8001d3ac:	0c012c23          	sw	zero,216(sp)
8001d3b0:	0c012e23          	sw	zero,220(sp)
8001d3b4:	00040863          	beqz	s0,8001d3c4 <_vfprintf_r+0x84>
8001d3b8:	03442703          	lw	a4,52(s0)
8001d3bc:	00071463          	bnez	a4,8001d3c4 <_vfprintf_r+0x84>
8001d3c0:	7ac0106f          	j	8001eb6c <_vfprintf_r+0x182c>
8001d3c4:	00c91703          	lh	a4,12(s2)
8001d3c8:	01271693          	slli	a3,a4,0x12
8001d3cc:	0206c663          	bltz	a3,8001d3f8 <_vfprintf_r+0xb8>
8001d3d0:	06492683          	lw	a3,100(s2)
8001d3d4:	00002637          	lui	a2,0x2
8001d3d8:	00c76733          	or	a4,a4,a2
8001d3dc:	ffffe637          	lui	a2,0xffffe
8001d3e0:	01071713          	slli	a4,a4,0x10
8001d3e4:	fff60613          	addi	a2,a2,-1 # ffffdfff <__bss_end+0x7ff77843>
8001d3e8:	41075713          	srai	a4,a4,0x10
8001d3ec:	00c6f6b3          	and	a3,a3,a2
8001d3f0:	00e91623          	sh	a4,12(s2)
8001d3f4:	06d92223          	sw	a3,100(s2)
8001d3f8:	00877693          	andi	a3,a4,8
8001d3fc:	2e068463          	beqz	a3,8001d6e4 <_vfprintf_r+0x3a4>
8001d400:	01092683          	lw	a3,16(s2)
8001d404:	2e068063          	beqz	a3,8001d6e4 <_vfprintf_r+0x3a4>
8001d408:	01a77713          	andi	a4,a4,26
8001d40c:	00a00693          	li	a3,10
8001d410:	2ed70c63          	beq	a4,a3,8001d708 <_vfprintf_r+0x3c8>
8001d414:	80029737          	lui	a4,0x80029
8001d418:	000b8c93          	mv	s9,s7
8001d41c:	8f470793          	addi	a5,a4,-1804 # 800288f4 <_ctype_+0x148>
8001d420:	000cc703          	lbu	a4,0(s9)
8001d424:	0ec10a13          	addi	s4,sp,236
8001d428:	80029ab7          	lui	s5,0x80029
8001d42c:	0d412223          	sw	s4,196(sp)
8001d430:	0c012623          	sw	zero,204(sp)
8001d434:	0c012423          	sw	zero,200(sp)
8001d438:	02012023          	sw	zero,32(sp)
8001d43c:	02012a23          	sw	zero,52(sp)
8001d440:	02012e23          	sw	zero,60(sp)
8001d444:	02012c23          	sw	zero,56(sp)
8001d448:	04012223          	sw	zero,68(sp)
8001d44c:	04012023          	sw	zero,64(sp)
8001d450:	00012623          	sw	zero,12(sp)
8001d454:	00f12c23          	sw	a5,24(sp)
8001d458:	000a0413          	mv	s0,s4
8001d45c:	af8a8a93          	addi	s5,s5,-1288 # 80028af8 <zeroes.0>
8001d460:	22070463          	beqz	a4,8001d688 <_vfprintf_r+0x348>
8001d464:	000c8493          	mv	s1,s9
8001d468:	02500693          	li	a3,37
8001d46c:	40d70263          	beq	a4,a3,8001d870 <_vfprintf_r+0x530>
8001d470:	0014c703          	lbu	a4,1(s1)
8001d474:	00148493          	addi	s1,s1,1
8001d478:	fe071ae3          	bnez	a4,8001d46c <_vfprintf_r+0x12c>
8001d47c:	419489b3          	sub	s3,s1,s9
8001d480:	21948463          	beq	s1,s9,8001d688 <_vfprintf_r+0x348>
8001d484:	0cc12683          	lw	a3,204(sp)
8001d488:	0c812703          	lw	a4,200(sp)
8001d48c:	01942023          	sw	s9,0(s0)
8001d490:	013686b3          	add	a3,a3,s3
8001d494:	00170713          	addi	a4,a4,1
8001d498:	01342223          	sw	s3,4(s0)
8001d49c:	0cd12623          	sw	a3,204(sp)
8001d4a0:	0ce12423          	sw	a4,200(sp)
8001d4a4:	00700693          	li	a3,7
8001d4a8:	00840413          	addi	s0,s0,8
8001d4ac:	3ce6ca63          	blt	a3,a4,8001d880 <_vfprintf_r+0x540>
8001d4b0:	00c12783          	lw	a5,12(sp)
8001d4b4:	0004c703          	lbu	a4,0(s1)
8001d4b8:	013787b3          	add	a5,a5,s3
8001d4bc:	00f12623          	sw	a5,12(sp)
8001d4c0:	1c070463          	beqz	a4,8001d688 <_vfprintf_r+0x348>
8001d4c4:	0014c883          	lbu	a7,1(s1)
8001d4c8:	0a0103a3          	sb	zero,167(sp)
8001d4cc:	00148493          	addi	s1,s1,1
8001d4d0:	fff00993          	li	s3,-1
8001d4d4:	00000b13          	li	s6,0
8001d4d8:	00000d13          	li	s10,0
8001d4dc:	05a00b93          	li	s7,90
8001d4e0:	00148493          	addi	s1,s1,1
8001d4e4:	fe088793          	addi	a5,a7,-32
8001d4e8:	04fbe663          	bltu	s7,a5,8001d534 <_vfprintf_r+0x1f4>
8001d4ec:	01812703          	lw	a4,24(sp)
8001d4f0:	00279793          	slli	a5,a5,0x2
8001d4f4:	00e787b3          	add	a5,a5,a4
8001d4f8:	0007a783          	lw	a5,0(a5)
8001d4fc:	00078067          	jr	a5
8001d500:	00000b13          	li	s6,0
8001d504:	fd088793          	addi	a5,a7,-48
8001d508:	00900693          	li	a3,9
8001d50c:	0004c883          	lbu	a7,0(s1)
8001d510:	002b1713          	slli	a4,s6,0x2
8001d514:	01670b33          	add	s6,a4,s6
8001d518:	001b1b13          	slli	s6,s6,0x1
8001d51c:	01678b33          	add	s6,a5,s6
8001d520:	fd088793          	addi	a5,a7,-48
8001d524:	00148493          	addi	s1,s1,1
8001d528:	fef6f2e3          	bgeu	a3,a5,8001d50c <_vfprintf_r+0x1cc>
8001d52c:	fe088793          	addi	a5,a7,-32
8001d530:	fafbfee3          	bgeu	s7,a5,8001d4ec <_vfprintf_r+0x1ac>
8001d534:	14088a63          	beqz	a7,8001d688 <_vfprintf_r+0x348>
8001d538:	13110623          	sb	a7,300(sp)
8001d53c:	0a0103a3          	sb	zero,167(sp)
8001d540:	00100d93          	li	s11,1
8001d544:	00100b93          	li	s7,1
8001d548:	12c10c93          	addi	s9,sp,300
8001d54c:	00012823          	sw	zero,16(sp)
8001d550:	00000993          	li	s3,0
8001d554:	02012423          	sw	zero,40(sp)
8001d558:	02012223          	sw	zero,36(sp)
8001d55c:	00012e23          	sw	zero,28(sp)
8001d560:	002d7293          	andi	t0,s10,2
8001d564:	00028463          	beqz	t0,8001d56c <_vfprintf_r+0x22c>
8001d568:	002d8d93          	addi	s11,s11,2
8001d56c:	084d7f93          	andi	t6,s10,132
8001d570:	000f9663          	bnez	t6,8001d57c <_vfprintf_r+0x23c>
8001d574:	41bb0733          	sub	a4,s6,s11
8001d578:	46e04ee3          	bgtz	a4,8001e1f4 <_vfprintf_r+0xeb4>
8001d57c:	0a714703          	lbu	a4,167(sp)
8001d580:	02070c63          	beqz	a4,8001d5b8 <_vfprintf_r+0x278>
8001d584:	0cc12603          	lw	a2,204(sp)
8001d588:	0c812703          	lw	a4,200(sp)
8001d58c:	0a710593          	addi	a1,sp,167
8001d590:	00160613          	addi	a2,a2,1
8001d594:	00b42023          	sw	a1,0(s0)
8001d598:	00170713          	addi	a4,a4,1
8001d59c:	00100593          	li	a1,1
8001d5a0:	00b42223          	sw	a1,4(s0)
8001d5a4:	0cc12623          	sw	a2,204(sp)
8001d5a8:	0ce12423          	sw	a4,200(sp)
8001d5ac:	00700613          	li	a2,7
8001d5b0:	00840413          	addi	s0,s0,8
8001d5b4:	3ee64263          	blt	a2,a4,8001d998 <_vfprintf_r+0x658>
8001d5b8:	02028c63          	beqz	t0,8001d5f0 <_vfprintf_r+0x2b0>
8001d5bc:	0cc12603          	lw	a2,204(sp)
8001d5c0:	0c812703          	lw	a4,200(sp)
8001d5c4:	0a810793          	addi	a5,sp,168
8001d5c8:	00260613          	addi	a2,a2,2
8001d5cc:	00170713          	addi	a4,a4,1
8001d5d0:	00200593          	li	a1,2
8001d5d4:	00f42023          	sw	a5,0(s0)
8001d5d8:	00b42223          	sw	a1,4(s0)
8001d5dc:	0cc12623          	sw	a2,204(sp)
8001d5e0:	0ce12423          	sw	a4,200(sp)
8001d5e4:	00700613          	li	a2,7
8001d5e8:	00840413          	addi	s0,s0,8
8001d5ec:	52e642e3          	blt	a2,a4,8001e310 <_vfprintf_r+0xfd0>
8001d5f0:	08000713          	li	a4,128
8001d5f4:	1eef86e3          	beq	t6,a4,8001dfe0 <_vfprintf_r+0xca0>
8001d5f8:	417989b3          	sub	s3,s3,s7
8001d5fc:	2f3044e3          	bgtz	s3,8001e0e4 <_vfprintf_r+0xda4>
8001d600:	100d7713          	andi	a4,s10,256
8001d604:	02071ee3          	bnez	a4,8001de40 <_vfprintf_r+0xb00>
8001d608:	0cc12703          	lw	a4,204(sp)
8001d60c:	0c812783          	lw	a5,200(sp)
8001d610:	01942023          	sw	s9,0(s0)
8001d614:	00eb8733          	add	a4,s7,a4
8001d618:	00178793          	addi	a5,a5,1
8001d61c:	01742223          	sw	s7,4(s0)
8001d620:	0ce12623          	sw	a4,204(sp)
8001d624:	0cf12423          	sw	a5,200(sp)
8001d628:	00700613          	li	a2,7
8001d62c:	4af64663          	blt	a2,a5,8001dad8 <_vfprintf_r+0x798>
8001d630:	00840413          	addi	s0,s0,8
8001d634:	004d7e13          	andi	t3,s10,4
8001d638:	000e0663          	beqz	t3,8001d644 <_vfprintf_r+0x304>
8001d63c:	41bb09b3          	sub	s3,s6,s11
8001d640:	4f304ee3          	bgtz	s3,8001e33c <_vfprintf_r+0xffc>
8001d644:	000b0313          	mv	t1,s6
8001d648:	01bb5463          	bge	s6,s11,8001d650 <_vfprintf_r+0x310>
8001d64c:	000d8313          	mv	t1,s11
8001d650:	00c12783          	lw	a5,12(sp)
8001d654:	006787b3          	add	a5,a5,t1
8001d658:	00f12623          	sw	a5,12(sp)
8001d65c:	360714e3          	bnez	a4,8001e1c4 <_vfprintf_r+0xe84>
8001d660:	01012783          	lw	a5,16(sp)
8001d664:	0c012423          	sw	zero,200(sp)
8001d668:	00078863          	beqz	a5,8001d678 <_vfprintf_r+0x338>
8001d66c:	01012583          	lw	a1,16(sp)
8001d670:	00812503          	lw	a0,8(sp)
8001d674:	ebdf30ef          	jal	ra,80011530 <_free_r>
8001d678:	000a0413          	mv	s0,s4
8001d67c:	00048c93          	mv	s9,s1
8001d680:	000cc703          	lbu	a4,0(s9)
8001d684:	de0710e3          	bnez	a4,8001d464 <_vfprintf_r+0x124>
8001d688:	0cc12783          	lw	a5,204(sp)
8001d68c:	00078463          	beqz	a5,8001d694 <_vfprintf_r+0x354>
8001d690:	4450106f          	j	8001f2d4 <_vfprintf_r+0x1f94>
8001d694:	00c95783          	lhu	a5,12(s2)
8001d698:	0407f793          	andi	a5,a5,64
8001d69c:	00078463          	beqz	a5,8001d6a4 <_vfprintf_r+0x364>
8001d6a0:	3400206f          	j	8001f9e0 <_vfprintf_r+0x26a0>
8001d6a4:	1cc12083          	lw	ra,460(sp)
8001d6a8:	1c812403          	lw	s0,456(sp)
8001d6ac:	00c12503          	lw	a0,12(sp)
8001d6b0:	1c412483          	lw	s1,452(sp)
8001d6b4:	1c012903          	lw	s2,448(sp)
8001d6b8:	1bc12983          	lw	s3,444(sp)
8001d6bc:	1b812a03          	lw	s4,440(sp)
8001d6c0:	1b412a83          	lw	s5,436(sp)
8001d6c4:	1b012b03          	lw	s6,432(sp)
8001d6c8:	1ac12b83          	lw	s7,428(sp)
8001d6cc:	1a812c03          	lw	s8,424(sp)
8001d6d0:	1a412c83          	lw	s9,420(sp)
8001d6d4:	1a012d03          	lw	s10,416(sp)
8001d6d8:	19c12d83          	lw	s11,412(sp)
8001d6dc:	1d010113          	addi	sp,sp,464
8001d6e0:	00008067          	ret
8001d6e4:	00812503          	lw	a0,8(sp)
8001d6e8:	00090593          	mv	a1,s2
8001d6ec:	710040ef          	jal	ra,80021dfc <__swsetup_r>
8001d6f0:	00050463          	beqz	a0,8001d6f8 <_vfprintf_r+0x3b8>
8001d6f4:	2ec0206f          	j	8001f9e0 <_vfprintf_r+0x26a0>
8001d6f8:	00c91703          	lh	a4,12(s2)
8001d6fc:	00a00693          	li	a3,10
8001d700:	01a77713          	andi	a4,a4,26
8001d704:	d0d718e3          	bne	a4,a3,8001d414 <_vfprintf_r+0xd4>
8001d708:	00e91703          	lh	a4,14(s2)
8001d70c:	d00744e3          	bltz	a4,8001d414 <_vfprintf_r+0xd4>
8001d710:	01412683          	lw	a3,20(sp)
8001d714:	00812503          	lw	a0,8(sp)
8001d718:	000b8613          	mv	a2,s7
8001d71c:	00090593          	mv	a1,s2
8001d720:	564020ef          	jal	ra,8001fc84 <__sbprintf>
8001d724:	00a12623          	sw	a0,12(sp)
8001d728:	f7dff06f          	j	8001d6a4 <_vfprintf_r+0x364>
8001d72c:	00812c03          	lw	s8,8(sp)
8001d730:	000c0513          	mv	a0,s8
8001d734:	1f1040ef          	jal	ra,80022124 <_localeconv_r>
8001d738:	00452783          	lw	a5,4(a0)
8001d73c:	00078513          	mv	a0,a5
8001d740:	04f12023          	sw	a5,64(sp)
8001d744:	ac1ff0ef          	jal	ra,8001d204 <strlen>
8001d748:	00050793          	mv	a5,a0
8001d74c:	000c0513          	mv	a0,s8
8001d750:	04f12223          	sw	a5,68(sp)
8001d754:	00078c13          	mv	s8,a5
8001d758:	1cd040ef          	jal	ra,80022124 <_localeconv_r>
8001d75c:	00852703          	lw	a4,8(a0)
8001d760:	02e12c23          	sw	a4,56(sp)
8001d764:	740c1ee3          	bnez	s8,8001e6c0 <_vfprintf_r+0x1380>
8001d768:	0004c883          	lbu	a7,0(s1)
8001d76c:	d75ff06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001d770:	0004c883          	lbu	a7,0(s1)
8001d774:	020d6d13          	ori	s10,s10,32
8001d778:	d69ff06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001d77c:	010d6d13          	ori	s10,s10,16
8001d780:	020d7793          	andi	a5,s10,32
8001d784:	3a078263          	beqz	a5,8001db28 <_vfprintf_r+0x7e8>
8001d788:	01412783          	lw	a5,20(sp)
8001d78c:	00778c13          	addi	s8,a5,7
8001d790:	ff8c7c13          	andi	s8,s8,-8
8001d794:	004c2783          	lw	a5,4(s8)
8001d798:	000c2b83          	lw	s7,0(s8)
8001d79c:	008c0713          	addi	a4,s8,8
8001d7a0:	00e12a23          	sw	a4,20(sp)
8001d7a4:	00078d93          	mv	s11,a5
8001d7a8:	3a07ca63          	bltz	a5,8001db5c <_vfprintf_r+0x81c>
8001d7ac:	fff00793          	li	a5,-1
8001d7b0:	000d0f93          	mv	t6,s10
8001d7b4:	4ef98063          	beq	s3,a5,8001dc94 <_vfprintf_r+0x954>
8001d7b8:	01bbe7b3          	or	a5,s7,s11
8001d7bc:	f7fd7f93          	andi	t6,s10,-129
8001d7c0:	4c079a63          	bnez	a5,8001dc94 <_vfprintf_r+0x954>
8001d7c4:	4c099e63          	bnez	s3,8001dca0 <_vfprintf_r+0x960>
8001d7c8:	00000b93          	li	s7,0
8001d7cc:	000f8d13          	mv	s10,t6
8001d7d0:	19010c93          	addi	s9,sp,400
8001d7d4:	0a714703          	lbu	a4,167(sp)
8001d7d8:	000b8d93          	mv	s11,s7
8001d7dc:	013bd463          	bge	s7,s3,8001d7e4 <_vfprintf_r+0x4a4>
8001d7e0:	00098d93          	mv	s11,s3
8001d7e4:	00012823          	sw	zero,16(sp)
8001d7e8:	02012423          	sw	zero,40(sp)
8001d7ec:	02012223          	sw	zero,36(sp)
8001d7f0:	00012e23          	sw	zero,28(sp)
8001d7f4:	d60706e3          	beqz	a4,8001d560 <_vfprintf_r+0x220>
8001d7f8:	001d8d93          	addi	s11,s11,1
8001d7fc:	d65ff06f          	j	8001d560 <_vfprintf_r+0x220>
8001d800:	010d6d13          	ori	s10,s10,16
8001d804:	020d7793          	andi	a5,s10,32
8001d808:	2e078863          	beqz	a5,8001daf8 <_vfprintf_r+0x7b8>
8001d80c:	01412783          	lw	a5,20(sp)
8001d810:	00778c13          	addi	s8,a5,7
8001d814:	ff8c7c13          	andi	s8,s8,-8
8001d818:	000c2b83          	lw	s7,0(s8)
8001d81c:	004c2d83          	lw	s11,4(s8)
8001d820:	008c0793          	addi	a5,s8,8
8001d824:	00f12a23          	sw	a5,20(sp)
8001d828:	bffd7f93          	andi	t6,s10,-1025
8001d82c:	00000713          	li	a4,0
8001d830:	00000793          	li	a5,0
8001d834:	0af103a3          	sb	a5,167(sp)
8001d838:	fff00793          	li	a5,-1
8001d83c:	34f98463          	beq	s3,a5,8001db84 <_vfprintf_r+0x844>
8001d840:	01bbe7b3          	or	a5,s7,s11
8001d844:	f7fffd13          	andi	s10,t6,-129
8001d848:	1a0792e3          	bnez	a5,8001e1ec <_vfprintf_r+0xeac>
8001d84c:	72099c63          	bnez	s3,8001df84 <_vfprintf_r+0xc44>
8001d850:	600716e3          	bnez	a4,8001e65c <_vfprintf_r+0x131c>
8001d854:	001ffb93          	andi	s7,t6,1
8001d858:	19010c93          	addi	s9,sp,400
8001d85c:	f60b8ce3          	beqz	s7,8001d7d4 <_vfprintf_r+0x494>
8001d860:	03000793          	li	a5,48
8001d864:	18f107a3          	sb	a5,399(sp)
8001d868:	18f10c93          	addi	s9,sp,399
8001d86c:	f69ff06f          	j	8001d7d4 <_vfprintf_r+0x494>
8001d870:	419489b3          	sub	s3,s1,s9
8001d874:	c19498e3          	bne	s1,s9,8001d484 <_vfprintf_r+0x144>
8001d878:	0004c703          	lbu	a4,0(s1)
8001d87c:	c45ff06f          	j	8001d4c0 <_vfprintf_r+0x180>
8001d880:	00812503          	lw	a0,8(sp)
8001d884:	0c410613          	addi	a2,sp,196
8001d888:	00090593          	mv	a1,s2
8001d88c:	5b4020ef          	jal	ra,8001fe40 <__sprint_r>
8001d890:	e00512e3          	bnez	a0,8001d694 <_vfprintf_r+0x354>
8001d894:	000a0413          	mv	s0,s4
8001d898:	c19ff06f          	j	8001d4b0 <_vfprintf_r+0x170>
8001d89c:	008d7713          	andi	a4,s10,8
8001d8a0:	660708e3          	beqz	a4,8001e710 <_vfprintf_r+0x13d0>
8001d8a4:	01412783          	lw	a5,20(sp)
8001d8a8:	0007a703          	lw	a4,0(a5)
8001d8ac:	00478793          	addi	a5,a5,4
8001d8b0:	00f12a23          	sw	a5,20(sp)
8001d8b4:	00072583          	lw	a1,0(a4)
8001d8b8:	00472603          	lw	a2,4(a4)
8001d8bc:	00872683          	lw	a3,8(a4)
8001d8c0:	00c72703          	lw	a4,12(a4)
8001d8c4:	0d010513          	addi	a0,sp,208
8001d8c8:	01112823          	sw	a7,16(sp)
8001d8cc:	0ce12e23          	sw	a4,220(sp)
8001d8d0:	0cb12823          	sw	a1,208(sp)
8001d8d4:	0cc12a23          	sw	a2,212(sp)
8001d8d8:	0cd12c23          	sw	a3,216(sp)
8001d8dc:	74d040ef          	jal	ra,80022828 <_ldcheck>
8001d8e0:	0aa12623          	sw	a0,172(sp)
8001d8e4:	00200713          	li	a4,2
8001d8e8:	01012883          	lw	a7,16(sp)
8001d8ec:	00e51463          	bne	a0,a4,8001d8f4 <_vfprintf_r+0x5b4>
8001d8f0:	2e00106f          	j	8001ebd0 <_vfprintf_r+0x1890>
8001d8f4:	00100713          	li	a4,1
8001d8f8:	00e51463          	bne	a0,a4,8001d900 <_vfprintf_r+0x5c0>
8001d8fc:	4300106f          	j	8001ed2c <_vfprintf_r+0x19ec>
8001d900:	06100713          	li	a4,97
8001d904:	00e89463          	bne	a7,a4,8001d90c <_vfprintf_r+0x5cc>
8001d908:	0000106f          	j	8001e908 <_vfprintf_r+0x15c8>
8001d90c:	04100713          	li	a4,65
8001d910:	05800793          	li	a5,88
8001d914:	00e89463          	bne	a7,a4,8001d91c <_vfprintf_r+0x5dc>
8001d918:	7f50006f          	j	8001e90c <_vfprintf_r+0x15cc>
8001d91c:	fff00713          	li	a4,-1
8001d920:	00e99463          	bne	s3,a4,8001d928 <_vfprintf_r+0x5e8>
8001d924:	16c0206f          	j	8001fa90 <_vfprintf_r+0x2750>
8001d928:	fdf8f713          	andi	a4,a7,-33
8001d92c:	04700693          	li	a3,71
8001d930:	00012823          	sw	zero,16(sp)
8001d934:	00d71663          	bne	a4,a3,8001d940 <_vfprintf_r+0x600>
8001d938:	00099463          	bnez	s3,8001d940 <_vfprintf_r+0x600>
8001d93c:	00100993          	li	s3,1
8001d940:	0dc12e83          	lw	t4,220(sp)
8001d944:	100d6793          	ori	a5,s10,256
8001d948:	04f12623          	sw	a5,76(sp)
8001d94c:	04012423          	sw	zero,72(sp)
8001d950:	0d012f03          	lw	t5,208(sp)
8001d954:	0d412f83          	lw	t6,212(sp)
8001d958:	0d812283          	lw	t0,216(sp)
8001d95c:	000eda63          	bgez	t4,8001d970 <_vfprintf_r+0x630>
8001d960:	80000737          	lui	a4,0x80000
8001d964:	02d00793          	li	a5,45
8001d968:	01d74eb3          	xor	t4,a4,t4
8001d96c:	04f12423          	sw	a5,72(sp)
8001d970:	fbf88713          	addi	a4,a7,-65
8001d974:	02500693          	li	a3,37
8001d978:	00e6f463          	bgeu	a3,a4,8001d980 <_vfprintf_r+0x640>
8001d97c:	6f40106f          	j	8001f070 <_vfprintf_r+0x1d30>
8001d980:	800296b7          	lui	a3,0x80029
8001d984:	00271713          	slli	a4,a4,0x2
8001d988:	a6068693          	addi	a3,a3,-1440 # 80028a60 <_ctype_+0x2b4>
8001d98c:	00d70733          	add	a4,a4,a3
8001d990:	00072703          	lw	a4,0(a4) # 80000000 <__START_ADDR__>
8001d994:	00070067          	jr	a4
8001d998:	00812503          	lw	a0,8(sp)
8001d99c:	0c410613          	addi	a2,sp,196
8001d9a0:	00090593          	mv	a1,s2
8001d9a4:	05112823          	sw	a7,80(sp)
8001d9a8:	05f12623          	sw	t6,76(sp)
8001d9ac:	04512423          	sw	t0,72(sp)
8001d9b0:	490020ef          	jal	ra,8001fe40 <__sprint_r>
8001d9b4:	020512e3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001d9b8:	05012883          	lw	a7,80(sp)
8001d9bc:	04c12f83          	lw	t6,76(sp)
8001d9c0:	04812283          	lw	t0,72(sp)
8001d9c4:	000a0413          	mv	s0,s4
8001d9c8:	bf1ff06f          	j	8001d5b8 <_vfprintf_r+0x278>
8001d9cc:	02012783          	lw	a5,32(sp)
8001d9d0:	00100613          	li	a2,1
8001d9d4:	00840b93          	addi	s7,s0,8
8001d9d8:	36f65ce3          	bge	a2,a5,8001e550 <_vfprintf_r+0x1210>
8001d9dc:	0cc12703          	lw	a4,204(sp)
8001d9e0:	0c812983          	lw	s3,200(sp)
8001d9e4:	00100613          	li	a2,1
8001d9e8:	00170713          	addi	a4,a4,1
8001d9ec:	00198993          	addi	s3,s3,1
8001d9f0:	00c42223          	sw	a2,4(s0)
8001d9f4:	01942023          	sw	s9,0(s0)
8001d9f8:	0ce12623          	sw	a4,204(sp)
8001d9fc:	0d312423          	sw	s3,200(sp)
8001da00:	00700613          	li	a2,7
8001da04:	793642e3          	blt	a2,s3,8001e988 <_vfprintf_r+0x1648>
8001da08:	02c12783          	lw	a5,44(sp)
8001da0c:	03012683          	lw	a3,48(sp)
8001da10:	00198993          	addi	s3,s3,1
8001da14:	00e78733          	add	a4,a5,a4
8001da18:	00dba023          	sw	a3,0(s7)
8001da1c:	00fba223          	sw	a5,4(s7)
8001da20:	0ce12623          	sw	a4,204(sp)
8001da24:	0d312423          	sw	s3,200(sp)
8001da28:	00700613          	li	a2,7
8001da2c:	008b8b93          	addi	s7,s7,8
8001da30:	77364ee3          	blt	a2,s3,8001e9ac <_vfprintf_r+0x166c>
8001da34:	0d012603          	lw	a2,208(sp)
8001da38:	08010593          	addi	a1,sp,128
8001da3c:	09010513          	addi	a0,sp,144
8001da40:	08c12823          	sw	a2,144(sp)
8001da44:	0d412603          	lw	a2,212(sp)
8001da48:	00e12e23          	sw	a4,28(sp)
8001da4c:	08012023          	sw	zero,128(sp)
8001da50:	08c12a23          	sw	a2,148(sp)
8001da54:	0d812603          	lw	a2,216(sp)
8001da58:	08012223          	sw	zero,132(sp)
8001da5c:	08012423          	sw	zero,136(sp)
8001da60:	08c12c23          	sw	a2,152(sp)
8001da64:	0dc12603          	lw	a2,220(sp)
8001da68:	08012623          	sw	zero,140(sp)
8001da6c:	08c12e23          	sw	a2,156(sp)
8001da70:	96ce50ef          	jal	ra,80002bdc <__eqtf2>
8001da74:	02012783          	lw	a5,32(sp)
8001da78:	01c12703          	lw	a4,28(sp)
8001da7c:	fff78413          	addi	s0,a5,-1
8001da80:	320502e3          	beqz	a0,8001e5a4 <_vfprintf_r+0x1264>
8001da84:	001c8793          	addi	a5,s9,1
8001da88:	00198993          	addi	s3,s3,1
8001da8c:	00870733          	add	a4,a4,s0
8001da90:	00fba023          	sw	a5,0(s7)
8001da94:	008ba223          	sw	s0,4(s7)
8001da98:	0ce12623          	sw	a4,204(sp)
8001da9c:	0d312423          	sw	s3,200(sp)
8001daa0:	00700793          	li	a5,7
8001daa4:	008b8b93          	addi	s7,s7,8
8001daa8:	2d37cce3          	blt	a5,s3,8001e580 <_vfprintf_r+0x1240>
8001daac:	03c12683          	lw	a3,60(sp)
8001dab0:	0b410613          	addi	a2,sp,180
8001dab4:	00198793          	addi	a5,s3,1
8001dab8:	00e68733          	add	a4,a3,a4
8001dabc:	00cba023          	sw	a2,0(s7)
8001dac0:	00dba223          	sw	a3,4(s7)
8001dac4:	0ce12623          	sw	a4,204(sp)
8001dac8:	0cf12423          	sw	a5,200(sp)
8001dacc:	00700613          	li	a2,7
8001dad0:	008b8413          	addi	s0,s7,8
8001dad4:	b6f650e3          	bge	a2,a5,8001d634 <_vfprintf_r+0x2f4>
8001dad8:	00812503          	lw	a0,8(sp)
8001dadc:	0c410613          	addi	a2,sp,196
8001dae0:	00090593          	mv	a1,s2
8001dae4:	35c020ef          	jal	ra,8001fe40 <__sprint_r>
8001dae8:	6e051863          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001daec:	0cc12703          	lw	a4,204(sp)
8001daf0:	000a0413          	mv	s0,s4
8001daf4:	b41ff06f          	j	8001d634 <_vfprintf_r+0x2f4>
8001daf8:	01412703          	lw	a4,20(sp)
8001dafc:	010d7793          	andi	a5,s10,16
8001db00:	00072b83          	lw	s7,0(a4)
8001db04:	00470713          	addi	a4,a4,4
8001db08:	00e12a23          	sw	a4,20(sp)
8001db0c:	3a0796e3          	bnez	a5,8001e6b8 <_vfprintf_r+0x1378>
8001db10:	040d7793          	andi	a5,s10,64
8001db14:	38078ee3          	beqz	a5,8001e6b0 <_vfprintf_r+0x1370>
8001db18:	010b9b93          	slli	s7,s7,0x10
8001db1c:	010bdb93          	srli	s7,s7,0x10
8001db20:	00000d93          	li	s11,0
8001db24:	d05ff06f          	j	8001d828 <_vfprintf_r+0x4e8>
8001db28:	01412703          	lw	a4,20(sp)
8001db2c:	010d7793          	andi	a5,s10,16
8001db30:	00072b83          	lw	s7,0(a4)
8001db34:	00470713          	addi	a4,a4,4
8001db38:	00e12a23          	sw	a4,20(sp)
8001db3c:	360794e3          	bnez	a5,8001e6a4 <_vfprintf_r+0x1364>
8001db40:	040d7793          	andi	a5,s10,64
8001db44:	34078ce3          	beqz	a5,8001e69c <_vfprintf_r+0x135c>
8001db48:	010b9b93          	slli	s7,s7,0x10
8001db4c:	410bdb93          	srai	s7,s7,0x10
8001db50:	41fbdd93          	srai	s11,s7,0x1f
8001db54:	000d8793          	mv	a5,s11
8001db58:	c407dae3          	bgez	a5,8001d7ac <_vfprintf_r+0x46c>
8001db5c:	017037b3          	snez	a5,s7
8001db60:	41b00db3          	neg	s11,s11
8001db64:	40fd8db3          	sub	s11,s11,a5
8001db68:	02d00793          	li	a5,45
8001db6c:	0af103a3          	sb	a5,167(sp)
8001db70:	fff00793          	li	a5,-1
8001db74:	41700bb3          	neg	s7,s7
8001db78:	000d0f93          	mv	t6,s10
8001db7c:	00100713          	li	a4,1
8001db80:	ccf990e3          	bne	s3,a5,8001d840 <_vfprintf_r+0x500>
8001db84:	00100793          	li	a5,1
8001db88:	10f70663          	beq	a4,a5,8001dc94 <_vfprintf_r+0x954>
8001db8c:	00200793          	li	a5,2
8001db90:	40f70663          	beq	a4,a5,8001df9c <_vfprintf_r+0xc5c>
8001db94:	19010c93          	addi	s9,sp,400
8001db98:	01dd9793          	slli	a5,s11,0x1d
8001db9c:	007bf713          	andi	a4,s7,7
8001dba0:	003bdb93          	srli	s7,s7,0x3
8001dba4:	03070713          	addi	a4,a4,48
8001dba8:	0177ebb3          	or	s7,a5,s7
8001dbac:	003ddd93          	srli	s11,s11,0x3
8001dbb0:	feec8fa3          	sb	a4,-1(s9)
8001dbb4:	01bbe7b3          	or	a5,s7,s11
8001dbb8:	000c8613          	mv	a2,s9
8001dbbc:	fffc8c93          	addi	s9,s9,-1
8001dbc0:	fc079ce3          	bnez	a5,8001db98 <_vfprintf_r+0x858>
8001dbc4:	001ff693          	andi	a3,t6,1
8001dbc8:	40068463          	beqz	a3,8001dfd0 <_vfprintf_r+0xc90>
8001dbcc:	03000693          	li	a3,48
8001dbd0:	40d70063          	beq	a4,a3,8001dfd0 <_vfprintf_r+0xc90>
8001dbd4:	ffe60613          	addi	a2,a2,-2
8001dbd8:	19010793          	addi	a5,sp,400
8001dbdc:	fedc8fa3          	sb	a3,-1(s9)
8001dbe0:	40c78bb3          	sub	s7,a5,a2
8001dbe4:	000f8d13          	mv	s10,t6
8001dbe8:	00060c93          	mv	s9,a2
8001dbec:	be9ff06f          	j	8001d7d4 <_vfprintf_r+0x494>
8001dbf0:	01412703          	lw	a4,20(sp)
8001dbf4:	0a0103a3          	sb	zero,167(sp)
8001dbf8:	00100d93          	li	s11,1
8001dbfc:	00072783          	lw	a5,0(a4)
8001dc00:	00470713          	addi	a4,a4,4
8001dc04:	00e12a23          	sw	a4,20(sp)
8001dc08:	12f10623          	sb	a5,300(sp)
8001dc0c:	00100b93          	li	s7,1
8001dc10:	12c10c93          	addi	s9,sp,300
8001dc14:	939ff06f          	j	8001d54c <_vfprintf_r+0x20c>
8001dc18:	01412783          	lw	a5,20(sp)
8001dc1c:	0a0103a3          	sb	zero,167(sp)
8001dc20:	0007ac83          	lw	s9,0(a5)
8001dc24:	00478c13          	addi	s8,a5,4
8001dc28:	3e0c86e3          	beqz	s9,8001e814 <_vfprintf_r+0x14d4>
8001dc2c:	fff00713          	li	a4,-1
8001dc30:	00e99463          	bne	s3,a4,8001dc38 <_vfprintf_r+0x8f8>
8001dc34:	0340106f          	j	8001ec68 <_vfprintf_r+0x1928>
8001dc38:	00098613          	mv	a2,s3
8001dc3c:	00000593          	li	a1,0
8001dc40:	000c8513          	mv	a0,s9
8001dc44:	01112a23          	sw	a7,20(sp)
8001dc48:	40c040ef          	jal	ra,80022054 <memchr>
8001dc4c:	00a12823          	sw	a0,16(sp)
8001dc50:	01412883          	lw	a7,20(sp)
8001dc54:	00051463          	bnez	a0,8001dc5c <_vfprintf_r+0x91c>
8001dc58:	4610106f          	j	8001f8b8 <_vfprintf_r+0x2578>
8001dc5c:	01012783          	lw	a5,16(sp)
8001dc60:	0a714703          	lbu	a4,167(sp)
8001dc64:	01812a23          	sw	s8,20(sp)
8001dc68:	41978bb3          	sub	s7,a5,s9
8001dc6c:	fffbc693          	not	a3,s7
8001dc70:	41f6d693          	srai	a3,a3,0x1f
8001dc74:	00012823          	sw	zero,16(sp)
8001dc78:	02012423          	sw	zero,40(sp)
8001dc7c:	02012223          	sw	zero,36(sp)
8001dc80:	00012e23          	sw	zero,28(sp)
8001dc84:	00dbfdb3          	and	s11,s7,a3
8001dc88:	00000993          	li	s3,0
8001dc8c:	b60716e3          	bnez	a4,8001d7f8 <_vfprintf_r+0x4b8>
8001dc90:	8d1ff06f          	j	8001d560 <_vfprintf_r+0x220>
8001dc94:	540d96e3          	bnez	s11,8001e9e0 <_vfprintf_r+0x16a0>
8001dc98:	00900793          	li	a5,9
8001dc9c:	5577e2e3          	bltu	a5,s7,8001e9e0 <_vfprintf_r+0x16a0>
8001dca0:	030b8b93          	addi	s7,s7,48
8001dca4:	197107a3          	sb	s7,399(sp)
8001dca8:	000f8d13          	mv	s10,t6
8001dcac:	00100b93          	li	s7,1
8001dcb0:	18f10c93          	addi	s9,sp,399
8001dcb4:	b21ff06f          	j	8001d7d4 <_vfprintf_r+0x494>
8001dcb8:	01412783          	lw	a5,20(sp)
8001dcbc:	0007ab03          	lw	s6,0(a5)
8001dcc0:	00478793          	addi	a5,a5,4
8001dcc4:	1a0b5ae3          	bgez	s6,8001e678 <_vfprintf_r+0x1338>
8001dcc8:	41600b33          	neg	s6,s6
8001dccc:	00f12a23          	sw	a5,20(sp)
8001dcd0:	0004c883          	lbu	a7,0(s1)
8001dcd4:	004d6d13          	ori	s10,s10,4
8001dcd8:	809ff06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001dcdc:	010d6f93          	ori	t6,s10,16
8001dce0:	020ff793          	andi	a5,t6,32
8001dce4:	140782e3          	beqz	a5,8001e628 <_vfprintf_r+0x12e8>
8001dce8:	01412783          	lw	a5,20(sp)
8001dcec:	00100713          	li	a4,1
8001dcf0:	00778c13          	addi	s8,a5,7
8001dcf4:	ff8c7c13          	andi	s8,s8,-8
8001dcf8:	008c0793          	addi	a5,s8,8
8001dcfc:	000c2b83          	lw	s7,0(s8)
8001dd00:	004c2d83          	lw	s11,4(s8)
8001dd04:	00f12a23          	sw	a5,20(sp)
8001dd08:	b29ff06f          	j	8001d830 <_vfprintf_r+0x4f0>
8001dd0c:	02b00793          	li	a5,43
8001dd10:	0004c883          	lbu	a7,0(s1)
8001dd14:	0af103a3          	sb	a5,167(sp)
8001dd18:	fc8ff06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001dd1c:	01412703          	lw	a4,20(sp)
8001dd20:	ffff87b7          	lui	a5,0xffff8
8001dd24:	8307c793          	xori	a5,a5,-2000
8001dd28:	0af11423          	sh	a5,168(sp)
8001dd2c:	00470793          	addi	a5,a4,4
8001dd30:	00f12a23          	sw	a5,20(sp)
8001dd34:	800297b7          	lui	a5,0x80029
8001dd38:	8c078793          	addi	a5,a5,-1856 # 800288c0 <_ctype_+0x114>
8001dd3c:	00072b83          	lw	s7,0(a4)
8001dd40:	00000d93          	li	s11,0
8001dd44:	002d6f93          	ori	t6,s10,2
8001dd48:	02f12a23          	sw	a5,52(sp)
8001dd4c:	00200713          	li	a4,2
8001dd50:	07800893          	li	a7,120
8001dd54:	addff06f          	j	8001d830 <_vfprintf_r+0x4f0>
8001dd58:	020d7793          	andi	a5,s10,32
8001dd5c:	180784e3          	beqz	a5,8001e6e4 <_vfprintf_r+0x13a4>
8001dd60:	01412783          	lw	a5,20(sp)
8001dd64:	00c12683          	lw	a3,12(sp)
8001dd68:	0007a783          	lw	a5,0(a5)
8001dd6c:	41f6d713          	srai	a4,a3,0x1f
8001dd70:	00d7a023          	sw	a3,0(a5)
8001dd74:	00e7a223          	sw	a4,4(a5)
8001dd78:	01412783          	lw	a5,20(sp)
8001dd7c:	00048c93          	mv	s9,s1
8001dd80:	00478793          	addi	a5,a5,4
8001dd84:	00f12a23          	sw	a5,20(sp)
8001dd88:	8f9ff06f          	j	8001d680 <_vfprintf_r+0x340>
8001dd8c:	0004c883          	lbu	a7,0(s1)
8001dd90:	06c00793          	li	a5,108
8001dd94:	22f888e3          	beq	a7,a5,8001e7c4 <_vfprintf_r+0x1484>
8001dd98:	010d6d13          	ori	s10,s10,16
8001dd9c:	f44ff06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001dda0:	0004c883          	lbu	a7,0(s1)
8001dda4:	06800793          	li	a5,104
8001dda8:	22f886e3          	beq	a7,a5,8001e7d4 <_vfprintf_r+0x1494>
8001ddac:	040d6d13          	ori	s10,s10,64
8001ddb0:	f30ff06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001ddb4:	0004c883          	lbu	a7,0(s1)
8001ddb8:	008d6d13          	ori	s10,s10,8
8001ddbc:	f24ff06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001ddc0:	0004c883          	lbu	a7,0(s1)
8001ddc4:	001d6d13          	ori	s10,s10,1
8001ddc8:	f18ff06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001ddcc:	0a714783          	lbu	a5,167(sp)
8001ddd0:	0004c883          	lbu	a7,0(s1)
8001ddd4:	f0079663          	bnez	a5,8001d4e0 <_vfprintf_r+0x1a0>
8001ddd8:	02000793          	li	a5,32
8001dddc:	0af103a3          	sb	a5,167(sp)
8001dde0:	f00ff06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001dde4:	0004c883          	lbu	a7,0(s1)
8001dde8:	080d6d13          	ori	s10,s10,128
8001ddec:	ef4ff06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001ddf0:	0004c883          	lbu	a7,0(s1)
8001ddf4:	02a00793          	li	a5,42
8001ddf8:	00148713          	addi	a4,s1,1
8001ddfc:	00f89463          	bne	a7,a5,8001de04 <_vfprintf_r+0xac4>
8001de00:	6050106f          	j	8001fc04 <_vfprintf_r+0x28c4>
8001de04:	fd088793          	addi	a5,a7,-48
8001de08:	00900613          	li	a2,9
8001de0c:	00070493          	mv	s1,a4
8001de10:	00000993          	li	s3,0
8001de14:	00900693          	li	a3,9
8001de18:	ecf66663          	bltu	a2,a5,8001d4e4 <_vfprintf_r+0x1a4>
8001de1c:	0004c883          	lbu	a7,0(s1)
8001de20:	00299713          	slli	a4,s3,0x2
8001de24:	013709b3          	add	s3,a4,s3
8001de28:	00199993          	slli	s3,s3,0x1
8001de2c:	00f989b3          	add	s3,s3,a5
8001de30:	fd088793          	addi	a5,a7,-48
8001de34:	00148493          	addi	s1,s1,1
8001de38:	fef6f2e3          	bgeu	a3,a5,8001de1c <_vfprintf_r+0xadc>
8001de3c:	ea8ff06f          	j	8001d4e4 <_vfprintf_r+0x1a4>
8001de40:	06500713          	li	a4,101
8001de44:	b91754e3          	bge	a4,a7,8001d9cc <_vfprintf_r+0x68c>
8001de48:	0d012703          	lw	a4,208(sp)
8001de4c:	08010593          	addi	a1,sp,128
8001de50:	09010513          	addi	a0,sp,144
8001de54:	08e12823          	sw	a4,144(sp)
8001de58:	0d412703          	lw	a4,212(sp)
8001de5c:	08012023          	sw	zero,128(sp)
8001de60:	08012223          	sw	zero,132(sp)
8001de64:	08e12a23          	sw	a4,148(sp)
8001de68:	0d812703          	lw	a4,216(sp)
8001de6c:	08012423          	sw	zero,136(sp)
8001de70:	08012623          	sw	zero,140(sp)
8001de74:	08e12c23          	sw	a4,152(sp)
8001de78:	0dc12703          	lw	a4,220(sp)
8001de7c:	08e12e23          	sw	a4,156(sp)
8001de80:	d5de40ef          	jal	ra,80002bdc <__eqtf2>
8001de84:	56051463          	bnez	a0,8001e3ec <_vfprintf_r+0x10ac>
8001de88:	0cc12703          	lw	a4,204(sp)
8001de8c:	0c812783          	lw	a5,200(sp)
8001de90:	80029637          	lui	a2,0x80029
8001de94:	8f060613          	addi	a2,a2,-1808 # 800288f0 <_ctype_+0x144>
8001de98:	00c42023          	sw	a2,0(s0)
8001de9c:	00170713          	addi	a4,a4,1
8001dea0:	00100613          	li	a2,1
8001dea4:	00178793          	addi	a5,a5,1
8001dea8:	00c42223          	sw	a2,4(s0)
8001deac:	0ce12623          	sw	a4,204(sp)
8001deb0:	0cf12423          	sw	a5,200(sp)
8001deb4:	00700613          	li	a2,7
8001deb8:	00840413          	addi	s0,s0,8
8001debc:	4af64ee3          	blt	a2,a5,8001eb78 <_vfprintf_r+0x1838>
8001dec0:	0ac12783          	lw	a5,172(sp)
8001dec4:	02012683          	lw	a3,32(sp)
8001dec8:	7ad7d063          	bge	a5,a3,8001e668 <_vfprintf_r+0x1328>
8001decc:	03012783          	lw	a5,48(sp)
8001ded0:	02c12683          	lw	a3,44(sp)
8001ded4:	00700613          	li	a2,7
8001ded8:	00f42023          	sw	a5,0(s0)
8001dedc:	0c812783          	lw	a5,200(sp)
8001dee0:	00e68733          	add	a4,a3,a4
8001dee4:	00d42223          	sw	a3,4(s0)
8001dee8:	00178793          	addi	a5,a5,1
8001deec:	0ce12623          	sw	a4,204(sp)
8001def0:	0cf12423          	sw	a5,200(sp)
8001def4:	00840413          	addi	s0,s0,8
8001def8:	0ef646e3          	blt	a2,a5,8001e7e4 <_vfprintf_r+0x14a4>
8001defc:	02012783          	lw	a5,32(sp)
8001df00:	fff78993          	addi	s3,a5,-1
8001df04:	f3305863          	blez	s3,8001d634 <_vfprintf_r+0x2f4>
8001df08:	80029837          	lui	a6,0x80029
8001df0c:	01000613          	li	a2,16
8001df10:	0c812783          	lw	a5,200(sp)
8001df14:	af880c13          	addi	s8,a6,-1288 # 80028af8 <zeroes.0>
8001df18:	493658e3          	bge	a2,s3,8001eba8 <_vfprintf_r+0x1868>
8001df1c:	000c0693          	mv	a3,s8
8001df20:	01000b93          	li	s7,16
8001df24:	00098c13          	mv	s8,s3
8001df28:	00700c93          	li	s9,7
8001df2c:	00048993          	mv	s3,s1
8001df30:	00068493          	mv	s1,a3
8001df34:	00c0006f          	j	8001df40 <_vfprintf_r+0xc00>
8001df38:	ff0c0c13          	addi	s8,s8,-16
8001df3c:	458bdee3          	bge	s7,s8,8001eb98 <_vfprintf_r+0x1858>
8001df40:	01070713          	addi	a4,a4,16
8001df44:	00178793          	addi	a5,a5,1
8001df48:	00942023          	sw	s1,0(s0)
8001df4c:	01742223          	sw	s7,4(s0)
8001df50:	0ce12623          	sw	a4,204(sp)
8001df54:	0cf12423          	sw	a5,200(sp)
8001df58:	00840413          	addi	s0,s0,8
8001df5c:	fcfcdee3          	bge	s9,a5,8001df38 <_vfprintf_r+0xbf8>
8001df60:	00812503          	lw	a0,8(sp)
8001df64:	0c410613          	addi	a2,sp,196
8001df68:	00090593          	mv	a1,s2
8001df6c:	6d5010ef          	jal	ra,8001fe40 <__sprint_r>
8001df70:	26051463          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001df74:	0cc12703          	lw	a4,204(sp)
8001df78:	0c812783          	lw	a5,200(sp)
8001df7c:	000a0413          	mv	s0,s4
8001df80:	fb9ff06f          	j	8001df38 <_vfprintf_r+0xbf8>
8001df84:	00100793          	li	a5,1
8001df88:	00f71463          	bne	a4,a5,8001df90 <_vfprintf_r+0xc50>
8001df8c:	2090106f          	j	8001f994 <_vfprintf_r+0x2654>
8001df90:	00200793          	li	a5,2
8001df94:	000d0f93          	mv	t6,s10
8001df98:	bef71ee3          	bne	a4,a5,8001db94 <_vfprintf_r+0x854>
8001df9c:	03412683          	lw	a3,52(sp)
8001dfa0:	19010c93          	addi	s9,sp,400
8001dfa4:	00fbf793          	andi	a5,s7,15
8001dfa8:	00f687b3          	add	a5,a3,a5
8001dfac:	0007c703          	lbu	a4,0(a5)
8001dfb0:	004bdb93          	srli	s7,s7,0x4
8001dfb4:	01cd9793          	slli	a5,s11,0x1c
8001dfb8:	0177ebb3          	or	s7,a5,s7
8001dfbc:	004ddd93          	srli	s11,s11,0x4
8001dfc0:	feec8fa3          	sb	a4,-1(s9)
8001dfc4:	01bbe7b3          	or	a5,s7,s11
8001dfc8:	fffc8c93          	addi	s9,s9,-1
8001dfcc:	fc079ce3          	bnez	a5,8001dfa4 <_vfprintf_r+0xc64>
8001dfd0:	19010793          	addi	a5,sp,400
8001dfd4:	41978bb3          	sub	s7,a5,s9
8001dfd8:	000f8d13          	mv	s10,t6
8001dfdc:	ff8ff06f          	j	8001d7d4 <_vfprintf_r+0x494>
8001dfe0:	41bb0733          	sub	a4,s6,s11
8001dfe4:	e0e05a63          	blez	a4,8001d5f8 <_vfprintf_r+0x2b8>
8001dfe8:	80029837          	lui	a6,0x80029
8001dfec:	01000513          	li	a0,16
8001dff0:	0cc12583          	lw	a1,204(sp)
8001dff4:	0c812603          	lw	a2,200(sp)
8001dff8:	af880c13          	addi	s8,a6,-1288 # 80028af8 <zeroes.0>
8001dffc:	0ae55063          	bge	a0,a4,8001e09c <_vfprintf_r+0xd5c>
8001e000:	04912423          	sw	s1,72(sp)
8001e004:	00040793          	mv	a5,s0
8001e008:	000c0493          	mv	s1,s8
8001e00c:	01000f13          	li	t5,16
8001e010:	000b8c13          	mv	s8,s7
8001e014:	00700f93          	li	t6,7
8001e018:	00098b93          	mv	s7,s3
8001e01c:	00070413          	mv	s0,a4
8001e020:	00088993          	mv	s3,a7
8001e024:	00c0006f          	j	8001e030 <_vfprintf_r+0xcf0>
8001e028:	ff040413          	addi	s0,s0,-16
8001e02c:	048f5a63          	bge	t5,s0,8001e080 <_vfprintf_r+0xd40>
8001e030:	01058593          	addi	a1,a1,16
8001e034:	00160613          	addi	a2,a2,1
8001e038:	0097a023          	sw	s1,0(a5)
8001e03c:	01e7a223          	sw	t5,4(a5)
8001e040:	0cb12623          	sw	a1,204(sp)
8001e044:	0cc12423          	sw	a2,200(sp)
8001e048:	00878793          	addi	a5,a5,8
8001e04c:	fccfdee3          	bge	t6,a2,8001e028 <_vfprintf_r+0xce8>
8001e050:	00812503          	lw	a0,8(sp)
8001e054:	0c410613          	addi	a2,sp,196
8001e058:	00090593          	mv	a1,s2
8001e05c:	5e5010ef          	jal	ra,8001fe40 <__sprint_r>
8001e060:	16051c63          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e064:	01000f13          	li	t5,16
8001e068:	ff040413          	addi	s0,s0,-16
8001e06c:	0cc12583          	lw	a1,204(sp)
8001e070:	0c812603          	lw	a2,200(sp)
8001e074:	000a0793          	mv	a5,s4
8001e078:	00700f93          	li	t6,7
8001e07c:	fa8f4ae3          	blt	t5,s0,8001e030 <_vfprintf_r+0xcf0>
8001e080:	00098893          	mv	a7,s3
8001e084:	000b8993          	mv	s3,s7
8001e088:	000c0b93          	mv	s7,s8
8001e08c:	00048c13          	mv	s8,s1
8001e090:	04812483          	lw	s1,72(sp)
8001e094:	00040713          	mv	a4,s0
8001e098:	00078413          	mv	s0,a5
8001e09c:	00b705b3          	add	a1,a4,a1
8001e0a0:	00160613          	addi	a2,a2,1
8001e0a4:	00e42223          	sw	a4,4(s0)
8001e0a8:	01842023          	sw	s8,0(s0)
8001e0ac:	0cb12623          	sw	a1,204(sp)
8001e0b0:	0cc12423          	sw	a2,200(sp)
8001e0b4:	00700713          	li	a4,7
8001e0b8:	00840413          	addi	s0,s0,8
8001e0bc:	d2c75e63          	bge	a4,a2,8001d5f8 <_vfprintf_r+0x2b8>
8001e0c0:	00812503          	lw	a0,8(sp)
8001e0c4:	0c410613          	addi	a2,sp,196
8001e0c8:	00090593          	mv	a1,s2
8001e0cc:	05112423          	sw	a7,72(sp)
8001e0d0:	571010ef          	jal	ra,8001fe40 <__sprint_r>
8001e0d4:	10051263          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e0d8:	04812883          	lw	a7,72(sp)
8001e0dc:	000a0413          	mv	s0,s4
8001e0e0:	d18ff06f          	j	8001d5f8 <_vfprintf_r+0x2b8>
8001e0e4:	80029837          	lui	a6,0x80029
8001e0e8:	01000713          	li	a4,16
8001e0ec:	0cc12583          	lw	a1,204(sp)
8001e0f0:	0c812603          	lw	a2,200(sp)
8001e0f4:	af880c13          	addi	s8,a6,-1288 # 80028af8 <zeroes.0>
8001e0f8:	09375263          	bge	a4,s3,8001e17c <_vfprintf_r+0xe3c>
8001e0fc:	00040793          	mv	a5,s0
8001e100:	000a8c13          	mv	s8,s5
8001e104:	00098413          	mv	s0,s3
8001e108:	01000713          	li	a4,16
8001e10c:	00700f13          	li	t5,7
8001e110:	00088993          	mv	s3,a7
8001e114:	00c0006f          	j	8001e120 <_vfprintf_r+0xde0>
8001e118:	ff040413          	addi	s0,s0,-16
8001e11c:	04875a63          	bge	a4,s0,8001e170 <_vfprintf_r+0xe30>
8001e120:	01058593          	addi	a1,a1,16
8001e124:	00160613          	addi	a2,a2,1
8001e128:	0157a023          	sw	s5,0(a5)
8001e12c:	00e7a223          	sw	a4,4(a5)
8001e130:	0cb12623          	sw	a1,204(sp)
8001e134:	0cc12423          	sw	a2,200(sp)
8001e138:	00878793          	addi	a5,a5,8
8001e13c:	fccf5ee3          	bge	t5,a2,8001e118 <_vfprintf_r+0xdd8>
8001e140:	00812503          	lw	a0,8(sp)
8001e144:	0c410613          	addi	a2,sp,196
8001e148:	00090593          	mv	a1,s2
8001e14c:	4f5010ef          	jal	ra,8001fe40 <__sprint_r>
8001e150:	08051463          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e154:	01000713          	li	a4,16
8001e158:	ff040413          	addi	s0,s0,-16
8001e15c:	0cc12583          	lw	a1,204(sp)
8001e160:	0c812603          	lw	a2,200(sp)
8001e164:	000a0793          	mv	a5,s4
8001e168:	00700f13          	li	t5,7
8001e16c:	fa874ae3          	blt	a4,s0,8001e120 <_vfprintf_r+0xde0>
8001e170:	00098893          	mv	a7,s3
8001e174:	00040993          	mv	s3,s0
8001e178:	00078413          	mv	s0,a5
8001e17c:	00b985b3          	add	a1,s3,a1
8001e180:	00160613          	addi	a2,a2,1
8001e184:	01842023          	sw	s8,0(s0)
8001e188:	01342223          	sw	s3,4(s0)
8001e18c:	0cb12623          	sw	a1,204(sp)
8001e190:	0cc12423          	sw	a2,200(sp)
8001e194:	00700713          	li	a4,7
8001e198:	00840413          	addi	s0,s0,8
8001e19c:	c6c75263          	bge	a4,a2,8001d600 <_vfprintf_r+0x2c0>
8001e1a0:	00812503          	lw	a0,8(sp)
8001e1a4:	0c410613          	addi	a2,sp,196
8001e1a8:	00090593          	mv	a1,s2
8001e1ac:	05112423          	sw	a7,72(sp)
8001e1b0:	491010ef          	jal	ra,8001fe40 <__sprint_r>
8001e1b4:	02051263          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e1b8:	04812883          	lw	a7,72(sp)
8001e1bc:	000a0413          	mv	s0,s4
8001e1c0:	c40ff06f          	j	8001d600 <_vfprintf_r+0x2c0>
8001e1c4:	00812503          	lw	a0,8(sp)
8001e1c8:	0c410613          	addi	a2,sp,196
8001e1cc:	00090593          	mv	a1,s2
8001e1d0:	471010ef          	jal	ra,8001fe40 <__sprint_r>
8001e1d4:	c8050663          	beqz	a0,8001d660 <_vfprintf_r+0x320>
8001e1d8:	01012583          	lw	a1,16(sp)
8001e1dc:	ca058c63          	beqz	a1,8001d694 <_vfprintf_r+0x354>
8001e1e0:	00812503          	lw	a0,8(sp)
8001e1e4:	b4cf30ef          	jal	ra,80011530 <_free_r>
8001e1e8:	cacff06f          	j	8001d694 <_vfprintf_r+0x354>
8001e1ec:	000d0f93          	mv	t6,s10
8001e1f0:	995ff06f          	j	8001db84 <_vfprintf_r+0x844>
8001e1f4:	80029837          	lui	a6,0x80029
8001e1f8:	01000513          	li	a0,16
8001e1fc:	0cc12583          	lw	a1,204(sp)
8001e200:	0c812603          	lw	a2,200(sp)
8001e204:	b0880c13          	addi	s8,a6,-1272 # 80028b08 <blanks.1>
8001e208:	0ae55863          	bge	a0,a4,8001e2b8 <_vfprintf_r+0xf78>
8001e20c:	04912823          	sw	s1,80(sp)
8001e210:	00040793          	mv	a5,s0
8001e214:	000c0493          	mv	s1,s8
8001e218:	01000f13          	li	t5,16
8001e21c:	000b8c13          	mv	s8,s7
8001e220:	00700393          	li	t2,7
8001e224:	00098b93          	mv	s7,s3
8001e228:	04512423          	sw	t0,72(sp)
8001e22c:	05f12623          	sw	t6,76(sp)
8001e230:	00070413          	mv	s0,a4
8001e234:	00088993          	mv	s3,a7
8001e238:	00c0006f          	j	8001e244 <_vfprintf_r+0xf04>
8001e23c:	ff040413          	addi	s0,s0,-16
8001e240:	048f5a63          	bge	t5,s0,8001e294 <_vfprintf_r+0xf54>
8001e244:	01058593          	addi	a1,a1,16
8001e248:	00160613          	addi	a2,a2,1
8001e24c:	0097a023          	sw	s1,0(a5)
8001e250:	01e7a223          	sw	t5,4(a5)
8001e254:	0cb12623          	sw	a1,204(sp)
8001e258:	0cc12423          	sw	a2,200(sp)
8001e25c:	00878793          	addi	a5,a5,8
8001e260:	fcc3dee3          	bge	t2,a2,8001e23c <_vfprintf_r+0xefc>
8001e264:	00812503          	lw	a0,8(sp)
8001e268:	0c410613          	addi	a2,sp,196
8001e26c:	00090593          	mv	a1,s2
8001e270:	3d1010ef          	jal	ra,8001fe40 <__sprint_r>
8001e274:	f60512e3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e278:	01000f13          	li	t5,16
8001e27c:	ff040413          	addi	s0,s0,-16
8001e280:	0cc12583          	lw	a1,204(sp)
8001e284:	0c812603          	lw	a2,200(sp)
8001e288:	000a0793          	mv	a5,s4
8001e28c:	00700393          	li	t2,7
8001e290:	fa8f4ae3          	blt	t5,s0,8001e244 <_vfprintf_r+0xf04>
8001e294:	00098893          	mv	a7,s3
8001e298:	04812283          	lw	t0,72(sp)
8001e29c:	000b8993          	mv	s3,s7
8001e2a0:	04c12f83          	lw	t6,76(sp)
8001e2a4:	000c0b93          	mv	s7,s8
8001e2a8:	00048c13          	mv	s8,s1
8001e2ac:	05012483          	lw	s1,80(sp)
8001e2b0:	00040713          	mv	a4,s0
8001e2b4:	00078413          	mv	s0,a5
8001e2b8:	00b705b3          	add	a1,a4,a1
8001e2bc:	00160613          	addi	a2,a2,1
8001e2c0:	00e42223          	sw	a4,4(s0)
8001e2c4:	01842023          	sw	s8,0(s0)
8001e2c8:	0cb12623          	sw	a1,204(sp)
8001e2cc:	0cc12423          	sw	a2,200(sp)
8001e2d0:	00700713          	li	a4,7
8001e2d4:	00840413          	addi	s0,s0,8
8001e2d8:	aac75263          	bge	a4,a2,8001d57c <_vfprintf_r+0x23c>
8001e2dc:	00812503          	lw	a0,8(sp)
8001e2e0:	0c410613          	addi	a2,sp,196
8001e2e4:	00090593          	mv	a1,s2
8001e2e8:	05112823          	sw	a7,80(sp)
8001e2ec:	05f12623          	sw	t6,76(sp)
8001e2f0:	04512423          	sw	t0,72(sp)
8001e2f4:	34d010ef          	jal	ra,8001fe40 <__sprint_r>
8001e2f8:	ee0510e3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e2fc:	05012883          	lw	a7,80(sp)
8001e300:	04c12f83          	lw	t6,76(sp)
8001e304:	04812283          	lw	t0,72(sp)
8001e308:	000a0413          	mv	s0,s4
8001e30c:	a70ff06f          	j	8001d57c <_vfprintf_r+0x23c>
8001e310:	00812503          	lw	a0,8(sp)
8001e314:	0c410613          	addi	a2,sp,196
8001e318:	00090593          	mv	a1,s2
8001e31c:	05112623          	sw	a7,76(sp)
8001e320:	05f12423          	sw	t6,72(sp)
8001e324:	31d010ef          	jal	ra,8001fe40 <__sprint_r>
8001e328:	ea0518e3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e32c:	04c12883          	lw	a7,76(sp)
8001e330:	04812f83          	lw	t6,72(sp)
8001e334:	000a0413          	mv	s0,s4
8001e338:	ab8ff06f          	j	8001d5f0 <_vfprintf_r+0x2b0>
8001e33c:	80029837          	lui	a6,0x80029
8001e340:	01000613          	li	a2,16
8001e344:	0c812783          	lw	a5,200(sp)
8001e348:	b0880c13          	addi	s8,a6,-1272 # 80028b08 <blanks.1>
8001e34c:	07365263          	bge	a2,s3,8001e3b0 <_vfprintf_r+0x1070>
8001e350:	00812d03          	lw	s10,8(sp)
8001e354:	01000b93          	li	s7,16
8001e358:	00700c93          	li	s9,7
8001e35c:	00c0006f          	j	8001e368 <_vfprintf_r+0x1028>
8001e360:	ff098993          	addi	s3,s3,-16
8001e364:	053bd663          	bge	s7,s3,8001e3b0 <_vfprintf_r+0x1070>
8001e368:	01070713          	addi	a4,a4,16
8001e36c:	00178793          	addi	a5,a5,1
8001e370:	01842023          	sw	s8,0(s0)
8001e374:	01742223          	sw	s7,4(s0)
8001e378:	0ce12623          	sw	a4,204(sp)
8001e37c:	0cf12423          	sw	a5,200(sp)
8001e380:	00840413          	addi	s0,s0,8
8001e384:	fcfcdee3          	bge	s9,a5,8001e360 <_vfprintf_r+0x1020>
8001e388:	0c410613          	addi	a2,sp,196
8001e38c:	00090593          	mv	a1,s2
8001e390:	000d0513          	mv	a0,s10
8001e394:	2ad010ef          	jal	ra,8001fe40 <__sprint_r>
8001e398:	e40510e3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e39c:	ff098993          	addi	s3,s3,-16
8001e3a0:	0cc12703          	lw	a4,204(sp)
8001e3a4:	0c812783          	lw	a5,200(sp)
8001e3a8:	000a0413          	mv	s0,s4
8001e3ac:	fb3bcee3          	blt	s7,s3,8001e368 <_vfprintf_r+0x1028>
8001e3b0:	01370733          	add	a4,a4,s3
8001e3b4:	00178793          	addi	a5,a5,1
8001e3b8:	01842023          	sw	s8,0(s0)
8001e3bc:	01342223          	sw	s3,4(s0)
8001e3c0:	0ce12623          	sw	a4,204(sp)
8001e3c4:	0cf12423          	sw	a5,200(sp)
8001e3c8:	00700613          	li	a2,7
8001e3cc:	a6f65c63          	bge	a2,a5,8001d644 <_vfprintf_r+0x304>
8001e3d0:	00812503          	lw	a0,8(sp)
8001e3d4:	0c410613          	addi	a2,sp,196
8001e3d8:	00090593          	mv	a1,s2
8001e3dc:	265010ef          	jal	ra,8001fe40 <__sprint_r>
8001e3e0:	de051ce3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e3e4:	0cc12703          	lw	a4,204(sp)
8001e3e8:	a5cff06f          	j	8001d644 <_vfprintf_r+0x304>
8001e3ec:	0ac12503          	lw	a0,172(sp)
8001e3f0:	6ea05c63          	blez	a0,8001eae8 <_vfprintf_r+0x17a8>
8001e3f4:	02012783          	lw	a5,32(sp)
8001e3f8:	00fc8733          	add	a4,s9,a5
8001e3fc:	04e12423          	sw	a4,72(sp)
8001e400:	01c12703          	lw	a4,28(sp)
8001e404:	00070993          	mv	s3,a4
8001e408:	34e7c463          	blt	a5,a4,8001e750 <_vfprintf_r+0x1410>
8001e40c:	0cc12703          	lw	a4,204(sp)
8001e410:	03305663          	blez	s3,8001e43c <_vfprintf_r+0x10fc>
8001e414:	0c812603          	lw	a2,200(sp)
8001e418:	01370733          	add	a4,a4,s3
8001e41c:	01942023          	sw	s9,0(s0)
8001e420:	00160613          	addi	a2,a2,1
8001e424:	01342223          	sw	s3,4(s0)
8001e428:	0ce12623          	sw	a4,204(sp)
8001e42c:	0cc12423          	sw	a2,200(sp)
8001e430:	00700593          	li	a1,7
8001e434:	00840413          	addi	s0,s0,8
8001e438:	62c5c0e3          	blt	a1,a2,8001f258 <_vfprintf_r+0x1f18>
8001e43c:	fff9c613          	not	a2,s3
8001e440:	01c12783          	lw	a5,28(sp)
8001e444:	41f65613          	srai	a2,a2,0x1f
8001e448:	00c9f8b3          	and	a7,s3,a2
8001e44c:	411789b3          	sub	s3,a5,a7
8001e450:	3f304263          	bgtz	s3,8001e834 <_vfprintf_r+0x14f4>
8001e454:	01c12783          	lw	a5,28(sp)
8001e458:	400d7613          	andi	a2,s10,1024
8001e45c:	00fc8cb3          	add	s9,s9,a5
8001e460:	1e0616e3          	bnez	a2,8001ee4c <_vfprintf_r+0x1b0c>
8001e464:	0ac12603          	lw	a2,172(sp)
8001e468:	02012783          	lw	a5,32(sp)
8001e46c:	44f64463          	blt	a2,a5,8001e8b4 <_vfprintf_r+0x1574>
8001e470:	001d7593          	andi	a1,s10,1
8001e474:	44059063          	bnez	a1,8001e8b4 <_vfprintf_r+0x1574>
8001e478:	02012783          	lw	a5,32(sp)
8001e47c:	40c78633          	sub	a2,a5,a2
8001e480:	04812783          	lw	a5,72(sp)
8001e484:	419789b3          	sub	s3,a5,s9
8001e488:	01365463          	bge	a2,s3,8001e490 <_vfprintf_r+0x1150>
8001e48c:	00060993          	mv	s3,a2
8001e490:	03305863          	blez	s3,8001e4c0 <_vfprintf_r+0x1180>
8001e494:	0c812783          	lw	a5,200(sp)
8001e498:	01370733          	add	a4,a4,s3
8001e49c:	01942023          	sw	s9,0(s0)
8001e4a0:	00178793          	addi	a5,a5,1
8001e4a4:	01342223          	sw	s3,4(s0)
8001e4a8:	0ce12623          	sw	a4,204(sp)
8001e4ac:	0cf12423          	sw	a5,200(sp)
8001e4b0:	00700593          	li	a1,7
8001e4b4:	00840413          	addi	s0,s0,8
8001e4b8:	00f5d463          	bge	a1,a5,8001e4c0 <_vfprintf_r+0x1180>
8001e4bc:	4280106f          	j	8001f8e4 <_vfprintf_r+0x25a4>
8001e4c0:	fff9c593          	not	a1,s3
8001e4c4:	41f5d593          	srai	a1,a1,0x1f
8001e4c8:	00b9f7b3          	and	a5,s3,a1
8001e4cc:	40f609b3          	sub	s3,a2,a5
8001e4d0:	97305263          	blez	s3,8001d634 <_vfprintf_r+0x2f4>
8001e4d4:	80029837          	lui	a6,0x80029
8001e4d8:	01000613          	li	a2,16
8001e4dc:	0c812783          	lw	a5,200(sp)
8001e4e0:	af880c13          	addi	s8,a6,-1288 # 80028af8 <zeroes.0>
8001e4e4:	6d365263          	bge	a2,s3,8001eba8 <_vfprintf_r+0x1868>
8001e4e8:	000c0693          	mv	a3,s8
8001e4ec:	01000b93          	li	s7,16
8001e4f0:	00098c13          	mv	s8,s3
8001e4f4:	00700c93          	li	s9,7
8001e4f8:	00048993          	mv	s3,s1
8001e4fc:	00068493          	mv	s1,a3
8001e500:	00c0006f          	j	8001e50c <_vfprintf_r+0x11cc>
8001e504:	ff0c0c13          	addi	s8,s8,-16
8001e508:	698bd863          	bge	s7,s8,8001eb98 <_vfprintf_r+0x1858>
8001e50c:	01070713          	addi	a4,a4,16
8001e510:	00178793          	addi	a5,a5,1
8001e514:	00942023          	sw	s1,0(s0)
8001e518:	01742223          	sw	s7,4(s0)
8001e51c:	0ce12623          	sw	a4,204(sp)
8001e520:	0cf12423          	sw	a5,200(sp)
8001e524:	00840413          	addi	s0,s0,8
8001e528:	fcfcdee3          	bge	s9,a5,8001e504 <_vfprintf_r+0x11c4>
8001e52c:	00812503          	lw	a0,8(sp)
8001e530:	0c410613          	addi	a2,sp,196
8001e534:	00090593          	mv	a1,s2
8001e538:	109010ef          	jal	ra,8001fe40 <__sprint_r>
8001e53c:	c8051ee3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e540:	0cc12703          	lw	a4,204(sp)
8001e544:	0c812783          	lw	a5,200(sp)
8001e548:	000a0413          	mv	s0,s4
8001e54c:	fb9ff06f          	j	8001e504 <_vfprintf_r+0x11c4>
8001e550:	001d7713          	andi	a4,s10,1
8001e554:	c8071463          	bnez	a4,8001d9dc <_vfprintf_r+0x69c>
8001e558:	0c812783          	lw	a5,200(sp)
8001e55c:	0cc12703          	lw	a4,204(sp)
8001e560:	01942023          	sw	s9,0(s0)
8001e564:	00178993          	addi	s3,a5,1
8001e568:	00170713          	addi	a4,a4,1
8001e56c:	00c42223          	sw	a2,4(s0)
8001e570:	0ce12623          	sw	a4,204(sp)
8001e574:	0d312423          	sw	s3,200(sp)
8001e578:	00700793          	li	a5,7
8001e57c:	d337d863          	bge	a5,s3,8001daac <_vfprintf_r+0x76c>
8001e580:	00812503          	lw	a0,8(sp)
8001e584:	0c410613          	addi	a2,sp,196
8001e588:	00090593          	mv	a1,s2
8001e58c:	0b5010ef          	jal	ra,8001fe40 <__sprint_r>
8001e590:	c40514e3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e594:	0cc12703          	lw	a4,204(sp)
8001e598:	0c812983          	lw	s3,200(sp)
8001e59c:	000a0b93          	mv	s7,s4
8001e5a0:	d0cff06f          	j	8001daac <_vfprintf_r+0x76c>
8001e5a4:	02012683          	lw	a3,32(sp)
8001e5a8:	00100793          	li	a5,1
8001e5ac:	d0d7d063          	bge	a5,a3,8001daac <_vfprintf_r+0x76c>
8001e5b0:	80029837          	lui	a6,0x80029
8001e5b4:	01100793          	li	a5,17
8001e5b8:	af880c13          	addi	s8,a6,-1288 # 80028af8 <zeroes.0>
8001e5bc:	70d7d063          	bge	a5,a3,8001ecbc <_vfprintf_r+0x197c>
8001e5c0:	000c0693          	mv	a3,s8
8001e5c4:	01000793          	li	a5,16
8001e5c8:	00040c13          	mv	s8,s0
8001e5cc:	00700c93          	li	s9,7
8001e5d0:	00068413          	mv	s0,a3
8001e5d4:	00c0006f          	j	8001e5e0 <_vfprintf_r+0x12a0>
8001e5d8:	ff0c0c13          	addi	s8,s8,-16
8001e5dc:	6d87da63          	bge	a5,s8,8001ecb0 <_vfprintf_r+0x1970>
8001e5e0:	01070713          	addi	a4,a4,16
8001e5e4:	00198993          	addi	s3,s3,1
8001e5e8:	008ba023          	sw	s0,0(s7)
8001e5ec:	00fba223          	sw	a5,4(s7)
8001e5f0:	0ce12623          	sw	a4,204(sp)
8001e5f4:	0d312423          	sw	s3,200(sp)
8001e5f8:	008b8b93          	addi	s7,s7,8
8001e5fc:	fd3cdee3          	bge	s9,s3,8001e5d8 <_vfprintf_r+0x1298>
8001e600:	00812503          	lw	a0,8(sp)
8001e604:	0c410613          	addi	a2,sp,196
8001e608:	00090593          	mv	a1,s2
8001e60c:	035010ef          	jal	ra,8001fe40 <__sprint_r>
8001e610:	bc0514e3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e614:	0cc12703          	lw	a4,204(sp)
8001e618:	0c812983          	lw	s3,200(sp)
8001e61c:	000a0b93          	mv	s7,s4
8001e620:	01000793          	li	a5,16
8001e624:	fb5ff06f          	j	8001e5d8 <_vfprintf_r+0x1298>
8001e628:	01412703          	lw	a4,20(sp)
8001e62c:	010ff793          	andi	a5,t6,16
8001e630:	00072b83          	lw	s7,0(a4)
8001e634:	00470713          	addi	a4,a4,4
8001e638:	00e12a23          	sw	a4,20(sp)
8001e63c:	04079a63          	bnez	a5,8001e690 <_vfprintf_r+0x1350>
8001e640:	040ff793          	andi	a5,t6,64
8001e644:	04078063          	beqz	a5,8001e684 <_vfprintf_r+0x1344>
8001e648:	010b9b93          	slli	s7,s7,0x10
8001e64c:	010bdb93          	srli	s7,s7,0x10
8001e650:	00000d93          	li	s11,0
8001e654:	00100713          	li	a4,1
8001e658:	9d8ff06f          	j	8001d830 <_vfprintf_r+0x4f0>
8001e65c:	00000b93          	li	s7,0
8001e660:	19010c93          	addi	s9,sp,400
8001e664:	970ff06f          	j	8001d7d4 <_vfprintf_r+0x494>
8001e668:	001d7793          	andi	a5,s10,1
8001e66c:	00079463          	bnez	a5,8001e674 <_vfprintf_r+0x1334>
8001e670:	fc5fe06f          	j	8001d634 <_vfprintf_r+0x2f4>
8001e674:	859ff06f          	j	8001decc <_vfprintf_r+0xb8c>
8001e678:	0004c883          	lbu	a7,0(s1)
8001e67c:	00f12a23          	sw	a5,20(sp)
8001e680:	e61fe06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001e684:	200ff793          	andi	a5,t6,512
8001e688:	00078463          	beqz	a5,8001e690 <_vfprintf_r+0x1350>
8001e68c:	0ffbfb93          	zext.b	s7,s7
8001e690:	00000d93          	li	s11,0
8001e694:	00100713          	li	a4,1
8001e698:	998ff06f          	j	8001d830 <_vfprintf_r+0x4f0>
8001e69c:	200d7793          	andi	a5,s10,512
8001e6a0:	400792e3          	bnez	a5,8001f2a4 <_vfprintf_r+0x1f64>
8001e6a4:	41fbdd93          	srai	s11,s7,0x1f
8001e6a8:	000d8793          	mv	a5,s11
8001e6ac:	8fcff06f          	j	8001d7a8 <_vfprintf_r+0x468>
8001e6b0:	200d7793          	andi	a5,s10,512
8001e6b4:	3e0792e3          	bnez	a5,8001f298 <_vfprintf_r+0x1f58>
8001e6b8:	00000d93          	li	s11,0
8001e6bc:	96cff06f          	j	8001d828 <_vfprintf_r+0x4e8>
8001e6c0:	03812783          	lw	a5,56(sp)
8001e6c4:	0004c883          	lbu	a7,0(s1)
8001e6c8:	00079463          	bnez	a5,8001e6d0 <_vfprintf_r+0x1390>
8001e6cc:	e15fe06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001e6d0:	0007c783          	lbu	a5,0(a5)
8001e6d4:	00079463          	bnez	a5,8001e6dc <_vfprintf_r+0x139c>
8001e6d8:	e09fe06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001e6dc:	400d6d13          	ori	s10,s10,1024
8001e6e0:	e01fe06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001e6e4:	010d7793          	andi	a5,s10,16
8001e6e8:	56079663          	bnez	a5,8001ec54 <_vfprintf_r+0x1914>
8001e6ec:	040d7793          	andi	a5,s10,64
8001e6f0:	38079ae3          	bnez	a5,8001f284 <_vfprintf_r+0x1f44>
8001e6f4:	200d7e13          	andi	t3,s10,512
8001e6f8:	540e0e63          	beqz	t3,8001ec54 <_vfprintf_r+0x1914>
8001e6fc:	01412783          	lw	a5,20(sp)
8001e700:	00c12703          	lw	a4,12(sp)
8001e704:	0007a783          	lw	a5,0(a5)
8001e708:	00e78023          	sb	a4,0(a5)
8001e70c:	e6cff06f          	j	8001dd78 <_vfprintf_r+0xa38>
8001e710:	01412783          	lw	a5,20(sp)
8001e714:	09010513          	addi	a0,sp,144
8001e718:	01112823          	sw	a7,16(sp)
8001e71c:	00778c13          	addi	s8,a5,7
8001e720:	ff8c7c13          	andi	s8,s8,-8
8001e724:	000c2583          	lw	a1,0(s8)
8001e728:	004c2603          	lw	a2,4(s8)
8001e72c:	008c0793          	addi	a5,s8,8
8001e730:	00f12a23          	sw	a5,20(sp)
8001e734:	f75e60ef          	jal	ra,800056a8 <__extenddftf2>
8001e738:	09012583          	lw	a1,144(sp)
8001e73c:	09412603          	lw	a2,148(sp)
8001e740:	09812683          	lw	a3,152(sp)
8001e744:	09c12703          	lw	a4,156(sp)
8001e748:	01012883          	lw	a7,16(sp)
8001e74c:	978ff06f          	j	8001d8c4 <_vfprintf_r+0x584>
8001e750:	00078993          	mv	s3,a5
8001e754:	0cc12703          	lw	a4,204(sp)
8001e758:	cb304ee3          	bgtz	s3,8001e414 <_vfprintf_r+0x10d4>
8001e75c:	ce1ff06f          	j	8001e43c <_vfprintf_r+0x10fc>
8001e760:	000d0f93          	mv	t6,s10
8001e764:	d7cff06f          	j	8001dce0 <_vfprintf_r+0x9a0>
8001e768:	800297b7          	lui	a5,0x80029
8001e76c:	8d478793          	addi	a5,a5,-1836 # 800288d4 <_ctype_+0x128>
8001e770:	02f12a23          	sw	a5,52(sp)
8001e774:	020d7793          	andi	a5,s10,32
8001e778:	1e078063          	beqz	a5,8001e958 <_vfprintf_r+0x1618>
8001e77c:	01412783          	lw	a5,20(sp)
8001e780:	00778c13          	addi	s8,a5,7
8001e784:	ff8c7c13          	andi	s8,s8,-8
8001e788:	000c2b83          	lw	s7,0(s8)
8001e78c:	004c2d83          	lw	s11,4(s8)
8001e790:	008c0793          	addi	a5,s8,8
8001e794:	00f12a23          	sw	a5,20(sp)
8001e798:	001d7793          	andi	a5,s10,1
8001e79c:	00078e63          	beqz	a5,8001e7b8 <_vfprintf_r+0x1478>
8001e7a0:	01bbe7b3          	or	a5,s7,s11
8001e7a4:	00078a63          	beqz	a5,8001e7b8 <_vfprintf_r+0x1478>
8001e7a8:	03000793          	li	a5,48
8001e7ac:	0af10423          	sb	a5,168(sp)
8001e7b0:	0b1104a3          	sb	a7,169(sp)
8001e7b4:	002d6d13          	ori	s10,s10,2
8001e7b8:	bffd7f93          	andi	t6,s10,-1025
8001e7bc:	00200713          	li	a4,2
8001e7c0:	870ff06f          	j	8001d830 <_vfprintf_r+0x4f0>
8001e7c4:	0014c883          	lbu	a7,1(s1)
8001e7c8:	020d6d13          	ori	s10,s10,32
8001e7cc:	00148493          	addi	s1,s1,1
8001e7d0:	d11fe06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001e7d4:	0014c883          	lbu	a7,1(s1)
8001e7d8:	200d6d13          	ori	s10,s10,512
8001e7dc:	00148493          	addi	s1,s1,1
8001e7e0:	d01fe06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001e7e4:	00812503          	lw	a0,8(sp)
8001e7e8:	0c410613          	addi	a2,sp,196
8001e7ec:	00090593          	mv	a1,s2
8001e7f0:	650010ef          	jal	ra,8001fe40 <__sprint_r>
8001e7f4:	9e0512e3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e7f8:	0cc12703          	lw	a4,204(sp)
8001e7fc:	000a0413          	mv	s0,s4
8001e800:	efcff06f          	j	8001defc <_vfprintf_r+0xbbc>
8001e804:	800297b7          	lui	a5,0x80029
8001e808:	8c078793          	addi	a5,a5,-1856 # 800288c0 <_ctype_+0x114>
8001e80c:	02f12a23          	sw	a5,52(sp)
8001e810:	f65ff06f          	j	8001e774 <_vfprintf_r+0x1434>
8001e814:	00600793          	li	a5,6
8001e818:	00098b93          	mv	s7,s3
8001e81c:	2737e0e3          	bltu	a5,s3,8001f27c <_vfprintf_r+0x1f3c>
8001e820:	800297b7          	lui	a5,0x80029
8001e824:	000b8d93          	mv	s11,s7
8001e828:	01812a23          	sw	s8,20(sp)
8001e82c:	8e878c93          	addi	s9,a5,-1816 # 800288e8 <_ctype_+0x13c>
8001e830:	d1dfe06f          	j	8001d54c <_vfprintf_r+0x20c>
8001e834:	80029837          	lui	a6,0x80029
8001e838:	01000593          	li	a1,16
8001e83c:	0c812603          	lw	a2,200(sp)
8001e840:	af880c13          	addi	s8,a6,-1288 # 80028af8 <zeroes.0>
8001e844:	5135dc63          	bge	a1,s3,8001ed5c <_vfprintf_r+0x1a1c>
8001e848:	000c0793          	mv	a5,s8
8001e84c:	01000e93          	li	t4,16
8001e850:	00098c13          	mv	s8,s3
8001e854:	00700b93          	li	s7,7
8001e858:	00048993          	mv	s3,s1
8001e85c:	00078493          	mv	s1,a5
8001e860:	00c0006f          	j	8001e86c <_vfprintf_r+0x152c>
8001e864:	ff0c0c13          	addi	s8,s8,-16
8001e868:	4f8ed263          	bge	t4,s8,8001ed4c <_vfprintf_r+0x1a0c>
8001e86c:	01070713          	addi	a4,a4,16
8001e870:	00160613          	addi	a2,a2,1
8001e874:	00942023          	sw	s1,0(s0)
8001e878:	01d42223          	sw	t4,4(s0)
8001e87c:	0ce12623          	sw	a4,204(sp)
8001e880:	0cc12423          	sw	a2,200(sp)
8001e884:	00840413          	addi	s0,s0,8
8001e888:	fccbdee3          	bge	s7,a2,8001e864 <_vfprintf_r+0x1524>
8001e88c:	00812503          	lw	a0,8(sp)
8001e890:	0c410613          	addi	a2,sp,196
8001e894:	00090593          	mv	a1,s2
8001e898:	5a8010ef          	jal	ra,8001fe40 <__sprint_r>
8001e89c:	92051ee3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e8a0:	0cc12703          	lw	a4,204(sp)
8001e8a4:	0c812603          	lw	a2,200(sp)
8001e8a8:	000a0413          	mv	s0,s4
8001e8ac:	01000e93          	li	t4,16
8001e8b0:	fb5ff06f          	j	8001e864 <_vfprintf_r+0x1524>
8001e8b4:	02c12783          	lw	a5,44(sp)
8001e8b8:	0c812583          	lw	a1,200(sp)
8001e8bc:	03012683          	lw	a3,48(sp)
8001e8c0:	00e78733          	add	a4,a5,a4
8001e8c4:	00158593          	addi	a1,a1,1
8001e8c8:	00d42023          	sw	a3,0(s0)
8001e8cc:	00f42223          	sw	a5,4(s0)
8001e8d0:	0ce12623          	sw	a4,204(sp)
8001e8d4:	0cb12423          	sw	a1,200(sp)
8001e8d8:	00700513          	li	a0,7
8001e8dc:	00840413          	addi	s0,s0,8
8001e8e0:	b8b55ce3          	bge	a0,a1,8001e478 <_vfprintf_r+0x1138>
8001e8e4:	00812503          	lw	a0,8(sp)
8001e8e8:	0c410613          	addi	a2,sp,196
8001e8ec:	00090593          	mv	a1,s2
8001e8f0:	550010ef          	jal	ra,8001fe40 <__sprint_r>
8001e8f4:	8e0512e3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e8f8:	0ac12603          	lw	a2,172(sp)
8001e8fc:	0cc12703          	lw	a4,204(sp)
8001e900:	000a0413          	mv	s0,s4
8001e904:	b75ff06f          	j	8001e478 <_vfprintf_r+0x1138>
8001e908:	07800793          	li	a5,120
8001e90c:	03000713          	li	a4,48
8001e910:	0ae10423          	sb	a4,168(sp)
8001e914:	0af104a3          	sb	a5,169(sp)
8001e918:	06300713          	li	a4,99
8001e91c:	00012823          	sw	zero,16(sp)
8001e920:	002d6d13          	ori	s10,s10,2
8001e924:	12c10c93          	addi	s9,sp,300
8001e928:	01374463          	blt	a4,s3,8001e930 <_vfprintf_r+0x15f0>
8001e92c:	814ff06f          	j	8001d940 <_vfprintf_r+0x600>
8001e930:	00812503          	lw	a0,8(sp)
8001e934:	00198593          	addi	a1,s3,1
8001e938:	01112823          	sw	a7,16(sp)
8001e93c:	af5f20ef          	jal	ra,80011430 <_malloc_r>
8001e940:	01012883          	lw	a7,16(sp)
8001e944:	00050c93          	mv	s9,a0
8001e948:	00051463          	bnez	a0,8001e950 <_vfprintf_r+0x1610>
8001e94c:	3280106f          	j	8001fc74 <_vfprintf_r+0x2934>
8001e950:	00a12823          	sw	a0,16(sp)
8001e954:	fedfe06f          	j	8001d940 <_vfprintf_r+0x600>
8001e958:	01412703          	lw	a4,20(sp)
8001e95c:	010d7793          	andi	a5,s10,16
8001e960:	00072b83          	lw	s7,0(a4)
8001e964:	00470713          	addi	a4,a4,4
8001e968:	00e12a23          	sw	a4,20(sp)
8001e96c:	06079663          	bnez	a5,8001e9d8 <_vfprintf_r+0x1698>
8001e970:	040d7793          	andi	a5,s10,64
8001e974:	04078e63          	beqz	a5,8001e9d0 <_vfprintf_r+0x1690>
8001e978:	010b9b93          	slli	s7,s7,0x10
8001e97c:	010bdb93          	srli	s7,s7,0x10
8001e980:	00000d93          	li	s11,0
8001e984:	e15ff06f          	j	8001e798 <_vfprintf_r+0x1458>
8001e988:	00812503          	lw	a0,8(sp)
8001e98c:	0c410613          	addi	a2,sp,196
8001e990:	00090593          	mv	a1,s2
8001e994:	4ac010ef          	jal	ra,8001fe40 <__sprint_r>
8001e998:	840510e3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e99c:	0cc12703          	lw	a4,204(sp)
8001e9a0:	0c812983          	lw	s3,200(sp)
8001e9a4:	000a0b93          	mv	s7,s4
8001e9a8:	860ff06f          	j	8001da08 <_vfprintf_r+0x6c8>
8001e9ac:	00812503          	lw	a0,8(sp)
8001e9b0:	0c410613          	addi	a2,sp,196
8001e9b4:	00090593          	mv	a1,s2
8001e9b8:	488010ef          	jal	ra,8001fe40 <__sprint_r>
8001e9bc:	80051ee3          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001e9c0:	0cc12703          	lw	a4,204(sp)
8001e9c4:	0c812983          	lw	s3,200(sp)
8001e9c8:	000a0b93          	mv	s7,s4
8001e9cc:	868ff06f          	j	8001da34 <_vfprintf_r+0x6f4>
8001e9d0:	200d7793          	andi	a5,s10,512
8001e9d4:	0e0792e3          	bnez	a5,8001f2b8 <_vfprintf_r+0x1f78>
8001e9d8:	00000d93          	li	s11,0
8001e9dc:	dbdff06f          	j	8001e798 <_vfprintf_r+0x1458>
8001e9e0:	ccccdeb7          	lui	t4,0xccccd
8001e9e4:	03812703          	lw	a4,56(sp)
8001e9e8:	400fff13          	andi	t5,t6,1024
8001e9ec:	00000613          	li	a2,0
8001e9f0:	19010593          	addi	a1,sp,400
8001e9f4:	00500e13          	li	t3,5
8001e9f8:	ccde8813          	addi	a6,t4,-819 # cccccccd <__bss_end+0x4cc46511>
8001e9fc:	ccce8d13          	addi	s10,t4,-820
8001ea00:	0ff00c13          	li	s8,255
8001ea04:	0540006f          	j	8001ea58 <_vfprintf_r+0x1718>
8001ea08:	017cb7b3          	sltu	a5,s9,s7
8001ea0c:	00fc87b3          	add	a5,s9,a5
8001ea10:	03c7f7b3          	remu	a5,a5,t3
8001ea14:	40fb87b3          	sub	a5,s7,a5
8001ea18:	00fbb5b3          	sltu	a1,s7,a5
8001ea1c:	40bd85b3          	sub	a1,s11,a1
8001ea20:	03a78333          	mul	t1,a5,s10
8001ea24:	030585b3          	mul	a1,a1,a6
8001ea28:	0307b533          	mulhu	a0,a5,a6
8001ea2c:	006585b3          	add	a1,a1,t1
8001ea30:	030787b3          	mul	a5,a5,a6
8001ea34:	00a585b3          	add	a1,a1,a0
8001ea38:	01f59513          	slli	a0,a1,0x1f
8001ea3c:	0015d593          	srli	a1,a1,0x1
8001ea40:	0017d793          	srli	a5,a5,0x1
8001ea44:	00f567b3          	or	a5,a0,a5
8001ea48:	640d8ae3          	beqz	s11,8001f89c <_vfprintf_r+0x255c>
8001ea4c:	00058d93          	mv	s11,a1
8001ea50:	00078b93          	mv	s7,a5
8001ea54:	00068593          	mv	a1,a3
8001ea58:	01bb8cb3          	add	s9,s7,s11
8001ea5c:	017cb7b3          	sltu	a5,s9,s7
8001ea60:	00fc87b3          	add	a5,s9,a5
8001ea64:	03c7f7b3          	remu	a5,a5,t3
8001ea68:	fff58693          	addi	a3,a1,-1
8001ea6c:	00160613          	addi	a2,a2,1
8001ea70:	40fb87b3          	sub	a5,s7,a5
8001ea74:	00fbb533          	sltu	a0,s7,a5
8001ea78:	40ad8533          	sub	a0,s11,a0
8001ea7c:	0307b333          	mulhu	t1,a5,a6
8001ea80:	03050533          	mul	a0,a0,a6
8001ea84:	030787b3          	mul	a5,a5,a6
8001ea88:	00650533          	add	a0,a0,t1
8001ea8c:	01f51513          	slli	a0,a0,0x1f
8001ea90:	0017d793          	srli	a5,a5,0x1
8001ea94:	00f567b3          	or	a5,a0,a5
8001ea98:	00279513          	slli	a0,a5,0x2
8001ea9c:	00f507b3          	add	a5,a0,a5
8001eaa0:	00179793          	slli	a5,a5,0x1
8001eaa4:	40fb87b3          	sub	a5,s7,a5
8001eaa8:	03078793          	addi	a5,a5,48
8001eaac:	fef58fa3          	sb	a5,-1(a1)
8001eab0:	f40f0ce3          	beqz	t5,8001ea08 <_vfprintf_r+0x16c8>
8001eab4:	00074783          	lbu	a5,0(a4)
8001eab8:	f4f618e3          	bne	a2,a5,8001ea08 <_vfprintf_r+0x16c8>
8001eabc:	f58606e3          	beq	a2,s8,8001ea08 <_vfprintf_r+0x16c8>
8001eac0:	2e0d9063          	bnez	s11,8001eda0 <_vfprintf_r+0x1a60>
8001eac4:	00900793          	li	a5,9
8001eac8:	2d77ec63          	bltu	a5,s7,8001eda0 <_vfprintf_r+0x1a60>
8001eacc:	00068c93          	mv	s9,a3
8001ead0:	19010793          	addi	a5,sp,400
8001ead4:	02c12023          	sw	a2,32(sp)
8001ead8:	02e12c23          	sw	a4,56(sp)
8001eadc:	41978bb3          	sub	s7,a5,s9
8001eae0:	000f8d13          	mv	s10,t6
8001eae4:	cf1fe06f          	j	8001d7d4 <_vfprintf_r+0x494>
8001eae8:	0cc12703          	lw	a4,204(sp)
8001eaec:	0c812603          	lw	a2,200(sp)
8001eaf0:	800295b7          	lui	a1,0x80029
8001eaf4:	8f058593          	addi	a1,a1,-1808 # 800288f0 <_ctype_+0x144>
8001eaf8:	00b42023          	sw	a1,0(s0)
8001eafc:	00170713          	addi	a4,a4,1
8001eb00:	00100593          	li	a1,1
8001eb04:	00160613          	addi	a2,a2,1
8001eb08:	00b42223          	sw	a1,4(s0)
8001eb0c:	0ce12623          	sw	a4,204(sp)
8001eb10:	0cc12423          	sw	a2,200(sp)
8001eb14:	00700593          	li	a1,7
8001eb18:	00840413          	addi	s0,s0,8
8001eb1c:	52c5c863          	blt	a1,a2,8001f04c <_vfprintf_r+0x1d0c>
8001eb20:	1a051663          	bnez	a0,8001eccc <_vfprintf_r+0x198c>
8001eb24:	02012783          	lw	a5,32(sp)
8001eb28:	001d7613          	andi	a2,s10,1
8001eb2c:	00f66633          	or	a2,a2,a5
8001eb30:	00061463          	bnez	a2,8001eb38 <_vfprintf_r+0x17f8>
8001eb34:	b01fe06f          	j	8001d634 <_vfprintf_r+0x2f4>
8001eb38:	02c12783          	lw	a5,44(sp)
8001eb3c:	0c812603          	lw	a2,200(sp)
8001eb40:	03012683          	lw	a3,48(sp)
8001eb44:	00e78733          	add	a4,a5,a4
8001eb48:	00160613          	addi	a2,a2,1
8001eb4c:	00d42023          	sw	a3,0(s0)
8001eb50:	00f42223          	sw	a5,4(s0)
8001eb54:	0ce12623          	sw	a4,204(sp)
8001eb58:	0cc12423          	sw	a2,200(sp)
8001eb5c:	00700593          	li	a1,7
8001eb60:	78c5c463          	blt	a1,a2,8001f2e8 <_vfprintf_r+0x1fa8>
8001eb64:	00840413          	addi	s0,s0,8
8001eb68:	1980006f          	j	8001ed00 <_vfprintf_r+0x19c0>
8001eb6c:	00812503          	lw	a0,8(sp)
8001eb70:	3a9020ef          	jal	ra,80021718 <__sinit>
8001eb74:	851fe06f          	j	8001d3c4 <_vfprintf_r+0x84>
8001eb78:	00812503          	lw	a0,8(sp)
8001eb7c:	0c410613          	addi	a2,sp,196
8001eb80:	00090593          	mv	a1,s2
8001eb84:	2bc010ef          	jal	ra,8001fe40 <__sprint_r>
8001eb88:	e4051863          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001eb8c:	0cc12703          	lw	a4,204(sp)
8001eb90:	000a0413          	mv	s0,s4
8001eb94:	b2cff06f          	j	8001dec0 <_vfprintf_r+0xb80>
8001eb98:	00048693          	mv	a3,s1
8001eb9c:	00098493          	mv	s1,s3
8001eba0:	000c0993          	mv	s3,s8
8001eba4:	00068c13          	mv	s8,a3
8001eba8:	01842023          	sw	s8,0(s0)
8001ebac:	01342223          	sw	s3,4(s0)
8001ebb0:	01370733          	add	a4,a4,s3
8001ebb4:	00178793          	addi	a5,a5,1
8001ebb8:	0ce12623          	sw	a4,204(sp)
8001ebbc:	0cf12423          	sw	a5,200(sp)
8001ebc0:	00700613          	li	a2,7
8001ebc4:	00f64463          	blt	a2,a5,8001ebcc <_vfprintf_r+0x188c>
8001ebc8:	a69fe06f          	j	8001d630 <_vfprintf_r+0x2f0>
8001ebcc:	f0dfe06f          	j	8001dad8 <_vfprintf_r+0x798>
8001ebd0:	0d012783          	lw	a5,208(sp)
8001ebd4:	08010593          	addi	a1,sp,128
8001ebd8:	09010513          	addi	a0,sp,144
8001ebdc:	08f12823          	sw	a5,144(sp)
8001ebe0:	0d412783          	lw	a5,212(sp)
8001ebe4:	08012023          	sw	zero,128(sp)
8001ebe8:	08012223          	sw	zero,132(sp)
8001ebec:	08f12a23          	sw	a5,148(sp)
8001ebf0:	0d812783          	lw	a5,216(sp)
8001ebf4:	08012423          	sw	zero,136(sp)
8001ebf8:	08012623          	sw	zero,140(sp)
8001ebfc:	08f12c23          	sw	a5,152(sp)
8001ec00:	0dc12783          	lw	a5,220(sp)
8001ec04:	08f12e23          	sw	a5,156(sp)
8001ec08:	9e4e40ef          	jal	ra,80002dec <__letf2>
8001ec0c:	01012883          	lw	a7,16(sp)
8001ec10:	48054ce3          	bltz	a0,8001f8a8 <_vfprintf_r+0x2568>
8001ec14:	0a714703          	lbu	a4,167(sp)
8001ec18:	04700793          	li	a5,71
8001ec1c:	6317d863          	bge	a5,a7,8001f24c <_vfprintf_r+0x1f0c>
8001ec20:	800297b7          	lui	a5,0x80029
8001ec24:	8b478c93          	addi	s9,a5,-1868 # 800288b4 <_ctype_+0x108>
8001ec28:	00012823          	sw	zero,16(sp)
8001ec2c:	02012423          	sw	zero,40(sp)
8001ec30:	02012223          	sw	zero,36(sp)
8001ec34:	00012e23          	sw	zero,28(sp)
8001ec38:	f7fd7d13          	andi	s10,s10,-129
8001ec3c:	00300d93          	li	s11,3
8001ec40:	00300b93          	li	s7,3
8001ec44:	00000993          	li	s3,0
8001ec48:	00070463          	beqz	a4,8001ec50 <_vfprintf_r+0x1910>
8001ec4c:	badfe06f          	j	8001d7f8 <_vfprintf_r+0x4b8>
8001ec50:	911fe06f          	j	8001d560 <_vfprintf_r+0x220>
8001ec54:	01412783          	lw	a5,20(sp)
8001ec58:	00c12703          	lw	a4,12(sp)
8001ec5c:	0007a783          	lw	a5,0(a5)
8001ec60:	00e7a023          	sw	a4,0(a5)
8001ec64:	914ff06f          	j	8001dd78 <_vfprintf_r+0xa38>
8001ec68:	000c8513          	mv	a0,s9
8001ec6c:	05112423          	sw	a7,72(sp)
8001ec70:	d94fe0ef          	jal	ra,8001d204 <strlen>
8001ec74:	0a714703          	lbu	a4,167(sp)
8001ec78:	fff54693          	not	a3,a0
8001ec7c:	41f6d693          	srai	a3,a3,0x1f
8001ec80:	01812a23          	sw	s8,20(sp)
8001ec84:	00012823          	sw	zero,16(sp)
8001ec88:	02012423          	sw	zero,40(sp)
8001ec8c:	02012223          	sw	zero,36(sp)
8001ec90:	00012e23          	sw	zero,28(sp)
8001ec94:	04812883          	lw	a7,72(sp)
8001ec98:	00050b93          	mv	s7,a0
8001ec9c:	00d57db3          	and	s11,a0,a3
8001eca0:	00000993          	li	s3,0
8001eca4:	00070463          	beqz	a4,8001ecac <_vfprintf_r+0x196c>
8001eca8:	b51fe06f          	j	8001d7f8 <_vfprintf_r+0x4b8>
8001ecac:	8b5fe06f          	j	8001d560 <_vfprintf_r+0x220>
8001ecb0:	00040793          	mv	a5,s0
8001ecb4:	000c0413          	mv	s0,s8
8001ecb8:	00078c13          	mv	s8,a5
8001ecbc:	00870733          	add	a4,a4,s0
8001ecc0:	00198993          	addi	s3,s3,1
8001ecc4:	018ba023          	sw	s8,0(s7)
8001ecc8:	dcdfe06f          	j	8001da94 <_vfprintf_r+0x754>
8001eccc:	02c12783          	lw	a5,44(sp)
8001ecd0:	0c812603          	lw	a2,200(sp)
8001ecd4:	03012683          	lw	a3,48(sp)
8001ecd8:	00e78733          	add	a4,a5,a4
8001ecdc:	00160613          	addi	a2,a2,1
8001ece0:	00d42023          	sw	a3,0(s0)
8001ece4:	00f42223          	sw	a5,4(s0)
8001ece8:	0ce12623          	sw	a4,204(sp)
8001ecec:	0cc12423          	sw	a2,200(sp)
8001ecf0:	00700593          	li	a1,7
8001ecf4:	00840413          	addi	s0,s0,8
8001ecf8:	5ec5c863          	blt	a1,a2,8001f2e8 <_vfprintf_r+0x1fa8>
8001ecfc:	420542e3          	bltz	a0,8001f920 <_vfprintf_r+0x25e0>
8001ed00:	02012783          	lw	a5,32(sp)
8001ed04:	00160613          	addi	a2,a2,1
8001ed08:	01942023          	sw	s9,0(s0)
8001ed0c:	00e78733          	add	a4,a5,a4
8001ed10:	00f42223          	sw	a5,4(s0)
8001ed14:	0ce12623          	sw	a4,204(sp)
8001ed18:	0cc12423          	sw	a2,200(sp)
8001ed1c:	00700793          	li	a5,7
8001ed20:	00c7c463          	blt	a5,a2,8001ed28 <_vfprintf_r+0x19e8>
8001ed24:	90dfe06f          	j	8001d630 <_vfprintf_r+0x2f0>
8001ed28:	db1fe06f          	j	8001dad8 <_vfprintf_r+0x798>
8001ed2c:	0dc12783          	lw	a5,220(sp)
8001ed30:	5807ca63          	bltz	a5,8001f2c4 <_vfprintf_r+0x1f84>
8001ed34:	0a714703          	lbu	a4,167(sp)
8001ed38:	04700793          	li	a5,71
8001ed3c:	3d17dce3          	bge	a5,a7,8001f914 <_vfprintf_r+0x25d4>
8001ed40:	800297b7          	lui	a5,0x80029
8001ed44:	8bc78c93          	addi	s9,a5,-1860 # 800288bc <_ctype_+0x110>
8001ed48:	ee1ff06f          	j	8001ec28 <_vfprintf_r+0x18e8>
8001ed4c:	00048793          	mv	a5,s1
8001ed50:	00098493          	mv	s1,s3
8001ed54:	000c0993          	mv	s3,s8
8001ed58:	00078c13          	mv	s8,a5
8001ed5c:	00e98733          	add	a4,s3,a4
8001ed60:	00160613          	addi	a2,a2,1
8001ed64:	01842023          	sw	s8,0(s0)
8001ed68:	01342223          	sw	s3,4(s0)
8001ed6c:	0ce12623          	sw	a4,204(sp)
8001ed70:	0cc12423          	sw	a2,200(sp)
8001ed74:	00700593          	li	a1,7
8001ed78:	00840413          	addi	s0,s0,8
8001ed7c:	ecc5dc63          	bge	a1,a2,8001e454 <_vfprintf_r+0x1114>
8001ed80:	00812503          	lw	a0,8(sp)
8001ed84:	0c410613          	addi	a2,sp,196
8001ed88:	00090593          	mv	a1,s2
8001ed8c:	0b4010ef          	jal	ra,8001fe40 <__sprint_r>
8001ed90:	c4051463          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001ed94:	0cc12703          	lw	a4,204(sp)
8001ed98:	000a0413          	mv	s0,s4
8001ed9c:	eb8ff06f          	j	8001e454 <_vfprintf_r+0x1114>
8001eda0:	04412783          	lw	a5,68(sp)
8001eda4:	04012583          	lw	a1,64(sp)
8001eda8:	03e12423          	sw	t5,40(sp)
8001edac:	40f686b3          	sub	a3,a3,a5
8001edb0:	00078613          	mv	a2,a5
8001edb4:	00068513          	mv	a0,a3
8001edb8:	03f12223          	sw	t6,36(sp)
8001edbc:	03112023          	sw	a7,32(sp)
8001edc0:	00e12e23          	sw	a4,28(sp)
8001edc4:	00d12823          	sw	a3,16(sp)
8001edc8:	c49fd0ef          	jal	ra,8001ca10 <strncpy>
8001edcc:	017cb7b3          	sltu	a5,s9,s7
8001edd0:	00500613          	li	a2,5
8001edd4:	00fc87b3          	add	a5,s9,a5
8001edd8:	02c7f7b3          	remu	a5,a5,a2
8001eddc:	01c12703          	lw	a4,28(sp)
8001ede0:	ccccd537          	lui	a0,0xccccd
8001ede4:	ccd50313          	addi	t1,a0,-819 # cccccccd <__bss_end+0x4cc46511>
8001ede8:	00174583          	lbu	a1,1(a4)
8001edec:	ccc50513          	addi	a0,a0,-820
8001edf0:	01012683          	lw	a3,16(sp)
8001edf4:	00b035b3          	snez	a1,a1
8001edf8:	00b70733          	add	a4,a4,a1
8001edfc:	02012883          	lw	a7,32(sp)
8001ee00:	02412f83          	lw	t6,36(sp)
8001ee04:	02812f03          	lw	t5,40(sp)
8001ee08:	00000613          	li	a2,0
8001ee0c:	00500e13          	li	t3,5
8001ee10:	00030813          	mv	a6,t1
8001ee14:	40fb87b3          	sub	a5,s7,a5
8001ee18:	00fbb5b3          	sltu	a1,s7,a5
8001ee1c:	40bd85b3          	sub	a1,s11,a1
8001ee20:	02a78533          	mul	a0,a5,a0
8001ee24:	026585b3          	mul	a1,a1,t1
8001ee28:	0267beb3          	mulhu	t4,a5,t1
8001ee2c:	00a585b3          	add	a1,a1,a0
8001ee30:	02678533          	mul	a0,a5,t1
8001ee34:	01d585b3          	add	a1,a1,t4
8001ee38:	01f59793          	slli	a5,a1,0x1f
8001ee3c:	0015d593          	srli	a1,a1,0x1
8001ee40:	00155513          	srli	a0,a0,0x1
8001ee44:	00a7e7b3          	or	a5,a5,a0
8001ee48:	c05ff06f          	j	8001ea4c <_vfprintf_r+0x170c>
8001ee4c:	02412b83          	lw	s7,36(sp)
8001ee50:	80029eb7          	lui	t4,0x80029
8001ee54:	04912623          	sw	s1,76(sp)
8001ee58:	05a12823          	sw	s10,80(sp)
8001ee5c:	03b12223          	sw	s11,36(sp)
8001ee60:	05612a23          	sw	s6,84(sp)
8001ee64:	000c8d13          	mv	s10,s9
8001ee68:	00040693          	mv	a3,s0
8001ee6c:	03812c83          	lw	s9,56(sp)
8001ee70:	02812403          	lw	s0,40(sp)
8001ee74:	04412d83          	lw	s11,68(sp)
8001ee78:	00812483          	lw	s1,8(sp)
8001ee7c:	00700893          	li	a7,7
8001ee80:	01000993          	li	s3,16
8001ee84:	af8e8c13          	addi	s8,t4,-1288 # 80028af8 <zeroes.0>
8001ee88:	080b8863          	beqz	s7,8001ef18 <_vfprintf_r+0x1bd8>
8001ee8c:	16040463          	beqz	s0,8001eff4 <_vfprintf_r+0x1cb4>
8001ee90:	fff40413          	addi	s0,s0,-1
8001ee94:	04012783          	lw	a5,64(sp)
8001ee98:	01b70733          	add	a4,a4,s11
8001ee9c:	01b6a223          	sw	s11,4(a3)
8001eea0:	00f6a023          	sw	a5,0(a3)
8001eea4:	0c812783          	lw	a5,200(sp)
8001eea8:	0ce12623          	sw	a4,204(sp)
8001eeac:	00868693          	addi	a3,a3,8
8001eeb0:	00178793          	addi	a5,a5,1
8001eeb4:	0cf12423          	sw	a5,200(sp)
8001eeb8:	14f8c463          	blt	a7,a5,8001f000 <_vfprintf_r+0x1cc0>
8001eebc:	04812783          	lw	a5,72(sp)
8001eec0:	000cc603          	lbu	a2,0(s9)
8001eec4:	41a78b33          	sub	s6,a5,s10
8001eec8:	01665463          	bge	a2,s6,8001eed0 <_vfprintf_r+0x1b90>
8001eecc:	00060b13          	mv	s6,a2
8001eed0:	03605663          	blez	s6,8001eefc <_vfprintf_r+0x1bbc>
8001eed4:	0c812603          	lw	a2,200(sp)
8001eed8:	01670733          	add	a4,a4,s6
8001eedc:	01a6a023          	sw	s10,0(a3)
8001eee0:	00160613          	addi	a2,a2,1
8001eee4:	0166a223          	sw	s6,4(a3)
8001eee8:	0ce12623          	sw	a4,204(sp)
8001eeec:	0cc12423          	sw	a2,200(sp)
8001eef0:	12c8ca63          	blt	a7,a2,8001f024 <_vfprintf_r+0x1ce4>
8001eef4:	000cc603          	lbu	a2,0(s9)
8001eef8:	00868693          	addi	a3,a3,8
8001eefc:	fffb4593          	not	a1,s6
8001ef00:	41f5d593          	srai	a1,a1,0x1f
8001ef04:	00bb77b3          	and	a5,s6,a1
8001ef08:	40f60b33          	sub	s6,a2,a5
8001ef0c:	03604e63          	bgtz	s6,8001ef48 <_vfprintf_r+0x1c08>
8001ef10:	00cd0d33          	add	s10,s10,a2
8001ef14:	f60b9ce3          	bnez	s7,8001ee8c <_vfprintf_r+0x1b4c>
8001ef18:	f6041ce3          	bnez	s0,8001ee90 <_vfprintf_r+0x1b50>
8001ef1c:	04812783          	lw	a5,72(sp)
8001ef20:	03912c23          	sw	s9,56(sp)
8001ef24:	000d0c93          	mv	s9,s10
8001ef28:	04c12483          	lw	s1,76(sp)
8001ef2c:	05012d03          	lw	s10,80(sp)
8001ef30:	05412b03          	lw	s6,84(sp)
8001ef34:	02412d83          	lw	s11,36(sp)
8001ef38:	00068413          	mv	s0,a3
8001ef3c:	d397f463          	bgeu	a5,s9,8001e464 <_vfprintf_r+0x1124>
8001ef40:	00078c93          	mv	s9,a5
8001ef44:	d20ff06f          	j	8001e464 <_vfprintf_r+0x1124>
8001ef48:	800295b7          	lui	a1,0x80029
8001ef4c:	0c812603          	lw	a2,200(sp)
8001ef50:	af858593          	addi	a1,a1,-1288 # 80028af8 <zeroes.0>
8001ef54:	0769da63          	bge	s3,s6,8001efc8 <_vfprintf_r+0x1c88>
8001ef58:	00812e23          	sw	s0,28(sp)
8001ef5c:	000b0413          	mv	s0,s6
8001ef60:	000c0b13          	mv	s6,s8
8001ef64:	00c0006f          	j	8001ef70 <_vfprintf_r+0x1c30>
8001ef68:	ff040413          	addi	s0,s0,-16
8001ef6c:	0489d863          	bge	s3,s0,8001efbc <_vfprintf_r+0x1c7c>
8001ef70:	01070713          	addi	a4,a4,16
8001ef74:	00160613          	addi	a2,a2,1
8001ef78:	0186a023          	sw	s8,0(a3)
8001ef7c:	0136a223          	sw	s3,4(a3)
8001ef80:	0ce12623          	sw	a4,204(sp)
8001ef84:	0cc12423          	sw	a2,200(sp)
8001ef88:	00868693          	addi	a3,a3,8
8001ef8c:	fcc8dee3          	bge	a7,a2,8001ef68 <_vfprintf_r+0x1c28>
8001ef90:	0c410613          	addi	a2,sp,196
8001ef94:	00090593          	mv	a1,s2
8001ef98:	00048513          	mv	a0,s1
8001ef9c:	6a5000ef          	jal	ra,8001fe40 <__sprint_r>
8001efa0:	a2051c63          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001efa4:	ff040413          	addi	s0,s0,-16
8001efa8:	0cc12703          	lw	a4,204(sp)
8001efac:	0c812603          	lw	a2,200(sp)
8001efb0:	000a0693          	mv	a3,s4
8001efb4:	00700893          	li	a7,7
8001efb8:	fa89cce3          	blt	s3,s0,8001ef70 <_vfprintf_r+0x1c30>
8001efbc:	000b0593          	mv	a1,s6
8001efc0:	00040b13          	mv	s6,s0
8001efc4:	01c12403          	lw	s0,28(sp)
8001efc8:	00eb0733          	add	a4,s6,a4
8001efcc:	00160613          	addi	a2,a2,1
8001efd0:	00b6a023          	sw	a1,0(a3)
8001efd4:	0166a223          	sw	s6,4(a3)
8001efd8:	0ce12623          	sw	a4,204(sp)
8001efdc:	0cc12423          	sw	a2,200(sp)
8001efe0:	08c8c6e3          	blt	a7,a2,8001f86c <_vfprintf_r+0x252c>
8001efe4:	000cc603          	lbu	a2,0(s9)
8001efe8:	00868693          	addi	a3,a3,8
8001efec:	00cd0d33          	add	s10,s10,a2
8001eff0:	f25ff06f          	j	8001ef14 <_vfprintf_r+0x1bd4>
8001eff4:	fffc8c93          	addi	s9,s9,-1
8001eff8:	fffb8b93          	addi	s7,s7,-1
8001effc:	e99ff06f          	j	8001ee94 <_vfprintf_r+0x1b54>
8001f000:	0c410613          	addi	a2,sp,196
8001f004:	00090593          	mv	a1,s2
8001f008:	00048513          	mv	a0,s1
8001f00c:	635000ef          	jal	ra,8001fe40 <__sprint_r>
8001f010:	9c051463          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001f014:	0cc12703          	lw	a4,204(sp)
8001f018:	000a0693          	mv	a3,s4
8001f01c:	00700893          	li	a7,7
8001f020:	e9dff06f          	j	8001eebc <_vfprintf_r+0x1b7c>
8001f024:	0c410613          	addi	a2,sp,196
8001f028:	00090593          	mv	a1,s2
8001f02c:	00048513          	mv	a0,s1
8001f030:	611000ef          	jal	ra,8001fe40 <__sprint_r>
8001f034:	9a051263          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001f038:	000cc603          	lbu	a2,0(s9)
8001f03c:	0cc12703          	lw	a4,204(sp)
8001f040:	000a0693          	mv	a3,s4
8001f044:	00700893          	li	a7,7
8001f048:	eb5ff06f          	j	8001eefc <_vfprintf_r+0x1bbc>
8001f04c:	00812503          	lw	a0,8(sp)
8001f050:	0c410613          	addi	a2,sp,196
8001f054:	00090593          	mv	a1,s2
8001f058:	5e9000ef          	jal	ra,8001fe40 <__sprint_r>
8001f05c:	96051e63          	bnez	a0,8001e1d8 <_vfprintf_r+0xe98>
8001f060:	0ac12503          	lw	a0,172(sp)
8001f064:	0cc12703          	lw	a4,204(sp)
8001f068:	000a0413          	mv	s0,s4
8001f06c:	ab5ff06f          	j	8001eb20 <_vfprintf_r+0x17e0>
8001f070:	00812503          	lw	a0,8(sp)
8001f074:	09010b93          	addi	s7,sp,144
8001f078:	0ac10713          	addi	a4,sp,172
8001f07c:	0bc10813          	addi	a6,sp,188
8001f080:	0b010793          	addi	a5,sp,176
8001f084:	00098693          	mv	a3,s3
8001f088:	00200613          	li	a2,2
8001f08c:	000b8593          	mv	a1,s7
8001f090:	05112823          	sw	a7,80(sp)
8001f094:	09e12823          	sw	t5,144(sp)
8001f098:	03e12423          	sw	t5,40(sp)
8001f09c:	09f12a23          	sw	t6,148(sp)
8001f0a0:	03f12223          	sw	t6,36(sp)
8001f0a4:	08512c23          	sw	t0,152(sp)
8001f0a8:	02512023          	sw	t0,32(sp)
8001f0ac:	09d12e23          	sw	t4,156(sp)
8001f0b0:	01d12e23          	sw	t4,28(sp)
8001f0b4:	4b8030ef          	jal	ra,8002256c <_ldtoa_r>
8001f0b8:	001d7713          	andi	a4,s10,1
8001f0bc:	01c12e83          	lw	t4,28(sp)
8001f0c0:	02012283          	lw	t0,32(sp)
8001f0c4:	02412f83          	lw	t6,36(sp)
8001f0c8:	02812f03          	lw	t5,40(sp)
8001f0cc:	05012883          	lw	a7,80(sp)
8001f0d0:	00050c93          	mv	s9,a0
8001f0d4:	0e070ce3          	beqz	a4,8001f9cc <_vfprintf_r+0x268c>
8001f0d8:	013c86b3          	add	a3,s9,s3
8001f0dc:	08010593          	addi	a1,sp,128
8001f0e0:	000b8513          	mv	a0,s7
8001f0e4:	03112023          	sw	a7,32(sp)
8001f0e8:	00d12e23          	sw	a3,28(sp)
8001f0ec:	09e12823          	sw	t5,144(sp)
8001f0f0:	09f12a23          	sw	t6,148(sp)
8001f0f4:	08512c23          	sw	t0,152(sp)
8001f0f8:	09d12e23          	sw	t4,156(sp)
8001f0fc:	08012023          	sw	zero,128(sp)
8001f100:	08012223          	sw	zero,132(sp)
8001f104:	08012423          	sw	zero,136(sp)
8001f108:	08012623          	sw	zero,140(sp)
8001f10c:	ad1e30ef          	jal	ra,80002bdc <__eqtf2>
8001f110:	01c12683          	lw	a3,28(sp)
8001f114:	02012883          	lw	a7,32(sp)
8001f118:	04700813          	li	a6,71
8001f11c:	6a051a63          	bnez	a0,8001f7d0 <_vfprintf_r+0x2490>
8001f120:	0ac12603          	lw	a2,172(sp)
8001f124:	419687b3          	sub	a5,a3,s9
8001f128:	02f12023          	sw	a5,32(sp)
8001f12c:	00c12e23          	sw	a2,28(sp)
8001f130:	ffd00713          	li	a4,-3
8001f134:	00e64463          	blt	a2,a4,8001f13c <_vfprintf_r+0x1dfc>
8001f138:	6ec9d663          	bge	s3,a2,8001f824 <_vfprintf_r+0x24e4>
8001f13c:	ffe88893          	addi	a7,a7,-2
8001f140:	fff60713          	addi	a4,a2,-1
8001f144:	0ae12623          	sw	a4,172(sp)
8001f148:	0ff8f693          	zext.b	a3,a7
8001f14c:	00000613          	li	a2,0
8001f150:	0ad10a23          	sb	a3,180(sp)
8001f154:	02b00693          	li	a3,43
8001f158:	00075a63          	bgez	a4,8001f16c <_vfprintf_r+0x1e2c>
8001f15c:	01c12783          	lw	a5,28(sp)
8001f160:	00100713          	li	a4,1
8001f164:	02d00693          	li	a3,45
8001f168:	40f70733          	sub	a4,a4,a5
8001f16c:	0ad10aa3          	sb	a3,181(sp)
8001f170:	00900693          	li	a3,9
8001f174:	0ee6d0e3          	bge	a3,a4,8001fa54 <_vfprintf_r+0x2714>
8001f178:	0c310813          	addi	a6,sp,195
8001f17c:	00080593          	mv	a1,a6
8001f180:	00a00513          	li	a0,10
8001f184:	06300f13          	li	t5,99
8001f188:	02a767b3          	rem	a5,a4,a0
8001f18c:	00058613          	mv	a2,a1
8001f190:	00070693          	mv	a3,a4
8001f194:	fff58593          	addi	a1,a1,-1
8001f198:	03078793          	addi	a5,a5,48
8001f19c:	fef60fa3          	sb	a5,-1(a2)
8001f1a0:	02a74733          	div	a4,a4,a0
8001f1a4:	fedf42e3          	blt	t5,a3,8001f188 <_vfprintf_r+0x1e48>
8001f1a8:	03070713          	addi	a4,a4,48
8001f1ac:	ffe60693          	addi	a3,a2,-2
8001f1b0:	fee58fa3          	sb	a4,-1(a1)
8001f1b4:	2b06f4e3          	bgeu	a3,a6,8001fc5c <_vfprintf_r+0x291c>
8001f1b8:	0b610713          	addi	a4,sp,182
8001f1bc:	0006c783          	lbu	a5,0(a3)
8001f1c0:	00168693          	addi	a3,a3,1
8001f1c4:	00170713          	addi	a4,a4,1
8001f1c8:	fef70fa3          	sb	a5,-1(a4)
8001f1cc:	ff0698e3          	bne	a3,a6,8001f1bc <_vfprintf_r+0x1e7c>
8001f1d0:	0c510713          	addi	a4,sp,197
8001f1d4:	0b610793          	addi	a5,sp,182
8001f1d8:	40c70733          	sub	a4,a4,a2
8001f1dc:	00e78733          	add	a4,a5,a4
8001f1e0:	0b410693          	addi	a3,sp,180
8001f1e4:	40d707b3          	sub	a5,a4,a3
8001f1e8:	02f12e23          	sw	a5,60(sp)
8001f1ec:	02012783          	lw	a5,32(sp)
8001f1f0:	03c12683          	lw	a3,60(sp)
8001f1f4:	00100713          	li	a4,1
8001f1f8:	00d78bb3          	add	s7,a5,a3
8001f1fc:	08f754e3          	bge	a4,a5,8001fa84 <_vfprintf_r+0x2744>
8001f200:	02c12783          	lw	a5,44(sp)
8001f204:	00fb8bb3          	add	s7,s7,a5
8001f208:	fffbc693          	not	a3,s7
8001f20c:	bffd7e13          	andi	t3,s10,-1025
8001f210:	41f6d693          	srai	a3,a3,0x1f
8001f214:	100e6793          	ori	a5,t3,256
8001f218:	04f12623          	sw	a5,76(sp)
8001f21c:	00dbfdb3          	and	s11,s7,a3
8001f220:	02012423          	sw	zero,40(sp)
8001f224:	02012223          	sw	zero,36(sp)
8001f228:	00012e23          	sw	zero,28(sp)
8001f22c:	04812783          	lw	a5,72(sp)
8001f230:	5c078e63          	beqz	a5,8001f80c <_vfprintf_r+0x24cc>
8001f234:	02d00713          	li	a4,45
8001f238:	04c12d03          	lw	s10,76(sp)
8001f23c:	0ae103a3          	sb	a4,167(sp)
8001f240:	00000993          	li	s3,0
8001f244:	001d8d93          	addi	s11,s11,1
8001f248:	b18fe06f          	j	8001d560 <_vfprintf_r+0x220>
8001f24c:	800297b7          	lui	a5,0x80029
8001f250:	8b078c93          	addi	s9,a5,-1872 # 800288b0 <_ctype_+0x104>
8001f254:	9d5ff06f          	j	8001ec28 <_vfprintf_r+0x18e8>
8001f258:	00812503          	lw	a0,8(sp)
8001f25c:	0c410613          	addi	a2,sp,196
8001f260:	00090593          	mv	a1,s2
8001f264:	3dd000ef          	jal	ra,8001fe40 <__sprint_r>
8001f268:	00050463          	beqz	a0,8001f270 <_vfprintf_r+0x1f30>
8001f26c:	f6dfe06f          	j	8001e1d8 <_vfprintf_r+0xe98>
8001f270:	0cc12703          	lw	a4,204(sp)
8001f274:	000a0413          	mv	s0,s4
8001f278:	9c4ff06f          	j	8001e43c <_vfprintf_r+0x10fc>
8001f27c:	00600b93          	li	s7,6
8001f280:	da0ff06f          	j	8001e820 <_vfprintf_r+0x14e0>
8001f284:	01412783          	lw	a5,20(sp)
8001f288:	00c12703          	lw	a4,12(sp)
8001f28c:	0007a783          	lw	a5,0(a5)
8001f290:	00e79023          	sh	a4,0(a5)
8001f294:	ae5fe06f          	j	8001dd78 <_vfprintf_r+0xa38>
8001f298:	0ffbfb93          	zext.b	s7,s7
8001f29c:	00000d93          	li	s11,0
8001f2a0:	d88fe06f          	j	8001d828 <_vfprintf_r+0x4e8>
8001f2a4:	018b9b93          	slli	s7,s7,0x18
8001f2a8:	418bdb93          	srai	s7,s7,0x18
8001f2ac:	41fbdd93          	srai	s11,s7,0x1f
8001f2b0:	000d8793          	mv	a5,s11
8001f2b4:	cf4fe06f          	j	8001d7a8 <_vfprintf_r+0x468>
8001f2b8:	0ffbfb93          	zext.b	s7,s7
8001f2bc:	00000d93          	li	s11,0
8001f2c0:	cd8ff06f          	j	8001e798 <_vfprintf_r+0x1458>
8001f2c4:	02d00793          	li	a5,45
8001f2c8:	0af103a3          	sb	a5,167(sp)
8001f2cc:	02d00713          	li	a4,45
8001f2d0:	a69ff06f          	j	8001ed38 <_vfprintf_r+0x19f8>
8001f2d4:	00812503          	lw	a0,8(sp)
8001f2d8:	0c410613          	addi	a2,sp,196
8001f2dc:	00090593          	mv	a1,s2
8001f2e0:	361000ef          	jal	ra,8001fe40 <__sprint_r>
8001f2e4:	bb0fe06f          	j	8001d694 <_vfprintf_r+0x354>
8001f2e8:	00812503          	lw	a0,8(sp)
8001f2ec:	0c410613          	addi	a2,sp,196
8001f2f0:	00090593          	mv	a1,s2
8001f2f4:	34d000ef          	jal	ra,8001fe40 <__sprint_r>
8001f2f8:	00050463          	beqz	a0,8001f300 <_vfprintf_r+0x1fc0>
8001f2fc:	eddfe06f          	j	8001e1d8 <_vfprintf_r+0xe98>
8001f300:	0ac12503          	lw	a0,172(sp)
8001f304:	0cc12703          	lw	a4,204(sp)
8001f308:	0c812603          	lw	a2,200(sp)
8001f30c:	000a0413          	mv	s0,s4
8001f310:	9edff06f          	j	8001ecfc <_vfprintf_r+0x19bc>
8001f314:	00812503          	lw	a0,8(sp)
8001f318:	09010b93          	addi	s7,sp,144
8001f31c:	0ac10713          	addi	a4,sp,172
8001f320:	00098693          	mv	a3,s3
8001f324:	0bc10813          	addi	a6,sp,188
8001f328:	0b010793          	addi	a5,sp,176
8001f32c:	00300613          	li	a2,3
8001f330:	000b8593          	mv	a1,s7
8001f334:	05112823          	sw	a7,80(sp)
8001f338:	09e12823          	sw	t5,144(sp)
8001f33c:	03e12423          	sw	t5,40(sp)
8001f340:	09f12a23          	sw	t6,148(sp)
8001f344:	03f12223          	sw	t6,36(sp)
8001f348:	08512c23          	sw	t0,152(sp)
8001f34c:	02512023          	sw	t0,32(sp)
8001f350:	09d12e23          	sw	t4,156(sp)
8001f354:	01d12e23          	sw	t4,28(sp)
8001f358:	214030ef          	jal	ra,8002256c <_ldtoa_r>
8001f35c:	00054683          	lbu	a3,0(a0)
8001f360:	03000713          	li	a4,48
8001f364:	01c12e83          	lw	t4,28(sp)
8001f368:	02012283          	lw	t0,32(sp)
8001f36c:	02412f83          	lw	t6,36(sp)
8001f370:	02812f03          	lw	t5,40(sp)
8001f374:	05012883          	lw	a7,80(sp)
8001f378:	00050c93          	mv	s9,a0
8001f37c:	72e68063          	beq	a3,a4,8001fa9c <_vfprintf_r+0x275c>
8001f380:	08010793          	addi	a5,sp,128
8001f384:	00f12e23          	sw	a5,28(sp)
8001f388:	0ac12703          	lw	a4,172(sp)
8001f38c:	01370733          	add	a4,a4,s3
8001f390:	00ec86b3          	add	a3,s9,a4
8001f394:	04600813          	li	a6,70
8001f398:	01c12583          	lw	a1,28(sp)
8001f39c:	000b8513          	mv	a0,s7
8001f3a0:	03112423          	sw	a7,40(sp)
8001f3a4:	02d12223          	sw	a3,36(sp)
8001f3a8:	03012023          	sw	a6,32(sp)
8001f3ac:	09e12823          	sw	t5,144(sp)
8001f3b0:	09f12a23          	sw	t6,148(sp)
8001f3b4:	08512c23          	sw	t0,152(sp)
8001f3b8:	09d12e23          	sw	t4,156(sp)
8001f3bc:	08012023          	sw	zero,128(sp)
8001f3c0:	08012223          	sw	zero,132(sp)
8001f3c4:	08012423          	sw	zero,136(sp)
8001f3c8:	08012623          	sw	zero,140(sp)
8001f3cc:	811e30ef          	jal	ra,80002bdc <__eqtf2>
8001f3d0:	02012803          	lw	a6,32(sp)
8001f3d4:	02412683          	lw	a3,36(sp)
8001f3d8:	02812883          	lw	a7,40(sp)
8001f3dc:	3e051a63          	bnez	a0,8001f7d0 <_vfprintf_r+0x2490>
8001f3e0:	0ac12603          	lw	a2,172(sp)
8001f3e4:	419687b3          	sub	a5,a3,s9
8001f3e8:	02f12023          	sw	a5,32(sp)
8001f3ec:	00c12e23          	sw	a2,28(sp)
8001f3f0:	04600713          	li	a4,70
8001f3f4:	5ee80c63          	beq	a6,a4,8001f9ec <_vfprintf_r+0x26ac>
8001f3f8:	fff60713          	addi	a4,a2,-1
8001f3fc:	d49ff06f          	j	8001f144 <_vfprintf_r+0x1e04>
8001f400:	00812503          	lw	a0,8(sp)
8001f404:	09010b93          	addi	s7,sp,144
8001f408:	00198693          	addi	a3,s3,1
8001f40c:	0bc10813          	addi	a6,sp,188
8001f410:	0b010793          	addi	a5,sp,176
8001f414:	0ac10713          	addi	a4,sp,172
8001f418:	00200613          	li	a2,2
8001f41c:	000b8593          	mv	a1,s7
8001f420:	05112a23          	sw	a7,84(sp)
8001f424:	00068c13          	mv	s8,a3
8001f428:	09e12823          	sw	t5,144(sp)
8001f42c:	05e12823          	sw	t5,80(sp)
8001f430:	09f12a23          	sw	t6,148(sp)
8001f434:	03f12423          	sw	t6,40(sp)
8001f438:	08512c23          	sw	t0,152(sp)
8001f43c:	02512223          	sw	t0,36(sp)
8001f440:	09d12e23          	sw	t4,156(sp)
8001f444:	03d12023          	sw	t4,32(sp)
8001f448:	124030ef          	jal	ra,8002256c <_ldtoa_r>
8001f44c:	08010793          	addi	a5,sp,128
8001f450:	02012e83          	lw	t4,32(sp)
8001f454:	02412283          	lw	t0,36(sp)
8001f458:	02812f83          	lw	t6,40(sp)
8001f45c:	05012f03          	lw	t5,80(sp)
8001f460:	05412883          	lw	a7,84(sp)
8001f464:	00050c93          	mv	s9,a0
8001f468:	018506b3          	add	a3,a0,s8
8001f46c:	04500813          	li	a6,69
8001f470:	00f12e23          	sw	a5,28(sp)
8001f474:	f25ff06f          	j	8001f398 <_vfprintf_r+0x2058>
8001f478:	08010793          	addi	a5,sp,128
8001f47c:	09010b93          	addi	s7,sp,144
8001f480:	00078593          	mv	a1,a5
8001f484:	0ac10613          	addi	a2,sp,172
8001f488:	000b8513          	mv	a0,s7
8001f48c:	00078c13          	mv	s8,a5
8001f490:	03112e23          	sw	a7,60(sp)
8001f494:	00f12e23          	sw	a5,28(sp)
8001f498:	09e12023          	sw	t5,128(sp)
8001f49c:	09f12223          	sw	t6,132(sp)
8001f4a0:	08512423          	sw	t0,136(sp)
8001f4a4:	09d12623          	sw	t4,140(sp)
8001f4a8:	749020ef          	jal	ra,800223f0 <frexpl>
8001f4ac:	09012703          	lw	a4,144(sp)
8001f4b0:	07010613          	addi	a2,sp,112
8001f4b4:	000c0593          	mv	a1,s8
8001f4b8:	08e12023          	sw	a4,128(sp)
8001f4bc:	09412703          	lw	a4,148(sp)
8001f4c0:	000b8513          	mv	a0,s7
8001f4c4:	06012823          	sw	zero,112(sp)
8001f4c8:	08e12223          	sw	a4,132(sp)
8001f4cc:	09812703          	lw	a4,152(sp)
8001f4d0:	06012a23          	sw	zero,116(sp)
8001f4d4:	06012c23          	sw	zero,120(sp)
8001f4d8:	08e12423          	sw	a4,136(sp)
8001f4dc:	09c12703          	lw	a4,156(sp)
8001f4e0:	08e12623          	sw	a4,140(sp)
8001f4e4:	3ffc0737          	lui	a4,0x3ffc0
8001f4e8:	06e12e23          	sw	a4,124(sp)
8001f4ec:	a45e30ef          	jal	ra,80002f30 <__multf3>
8001f4f0:	09012f03          	lw	t5,144(sp)
8001f4f4:	09412e83          	lw	t4,148(sp)
8001f4f8:	09812803          	lw	a6,152(sp)
8001f4fc:	000c0593          	mv	a1,s8
8001f500:	000b8513          	mv	a0,s7
8001f504:	03e12423          	sw	t5,40(sp)
8001f508:	03d12223          	sw	t4,36(sp)
8001f50c:	03012023          	sw	a6,32(sp)
8001f510:	08012023          	sw	zero,128(sp)
8001f514:	08012223          	sw	zero,132(sp)
8001f518:	08012423          	sw	zero,136(sp)
8001f51c:	08012623          	sw	zero,140(sp)
8001f520:	ebce30ef          	jal	ra,80002bdc <__eqtf2>
8001f524:	09c12d83          	lw	s11,156(sp)
8001f528:	02012803          	lw	a6,32(sp)
8001f52c:	02412e83          	lw	t4,36(sp)
8001f530:	02812f03          	lw	t5,40(sp)
8001f534:	03c12883          	lw	a7,60(sp)
8001f538:	00051663          	bnez	a0,8001f544 <_vfprintf_r+0x2204>
8001f53c:	00100713          	li	a4,1
8001f540:	0ae12623          	sw	a4,172(sp)
8001f544:	06100713          	li	a4,97
8001f548:	6ae88663          	beq	a7,a4,8001fbf4 <_vfprintf_r+0x28b4>
8001f54c:	80029737          	lui	a4,0x80029
8001f550:	8d470793          	addi	a5,a4,-1836 # 800288d4 <_ctype_+0x128>
8001f554:	02f12023          	sw	a5,32(sp)
8001f558:	02912223          	sw	s1,36(sp)
8001f55c:	03a12e23          	sw	s10,60(sp)
8001f560:	05612623          	sw	s6,76(sp)
8001f564:	04812823          	sw	s0,80(sp)
8001f568:	05212a23          	sw	s2,84(sp)
8001f56c:	05912c23          	sw	s9,88(sp)
8001f570:	000c8913          	mv	s2,s9
8001f574:	02012483          	lw	s1,32(sp)
8001f578:	01c12403          	lw	s0,28(sp)
8001f57c:	fff98993          	addi	s3,s3,-1
8001f580:	03112423          	sw	a7,40(sp)
8001f584:	000f0b13          	mv	s6,t5
8001f588:	000e8c13          	mv	s8,t4
8001f58c:	00080c93          	mv	s9,a6
8001f590:	000d8d13          	mv	s10,s11
8001f594:	03c0006f          	j	8001f5d0 <_vfprintf_r+0x2290>
8001f598:	00040593          	mv	a1,s0
8001f59c:	000b8513          	mv	a0,s7
8001f5a0:	09612823          	sw	s6,144(sp)
8001f5a4:	09812a23          	sw	s8,148(sp)
8001f5a8:	09912c23          	sw	s9,152(sp)
8001f5ac:	09a12e23          	sw	s10,156(sp)
8001f5b0:	08012023          	sw	zero,128(sp)
8001f5b4:	08012223          	sw	zero,132(sp)
8001f5b8:	08012423          	sw	zero,136(sp)
8001f5bc:	08012623          	sw	zero,140(sp)
8001f5c0:	e1ce30ef          	jal	ra,80002bdc <__eqtf2>
8001f5c4:	fff98793          	addi	a5,s3,-1
8001f5c8:	5c050c63          	beqz	a0,8001fba0 <_vfprintf_r+0x2860>
8001f5cc:	00078993          	mv	s3,a5
8001f5d0:	400307b7          	lui	a5,0x40030
8001f5d4:	07010613          	addi	a2,sp,112
8001f5d8:	00040593          	mv	a1,s0
8001f5dc:	000b8513          	mv	a0,s7
8001f5e0:	06f12e23          	sw	a5,124(sp)
8001f5e4:	09612023          	sw	s6,128(sp)
8001f5e8:	09812223          	sw	s8,132(sp)
8001f5ec:	09912423          	sw	s9,136(sp)
8001f5f0:	09a12623          	sw	s10,140(sp)
8001f5f4:	06012823          	sw	zero,112(sp)
8001f5f8:	06012a23          	sw	zero,116(sp)
8001f5fc:	06012c23          	sw	zero,120(sp)
8001f600:	931e30ef          	jal	ra,80002f30 <__multf3>
8001f604:	000b8513          	mv	a0,s7
8001f608:	e5de50ef          	jal	ra,80005464 <__fixtfsi>
8001f60c:	00050593          	mv	a1,a0
8001f610:	00050d93          	mv	s11,a0
8001f614:	000b8513          	mv	a0,s7
8001f618:	09012d03          	lw	s10,144(sp)
8001f61c:	09412c83          	lw	s9,148(sp)
8001f620:	09812c03          	lw	s8,152(sp)
8001f624:	09c12b03          	lw	s6,156(sp)
8001f628:	f2de50ef          	jal	ra,80005554 <__floatsitf>
8001f62c:	09012683          	lw	a3,144(sp)
8001f630:	06010613          	addi	a2,sp,96
8001f634:	07010593          	addi	a1,sp,112
8001f638:	06d12023          	sw	a3,96(sp)
8001f63c:	09412683          	lw	a3,148(sp)
8001f640:	00040513          	mv	a0,s0
8001f644:	07a12823          	sw	s10,112(sp)
8001f648:	06d12223          	sw	a3,100(sp)
8001f64c:	09812683          	lw	a3,152(sp)
8001f650:	07912a23          	sw	s9,116(sp)
8001f654:	07812c23          	sw	s8,120(sp)
8001f658:	06d12423          	sw	a3,104(sp)
8001f65c:	09c12683          	lw	a3,156(sp)
8001f660:	07612e23          	sw	s6,124(sp)
8001f664:	06d12623          	sw	a3,108(sp)
8001f668:	8e5e40ef          	jal	ra,80003f4c <__subtf3>
8001f66c:	01b486b3          	add	a3,s1,s11
8001f670:	0006c583          	lbu	a1,0(a3)
8001f674:	00090613          	mv	a2,s2
8001f678:	00190913          	addi	s2,s2,1
8001f67c:	08012b03          	lw	s6,128(sp)
8001f680:	08412c03          	lw	s8,132(sp)
8001f684:	08812c83          	lw	s9,136(sp)
8001f688:	08c12d03          	lw	s10,140(sp)
8001f68c:	fff00793          	li	a5,-1
8001f690:	feb90fa3          	sb	a1,-1(s2)
8001f694:	f0f992e3          	bne	s3,a5,8001f598 <_vfprintf_r+0x2258>
8001f698:	01c12583          	lw	a1,28(sp)
8001f69c:	000b0f13          	mv	t5,s6
8001f6a0:	000c0e93          	mv	t4,s8
8001f6a4:	000c8813          	mv	a6,s9
8001f6a8:	05b12e23          	sw	s11,92(sp)
8001f6ac:	3ffe09b7          	lui	s3,0x3ffe0
8001f6b0:	000d0d93          	mv	s11,s10
8001f6b4:	000b8513          	mv	a0,s7
8001f6b8:	02412483          	lw	s1,36(sp)
8001f6bc:	05012403          	lw	s0,80(sp)
8001f6c0:	02c12223          	sw	a2,36(sp)
8001f6c4:	04c12b03          	lw	s6,76(sp)
8001f6c8:	03c12d03          	lw	s10,60(sp)
8001f6cc:	09e12823          	sw	t5,144(sp)
8001f6d0:	05e12823          	sw	t5,80(sp)
8001f6d4:	09d12a23          	sw	t4,148(sp)
8001f6d8:	05d12623          	sw	t4,76(sp)
8001f6dc:	09012c23          	sw	a6,152(sp)
8001f6e0:	03012e23          	sw	a6,60(sp)
8001f6e4:	09b12e23          	sw	s11,156(sp)
8001f6e8:	08012023          	sw	zero,128(sp)
8001f6ec:	08012223          	sw	zero,132(sp)
8001f6f0:	08012423          	sw	zero,136(sp)
8001f6f4:	09312623          	sw	s3,140(sp)
8001f6f8:	db0e30ef          	jal	ra,80002ca8 <__getf2>
8001f6fc:	00090c13          	mv	s8,s2
8001f700:	05812c83          	lw	s9,88(sp)
8001f704:	05412903          	lw	s2,84(sp)
8001f708:	02412603          	lw	a2,36(sp)
8001f70c:	02812883          	lw	a7,40(sp)
8001f710:	02a04863          	bgtz	a0,8001f740 <_vfprintf_r+0x2400>
8001f714:	01c12583          	lw	a1,28(sp)
8001f718:	000b8513          	mv	a0,s7
8001f71c:	03112223          	sw	a7,36(sp)
8001f720:	02c12423          	sw	a2,40(sp)
8001f724:	cb8e30ef          	jal	ra,80002bdc <__eqtf2>
8001f728:	02412883          	lw	a7,36(sp)
8001f72c:	04051e63          	bnez	a0,8001f788 <_vfprintf_r+0x2448>
8001f730:	05c12783          	lw	a5,92(sp)
8001f734:	02812603          	lw	a2,40(sp)
8001f738:	0017ff93          	andi	t6,a5,1
8001f73c:	040f8663          	beqz	t6,8001f788 <_vfprintf_r+0x2448>
8001f740:	02012783          	lw	a5,32(sp)
8001f744:	0ac12e23          	sw	a2,188(sp)
8001f748:	fffc4603          	lbu	a2,-1(s8)
8001f74c:	00f7c583          	lbu	a1,15(a5) # 4003000f <__STACKSIZE__+0x4002c00f>
8001f750:	000c0693          	mv	a3,s8
8001f754:	02b61063          	bne	a2,a1,8001f774 <_vfprintf_r+0x2434>
8001f758:	03000513          	li	a0,48
8001f75c:	fea68fa3          	sb	a0,-1(a3)
8001f760:	0bc12683          	lw	a3,188(sp)
8001f764:	fff68793          	addi	a5,a3,-1
8001f768:	0af12e23          	sw	a5,188(sp)
8001f76c:	fff6c603          	lbu	a2,-1(a3)
8001f770:	fec586e3          	beq	a1,a2,8001f75c <_vfprintf_r+0x241c>
8001f774:	00160593          	addi	a1,a2,1
8001f778:	03900513          	li	a0,57
8001f77c:	0ff5f593          	zext.b	a1,a1
8001f780:	04a60063          	beq	a2,a0,8001f7c0 <_vfprintf_r+0x2480>
8001f784:	feb68fa3          	sb	a1,-1(a3)
8001f788:	000c0793          	mv	a5,s8
8001f78c:	0ac12703          	lw	a4,172(sp)
8001f790:	419787b3          	sub	a5,a5,s9
8001f794:	06100613          	li	a2,97
8001f798:	00e12e23          	sw	a4,28(sp)
8001f79c:	fff70713          	addi	a4,a4,-1
8001f7a0:	02f12023          	sw	a5,32(sp)
8001f7a4:	0ae12623          	sw	a4,172(sp)
8001f7a8:	07000693          	li	a3,112
8001f7ac:	00c88663          	beq	a7,a2,8001f7b8 <_vfprintf_r+0x2478>
8001f7b0:	05000693          	li	a3,80
8001f7b4:	04100893          	li	a7,65
8001f7b8:	00100613          	li	a2,1
8001f7bc:	995ff06f          	j	8001f150 <_vfprintf_r+0x1e10>
8001f7c0:	02012783          	lw	a5,32(sp)
8001f7c4:	00a7c583          	lbu	a1,10(a5)
8001f7c8:	feb68fa3          	sb	a1,-1(a3)
8001f7cc:	fbdff06f          	j	8001f788 <_vfprintf_r+0x2448>
8001f7d0:	0bc12703          	lw	a4,188(sp)
8001f7d4:	00d77e63          	bgeu	a4,a3,8001f7f0 <_vfprintf_r+0x24b0>
8001f7d8:	03000593          	li	a1,48
8001f7dc:	00170793          	addi	a5,a4,1
8001f7e0:	0af12e23          	sw	a5,188(sp)
8001f7e4:	00b70023          	sb	a1,0(a4)
8001f7e8:	0bc12703          	lw	a4,188(sp)
8001f7ec:	fed768e3          	bltu	a4,a3,8001f7dc <_vfprintf_r+0x249c>
8001f7f0:	0ac12603          	lw	a2,172(sp)
8001f7f4:	419707b3          	sub	a5,a4,s9
8001f7f8:	04700693          	li	a3,71
8001f7fc:	02f12023          	sw	a5,32(sp)
8001f800:	00c12e23          	sw	a2,28(sp)
8001f804:	bed816e3          	bne	a6,a3,8001f3f0 <_vfprintf_r+0x20b0>
8001f808:	925ff06f          	j	8001f12c <_vfprintf_r+0x1dec>
8001f80c:	0a714703          	lbu	a4,167(sp)
8001f810:	04c12d03          	lw	s10,76(sp)
8001f814:	00000993          	li	s3,0
8001f818:	00070463          	beqz	a4,8001f820 <_vfprintf_r+0x24e0>
8001f81c:	fddfd06f          	j	8001d7f8 <_vfprintf_r+0x4b8>
8001f820:	d41fd06f          	j	8001d560 <_vfprintf_r+0x220>
8001f824:	01c12783          	lw	a5,28(sp)
8001f828:	02012703          	lw	a4,32(sp)
8001f82c:	16e7c863          	blt	a5,a4,8001f99c <_vfprintf_r+0x265c>
8001f830:	001d7713          	andi	a4,s10,1
8001f834:	00060b93          	mv	s7,a2
8001f838:	00070663          	beqz	a4,8001f844 <_vfprintf_r+0x2504>
8001f83c:	02c12783          	lw	a5,44(sp)
8001f840:	00f60bb3          	add	s7,a2,a5
8001f844:	400d7e13          	andi	t3,s10,1024
8001f848:	000e0463          	beqz	t3,8001f850 <_vfprintf_r+0x2510>
8001f84c:	2ac04e63          	bgtz	a2,8001fb08 <_vfprintf_r+0x27c8>
8001f850:	fffbc693          	not	a3,s7
8001f854:	41f6d693          	srai	a3,a3,0x1f
8001f858:	00dbfdb3          	and	s11,s7,a3
8001f85c:	06700893          	li	a7,103
8001f860:	02012423          	sw	zero,40(sp)
8001f864:	02012223          	sw	zero,36(sp)
8001f868:	9c5ff06f          	j	8001f22c <_vfprintf_r+0x1eec>
8001f86c:	0c410613          	addi	a2,sp,196
8001f870:	00090593          	mv	a1,s2
8001f874:	00048513          	mv	a0,s1
8001f878:	5c8000ef          	jal	ra,8001fe40 <__sprint_r>
8001f87c:	00050463          	beqz	a0,8001f884 <_vfprintf_r+0x2544>
8001f880:	959fe06f          	j	8001e1d8 <_vfprintf_r+0xe98>
8001f884:	000cc603          	lbu	a2,0(s9)
8001f888:	0cc12703          	lw	a4,204(sp)
8001f88c:	000a0693          	mv	a3,s4
8001f890:	00700893          	li	a7,7
8001f894:	00cd0d33          	add	s10,s10,a2
8001f898:	e7cff06f          	j	8001ef14 <_vfprintf_r+0x1bd4>
8001f89c:	00900513          	li	a0,9
8001f8a0:	9b756663          	bltu	a0,s7,8001ea4c <_vfprintf_r+0x170c>
8001f8a4:	a28ff06f          	j	8001eacc <_vfprintf_r+0x178c>
8001f8a8:	02d00793          	li	a5,45
8001f8ac:	0af103a3          	sb	a5,167(sp)
8001f8b0:	02d00713          	li	a4,45
8001f8b4:	b64ff06f          	j	8001ec18 <_vfprintf_r+0x18d8>
8001f8b8:	0a714703          	lbu	a4,167(sp)
8001f8bc:	01812a23          	sw	s8,20(sp)
8001f8c0:	02012423          	sw	zero,40(sp)
8001f8c4:	02012223          	sw	zero,36(sp)
8001f8c8:	00012e23          	sw	zero,28(sp)
8001f8cc:	00098d93          	mv	s11,s3
8001f8d0:	00098b93          	mv	s7,s3
8001f8d4:	00000993          	li	s3,0
8001f8d8:	00070463          	beqz	a4,8001f8e0 <_vfprintf_r+0x25a0>
8001f8dc:	f1dfd06f          	j	8001d7f8 <_vfprintf_r+0x4b8>
8001f8e0:	c81fd06f          	j	8001d560 <_vfprintf_r+0x220>
8001f8e4:	00812503          	lw	a0,8(sp)
8001f8e8:	0c410613          	addi	a2,sp,196
8001f8ec:	00090593          	mv	a1,s2
8001f8f0:	550000ef          	jal	ra,8001fe40 <__sprint_r>
8001f8f4:	00050463          	beqz	a0,8001f8fc <_vfprintf_r+0x25bc>
8001f8f8:	8e1fe06f          	j	8001e1d8 <_vfprintf_r+0xe98>
8001f8fc:	0ac12603          	lw	a2,172(sp)
8001f900:	02012783          	lw	a5,32(sp)
8001f904:	0cc12703          	lw	a4,204(sp)
8001f908:	000a0413          	mv	s0,s4
8001f90c:	40c78633          	sub	a2,a5,a2
8001f910:	bb1fe06f          	j	8001e4c0 <_vfprintf_r+0x1180>
8001f914:	800297b7          	lui	a5,0x80029
8001f918:	8b878c93          	addi	s9,a5,-1864 # 800288b8 <_ctype_+0x10c>
8001f91c:	b0cff06f          	j	8001ec28 <_vfprintf_r+0x18e8>
8001f920:	80029837          	lui	a6,0x80029
8001f924:	ff000593          	li	a1,-16
8001f928:	40a009b3          	neg	s3,a0
8001f92c:	af880c13          	addi	s8,a6,-1288 # 80028af8 <zeroes.0>
8001f930:	01000b93          	li	s7,16
8001f934:	00700893          	li	a7,7
8001f938:	00b54863          	blt	a0,a1,8001f948 <_vfprintf_r+0x2608>
8001f93c:	0d00006f          	j	8001fa0c <_vfprintf_r+0x26cc>
8001f940:	ff098993          	addi	s3,s3,-16 # 3ffdfff0 <__STACKSIZE__+0x3ffdbff0>
8001f944:	0d3bd463          	bge	s7,s3,8001fa0c <_vfprintf_r+0x26cc>
8001f948:	01070713          	addi	a4,a4,16
8001f94c:	00160613          	addi	a2,a2,1
8001f950:	01842023          	sw	s8,0(s0)
8001f954:	01742223          	sw	s7,4(s0)
8001f958:	0ce12623          	sw	a4,204(sp)
8001f95c:	0cc12423          	sw	a2,200(sp)
8001f960:	00840413          	addi	s0,s0,8
8001f964:	fcc8dee3          	bge	a7,a2,8001f940 <_vfprintf_r+0x2600>
8001f968:	00812503          	lw	a0,8(sp)
8001f96c:	0c410613          	addi	a2,sp,196
8001f970:	00090593          	mv	a1,s2
8001f974:	4cc000ef          	jal	ra,8001fe40 <__sprint_r>
8001f978:	00050463          	beqz	a0,8001f980 <_vfprintf_r+0x2640>
8001f97c:	85dfe06f          	j	8001e1d8 <_vfprintf_r+0xe98>
8001f980:	0cc12703          	lw	a4,204(sp)
8001f984:	0c812603          	lw	a2,200(sp)
8001f988:	000a0413          	mv	s0,s4
8001f98c:	00700893          	li	a7,7
8001f990:	fb1ff06f          	j	8001f940 <_vfprintf_r+0x2600>
8001f994:	000d0f93          	mv	t6,s10
8001f998:	b08fe06f          	j	8001dca0 <_vfprintf_r+0x960>
8001f99c:	02012783          	lw	a5,32(sp)
8001f9a0:	02c12703          	lw	a4,44(sp)
8001f9a4:	06700893          	li	a7,103
8001f9a8:	00e78bb3          	add	s7,a5,a4
8001f9ac:	01c12783          	lw	a5,28(sp)
8001f9b0:	1cf05c63          	blez	a5,8001fb88 <_vfprintf_r+0x2848>
8001f9b4:	400d7e13          	andi	t3,s10,1024
8001f9b8:	140e1a63          	bnez	t3,8001fb0c <_vfprintf_r+0x27cc>
8001f9bc:	fffbc693          	not	a3,s7
8001f9c0:	41f6d693          	srai	a3,a3,0x1f
8001f9c4:	00dbfdb3          	and	s11,s7,a3
8001f9c8:	e99ff06f          	j	8001f860 <_vfprintf_r+0x2520>
8001f9cc:	0bc12783          	lw	a5,188(sp)
8001f9d0:	0ac12603          	lw	a2,172(sp)
8001f9d4:	419787b3          	sub	a5,a5,s9
8001f9d8:	02f12023          	sw	a5,32(sp)
8001f9dc:	f50ff06f          	j	8001f12c <_vfprintf_r+0x1dec>
8001f9e0:	fff00793          	li	a5,-1
8001f9e4:	00f12623          	sw	a5,12(sp)
8001f9e8:	cbdfd06f          	j	8001d6a4 <_vfprintf_r+0x364>
8001f9ec:	001d7713          	andi	a4,s10,1
8001f9f0:	00c12e23          	sw	a2,28(sp)
8001f9f4:	01376733          	or	a4,a4,s3
8001f9f8:	22c05863          	blez	a2,8001fc28 <_vfprintf_r+0x28e8>
8001f9fc:	1e071263          	bnez	a4,8001fbe0 <_vfprintf_r+0x28a0>
8001fa00:	01c12b83          	lw	s7,28(sp)
8001fa04:	06600893          	li	a7,102
8001fa08:	fadff06f          	j	8001f9b4 <_vfprintf_r+0x2674>
8001fa0c:	01370733          	add	a4,a4,s3
8001fa10:	00160613          	addi	a2,a2,1
8001fa14:	01842023          	sw	s8,0(s0)
8001fa18:	01342223          	sw	s3,4(s0)
8001fa1c:	0ce12623          	sw	a4,204(sp)
8001fa20:	0cc12423          	sw	a2,200(sp)
8001fa24:	00700593          	li	a1,7
8001fa28:	92c5de63          	bge	a1,a2,8001eb64 <_vfprintf_r+0x1824>
8001fa2c:	00812503          	lw	a0,8(sp)
8001fa30:	0c410613          	addi	a2,sp,196
8001fa34:	00090593          	mv	a1,s2
8001fa38:	408000ef          	jal	ra,8001fe40 <__sprint_r>
8001fa3c:	00050463          	beqz	a0,8001fa44 <_vfprintf_r+0x2704>
8001fa40:	f98fe06f          	j	8001e1d8 <_vfprintf_r+0xe98>
8001fa44:	0cc12703          	lw	a4,204(sp)
8001fa48:	0c812603          	lw	a2,200(sp)
8001fa4c:	000a0413          	mv	s0,s4
8001fa50:	ab0ff06f          	j	8001ed00 <_vfprintf_r+0x19c0>
8001fa54:	0b610693          	addi	a3,sp,182
8001fa58:	00061863          	bnez	a2,8001fa68 <_vfprintf_r+0x2728>
8001fa5c:	03000693          	li	a3,48
8001fa60:	0ad10b23          	sb	a3,182(sp)
8001fa64:	0b710693          	addi	a3,sp,183
8001fa68:	19010793          	addi	a5,sp,400
8001fa6c:	40f68633          	sub	a2,a3,a5
8001fa70:	03070713          	addi	a4,a4,48
8001fa74:	0dd60793          	addi	a5,a2,221
8001fa78:	00e68023          	sb	a4,0(a3)
8001fa7c:	02f12e23          	sw	a5,60(sp)
8001fa80:	f6cff06f          	j	8001f1ec <_vfprintf_r+0x1eac>
8001fa84:	001d7713          	andi	a4,s10,1
8001fa88:	f8070063          	beqz	a4,8001f208 <_vfprintf_r+0x1ec8>
8001fa8c:	f74ff06f          	j	8001f200 <_vfprintf_r+0x1ec0>
8001fa90:	00012823          	sw	zero,16(sp)
8001fa94:	00600993          	li	s3,6
8001fa98:	ea9fd06f          	j	8001d940 <_vfprintf_r+0x600>
8001fa9c:	08010593          	addi	a1,sp,128
8001faa0:	000b8513          	mv	a0,s7
8001faa4:	05112a23          	sw	a7,84(sp)
8001faa8:	09e12823          	sw	t5,144(sp)
8001faac:	05e12823          	sw	t5,80(sp)
8001fab0:	09f12a23          	sw	t6,148(sp)
8001fab4:	03f12423          	sw	t6,40(sp)
8001fab8:	08512c23          	sw	t0,152(sp)
8001fabc:	02512223          	sw	t0,36(sp)
8001fac0:	09d12e23          	sw	t4,156(sp)
8001fac4:	03d12023          	sw	t4,32(sp)
8001fac8:	00b12e23          	sw	a1,28(sp)
8001facc:	08012023          	sw	zero,128(sp)
8001fad0:	08012223          	sw	zero,132(sp)
8001fad4:	08012423          	sw	zero,136(sp)
8001fad8:	08012623          	sw	zero,140(sp)
8001fadc:	900e30ef          	jal	ra,80002bdc <__eqtf2>
8001fae0:	02012e83          	lw	t4,32(sp)
8001fae4:	02412283          	lw	t0,36(sp)
8001fae8:	02812f83          	lw	t6,40(sp)
8001faec:	05012f03          	lw	t5,80(sp)
8001faf0:	05412883          	lw	a7,84(sp)
8001faf4:	88050ae3          	beqz	a0,8001f388 <_vfprintf_r+0x2048>
8001faf8:	00100713          	li	a4,1
8001fafc:	41370733          	sub	a4,a4,s3
8001fb00:	0ae12623          	sw	a4,172(sp)
8001fb04:	889ff06f          	j	8001f38c <_vfprintf_r+0x204c>
8001fb08:	06700893          	li	a7,103
8001fb0c:	03812603          	lw	a2,56(sp)
8001fb10:	0ff00693          	li	a3,255
8001fb14:	00064703          	lbu	a4,0(a2)
8001fb18:	14d70863          	beq	a4,a3,8001fc68 <_vfprintf_r+0x2928>
8001fb1c:	01c12783          	lw	a5,28(sp)
8001fb20:	00000513          	li	a0,0
8001fb24:	00000593          	li	a1,0
8001fb28:	00f75e63          	bge	a4,a5,8001fb44 <_vfprintf_r+0x2804>
8001fb2c:	40e787b3          	sub	a5,a5,a4
8001fb30:	00164703          	lbu	a4,1(a2)
8001fb34:	04070463          	beqz	a4,8001fb7c <_vfprintf_r+0x283c>
8001fb38:	00158593          	addi	a1,a1,1
8001fb3c:	00160613          	addi	a2,a2,1
8001fb40:	fed714e3          	bne	a4,a3,8001fb28 <_vfprintf_r+0x27e8>
8001fb44:	02c12c23          	sw	a2,56(sp)
8001fb48:	00f12e23          	sw	a5,28(sp)
8001fb4c:	02b12223          	sw	a1,36(sp)
8001fb50:	02a12423          	sw	a0,40(sp)
8001fb54:	02412783          	lw	a5,36(sp)
8001fb58:	02812703          	lw	a4,40(sp)
8001fb5c:	00e78733          	add	a4,a5,a4
8001fb60:	04412783          	lw	a5,68(sp)
8001fb64:	02f70733          	mul	a4,a4,a5
8001fb68:	01770bb3          	add	s7,a4,s7
8001fb6c:	fffbc693          	not	a3,s7
8001fb70:	41f6d693          	srai	a3,a3,0x1f
8001fb74:	00dbfdb3          	and	s11,s7,a3
8001fb78:	eb4ff06f          	j	8001f22c <_vfprintf_r+0x1eec>
8001fb7c:	00064703          	lbu	a4,0(a2)
8001fb80:	00150513          	addi	a0,a0,1
8001fb84:	fbdff06f          	j	8001fb40 <_vfprintf_r+0x2800>
8001fb88:	40fb8eb3          	sub	t4,s7,a5
8001fb8c:	001e8b93          	addi	s7,t4,1
8001fb90:	fffbc693          	not	a3,s7
8001fb94:	41f6d693          	srai	a3,a3,0x1f
8001fb98:	00dbfdb3          	and	s11,s7,a3
8001fb9c:	cc5ff06f          	j	8001f860 <_vfprintf_r+0x2520>
8001fba0:	00090c13          	mv	s8,s2
8001fba4:	00198793          	addi	a5,s3,1
8001fba8:	02412483          	lw	s1,36(sp)
8001fbac:	02812883          	lw	a7,40(sp)
8001fbb0:	03c12d03          	lw	s10,60(sp)
8001fbb4:	04c12b03          	lw	s6,76(sp)
8001fbb8:	05012403          	lw	s0,80(sp)
8001fbbc:	05412903          	lw	s2,84(sp)
8001fbc0:	05812c83          	lw	s9,88(sp)
8001fbc4:	00fc07b3          	add	a5,s8,a5
8001fbc8:	03000693          	li	a3,48
8001fbcc:	ba09cee3          	bltz	s3,8001f788 <_vfprintf_r+0x2448>
8001fbd0:	001c0c13          	addi	s8,s8,1
8001fbd4:	fedc0fa3          	sb	a3,-1(s8)
8001fbd8:	fefc1ce3          	bne	s8,a5,8001fbd0 <_vfprintf_r+0x2890>
8001fbdc:	bb1ff06f          	j	8001f78c <_vfprintf_r+0x244c>
8001fbe0:	02c12703          	lw	a4,44(sp)
8001fbe4:	06600893          	li	a7,102
8001fbe8:	00e60eb3          	add	t4,a2,a4
8001fbec:	013e8bb3          	add	s7,t4,s3
8001fbf0:	dc5ff06f          	j	8001f9b4 <_vfprintf_r+0x2674>
8001fbf4:	80029737          	lui	a4,0x80029
8001fbf8:	8c070793          	addi	a5,a4,-1856 # 800288c0 <_ctype_+0x114>
8001fbfc:	02f12023          	sw	a5,32(sp)
8001fc00:	959ff06f          	j	8001f558 <_vfprintf_r+0x2218>
8001fc04:	01412783          	lw	a5,20(sp)
8001fc08:	0007a983          	lw	s3,0(a5)
8001fc0c:	00478793          	addi	a5,a5,4
8001fc10:	0009d463          	bgez	s3,8001fc18 <_vfprintf_r+0x28d8>
8001fc14:	fff00993          	li	s3,-1
8001fc18:	0014c883          	lbu	a7,1(s1)
8001fc1c:	00f12a23          	sw	a5,20(sp)
8001fc20:	00070493          	mv	s1,a4
8001fc24:	8bdfd06f          	j	8001d4e0 <_vfprintf_r+0x1a0>
8001fc28:	00071a63          	bnez	a4,8001fc3c <_vfprintf_r+0x28fc>
8001fc2c:	00100d93          	li	s11,1
8001fc30:	06600893          	li	a7,102
8001fc34:	00100b93          	li	s7,1
8001fc38:	c29ff06f          	j	8001f860 <_vfprintf_r+0x2520>
8001fc3c:	02c12783          	lw	a5,44(sp)
8001fc40:	06600893          	li	a7,102
8001fc44:	00178e93          	addi	t4,a5,1
8001fc48:	013e8bb3          	add	s7,t4,s3
8001fc4c:	fffbc693          	not	a3,s7
8001fc50:	41f6d693          	srai	a3,a3,0x1f
8001fc54:	00dbfdb3          	and	s11,s7,a3
8001fc58:	c09ff06f          	j	8001f860 <_vfprintf_r+0x2520>
8001fc5c:	00200793          	li	a5,2
8001fc60:	02f12e23          	sw	a5,60(sp)
8001fc64:	d88ff06f          	j	8001f1ec <_vfprintf_r+0x1eac>
8001fc68:	02012423          	sw	zero,40(sp)
8001fc6c:	02012223          	sw	zero,36(sp)
8001fc70:	ee5ff06f          	j	8001fb54 <_vfprintf_r+0x2814>
8001fc74:	00c95783          	lhu	a5,12(s2)
8001fc78:	0407e793          	ori	a5,a5,64
8001fc7c:	00f91623          	sh	a5,12(s2)
8001fc80:	a15fd06f          	j	8001d694 <_vfprintf_r+0x354>

8001fc84 <__sbprintf>:
8001fc84:	00c59783          	lh	a5,12(a1)
8001fc88:	00e5d703          	lhu	a4,14(a1)
8001fc8c:	0645a303          	lw	t1,100(a1)
8001fc90:	ffd7f793          	andi	a5,a5,-3
8001fc94:	01079793          	slli	a5,a5,0x10
8001fc98:	01c5a883          	lw	a7,28(a1)
8001fc9c:	0245a803          	lw	a6,36(a1)
8001fca0:	01071713          	slli	a4,a4,0x10
8001fca4:	0107d793          	srli	a5,a5,0x10
8001fca8:	b8010113          	addi	sp,sp,-1152
8001fcac:	00e7e7b3          	or	a5,a5,a4
8001fcb0:	46812c23          	sw	s0,1144(sp)
8001fcb4:	40000713          	li	a4,1024
8001fcb8:	00f12a23          	sw	a5,20(sp)
8001fcbc:	00058413          	mv	s0,a1
8001fcc0:	07010793          	addi	a5,sp,112
8001fcc4:	00810593          	addi	a1,sp,8
8001fcc8:	46912a23          	sw	s1,1140(sp)
8001fccc:	47212823          	sw	s2,1136(sp)
8001fcd0:	46112e23          	sw	ra,1148(sp)
8001fcd4:	00050913          	mv	s2,a0
8001fcd8:	06612623          	sw	t1,108(sp)
8001fcdc:	03112223          	sw	a7,36(sp)
8001fce0:	03012623          	sw	a6,44(sp)
8001fce4:	00f12423          	sw	a5,8(sp)
8001fce8:	00f12c23          	sw	a5,24(sp)
8001fcec:	00e12823          	sw	a4,16(sp)
8001fcf0:	00e12e23          	sw	a4,28(sp)
8001fcf4:	02012023          	sw	zero,32(sp)
8001fcf8:	e48fd0ef          	jal	ra,8001d340 <_vfprintf_r>
8001fcfc:	00050493          	mv	s1,a0
8001fd00:	02055c63          	bgez	a0,8001fd38 <__sbprintf+0xb4>
8001fd04:	01415783          	lhu	a5,20(sp)
8001fd08:	0407f793          	andi	a5,a5,64
8001fd0c:	00078863          	beqz	a5,8001fd1c <__sbprintf+0x98>
8001fd10:	00c45783          	lhu	a5,12(s0)
8001fd14:	0407e793          	ori	a5,a5,64
8001fd18:	00f41623          	sh	a5,12(s0)
8001fd1c:	47c12083          	lw	ra,1148(sp)
8001fd20:	47812403          	lw	s0,1144(sp)
8001fd24:	47012903          	lw	s2,1136(sp)
8001fd28:	00048513          	mv	a0,s1
8001fd2c:	47412483          	lw	s1,1140(sp)
8001fd30:	48010113          	addi	sp,sp,1152
8001fd34:	00008067          	ret
8001fd38:	00810593          	addi	a1,sp,8
8001fd3c:	00090513          	mv	a0,s2
8001fd40:	780010ef          	jal	ra,800214c0 <_fflush_r>
8001fd44:	fc0500e3          	beqz	a0,8001fd04 <__sbprintf+0x80>
8001fd48:	fff00493          	li	s1,-1
8001fd4c:	fb9ff06f          	j	8001fd04 <__sbprintf+0x80>

8001fd50 <__sprint_r.part.0>:
8001fd50:	0645a783          	lw	a5,100(a1)
8001fd54:	fd010113          	addi	sp,sp,-48
8001fd58:	01612823          	sw	s6,16(sp)
8001fd5c:	02112623          	sw	ra,44(sp)
8001fd60:	02812423          	sw	s0,40(sp)
8001fd64:	02912223          	sw	s1,36(sp)
8001fd68:	03212023          	sw	s2,32(sp)
8001fd6c:	01312e23          	sw	s3,28(sp)
8001fd70:	01412c23          	sw	s4,24(sp)
8001fd74:	01512a23          	sw	s5,20(sp)
8001fd78:	01712623          	sw	s7,12(sp)
8001fd7c:	01812423          	sw	s8,8(sp)
8001fd80:	01279713          	slli	a4,a5,0x12
8001fd84:	00060b13          	mv	s6,a2
8001fd88:	0a075863          	bgez	a4,8001fe38 <__sprint_r.part.0+0xe8>
8001fd8c:	00862783          	lw	a5,8(a2)
8001fd90:	00062b83          	lw	s7,0(a2)
8001fd94:	00058913          	mv	s2,a1
8001fd98:	00050993          	mv	s3,a0
8001fd9c:	fff00a93          	li	s5,-1
8001fda0:	08078863          	beqz	a5,8001fe30 <__sprint_r.part.0+0xe0>
8001fda4:	004bac03          	lw	s8,4(s7)
8001fda8:	000ba403          	lw	s0,0(s7)
8001fdac:	002c5a13          	srli	s4,s8,0x2
8001fdb0:	060a0663          	beqz	s4,8001fe1c <__sprint_r.part.0+0xcc>
8001fdb4:	00000493          	li	s1,0
8001fdb8:	00c0006f          	j	8001fdc4 <__sprint_r.part.0+0x74>
8001fdbc:	00440413          	addi	s0,s0,4
8001fdc0:	049a0c63          	beq	s4,s1,8001fe18 <__sprint_r.part.0+0xc8>
8001fdc4:	00042583          	lw	a1,0(s0)
8001fdc8:	00090613          	mv	a2,s2
8001fdcc:	00098513          	mv	a0,s3
8001fdd0:	258020ef          	jal	ra,80022028 <_fputwc_r>
8001fdd4:	00148493          	addi	s1,s1,1
8001fdd8:	ff5512e3          	bne	a0,s5,8001fdbc <__sprint_r.part.0+0x6c>
8001fddc:	fff00513          	li	a0,-1
8001fde0:	02c12083          	lw	ra,44(sp)
8001fde4:	02812403          	lw	s0,40(sp)
8001fde8:	000b2423          	sw	zero,8(s6)
8001fdec:	000b2223          	sw	zero,4(s6)
8001fdf0:	02412483          	lw	s1,36(sp)
8001fdf4:	02012903          	lw	s2,32(sp)
8001fdf8:	01c12983          	lw	s3,28(sp)
8001fdfc:	01812a03          	lw	s4,24(sp)
8001fe00:	01412a83          	lw	s5,20(sp)
8001fe04:	01012b03          	lw	s6,16(sp)
8001fe08:	00c12b83          	lw	s7,12(sp)
8001fe0c:	00812c03          	lw	s8,8(sp)
8001fe10:	03010113          	addi	sp,sp,48
8001fe14:	00008067          	ret
8001fe18:	008b2783          	lw	a5,8(s6)
8001fe1c:	ffcc7c13          	andi	s8,s8,-4
8001fe20:	418787b3          	sub	a5,a5,s8
8001fe24:	00fb2423          	sw	a5,8(s6)
8001fe28:	008b8b93          	addi	s7,s7,8
8001fe2c:	f6079ce3          	bnez	a5,8001fda4 <__sprint_r.part.0+0x54>
8001fe30:	00000513          	li	a0,0
8001fe34:	fadff06f          	j	8001fde0 <__sprint_r.part.0+0x90>
8001fe38:	111010ef          	jal	ra,80021748 <__sfvwrite_r>
8001fe3c:	fa5ff06f          	j	8001fde0 <__sprint_r.part.0+0x90>

8001fe40 <__sprint_r>:
8001fe40:	00862703          	lw	a4,8(a2)
8001fe44:	00070463          	beqz	a4,8001fe4c <__sprint_r+0xc>
8001fe48:	f09ff06f          	j	8001fd50 <__sprint_r.part.0>
8001fe4c:	00062223          	sw	zero,4(a2)
8001fe50:	00000513          	li	a0,0
8001fe54:	00008067          	ret

8001fe58 <_vfiprintf_r>:
8001fe58:	ed010113          	addi	sp,sp,-304
8001fe5c:	13212023          	sw	s2,288(sp)
8001fe60:	11612823          	sw	s6,272(sp)
8001fe64:	11712623          	sw	s7,268(sp)
8001fe68:	11812423          	sw	s8,264(sp)
8001fe6c:	12112623          	sw	ra,300(sp)
8001fe70:	12812423          	sw	s0,296(sp)
8001fe74:	12912223          	sw	s1,292(sp)
8001fe78:	11312e23          	sw	s3,284(sp)
8001fe7c:	11412c23          	sw	s4,280(sp)
8001fe80:	11512a23          	sw	s5,276(sp)
8001fe84:	11912223          	sw	s9,260(sp)
8001fe88:	11a12023          	sw	s10,256(sp)
8001fe8c:	0fb12e23          	sw	s11,252(sp)
8001fe90:	00050c13          	mv	s8,a0
8001fe94:	00058b13          	mv	s6,a1
8001fe98:	00060913          	mv	s2,a2
8001fe9c:	00068b93          	mv	s7,a3
8001fea0:	00050863          	beqz	a0,8001feb0 <_vfiprintf_r+0x58>
8001fea4:	03452783          	lw	a5,52(a0)
8001fea8:	00079463          	bnez	a5,8001feb0 <_vfiprintf_r+0x58>
8001feac:	1c40106f          	j	80021070 <_vfiprintf_r+0x1218>
8001feb0:	00cb1783          	lh	a5,12(s6)
8001feb4:	01279713          	slli	a4,a5,0x12
8001feb8:	02074663          	bltz	a4,8001fee4 <_vfiprintf_r+0x8c>
8001febc:	064b2703          	lw	a4,100(s6)
8001fec0:	000026b7          	lui	a3,0x2
8001fec4:	00d7e7b3          	or	a5,a5,a3
8001fec8:	ffffe6b7          	lui	a3,0xffffe
8001fecc:	01079793          	slli	a5,a5,0x10
8001fed0:	fff68693          	addi	a3,a3,-1 # ffffdfff <__bss_end+0x7ff77843>
8001fed4:	4107d793          	srai	a5,a5,0x10
8001fed8:	00d77733          	and	a4,a4,a3
8001fedc:	00fb1623          	sh	a5,12(s6)
8001fee0:	06eb2223          	sw	a4,100(s6)
8001fee4:	0087f713          	andi	a4,a5,8
8001fee8:	10070e63          	beqz	a4,80020004 <_vfiprintf_r+0x1ac>
8001feec:	010b2703          	lw	a4,16(s6)
8001fef0:	10070a63          	beqz	a4,80020004 <_vfiprintf_r+0x1ac>
8001fef4:	01a7f793          	andi	a5,a5,26
8001fef8:	00a00713          	li	a4,10
8001fefc:	12e78663          	beq	a5,a4,80020028 <_vfiprintf_r+0x1d0>
8001ff00:	800297b7          	lui	a5,0x80029
8001ff04:	04c10a93          	addi	s5,sp,76
8001ff08:	00000d13          	li	s10,0
8001ff0c:	b1878793          	addi	a5,a5,-1256 # 80028b18 <blanks.1+0x10>
8001ff10:	80029cb7          	lui	s9,0x80029
8001ff14:	000d0993          	mv	s3,s10
8001ff18:	05512023          	sw	s5,64(sp)
8001ff1c:	04012423          	sw	zero,72(sp)
8001ff20:	04012223          	sw	zero,68(sp)
8001ff24:	000a8413          	mv	s0,s5
8001ff28:	00012423          	sw	zero,8(sp)
8001ff2c:	00012c23          	sw	zero,24(sp)
8001ff30:	00012e23          	sw	zero,28(sp)
8001ff34:	02012023          	sw	zero,32(sp)
8001ff38:	00f12223          	sw	a5,4(sp)
8001ff3c:	01000a13          	li	s4,16
8001ff40:	c84c8c93          	addi	s9,s9,-892 # 80028c84 <zeroes.0>
8001ff44:	000b8d13          	mv	s10,s7
8001ff48:	00094783          	lbu	a5,0(s2)
8001ff4c:	34078463          	beqz	a5,80020294 <_vfiprintf_r+0x43c>
8001ff50:	00090493          	mv	s1,s2
8001ff54:	02500713          	li	a4,37
8001ff58:	3ce78663          	beq	a5,a4,80020324 <_vfiprintf_r+0x4cc>
8001ff5c:	0014c783          	lbu	a5,1(s1)
8001ff60:	00148493          	addi	s1,s1,1
8001ff64:	fe079ae3          	bnez	a5,8001ff58 <_vfiprintf_r+0x100>
8001ff68:	41248bb3          	sub	s7,s1,s2
8001ff6c:	33248463          	beq	s1,s2,80020294 <_vfiprintf_r+0x43c>
8001ff70:	04812703          	lw	a4,72(sp)
8001ff74:	04412783          	lw	a5,68(sp)
8001ff78:	01242023          	sw	s2,0(s0)
8001ff7c:	00eb8733          	add	a4,s7,a4
8001ff80:	00178793          	addi	a5,a5,1
8001ff84:	01742223          	sw	s7,4(s0)
8001ff88:	04e12423          	sw	a4,72(sp)
8001ff8c:	04f12223          	sw	a5,68(sp)
8001ff90:	00700693          	li	a3,7
8001ff94:	00840413          	addi	s0,s0,8
8001ff98:	02f6d063          	bge	a3,a5,8001ffb8 <_vfiprintf_r+0x160>
8001ff9c:	4e0702e3          	beqz	a4,80020c80 <_vfiprintf_r+0xe28>
8001ffa0:	04010613          	addi	a2,sp,64
8001ffa4:	000b0593          	mv	a1,s6
8001ffa8:	000c0513          	mv	a0,s8
8001ffac:	da5ff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
8001ffb0:	0e051063          	bnez	a0,80020090 <_vfiprintf_r+0x238>
8001ffb4:	000a8413          	mv	s0,s5
8001ffb8:	0004c783          	lbu	a5,0(s1)
8001ffbc:	017989b3          	add	s3,s3,s7
8001ffc0:	2c078a63          	beqz	a5,80020294 <_vfiprintf_r+0x43c>
8001ffc4:	0014c783          	lbu	a5,1(s1)
8001ffc8:	00148913          	addi	s2,s1,1
8001ffcc:	02010da3          	sb	zero,59(sp)
8001ffd0:	fff00d93          	li	s11,-1
8001ffd4:	00000b93          	li	s7,0
8001ffd8:	00000893          	li	a7,0
8001ffdc:	05a00493          	li	s1,90
8001ffe0:	00190913          	addi	s2,s2,1
8001ffe4:	00078693          	mv	a3,a5
8001ffe8:	fe068713          	addi	a4,a3,-32
8001ffec:	12e4e663          	bltu	s1,a4,80020118 <_vfiprintf_r+0x2c0>
8001fff0:	00412783          	lw	a5,4(sp)
8001fff4:	00271713          	slli	a4,a4,0x2
8001fff8:	00f70733          	add	a4,a4,a5
8001fffc:	00072783          	lw	a5,0(a4)
80020000:	00078067          	jr	a5
80020004:	000b0593          	mv	a1,s6
80020008:	000c0513          	mv	a0,s8
8002000c:	5f1010ef          	jal	ra,80021dfc <__swsetup_r>
80020010:	00050463          	beqz	a0,80020018 <_vfiprintf_r+0x1c0>
80020014:	1740106f          	j	80021188 <_vfiprintf_r+0x1330>
80020018:	00cb1783          	lh	a5,12(s6)
8002001c:	00a00713          	li	a4,10
80020020:	01a7f793          	andi	a5,a5,26
80020024:	ece79ee3          	bne	a5,a4,8001ff00 <_vfiprintf_r+0xa8>
80020028:	00eb1783          	lh	a5,14(s6)
8002002c:	ec07cae3          	bltz	a5,8001ff00 <_vfiprintf_r+0xa8>
80020030:	12812403          	lw	s0,296(sp)
80020034:	12c12083          	lw	ra,300(sp)
80020038:	12412483          	lw	s1,292(sp)
8002003c:	11c12983          	lw	s3,284(sp)
80020040:	11812a03          	lw	s4,280(sp)
80020044:	11412a83          	lw	s5,276(sp)
80020048:	10412c83          	lw	s9,260(sp)
8002004c:	10012d03          	lw	s10,256(sp)
80020050:	0fc12d83          	lw	s11,252(sp)
80020054:	000b8693          	mv	a3,s7
80020058:	00090613          	mv	a2,s2
8002005c:	10c12b83          	lw	s7,268(sp)
80020060:	12012903          	lw	s2,288(sp)
80020064:	000b0593          	mv	a1,s6
80020068:	000c0513          	mv	a0,s8
8002006c:	11012b03          	lw	s6,272(sp)
80020070:	10812c03          	lw	s8,264(sp)
80020074:	13010113          	addi	sp,sp,304
80020078:	1440106f          	j	800211bc <__sbprintf>
8002007c:	04010613          	addi	a2,sp,64
80020080:	000b0593          	mv	a1,s6
80020084:	000c0513          	mv	a0,s8
80020088:	cc9ff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
8002008c:	1e050c63          	beqz	a0,80020284 <_vfiprintf_r+0x42c>
80020090:	00098d13          	mv	s10,s3
80020094:	00cb5783          	lhu	a5,12(s6)
80020098:	0407f793          	andi	a5,a5,64
8002009c:	00078463          	beqz	a5,800200a4 <_vfiprintf_r+0x24c>
800200a0:	0e80106f          	j	80021188 <_vfiprintf_r+0x1330>
800200a4:	12c12083          	lw	ra,300(sp)
800200a8:	12812403          	lw	s0,296(sp)
800200ac:	12412483          	lw	s1,292(sp)
800200b0:	12012903          	lw	s2,288(sp)
800200b4:	11c12983          	lw	s3,284(sp)
800200b8:	11812a03          	lw	s4,280(sp)
800200bc:	11412a83          	lw	s5,276(sp)
800200c0:	11012b03          	lw	s6,272(sp)
800200c4:	10c12b83          	lw	s7,268(sp)
800200c8:	10812c03          	lw	s8,264(sp)
800200cc:	10412c83          	lw	s9,260(sp)
800200d0:	0fc12d83          	lw	s11,252(sp)
800200d4:	000d0513          	mv	a0,s10
800200d8:	10012d03          	lw	s10,256(sp)
800200dc:	13010113          	addi	sp,sp,304
800200e0:	00008067          	ret
800200e4:	00000b93          	li	s7,0
800200e8:	fd068793          	addi	a5,a3,-48
800200ec:	00900613          	li	a2,9
800200f0:	00094683          	lbu	a3,0(s2)
800200f4:	002b9713          	slli	a4,s7,0x2
800200f8:	01770bb3          	add	s7,a4,s7
800200fc:	001b9b93          	slli	s7,s7,0x1
80020100:	01778bb3          	add	s7,a5,s7
80020104:	fd068793          	addi	a5,a3,-48
80020108:	00190913          	addi	s2,s2,1
8002010c:	fef672e3          	bgeu	a2,a5,800200f0 <_vfiprintf_r+0x298>
80020110:	fe068713          	addi	a4,a3,-32
80020114:	ece4fee3          	bgeu	s1,a4,8001fff0 <_vfiprintf_r+0x198>
80020118:	16068e63          	beqz	a3,80020294 <_vfiprintf_r+0x43c>
8002011c:	08d10623          	sb	a3,140(sp)
80020120:	02010da3          	sb	zero,59(sp)
80020124:	00100313          	li	t1,1
80020128:	00100e13          	li	t3,1
8002012c:	08c10493          	addi	s1,sp,140
80020130:	00000d93          	li	s11,0
80020134:	0028ff93          	andi	t6,a7,2
80020138:	000f8463          	beqz	t6,80020140 <_vfiprintf_r+0x2e8>
8002013c:	00230313          	addi	t1,t1,2
80020140:	04412703          	lw	a4,68(sp)
80020144:	0848f293          	andi	t0,a7,132
80020148:	04812783          	lw	a5,72(sp)
8002014c:	00170613          	addi	a2,a4,1
80020150:	00060593          	mv	a1,a2
80020154:	00029663          	bnez	t0,80020160 <_vfiprintf_r+0x308>
80020158:	406b86b3          	sub	a3,s7,t1
8002015c:	1cd044e3          	bgtz	a3,80020b24 <_vfiprintf_r+0xccc>
80020160:	03b14683          	lbu	a3,59(sp)
80020164:	02068a63          	beqz	a3,80020198 <_vfiprintf_r+0x340>
80020168:	03b10713          	addi	a4,sp,59
8002016c:	00178793          	addi	a5,a5,1
80020170:	00e42023          	sw	a4,0(s0)
80020174:	00100713          	li	a4,1
80020178:	00e42223          	sw	a4,4(s0)
8002017c:	04f12423          	sw	a5,72(sp)
80020180:	04b12223          	sw	a1,68(sp)
80020184:	00700713          	li	a4,7
80020188:	0cb742e3          	blt	a4,a1,80020a4c <_vfiprintf_r+0xbf4>
8002018c:	00058713          	mv	a4,a1
80020190:	00840413          	addi	s0,s0,8
80020194:	00158593          	addi	a1,a1,1
80020198:	060f8863          	beqz	t6,80020208 <_vfiprintf_r+0x3b0>
8002019c:	03c10713          	addi	a4,sp,60
800201a0:	00278793          	addi	a5,a5,2
800201a4:	00e42023          	sw	a4,0(s0)
800201a8:	00200713          	li	a4,2
800201ac:	00e42223          	sw	a4,4(s0)
800201b0:	04f12423          	sw	a5,72(sp)
800201b4:	04b12223          	sw	a1,68(sp)
800201b8:	00700713          	li	a4,7
800201bc:	10b750e3          	bge	a4,a1,80020abc <_vfiprintf_r+0xc64>
800201c0:	320786e3          	beqz	a5,80020cec <_vfiprintf_r+0xe94>
800201c4:	04010613          	addi	a2,sp,64
800201c8:	000b0593          	mv	a1,s6
800201cc:	000c0513          	mv	a0,s8
800201d0:	03c12223          	sw	t3,36(sp)
800201d4:	00612a23          	sw	t1,20(sp)
800201d8:	01112823          	sw	a7,16(sp)
800201dc:	00512623          	sw	t0,12(sp)
800201e0:	b71ff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
800201e4:	ea0516e3          	bnez	a0,80020090 <_vfiprintf_r+0x238>
800201e8:	04412703          	lw	a4,68(sp)
800201ec:	04812783          	lw	a5,72(sp)
800201f0:	02412e03          	lw	t3,36(sp)
800201f4:	01412303          	lw	t1,20(sp)
800201f8:	01012883          	lw	a7,16(sp)
800201fc:	00c12283          	lw	t0,12(sp)
80020200:	000a8413          	mv	s0,s5
80020204:	00170593          	addi	a1,a4,1
80020208:	08000693          	li	a3,128
8002020c:	62d28463          	beq	t0,a3,80020834 <_vfiprintf_r+0x9dc>
80020210:	41cd8db3          	sub	s11,s11,t3
80020214:	75b04463          	bgtz	s11,8002095c <_vfiprintf_r+0xb04>
80020218:	00fe07b3          	add	a5,t3,a5
8002021c:	00942023          	sw	s1,0(s0)
80020220:	01c42223          	sw	t3,4(s0)
80020224:	04f12423          	sw	a5,72(sp)
80020228:	04b12223          	sw	a1,68(sp)
8002022c:	00700713          	li	a4,7
80020230:	5eb75663          	bge	a4,a1,8002081c <_vfiprintf_r+0x9c4>
80020234:	10078063          	beqz	a5,80020334 <_vfiprintf_r+0x4dc>
80020238:	04010613          	addi	a2,sp,64
8002023c:	000b0593          	mv	a1,s6
80020240:	000c0513          	mv	a0,s8
80020244:	00612823          	sw	t1,16(sp)
80020248:	01112623          	sw	a7,12(sp)
8002024c:	b05ff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
80020250:	e40510e3          	bnez	a0,80020090 <_vfiprintf_r+0x238>
80020254:	04812783          	lw	a5,72(sp)
80020258:	01012303          	lw	t1,16(sp)
8002025c:	00c12883          	lw	a7,12(sp)
80020260:	000a8413          	mv	s0,s5
80020264:	0048f893          	andi	a7,a7,4
80020268:	00088663          	beqz	a7,80020274 <_vfiprintf_r+0x41c>
8002026c:	406b84b3          	sub	s1,s7,t1
80020270:	0c904e63          	bgtz	s1,8002034c <_vfiprintf_r+0x4f4>
80020274:	006bd463          	bge	s7,t1,8002027c <_vfiprintf_r+0x424>
80020278:	00030b93          	mv	s7,t1
8002027c:	017989b3          	add	s3,s3,s7
80020280:	de079ee3          	bnez	a5,8002007c <_vfiprintf_r+0x224>
80020284:	00094783          	lbu	a5,0(s2)
80020288:	04012223          	sw	zero,68(sp)
8002028c:	000a8413          	mv	s0,s5
80020290:	cc0790e3          	bnez	a5,8001ff50 <_vfiprintf_r+0xf8>
80020294:	04812783          	lw	a5,72(sp)
80020298:	00098d13          	mv	s10,s3
8002029c:	de078ce3          	beqz	a5,80020094 <_vfiprintf_r+0x23c>
800202a0:	04010613          	addi	a2,sp,64
800202a4:	000b0593          	mv	a1,s6
800202a8:	000c0513          	mv	a0,s8
800202ac:	aa5ff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
800202b0:	de5ff06f          	j	80020094 <_vfiprintf_r+0x23c>
800202b4:	000d2b83          	lw	s7,0(s10)
800202b8:	004d0d13          	addi	s10,s10,4
800202bc:	260bce63          	bltz	s7,80020538 <_vfiprintf_r+0x6e0>
800202c0:	00094783          	lbu	a5,0(s2)
800202c4:	d1dff06f          	j	8001ffe0 <_vfiprintf_r+0x188>
800202c8:	00094783          	lbu	a5,0(s2)
800202cc:	0208e893          	ori	a7,a7,32
800202d0:	d11ff06f          	j	8001ffe0 <_vfiprintf_r+0x188>
800202d4:	0108e893          	ori	a7,a7,16
800202d8:	0208f793          	andi	a5,a7,32
800202dc:	14078863          	beqz	a5,8002042c <_vfiprintf_r+0x5d4>
800202e0:	007d0d13          	addi	s10,s10,7
800202e4:	ff8d7d13          	andi	s10,s10,-8
800202e8:	004d2703          	lw	a4,4(s10)
800202ec:	000d2783          	lw	a5,0(s10)
800202f0:	008d0d13          	addi	s10,s10,8
800202f4:	00070293          	mv	t0,a4
800202f8:	16074063          	bltz	a4,80020458 <_vfiprintf_r+0x600>
800202fc:	fff00713          	li	a4,-1
80020300:	16ed8e63          	beq	s11,a4,8002047c <_vfiprintf_r+0x624>
80020304:	0057e733          	or	a4,a5,t0
80020308:	f7f8f893          	andi	a7,a7,-129
8002030c:	16071863          	bnez	a4,8002047c <_vfiprintf_r+0x624>
80020310:	640d90e3          	bnez	s11,80021150 <_vfiprintf_r+0x12f8>
80020314:	00000313          	li	t1,0
80020318:	00000e13          	li	t3,0
8002031c:	0f010493          	addi	s1,sp,240
80020320:	1880006f          	j	800204a8 <_vfiprintf_r+0x650>
80020324:	41248bb3          	sub	s7,s1,s2
80020328:	c52494e3          	bne	s1,s2,8001ff70 <_vfiprintf_r+0x118>
8002032c:	0004c783          	lbu	a5,0(s1)
80020330:	c91ff06f          	j	8001ffc0 <_vfiprintf_r+0x168>
80020334:	04012223          	sw	zero,68(sp)
80020338:	0048f893          	andi	a7,a7,4
8002033c:	0e0888e3          	beqz	a7,80020c2c <_vfiprintf_r+0xdd4>
80020340:	406b84b3          	sub	s1,s7,t1
80020344:	0e9054e3          	blez	s1,80020c2c <_vfiprintf_r+0xdd4>
80020348:	000a8413          	mv	s0,s5
8002034c:	01000713          	li	a4,16
80020350:	04412683          	lw	a3,68(sp)
80020354:	629752e3          	bge	a4,s1,80021178 <_vfiprintf_r+0x1320>
80020358:	80029eb7          	lui	t4,0x80029
8002035c:	c94e8e93          	addi	t4,t4,-876 # 80028c94 <blanks.1>
80020360:	00040593          	mv	a1,s0
80020364:	01000d93          	li	s11,16
80020368:	00700893          	li	a7,7
8002036c:	00612623          	sw	t1,12(sp)
80020370:	000e8413          	mv	s0,t4
80020374:	0180006f          	j	8002038c <_vfiprintf_r+0x534>
80020378:	00268613          	addi	a2,a3,2
8002037c:	00858593          	addi	a1,a1,8
80020380:	00070693          	mv	a3,a4
80020384:	ff048493          	addi	s1,s1,-16
80020388:	049dda63          	bge	s11,s1,800203dc <_vfiprintf_r+0x584>
8002038c:	01078793          	addi	a5,a5,16
80020390:	00168713          	addi	a4,a3,1
80020394:	0085a023          	sw	s0,0(a1)
80020398:	01b5a223          	sw	s11,4(a1)
8002039c:	04f12423          	sw	a5,72(sp)
800203a0:	04e12223          	sw	a4,68(sp)
800203a4:	fce8dae3          	bge	a7,a4,80020378 <_vfiprintf_r+0x520>
800203a8:	46078e63          	beqz	a5,80020824 <_vfiprintf_r+0x9cc>
800203ac:	04010613          	addi	a2,sp,64
800203b0:	000b0593          	mv	a1,s6
800203b4:	000c0513          	mv	a0,s8
800203b8:	999ff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
800203bc:	cc051ae3          	bnez	a0,80020090 <_vfiprintf_r+0x238>
800203c0:	04412683          	lw	a3,68(sp)
800203c4:	ff048493          	addi	s1,s1,-16
800203c8:	04812783          	lw	a5,72(sp)
800203cc:	000a8593          	mv	a1,s5
800203d0:	00168613          	addi	a2,a3,1
800203d4:	00700893          	li	a7,7
800203d8:	fa9dcae3          	blt	s11,s1,8002038c <_vfiprintf_r+0x534>
800203dc:	00c12303          	lw	t1,12(sp)
800203e0:	00040e93          	mv	t4,s0
800203e4:	00058413          	mv	s0,a1
800203e8:	009787b3          	add	a5,a5,s1
800203ec:	01d42023          	sw	t4,0(s0)
800203f0:	00942223          	sw	s1,4(s0)
800203f4:	04f12423          	sw	a5,72(sp)
800203f8:	04c12223          	sw	a2,68(sp)
800203fc:	00700713          	li	a4,7
80020400:	e6c75ae3          	bge	a4,a2,80020274 <_vfiprintf_r+0x41c>
80020404:	020784e3          	beqz	a5,80020c2c <_vfiprintf_r+0xdd4>
80020408:	04010613          	addi	a2,sp,64
8002040c:	000b0593          	mv	a1,s6
80020410:	000c0513          	mv	a0,s8
80020414:	00612623          	sw	t1,12(sp)
80020418:	939ff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
8002041c:	c6051ae3          	bnez	a0,80020090 <_vfiprintf_r+0x238>
80020420:	04812783          	lw	a5,72(sp)
80020424:	00c12303          	lw	t1,12(sp)
80020428:	e4dff06f          	j	80020274 <_vfiprintf_r+0x41c>
8002042c:	0108f713          	andi	a4,a7,16
80020430:	000d2783          	lw	a5,0(s10)
80020434:	004d0d13          	addi	s10,s10,4
80020438:	0e071a63          	bnez	a4,8002052c <_vfiprintf_r+0x6d4>
8002043c:	0408f713          	andi	a4,a7,64
80020440:	0e070263          	beqz	a4,80020524 <_vfiprintf_r+0x6cc>
80020444:	01079793          	slli	a5,a5,0x10
80020448:	4107d793          	srai	a5,a5,0x10
8002044c:	41f7d293          	srai	t0,a5,0x1f
80020450:	00028713          	mv	a4,t0
80020454:	ea0754e3          	bgez	a4,800202fc <_vfiprintf_r+0x4a4>
80020458:	02d00693          	li	a3,45
8002045c:	00f03733          	snez	a4,a5
80020460:	405002b3          	neg	t0,t0
80020464:	02d10da3          	sb	a3,59(sp)
80020468:	fff00693          	li	a3,-1
8002046c:	40e282b3          	sub	t0,t0,a4
80020470:	40f007b3          	neg	a5,a5
80020474:	00dd8463          	beq	s11,a3,8002047c <_vfiprintf_r+0x624>
80020478:	f7f8f893          	andi	a7,a7,-129
8002047c:	0c029ae3          	bnez	t0,80020d50 <_vfiprintf_r+0xef8>
80020480:	00900713          	li	a4,9
80020484:	0cf766e3          	bltu	a4,a5,80020d50 <_vfiprintf_r+0xef8>
80020488:	03078793          	addi	a5,a5,48
8002048c:	0ff7f793          	zext.b	a5,a5
80020490:	0ef107a3          	sb	a5,239(sp)
80020494:	000d8313          	mv	t1,s11
80020498:	01b04463          	bgtz	s11,800204a0 <_vfiprintf_r+0x648>
8002049c:	00100313          	li	t1,1
800204a0:	00100e13          	li	t3,1
800204a4:	0ef10493          	addi	s1,sp,239
800204a8:	03b14783          	lbu	a5,59(sp)
800204ac:	00f037b3          	snez	a5,a5
800204b0:	00f30333          	add	t1,t1,a5
800204b4:	c81ff06f          	j	80020134 <_vfiprintf_r+0x2dc>
800204b8:	000d2483          	lw	s1,0(s10)
800204bc:	02010da3          	sb	zero,59(sp)
800204c0:	004d0d13          	addi	s10,s10,4
800204c4:	3e0482e3          	beqz	s1,800210a8 <_vfiprintf_r+0x1250>
800204c8:	fff00793          	li	a5,-1
800204cc:	01112623          	sw	a7,12(sp)
800204d0:	26fd8ce3          	beq	s11,a5,80020f48 <_vfiprintf_r+0x10f0>
800204d4:	000d8613          	mv	a2,s11
800204d8:	00000593          	li	a1,0
800204dc:	00048513          	mv	a0,s1
800204e0:	375010ef          	jal	ra,80022054 <memchr>
800204e4:	00c12883          	lw	a7,12(sp)
800204e8:	460508e3          	beqz	a0,80021158 <_vfiprintf_r+0x1300>
800204ec:	40950e33          	sub	t3,a0,s1
800204f0:	fffe4313          	not	t1,t3
800204f4:	41f35313          	srai	t1,t1,0x1f
800204f8:	006e7333          	and	t1,t3,t1
800204fc:	00000d93          	li	s11,0
80020500:	fa9ff06f          	j	800204a8 <_vfiprintf_r+0x650>
80020504:	000d2783          	lw	a5,0(s10)
80020508:	02010da3          	sb	zero,59(sp)
8002050c:	004d0d13          	addi	s10,s10,4
80020510:	08f10623          	sb	a5,140(sp)
80020514:	00100313          	li	t1,1
80020518:	00100e13          	li	t3,1
8002051c:	08c10493          	addi	s1,sp,140
80020520:	c11ff06f          	j	80020130 <_vfiprintf_r+0x2d8>
80020524:	2008f713          	andi	a4,a7,512
80020528:	3e071ce3          	bnez	a4,80021120 <_vfiprintf_r+0x12c8>
8002052c:	41f7d293          	srai	t0,a5,0x1f
80020530:	00028713          	mv	a4,t0
80020534:	dc5ff06f          	j	800202f8 <_vfiprintf_r+0x4a0>
80020538:	41700bb3          	neg	s7,s7
8002053c:	00094783          	lbu	a5,0(s2)
80020540:	0048e893          	ori	a7,a7,4
80020544:	a9dff06f          	j	8001ffe0 <_vfiprintf_r+0x188>
80020548:	02b00713          	li	a4,43
8002054c:	00094783          	lbu	a5,0(s2)
80020550:	02e10da3          	sb	a4,59(sp)
80020554:	a8dff06f          	j	8001ffe0 <_vfiprintf_r+0x188>
80020558:	00094783          	lbu	a5,0(s2)
8002055c:	0808e893          	ori	a7,a7,128
80020560:	a81ff06f          	j	8001ffe0 <_vfiprintf_r+0x188>
80020564:	00094683          	lbu	a3,0(s2)
80020568:	02a00793          	li	a5,42
8002056c:	00190713          	addi	a4,s2,1
80020570:	42f688e3          	beq	a3,a5,800211a0 <_vfiprintf_r+0x1348>
80020574:	fd068793          	addi	a5,a3,-48
80020578:	00900593          	li	a1,9
8002057c:	00070913          	mv	s2,a4
80020580:	00000d93          	li	s11,0
80020584:	00900613          	li	a2,9
80020588:	a6f5e0e3          	bltu	a1,a5,8001ffe8 <_vfiprintf_r+0x190>
8002058c:	00094683          	lbu	a3,0(s2)
80020590:	002d9713          	slli	a4,s11,0x2
80020594:	01b70db3          	add	s11,a4,s11
80020598:	001d9d93          	slli	s11,s11,0x1
8002059c:	00fd8db3          	add	s11,s11,a5
800205a0:	fd068793          	addi	a5,a3,-48
800205a4:	00190913          	addi	s2,s2,1
800205a8:	fef672e3          	bgeu	a2,a5,8002058c <_vfiprintf_r+0x734>
800205ac:	a3dff06f          	j	8001ffe8 <_vfiprintf_r+0x190>
800205b0:	000c0513          	mv	a0,s8
800205b4:	01112623          	sw	a7,12(sp)
800205b8:	36d010ef          	jal	ra,80022124 <_localeconv_r>
800205bc:	00452783          	lw	a5,4(a0)
800205c0:	00078513          	mv	a0,a5
800205c4:	02f12023          	sw	a5,32(sp)
800205c8:	c3dfc0ef          	jal	ra,8001d204 <strlen>
800205cc:	00050793          	mv	a5,a0
800205d0:	000c0513          	mv	a0,s8
800205d4:	00f12e23          	sw	a5,28(sp)
800205d8:	34d010ef          	jal	ra,80022124 <_localeconv_r>
800205dc:	00852703          	lw	a4,8(a0)
800205e0:	01c12783          	lw	a5,28(sp)
800205e4:	00c12883          	lw	a7,12(sp)
800205e8:	00e12c23          	sw	a4,24(sp)
800205ec:	cc078ae3          	beqz	a5,800202c0 <_vfiprintf_r+0x468>
800205f0:	01812703          	lw	a4,24(sp)
800205f4:	00094783          	lbu	a5,0(s2)
800205f8:	9e0704e3          	beqz	a4,8001ffe0 <_vfiprintf_r+0x188>
800205fc:	00074703          	lbu	a4,0(a4)
80020600:	9e0700e3          	beqz	a4,8001ffe0 <_vfiprintf_r+0x188>
80020604:	4008e893          	ori	a7,a7,1024
80020608:	9d9ff06f          	j	8001ffe0 <_vfiprintf_r+0x188>
8002060c:	00094783          	lbu	a5,0(s2)
80020610:	0018e893          	ori	a7,a7,1
80020614:	9cdff06f          	j	8001ffe0 <_vfiprintf_r+0x188>
80020618:	03b14703          	lbu	a4,59(sp)
8002061c:	00094783          	lbu	a5,0(s2)
80020620:	9c0710e3          	bnez	a4,8001ffe0 <_vfiprintf_r+0x188>
80020624:	02000713          	li	a4,32
80020628:	02e10da3          	sb	a4,59(sp)
8002062c:	9b5ff06f          	j	8001ffe0 <_vfiprintf_r+0x188>
80020630:	0108e713          	ori	a4,a7,16
80020634:	02077793          	andi	a5,a4,32
80020638:	66078e63          	beqz	a5,80020cb4 <_vfiprintf_r+0xe5c>
8002063c:	007d0d13          	addi	s10,s10,7
80020640:	ff8d7d13          	andi	s10,s10,-8
80020644:	000d2783          	lw	a5,0(s10)
80020648:	004d2603          	lw	a2,4(s10)
8002064c:	008d0d13          	addi	s10,s10,8
80020650:	02010da3          	sb	zero,59(sp)
80020654:	fff00693          	li	a3,-1
80020658:	bff77893          	andi	a7,a4,-1025
8002065c:	0cdd8263          	beq	s11,a3,80020720 <_vfiprintf_r+0x8c8>
80020660:	00c7e6b3          	or	a3,a5,a2
80020664:	b7f77713          	andi	a4,a4,-1153
80020668:	1e069ce3          	bnez	a3,80021060 <_vfiprintf_r+0x1208>
8002066c:	00088e13          	mv	t3,a7
80020670:	00000793          	li	a5,0
80020674:	00070893          	mv	a7,a4
80020678:	080d9863          	bnez	s11,80020708 <_vfiprintf_r+0x8b0>
8002067c:	c8079ce3          	bnez	a5,80020314 <_vfiprintf_r+0x4bc>
80020680:	001e7e13          	andi	t3,t3,1
80020684:	7c0e0c63          	beqz	t3,80020e5c <_vfiprintf_r+0x1004>
80020688:	03000793          	li	a5,48
8002068c:	0ef107a3          	sb	a5,239(sp)
80020690:	000e0313          	mv	t1,t3
80020694:	0ef10493          	addi	s1,sp,239
80020698:	e11ff06f          	j	800204a8 <_vfiprintf_r+0x650>
8002069c:	00094783          	lbu	a5,0(s2)
800206a0:	06c00713          	li	a4,108
800206a4:	1ee782e3          	beq	a5,a4,80021088 <_vfiprintf_r+0x1230>
800206a8:	0108e893          	ori	a7,a7,16
800206ac:	935ff06f          	j	8001ffe0 <_vfiprintf_r+0x188>
800206b0:	00094783          	lbu	a5,0(s2)
800206b4:	06800713          	li	a4,104
800206b8:	1ce780e3          	beq	a5,a4,80021078 <_vfiprintf_r+0x1220>
800206bc:	0408e893          	ori	a7,a7,64
800206c0:	921ff06f          	j	8001ffe0 <_vfiprintf_r+0x188>
800206c4:	0108ee13          	ori	t3,a7,16
800206c8:	020e7793          	andi	a5,t3,32
800206cc:	5c078063          	beqz	a5,80020c8c <_vfiprintf_r+0xe34>
800206d0:	007d0d13          	addi	s10,s10,7
800206d4:	ff8d7d13          	andi	s10,s10,-8
800206d8:	000d2783          	lw	a5,0(s10)
800206dc:	004d2283          	lw	t0,4(s10)
800206e0:	008d0d13          	addi	s10,s10,8
800206e4:	02010da3          	sb	zero,59(sp)
800206e8:	fff00713          	li	a4,-1
800206ec:	000e0893          	mv	a7,t3
800206f0:	d8ed86e3          	beq	s11,a4,8002047c <_vfiprintf_r+0x624>
800206f4:	0057e733          	or	a4,a5,t0
800206f8:	f7fe7893          	andi	a7,t3,-129
800206fc:	d80710e3          	bnez	a4,8002047c <_vfiprintf_r+0x624>
80020700:	00100793          	li	a5,1
80020704:	f60d8ce3          	beqz	s11,8002067c <_vfiprintf_r+0x824>
80020708:	00100713          	li	a4,1
8002070c:	24e782e3          	beq	a5,a4,80021150 <_vfiprintf_r+0x12f8>
80020710:	00200713          	li	a4,2
80020714:	1ae788e3          	beq	a5,a4,800210c4 <_vfiprintf_r+0x126c>
80020718:	00000793          	li	a5,0
8002071c:	00000613          	li	a2,0
80020720:	0f010493          	addi	s1,sp,240
80020724:	01d61693          	slli	a3,a2,0x1d
80020728:	0077f713          	andi	a4,a5,7
8002072c:	0037d793          	srli	a5,a5,0x3
80020730:	03070713          	addi	a4,a4,48
80020734:	00f6e7b3          	or	a5,a3,a5
80020738:	00365613          	srli	a2,a2,0x3
8002073c:	fee48fa3          	sb	a4,-1(s1)
80020740:	00c7e6b3          	or	a3,a5,a2
80020744:	00048593          	mv	a1,s1
80020748:	fff48493          	addi	s1,s1,-1
8002074c:	fc069ce3          	bnez	a3,80020724 <_vfiprintf_r+0x8cc>
80020750:	0018f793          	andi	a5,a7,1
80020754:	3a078c63          	beqz	a5,80020b0c <_vfiprintf_r+0xcb4>
80020758:	03000793          	li	a5,48
8002075c:	3af70863          	beq	a4,a5,80020b0c <_vfiprintf_r+0xcb4>
80020760:	ffe58593          	addi	a1,a1,-2
80020764:	0f010713          	addi	a4,sp,240
80020768:	40b70e33          	sub	t3,a4,a1
8002076c:	fef48fa3          	sb	a5,-1(s1)
80020770:	000e0313          	mv	t1,t3
80020774:	73be4663          	blt	t3,s11,80020ea0 <_vfiprintf_r+0x1048>
80020778:	00058493          	mv	s1,a1
8002077c:	d2dff06f          	j	800204a8 <_vfiprintf_r+0x650>
80020780:	ffff8737          	lui	a4,0xffff8
80020784:	83074713          	xori	a4,a4,-2000
80020788:	02e11e23          	sh	a4,60(sp)
8002078c:	80029737          	lui	a4,0x80029
80020790:	8c070713          	addi	a4,a4,-1856 # 800288c0 <_ctype_+0x114>
80020794:	000d2783          	lw	a5,0(s10)
80020798:	00000613          	li	a2,0
8002079c:	0028e893          	ori	a7,a7,2
800207a0:	004d0d13          	addi	s10,s10,4
800207a4:	00e12423          	sw	a4,8(sp)
800207a8:	02010da3          	sb	zero,59(sp)
800207ac:	fff00713          	li	a4,-1
800207b0:	32ed8463          	beq	s11,a4,80020ad8 <_vfiprintf_r+0xc80>
800207b4:	00c7e733          	or	a4,a5,a2
800207b8:	f7f8f693          	andi	a3,a7,-129
800207bc:	30071863          	bnez	a4,80020acc <_vfiprintf_r+0xc74>
800207c0:	00088e13          	mv	t3,a7
800207c4:	00200793          	li	a5,2
800207c8:	00068893          	mv	a7,a3
800207cc:	eadff06f          	j	80020678 <_vfiprintf_r+0x820>
800207d0:	0208f793          	andi	a5,a7,32
800207d4:	6a079263          	bnez	a5,80020e78 <_vfiprintf_r+0x1020>
800207d8:	0108f793          	andi	a5,a7,16
800207dc:	0a079ee3          	bnez	a5,80021098 <_vfiprintf_r+0x1240>
800207e0:	0408f793          	andi	a5,a7,64
800207e4:	14079ee3          	bnez	a5,80021140 <_vfiprintf_r+0x12e8>
800207e8:	2008f893          	andi	a7,a7,512
800207ec:	0a0886e3          	beqz	a7,80021098 <_vfiprintf_r+0x1240>
800207f0:	000d2783          	lw	a5,0(s10)
800207f4:	004d0d13          	addi	s10,s10,4
800207f8:	01378023          	sb	s3,0(a5)
800207fc:	f4cff06f          	j	8001ff48 <_vfiprintf_r+0xf0>
80020800:	00100713          	li	a4,1
80020804:	000e0793          	mv	a5,t3
80020808:	04912623          	sw	s1,76(sp)
8002080c:	05c12823          	sw	t3,80(sp)
80020810:	05c12423          	sw	t3,72(sp)
80020814:	04e12223          	sw	a4,68(sp)
80020818:	000a8413          	mv	s0,s5
8002081c:	00840413          	addi	s0,s0,8
80020820:	a45ff06f          	j	80020264 <_vfiprintf_r+0x40c>
80020824:	00100613          	li	a2,1
80020828:	00000693          	li	a3,0
8002082c:	000a8593          	mv	a1,s5
80020830:	b55ff06f          	j	80020384 <_vfiprintf_r+0x52c>
80020834:	406b8eb3          	sub	t4,s7,t1
80020838:	9dd05ce3          	blez	t4,80020210 <_vfiprintf_r+0x3b8>
8002083c:	01000693          	li	a3,16
80020840:	15d6d8e3          	bge	a3,t4,80021190 <_vfiprintf_r+0x1338>
80020844:	80029f37          	lui	t5,0x80029
80020848:	c84f0f13          	addi	t5,t5,-892 # 80028c84 <zeroes.0>
8002084c:	00912623          	sw	s1,12(sp)
80020850:	00040593          	mv	a1,s0
80020854:	01000f93          	li	t6,16
80020858:	00700293          	li	t0,7
8002085c:	01112823          	sw	a7,16(sp)
80020860:	00612a23          	sw	t1,20(sp)
80020864:	03c12223          	sw	t3,36(sp)
80020868:	000e8413          	mv	s0,t4
8002086c:	000f0493          	mv	s1,t5
80020870:	0180006f          	j	80020888 <_vfiprintf_r+0xa30>
80020874:	00270613          	addi	a2,a4,2
80020878:	00858593          	addi	a1,a1,8
8002087c:	00068713          	mv	a4,a3
80020880:	ff040413          	addi	s0,s0,-16
80020884:	048fdc63          	bge	t6,s0,800208dc <_vfiprintf_r+0xa84>
80020888:	01078793          	addi	a5,a5,16
8002088c:	00170693          	addi	a3,a4,1
80020890:	0095a023          	sw	s1,0(a1)
80020894:	01f5a223          	sw	t6,4(a1)
80020898:	04f12423          	sw	a5,72(sp)
8002089c:	04d12223          	sw	a3,68(sp)
800208a0:	fcd2dae3          	bge	t0,a3,80020874 <_vfiprintf_r+0xa1c>
800208a4:	18078c63          	beqz	a5,80020a3c <_vfiprintf_r+0xbe4>
800208a8:	04010613          	addi	a2,sp,64
800208ac:	000b0593          	mv	a1,s6
800208b0:	000c0513          	mv	a0,s8
800208b4:	c9cff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
800208b8:	fc051c63          	bnez	a0,80020090 <_vfiprintf_r+0x238>
800208bc:	04412703          	lw	a4,68(sp)
800208c0:	01000f93          	li	t6,16
800208c4:	ff040413          	addi	s0,s0,-16
800208c8:	04812783          	lw	a5,72(sp)
800208cc:	000a8593          	mv	a1,s5
800208d0:	00170613          	addi	a2,a4,1
800208d4:	00700293          	li	t0,7
800208d8:	fa8fc8e3          	blt	t6,s0,80020888 <_vfiprintf_r+0xa30>
800208dc:	00048f13          	mv	t5,s1
800208e0:	01012883          	lw	a7,16(sp)
800208e4:	01412303          	lw	t1,20(sp)
800208e8:	02412e03          	lw	t3,36(sp)
800208ec:	00c12483          	lw	s1,12(sp)
800208f0:	00040e93          	mv	t4,s0
800208f4:	00058413          	mv	s0,a1
800208f8:	01d787b3          	add	a5,a5,t4
800208fc:	01e42023          	sw	t5,0(s0)
80020900:	01d42223          	sw	t4,4(s0)
80020904:	04f12423          	sw	a5,72(sp)
80020908:	04c12223          	sw	a2,68(sp)
8002090c:	00700713          	li	a4,7
80020910:	54c75c63          	bge	a4,a2,80020e68 <_vfiprintf_r+0x1010>
80020914:	7c078863          	beqz	a5,800210e4 <_vfiprintf_r+0x128c>
80020918:	04010613          	addi	a2,sp,64
8002091c:	000b0593          	mv	a1,s6
80020920:	000c0513          	mv	a0,s8
80020924:	01c12a23          	sw	t3,20(sp)
80020928:	00612823          	sw	t1,16(sp)
8002092c:	01112623          	sw	a7,12(sp)
80020930:	c20ff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
80020934:	f4051e63          	bnez	a0,80020090 <_vfiprintf_r+0x238>
80020938:	01412e03          	lw	t3,20(sp)
8002093c:	04412703          	lw	a4,68(sp)
80020940:	04812783          	lw	a5,72(sp)
80020944:	41cd8db3          	sub	s11,s11,t3
80020948:	01012303          	lw	t1,16(sp)
8002094c:	00c12883          	lw	a7,12(sp)
80020950:	000a8413          	mv	s0,s5
80020954:	00170593          	addi	a1,a4,1
80020958:	8db050e3          	blez	s11,80020218 <_vfiprintf_r+0x3c0>
8002095c:	80029f37          	lui	t5,0x80029
80020960:	c84f0f13          	addi	t5,t5,-892 # 80028c84 <zeroes.0>
80020964:	0bba5063          	bge	s4,s11,80020a04 <_vfiprintf_r+0xbac>
80020968:	00040613          	mv	a2,s0
8002096c:	00700e93          	li	t4,7
80020970:	000d8413          	mv	s0,s11
80020974:	01112623          	sw	a7,12(sp)
80020978:	00612823          	sw	t1,16(sp)
8002097c:	01c12a23          	sw	t3,20(sp)
80020980:	000c8d93          	mv	s11,s9
80020984:	0180006f          	j	8002099c <_vfiprintf_r+0xb44>
80020988:	00270593          	addi	a1,a4,2
8002098c:	00860613          	addi	a2,a2,8
80020990:	00068713          	mv	a4,a3
80020994:	ff040413          	addi	s0,s0,-16
80020998:	048a5a63          	bge	s4,s0,800209ec <_vfiprintf_r+0xb94>
8002099c:	01078793          	addi	a5,a5,16
800209a0:	00170693          	addi	a3,a4,1
800209a4:	01962023          	sw	s9,0(a2)
800209a8:	01462223          	sw	s4,4(a2)
800209ac:	04f12423          	sw	a5,72(sp)
800209b0:	04d12223          	sw	a3,68(sp)
800209b4:	fcdedae3          	bge	t4,a3,80020988 <_vfiprintf_r+0xb30>
800209b8:	06078a63          	beqz	a5,80020a2c <_vfiprintf_r+0xbd4>
800209bc:	04010613          	addi	a2,sp,64
800209c0:	000b0593          	mv	a1,s6
800209c4:	000c0513          	mv	a0,s8
800209c8:	b88ff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
800209cc:	ec051263          	bnez	a0,80020090 <_vfiprintf_r+0x238>
800209d0:	04412703          	lw	a4,68(sp)
800209d4:	ff040413          	addi	s0,s0,-16
800209d8:	04812783          	lw	a5,72(sp)
800209dc:	000a8613          	mv	a2,s5
800209e0:	00170593          	addi	a1,a4,1
800209e4:	00700e93          	li	t4,7
800209e8:	fa8a4ae3          	blt	s4,s0,8002099c <_vfiprintf_r+0xb44>
800209ec:	00c12883          	lw	a7,12(sp)
800209f0:	01012303          	lw	t1,16(sp)
800209f4:	01412e03          	lw	t3,20(sp)
800209f8:	000d8f13          	mv	t5,s11
800209fc:	00040d93          	mv	s11,s0
80020a00:	00060413          	mv	s0,a2
80020a04:	01b787b3          	add	a5,a5,s11
80020a08:	01e42023          	sw	t5,0(s0)
80020a0c:	01b42223          	sw	s11,4(s0)
80020a10:	04f12423          	sw	a5,72(sp)
80020a14:	04b12223          	sw	a1,68(sp)
80020a18:	00700713          	li	a4,7
80020a1c:	22b74063          	blt	a4,a1,80020c3c <_vfiprintf_r+0xde4>
80020a20:	00840413          	addi	s0,s0,8
80020a24:	00158593          	addi	a1,a1,1
80020a28:	ff0ff06f          	j	80020218 <_vfiprintf_r+0x3c0>
80020a2c:	00100593          	li	a1,1
80020a30:	00000713          	li	a4,0
80020a34:	000a8613          	mv	a2,s5
80020a38:	f5dff06f          	j	80020994 <_vfiprintf_r+0xb3c>
80020a3c:	00100613          	li	a2,1
80020a40:	00000713          	li	a4,0
80020a44:	000a8593          	mv	a1,s5
80020a48:	e39ff06f          	j	80020880 <_vfiprintf_r+0xa28>
80020a4c:	04078a63          	beqz	a5,80020aa0 <_vfiprintf_r+0xc48>
80020a50:	04010613          	addi	a2,sp,64
80020a54:	000b0593          	mv	a1,s6
80020a58:	000c0513          	mv	a0,s8
80020a5c:	03c12423          	sw	t3,40(sp)
80020a60:	02612223          	sw	t1,36(sp)
80020a64:	01112a23          	sw	a7,20(sp)
80020a68:	00512823          	sw	t0,16(sp)
80020a6c:	01f12623          	sw	t6,12(sp)
80020a70:	ae0ff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
80020a74:	e0051e63          	bnez	a0,80020090 <_vfiprintf_r+0x238>
80020a78:	04412703          	lw	a4,68(sp)
80020a7c:	04812783          	lw	a5,72(sp)
80020a80:	02812e03          	lw	t3,40(sp)
80020a84:	02412303          	lw	t1,36(sp)
80020a88:	01412883          	lw	a7,20(sp)
80020a8c:	01012283          	lw	t0,16(sp)
80020a90:	00c12f83          	lw	t6,12(sp)
80020a94:	000a8413          	mv	s0,s5
80020a98:	00170593          	addi	a1,a4,1
80020a9c:	efcff06f          	j	80020198 <_vfiprintf_r+0x340>
80020aa0:	3e0f8863          	beqz	t6,80020e90 <_vfiprintf_r+0x1038>
80020aa4:	03c10793          	addi	a5,sp,60
80020aa8:	04f12623          	sw	a5,76(sp)
80020aac:	00200793          	li	a5,2
80020ab0:	04f12823          	sw	a5,80(sp)
80020ab4:	00100593          	li	a1,1
80020ab8:	000a8413          	mv	s0,s5
80020abc:	00058713          	mv	a4,a1
80020ac0:	00840413          	addi	s0,s0,8
80020ac4:	00158593          	addi	a1,a1,1
80020ac8:	f40ff06f          	j	80020208 <_vfiprintf_r+0x3b0>
80020acc:	00200713          	li	a4,2
80020ad0:	00068893          	mv	a7,a3
80020ad4:	c40706e3          	beqz	a4,80020720 <_vfiprintf_r+0x8c8>
80020ad8:	00812583          	lw	a1,8(sp)
80020adc:	0f010493          	addi	s1,sp,240
80020ae0:	00f7f713          	andi	a4,a5,15
80020ae4:	00e58733          	add	a4,a1,a4
80020ae8:	00074683          	lbu	a3,0(a4)
80020aec:	0047d793          	srli	a5,a5,0x4
80020af0:	01c61713          	slli	a4,a2,0x1c
80020af4:	00f767b3          	or	a5,a4,a5
80020af8:	00465613          	srli	a2,a2,0x4
80020afc:	fed48fa3          	sb	a3,-1(s1)
80020b00:	00c7e733          	or	a4,a5,a2
80020b04:	fff48493          	addi	s1,s1,-1
80020b08:	fc071ce3          	bnez	a4,80020ae0 <_vfiprintf_r+0xc88>
80020b0c:	0f010793          	addi	a5,sp,240
80020b10:	40978e33          	sub	t3,a5,s1
80020b14:	000e0313          	mv	t1,t3
80020b18:	99be58e3          	bge	t3,s11,800204a8 <_vfiprintf_r+0x650>
80020b1c:	000d8313          	mv	t1,s11
80020b20:	989ff06f          	j	800204a8 <_vfiprintf_r+0x650>
80020b24:	01000593          	li	a1,16
80020b28:	64d5d063          	bge	a1,a3,80021168 <_vfiprintf_r+0x1310>
80020b2c:	80029eb7          	lui	t4,0x80029
80020b30:	c94e8e93          	addi	t4,t4,-876 # 80028c94 <blanks.1>
80020b34:	00912a23          	sw	s1,20(sp)
80020b38:	00040593          	mv	a1,s0
80020b3c:	01000f13          	li	t5,16
80020b40:	00700393          	li	t2,7
80020b44:	01f12623          	sw	t6,12(sp)
80020b48:	00512823          	sw	t0,16(sp)
80020b4c:	03112223          	sw	a7,36(sp)
80020b50:	02612423          	sw	t1,40(sp)
80020b54:	03c12623          	sw	t3,44(sp)
80020b58:	00068413          	mv	s0,a3
80020b5c:	000e8493          	mv	s1,t4
80020b60:	01c0006f          	j	80020b7c <_vfiprintf_r+0xd24>
80020b64:	00270513          	addi	a0,a4,2
80020b68:	00858593          	addi	a1,a1,8
80020b6c:	00060713          	mv	a4,a2
80020b70:	ff040413          	addi	s0,s0,-16
80020b74:	048f5c63          	bge	t5,s0,80020bcc <_vfiprintf_r+0xd74>
80020b78:	00170613          	addi	a2,a4,1
80020b7c:	01078793          	addi	a5,a5,16
80020b80:	0095a023          	sw	s1,0(a1)
80020b84:	01e5a223          	sw	t5,4(a1)
80020b88:	04f12423          	sw	a5,72(sp)
80020b8c:	04c12223          	sw	a2,68(sp)
80020b90:	fcc3dae3          	bge	t2,a2,80020b64 <_vfiprintf_r+0xd0c>
80020b94:	08078463          	beqz	a5,80020c1c <_vfiprintf_r+0xdc4>
80020b98:	04010613          	addi	a2,sp,64
80020b9c:	000b0593          	mv	a1,s6
80020ba0:	000c0513          	mv	a0,s8
80020ba4:	9acff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
80020ba8:	ce051463          	bnez	a0,80020090 <_vfiprintf_r+0x238>
80020bac:	04412703          	lw	a4,68(sp)
80020bb0:	01000f13          	li	t5,16
80020bb4:	ff040413          	addi	s0,s0,-16
80020bb8:	04812783          	lw	a5,72(sp)
80020bbc:	000a8593          	mv	a1,s5
80020bc0:	00170513          	addi	a0,a4,1
80020bc4:	00700393          	li	t2,7
80020bc8:	fa8f48e3          	blt	t5,s0,80020b78 <_vfiprintf_r+0xd20>
80020bcc:	00048e93          	mv	t4,s1
80020bd0:	00c12f83          	lw	t6,12(sp)
80020bd4:	01012283          	lw	t0,16(sp)
80020bd8:	02412883          	lw	a7,36(sp)
80020bdc:	02812303          	lw	t1,40(sp)
80020be0:	02c12e03          	lw	t3,44(sp)
80020be4:	01412483          	lw	s1,20(sp)
80020be8:	00040693          	mv	a3,s0
80020bec:	00058413          	mv	s0,a1
80020bf0:	00d787b3          	add	a5,a5,a3
80020bf4:	01d42023          	sw	t4,0(s0)
80020bf8:	00d42223          	sw	a3,4(s0)
80020bfc:	04f12423          	sw	a5,72(sp)
80020c00:	04a12223          	sw	a0,68(sp)
80020c04:	00700713          	li	a4,7
80020c08:	0ea74a63          	blt	a4,a0,80020cfc <_vfiprintf_r+0xea4>
80020c0c:	00840413          	addi	s0,s0,8
80020c10:	00150593          	addi	a1,a0,1
80020c14:	00050713          	mv	a4,a0
80020c18:	d48ff06f          	j	80020160 <_vfiprintf_r+0x308>
80020c1c:	00000713          	li	a4,0
80020c20:	00100513          	li	a0,1
80020c24:	000a8593          	mv	a1,s5
80020c28:	f49ff06f          	j	80020b70 <_vfiprintf_r+0xd18>
80020c2c:	006bd463          	bge	s7,t1,80020c34 <_vfiprintf_r+0xddc>
80020c30:	00030b93          	mv	s7,t1
80020c34:	017989b3          	add	s3,s3,s7
80020c38:	e4cff06f          	j	80020284 <_vfiprintf_r+0x42c>
80020c3c:	bc0782e3          	beqz	a5,80020800 <_vfiprintf_r+0x9a8>
80020c40:	04010613          	addi	a2,sp,64
80020c44:	000b0593          	mv	a1,s6
80020c48:	000c0513          	mv	a0,s8
80020c4c:	01c12a23          	sw	t3,20(sp)
80020c50:	00612823          	sw	t1,16(sp)
80020c54:	01112623          	sw	a7,12(sp)
80020c58:	8f8ff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
80020c5c:	c2051a63          	bnez	a0,80020090 <_vfiprintf_r+0x238>
80020c60:	04412583          	lw	a1,68(sp)
80020c64:	04812783          	lw	a5,72(sp)
80020c68:	01412e03          	lw	t3,20(sp)
80020c6c:	01012303          	lw	t1,16(sp)
80020c70:	00c12883          	lw	a7,12(sp)
80020c74:	000a8413          	mv	s0,s5
80020c78:	00158593          	addi	a1,a1,1
80020c7c:	d9cff06f          	j	80020218 <_vfiprintf_r+0x3c0>
80020c80:	04012223          	sw	zero,68(sp)
80020c84:	000a8413          	mv	s0,s5
80020c88:	b30ff06f          	j	8001ffb8 <_vfiprintf_r+0x160>
80020c8c:	010e7713          	andi	a4,t3,16
80020c90:	000d2783          	lw	a5,0(s10)
80020c94:	004d0d13          	addi	s10,s10,4
80020c98:	00071a63          	bnez	a4,80020cac <_vfiprintf_r+0xe54>
80020c9c:	040e7713          	andi	a4,t3,64
80020ca0:	42070863          	beqz	a4,800210d0 <_vfiprintf_r+0x1278>
80020ca4:	01079793          	slli	a5,a5,0x10
80020ca8:	0107d793          	srli	a5,a5,0x10
80020cac:	00000293          	li	t0,0
80020cb0:	a35ff06f          	j	800206e4 <_vfiprintf_r+0x88c>
80020cb4:	01077693          	andi	a3,a4,16
80020cb8:	000d2783          	lw	a5,0(s10)
80020cbc:	004d0d13          	addi	s10,s10,4
80020cc0:	02069263          	bnez	a3,80020ce4 <_vfiprintf_r+0xe8c>
80020cc4:	04077693          	andi	a3,a4,64
80020cc8:	00068a63          	beqz	a3,80020cdc <_vfiprintf_r+0xe84>
80020ccc:	01079793          	slli	a5,a5,0x10
80020cd0:	0107d793          	srli	a5,a5,0x10
80020cd4:	00000613          	li	a2,0
80020cd8:	979ff06f          	j	80020650 <_vfiprintf_r+0x7f8>
80020cdc:	20077693          	andi	a3,a4,512
80020ce0:	44069a63          	bnez	a3,80021134 <_vfiprintf_r+0x12dc>
80020ce4:	00000613          	li	a2,0
80020ce8:	969ff06f          	j	80020650 <_vfiprintf_r+0x7f8>
80020cec:	00100593          	li	a1,1
80020cf0:	00000713          	li	a4,0
80020cf4:	000a8413          	mv	s0,s5
80020cf8:	d10ff06f          	j	80020208 <_vfiprintf_r+0x3b0>
80020cfc:	26078863          	beqz	a5,80020f6c <_vfiprintf_r+0x1114>
80020d00:	04010613          	addi	a2,sp,64
80020d04:	000b0593          	mv	a1,s6
80020d08:	000c0513          	mv	a0,s8
80020d0c:	03c12423          	sw	t3,40(sp)
80020d10:	02612223          	sw	t1,36(sp)
80020d14:	01112a23          	sw	a7,20(sp)
80020d18:	00512823          	sw	t0,16(sp)
80020d1c:	01f12623          	sw	t6,12(sp)
80020d20:	830ff0ef          	jal	ra,8001fd50 <__sprint_r.part.0>
80020d24:	b6051663          	bnez	a0,80020090 <_vfiprintf_r+0x238>
80020d28:	04412703          	lw	a4,68(sp)
80020d2c:	04812783          	lw	a5,72(sp)
80020d30:	02812e03          	lw	t3,40(sp)
80020d34:	02412303          	lw	t1,36(sp)
80020d38:	01412883          	lw	a7,20(sp)
80020d3c:	01012283          	lw	t0,16(sp)
80020d40:	00c12f83          	lw	t6,12(sp)
80020d44:	000a8413          	mv	s0,s5
80020d48:	00170593          	addi	a1,a4,1
80020d4c:	c14ff06f          	j	80020160 <_vfiprintf_r+0x308>
80020d50:	ccccdeb7          	lui	t4,0xccccd
80020d54:	ccde8313          	addi	t1,t4,-819 # cccccccd <__bss_end+0x4cc46511>
80020d58:	01812803          	lw	a6,24(sp)
80020d5c:	4008ff13          	andi	t5,a7,1024
80020d60:	00000613          	li	a2,0
80020d64:	0f010593          	addi	a1,sp,240
80020d68:	00500e13          	li	t3,5
80020d6c:	ccce8e93          	addi	t4,t4,-820
80020d70:	0ff00f93          	li	t6,255
80020d74:	0540006f          	j	80020dc8 <_vfiprintf_r+0xf70>
80020d78:	00f4b733          	sltu	a4,s1,a5
80020d7c:	00e48733          	add	a4,s1,a4
80020d80:	03c77733          	remu	a4,a4,t3
80020d84:	40e78733          	sub	a4,a5,a4
80020d88:	00e7b5b3          	sltu	a1,a5,a4
80020d8c:	40b285b3          	sub	a1,t0,a1
80020d90:	03d703b3          	mul	t2,a4,t4
80020d94:	026585b3          	mul	a1,a1,t1
80020d98:	02673533          	mulhu	a0,a4,t1
80020d9c:	007585b3          	add	a1,a1,t2
80020da0:	02670733          	mul	a4,a4,t1
80020da4:	00a585b3          	add	a1,a1,a0
80020da8:	01f59513          	slli	a0,a1,0x1f
80020dac:	0015d593          	srli	a1,a1,0x1
80020db0:	00175713          	srli	a4,a4,0x1
80020db4:	00e56733          	or	a4,a0,a4
80020db8:	32028e63          	beqz	t0,800210f4 <_vfiprintf_r+0x129c>
80020dbc:	00058293          	mv	t0,a1
80020dc0:	00070793          	mv	a5,a4
80020dc4:	00068593          	mv	a1,a3
80020dc8:	005784b3          	add	s1,a5,t0
80020dcc:	00f4b733          	sltu	a4,s1,a5
80020dd0:	00e48733          	add	a4,s1,a4
80020dd4:	03c77733          	remu	a4,a4,t3
80020dd8:	fff58693          	addi	a3,a1,-1
80020ddc:	00160613          	addi	a2,a2,1
80020de0:	40e78733          	sub	a4,a5,a4
80020de4:	00e7b3b3          	sltu	t2,a5,a4
80020de8:	407283b3          	sub	t2,t0,t2
80020dec:	02673533          	mulhu	a0,a4,t1
80020df0:	026383b3          	mul	t2,t2,t1
80020df4:	02670733          	mul	a4,a4,t1
80020df8:	00a383b3          	add	t2,t2,a0
80020dfc:	01f39393          	slli	t2,t2,0x1f
80020e00:	00175513          	srli	a0,a4,0x1
80020e04:	00a3e533          	or	a0,t2,a0
80020e08:	00251713          	slli	a4,a0,0x2
80020e0c:	00a70733          	add	a4,a4,a0
80020e10:	00171713          	slli	a4,a4,0x1
80020e14:	40e78733          	sub	a4,a5,a4
80020e18:	03070713          	addi	a4,a4,48
80020e1c:	fee58fa3          	sb	a4,-1(a1)
80020e20:	f40f0ce3          	beqz	t5,80020d78 <_vfiprintf_r+0xf20>
80020e24:	00084703          	lbu	a4,0(a6)
80020e28:	f4c718e3          	bne	a4,a2,80020d78 <_vfiprintf_r+0xf20>
80020e2c:	f5f606e3          	beq	a2,t6,80020d78 <_vfiprintf_r+0xf20>
80020e30:	16029063          	bnez	t0,80020f90 <_vfiprintf_r+0x1138>
80020e34:	00900713          	li	a4,9
80020e38:	14f76c63          	bltu	a4,a5,80020f90 <_vfiprintf_r+0x1138>
80020e3c:	0f010793          	addi	a5,sp,240
80020e40:	40d78e33          	sub	t3,a5,a3
80020e44:	01012c23          	sw	a6,24(sp)
80020e48:	00068493          	mv	s1,a3
80020e4c:	000e0313          	mv	t1,t3
80020e50:	e5be5c63          	bge	t3,s11,800204a8 <_vfiprintf_r+0x650>
80020e54:	000d8313          	mv	t1,s11
80020e58:	e50ff06f          	j	800204a8 <_vfiprintf_r+0x650>
80020e5c:	00000313          	li	t1,0
80020e60:	0f010493          	addi	s1,sp,240
80020e64:	e44ff06f          	j	800204a8 <_vfiprintf_r+0x650>
80020e68:	00840413          	addi	s0,s0,8
80020e6c:	00160593          	addi	a1,a2,1
80020e70:	00060713          	mv	a4,a2
80020e74:	b9cff06f          	j	80020210 <_vfiprintf_r+0x3b8>
80020e78:	000d2783          	lw	a5,0(s10)
80020e7c:	41f9d713          	srai	a4,s3,0x1f
80020e80:	004d0d13          	addi	s10,s10,4
80020e84:	0137a023          	sw	s3,0(a5)
80020e88:	00e7a223          	sw	a4,4(a5)
80020e8c:	8bcff06f          	j	8001ff48 <_vfiprintf_r+0xf0>
80020e90:	00000713          	li	a4,0
80020e94:	00100593          	li	a1,1
80020e98:	000a8413          	mv	s0,s5
80020e9c:	b6cff06f          	j	80020208 <_vfiprintf_r+0x3b0>
80020ea0:	000d8313          	mv	t1,s11
80020ea4:	00058493          	mv	s1,a1
80020ea8:	e00ff06f          	j	800204a8 <_vfiprintf_r+0x650>
80020eac:	00088e13          	mv	t3,a7
80020eb0:	819ff06f          	j	800206c8 <_vfiprintf_r+0x870>
80020eb4:	00088713          	mv	a4,a7
80020eb8:	f7cff06f          	j	80020634 <_vfiprintf_r+0x7dc>
80020ebc:	800297b7          	lui	a5,0x80029
80020ec0:	8d478793          	addi	a5,a5,-1836 # 800288d4 <_ctype_+0x128>
80020ec4:	00f12423          	sw	a5,8(sp)
80020ec8:	0208f793          	andi	a5,a7,32
80020ecc:	04078a63          	beqz	a5,80020f20 <_vfiprintf_r+0x10c8>
80020ed0:	007d0d13          	addi	s10,s10,7
80020ed4:	ff8d7d13          	andi	s10,s10,-8
80020ed8:	000d2783          	lw	a5,0(s10)
80020edc:	004d2603          	lw	a2,4(s10)
80020ee0:	008d0d13          	addi	s10,s10,8
80020ee4:	0018f713          	andi	a4,a7,1
80020ee8:	00070e63          	beqz	a4,80020f04 <_vfiprintf_r+0x10ac>
80020eec:	00c7e733          	or	a4,a5,a2
80020ef0:	00070a63          	beqz	a4,80020f04 <_vfiprintf_r+0x10ac>
80020ef4:	03000713          	li	a4,48
80020ef8:	02e10e23          	sb	a4,60(sp)
80020efc:	02d10ea3          	sb	a3,61(sp)
80020f00:	0028e893          	ori	a7,a7,2
80020f04:	bff8f893          	andi	a7,a7,-1025
80020f08:	8a1ff06f          	j	800207a8 <_vfiprintf_r+0x950>
80020f0c:	800297b7          	lui	a5,0x80029
80020f10:	8c078793          	addi	a5,a5,-1856 # 800288c0 <_ctype_+0x114>
80020f14:	00f12423          	sw	a5,8(sp)
80020f18:	0208f793          	andi	a5,a7,32
80020f1c:	fa079ae3          	bnez	a5,80020ed0 <_vfiprintf_r+0x1078>
80020f20:	0108f713          	andi	a4,a7,16
80020f24:	000d2783          	lw	a5,0(s10)
80020f28:	004d0d13          	addi	s10,s10,4
80020f2c:	12071663          	bnez	a4,80021058 <_vfiprintf_r+0x1200>
80020f30:	0408f713          	andi	a4,a7,64
80020f34:	10070e63          	beqz	a4,80021050 <_vfiprintf_r+0x11f8>
80020f38:	01079793          	slli	a5,a5,0x10
80020f3c:	0107d793          	srli	a5,a5,0x10
80020f40:	00000613          	li	a2,0
80020f44:	fa1ff06f          	j	80020ee4 <_vfiprintf_r+0x108c>
80020f48:	00048513          	mv	a0,s1
80020f4c:	ab8fc0ef          	jal	ra,8001d204 <strlen>
80020f50:	fff54313          	not	t1,a0
80020f54:	41f35313          	srai	t1,t1,0x1f
80020f58:	00c12883          	lw	a7,12(sp)
80020f5c:	00050e13          	mv	t3,a0
80020f60:	00657333          	and	t1,a0,t1
80020f64:	00000d93          	li	s11,0
80020f68:	d40ff06f          	j	800204a8 <_vfiprintf_r+0x650>
80020f6c:	03b14703          	lbu	a4,59(sp)
80020f70:	18070c63          	beqz	a4,80021108 <_vfiprintf_r+0x12b0>
80020f74:	03b10793          	addi	a5,sp,59
80020f78:	04f12623          	sw	a5,76(sp)
80020f7c:	00100793          	li	a5,1
80020f80:	04f12823          	sw	a5,80(sp)
80020f84:	00100593          	li	a1,1
80020f88:	000a8413          	mv	s0,s5
80020f8c:	a00ff06f          	j	8002018c <_vfiprintf_r+0x334>
80020f90:	02f12223          	sw	a5,36(sp)
80020f94:	01c12783          	lw	a5,28(sp)
80020f98:	02012583          	lw	a1,32(sp)
80020f9c:	02512423          	sw	t0,40(sp)
80020fa0:	40f686b3          	sub	a3,a3,a5
80020fa4:	00078613          	mv	a2,a5
80020fa8:	00068513          	mv	a0,a3
80020fac:	01e12c23          	sw	t5,24(sp)
80020fb0:	01112a23          	sw	a7,20(sp)
80020fb4:	01012823          	sw	a6,16(sp)
80020fb8:	00d12623          	sw	a3,12(sp)
80020fbc:	a55fb0ef          	jal	ra,8001ca10 <strncpy>
80020fc0:	02412783          	lw	a5,36(sp)
80020fc4:	00500613          	li	a2,5
80020fc8:	01012803          	lw	a6,16(sp)
80020fcc:	00f4b733          	sltu	a4,s1,a5
80020fd0:	00e48733          	add	a4,s1,a4
80020fd4:	02c77733          	remu	a4,a4,a2
80020fd8:	00184583          	lbu	a1,1(a6)
80020fdc:	02812283          	lw	t0,40(sp)
80020fe0:	ccccd3b7          	lui	t2,0xccccd
80020fe4:	00b035b3          	snez	a1,a1
80020fe8:	00b80833          	add	a6,a6,a1
80020fec:	ccd38513          	addi	a0,t2,-819 # cccccccd <__bss_end+0x4cc46511>
80020ff0:	ccc38393          	addi	t2,t2,-820
80020ff4:	00c12683          	lw	a3,12(sp)
80020ff8:	01412883          	lw	a7,20(sp)
80020ffc:	01812f03          	lw	t5,24(sp)
80021000:	00000613          	li	a2,0
80021004:	00500e13          	li	t3,5
80021008:	00050313          	mv	t1,a0
8002100c:	0ff00f93          	li	t6,255
80021010:	40e78733          	sub	a4,a5,a4
80021014:	00e7b5b3          	sltu	a1,a5,a4
80021018:	40b285b3          	sub	a1,t0,a1
8002101c:	027703b3          	mul	t2,a4,t2
80021020:	02a585b3          	mul	a1,a1,a0
80021024:	02a732b3          	mulhu	t0,a4,a0
80021028:	007585b3          	add	a1,a1,t2
8002102c:	02a707b3          	mul	a5,a4,a0
80021030:	005585b3          	add	a1,a1,t0
80021034:	01f59713          	slli	a4,a1,0x1f
80021038:	0015d593          	srli	a1,a1,0x1
8002103c:	0017d793          	srli	a5,a5,0x1
80021040:	00f76733          	or	a4,a4,a5
80021044:	ccccd7b7          	lui	a5,0xccccd
80021048:	ccc78e93          	addi	t4,a5,-820 # cccccccc <__bss_end+0x4cc46510>
8002104c:	d71ff06f          	j	80020dbc <_vfiprintf_r+0xf64>
80021050:	2008f713          	andi	a4,a7,512
80021054:	0c071063          	bnez	a4,80021114 <_vfiprintf_r+0x12bc>
80021058:	00000613          	li	a2,0
8002105c:	e89ff06f          	j	80020ee4 <_vfiprintf_r+0x108c>
80021060:	00070893          	mv	a7,a4
80021064:	00000713          	li	a4,0
80021068:	ea070c63          	beqz	a4,80020720 <_vfiprintf_r+0x8c8>
8002106c:	a6dff06f          	j	80020ad8 <_vfiprintf_r+0xc80>
80021070:	6a8000ef          	jal	ra,80021718 <__sinit>
80021074:	e3dfe06f          	j	8001feb0 <_vfiprintf_r+0x58>
80021078:	00194783          	lbu	a5,1(s2)
8002107c:	2008e893          	ori	a7,a7,512
80021080:	00190913          	addi	s2,s2,1
80021084:	f5dfe06f          	j	8001ffe0 <_vfiprintf_r+0x188>
80021088:	00194783          	lbu	a5,1(s2)
8002108c:	0208e893          	ori	a7,a7,32
80021090:	00190913          	addi	s2,s2,1
80021094:	f4dfe06f          	j	8001ffe0 <_vfiprintf_r+0x188>
80021098:	000d2783          	lw	a5,0(s10)
8002109c:	004d0d13          	addi	s10,s10,4
800210a0:	0137a023          	sw	s3,0(a5)
800210a4:	ea5fe06f          	j	8001ff48 <_vfiprintf_r+0xf0>
800210a8:	00600793          	li	a5,6
800210ac:	000d8e13          	mv	t3,s11
800210b0:	05b7e863          	bltu	a5,s11,80021100 <_vfiprintf_r+0x12a8>
800210b4:	800294b7          	lui	s1,0x80029
800210b8:	000e0313          	mv	t1,t3
800210bc:	8e848493          	addi	s1,s1,-1816 # 800288e8 <_ctype_+0x13c>
800210c0:	870ff06f          	j	80020130 <_vfiprintf_r+0x2d8>
800210c4:	00000793          	li	a5,0
800210c8:	00000613          	li	a2,0
800210cc:	a0dff06f          	j	80020ad8 <_vfiprintf_r+0xc80>
800210d0:	200e7713          	andi	a4,t3,512
800210d4:	bc070ce3          	beqz	a4,80020cac <_vfiprintf_r+0xe54>
800210d8:	0ff7f793          	zext.b	a5,a5
800210dc:	00000293          	li	t0,0
800210e0:	e04ff06f          	j	800206e4 <_vfiprintf_r+0x88c>
800210e4:	00100593          	li	a1,1
800210e8:	00000713          	li	a4,0
800210ec:	000a8413          	mv	s0,s5
800210f0:	920ff06f          	j	80020210 <_vfiprintf_r+0x3b8>
800210f4:	00900513          	li	a0,9
800210f8:	ccf562e3          	bltu	a0,a5,80020dbc <_vfiprintf_r+0xf64>
800210fc:	d41ff06f          	j	80020e3c <_vfiprintf_r+0xfe4>
80021100:	00600e13          	li	t3,6
80021104:	fb1ff06f          	j	800210b4 <_vfiprintf_r+0x125c>
80021108:	00100593          	li	a1,1
8002110c:	000a8413          	mv	s0,s5
80021110:	888ff06f          	j	80020198 <_vfiprintf_r+0x340>
80021114:	0ff7f793          	zext.b	a5,a5
80021118:	00000613          	li	a2,0
8002111c:	dc9ff06f          	j	80020ee4 <_vfiprintf_r+0x108c>
80021120:	01879793          	slli	a5,a5,0x18
80021124:	4187d793          	srai	a5,a5,0x18
80021128:	41f7d293          	srai	t0,a5,0x1f
8002112c:	00028713          	mv	a4,t0
80021130:	9c8ff06f          	j	800202f8 <_vfiprintf_r+0x4a0>
80021134:	0ff7f793          	zext.b	a5,a5
80021138:	00000613          	li	a2,0
8002113c:	d14ff06f          	j	80020650 <_vfiprintf_r+0x7f8>
80021140:	000d2783          	lw	a5,0(s10)
80021144:	004d0d13          	addi	s10,s10,4
80021148:	01379023          	sh	s3,0(a5)
8002114c:	dfdfe06f          	j	8001ff48 <_vfiprintf_r+0xf0>
80021150:	03000793          	li	a5,48
80021154:	b3cff06f          	j	80020490 <_vfiprintf_r+0x638>
80021158:	000d8313          	mv	t1,s11
8002115c:	000d8e13          	mv	t3,s11
80021160:	00000d93          	li	s11,0
80021164:	b44ff06f          	j	800204a8 <_vfiprintf_r+0x650>
80021168:	80029eb7          	lui	t4,0x80029
8002116c:	00060513          	mv	a0,a2
80021170:	c94e8e93          	addi	t4,t4,-876 # 80028c94 <blanks.1>
80021174:	a7dff06f          	j	80020bf0 <_vfiprintf_r+0xd98>
80021178:	80029eb7          	lui	t4,0x80029
8002117c:	00168613          	addi	a2,a3,1
80021180:	c94e8e93          	addi	t4,t4,-876 # 80028c94 <blanks.1>
80021184:	a64ff06f          	j	800203e8 <_vfiprintf_r+0x590>
80021188:	fff00d13          	li	s10,-1
8002118c:	f19fe06f          	j	800200a4 <_vfiprintf_r+0x24c>
80021190:	80029f37          	lui	t5,0x80029
80021194:	00058613          	mv	a2,a1
80021198:	c84f0f13          	addi	t5,t5,-892 # 80028c84 <zeroes.0>
8002119c:	f5cff06f          	j	800208f8 <_vfiprintf_r+0xaa0>
800211a0:	000d2d83          	lw	s11,0(s10)
800211a4:	004d0d13          	addi	s10,s10,4
800211a8:	000dd463          	bgez	s11,800211b0 <_vfiprintf_r+0x1358>
800211ac:	fff00d93          	li	s11,-1
800211b0:	00194783          	lbu	a5,1(s2)
800211b4:	00070913          	mv	s2,a4
800211b8:	e29fe06f          	j	8001ffe0 <_vfiprintf_r+0x188>

800211bc <__sbprintf>:
800211bc:	00c59783          	lh	a5,12(a1)
800211c0:	00e5d703          	lhu	a4,14(a1)
800211c4:	0645a303          	lw	t1,100(a1)
800211c8:	ffd7f793          	andi	a5,a5,-3
800211cc:	01079793          	slli	a5,a5,0x10
800211d0:	01c5a883          	lw	a7,28(a1)
800211d4:	0245a803          	lw	a6,36(a1)
800211d8:	01071713          	slli	a4,a4,0x10
800211dc:	0107d793          	srli	a5,a5,0x10
800211e0:	b8010113          	addi	sp,sp,-1152
800211e4:	00e7e7b3          	or	a5,a5,a4
800211e8:	46812c23          	sw	s0,1144(sp)
800211ec:	40000713          	li	a4,1024
800211f0:	00f12a23          	sw	a5,20(sp)
800211f4:	00058413          	mv	s0,a1
800211f8:	07010793          	addi	a5,sp,112
800211fc:	00810593          	addi	a1,sp,8
80021200:	46912a23          	sw	s1,1140(sp)
80021204:	47212823          	sw	s2,1136(sp)
80021208:	46112e23          	sw	ra,1148(sp)
8002120c:	00050913          	mv	s2,a0
80021210:	06612623          	sw	t1,108(sp)
80021214:	03112223          	sw	a7,36(sp)
80021218:	03012623          	sw	a6,44(sp)
8002121c:	00f12423          	sw	a5,8(sp)
80021220:	00f12c23          	sw	a5,24(sp)
80021224:	00e12823          	sw	a4,16(sp)
80021228:	00e12e23          	sw	a4,28(sp)
8002122c:	02012023          	sw	zero,32(sp)
80021230:	c29fe0ef          	jal	ra,8001fe58 <_vfiprintf_r>
80021234:	00050493          	mv	s1,a0
80021238:	02055c63          	bgez	a0,80021270 <__sbprintf+0xb4>
8002123c:	01415783          	lhu	a5,20(sp)
80021240:	0407f793          	andi	a5,a5,64
80021244:	00078863          	beqz	a5,80021254 <__sbprintf+0x98>
80021248:	00c45783          	lhu	a5,12(s0)
8002124c:	0407e793          	ori	a5,a5,64
80021250:	00f41623          	sh	a5,12(s0)
80021254:	47c12083          	lw	ra,1148(sp)
80021258:	47812403          	lw	s0,1144(sp)
8002125c:	47012903          	lw	s2,1136(sp)
80021260:	00048513          	mv	a0,s1
80021264:	47412483          	lw	s1,1140(sp)
80021268:	48010113          	addi	sp,sp,1152
8002126c:	00008067          	ret
80021270:	00810593          	addi	a1,sp,8
80021274:	00090513          	mv	a0,s2
80021278:	248000ef          	jal	ra,800214c0 <_fflush_r>
8002127c:	fc0500e3          	beqz	a0,8002123c <__sbprintf+0x80>
80021280:	fff00493          	li	s1,-1
80021284:	fb9ff06f          	j	8002123c <__sbprintf+0x80>

80021288 <__sflush_r>:
80021288:	00c59703          	lh	a4,12(a1)
8002128c:	fe010113          	addi	sp,sp,-32
80021290:	00812c23          	sw	s0,24(sp)
80021294:	01312623          	sw	s3,12(sp)
80021298:	00112e23          	sw	ra,28(sp)
8002129c:	00912a23          	sw	s1,20(sp)
800212a0:	01212823          	sw	s2,16(sp)
800212a4:	00877793          	andi	a5,a4,8
800212a8:	00058413          	mv	s0,a1
800212ac:	00050993          	mv	s3,a0
800212b0:	12079063          	bnez	a5,800213d0 <__sflush_r+0x148>
800212b4:	000017b7          	lui	a5,0x1
800212b8:	80078793          	addi	a5,a5,-2048 # 800 <__STACKSIZE__-0x3800>
800212bc:	0045a683          	lw	a3,4(a1)
800212c0:	00f767b3          	or	a5,a4,a5
800212c4:	00f59623          	sh	a5,12(a1)
800212c8:	18d05663          	blez	a3,80021454 <__sflush_r+0x1cc>
800212cc:	02842803          	lw	a6,40(s0)
800212d0:	0e080063          	beqz	a6,800213b0 <__sflush_r+0x128>
800212d4:	0009a483          	lw	s1,0(s3)
800212d8:	01371693          	slli	a3,a4,0x13
800212dc:	0009a023          	sw	zero,0(s3)
800212e0:	01c42583          	lw	a1,28(s0)
800212e4:	1806c063          	bltz	a3,80021464 <__sflush_r+0x1dc>
800212e8:	00000613          	li	a2,0
800212ec:	00100693          	li	a3,1
800212f0:	00098513          	mv	a0,s3
800212f4:	000800e7          	jalr	a6
800212f8:	fff00793          	li	a5,-1
800212fc:	00050613          	mv	a2,a0
80021300:	18f50e63          	beq	a0,a5,8002149c <__sflush_r+0x214>
80021304:	00c41783          	lh	a5,12(s0)
80021308:	02842803          	lw	a6,40(s0)
8002130c:	01c42583          	lw	a1,28(s0)
80021310:	0047f793          	andi	a5,a5,4
80021314:	00078e63          	beqz	a5,80021330 <__sflush_r+0xa8>
80021318:	00442703          	lw	a4,4(s0)
8002131c:	03042783          	lw	a5,48(s0)
80021320:	40e60633          	sub	a2,a2,a4
80021324:	00078663          	beqz	a5,80021330 <__sflush_r+0xa8>
80021328:	03c42783          	lw	a5,60(s0)
8002132c:	40f60633          	sub	a2,a2,a5
80021330:	00000693          	li	a3,0
80021334:	00098513          	mv	a0,s3
80021338:	000800e7          	jalr	a6
8002133c:	fff00793          	li	a5,-1
80021340:	12f51663          	bne	a0,a5,8002146c <__sflush_r+0x1e4>
80021344:	0009a683          	lw	a3,0(s3)
80021348:	01d00713          	li	a4,29
8002134c:	00c41783          	lh	a5,12(s0)
80021350:	0cd76e63          	bltu	a4,a3,8002142c <__sflush_r+0x1a4>
80021354:	20400737          	lui	a4,0x20400
80021358:	00170713          	addi	a4,a4,1 # 20400001 <__STACKSIZE__+0x203fc001>
8002135c:	00d75733          	srl	a4,a4,a3
80021360:	00177713          	andi	a4,a4,1
80021364:	0c070463          	beqz	a4,8002142c <__sflush_r+0x1a4>
80021368:	01042603          	lw	a2,16(s0)
8002136c:	fffff737          	lui	a4,0xfffff
80021370:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__bss_end+0x7ff79043>
80021374:	00e7f733          	and	a4,a5,a4
80021378:	00e41623          	sh	a4,12(s0)
8002137c:	00042223          	sw	zero,4(s0)
80021380:	00c42023          	sw	a2,0(s0)
80021384:	01379713          	slli	a4,a5,0x13
80021388:	00075463          	bgez	a4,80021390 <__sflush_r+0x108>
8002138c:	10068463          	beqz	a3,80021494 <__sflush_r+0x20c>
80021390:	03042583          	lw	a1,48(s0)
80021394:	0099a023          	sw	s1,0(s3)
80021398:	00058c63          	beqz	a1,800213b0 <__sflush_r+0x128>
8002139c:	04040793          	addi	a5,s0,64
800213a0:	00f58663          	beq	a1,a5,800213ac <__sflush_r+0x124>
800213a4:	00098513          	mv	a0,s3
800213a8:	988f00ef          	jal	ra,80011530 <_free_r>
800213ac:	02042823          	sw	zero,48(s0)
800213b0:	00000513          	li	a0,0
800213b4:	01c12083          	lw	ra,28(sp)
800213b8:	01812403          	lw	s0,24(sp)
800213bc:	01412483          	lw	s1,20(sp)
800213c0:	01012903          	lw	s2,16(sp)
800213c4:	00c12983          	lw	s3,12(sp)
800213c8:	02010113          	addi	sp,sp,32
800213cc:	00008067          	ret
800213d0:	0105a903          	lw	s2,16(a1)
800213d4:	fc090ee3          	beqz	s2,800213b0 <__sflush_r+0x128>
800213d8:	0005a483          	lw	s1,0(a1)
800213dc:	00377713          	andi	a4,a4,3
800213e0:	0125a023          	sw	s2,0(a1)
800213e4:	412484b3          	sub	s1,s1,s2
800213e8:	00000793          	li	a5,0
800213ec:	00071463          	bnez	a4,800213f4 <__sflush_r+0x16c>
800213f0:	0145a783          	lw	a5,20(a1)
800213f4:	00f42423          	sw	a5,8(s0)
800213f8:	00904863          	bgtz	s1,80021408 <__sflush_r+0x180>
800213fc:	fb5ff06f          	j	800213b0 <__sflush_r+0x128>
80021400:	00a90933          	add	s2,s2,a0
80021404:	fa9056e3          	blez	s1,800213b0 <__sflush_r+0x128>
80021408:	02442783          	lw	a5,36(s0)
8002140c:	01c42583          	lw	a1,28(s0)
80021410:	00048693          	mv	a3,s1
80021414:	00090613          	mv	a2,s2
80021418:	00098513          	mv	a0,s3
8002141c:	000780e7          	jalr	a5
80021420:	40a484b3          	sub	s1,s1,a0
80021424:	fca04ee3          	bgtz	a0,80021400 <__sflush_r+0x178>
80021428:	00c41783          	lh	a5,12(s0)
8002142c:	0407e793          	ori	a5,a5,64
80021430:	01c12083          	lw	ra,28(sp)
80021434:	00f41623          	sh	a5,12(s0)
80021438:	01812403          	lw	s0,24(sp)
8002143c:	01412483          	lw	s1,20(sp)
80021440:	01012903          	lw	s2,16(sp)
80021444:	00c12983          	lw	s3,12(sp)
80021448:	fff00513          	li	a0,-1
8002144c:	02010113          	addi	sp,sp,32
80021450:	00008067          	ret
80021454:	03c5a683          	lw	a3,60(a1)
80021458:	e6d04ae3          	bgtz	a3,800212cc <__sflush_r+0x44>
8002145c:	00000513          	li	a0,0
80021460:	f55ff06f          	j	800213b4 <__sflush_r+0x12c>
80021464:	05042603          	lw	a2,80(s0)
80021468:	ea9ff06f          	j	80021310 <__sflush_r+0x88>
8002146c:	00c41703          	lh	a4,12(s0)
80021470:	01042683          	lw	a3,16(s0)
80021474:	fffff7b7          	lui	a5,0xfffff
80021478:	7ff78793          	addi	a5,a5,2047 # fffff7ff <__bss_end+0x7ff79043>
8002147c:	00f777b3          	and	a5,a4,a5
80021480:	00f41623          	sh	a5,12(s0)
80021484:	00042223          	sw	zero,4(s0)
80021488:	00d42023          	sw	a3,0(s0)
8002148c:	01371793          	slli	a5,a4,0x13
80021490:	f007d0e3          	bgez	a5,80021390 <__sflush_r+0x108>
80021494:	04a42823          	sw	a0,80(s0)
80021498:	ef9ff06f          	j	80021390 <__sflush_r+0x108>
8002149c:	0009a783          	lw	a5,0(s3)
800214a0:	e60782e3          	beqz	a5,80021304 <__sflush_r+0x7c>
800214a4:	01d00713          	li	a4,29
800214a8:	00e78663          	beq	a5,a4,800214b4 <__sflush_r+0x22c>
800214ac:	01600713          	li	a4,22
800214b0:	f6e79ce3          	bne	a5,a4,80021428 <__sflush_r+0x1a0>
800214b4:	0099a023          	sw	s1,0(s3)
800214b8:	00000513          	li	a0,0
800214bc:	ef9ff06f          	j	800213b4 <__sflush_r+0x12c>

800214c0 <_fflush_r>:
800214c0:	fe010113          	addi	sp,sp,-32
800214c4:	00812c23          	sw	s0,24(sp)
800214c8:	00112e23          	sw	ra,28(sp)
800214cc:	00050413          	mv	s0,a0
800214d0:	00050663          	beqz	a0,800214dc <_fflush_r+0x1c>
800214d4:	03452783          	lw	a5,52(a0)
800214d8:	02078a63          	beqz	a5,8002150c <_fflush_r+0x4c>
800214dc:	00c59783          	lh	a5,12(a1)
800214e0:	00079c63          	bnez	a5,800214f8 <_fflush_r+0x38>
800214e4:	01c12083          	lw	ra,28(sp)
800214e8:	01812403          	lw	s0,24(sp)
800214ec:	00000513          	li	a0,0
800214f0:	02010113          	addi	sp,sp,32
800214f4:	00008067          	ret
800214f8:	00040513          	mv	a0,s0
800214fc:	01812403          	lw	s0,24(sp)
80021500:	01c12083          	lw	ra,28(sp)
80021504:	02010113          	addi	sp,sp,32
80021508:	d81ff06f          	j	80021288 <__sflush_r>
8002150c:	00b12623          	sw	a1,12(sp)
80021510:	208000ef          	jal	ra,80021718 <__sinit>
80021514:	00c12583          	lw	a1,12(sp)
80021518:	fc5ff06f          	j	800214dc <_fflush_r+0x1c>

8002151c <stdio_exit_handler>:
8002151c:	80029637          	lui	a2,0x80029
80021520:	800255b7          	lui	a1,0x80025
80021524:	80029537          	lui	a0,0x80029
80021528:	3f060613          	addi	a2,a2,1008 # 800293f0 <__sglue>
8002152c:	73c58593          	addi	a1,a1,1852 # 8002573c <_fclose_r>
80021530:	2d050513          	addi	a0,a0,720 # 800292d0 <_impure_data>
80021534:	6b00006f          	j	80021be4 <_fwalk_sglue>

80021538 <cleanup_stdio>:
80021538:	00452583          	lw	a1,4(a0)
8002153c:	ff010113          	addi	sp,sp,-16
80021540:	800867b7          	lui	a5,0x80086
80021544:	00812423          	sw	s0,8(sp)
80021548:	00112623          	sw	ra,12(sp)
8002154c:	68478793          	addi	a5,a5,1668 # 80086684 <__sf>
80021550:	00050413          	mv	s0,a0
80021554:	00f58463          	beq	a1,a5,8002155c <cleanup_stdio+0x24>
80021558:	1e4040ef          	jal	ra,8002573c <_fclose_r>
8002155c:	00842583          	lw	a1,8(s0)
80021560:	800867b7          	lui	a5,0x80086
80021564:	6ec78793          	addi	a5,a5,1772 # 800866ec <__sf+0x68>
80021568:	00f58663          	beq	a1,a5,80021574 <cleanup_stdio+0x3c>
8002156c:	00040513          	mv	a0,s0
80021570:	1cc040ef          	jal	ra,8002573c <_fclose_r>
80021574:	00c42583          	lw	a1,12(s0)
80021578:	800867b7          	lui	a5,0x80086
8002157c:	75478793          	addi	a5,a5,1876 # 80086754 <__sf+0xd0>
80021580:	00f58c63          	beq	a1,a5,80021598 <cleanup_stdio+0x60>
80021584:	00040513          	mv	a0,s0
80021588:	00812403          	lw	s0,8(sp)
8002158c:	00c12083          	lw	ra,12(sp)
80021590:	01010113          	addi	sp,sp,16
80021594:	1a80406f          	j	8002573c <_fclose_r>
80021598:	00c12083          	lw	ra,12(sp)
8002159c:	00812403          	lw	s0,8(sp)
800215a0:	01010113          	addi	sp,sp,16
800215a4:	00008067          	ret

800215a8 <global_stdio_init.part.0>:
800215a8:	fe010113          	addi	sp,sp,-32
800215ac:	800217b7          	lui	a5,0x80021
800215b0:	00812c23          	sw	s0,24(sp)
800215b4:	80084737          	lui	a4,0x80084
800215b8:	51c78793          	addi	a5,a5,1308 # 8002151c <stdio_exit_handler>
800215bc:	80086437          	lui	s0,0x80086
800215c0:	80086537          	lui	a0,0x80086
800215c4:	68440413          	addi	s0,s0,1668 # 80086684 <__sf>
800215c8:	00112e23          	sw	ra,28(sp)
800215cc:	00912a23          	sw	s1,20(sp)
800215d0:	01212823          	sw	s2,16(sp)
800215d4:	01312623          	sw	s3,12(sp)
800215d8:	01412423          	sw	s4,8(sp)
800215dc:	0cf72423          	sw	a5,200(a4) # 800840c8 <__stdio_exit_handler>
800215e0:	00800613          	li	a2,8
800215e4:	00400793          	li	a5,4
800215e8:	00000593          	li	a1,0
800215ec:	6e050513          	addi	a0,a0,1760 # 800866e0 <__sf+0x5c>
800215f0:	00f42623          	sw	a5,12(s0)
800215f4:	00042023          	sw	zero,0(s0)
800215f8:	00042223          	sw	zero,4(s0)
800215fc:	00042423          	sw	zero,8(s0)
80021600:	06042223          	sw	zero,100(s0)
80021604:	00042823          	sw	zero,16(s0)
80021608:	00042a23          	sw	zero,20(s0)
8002160c:	00042c23          	sw	zero,24(s0)
80021610:	be5de0ef          	jal	ra,800001f4 <memset>
80021614:	80022a37          	lui	s4,0x80022
80021618:	800229b7          	lui	s3,0x80022
8002161c:	80022937          	lui	s2,0x80022
80021620:	800224b7          	lui	s1,0x80022
80021624:	80086537          	lui	a0,0x80086
80021628:	000107b7          	lui	a5,0x10
8002162c:	c98a0a13          	addi	s4,s4,-872 # 80021c98 <__sread>
80021630:	cf498993          	addi	s3,s3,-780 # 80021cf4 <__swrite>
80021634:	d7c90913          	addi	s2,s2,-644 # 80021d7c <__sseek>
80021638:	df448493          	addi	s1,s1,-524 # 80021df4 <__sclose>
8002163c:	00978793          	addi	a5,a5,9 # 10009 <__STACKSIZE__+0xc009>
80021640:	00800613          	li	a2,8
80021644:	00000593          	li	a1,0
80021648:	74850513          	addi	a0,a0,1864 # 80086748 <__sf+0xc4>
8002164c:	03442023          	sw	s4,32(s0)
80021650:	03342223          	sw	s3,36(s0)
80021654:	03242423          	sw	s2,40(s0)
80021658:	02942623          	sw	s1,44(s0)
8002165c:	06f42a23          	sw	a5,116(s0)
80021660:	00842e23          	sw	s0,28(s0)
80021664:	06042423          	sw	zero,104(s0)
80021668:	06042623          	sw	zero,108(s0)
8002166c:	06042823          	sw	zero,112(s0)
80021670:	0c042623          	sw	zero,204(s0)
80021674:	06042c23          	sw	zero,120(s0)
80021678:	06042e23          	sw	zero,124(s0)
8002167c:	08042023          	sw	zero,128(s0)
80021680:	b75de0ef          	jal	ra,800001f4 <memset>
80021684:	800867b7          	lui	a5,0x80086
80021688:	6ec78793          	addi	a5,a5,1772 # 800866ec <__sf+0x68>
8002168c:	08f42223          	sw	a5,132(s0)
80021690:	80086537          	lui	a0,0x80086
80021694:	000207b7          	lui	a5,0x20
80021698:	01278793          	addi	a5,a5,18 # 20012 <__STACKSIZE__+0x1c012>
8002169c:	00800613          	li	a2,8
800216a0:	00000593          	li	a1,0
800216a4:	7b050513          	addi	a0,a0,1968 # 800867b0 <__sf+0x12c>
800216a8:	09442423          	sw	s4,136(s0)
800216ac:	09342623          	sw	s3,140(s0)
800216b0:	09242823          	sw	s2,144(s0)
800216b4:	08942a23          	sw	s1,148(s0)
800216b8:	0cf42e23          	sw	a5,220(s0)
800216bc:	0c042823          	sw	zero,208(s0)
800216c0:	0c042a23          	sw	zero,212(s0)
800216c4:	0c042c23          	sw	zero,216(s0)
800216c8:	12042a23          	sw	zero,308(s0)
800216cc:	0e042023          	sw	zero,224(s0)
800216d0:	0e042223          	sw	zero,228(s0)
800216d4:	0e042423          	sw	zero,232(s0)
800216d8:	b1dde0ef          	jal	ra,800001f4 <memset>
800216dc:	800867b7          	lui	a5,0x80086
800216e0:	75478793          	addi	a5,a5,1876 # 80086754 <__sf+0xd0>
800216e4:	0f442823          	sw	s4,240(s0)
800216e8:	0f342a23          	sw	s3,244(s0)
800216ec:	0f242c23          	sw	s2,248(s0)
800216f0:	0e942e23          	sw	s1,252(s0)
800216f4:	01c12083          	lw	ra,28(sp)
800216f8:	0ef42623          	sw	a5,236(s0)
800216fc:	01812403          	lw	s0,24(sp)
80021700:	01412483          	lw	s1,20(sp)
80021704:	01012903          	lw	s2,16(sp)
80021708:	00c12983          	lw	s3,12(sp)
8002170c:	00812a03          	lw	s4,8(sp)
80021710:	02010113          	addi	sp,sp,32
80021714:	00008067          	ret

80021718 <__sinit>:
80021718:	03452783          	lw	a5,52(a0)
8002171c:	00078463          	beqz	a5,80021724 <__sinit+0xc>
80021720:	00008067          	ret
80021724:	800847b7          	lui	a5,0x80084
80021728:	0c87a703          	lw	a4,200(a5) # 800840c8 <__stdio_exit_handler>
8002172c:	800217b7          	lui	a5,0x80021
80021730:	53878793          	addi	a5,a5,1336 # 80021538 <cleanup_stdio>
80021734:	02f52a23          	sw	a5,52(a0)
80021738:	fe0714e3          	bnez	a4,80021720 <__sinit+0x8>
8002173c:	e6dff06f          	j	800215a8 <global_stdio_init.part.0>

80021740 <__sfp_lock_acquire>:
80021740:	00008067          	ret

80021744 <__sfp_lock_release>:
80021744:	00008067          	ret

80021748 <__sfvwrite_r>:
80021748:	00862783          	lw	a5,8(a2)
8002174c:	30078863          	beqz	a5,80021a5c <__sfvwrite_r+0x314>
80021750:	00c59683          	lh	a3,12(a1)
80021754:	fd010113          	addi	sp,sp,-48
80021758:	02812423          	sw	s0,40(sp)
8002175c:	01412c23          	sw	s4,24(sp)
80021760:	01612823          	sw	s6,16(sp)
80021764:	02112623          	sw	ra,44(sp)
80021768:	02912223          	sw	s1,36(sp)
8002176c:	03212023          	sw	s2,32(sp)
80021770:	01312e23          	sw	s3,28(sp)
80021774:	01512a23          	sw	s5,20(sp)
80021778:	01712623          	sw	s7,12(sp)
8002177c:	01812423          	sw	s8,8(sp)
80021780:	01912223          	sw	s9,4(sp)
80021784:	0086f793          	andi	a5,a3,8
80021788:	00060b13          	mv	s6,a2
8002178c:	00050a13          	mv	s4,a0
80021790:	00058413          	mv	s0,a1
80021794:	08078663          	beqz	a5,80021820 <__sfvwrite_r+0xd8>
80021798:	0105a783          	lw	a5,16(a1)
8002179c:	08078263          	beqz	a5,80021820 <__sfvwrite_r+0xd8>
800217a0:	0026f793          	andi	a5,a3,2
800217a4:	000b2483          	lw	s1,0(s6)
800217a8:	08078c63          	beqz	a5,80021840 <__sfvwrite_r+0xf8>
800217ac:	02442783          	lw	a5,36(s0)
800217b0:	01c42583          	lw	a1,28(s0)
800217b4:	80000ab7          	lui	s5,0x80000
800217b8:	00000993          	li	s3,0
800217bc:	00000913          	li	s2,0
800217c0:	c00a8a93          	addi	s5,s5,-1024 # 7ffffc00 <__STACKSIZE__+0x7fffbc00>
800217c4:	00098613          	mv	a2,s3
800217c8:	000a0513          	mv	a0,s4
800217cc:	04090263          	beqz	s2,80021810 <__sfvwrite_r+0xc8>
800217d0:	00090693          	mv	a3,s2
800217d4:	012af463          	bgeu	s5,s2,800217dc <__sfvwrite_r+0x94>
800217d8:	000a8693          	mv	a3,s5
800217dc:	000780e7          	jalr	a5
800217e0:	26a05463          	blez	a0,80021a48 <__sfvwrite_r+0x300>
800217e4:	008b2783          	lw	a5,8(s6)
800217e8:	00a989b3          	add	s3,s3,a0
800217ec:	40a90933          	sub	s2,s2,a0
800217f0:	40a787b3          	sub	a5,a5,a0
800217f4:	00fb2423          	sw	a5,8(s6)
800217f8:	20078463          	beqz	a5,80021a00 <__sfvwrite_r+0x2b8>
800217fc:	02442783          	lw	a5,36(s0)
80021800:	01c42583          	lw	a1,28(s0)
80021804:	00098613          	mv	a2,s3
80021808:	000a0513          	mv	a0,s4
8002180c:	fc0912e3          	bnez	s2,800217d0 <__sfvwrite_r+0x88>
80021810:	0004a983          	lw	s3,0(s1)
80021814:	0044a903          	lw	s2,4(s1)
80021818:	00848493          	addi	s1,s1,8
8002181c:	fa9ff06f          	j	800217c4 <__sfvwrite_r+0x7c>
80021820:	00040593          	mv	a1,s0
80021824:	000a0513          	mv	a0,s4
80021828:	5d4000ef          	jal	ra,80021dfc <__swsetup_r>
8002182c:	22051463          	bnez	a0,80021a54 <__sfvwrite_r+0x30c>
80021830:	00c41683          	lh	a3,12(s0)
80021834:	000b2483          	lw	s1,0(s6)
80021838:	0026f793          	andi	a5,a3,2
8002183c:	f60798e3          	bnez	a5,800217ac <__sfvwrite_r+0x64>
80021840:	0016f793          	andi	a5,a3,1
80021844:	12079c63          	bnez	a5,8002197c <__sfvwrite_r+0x234>
80021848:	00042783          	lw	a5,0(s0)
8002184c:	00842703          	lw	a4,8(s0)
80021850:	80000ab7          	lui	s5,0x80000
80021854:	00000b93          	li	s7,0
80021858:	00000993          	li	s3,0
8002185c:	fffa8a93          	addi	s5,s5,-1 # 7fffffff <__STACKSIZE__+0x7fffbfff>
80021860:	00078513          	mv	a0,a5
80021864:	00070c13          	mv	s8,a4
80021868:	10098263          	beqz	s3,8002196c <__sfvwrite_r+0x224>
8002186c:	2006f613          	andi	a2,a3,512
80021870:	24060c63          	beqz	a2,80021ac8 <__sfvwrite_r+0x380>
80021874:	00070c93          	mv	s9,a4
80021878:	2ee9e463          	bltu	s3,a4,80021b60 <__sfvwrite_r+0x418>
8002187c:	4806f713          	andi	a4,a3,1152
80021880:	08070a63          	beqz	a4,80021914 <__sfvwrite_r+0x1cc>
80021884:	01442603          	lw	a2,20(s0)
80021888:	01042583          	lw	a1,16(s0)
8002188c:	00161713          	slli	a4,a2,0x1
80021890:	00c70733          	add	a4,a4,a2
80021894:	40b78933          	sub	s2,a5,a1
80021898:	01f75c13          	srli	s8,a4,0x1f
8002189c:	00ec0c33          	add	s8,s8,a4
800218a0:	00190793          	addi	a5,s2,1
800218a4:	401c5c13          	srai	s8,s8,0x1
800218a8:	013787b3          	add	a5,a5,s3
800218ac:	000c0613          	mv	a2,s8
800218b0:	00fc7663          	bgeu	s8,a5,800218bc <__sfvwrite_r+0x174>
800218b4:	00078c13          	mv	s8,a5
800218b8:	00078613          	mv	a2,a5
800218bc:	4006f693          	andi	a3,a3,1024
800218c0:	2c068c63          	beqz	a3,80021b98 <__sfvwrite_r+0x450>
800218c4:	00060593          	mv	a1,a2
800218c8:	000a0513          	mv	a0,s4
800218cc:	b65ef0ef          	jal	ra,80011430 <_malloc_r>
800218d0:	00050c93          	mv	s9,a0
800218d4:	30050063          	beqz	a0,80021bd4 <__sfvwrite_r+0x48c>
800218d8:	01042583          	lw	a1,16(s0)
800218dc:	00090613          	mv	a2,s2
800218e0:	16d000ef          	jal	ra,8002224c <memcpy>
800218e4:	00c45783          	lhu	a5,12(s0)
800218e8:	b7f7f793          	andi	a5,a5,-1153
800218ec:	0807e793          	ori	a5,a5,128
800218f0:	00f41623          	sh	a5,12(s0)
800218f4:	012c8533          	add	a0,s9,s2
800218f8:	412c07b3          	sub	a5,s8,s2
800218fc:	01942823          	sw	s9,16(s0)
80021900:	01842a23          	sw	s8,20(s0)
80021904:	00a42023          	sw	a0,0(s0)
80021908:	00098c13          	mv	s8,s3
8002190c:	00f42423          	sw	a5,8(s0)
80021910:	00098c93          	mv	s9,s3
80021914:	000c8613          	mv	a2,s9
80021918:	000b8593          	mv	a1,s7
8002191c:	015000ef          	jal	ra,80022130 <memmove>
80021920:	00842703          	lw	a4,8(s0)
80021924:	00042783          	lw	a5,0(s0)
80021928:	00098913          	mv	s2,s3
8002192c:	41870733          	sub	a4,a4,s8
80021930:	019787b3          	add	a5,a5,s9
80021934:	00e42423          	sw	a4,8(s0)
80021938:	00f42023          	sw	a5,0(s0)
8002193c:	00000993          	li	s3,0
80021940:	008b2783          	lw	a5,8(s6)
80021944:	012b8bb3          	add	s7,s7,s2
80021948:	412787b3          	sub	a5,a5,s2
8002194c:	00fb2423          	sw	a5,8(s6)
80021950:	0a078863          	beqz	a5,80021a00 <__sfvwrite_r+0x2b8>
80021954:	00042783          	lw	a5,0(s0)
80021958:	00842703          	lw	a4,8(s0)
8002195c:	00c41683          	lh	a3,12(s0)
80021960:	00078513          	mv	a0,a5
80021964:	00070c13          	mv	s8,a4
80021968:	f00992e3          	bnez	s3,8002186c <__sfvwrite_r+0x124>
8002196c:	0004ab83          	lw	s7,0(s1)
80021970:	0044a983          	lw	s3,4(s1)
80021974:	00848493          	addi	s1,s1,8
80021978:	ee9ff06f          	j	80021860 <__sfvwrite_r+0x118>
8002197c:	00000b93          	li	s7,0
80021980:	00000513          	li	a0,0
80021984:	00000c13          	li	s8,0
80021988:	00000a93          	li	s5,0
8002198c:	0c0a8c63          	beqz	s5,80021a64 <__sfvwrite_r+0x31c>
80021990:	0e050463          	beqz	a0,80021a78 <__sfvwrite_r+0x330>
80021994:	000b8993          	mv	s3,s7
80021998:	013af463          	bgeu	s5,s3,800219a0 <__sfvwrite_r+0x258>
8002199c:	000a8993          	mv	s3,s5
800219a0:	00042503          	lw	a0,0(s0)
800219a4:	01042783          	lw	a5,16(s0)
800219a8:	00842903          	lw	s2,8(s0)
800219ac:	01442683          	lw	a3,20(s0)
800219b0:	00a7f663          	bgeu	a5,a0,800219bc <__sfvwrite_r+0x274>
800219b4:	00d90933          	add	s2,s2,a3
800219b8:	0f394263          	blt	s2,s3,80021a9c <__sfvwrite_r+0x354>
800219bc:	1ad9c863          	blt	s3,a3,80021b6c <__sfvwrite_r+0x424>
800219c0:	02442783          	lw	a5,36(s0)
800219c4:	01c42583          	lw	a1,28(s0)
800219c8:	000c0613          	mv	a2,s8
800219cc:	000a0513          	mv	a0,s4
800219d0:	000780e7          	jalr	a5
800219d4:	00050913          	mv	s2,a0
800219d8:	06a05863          	blez	a0,80021a48 <__sfvwrite_r+0x300>
800219dc:	412b8bb3          	sub	s7,s7,s2
800219e0:	00100513          	li	a0,1
800219e4:	040b8a63          	beqz	s7,80021a38 <__sfvwrite_r+0x2f0>
800219e8:	008b2783          	lw	a5,8(s6)
800219ec:	012c0c33          	add	s8,s8,s2
800219f0:	412a8ab3          	sub	s5,s5,s2
800219f4:	412787b3          	sub	a5,a5,s2
800219f8:	00fb2423          	sw	a5,8(s6)
800219fc:	f80798e3          	bnez	a5,8002198c <__sfvwrite_r+0x244>
80021a00:	00000513          	li	a0,0
80021a04:	02c12083          	lw	ra,44(sp)
80021a08:	02812403          	lw	s0,40(sp)
80021a0c:	02412483          	lw	s1,36(sp)
80021a10:	02012903          	lw	s2,32(sp)
80021a14:	01c12983          	lw	s3,28(sp)
80021a18:	01812a03          	lw	s4,24(sp)
80021a1c:	01412a83          	lw	s5,20(sp)
80021a20:	01012b03          	lw	s6,16(sp)
80021a24:	00c12b83          	lw	s7,12(sp)
80021a28:	00812c03          	lw	s8,8(sp)
80021a2c:	00412c83          	lw	s9,4(sp)
80021a30:	03010113          	addi	sp,sp,48
80021a34:	00008067          	ret
80021a38:	00040593          	mv	a1,s0
80021a3c:	000a0513          	mv	a0,s4
80021a40:	a81ff0ef          	jal	ra,800214c0 <_fflush_r>
80021a44:	fa0502e3          	beqz	a0,800219e8 <__sfvwrite_r+0x2a0>
80021a48:	00c41783          	lh	a5,12(s0)
80021a4c:	0407e793          	ori	a5,a5,64
80021a50:	00f41623          	sh	a5,12(s0)
80021a54:	fff00513          	li	a0,-1
80021a58:	fadff06f          	j	80021a04 <__sfvwrite_r+0x2bc>
80021a5c:	00000513          	li	a0,0
80021a60:	00008067          	ret
80021a64:	0044aa83          	lw	s5,4(s1)
80021a68:	00048793          	mv	a5,s1
80021a6c:	00848493          	addi	s1,s1,8
80021a70:	fe0a8ae3          	beqz	s5,80021a64 <__sfvwrite_r+0x31c>
80021a74:	0007ac03          	lw	s8,0(a5)
80021a78:	000a8613          	mv	a2,s5
80021a7c:	00a00593          	li	a1,10
80021a80:	000c0513          	mv	a0,s8
80021a84:	5d0000ef          	jal	ra,80022054 <memchr>
80021a88:	14050063          	beqz	a0,80021bc8 <__sfvwrite_r+0x480>
80021a8c:	00150513          	addi	a0,a0,1
80021a90:	41850bb3          	sub	s7,a0,s8
80021a94:	000b8993          	mv	s3,s7
80021a98:	f01ff06f          	j	80021998 <__sfvwrite_r+0x250>
80021a9c:	000c0593          	mv	a1,s8
80021aa0:	00090613          	mv	a2,s2
80021aa4:	68c000ef          	jal	ra,80022130 <memmove>
80021aa8:	00042783          	lw	a5,0(s0)
80021aac:	00040593          	mv	a1,s0
80021ab0:	000a0513          	mv	a0,s4
80021ab4:	012787b3          	add	a5,a5,s2
80021ab8:	00f42023          	sw	a5,0(s0)
80021abc:	a05ff0ef          	jal	ra,800214c0 <_fflush_r>
80021ac0:	f0050ee3          	beqz	a0,800219dc <__sfvwrite_r+0x294>
80021ac4:	f85ff06f          	j	80021a48 <__sfvwrite_r+0x300>
80021ac8:	01042683          	lw	a3,16(s0)
80021acc:	04f6e263          	bltu	a3,a5,80021b10 <__sfvwrite_r+0x3c8>
80021ad0:	01442603          	lw	a2,20(s0)
80021ad4:	02c9ee63          	bltu	s3,a2,80021b10 <__sfvwrite_r+0x3c8>
80021ad8:	00098793          	mv	a5,s3
80021adc:	013af463          	bgeu	s5,s3,80021ae4 <__sfvwrite_r+0x39c>
80021ae0:	000a8793          	mv	a5,s5
80021ae4:	02c7e6b3          	rem	a3,a5,a2
80021ae8:	02442703          	lw	a4,36(s0)
80021aec:	01c42583          	lw	a1,28(s0)
80021af0:	000b8613          	mv	a2,s7
80021af4:	000a0513          	mv	a0,s4
80021af8:	40d786b3          	sub	a3,a5,a3
80021afc:	000700e7          	jalr	a4
80021b00:	00050913          	mv	s2,a0
80021b04:	f4a052e3          	blez	a0,80021a48 <__sfvwrite_r+0x300>
80021b08:	412989b3          	sub	s3,s3,s2
80021b0c:	e35ff06f          	j	80021940 <__sfvwrite_r+0x1f8>
80021b10:	00070913          	mv	s2,a4
80021b14:	00e9f463          	bgeu	s3,a4,80021b1c <__sfvwrite_r+0x3d4>
80021b18:	00098913          	mv	s2,s3
80021b1c:	00078513          	mv	a0,a5
80021b20:	00090613          	mv	a2,s2
80021b24:	000b8593          	mv	a1,s7
80021b28:	608000ef          	jal	ra,80022130 <memmove>
80021b2c:	00842703          	lw	a4,8(s0)
80021b30:	00042783          	lw	a5,0(s0)
80021b34:	41270733          	sub	a4,a4,s2
80021b38:	012787b3          	add	a5,a5,s2
80021b3c:	00e42423          	sw	a4,8(s0)
80021b40:	00f42023          	sw	a5,0(s0)
80021b44:	fc0712e3          	bnez	a4,80021b08 <__sfvwrite_r+0x3c0>
80021b48:	00040593          	mv	a1,s0
80021b4c:	000a0513          	mv	a0,s4
80021b50:	971ff0ef          	jal	ra,800214c0 <_fflush_r>
80021b54:	ee051ae3          	bnez	a0,80021a48 <__sfvwrite_r+0x300>
80021b58:	412989b3          	sub	s3,s3,s2
80021b5c:	de5ff06f          	j	80021940 <__sfvwrite_r+0x1f8>
80021b60:	00098c13          	mv	s8,s3
80021b64:	00098c93          	mv	s9,s3
80021b68:	dadff06f          	j	80021914 <__sfvwrite_r+0x1cc>
80021b6c:	00098613          	mv	a2,s3
80021b70:	000c0593          	mv	a1,s8
80021b74:	5bc000ef          	jal	ra,80022130 <memmove>
80021b78:	00842703          	lw	a4,8(s0)
80021b7c:	00042783          	lw	a5,0(s0)
80021b80:	00098913          	mv	s2,s3
80021b84:	41370733          	sub	a4,a4,s3
80021b88:	013787b3          	add	a5,a5,s3
80021b8c:	00e42423          	sw	a4,8(s0)
80021b90:	00f42023          	sw	a5,0(s0)
80021b94:	e49ff06f          	j	800219dc <__sfvwrite_r+0x294>
80021b98:	000a0513          	mv	a0,s4
80021b9c:	8e5ef0ef          	jal	ra,80011480 <_realloc_r>
80021ba0:	00050c93          	mv	s9,a0
80021ba4:	d40518e3          	bnez	a0,800218f4 <__sfvwrite_r+0x1ac>
80021ba8:	01042583          	lw	a1,16(s0)
80021bac:	000a0513          	mv	a0,s4
80021bb0:	981ef0ef          	jal	ra,80011530 <_free_r>
80021bb4:	00c41783          	lh	a5,12(s0)
80021bb8:	00c00713          	li	a4,12
80021bbc:	00ea2023          	sw	a4,0(s4)
80021bc0:	f7f7f793          	andi	a5,a5,-129
80021bc4:	e89ff06f          	j	80021a4c <__sfvwrite_r+0x304>
80021bc8:	001a8993          	addi	s3,s5,1
80021bcc:	00098b93          	mv	s7,s3
80021bd0:	dc9ff06f          	j	80021998 <__sfvwrite_r+0x250>
80021bd4:	00c00713          	li	a4,12
80021bd8:	00c41783          	lh	a5,12(s0)
80021bdc:	00ea2023          	sw	a4,0(s4)
80021be0:	e6dff06f          	j	80021a4c <__sfvwrite_r+0x304>

80021be4 <_fwalk_sglue>:
80021be4:	fd010113          	addi	sp,sp,-48
80021be8:	03212023          	sw	s2,32(sp)
80021bec:	01312e23          	sw	s3,28(sp)
80021bf0:	01412c23          	sw	s4,24(sp)
80021bf4:	01512a23          	sw	s5,20(sp)
80021bf8:	01612823          	sw	s6,16(sp)
80021bfc:	01712623          	sw	s7,12(sp)
80021c00:	02112623          	sw	ra,44(sp)
80021c04:	02812423          	sw	s0,40(sp)
80021c08:	02912223          	sw	s1,36(sp)
80021c0c:	00050b13          	mv	s6,a0
80021c10:	00058b93          	mv	s7,a1
80021c14:	00060a93          	mv	s5,a2
80021c18:	00000a13          	li	s4,0
80021c1c:	00100993          	li	s3,1
80021c20:	fff00913          	li	s2,-1
80021c24:	004aa483          	lw	s1,4(s5)
80021c28:	008aa403          	lw	s0,8(s5)
80021c2c:	fff48493          	addi	s1,s1,-1
80021c30:	0204c863          	bltz	s1,80021c60 <_fwalk_sglue+0x7c>
80021c34:	00c45783          	lhu	a5,12(s0)
80021c38:	fff48493          	addi	s1,s1,-1
80021c3c:	00f9fe63          	bgeu	s3,a5,80021c58 <_fwalk_sglue+0x74>
80021c40:	00e41783          	lh	a5,14(s0)
80021c44:	00040593          	mv	a1,s0
80021c48:	000b0513          	mv	a0,s6
80021c4c:	01278663          	beq	a5,s2,80021c58 <_fwalk_sglue+0x74>
80021c50:	000b80e7          	jalr	s7
80021c54:	00aa6a33          	or	s4,s4,a0
80021c58:	06840413          	addi	s0,s0,104
80021c5c:	fd249ce3          	bne	s1,s2,80021c34 <_fwalk_sglue+0x50>
80021c60:	000aaa83          	lw	s5,0(s5)
80021c64:	fc0a90e3          	bnez	s5,80021c24 <_fwalk_sglue+0x40>
80021c68:	02c12083          	lw	ra,44(sp)
80021c6c:	02812403          	lw	s0,40(sp)
80021c70:	02412483          	lw	s1,36(sp)
80021c74:	02012903          	lw	s2,32(sp)
80021c78:	01c12983          	lw	s3,28(sp)
80021c7c:	01412a83          	lw	s5,20(sp)
80021c80:	01012b03          	lw	s6,16(sp)
80021c84:	00c12b83          	lw	s7,12(sp)
80021c88:	000a0513          	mv	a0,s4
80021c8c:	01812a03          	lw	s4,24(sp)
80021c90:	03010113          	addi	sp,sp,48
80021c94:	00008067          	ret

80021c98 <__sread>:
80021c98:	ff010113          	addi	sp,sp,-16
80021c9c:	00812423          	sw	s0,8(sp)
80021ca0:	00058413          	mv	s0,a1
80021ca4:	00e59583          	lh	a1,14(a1)
80021ca8:	00112623          	sw	ra,12(sp)
80021cac:	a41ef0ef          	jal	ra,800116ec <_read_r>
80021cb0:	02054063          	bltz	a0,80021cd0 <__sread+0x38>
80021cb4:	05042783          	lw	a5,80(s0)
80021cb8:	00c12083          	lw	ra,12(sp)
80021cbc:	00a787b3          	add	a5,a5,a0
80021cc0:	04f42823          	sw	a5,80(s0)
80021cc4:	00812403          	lw	s0,8(sp)
80021cc8:	01010113          	addi	sp,sp,16
80021ccc:	00008067          	ret
80021cd0:	00c45783          	lhu	a5,12(s0)
80021cd4:	fffff737          	lui	a4,0xfffff
80021cd8:	fff70713          	addi	a4,a4,-1 # ffffefff <__bss_end+0x7ff78843>
80021cdc:	00e7f7b3          	and	a5,a5,a4
80021ce0:	00c12083          	lw	ra,12(sp)
80021ce4:	00f41623          	sh	a5,12(s0)
80021ce8:	00812403          	lw	s0,8(sp)
80021cec:	01010113          	addi	sp,sp,16
80021cf0:	00008067          	ret

80021cf4 <__swrite>:
80021cf4:	00c59783          	lh	a5,12(a1)
80021cf8:	fe010113          	addi	sp,sp,-32
80021cfc:	00812c23          	sw	s0,24(sp)
80021d00:	00912a23          	sw	s1,20(sp)
80021d04:	01212823          	sw	s2,16(sp)
80021d08:	01312623          	sw	s3,12(sp)
80021d0c:	00112e23          	sw	ra,28(sp)
80021d10:	1007f713          	andi	a4,a5,256
80021d14:	00058413          	mv	s0,a1
80021d18:	00050493          	mv	s1,a0
80021d1c:	00060913          	mv	s2,a2
80021d20:	00068993          	mv	s3,a3
80021d24:	04071063          	bnez	a4,80021d64 <__swrite+0x70>
80021d28:	fffff737          	lui	a4,0xfffff
80021d2c:	fff70713          	addi	a4,a4,-1 # ffffefff <__bss_end+0x7ff78843>
80021d30:	00e7f7b3          	and	a5,a5,a4
80021d34:	00e41583          	lh	a1,14(s0)
80021d38:	00f41623          	sh	a5,12(s0)
80021d3c:	01812403          	lw	s0,24(sp)
80021d40:	01c12083          	lw	ra,28(sp)
80021d44:	00098693          	mv	a3,s3
80021d48:	00090613          	mv	a2,s2
80021d4c:	00c12983          	lw	s3,12(sp)
80021d50:	01012903          	lw	s2,16(sp)
80021d54:	00048513          	mv	a0,s1
80021d58:	01412483          	lw	s1,20(sp)
80021d5c:	02010113          	addi	sp,sp,32
80021d60:	a21ef06f          	j	80011780 <_write_r>
80021d64:	00e59583          	lh	a1,14(a1)
80021d68:	00200693          	li	a3,2
80021d6c:	00000613          	li	a2,0
80021d70:	931ef0ef          	jal	ra,800116a0 <_lseek_r>
80021d74:	00c41783          	lh	a5,12(s0)
80021d78:	fb1ff06f          	j	80021d28 <__swrite+0x34>

80021d7c <__sseek>:
80021d7c:	ff010113          	addi	sp,sp,-16
80021d80:	00812423          	sw	s0,8(sp)
80021d84:	00058413          	mv	s0,a1
80021d88:	00e59583          	lh	a1,14(a1)
80021d8c:	00112623          	sw	ra,12(sp)
80021d90:	911ef0ef          	jal	ra,800116a0 <_lseek_r>
80021d94:	fff00793          	li	a5,-1
80021d98:	02f50863          	beq	a0,a5,80021dc8 <__sseek+0x4c>
80021d9c:	00c45783          	lhu	a5,12(s0)
80021da0:	00001737          	lui	a4,0x1
80021da4:	00c12083          	lw	ra,12(sp)
80021da8:	00e7e7b3          	or	a5,a5,a4
80021dac:	01079793          	slli	a5,a5,0x10
80021db0:	4107d793          	srai	a5,a5,0x10
80021db4:	04a42823          	sw	a0,80(s0)
80021db8:	00f41623          	sh	a5,12(s0)
80021dbc:	00812403          	lw	s0,8(sp)
80021dc0:	01010113          	addi	sp,sp,16
80021dc4:	00008067          	ret
80021dc8:	00c45783          	lhu	a5,12(s0)
80021dcc:	fffff737          	lui	a4,0xfffff
80021dd0:	fff70713          	addi	a4,a4,-1 # ffffefff <__bss_end+0x7ff78843>
80021dd4:	00e7f7b3          	and	a5,a5,a4
80021dd8:	01079793          	slli	a5,a5,0x10
80021ddc:	4107d793          	srai	a5,a5,0x10
80021de0:	00c12083          	lw	ra,12(sp)
80021de4:	00f41623          	sh	a5,12(s0)
80021de8:	00812403          	lw	s0,8(sp)
80021dec:	01010113          	addi	sp,sp,16
80021df0:	00008067          	ret

80021df4 <__sclose>:
80021df4:	00e59583          	lh	a1,14(a1)
80021df8:	fbcef06f          	j	800115b4 <_close_r>

80021dfc <__swsetup_r>:
80021dfc:	8101a783          	lw	a5,-2032(gp) # 80029578 <_impure_ptr>
80021e00:	ff010113          	addi	sp,sp,-16
80021e04:	00812423          	sw	s0,8(sp)
80021e08:	00912223          	sw	s1,4(sp)
80021e0c:	00112623          	sw	ra,12(sp)
80021e10:	00050493          	mv	s1,a0
80021e14:	00058413          	mv	s0,a1
80021e18:	00078663          	beqz	a5,80021e24 <__swsetup_r+0x28>
80021e1c:	0347a703          	lw	a4,52(a5)
80021e20:	0e070c63          	beqz	a4,80021f18 <__swsetup_r+0x11c>
80021e24:	00c41783          	lh	a5,12(s0)
80021e28:	0087f713          	andi	a4,a5,8
80021e2c:	06070a63          	beqz	a4,80021ea0 <__swsetup_r+0xa4>
80021e30:	01042703          	lw	a4,16(s0)
80021e34:	08070663          	beqz	a4,80021ec0 <__swsetup_r+0xc4>
80021e38:	0017f693          	andi	a3,a5,1
80021e3c:	02068863          	beqz	a3,80021e6c <__swsetup_r+0x70>
80021e40:	01442683          	lw	a3,20(s0)
80021e44:	00042423          	sw	zero,8(s0)
80021e48:	00000513          	li	a0,0
80021e4c:	40d006b3          	neg	a3,a3
80021e50:	00d42c23          	sw	a3,24(s0)
80021e54:	02070a63          	beqz	a4,80021e88 <__swsetup_r+0x8c>
80021e58:	00c12083          	lw	ra,12(sp)
80021e5c:	00812403          	lw	s0,8(sp)
80021e60:	00412483          	lw	s1,4(sp)
80021e64:	01010113          	addi	sp,sp,16
80021e68:	00008067          	ret
80021e6c:	0027f693          	andi	a3,a5,2
80021e70:	00000613          	li	a2,0
80021e74:	00069463          	bnez	a3,80021e7c <__swsetup_r+0x80>
80021e78:	01442603          	lw	a2,20(s0)
80021e7c:	00c42423          	sw	a2,8(s0)
80021e80:	00000513          	li	a0,0
80021e84:	fc071ae3          	bnez	a4,80021e58 <__swsetup_r+0x5c>
80021e88:	0807f713          	andi	a4,a5,128
80021e8c:	fc0706e3          	beqz	a4,80021e58 <__swsetup_r+0x5c>
80021e90:	0407e793          	ori	a5,a5,64
80021e94:	00f41623          	sh	a5,12(s0)
80021e98:	fff00513          	li	a0,-1
80021e9c:	fbdff06f          	j	80021e58 <__swsetup_r+0x5c>
80021ea0:	0107f713          	andi	a4,a5,16
80021ea4:	08070063          	beqz	a4,80021f24 <__swsetup_r+0x128>
80021ea8:	0047f713          	andi	a4,a5,4
80021eac:	02071c63          	bnez	a4,80021ee4 <__swsetup_r+0xe8>
80021eb0:	01042703          	lw	a4,16(s0)
80021eb4:	0087e793          	ori	a5,a5,8
80021eb8:	00f41623          	sh	a5,12(s0)
80021ebc:	f6071ee3          	bnez	a4,80021e38 <__swsetup_r+0x3c>
80021ec0:	2807f693          	andi	a3,a5,640
80021ec4:	20000613          	li	a2,512
80021ec8:	f6c688e3          	beq	a3,a2,80021e38 <__swsetup_r+0x3c>
80021ecc:	00040593          	mv	a1,s0
80021ed0:	00048513          	mv	a0,s1
80021ed4:	171030ef          	jal	ra,80025844 <__smakebuf_r>
80021ed8:	00c41783          	lh	a5,12(s0)
80021edc:	01042703          	lw	a4,16(s0)
80021ee0:	f59ff06f          	j	80021e38 <__swsetup_r+0x3c>
80021ee4:	03042583          	lw	a1,48(s0)
80021ee8:	00058e63          	beqz	a1,80021f04 <__swsetup_r+0x108>
80021eec:	04040713          	addi	a4,s0,64
80021ef0:	00e58863          	beq	a1,a4,80021f00 <__swsetup_r+0x104>
80021ef4:	00048513          	mv	a0,s1
80021ef8:	e38ef0ef          	jal	ra,80011530 <_free_r>
80021efc:	00c41783          	lh	a5,12(s0)
80021f00:	02042823          	sw	zero,48(s0)
80021f04:	01042703          	lw	a4,16(s0)
80021f08:	fdb7f793          	andi	a5,a5,-37
80021f0c:	00042223          	sw	zero,4(s0)
80021f10:	00e42023          	sw	a4,0(s0)
80021f14:	fa1ff06f          	j	80021eb4 <__swsetup_r+0xb8>
80021f18:	00078513          	mv	a0,a5
80021f1c:	ffcff0ef          	jal	ra,80021718 <__sinit>
80021f20:	f05ff06f          	j	80021e24 <__swsetup_r+0x28>
80021f24:	00900713          	li	a4,9
80021f28:	00e4a023          	sw	a4,0(s1)
80021f2c:	0407e793          	ori	a5,a5,64
80021f30:	f65ff06f          	j	80021e94 <__swsetup_r+0x98>

80021f34 <__fputwc>:
80021f34:	fe010113          	addi	sp,sp,-32
80021f38:	00812c23          	sw	s0,24(sp)
80021f3c:	00912a23          	sw	s1,20(sp)
80021f40:	01212823          	sw	s2,16(sp)
80021f44:	00112e23          	sw	ra,28(sp)
80021f48:	00050913          	mv	s2,a0
80021f4c:	00058493          	mv	s1,a1
80021f50:	00060413          	mv	s0,a2
80021f54:	1c4000ef          	jal	ra,80022118 <__locale_mb_cur_max>
80021f58:	00100793          	li	a5,1
80021f5c:	00f51c63          	bne	a0,a5,80021f74 <__fputwc+0x40>
80021f60:	fff48793          	addi	a5,s1,-1
80021f64:	0fe00713          	li	a4,254
80021f68:	00f76663          	bltu	a4,a5,80021f74 <__fputwc+0x40>
80021f6c:	00910623          	sb	s1,12(sp)
80021f70:	0240006f          	j	80021f94 <__fputwc+0x60>
80021f74:	05c40693          	addi	a3,s0,92
80021f78:	00048613          	mv	a2,s1
80021f7c:	00c10593          	addi	a1,sp,12
80021f80:	00090513          	mv	a0,s2
80021f84:	740030ef          	jal	ra,800256c4 <_wcrtomb_r>
80021f88:	fff00793          	li	a5,-1
80021f8c:	08f50463          	beq	a0,a5,80022014 <__fputwc+0xe0>
80021f90:	02050c63          	beqz	a0,80021fc8 <__fputwc+0x94>
80021f94:	00842783          	lw	a5,8(s0)
80021f98:	00c14583          	lbu	a1,12(sp)
80021f9c:	fff78793          	addi	a5,a5,-1
80021fa0:	00f42423          	sw	a5,8(s0)
80021fa4:	0007da63          	bgez	a5,80021fb8 <__fputwc+0x84>
80021fa8:	01842703          	lw	a4,24(s0)
80021fac:	02e7cc63          	blt	a5,a4,80021fe4 <__fputwc+0xb0>
80021fb0:	00a00793          	li	a5,10
80021fb4:	02f58863          	beq	a1,a5,80021fe4 <__fputwc+0xb0>
80021fb8:	00042783          	lw	a5,0(s0)
80021fbc:	00178713          	addi	a4,a5,1
80021fc0:	00e42023          	sw	a4,0(s0)
80021fc4:	00b78023          	sb	a1,0(a5)
80021fc8:	01c12083          	lw	ra,28(sp)
80021fcc:	01812403          	lw	s0,24(sp)
80021fd0:	01012903          	lw	s2,16(sp)
80021fd4:	00048513          	mv	a0,s1
80021fd8:	01412483          	lw	s1,20(sp)
80021fdc:	02010113          	addi	sp,sp,32
80021fe0:	00008067          	ret
80021fe4:	00040613          	mv	a2,s0
80021fe8:	00090513          	mv	a0,s2
80021fec:	1dd030ef          	jal	ra,800259c8 <__swbuf_r>
80021ff0:	fff00793          	li	a5,-1
80021ff4:	fcf51ae3          	bne	a0,a5,80021fc8 <__fputwc+0x94>
80021ff8:	fff00513          	li	a0,-1
80021ffc:	01c12083          	lw	ra,28(sp)
80022000:	01812403          	lw	s0,24(sp)
80022004:	01412483          	lw	s1,20(sp)
80022008:	01012903          	lw	s2,16(sp)
8002200c:	02010113          	addi	sp,sp,32
80022010:	00008067          	ret
80022014:	00c45783          	lhu	a5,12(s0)
80022018:	fff00513          	li	a0,-1
8002201c:	0407e793          	ori	a5,a5,64
80022020:	00f41623          	sh	a5,12(s0)
80022024:	fd9ff06f          	j	80021ffc <__fputwc+0xc8>

80022028 <_fputwc_r>:
80022028:	00c61783          	lh	a5,12(a2)
8002202c:	01279713          	slli	a4,a5,0x12
80022030:	02074063          	bltz	a4,80022050 <_fputwc_r+0x28>
80022034:	06462703          	lw	a4,100(a2)
80022038:	000026b7          	lui	a3,0x2
8002203c:	00d7e7b3          	or	a5,a5,a3
80022040:	000026b7          	lui	a3,0x2
80022044:	00d76733          	or	a4,a4,a3
80022048:	00f61623          	sh	a5,12(a2)
8002204c:	06e62223          	sw	a4,100(a2)
80022050:	ee5ff06f          	j	80021f34 <__fputwc>

80022054 <memchr>:
80022054:	00357793          	andi	a5,a0,3
80022058:	0ff5f693          	zext.b	a3,a1
8002205c:	02078a63          	beqz	a5,80022090 <memchr+0x3c>
80022060:	fff60793          	addi	a5,a2,-1
80022064:	02060e63          	beqz	a2,800220a0 <memchr+0x4c>
80022068:	fff00613          	li	a2,-1
8002206c:	0180006f          	j	80022084 <memchr+0x30>
80022070:	00150513          	addi	a0,a0,1
80022074:	00357713          	andi	a4,a0,3
80022078:	00070e63          	beqz	a4,80022094 <memchr+0x40>
8002207c:	fff78793          	addi	a5,a5,-1
80022080:	02c78063          	beq	a5,a2,800220a0 <memchr+0x4c>
80022084:	00054703          	lbu	a4,0(a0)
80022088:	fed714e3          	bne	a4,a3,80022070 <memchr+0x1c>
8002208c:	00008067          	ret
80022090:	00060793          	mv	a5,a2
80022094:	00300713          	li	a4,3
80022098:	00f76863          	bltu	a4,a5,800220a8 <memchr+0x54>
8002209c:	06079063          	bnez	a5,800220fc <memchr+0xa8>
800220a0:	00000513          	li	a0,0
800220a4:	00008067          	ret
800220a8:	0ff5f593          	zext.b	a1,a1
800220ac:	00859713          	slli	a4,a1,0x8
800220b0:	00b705b3          	add	a1,a4,a1
800220b4:	01059713          	slli	a4,a1,0x10
800220b8:	feff08b7          	lui	a7,0xfeff0
800220bc:	80808837          	lui	a6,0x80808
800220c0:	00e585b3          	add	a1,a1,a4
800220c4:	eff88893          	addi	a7,a7,-257 # fefefeff <__bss_end+0x7ef69743>
800220c8:	08080813          	addi	a6,a6,128 # 80808080 <__bss_end+0x7818c4>
800220cc:	00300313          	li	t1,3
800220d0:	0100006f          	j	800220e0 <memchr+0x8c>
800220d4:	ffc78793          	addi	a5,a5,-4
800220d8:	00450513          	addi	a0,a0,4
800220dc:	fcf370e3          	bgeu	t1,a5,8002209c <memchr+0x48>
800220e0:	00052703          	lw	a4,0(a0)
800220e4:	00e5c733          	xor	a4,a1,a4
800220e8:	01170633          	add	a2,a4,a7
800220ec:	fff74713          	not	a4,a4
800220f0:	00e67733          	and	a4,a2,a4
800220f4:	01077733          	and	a4,a4,a6
800220f8:	fc070ee3          	beqz	a4,800220d4 <memchr+0x80>
800220fc:	00f507b3          	add	a5,a0,a5
80022100:	00c0006f          	j	8002210c <memchr+0xb8>
80022104:	00150513          	addi	a0,a0,1
80022108:	f8a78ce3          	beq	a5,a0,800220a0 <memchr+0x4c>
8002210c:	00054703          	lbu	a4,0(a0)
80022110:	fed71ae3          	bne	a4,a3,80022104 <memchr+0xb0>
80022114:	00008067          	ret

80022118 <__locale_mb_cur_max>:
80022118:	800297b7          	lui	a5,0x80029
8002211c:	5247c503          	lbu	a0,1316(a5) # 80029524 <__global_locale+0x128>
80022120:	00008067          	ret

80022124 <_localeconv_r>:
80022124:	80029537          	lui	a0,0x80029
80022128:	4ec50513          	addi	a0,a0,1260 # 800294ec <__global_locale+0xf0>
8002212c:	00008067          	ret

80022130 <memmove>:
80022130:	02a5f663          	bgeu	a1,a0,8002215c <memmove+0x2c>
80022134:	00c58733          	add	a4,a1,a2
80022138:	02e57263          	bgeu	a0,a4,8002215c <memmove+0x2c>
8002213c:	00c507b3          	add	a5,a0,a2
80022140:	04060663          	beqz	a2,8002218c <memmove+0x5c>
80022144:	fff74683          	lbu	a3,-1(a4)
80022148:	fff78793          	addi	a5,a5,-1
8002214c:	fff70713          	addi	a4,a4,-1
80022150:	00d78023          	sb	a3,0(a5)
80022154:	fef518e3          	bne	a0,a5,80022144 <memmove+0x14>
80022158:	00008067          	ret
8002215c:	00f00793          	li	a5,15
80022160:	02c7e863          	bltu	a5,a2,80022190 <memmove+0x60>
80022164:	00050793          	mv	a5,a0
80022168:	fff60693          	addi	a3,a2,-1
8002216c:	0c060a63          	beqz	a2,80022240 <memmove+0x110>
80022170:	00168693          	addi	a3,a3,1 # 2001 <__STACKSIZE__-0x1fff>
80022174:	00d786b3          	add	a3,a5,a3
80022178:	0005c703          	lbu	a4,0(a1)
8002217c:	00178793          	addi	a5,a5,1
80022180:	00158593          	addi	a1,a1,1
80022184:	fee78fa3          	sb	a4,-1(a5)
80022188:	fed798e3          	bne	a5,a3,80022178 <memmove+0x48>
8002218c:	00008067          	ret
80022190:	00b567b3          	or	a5,a0,a1
80022194:	0037f793          	andi	a5,a5,3
80022198:	08079e63          	bnez	a5,80022234 <memmove+0x104>
8002219c:	ff060893          	addi	a7,a2,-16
800221a0:	ff08f893          	andi	a7,a7,-16
800221a4:	01088893          	addi	a7,a7,16
800221a8:	011507b3          	add	a5,a0,a7
800221ac:	00058693          	mv	a3,a1
800221b0:	00050713          	mv	a4,a0
800221b4:	0006a803          	lw	a6,0(a3)
800221b8:	01068693          	addi	a3,a3,16
800221bc:	01070713          	addi	a4,a4,16
800221c0:	ff072823          	sw	a6,-16(a4)
800221c4:	ff46a803          	lw	a6,-12(a3)
800221c8:	ff072a23          	sw	a6,-12(a4)
800221cc:	ff86a803          	lw	a6,-8(a3)
800221d0:	ff072c23          	sw	a6,-8(a4)
800221d4:	ffc6a803          	lw	a6,-4(a3)
800221d8:	ff072e23          	sw	a6,-4(a4)
800221dc:	fcf71ce3          	bne	a4,a5,800221b4 <memmove+0x84>
800221e0:	00c67713          	andi	a4,a2,12
800221e4:	011585b3          	add	a1,a1,a7
800221e8:	00f67813          	andi	a6,a2,15
800221ec:	04070c63          	beqz	a4,80022244 <memmove+0x114>
800221f0:	00058693          	mv	a3,a1
800221f4:	00078713          	mv	a4,a5
800221f8:	01078eb3          	add	t4,a5,a6
800221fc:	00300e13          	li	t3,3
80022200:	0006a303          	lw	t1,0(a3)
80022204:	00470713          	addi	a4,a4,4
80022208:	40ee88b3          	sub	a7,t4,a4
8002220c:	fe672e23          	sw	t1,-4(a4)
80022210:	00468693          	addi	a3,a3,4
80022214:	ff1e66e3          	bltu	t3,a7,80022200 <memmove+0xd0>
80022218:	ffc80713          	addi	a4,a6,-4
8002221c:	ffc77713          	andi	a4,a4,-4
80022220:	00470713          	addi	a4,a4,4
80022224:	00367613          	andi	a2,a2,3
80022228:	00e787b3          	add	a5,a5,a4
8002222c:	00e585b3          	add	a1,a1,a4
80022230:	f39ff06f          	j	80022168 <memmove+0x38>
80022234:	fff60693          	addi	a3,a2,-1
80022238:	00050793          	mv	a5,a0
8002223c:	f35ff06f          	j	80022170 <memmove+0x40>
80022240:	00008067          	ret
80022244:	00080613          	mv	a2,a6
80022248:	f21ff06f          	j	80022168 <memmove+0x38>

8002224c <memcpy>:
8002224c:	00b547b3          	xor	a5,a0,a1
80022250:	0037f793          	andi	a5,a5,3
80022254:	00c508b3          	add	a7,a0,a2
80022258:	06079463          	bnez	a5,800222c0 <memcpy+0x74>
8002225c:	00300793          	li	a5,3
80022260:	06c7f063          	bgeu	a5,a2,800222c0 <memcpy+0x74>
80022264:	00357793          	andi	a5,a0,3
80022268:	00050713          	mv	a4,a0
8002226c:	06079a63          	bnez	a5,800222e0 <memcpy+0x94>
80022270:	ffc8f613          	andi	a2,a7,-4
80022274:	40e606b3          	sub	a3,a2,a4
80022278:	02000793          	li	a5,32
8002227c:	08d7ce63          	blt	a5,a3,80022318 <memcpy+0xcc>
80022280:	00058693          	mv	a3,a1
80022284:	00070793          	mv	a5,a4
80022288:	02c77863          	bgeu	a4,a2,800222b8 <memcpy+0x6c>
8002228c:	0006a803          	lw	a6,0(a3)
80022290:	00478793          	addi	a5,a5,4
80022294:	00468693          	addi	a3,a3,4
80022298:	ff07ae23          	sw	a6,-4(a5)
8002229c:	fec7e8e3          	bltu	a5,a2,8002228c <memcpy+0x40>
800222a0:	fff60793          	addi	a5,a2,-1
800222a4:	40e787b3          	sub	a5,a5,a4
800222a8:	ffc7f793          	andi	a5,a5,-4
800222ac:	00478793          	addi	a5,a5,4
800222b0:	00f70733          	add	a4,a4,a5
800222b4:	00f585b3          	add	a1,a1,a5
800222b8:	01176863          	bltu	a4,a7,800222c8 <memcpy+0x7c>
800222bc:	00008067          	ret
800222c0:	00050713          	mv	a4,a0
800222c4:	05157863          	bgeu	a0,a7,80022314 <memcpy+0xc8>
800222c8:	0005c783          	lbu	a5,0(a1)
800222cc:	00170713          	addi	a4,a4,1
800222d0:	00158593          	addi	a1,a1,1
800222d4:	fef70fa3          	sb	a5,-1(a4)
800222d8:	fee898e3          	bne	a7,a4,800222c8 <memcpy+0x7c>
800222dc:	00008067          	ret
800222e0:	0005c683          	lbu	a3,0(a1)
800222e4:	00170713          	addi	a4,a4,1
800222e8:	00377793          	andi	a5,a4,3
800222ec:	fed70fa3          	sb	a3,-1(a4)
800222f0:	00158593          	addi	a1,a1,1
800222f4:	f6078ee3          	beqz	a5,80022270 <memcpy+0x24>
800222f8:	0005c683          	lbu	a3,0(a1)
800222fc:	00170713          	addi	a4,a4,1
80022300:	00377793          	andi	a5,a4,3
80022304:	fed70fa3          	sb	a3,-1(a4)
80022308:	00158593          	addi	a1,a1,1
8002230c:	fc079ae3          	bnez	a5,800222e0 <memcpy+0x94>
80022310:	f61ff06f          	j	80022270 <memcpy+0x24>
80022314:	00008067          	ret
80022318:	ff010113          	addi	sp,sp,-16
8002231c:	00812623          	sw	s0,12(sp)
80022320:	02000413          	li	s0,32
80022324:	0005a383          	lw	t2,0(a1)
80022328:	0045a283          	lw	t0,4(a1)
8002232c:	0085af83          	lw	t6,8(a1)
80022330:	00c5af03          	lw	t5,12(a1)
80022334:	0105ae83          	lw	t4,16(a1)
80022338:	0145ae03          	lw	t3,20(a1)
8002233c:	0185a303          	lw	t1,24(a1)
80022340:	01c5a803          	lw	a6,28(a1)
80022344:	0205a683          	lw	a3,32(a1)
80022348:	02470713          	addi	a4,a4,36
8002234c:	40e607b3          	sub	a5,a2,a4
80022350:	fc772e23          	sw	t2,-36(a4)
80022354:	fe572023          	sw	t0,-32(a4)
80022358:	fff72223          	sw	t6,-28(a4)
8002235c:	ffe72423          	sw	t5,-24(a4)
80022360:	ffd72623          	sw	t4,-20(a4)
80022364:	ffc72823          	sw	t3,-16(a4)
80022368:	fe672a23          	sw	t1,-12(a4)
8002236c:	ff072c23          	sw	a6,-8(a4)
80022370:	fed72e23          	sw	a3,-4(a4)
80022374:	02458593          	addi	a1,a1,36
80022378:	faf446e3          	blt	s0,a5,80022324 <memcpy+0xd8>
8002237c:	00058693          	mv	a3,a1
80022380:	00070793          	mv	a5,a4
80022384:	02c77863          	bgeu	a4,a2,800223b4 <memcpy+0x168>
80022388:	0006a803          	lw	a6,0(a3)
8002238c:	00478793          	addi	a5,a5,4
80022390:	00468693          	addi	a3,a3,4
80022394:	ff07ae23          	sw	a6,-4(a5)
80022398:	fec7e8e3          	bltu	a5,a2,80022388 <memcpy+0x13c>
8002239c:	fff60793          	addi	a5,a2,-1
800223a0:	40e787b3          	sub	a5,a5,a4
800223a4:	ffc7f793          	andi	a5,a5,-4
800223a8:	00478793          	addi	a5,a5,4
800223ac:	00f70733          	add	a4,a4,a5
800223b0:	00f585b3          	add	a1,a1,a5
800223b4:	01176863          	bltu	a4,a7,800223c4 <memcpy+0x178>
800223b8:	00c12403          	lw	s0,12(sp)
800223bc:	01010113          	addi	sp,sp,16
800223c0:	00008067          	ret
800223c4:	0005c783          	lbu	a5,0(a1)
800223c8:	00170713          	addi	a4,a4,1
800223cc:	00158593          	addi	a1,a1,1
800223d0:	fef70fa3          	sb	a5,-1(a4)
800223d4:	fee882e3          	beq	a7,a4,800223b8 <memcpy+0x16c>
800223d8:	0005c783          	lbu	a5,0(a1)
800223dc:	00170713          	addi	a4,a4,1
800223e0:	00158593          	addi	a1,a1,1
800223e4:	fef70fa3          	sb	a5,-1(a4)
800223e8:	fce89ee3          	bne	a7,a4,800223c4 <memcpy+0x178>
800223ec:	fcdff06f          	j	800223b8 <memcpy+0x16c>

800223f0 <frexpl>:
800223f0:	f9010113          	addi	sp,sp,-112
800223f4:	07212023          	sw	s2,96(sp)
800223f8:	00c5a903          	lw	s2,12(a1)
800223fc:	05412c23          	sw	s4,88(sp)
80022400:	05512a23          	sw	s5,84(sp)
80022404:	05612823          	sw	s6,80(sp)
80022408:	0045aa83          	lw	s5,4(a1)
8002240c:	0005ab03          	lw	s6,0(a1)
80022410:	0085aa03          	lw	s4,8(a1)
80022414:	05312e23          	sw	s3,92(sp)
80022418:	000089b7          	lui	s3,0x8
8002241c:	06812423          	sw	s0,104(sp)
80022420:	06912223          	sw	s1,100(sp)
80022424:	06112623          	sw	ra,108(sp)
80022428:	05712623          	sw	s7,76(sp)
8002242c:	01095493          	srli	s1,s2,0x10
80022430:	fff98993          	addi	s3,s3,-1 # 7fff <__STACKSIZE__+0x3fff>
80022434:	03612823          	sw	s6,48(sp)
80022438:	03512a23          	sw	s5,52(sp)
8002243c:	03412c23          	sw	s4,56(sp)
80022440:	03212e23          	sw	s2,60(sp)
80022444:	0134f4b3          	and	s1,s1,s3
80022448:	00062023          	sw	zero,0(a2)
8002244c:	00050413          	mv	s0,a0
80022450:	07348c63          	beq	s1,s3,800224c8 <frexpl+0xd8>
80022454:	01010593          	addi	a1,sp,16
80022458:	02010513          	addi	a0,sp,32
8002245c:	00060b93          	mv	s7,a2
80022460:	03612023          	sw	s6,32(sp)
80022464:	03512223          	sw	s5,36(sp)
80022468:	03412423          	sw	s4,40(sp)
8002246c:	03212623          	sw	s2,44(sp)
80022470:	00012823          	sw	zero,16(sp)
80022474:	00012a23          	sw	zero,20(sp)
80022478:	00012c23          	sw	zero,24(sp)
8002247c:	00012e23          	sw	zero,28(sp)
80022480:	f5ce00ef          	jal	ra,80002bdc <__eqtf2>
80022484:	04050263          	beqz	a0,800224c8 <frexpl+0xd8>
80022488:	00000713          	li	a4,0
8002248c:	06048e63          	beqz	s1,80022508 <frexpl+0x118>
80022490:	ffffc7b7          	lui	a5,0xffffc
80022494:	03c12903          	lw	s2,60(sp)
80022498:	00278793          	addi	a5,a5,2 # ffffc002 <__bss_end+0x7ff75846>
8002249c:	00f484b3          	add	s1,s1,a5
800224a0:	800107b7          	lui	a5,0x80010
800224a4:	fff78793          	addi	a5,a5,-1 # 8000ffff <cmd_tail+0x213>
800224a8:	03012b03          	lw	s6,48(sp)
800224ac:	03412a83          	lw	s5,52(sp)
800224b0:	03812a03          	lw	s4,56(sp)
800224b4:	00f97933          	and	s2,s2,a5
800224b8:	00e484b3          	add	s1,s1,a4
800224bc:	3ffe07b7          	lui	a5,0x3ffe0
800224c0:	009ba023          	sw	s1,0(s7)
800224c4:	00f96933          	or	s2,s2,a5
800224c8:	01642023          	sw	s6,0(s0)
800224cc:	01542223          	sw	s5,4(s0)
800224d0:	01442423          	sw	s4,8(s0)
800224d4:	01242623          	sw	s2,12(s0)
800224d8:	06c12083          	lw	ra,108(sp)
800224dc:	00040513          	mv	a0,s0
800224e0:	06812403          	lw	s0,104(sp)
800224e4:	06412483          	lw	s1,100(sp)
800224e8:	06012903          	lw	s2,96(sp)
800224ec:	05c12983          	lw	s3,92(sp)
800224f0:	05812a03          	lw	s4,88(sp)
800224f4:	05412a83          	lw	s5,84(sp)
800224f8:	05012b03          	lw	s6,80(sp)
800224fc:	04c12b83          	lw	s7,76(sp)
80022500:	07010113          	addi	sp,sp,112
80022504:	00008067          	ret
80022508:	407107b7          	lui	a5,0x40710
8002250c:	00010613          	mv	a2,sp
80022510:	01010593          	addi	a1,sp,16
80022514:	02010513          	addi	a0,sp,32
80022518:	00f12623          	sw	a5,12(sp)
8002251c:	01612823          	sw	s6,16(sp)
80022520:	01512a23          	sw	s5,20(sp)
80022524:	01412c23          	sw	s4,24(sp)
80022528:	01212e23          	sw	s2,28(sp)
8002252c:	00012023          	sw	zero,0(sp)
80022530:	00012223          	sw	zero,4(sp)
80022534:	00012423          	sw	zero,8(sp)
80022538:	9f9e00ef          	jal	ra,80002f30 <__multf3>
8002253c:	02012703          	lw	a4,32(sp)
80022540:	02c12783          	lw	a5,44(sp)
80022544:	02e12823          	sw	a4,48(sp)
80022548:	02412703          	lw	a4,36(sp)
8002254c:	0107d493          	srli	s1,a5,0x10
80022550:	02f12e23          	sw	a5,60(sp)
80022554:	02e12a23          	sw	a4,52(sp)
80022558:	02812703          	lw	a4,40(sp)
8002255c:	0134f4b3          	and	s1,s1,s3
80022560:	02e12c23          	sw	a4,56(sp)
80022564:	f8e00713          	li	a4,-114
80022568:	f29ff06f          	j	80022490 <frexpl+0xa0>

8002256c <_ldtoa_r>:
8002256c:	800288b7          	lui	a7,0x80028
80022570:	d5488893          	addi	a7,a7,-684 # 80027d54 <raise+0x2160>
80022574:	0008af83          	lw	t6,0(a7)
80022578:	0048af03          	lw	t5,4(a7)
8002257c:	0088ae83          	lw	t4,8(a7)
80022580:	00c8ae03          	lw	t3,12(a7)
80022584:	0108a303          	lw	t1,16(a7)
80022588:	03852883          	lw	a7,56(a0)
8002258c:	f5010113          	addi	sp,sp,-176
80022590:	0a912223          	sw	s1,164(sp)
80022594:	0b212023          	sw	s2,160(sp)
80022598:	09312e23          	sw	s3,156(sp)
8002259c:	09412c23          	sw	s4,152(sp)
800225a0:	09512a23          	sw	s5,148(sp)
800225a4:	09612823          	sw	s6,144(sp)
800225a8:	09712623          	sw	s7,140(sp)
800225ac:	09812423          	sw	s8,136(sp)
800225b0:	09912223          	sw	s9,132(sp)
800225b4:	09a12023          	sw	s10,128(sp)
800225b8:	0a112623          	sw	ra,172(sp)
800225bc:	0a812423          	sw	s0,168(sp)
800225c0:	07b12e23          	sw	s11,124(sp)
800225c4:	05f12e23          	sw	t6,92(sp)
800225c8:	07e12023          	sw	t5,96(sp)
800225cc:	07d12223          	sw	t4,100(sp)
800225d0:	07c12423          	sw	t3,104(sp)
800225d4:	06612623          	sw	t1,108(sp)
800225d8:	0005a983          	lw	s3,0(a1)
800225dc:	0045a903          	lw	s2,4(a1)
800225e0:	0085a483          	lw	s1,8(a1)
800225e4:	00c5ab83          	lw	s7,12(a1)
800225e8:	00050a93          	mv	s5,a0
800225ec:	00060c13          	mv	s8,a2
800225f0:	00068c93          	mv	s9,a3
800225f4:	00070b13          	mv	s6,a4
800225f8:	00078a13          	mv	s4,a5
800225fc:	00080d13          	mv	s10,a6
80022600:	02088263          	beqz	a7,80022624 <_ldtoa_r+0xb8>
80022604:	03c52703          	lw	a4,60(a0)
80022608:	00100793          	li	a5,1
8002260c:	00088593          	mv	a1,a7
80022610:	00e797b3          	sll	a5,a5,a4
80022614:	00e8a223          	sw	a4,4(a7)
80022618:	00f8a423          	sw	a5,8(a7)
8002261c:	420020ef          	jal	ra,80024a3c <_Bfree>
80022620:	020aac23          	sw	zero,56(s5)
80022624:	06812783          	lw	a5,104(sp)
80022628:	01fbd693          	srli	a3,s7,0x1f
8002262c:	00da2023          	sw	a3,0(s4)
80022630:	4017d713          	srai	a4,a5,0x1
80022634:	001b9413          	slli	s0,s7,0x1
80022638:	00d77733          	and	a4,a4,a3
8002263c:	001b9a13          	slli	s4,s7,0x1
80022640:	010b9d93          	slli	s11,s7,0x10
80022644:	00145413          	srli	s0,s0,0x1
80022648:	00f74733          	xor	a4,a4,a5
8002264c:	010ddd93          	srli	s11,s11,0x10
80022650:	011a5793          	srli	a5,s4,0x11
80022654:	02010593          	addi	a1,sp,32
80022658:	03010513          	addi	a0,sp,48
8002265c:	03312823          	sw	s3,48(sp)
80022660:	03212a23          	sw	s2,52(sp)
80022664:	02912c23          	sw	s1,56(sp)
80022668:	02812e23          	sw	s0,60(sp)
8002266c:	03312023          	sw	s3,32(sp)
80022670:	03212223          	sw	s2,36(sp)
80022674:	02912423          	sw	s1,40(sp)
80022678:	02812623          	sw	s0,44(sp)
8002267c:	06e12423          	sw	a4,104(sp)
80022680:	00f12e23          	sw	a5,28(sp)
80022684:	05312623          	sw	s3,76(sp)
80022688:	05212823          	sw	s2,80(sp)
8002268c:	04912a23          	sw	s1,84(sp)
80022690:	05b12c23          	sw	s11,88(sp)
80022694:	d45e20ef          	jal	ra,800053d8 <__unordtf2>
80022698:	18051263          	bnez	a0,8002281c <_ldtoa_r+0x2b0>
8002269c:	800297b7          	lui	a5,0x80029
800226a0:	ccc7a783          	lw	a5,-820(a5) # 80028ccc <blanks.1+0x38>
800226a4:	fff00a13          	li	s4,-1
800226a8:	02010593          	addi	a1,sp,32
800226ac:	03010513          	addi	a0,sp,48
800226b0:	03312823          	sw	s3,48(sp)
800226b4:	03212a23          	sw	s2,52(sp)
800226b8:	02912c23          	sw	s1,56(sp)
800226bc:	02812e23          	sw	s0,60(sp)
800226c0:	03412023          	sw	s4,32(sp)
800226c4:	03412223          	sw	s4,36(sp)
800226c8:	03412423          	sw	s4,40(sp)
800226cc:	00f12c23          	sw	a5,24(sp)
800226d0:	02f12623          	sw	a5,44(sp)
800226d4:	d05e20ef          	jal	ra,800053d8 <__unordtf2>
800226d8:	0a051263          	bnez	a0,8002277c <_ldtoa_r+0x210>
800226dc:	02010593          	addi	a1,sp,32
800226e0:	03010513          	addi	a0,sp,48
800226e4:	f08e00ef          	jal	ra,80002dec <__letf2>
800226e8:	08a05a63          	blez	a0,8002277c <_ldtoa_r+0x210>
800226ec:	00300793          	li	a5,3
800226f0:	04f12423          	sw	a5,72(sp)
800226f4:	01c12703          	lw	a4,28(sp)
800226f8:	ffffc7b7          	lui	a5,0xffffc
800226fc:	f9178793          	addi	a5,a5,-111 # ffffbf91 <__bss_end+0x7ff757d5>
80022700:	00f70633          	add	a2,a4,a5
80022704:	000c0793          	mv	a5,s8
80022708:	04810713          	addi	a4,sp,72
8002270c:	01a12023          	sw	s10,0(sp)
80022710:	000b0893          	mv	a7,s6
80022714:	000c8813          	mv	a6,s9
80022718:	04c10693          	addi	a3,sp,76
8002271c:	05c10593          	addi	a1,sp,92
80022720:	000a8513          	mv	a0,s5
80022724:	1e8000ef          	jal	ra,8002290c <__gdtoa>
80022728:	000b2703          	lw	a4,0(s6)
8002272c:	ffff87b7          	lui	a5,0xffff8
80022730:	00f71863          	bne	a4,a5,80022740 <_ldtoa_r+0x1d4>
80022734:	800007b7          	lui	a5,0x80000
80022738:	fff78793          	addi	a5,a5,-1 # 7fffffff <__STACKSIZE__+0x7fffbfff>
8002273c:	00fb2023          	sw	a5,0(s6)
80022740:	0ac12083          	lw	ra,172(sp)
80022744:	0a812403          	lw	s0,168(sp)
80022748:	0a412483          	lw	s1,164(sp)
8002274c:	0a012903          	lw	s2,160(sp)
80022750:	09c12983          	lw	s3,156(sp)
80022754:	09812a03          	lw	s4,152(sp)
80022758:	09412a83          	lw	s5,148(sp)
8002275c:	09012b03          	lw	s6,144(sp)
80022760:	08c12b83          	lw	s7,140(sp)
80022764:	08812c03          	lw	s8,136(sp)
80022768:	08412c83          	lw	s9,132(sp)
8002276c:	08012d03          	lw	s10,128(sp)
80022770:	07c12d83          	lw	s11,124(sp)
80022774:	0b010113          	addi	sp,sp,176
80022778:	00008067          	ret
8002277c:	000107b7          	lui	a5,0x10
80022780:	02010593          	addi	a1,sp,32
80022784:	03010513          	addi	a0,sp,48
80022788:	03312823          	sw	s3,48(sp)
8002278c:	03212a23          	sw	s2,52(sp)
80022790:	02912c23          	sw	s1,56(sp)
80022794:	02812e23          	sw	s0,60(sp)
80022798:	02012023          	sw	zero,32(sp)
8002279c:	02012223          	sw	zero,36(sp)
800227a0:	02012423          	sw	zero,40(sp)
800227a4:	02f12623          	sw	a5,44(sp)
800227a8:	d00e00ef          	jal	ra,80002ca8 <__getf2>
800227ac:	00054e63          	bltz	a0,800227c8 <_ldtoa_r+0x25c>
800227b0:	000107b7          	lui	a5,0x10
800227b4:	00fdedb3          	or	s11,s11,a5
800227b8:	00100793          	li	a5,1
800227bc:	04f12423          	sw	a5,72(sp)
800227c0:	05b12c23          	sw	s11,88(sp)
800227c4:	f31ff06f          	j	800226f4 <_ldtoa_r+0x188>
800227c8:	02010593          	addi	a1,sp,32
800227cc:	03010513          	addi	a0,sp,48
800227d0:	03312823          	sw	s3,48(sp)
800227d4:	03212a23          	sw	s2,52(sp)
800227d8:	02912c23          	sw	s1,56(sp)
800227dc:	03712e23          	sw	s7,60(sp)
800227e0:	02012023          	sw	zero,32(sp)
800227e4:	02012223          	sw	zero,36(sp)
800227e8:	02012423          	sw	zero,40(sp)
800227ec:	02012623          	sw	zero,44(sp)
800227f0:	bece00ef          	jal	ra,80002bdc <__eqtf2>
800227f4:	00051663          	bnez	a0,80022800 <_ldtoa_r+0x294>
800227f8:	04012423          	sw	zero,72(sp)
800227fc:	ef9ff06f          	j	800226f4 <_ldtoa_r+0x188>
80022800:	00200793          	li	a5,2
80022804:	01c12703          	lw	a4,28(sp)
80022808:	04f12423          	sw	a5,72(sp)
8002280c:	ffffc7b7          	lui	a5,0xffffc
80022810:	f9278793          	addi	a5,a5,-110 # ffffbf92 <__bss_end+0x7ff757d6>
80022814:	00f70633          	add	a2,a4,a5
80022818:	eedff06f          	j	80022704 <_ldtoa_r+0x198>
8002281c:	00400793          	li	a5,4
80022820:	04f12423          	sw	a5,72(sp)
80022824:	ed1ff06f          	j	800226f4 <_ldtoa_r+0x188>

80022828 <_ldcheck>:
80022828:	fc010113          	addi	sp,sp,-64
8002282c:	02812c23          	sw	s0,56(sp)
80022830:	00c52403          	lw	s0,12(a0)
80022834:	03212823          	sw	s2,48(sp)
80022838:	03312623          	sw	s3,44(sp)
8002283c:	00852903          	lw	s2,8(a0)
80022840:	00452983          	lw	s3,4(a0)
80022844:	03412423          	sw	s4,40(sp)
80022848:	00052a03          	lw	s4,0(a0)
8002284c:	00141413          	slli	s0,s0,0x1
80022850:	00145413          	srli	s0,s0,0x1
80022854:	00010593          	mv	a1,sp
80022858:	01010513          	addi	a0,sp,16
8002285c:	02112e23          	sw	ra,60(sp)
80022860:	02912a23          	sw	s1,52(sp)
80022864:	03512223          	sw	s5,36(sp)
80022868:	01412823          	sw	s4,16(sp)
8002286c:	01312a23          	sw	s3,20(sp)
80022870:	01212c23          	sw	s2,24(sp)
80022874:	00812e23          	sw	s0,28(sp)
80022878:	01412023          	sw	s4,0(sp)
8002287c:	01312223          	sw	s3,4(sp)
80022880:	01212423          	sw	s2,8(sp)
80022884:	00812623          	sw	s0,12(sp)
80022888:	b51e20ef          	jal	ra,800053d8 <__unordtf2>
8002288c:	06051c63          	bnez	a0,80022904 <_ldcheck+0xdc>
80022890:	800297b7          	lui	a5,0x80029
80022894:	ccc7aa83          	lw	s5,-820(a5) # 80028ccc <blanks.1+0x38>
80022898:	fff00493          	li	s1,-1
8002289c:	00010593          	mv	a1,sp
800228a0:	01010513          	addi	a0,sp,16
800228a4:	00912023          	sw	s1,0(sp)
800228a8:	00912223          	sw	s1,4(sp)
800228ac:	00912423          	sw	s1,8(sp)
800228b0:	01512623          	sw	s5,12(sp)
800228b4:	b25e20ef          	jal	ra,800053d8 <__unordtf2>
800228b8:	00100793          	li	a5,1
800228bc:	02050a63          	beqz	a0,800228f0 <_ldcheck+0xc8>
800228c0:	0017c513          	xori	a0,a5,1
800228c4:	0ff57513          	zext.b	a0,a0
800228c8:	00151513          	slli	a0,a0,0x1
800228cc:	03c12083          	lw	ra,60(sp)
800228d0:	03812403          	lw	s0,56(sp)
800228d4:	03412483          	lw	s1,52(sp)
800228d8:	03012903          	lw	s2,48(sp)
800228dc:	02c12983          	lw	s3,44(sp)
800228e0:	02812a03          	lw	s4,40(sp)
800228e4:	02412a83          	lw	s5,36(sp)
800228e8:	04010113          	addi	sp,sp,64
800228ec:	00008067          	ret
800228f0:	00010593          	mv	a1,sp
800228f4:	01010513          	addi	a0,sp,16
800228f8:	cf4e00ef          	jal	ra,80002dec <__letf2>
800228fc:	00152793          	slti	a5,a0,1
80022900:	fc1ff06f          	j	800228c0 <_ldcheck+0x98>
80022904:	00100513          	li	a0,1
80022908:	fc5ff06f          	j	800228cc <_ldcheck+0xa4>

8002290c <__gdtoa>:
8002290c:	f3010113          	addi	sp,sp,-208
80022910:	0b512a23          	sw	s5,180(sp)
80022914:	00072a83          	lw	s5,0(a4)
80022918:	0b612823          	sw	s6,176(sp)
8002291c:	0c112623          	sw	ra,204(sp)
80022920:	fcfaf313          	andi	t1,s5,-49
80022924:	0c812423          	sw	s0,200(sp)
80022928:	0c912223          	sw	s1,196(sp)
8002292c:	0d212023          	sw	s2,192(sp)
80022930:	0b312e23          	sw	s3,188(sp)
80022934:	0b412c23          	sw	s4,184(sp)
80022938:	0b712623          	sw	s7,172(sp)
8002293c:	0b812423          	sw	s8,168(sp)
80022940:	0b912223          	sw	s9,164(sp)
80022944:	0ba12023          	sw	s10,160(sp)
80022948:	09b12e23          	sw	s11,156(sp)
8002294c:	00672023          	sw	t1,0(a4)
80022950:	00070b13          	mv	s6,a4
80022954:	0d012703          	lw	a4,208(sp)
80022958:	00faf313          	andi	t1,s5,15
8002295c:	00300e13          	li	t3,3
80022960:	00e12623          	sw	a4,12(sp)
80022964:	00c12823          	sw	a2,16(sp)
80022968:	01012e23          	sw	a6,28(sp)
8002296c:	01112423          	sw	a7,8(sp)
80022970:	7dc30863          	beq	t1,t3,80023140 <__gdtoa+0x834>
80022974:	00cafc93          	andi	s9,s5,12
80022978:	6e0c9a63          	bnez	s9,8002306c <__gdtoa+0x760>
8002297c:	00050413          	mv	s0,a0
80022980:	74030c63          	beqz	t1,800230d8 <__gdtoa+0x7cc>
80022984:	0005ac03          	lw	s8,0(a1)
80022988:	00068993          	mv	s3,a3
8002298c:	02000693          	li	a3,32
80022990:	00058913          	mv	s2,a1
80022994:	00078d13          	mv	s10,a5
80022998:	00000593          	li	a1,0
8002299c:	02000793          	li	a5,32
800229a0:	0186d863          	bge	a3,s8,800229b0 <__gdtoa+0xa4>
800229a4:	00179793          	slli	a5,a5,0x1
800229a8:	00158593          	addi	a1,a1,1
800229ac:	ff87cce3          	blt	a5,s8,800229a4 <__gdtoa+0x98>
800229b0:	00040513          	mv	a0,s0
800229b4:	7e1010ef          	jal	ra,80024994 <_Balloc>
800229b8:	00a12c23          	sw	a0,24(sp)
800229bc:	7c050063          	beqz	a0,8002317c <__gdtoa+0x870>
800229c0:	01812783          	lw	a5,24(sp)
800229c4:	fffc0513          	addi	a0,s8,-1
800229c8:	40555513          	srai	a0,a0,0x5
800229cc:	00251593          	slli	a1,a0,0x2
800229d0:	01478693          	addi	a3,a5,20
800229d4:	00b985b3          	add	a1,s3,a1
800229d8:	00098793          	mv	a5,s3
800229dc:	0007a703          	lw	a4,0(a5)
800229e0:	00478793          	addi	a5,a5,4
800229e4:	00468693          	addi	a3,a3,4
800229e8:	fee6ae23          	sw	a4,-4(a3)
800229ec:	fef5f8e3          	bgeu	a1,a5,800229dc <__gdtoa+0xd0>
800229f0:	00158593          	addi	a1,a1,1
800229f4:	00198793          	addi	a5,s3,1
800229f8:	00400693          	li	a3,4
800229fc:	00f5e663          	bltu	a1,a5,80022a08 <__gdtoa+0xfc>
80022a00:	00251513          	slli	a0,a0,0x2
80022a04:	00450693          	addi	a3,a0,4
80022a08:	01812783          	lw	a5,24(sp)
80022a0c:	4026dd93          	srai	s11,a3,0x2
80022a10:	00d786b3          	add	a3,a5,a3
80022a14:	00c0006f          	j	80022a20 <__gdtoa+0x114>
80022a18:	ffc68693          	addi	a3,a3,-4
80022a1c:	760d8463          	beqz	s11,80023184 <__gdtoa+0x878>
80022a20:	0106a783          	lw	a5,16(a3)
80022a24:	000d8a13          	mv	s4,s11
80022a28:	fffd8d93          	addi	s11,s11,-1
80022a2c:	fe0786e3          	beqz	a5,80022a18 <__gdtoa+0x10c>
80022a30:	01812703          	lw	a4,24(sp)
80022a34:	004d8793          	addi	a5,s11,4
80022a38:	00279793          	slli	a5,a5,0x2
80022a3c:	00f707b3          	add	a5,a4,a5
80022a40:	0047a503          	lw	a0,4(a5)
80022a44:	01472823          	sw	s4,16(a4)
80022a48:	005a1a13          	slli	s4,s4,0x5
80022a4c:	160020ef          	jal	ra,80024bac <__hi0bits>
80022a50:	40aa0db3          	sub	s11,s4,a0
80022a54:	01812503          	lw	a0,24(sp)
80022a58:	671010ef          	jal	ra,800248c8 <__trailz_D2A>
80022a5c:	01012783          	lw	a5,16(sp)
80022a60:	08a12623          	sw	a0,140(sp)
80022a64:	02f12423          	sw	a5,40(sp)
80022a68:	76051263          	bnez	a0,800231cc <__gdtoa+0x8c0>
80022a6c:	01812783          	lw	a5,24(sp)
80022a70:	0107a683          	lw	a3,16(a5)
80022a74:	64068c63          	beqz	a3,800230cc <__gdtoa+0x7c0>
80022a78:	01812503          	lw	a0,24(sp)
80022a7c:	08c10593          	addi	a1,sp,140
80022a80:	2f9020ef          	jal	ra,80025578 <__b2d>
80022a84:	00c59a13          	slli	s4,a1,0xc
80022a88:	00ca5a13          	srli	s4,s4,0xc
80022a8c:	3ff006b7          	lui	a3,0x3ff00
80022a90:	00da6833          	or	a6,s4,a3
80022a94:	800296b7          	lui	a3,0x80029
80022a98:	0386a603          	lw	a2,56(a3) # 80029038 <__rt_init_end+0x40>
80022a9c:	03c6a683          	lw	a3,60(a3)
80022aa0:	00080593          	mv	a1,a6
80022aa4:	03012623          	sw	a6,44(sp)
80022aa8:	00050493          	mv	s1,a0
80022aac:	04a12223          	sw	a0,68(sp)
80022ab0:	86ddf0ef          	jal	ra,8000231c <__subdf3>
80022ab4:	800296b7          	lui	a3,0x80029
80022ab8:	02812703          	lw	a4,40(sp)
80022abc:	0406a603          	lw	a2,64(a3) # 80029040 <__rt_init_end+0x48>
80022ac0:	0446a683          	lw	a3,68(a3)
80022ac4:	01b70733          	add	a4,a4,s11
80022ac8:	fff70a13          	addi	s4,a4,-1
80022acc:	02e12223          	sw	a4,36(sp)
80022ad0:	a5cdf0ef          	jal	ra,80001d2c <__muldf3>
80022ad4:	800296b7          	lui	a3,0x80029
80022ad8:	0486a603          	lw	a2,72(a3) # 80029048 <__rt_init_end+0x50>
80022adc:	04c6a683          	lw	a3,76(a3)
80022ae0:	04912a23          	sw	s1,84(sp)
80022ae4:	97cde0ef          	jal	ra,80000c60 <__adddf3>
80022ae8:	00050b93          	mv	s7,a0
80022aec:	000a0513          	mv	a0,s4
80022af0:	00058493          	mv	s1,a1
80022af4:	840e00ef          	jal	ra,80002b34 <__floatsidf>
80022af8:	800296b7          	lui	a3,0x80029
80022afc:	0506a603          	lw	a2,80(a3) # 80029050 <__rt_init_end+0x58>
80022b00:	0546a683          	lw	a3,84(a3)
80022b04:	a28df0ef          	jal	ra,80001d2c <__muldf3>
80022b08:	00050613          	mv	a2,a0
80022b0c:	00058693          	mv	a3,a1
80022b10:	000b8513          	mv	a0,s7
80022b14:	00048593          	mv	a1,s1
80022b18:	948de0ef          	jal	ra,80000c60 <__adddf3>
80022b1c:	00050b93          	mv	s7,a0
80022b20:	00058493          	mv	s1,a1
80022b24:	000a0513          	mv	a0,s4
80022b28:	000a5863          	bgez	s4,80022b38 <__gdtoa+0x22c>
80022b2c:	02412703          	lw	a4,36(sp)
80022b30:	00100513          	li	a0,1
80022b34:	40e50533          	sub	a0,a0,a4
80022b38:	bcb50513          	addi	a0,a0,-1077
80022b3c:	02a05a63          	blez	a0,80022b70 <__gdtoa+0x264>
80022b40:	ff5df0ef          	jal	ra,80002b34 <__floatsidf>
80022b44:	800296b7          	lui	a3,0x80029
80022b48:	0586a603          	lw	a2,88(a3) # 80029058 <__rt_init_end+0x60>
80022b4c:	05c6a683          	lw	a3,92(a3)
80022b50:	9dcdf0ef          	jal	ra,80001d2c <__muldf3>
80022b54:	00050613          	mv	a2,a0
80022b58:	00058693          	mv	a3,a1
80022b5c:	000b8513          	mv	a0,s7
80022b60:	00048593          	mv	a1,s1
80022b64:	8fcde0ef          	jal	ra,80000c60 <__adddf3>
80022b68:	00050b93          	mv	s7,a0
80022b6c:	00058493          	mv	s1,a1
80022b70:	00048593          	mv	a1,s1
80022b74:	000b8513          	mv	a0,s7
80022b78:	f3ddf0ef          	jal	ra,80002ab4 <__fixdfsi>
80022b7c:	00050813          	mv	a6,a0
80022b80:	00048593          	mv	a1,s1
80022b84:	000b8513          	mv	a0,s7
80022b88:	00000613          	li	a2,0
80022b8c:	00000693          	li	a3,0
80022b90:	03012023          	sw	a6,32(sp)
80022b94:	8a8df0ef          	jal	ra,80001c3c <__ledf2>
80022b98:	02055463          	bgez	a0,80022bc0 <__gdtoa+0x2b4>
80022b9c:	02012503          	lw	a0,32(sp)
80022ba0:	f95df0ef          	jal	ra,80002b34 <__floatsidf>
80022ba4:	000b8613          	mv	a2,s7
80022ba8:	00048693          	mv	a3,s1
80022bac:	f15de0ef          	jal	ra,80001ac0 <__eqdf2>
80022bb0:	02012783          	lw	a5,32(sp)
80022bb4:	00a03533          	snez	a0,a0
80022bb8:	40a787b3          	sub	a5,a5,a0
80022bbc:	02f12023          	sw	a5,32(sp)
80022bc0:	02c12783          	lw	a5,44(sp)
80022bc4:	014a1613          	slli	a2,s4,0x14
80022bc8:	414d84b3          	sub	s1,s11,s4
80022bcc:	00f60833          	add	a6,a2,a5
80022bd0:	02012783          	lw	a5,32(sp)
80022bd4:	01600693          	li	a3,22
80022bd8:	05012423          	sw	a6,72(sp)
80022bdc:	fff48b93          	addi	s7,s1,-1
80022be0:	5af6e863          	bltu	a3,a5,80023190 <__gdtoa+0x884>
80022be4:	80029337          	lui	t1,0x80029
80022be8:	d4830613          	addi	a2,t1,-696 # 80028d48 <__mprec_tens>
80022bec:	00379693          	slli	a3,a5,0x3
80022bf0:	00c686b3          	add	a3,a3,a2
80022bf4:	04412883          	lw	a7,68(sp)
80022bf8:	0006a503          	lw	a0,0(a3)
80022bfc:	0046a583          	lw	a1,4(a3)
80022c00:	00088613          	mv	a2,a7
80022c04:	00080693          	mv	a3,a6
80022c08:	f45de0ef          	jal	ra,80001b4c <__gedf2>
80022c0c:	14a04ce3          	bgtz	a0,80023564 <__gdtoa+0xc58>
80022c10:	04012823          	sw	zero,80(sp)
80022c14:	02012623          	sw	zero,44(sp)
80022c18:	00904a63          	bgtz	s1,80022c2c <__gdtoa+0x320>
80022c1c:	00100693          	li	a3,1
80022c20:	409687b3          	sub	a5,a3,s1
80022c24:	02f12623          	sw	a5,44(sp)
80022c28:	00000b93          	li	s7,0
80022c2c:	02012783          	lw	a5,32(sp)
80022c30:	02012c23          	sw	zero,56(sp)
80022c34:	00fb8bb3          	add	s7,s7,a5
80022c38:	02f12e23          	sw	a5,60(sp)
80022c3c:	00900693          	li	a3,9
80022c40:	5ba6e863          	bltu	a3,s10,800231f0 <__gdtoa+0x8e4>
80022c44:	00500693          	li	a3,5
80022c48:	13a6c8e3          	blt	a3,s10,80023578 <__gdtoa+0xc6c>
80022c4c:	02412783          	lw	a5,36(sp)
80022c50:	00400613          	li	a2,4
80022c54:	3fd78a13          	addi	s4,a5,1021
80022c58:	7f8a3a13          	sltiu	s4,s4,2040
80022c5c:	00cd1463          	bne	s10,a2,80022c64 <__gdtoa+0x358>
80022c60:	0440106f          	j	80023ca4 <__gdtoa+0x1398>
80022c64:	68dd0ee3          	beq	s10,a3,80023b00 <__gdtoa+0x11f4>
80022c68:	00200693          	li	a3,2
80022c6c:	34dd10e3          	bne	s10,a3,800237ac <__gdtoa+0xea0>
80022c70:	04012023          	sw	zero,64(sp)
80022c74:	01c12583          	lw	a1,28(sp)
80022c78:	00b04463          	bgtz	a1,80022c80 <__gdtoa+0x374>
80022c7c:	00100593          	li	a1,1
80022c80:	00058693          	mv	a3,a1
80022c84:	04b12c23          	sw	a1,88(sp)
80022c88:	02b12223          	sw	a1,36(sp)
80022c8c:	00b12e23          	sw	a1,28(sp)
80022c90:	00040513          	mv	a0,s0
80022c94:	08d12623          	sw	a3,140(sp)
80022c98:	065010ef          	jal	ra,800244fc <__rv_alloc_D2A>
80022c9c:	00050713          	mv	a4,a0
80022ca0:	4c050e63          	beqz	a0,8002317c <__gdtoa+0x870>
80022ca4:	00c92783          	lw	a5,12(s2)
80022ca8:	fff78793          	addi	a5,a5,-1
80022cac:	02f12823          	sw	a5,48(sp)
80022cb0:	5a078063          	beqz	a5,80023250 <__gdtoa+0x944>
80022cb4:	0a07c2e3          	bltz	a5,80023558 <__gdtoa+0xc4c>
80022cb8:	100afe93          	andi	t4,s5,256
80022cbc:	580e9263          	bnez	t4,80023240 <__gdtoa+0x934>
80022cc0:	02812783          	lw	a5,40(sp)
80022cc4:	0007c863          	bltz	a5,80022cd4 <__gdtoa+0x3c8>
80022cc8:	03c12783          	lw	a5,60(sp)
80022ccc:	00e00693          	li	a3,14
80022cd0:	0ef6dae3          	bge	a3,a5,800235c4 <__gdtoa+0xcb8>
80022cd4:	04012783          	lw	a5,64(sp)
80022cd8:	060788e3          	beqz	a5,80023548 <__gdtoa+0xc3c>
80022cdc:	02812783          	lw	a5,40(sp)
80022ce0:	41bc0e33          	sub	t3,s8,s11
80022ce4:	00492683          	lw	a3,4(s2)
80022ce8:	001e0613          	addi	a2,t3,1
80022cec:	08c12623          	sw	a2,140(sp)
80022cf0:	41c78e33          	sub	t3,a5,t3
80022cf4:	5cde5ae3          	bge	t3,a3,80023ac8 <__gdtoa+0x11bc>
80022cf8:	ffdd0613          	addi	a2,s10,-3
80022cfc:	ffd67613          	andi	a2,a2,-3
80022d00:	4a060ce3          	beqz	a2,800239b8 <__gdtoa+0x10ac>
80022d04:	40d786b3          	sub	a3,a5,a3
80022d08:	00168693          	addi	a3,a3,1
80022d0c:	08d12623          	sw	a3,140(sp)
80022d10:	00100613          	li	a2,1
80022d14:	01a65c63          	bge	a2,s10,80022d2c <__gdtoa+0x420>
80022d18:	02412783          	lw	a5,36(sp)
80022d1c:	00f05863          	blez	a5,80022d2c <__gdtoa+0x420>
80022d20:	02412783          	lw	a5,36(sp)
80022d24:	00d7d463          	bge	a5,a3,80022d2c <__gdtoa+0x420>
80022d28:	5d00106f          	j	800242f8 <__gdtoa+0x19ec>
80022d2c:	02c12783          	lw	a5,44(sp)
80022d30:	03812c03          	lw	s8,56(sp)
80022d34:	00db8bb3          	add	s7,s7,a3
80022d38:	00078a93          	mv	s5,a5
80022d3c:	00f687b3          	add	a5,a3,a5
80022d40:	02f12623          	sw	a5,44(sp)
80022d44:	00100593          	li	a1,1
80022d48:	00040513          	mv	a0,s0
80022d4c:	02e12423          	sw	a4,40(sp)
80022d50:	7b5010ef          	jal	ra,80024d04 <__i2b>
80022d54:	02812703          	lw	a4,40(sp)
80022d58:	00050a13          	mv	s4,a0
80022d5c:	42050063          	beqz	a0,8002317c <__gdtoa+0x870>
80022d60:	020a8663          	beqz	s5,80022d8c <__gdtoa+0x480>
80022d64:	03705463          	blez	s7,80022d8c <__gdtoa+0x480>
80022d68:	000a8693          	mv	a3,s5
80022d6c:	015bd463          	bge	s7,s5,80022d74 <__gdtoa+0x468>
80022d70:	000b8693          	mv	a3,s7
80022d74:	02c12783          	lw	a5,44(sp)
80022d78:	08d12623          	sw	a3,140(sp)
80022d7c:	40da8ab3          	sub	s5,s5,a3
80022d80:	40d787b3          	sub	a5,a5,a3
80022d84:	02f12623          	sw	a5,44(sp)
80022d88:	40db8bb3          	sub	s7,s7,a3
80022d8c:	03812783          	lw	a5,56(sp)
80022d90:	02078863          	beqz	a5,80022dc0 <__gdtoa+0x4b4>
80022d94:	04012783          	lw	a5,64(sp)
80022d98:	00078463          	beqz	a5,80022da0 <__gdtoa+0x494>
80022d9c:	600c1ce3          	bnez	s8,80023bb4 <__gdtoa+0x12a8>
80022da0:	01812583          	lw	a1,24(sp)
80022da4:	03812603          	lw	a2,56(sp)
80022da8:	00040513          	mv	a0,s0
80022dac:	02e12423          	sw	a4,40(sp)
80022db0:	238020ef          	jal	ra,80024fe8 <__pow5mult>
80022db4:	00a12c23          	sw	a0,24(sp)
80022db8:	02812703          	lw	a4,40(sp)
80022dbc:	3c050063          	beqz	a0,8002317c <__gdtoa+0x870>
80022dc0:	00100593          	li	a1,1
80022dc4:	00040513          	mv	a0,s0
80022dc8:	02e12423          	sw	a4,40(sp)
80022dcc:	739010ef          	jal	ra,80024d04 <__i2b>
80022dd0:	00050313          	mv	t1,a0
80022dd4:	3a050463          	beqz	a0,8002317c <__gdtoa+0x870>
80022dd8:	02012783          	lw	a5,32(sp)
80022ddc:	02812703          	lw	a4,40(sp)
80022de0:	480798e3          	bnez	a5,80023a70 <__gdtoa+0x1164>
80022de4:	00100693          	li	a3,1
80022de8:	19a6dae3          	bge	a3,s10,8002377c <__gdtoa+0xe70>
80022dec:	01f00913          	li	s2,31
80022df0:	02c12783          	lw	a5,44(sp)
80022df4:	41790933          	sub	s2,s2,s7
80022df8:	ffc90913          	addi	s2,s2,-4
80022dfc:	01f97913          	andi	s2,s2,31
80022e00:	00f90633          	add	a2,s2,a5
80022e04:	09212623          	sw	s2,140(sp)
80022e08:	00090793          	mv	a5,s2
80022e0c:	24c04ee3          	bgtz	a2,80023868 <__gdtoa+0xf5c>
80022e10:	00fb8633          	add	a2,s7,a5
80022e14:	34c04663          	bgtz	a2,80023160 <__gdtoa+0x854>
80022e18:	05012783          	lw	a5,80(sp)
80022e1c:	26079ce3          	bnez	a5,80023894 <__gdtoa+0xf88>
80022e20:	02412783          	lw	a5,36(sp)
80022e24:	3cf050e3          	blez	a5,800239e4 <__gdtoa+0x10d8>
80022e28:	04012783          	lw	a5,64(sp)
80022e2c:	2c0788e3          	beqz	a5,800238fc <__gdtoa+0xff0>
80022e30:	01590633          	add	a2,s2,s5
80022e34:	62c042e3          	bgtz	a2,80023c58 <__gdtoa+0x134c>
80022e38:	02012783          	lw	a5,32(sp)
80022e3c:	000a0d93          	mv	s11,s4
80022e40:	68079ee3          	bnez	a5,80023cdc <__gdtoa+0x13d0>
80022e44:	03612023          	sw	s6,32(sp)
80022e48:	00070b93          	mv	s7,a4
80022e4c:	01812b03          	lw	s6,24(sp)
80022e50:	00100793          	li	a5,1
80022e54:	00200493          	li	s1,2
80022e58:	00030c93          	mv	s9,t1
80022e5c:	00e12e23          	sw	a4,28(sp)
80022e60:	0b00006f          	j	80022f10 <__gdtoa+0x604>
80022e64:	00040513          	mv	a0,s0
80022e68:	3d5010ef          	jal	ra,80024a3c <_Bfree>
80022e6c:	00095463          	bgez	s2,80022e74 <__gdtoa+0x568>
80022e70:	0280106f          	j	80023e98 <__gdtoa+0x158c>
80022e74:	012d6933          	or	s2,s10,s2
80022e78:	00091a63          	bnez	s2,80022e8c <__gdtoa+0x580>
80022e7c:	0009a783          	lw	a5,0(s3)
80022e80:	0017f793          	andi	a5,a5,1
80022e84:	00079463          	bnez	a5,80022e8c <__gdtoa+0x580>
80022e88:	0100106f          	j	80023e98 <__gdtoa+0x158c>
80022e8c:	03012783          	lw	a5,48(sp)
80022e90:	00978463          	beq	a5,s1,80022e98 <__gdtoa+0x58c>
80022e94:	3840106f          	j	80024218 <__gdtoa+0x190c>
80022e98:	018b8023          	sb	s8,0(s7)
80022e9c:	08c12783          	lw	a5,140(sp)
80022ea0:	02412703          	lw	a4,36(sp)
80022ea4:	001b8b93          	addi	s7,s7,1
80022ea8:	00f71463          	bne	a4,a5,80022eb0 <__gdtoa+0x5a4>
80022eac:	29c0106f          	j	80024148 <__gdtoa+0x183c>
80022eb0:	000b0593          	mv	a1,s6
80022eb4:	00000693          	li	a3,0
80022eb8:	00a00613          	li	a2,10
80022ebc:	00040513          	mv	a0,s0
80022ec0:	3a1010ef          	jal	ra,80024a60 <__multadd>
80022ec4:	00050b13          	mv	s6,a0
80022ec8:	2a050a63          	beqz	a0,8002317c <__gdtoa+0x870>
80022ecc:	000a0593          	mv	a1,s4
80022ed0:	00000693          	li	a3,0
80022ed4:	00a00613          	li	a2,10
80022ed8:	00040513          	mv	a0,s0
80022edc:	0fba00e3          	beq	s4,s11,800237bc <__gdtoa+0xeb0>
80022ee0:	381010ef          	jal	ra,80024a60 <__multadd>
80022ee4:	00050a13          	mv	s4,a0
80022ee8:	28050a63          	beqz	a0,8002317c <__gdtoa+0x870>
80022eec:	000d8593          	mv	a1,s11
80022ef0:	00000693          	li	a3,0
80022ef4:	00a00613          	li	a2,10
80022ef8:	00040513          	mv	a0,s0
80022efc:	365010ef          	jal	ra,80024a60 <__multadd>
80022f00:	00050d93          	mv	s11,a0
80022f04:	26050c63          	beqz	a0,8002317c <__gdtoa+0x870>
80022f08:	08c12783          	lw	a5,140(sp)
80022f0c:	00178793          	addi	a5,a5,1
80022f10:	000c8593          	mv	a1,s9
80022f14:	000b0513          	mv	a0,s6
80022f18:	08f12623          	sw	a5,140(sp)
80022f1c:	6dc010ef          	jal	ra,800245f8 <__quorem_D2A>
80022f20:	00050a93          	mv	s5,a0
80022f24:	000a0593          	mv	a1,s4
80022f28:	000b0513          	mv	a0,s6
80022f2c:	39c020ef          	jal	ra,800252c8 <__mcmp>
80022f30:	000c8593          	mv	a1,s9
80022f34:	00050913          	mv	s2,a0
80022f38:	000d8613          	mv	a2,s11
80022f3c:	00040513          	mv	a0,s0
80022f40:	3e0020ef          	jal	ra,80025320 <__mdiff>
80022f44:	00050593          	mv	a1,a0
80022f48:	030a8c13          	addi	s8,s5,48
80022f4c:	22050863          	beqz	a0,8002317c <__gdtoa+0x870>
80022f50:	00c52783          	lw	a5,12(a0)
80022f54:	f00798e3          	bnez	a5,80022e64 <__gdtoa+0x558>
80022f58:	00a12c23          	sw	a0,24(sp)
80022f5c:	000b0513          	mv	a0,s6
80022f60:	368020ef          	jal	ra,800252c8 <__mcmp>
80022f64:	01812583          	lw	a1,24(sp)
80022f68:	00050793          	mv	a5,a0
80022f6c:	00fd66b3          	or	a3,s10,a5
80022f70:	00040513          	mv	a0,s0
80022f74:	00f12823          	sw	a5,16(sp)
80022f78:	00d12c23          	sw	a3,24(sp)
80022f7c:	2c1010ef          	jal	ra,80024a3c <_Bfree>
80022f80:	01812683          	lw	a3,24(sp)
80022f84:	01012783          	lw	a5,16(sp)
80022f88:	00068463          	beqz	a3,80022f90 <__gdtoa+0x684>
80022f8c:	4fc0106f          	j	80024488 <__gdtoa+0x1b7c>
80022f90:	0009a783          	lw	a5,0(s3)
80022f94:	0017f793          	andi	a5,a5,1
80022f98:	02079ce3          	bnez	a5,800237d0 <__gdtoa+0xec4>
80022f9c:	03012783          	lw	a5,48(sp)
80022fa0:	00079463          	bnez	a5,80022fa8 <__gdtoa+0x69c>
80022fa4:	3f00106f          	j	80024394 <__gdtoa+0x1a88>
80022fa8:	ef2048e3          	bgtz	s2,80022e98 <__gdtoa+0x58c>
80022fac:	01612c23          	sw	s6,24(sp)
80022fb0:	01812603          	lw	a2,24(sp)
80022fb4:	000c8313          	mv	t1,s9
80022fb8:	00068c93          	mv	s9,a3
80022fbc:	01062683          	lw	a3,16(a2)
80022fc0:	00100793          	li	a5,1
80022fc4:	01c12703          	lw	a4,28(sp)
80022fc8:	02012b03          	lw	s6,32(sp)
80022fcc:	00d7c463          	blt	a5,a3,80022fd4 <__gdtoa+0x6c8>
80022fd0:	4880106f          	j	80024458 <__gdtoa+0x1b4c>
80022fd4:	03012683          	lw	a3,48(sp)
80022fd8:	00200793          	li	a5,2
80022fdc:	00f69463          	bne	a3,a5,80022fe4 <__gdtoa+0x6d8>
80022fe0:	4480106f          	j	80024428 <__gdtoa+0x1b1c>
80022fe4:	01812983          	lw	s3,24(sp)
80022fe8:	00030a93          	mv	s5,t1
80022fec:	00070c93          	mv	s9,a4
80022ff0:	0240006f          	j	80023014 <__gdtoa+0x708>
80022ff4:	26d010ef          	jal	ra,80024a60 <__multadd>
80022ff8:	000a8593          	mv	a1,s5
80022ffc:	00050993          	mv	s3,a0
80023000:	16050e63          	beqz	a0,8002317c <__gdtoa+0x870>
80023004:	5f4010ef          	jal	ra,800245f8 <__quorem_D2A>
80023008:	03050c13          	addi	s8,a0,48
8002300c:	00090b93          	mv	s7,s2
80023010:	00048d93          	mv	s11,s1
80023014:	000d8593          	mv	a1,s11
80023018:	000a8513          	mv	a0,s5
8002301c:	2ac020ef          	jal	ra,800252c8 <__mcmp>
80023020:	00050793          	mv	a5,a0
80023024:	000d8593          	mv	a1,s11
80023028:	00000693          	li	a3,0
8002302c:	00a00613          	li	a2,10
80023030:	00040513          	mv	a0,s0
80023034:	001b8913          	addi	s2,s7,1
80023038:	00f04463          	bgtz	a5,80023040 <__gdtoa+0x734>
8002303c:	3cc0106f          	j	80024408 <__gdtoa+0x1afc>
80023040:	ff890fa3          	sb	s8,-1(s2)
80023044:	21d010ef          	jal	ra,80024a60 <__multadd>
80023048:	00050493          	mv	s1,a0
8002304c:	00098593          	mv	a1,s3
80023050:	00000693          	li	a3,0
80023054:	00a00613          	li	a2,10
80023058:	00040513          	mv	a0,s0
8002305c:	12048063          	beqz	s1,8002317c <__gdtoa+0x870>
80023060:	f9ba1ae3          	bne	s4,s11,80022ff4 <__gdtoa+0x6e8>
80023064:	00048a13          	mv	s4,s1
80023068:	f8dff06f          	j	80022ff4 <__gdtoa+0x6e8>
8002306c:	00400793          	li	a5,4
80023070:	10f31663          	bne	t1,a5,8002317c <__gdtoa+0x870>
80023074:	00812703          	lw	a4,8(sp)
80023078:	00c12603          	lw	a2,12(sp)
8002307c:	ffff87b7          	lui	a5,0xffff8
80023080:	800295b7          	lui	a1,0x80029
80023084:	00f72023          	sw	a5,0(a4)
80023088:	00300693          	li	a3,3
8002308c:	cdc58593          	addi	a1,a1,-804 # 80028cdc <blanks.1+0x48>
80023090:	0c812403          	lw	s0,200(sp)
80023094:	0cc12083          	lw	ra,204(sp)
80023098:	0c412483          	lw	s1,196(sp)
8002309c:	0c012903          	lw	s2,192(sp)
800230a0:	0bc12983          	lw	s3,188(sp)
800230a4:	0b812a03          	lw	s4,184(sp)
800230a8:	0b412a83          	lw	s5,180(sp)
800230ac:	0b012b03          	lw	s6,176(sp)
800230b0:	0ac12b83          	lw	s7,172(sp)
800230b4:	0a812c03          	lw	s8,168(sp)
800230b8:	0a412c83          	lw	s9,164(sp)
800230bc:	0a012d03          	lw	s10,160(sp)
800230c0:	09c12d83          	lw	s11,156(sp)
800230c4:	0d010113          	addi	sp,sp,208
800230c8:	4840106f          	j	8002454c <__nrv_alloc_D2A>
800230cc:	00078593          	mv	a1,a5
800230d0:	00040513          	mv	a0,s0
800230d4:	169010ef          	jal	ra,80024a3c <_Bfree>
800230d8:	00812703          	lw	a4,8(sp)
800230dc:	00c12603          	lw	a2,12(sp)
800230e0:	00100793          	li	a5,1
800230e4:	800295b7          	lui	a1,0x80029
800230e8:	00f72023          	sw	a5,0(a4)
800230ec:	00100693          	li	a3,1
800230f0:	8f058593          	addi	a1,a1,-1808 # 800288f0 <_ctype_+0x144>
800230f4:	00040513          	mv	a0,s0
800230f8:	454010ef          	jal	ra,8002454c <__nrv_alloc_D2A>
800230fc:	00050713          	mv	a4,a0
80023100:	0cc12083          	lw	ra,204(sp)
80023104:	0c812403          	lw	s0,200(sp)
80023108:	0c412483          	lw	s1,196(sp)
8002310c:	0c012903          	lw	s2,192(sp)
80023110:	0bc12983          	lw	s3,188(sp)
80023114:	0b812a03          	lw	s4,184(sp)
80023118:	0b412a83          	lw	s5,180(sp)
8002311c:	0b012b03          	lw	s6,176(sp)
80023120:	0ac12b83          	lw	s7,172(sp)
80023124:	0a812c03          	lw	s8,168(sp)
80023128:	0a412c83          	lw	s9,164(sp)
8002312c:	0a012d03          	lw	s10,160(sp)
80023130:	09c12d83          	lw	s11,156(sp)
80023134:	00070513          	mv	a0,a4
80023138:	0d010113          	addi	sp,sp,208
8002313c:	00008067          	ret
80023140:	00812703          	lw	a4,8(sp)
80023144:	ffff87b7          	lui	a5,0xffff8
80023148:	800295b7          	lui	a1,0x80029
8002314c:	00c12603          	lw	a2,12(sp)
80023150:	00f72023          	sw	a5,0(a4)
80023154:	00800693          	li	a3,8
80023158:	cd058593          	addi	a1,a1,-816 # 80028cd0 <blanks.1+0x3c>
8002315c:	f35ff06f          	j	80023090 <__gdtoa+0x784>
80023160:	00030593          	mv	a1,t1
80023164:	00040513          	mv	a0,s0
80023168:	00e12823          	sw	a4,16(sp)
8002316c:	7cd010ef          	jal	ra,80025138 <__lshift>
80023170:	01012703          	lw	a4,16(sp)
80023174:	00050313          	mv	t1,a0
80023178:	ca0510e3          	bnez	a0,80022e18 <__gdtoa+0x50c>
8002317c:	00000713          	li	a4,0
80023180:	f81ff06f          	j	80023100 <__gdtoa+0x7f4>
80023184:	01812783          	lw	a5,24(sp)
80023188:	0007a823          	sw	zero,16(a5) # ffff8010 <__bss_end+0x7ff71854>
8002318c:	8c9ff06f          	j	80022a54 <__gdtoa+0x148>
80023190:	00100793          	li	a5,1
80023194:	04f12823          	sw	a5,80(sp)
80023198:	02012623          	sw	zero,44(sp)
8002319c:	380bcc63          	bltz	s7,80023534 <__gdtoa+0xc28>
800231a0:	02012783          	lw	a5,32(sp)
800231a4:	a807d4e3          	bgez	a5,80022c2c <__gdtoa+0x320>
800231a8:	02012783          	lw	a5,32(sp)
800231ac:	02c12703          	lw	a4,44(sp)
800231b0:	02012023          	sw	zero,32(sp)
800231b4:	02f12e23          	sw	a5,60(sp)
800231b8:	40f70733          	sub	a4,a4,a5
800231bc:	02e12623          	sw	a4,44(sp)
800231c0:	40f00733          	neg	a4,a5
800231c4:	02e12c23          	sw	a4,56(sp)
800231c8:	a75ff06f          	j	80022c3c <__gdtoa+0x330>
800231cc:	00050593          	mv	a1,a0
800231d0:	01812503          	lw	a0,24(sp)
800231d4:	610010ef          	jal	ra,800247e4 <__rshift_D2A>
800231d8:	08c12683          	lw	a3,140(sp)
800231dc:	01012783          	lw	a5,16(sp)
800231e0:	40dd8db3          	sub	s11,s11,a3
800231e4:	00f687b3          	add	a5,a3,a5
800231e8:	02f12423          	sw	a5,40(sp)
800231ec:	881ff06f          	j	80022a6c <__gdtoa+0x160>
800231f0:	02412783          	lw	a5,36(sp)
800231f4:	00000d13          	li	s10,0
800231f8:	3fd78793          	addi	a5,a5,1021
800231fc:	7f87ba13          	sltiu	s4,a5,2040
80023200:	000c0513          	mv	a0,s8
80023204:	931df0ef          	jal	ra,80002b34 <__floatsidf>
80023208:	800296b7          	lui	a3,0x80029
8002320c:	0606a603          	lw	a2,96(a3) # 80029060 <__rt_init_end+0x68>
80023210:	0646a683          	lw	a3,100(a3)
80023214:	00100793          	li	a5,1
80023218:	04f12023          	sw	a5,64(sp)
8002321c:	00012e23          	sw	zero,28(sp)
80023220:	b0dde0ef          	jal	ra,80001d2c <__muldf3>
80023224:	891df0ef          	jal	ra,80002ab4 <__fixdfsi>
80023228:	fff00793          	li	a5,-1
8002322c:	00350593          	addi	a1,a0,3
80023230:	00058693          	mv	a3,a1
80023234:	04f12c23          	sw	a5,88(sp)
80023238:	02f12223          	sw	a5,36(sp)
8002323c:	a55ff06f          	j	80022c90 <__gdtoa+0x384>
80023240:	03012783          	lw	a5,48(sp)
80023244:	00300693          	li	a3,3
80023248:	40f687b3          	sub	a5,a3,a5
8002324c:	02f12823          	sw	a5,48(sp)
80023250:	02412a83          	lw	s5,36(sp)
80023254:	00e00693          	li	a3,14
80023258:	a756e4e3          	bltu	a3,s5,80022cc0 <__gdtoa+0x3b4>
8002325c:	a60a02e3          	beqz	s4,80022cc0 <__gdtoa+0x3b4>
80023260:	03012783          	lw	a5,48(sp)
80023264:	03c12683          	lw	a3,60(sp)
80023268:	00d7e6b3          	or	a3,a5,a3
8002326c:	a4069ae3          	bnez	a3,80022cc0 <__gdtoa+0x3b4>
80023270:	04812a03          	lw	s4,72(sp)
80023274:	05012783          	lw	a5,80(sp)
80023278:	08012623          	sw	zero,140(sp)
8002327c:	05412e23          	sw	s4,92(sp)
80023280:	04412483          	lw	s1,68(sp)
80023284:	02078463          	beqz	a5,800232ac <__gdtoa+0x9a0>
80023288:	800296b7          	lui	a3,0x80029
8002328c:	0686a603          	lw	a2,104(a3) # 80029068 <__rt_init_end+0x70>
80023290:	06c6a683          	lw	a3,108(a3)
80023294:	00048513          	mv	a0,s1
80023298:	000a0593          	mv	a1,s4
8002329c:	02e12823          	sw	a4,48(sp)
800232a0:	99dde0ef          	jal	ra,80001c3c <__ledf2>
800232a4:	03012703          	lw	a4,48(sp)
800232a8:	6a054ee3          	bltz	a0,80024164 <__gdtoa+0x1858>
800232ac:	04412783          	lw	a5,68(sp)
800232b0:	02e12823          	sw	a4,48(sp)
800232b4:	00078613          	mv	a2,a5
800232b8:	00078513          	mv	a0,a5
800232bc:	05c12783          	lw	a5,92(sp)
800232c0:	00078693          	mv	a3,a5
800232c4:	00078593          	mv	a1,a5
800232c8:	999dd0ef          	jal	ra,80000c60 <__adddf3>
800232cc:	800296b7          	lui	a3,0x80029
800232d0:	0806a603          	lw	a2,128(a3) # 80029080 <__rt_init_end+0x88>
800232d4:	0846a683          	lw	a3,132(a3)
800232d8:	989dd0ef          	jal	ra,80000c60 <__adddf3>
800232dc:	02412783          	lw	a5,36(sp)
800232e0:	fcc008b7          	lui	a7,0xfcc00
800232e4:	03012703          	lw	a4,48(sp)
800232e8:	00050a13          	mv	s4,a0
800232ec:	00b888b3          	add	a7,a7,a1
800232f0:	280782e3          	beqz	a5,80023d74 <__gdtoa+0x1468>
800232f4:	02412783          	lw	a5,36(sp)
800232f8:	06012223          	sw	zero,100(sp)
800232fc:	06f12023          	sw	a5,96(sp)
80023300:	04412783          	lw	a5,68(sp)
80023304:	02f12823          	sw	a5,48(sp)
80023308:	05c12783          	lw	a5,92(sp)
8002330c:	06f12423          	sw	a5,104(sp)
80023310:	06012783          	lw	a5,96(sp)
80023314:	80029337          	lui	t1,0x80029
80023318:	04012583          	lw	a1,64(sp)
8002331c:	fff78693          	addi	a3,a5,-1
80023320:	d4830613          	addi	a2,t1,-696 # 80028d48 <__mprec_tens>
80023324:	00369693          	slli	a3,a3,0x3
80023328:	00c686b3          	add	a3,a3,a2
8002332c:	0006a603          	lw	a2,0(a3)
80023330:	00088493          	mv	s1,a7
80023334:	0046a683          	lw	a3,4(a3)
80023338:	460586e3          	beqz	a1,80023fa4 <__gdtoa+0x1698>
8002333c:	800295b7          	lui	a1,0x80029
80023340:	0905a503          	lw	a0,144(a1) # 80029090 <__rt_init_end+0x98>
80023344:	0945a583          	lw	a1,148(a1)
80023348:	06612e23          	sw	t1,124(sp)
8002334c:	00170a93          	addi	s5,a4,1
80023350:	04e12423          	sw	a4,72(sp)
80023354:	05412a23          	sw	s4,84(sp)
80023358:	88cde0ef          	jal	ra,800013e4 <__divdf3>
8002335c:	000a0613          	mv	a2,s4
80023360:	00048693          	mv	a3,s1
80023364:	fb9de0ef          	jal	ra,8000231c <__subdf3>
80023368:	03012a03          	lw	s4,48(sp)
8002336c:	06812483          	lw	s1,104(sp)
80023370:	00050613          	mv	a2,a0
80023374:	00058693          	mv	a3,a1
80023378:	000a0513          	mv	a0,s4
8002337c:	00048593          	mv	a1,s1
80023380:	06c12423          	sw	a2,104(sp)
80023384:	06d12623          	sw	a3,108(sp)
80023388:	f2cdf0ef          	jal	ra,80002ab4 <__fixdfsi>
8002338c:	02a12823          	sw	a0,48(sp)
80023390:	fa4df0ef          	jal	ra,80002b34 <__floatsidf>
80023394:	00050613          	mv	a2,a0
80023398:	00058693          	mv	a3,a1
8002339c:	000a0513          	mv	a0,s4
800233a0:	00048593          	mv	a1,s1
800233a4:	f79de0ef          	jal	ra,8000231c <__subdf3>
800233a8:	03012e83          	lw	t4,48(sp)
800233ac:	04812703          	lw	a4,72(sp)
800233b0:	00050613          	mv	a2,a0
800233b4:	00058693          	mv	a3,a1
800233b8:	00050493          	mv	s1,a0
800233bc:	00058a13          	mv	s4,a1
800233c0:	06812503          	lw	a0,104(sp)
800233c4:	06c12583          	lw	a1,108(sp)
800233c8:	030e8e93          	addi	t4,t4,48
800233cc:	01d70023          	sb	t4,0(a4)
800233d0:	02e12823          	sw	a4,48(sp)
800233d4:	f78de0ef          	jal	ra,80001b4c <__gedf2>
800233d8:	03012703          	lw	a4,48(sp)
800233dc:	6ca04ce3          	bgtz	a0,800242b4 <__gdtoa+0x19a8>
800233e0:	800296b7          	lui	a3,0x80029
800233e4:	0686a783          	lw	a5,104(a3) # 80029068 <__rt_init_end+0x70>
800233e8:	06c6a803          	lw	a6,108(a3)
800233ec:	800296b7          	lui	a3,0x80029
800233f0:	04f12423          	sw	a5,72(sp)
800233f4:	05012623          	sw	a6,76(sp)
800233f8:	0706a783          	lw	a5,112(a3) # 80029070 <__rt_init_end+0x78>
800233fc:	0746a803          	lw	a6,116(a3)
80023400:	07712823          	sw	s7,112(sp)
80023404:	07812a23          	sw	s8,116(sp)
80023408:	07b12c23          	sw	s11,120(sp)
8002340c:	06812b83          	lw	s7,104(sp)
80023410:	06012d83          	lw	s11,96(sp)
80023414:	06c12c03          	lw	s8,108(sp)
80023418:	02f12823          	sw	a5,48(sp)
8002341c:	03012a23          	sw	a6,52(sp)
80023420:	04e12a23          	sw	a4,84(sp)
80023424:	06812023          	sw	s0,96(sp)
80023428:	0840006f          	j	800234ac <__gdtoa+0xba0>
8002342c:	08c12783          	lw	a5,140(sp)
80023430:	001a8a93          	addi	s5,s5,1
80023434:	00178793          	addi	a5,a5,1
80023438:	08f12623          	sw	a5,140(sp)
8002343c:	01b7c463          	blt	a5,s11,80023444 <__gdtoa+0xb38>
80023440:	6e90006f          	j	80024328 <__gdtoa+0x1a1c>
80023444:	8e9de0ef          	jal	ra,80001d2c <__muldf3>
80023448:	03012603          	lw	a2,48(sp)
8002344c:	03412683          	lw	a3,52(sp)
80023450:	00050b93          	mv	s7,a0
80023454:	00058c13          	mv	s8,a1
80023458:	00048513          	mv	a0,s1
8002345c:	000a0593          	mv	a1,s4
80023460:	8cdde0ef          	jal	ra,80001d2c <__muldf3>
80023464:	00058a13          	mv	s4,a1
80023468:	00050413          	mv	s0,a0
8002346c:	e48df0ef          	jal	ra,80002ab4 <__fixdfsi>
80023470:	00050493          	mv	s1,a0
80023474:	ec0df0ef          	jal	ra,80002b34 <__floatsidf>
80023478:	00050613          	mv	a2,a0
8002347c:	00058693          	mv	a3,a1
80023480:	00040513          	mv	a0,s0
80023484:	000a0593          	mv	a1,s4
80023488:	e95de0ef          	jal	ra,8000231c <__subdf3>
8002348c:	03048793          	addi	a5,s1,48
80023490:	000b8613          	mv	a2,s7
80023494:	000c0693          	mv	a3,s8
80023498:	fefa8fa3          	sb	a5,-1(s5)
8002349c:	00050493          	mv	s1,a0
800234a0:	00058a13          	mv	s4,a1
800234a4:	f98de0ef          	jal	ra,80001c3c <__ledf2>
800234a8:	600542e3          	bltz	a0,800242ac <__gdtoa+0x19a0>
800234ac:	04812503          	lw	a0,72(sp)
800234b0:	04c12583          	lw	a1,76(sp)
800234b4:	00048613          	mv	a2,s1
800234b8:	000a0693          	mv	a3,s4
800234bc:	e61de0ef          	jal	ra,8000231c <__subdf3>
800234c0:	00050613          	mv	a2,a0
800234c4:	00058693          	mv	a3,a1
800234c8:	000b8513          	mv	a0,s7
800234cc:	000c0593          	mv	a1,s8
800234d0:	e7cde0ef          	jal	ra,80001b4c <__gedf2>
800234d4:	00050793          	mv	a5,a0
800234d8:	03012603          	lw	a2,48(sp)
800234dc:	03412683          	lw	a3,52(sp)
800234e0:	000b8513          	mv	a0,s7
800234e4:	000c0593          	mv	a1,s8
800234e8:	f4f052e3          	blez	a5,8002342c <__gdtoa+0xb20>
800234ec:	06412783          	lw	a5,100(sp)
800234f0:	05412703          	lw	a4,84(sp)
800234f4:	06012403          	lw	s0,96(sp)
800234f8:	fffacc03          	lbu	s8,-1(s5)
800234fc:	00178a13          	addi	s4,a5,1
80023500:	03900693          	li	a3,57
80023504:	0100006f          	j	80023514 <__gdtoa+0xc08>
80023508:	28f708e3          	beq	a4,a5,80023f98 <__gdtoa+0x168c>
8002350c:	fff7cc03          	lbu	s8,-1(a5)
80023510:	00078a93          	mv	s5,a5
80023514:	fffa8793          	addi	a5,s5,-1
80023518:	fedc08e3          	beq	s8,a3,80023508 <__gdtoa+0xbfc>
8002351c:	001c0693          	addi	a3,s8,1
80023520:	0ff6f693          	zext.b	a3,a3
80023524:	00d78023          	sb	a3,0(a5)
80023528:	000a0493          	mv	s1,s4
8002352c:	02000c93          	li	s9,32
80023530:	2100006f          	j	80023740 <__gdtoa+0xe34>
80023534:	00100693          	li	a3,1
80023538:	409687b3          	sub	a5,a3,s1
8002353c:	02f12623          	sw	a5,44(sp)
80023540:	00000b93          	li	s7,0
80023544:	c5dff06f          	j	800231a0 <__gdtoa+0x894>
80023548:	03812c03          	lw	s8,56(sp)
8002354c:	02c12a83          	lw	s5,44(sp)
80023550:	00000a13          	li	s4,0
80023554:	80dff06f          	j	80022d60 <__gdtoa+0x454>
80023558:	00200793          	li	a5,2
8002355c:	02f12823          	sw	a5,48(sp)
80023560:	f58ff06f          	j	80022cb8 <__gdtoa+0x3ac>
80023564:	02012783          	lw	a5,32(sp)
80023568:	04012823          	sw	zero,80(sp)
8002356c:	fff78793          	addi	a5,a5,-1
80023570:	02f12023          	sw	a5,32(sp)
80023574:	c25ff06f          	j	80023198 <__gdtoa+0x88c>
80023578:	ffcd0d13          	addi	s10,s10,-4
8002357c:	00400613          	li	a2,4
80023580:	70cd0a63          	beq	s10,a2,80023c94 <__gdtoa+0x1388>
80023584:	70dd0063          	beq	s10,a3,80023c84 <__gdtoa+0x1378>
80023588:	00200693          	li	a3,2
8002358c:	04012023          	sw	zero,64(sp)
80023590:	00000a13          	li	s4,0
80023594:	eedd0063          	beq	s10,a3,80022c74 <__gdtoa+0x368>
80023598:	00300d13          	li	s10,3
8002359c:	01c12783          	lw	a5,28(sp)
800235a0:	03c12703          	lw	a4,60(sp)
800235a4:	00e787b3          	add	a5,a5,a4
800235a8:	04f12c23          	sw	a5,88(sp)
800235ac:	00178793          	addi	a5,a5,1
800235b0:	02f12223          	sw	a5,36(sp)
800235b4:	4af05863          	blez	a5,80023a64 <__gdtoa+0x1158>
800235b8:	00078693          	mv	a3,a5
800235bc:	00078593          	mv	a1,a5
800235c0:	ed0ff06f          	j	80022c90 <__gdtoa+0x384>
800235c4:	800296b7          	lui	a3,0x80029
800235c8:	00379793          	slli	a5,a5,0x3
800235cc:	d4868693          	addi	a3,a3,-696 # 80028d48 <__mprec_tens>
800235d0:	00d787b3          	add	a5,a5,a3
800235d4:	0007ad03          	lw	s10,0(a5)
800235d8:	0047ad83          	lw	s11,4(a5)
800235dc:	01c12783          	lw	a5,28(sp)
800235e0:	5207cc63          	bltz	a5,80023b18 <__gdtoa+0x120c>
800235e4:	05412483          	lw	s1,84(sp)
800235e8:	04812983          	lw	s3,72(sp)
800235ec:	00100793          	li	a5,1
800235f0:	000d0613          	mv	a2,s10
800235f4:	000d8693          	mv	a3,s11
800235f8:	00048513          	mv	a0,s1
800235fc:	00098593          	mv	a1,s3
80023600:	00e12823          	sw	a4,16(sp)
80023604:	08f12623          	sw	a5,140(sp)
80023608:	ddddd0ef          	jal	ra,800013e4 <__divdf3>
8002360c:	ca8df0ef          	jal	ra,80002ab4 <__fixdfsi>
80023610:	00050913          	mv	s2,a0
80023614:	d20df0ef          	jal	ra,80002b34 <__floatsidf>
80023618:	000d0613          	mv	a2,s10
8002361c:	000d8693          	mv	a3,s11
80023620:	f0cde0ef          	jal	ra,80001d2c <__muldf3>
80023624:	00050613          	mv	a2,a0
80023628:	00058693          	mv	a3,a1
8002362c:	00048513          	mv	a0,s1
80023630:	00098593          	mv	a1,s3
80023634:	ce9de0ef          	jal	ra,8000231c <__subdf3>
80023638:	01012703          	lw	a4,16(sp)
8002363c:	03090793          	addi	a5,s2,48
80023640:	00000613          	li	a2,0
80023644:	00f70023          	sb	a5,0(a4)
80023648:	03c12783          	lw	a5,60(sp)
8002364c:	00000693          	li	a3,0
80023650:	00050c13          	mv	s8,a0
80023654:	00178a13          	addi	s4,a5,1
80023658:	00058993          	mv	s3,a1
8002365c:	c64de0ef          	jal	ra,80001ac0 <__eqdf2>
80023660:	01012703          	lw	a4,16(sp)
80023664:	000a0493          	mv	s1,s4
80023668:	00170a93          	addi	s5,a4,1
8002366c:	0c050a63          	beqz	a0,80023740 <__gdtoa+0xe34>
80023670:	800297b7          	lui	a5,0x80029
80023674:	0747a803          	lw	a6,116(a5) # 80029074 <__rt_init_end+0x7c>
80023678:	0707a783          	lw	a5,112(a5)
8002367c:	01912e23          	sw	s9,28(sp)
80023680:	02412b83          	lw	s7,36(sp)
80023684:	00098c93          	mv	s9,s3
80023688:	00f12823          	sw	a5,16(sp)
8002368c:	000a0993          	mv	s3,s4
80023690:	01012a23          	sw	a6,20(sp)
80023694:	00070a13          	mv	s4,a4
80023698:	0700006f          	j	80023708 <__gdtoa+0xdfc>
8002369c:	09012623          	sw	a6,140(sp)
800236a0:	e8cde0ef          	jal	ra,80001d2c <__muldf3>
800236a4:	000d0613          	mv	a2,s10
800236a8:	000d8693          	mv	a3,s11
800236ac:	00050c93          	mv	s9,a0
800236b0:	00058c13          	mv	s8,a1
800236b4:	d31dd0ef          	jal	ra,800013e4 <__divdf3>
800236b8:	bfcdf0ef          	jal	ra,80002ab4 <__fixdfsi>
800236bc:	00050913          	mv	s2,a0
800236c0:	c74df0ef          	jal	ra,80002b34 <__floatsidf>
800236c4:	000d0613          	mv	a2,s10
800236c8:	000d8693          	mv	a3,s11
800236cc:	e60de0ef          	jal	ra,80001d2c <__muldf3>
800236d0:	00050613          	mv	a2,a0
800236d4:	00058693          	mv	a3,a1
800236d8:	000c8513          	mv	a0,s9
800236dc:	000c0593          	mv	a1,s8
800236e0:	c3dde0ef          	jal	ra,8000231c <__subdf3>
800236e4:	001a8a93          	addi	s5,s5,1
800236e8:	03090793          	addi	a5,s2,48
800236ec:	fefa8fa3          	sb	a5,-1(s5)
800236f0:	00000613          	li	a2,0
800236f4:	00000693          	li	a3,0
800236f8:	00050c13          	mv	s8,a0
800236fc:	00058c93          	mv	s9,a1
80023700:	bc0de0ef          	jal	ra,80001ac0 <__eqdf2>
80023704:	40050463          	beqz	a0,80023b0c <__gdtoa+0x1200>
80023708:	08c12703          	lw	a4,140(sp)
8002370c:	01012603          	lw	a2,16(sp)
80023710:	01412683          	lw	a3,20(sp)
80023714:	000c0513          	mv	a0,s8
80023718:	000c8593          	mv	a1,s9
8002371c:	00170813          	addi	a6,a4,1
80023720:	f7771ee3          	bne	a4,s7,8002369c <__gdtoa+0xd90>
80023724:	03012683          	lw	a3,48(sp)
80023728:	000a0713          	mv	a4,s4
8002372c:	00098a13          	mv	s4,s3
80023730:	7e068863          	beqz	a3,80023f20 <__gdtoa+0x1614>
80023734:	00100793          	li	a5,1
80023738:	01000c93          	li	s9,16
8002373c:	2af684e3          	beq	a3,a5,800241e4 <__gdtoa+0x18d8>
80023740:	01812583          	lw	a1,24(sp)
80023744:	00040513          	mv	a0,s0
80023748:	00e12823          	sw	a4,16(sp)
8002374c:	2f0010ef          	jal	ra,80024a3c <_Bfree>
80023750:	00812783          	lw	a5,8(sp)
80023754:	000a8023          	sb	zero,0(s5)
80023758:	01012703          	lw	a4,16(sp)
8002375c:	0097a023          	sw	s1,0(a5)
80023760:	00c12783          	lw	a5,12(sp)
80023764:	00078463          	beqz	a5,8002376c <__gdtoa+0xe60>
80023768:	0157a023          	sw	s5,0(a5)
8002376c:	000b2783          	lw	a5,0(s6)
80023770:	0197e7b3          	or	a5,a5,s9
80023774:	00fb2023          	sw	a5,0(s6)
80023778:	989ff06f          	j	80023100 <__gdtoa+0x7f4>
8002377c:	e6dd9863          	bne	s11,a3,80022dec <__gdtoa+0x4e0>
80023780:	00492783          	lw	a5,4(s2)
80023784:	01012683          	lw	a3,16(sp)
80023788:	00178793          	addi	a5,a5,1
8002378c:	e6d7d063          	bge	a5,a3,80022dec <__gdtoa+0x4e0>
80023790:	02c12783          	lw	a5,44(sp)
80023794:	001b8b93          	addi	s7,s7,1
80023798:	00178793          	addi	a5,a5,1
8002379c:	02f12623          	sw	a5,44(sp)
800237a0:	00100793          	li	a5,1
800237a4:	02f12023          	sw	a5,32(sp)
800237a8:	e44ff06f          	j	80022dec <__gdtoa+0x4e0>
800237ac:	00300693          	li	a3,3
800237b0:	04012023          	sw	zero,64(sp)
800237b4:	dedd04e3          	beq	s10,a3,8002359c <__gdtoa+0xc90>
800237b8:	a49ff06f          	j	80023200 <__gdtoa+0x8f4>
800237bc:	2a4010ef          	jal	ra,80024a60 <__multadd>
800237c0:	00050a13          	mv	s4,a0
800237c4:	9a050ce3          	beqz	a0,8002317c <__gdtoa+0x870>
800237c8:	00050d93          	mv	s11,a0
800237cc:	f3cff06f          	j	80022f08 <__gdtoa+0x5fc>
800237d0:	ec095463          	bgez	s2,80022e98 <__gdtoa+0x58c>
800237d4:	03012783          	lw	a5,48(sp)
800237d8:	01612c23          	sw	s6,24(sp)
800237dc:	000c8313          	mv	t1,s9
800237e0:	01c12703          	lw	a4,28(sp)
800237e4:	02012b03          	lw	s6,32(sp)
800237e8:	00068c93          	mv	s9,a3
800237ec:	44079ce3          	bnez	a5,80024444 <__gdtoa+0x1b38>
800237f0:	01812783          	lw	a5,24(sp)
800237f4:	01000c93          	li	s9,16
800237f8:	001b8913          	addi	s2,s7,1
800237fc:	0107a683          	lw	a3,16(a5)
80023800:	00100793          	li	a5,1
80023804:	3ed7d2e3          	bge	a5,a3,800243e8 <__gdtoa+0x1adc>
80023808:	000a0993          	mv	s3,s4
8002380c:	00090a93          	mv	s5,s2
80023810:	018b8023          	sb	s8,0(s7)
80023814:	000d8a13          	mv	s4,s11
80023818:	00030593          	mv	a1,t1
8002381c:	00040513          	mv	a0,s0
80023820:	00e12823          	sw	a4,16(sp)
80023824:	218010ef          	jal	ra,80024a3c <_Bfree>
80023828:	03c12783          	lw	a5,60(sp)
8002382c:	01012703          	lw	a4,16(sp)
80023830:	00178493          	addi	s1,a5,1
80023834:	f00a06e3          	beqz	s4,80023740 <__gdtoa+0xe34>
80023838:	00098c63          	beqz	s3,80023850 <__gdtoa+0xf44>
8002383c:	01498a63          	beq	s3,s4,80023850 <__gdtoa+0xf44>
80023840:	00098593          	mv	a1,s3
80023844:	00040513          	mv	a0,s0
80023848:	1f4010ef          	jal	ra,80024a3c <_Bfree>
8002384c:	01012703          	lw	a4,16(sp)
80023850:	000a0593          	mv	a1,s4
80023854:	00040513          	mv	a0,s0
80023858:	00e12823          	sw	a4,16(sp)
8002385c:	1e0010ef          	jal	ra,80024a3c <_Bfree>
80023860:	01012703          	lw	a4,16(sp)
80023864:	eddff06f          	j	80023740 <__gdtoa+0xe34>
80023868:	01812583          	lw	a1,24(sp)
8002386c:	00040513          	mv	a0,s0
80023870:	02e12423          	sw	a4,40(sp)
80023874:	00612823          	sw	t1,16(sp)
80023878:	0c1010ef          	jal	ra,80025138 <__lshift>
8002387c:	00a12c23          	sw	a0,24(sp)
80023880:	8e050ee3          	beqz	a0,8002317c <__gdtoa+0x870>
80023884:	08c12783          	lw	a5,140(sp)
80023888:	02812703          	lw	a4,40(sp)
8002388c:	01012303          	lw	t1,16(sp)
80023890:	d80ff06f          	j	80022e10 <__gdtoa+0x504>
80023894:	01812503          	lw	a0,24(sp)
80023898:	00030593          	mv	a1,t1
8002389c:	02e12423          	sw	a4,40(sp)
800238a0:	00612823          	sw	t1,16(sp)
800238a4:	225010ef          	jal	ra,800252c8 <__mcmp>
800238a8:	01012303          	lw	t1,16(sp)
800238ac:	02812703          	lw	a4,40(sp)
800238b0:	d6055863          	bgez	a0,80022e20 <__gdtoa+0x514>
800238b4:	01812583          	lw	a1,24(sp)
800238b8:	00000693          	li	a3,0
800238bc:	00a00613          	li	a2,10
800238c0:	00040513          	mv	a0,s0
800238c4:	02e12223          	sw	a4,36(sp)
800238c8:	198010ef          	jal	ra,80024a60 <__multadd>
800238cc:	03c12703          	lw	a4,60(sp)
800238d0:	00a12c23          	sw	a0,24(sp)
800238d4:	fff70713          	addi	a4,a4,-1
800238d8:	02e12e23          	sw	a4,60(sp)
800238dc:	8a0500e3          	beqz	a0,8002317c <__gdtoa+0x870>
800238e0:	04012783          	lw	a5,64(sp)
800238e4:	01012303          	lw	t1,16(sp)
800238e8:	02412703          	lw	a4,36(sp)
800238ec:	16079ae3          	bnez	a5,80024260 <__gdtoa+0x1954>
800238f0:	05812783          	lw	a5,88(sp)
800238f4:	1ef05c63          	blez	a5,80023aec <__gdtoa+0x11e0>
800238f8:	02f12223          	sw	a5,36(sp)
800238fc:	02412903          	lw	s2,36(sp)
80023900:	01812483          	lw	s1,24(sp)
80023904:	00070b93          	mv	s7,a4
80023908:	00100793          	li	a5,1
8002390c:	00030993          	mv	s3,t1
80023910:	00070a93          	mv	s5,a4
80023914:	0180006f          	j	8002392c <__gdtoa+0x1020>
80023918:	148010ef          	jal	ra,80024a60 <__multadd>
8002391c:	00050493          	mv	s1,a0
80023920:	84050ee3          	beqz	a0,8002317c <__gdtoa+0x870>
80023924:	08c12783          	lw	a5,140(sp)
80023928:	00178793          	addi	a5,a5,1
8002392c:	00098593          	mv	a1,s3
80023930:	00048513          	mv	a0,s1
80023934:	08f12623          	sw	a5,140(sp)
80023938:	4c1000ef          	jal	ra,800245f8 <__quorem_D2A>
8002393c:	03050c13          	addi	s8,a0,48
80023940:	018b8023          	sb	s8,0(s7)
80023944:	08c12783          	lw	a5,140(sp)
80023948:	00048593          	mv	a1,s1
8002394c:	00000693          	li	a3,0
80023950:	00a00613          	li	a2,10
80023954:	00040513          	mv	a0,s0
80023958:	001b8b93          	addi	s7,s7,1
8002395c:	fb27cee3          	blt	a5,s2,80023918 <__gdtoa+0x100c>
80023960:	00098313          	mv	t1,s3
80023964:	00912c23          	sw	s1,24(sp)
80023968:	000a8713          	mv	a4,s5
8002396c:	00000993          	li	s3,0
80023970:	03012603          	lw	a2,48(sp)
80023974:	4a060263          	beqz	a2,80023e18 <__gdtoa+0x150c>
80023978:	01812583          	lw	a1,24(sp)
8002397c:	00200793          	li	a5,2
80023980:	0105a683          	lw	a3,16(a1)
80023984:	4cf60c63          	beq	a2,a5,80023e5c <__gdtoa+0x1550>
80023988:	00100793          	li	a5,1
8002398c:	2ad7c063          	blt	a5,a3,80023c2c <__gdtoa+0x1320>
80023990:	0145a783          	lw	a5,20(a1)
80023994:	28079c63          	bnez	a5,80023c2c <__gdtoa+0x1320>
80023998:	00f037b3          	snez	a5,a5
8002399c:	00479c93          	slli	s9,a5,0x4
800239a0:	03000693          	li	a3,48
800239a4:	fffbc783          	lbu	a5,-1(s7)
800239a8:	000b8a93          	mv	s5,s7
800239ac:	fffb8b93          	addi	s7,s7,-1
800239b0:	fed78ae3          	beq	a5,a3,800239a4 <__gdtoa+0x1098>
800239b4:	e65ff06f          	j	80023818 <__gdtoa+0xf0c>
800239b8:	02412783          	lw	a5,36(sp)
800239bc:	03812603          	lw	a2,56(sp)
800239c0:	fff78693          	addi	a3,a5,-1
800239c4:	1ad64a63          	blt	a2,a3,80023b78 <__gdtoa+0x126c>
800239c8:	40d60c33          	sub	s8,a2,a3
800239cc:	0207d0e3          	bgez	a5,800241ec <__gdtoa+0x18e0>
800239d0:	02c12783          	lw	a5,44(sp)
800239d4:	02412683          	lw	a3,36(sp)
800239d8:	08012623          	sw	zero,140(sp)
800239dc:	40d78ab3          	sub	s5,a5,a3
800239e0:	b64ff06f          	j	80022d44 <__gdtoa+0x438>
800239e4:	00200793          	li	a5,2
800239e8:	c5a7d063          	bge	a5,s10,80022e28 <__gdtoa+0x51c>
800239ec:	00030593          	mv	a1,t1
800239f0:	00000693          	li	a3,0
800239f4:	00500613          	li	a2,5
800239f8:	00040513          	mv	a0,s0
800239fc:	00e12823          	sw	a4,16(sp)
80023a00:	060010ef          	jal	ra,80024a60 <__multadd>
80023a04:	00050593          	mv	a1,a0
80023a08:	f6050a63          	beqz	a0,8002317c <__gdtoa+0x870>
80023a0c:	02412783          	lw	a5,36(sp)
80023a10:	01012703          	lw	a4,16(sp)
80023a14:	14079863          	bnez	a5,80023b64 <__gdtoa+0x1258>
80023a18:	00a12823          	sw	a0,16(sp)
80023a1c:	01812503          	lw	a0,24(sp)
80023a20:	02e12023          	sw	a4,32(sp)
80023a24:	0a5010ef          	jal	ra,800252c8 <__mcmp>
80023a28:	01012583          	lw	a1,16(sp)
80023a2c:	02012703          	lw	a4,32(sp)
80023a30:	12a05a63          	blez	a0,80023b64 <__gdtoa+0x1258>
80023a34:	03c12783          	lw	a5,60(sp)
80023a38:	00278493          	addi	s1,a5,2
80023a3c:	03100793          	li	a5,49
80023a40:	00170a93          	addi	s5,a4,1
80023a44:	00f70023          	sb	a5,0(a4)
80023a48:	02000c93          	li	s9,32
80023a4c:	00040513          	mv	a0,s0
80023a50:	00e12823          	sw	a4,16(sp)
80023a54:	7e9000ef          	jal	ra,80024a3c <_Bfree>
80023a58:	01012703          	lw	a4,16(sp)
80023a5c:	ce0a02e3          	beqz	s4,80023740 <__gdtoa+0xe34>
80023a60:	df1ff06f          	j	80023850 <__gdtoa+0xf44>
80023a64:	00100693          	li	a3,1
80023a68:	00100593          	li	a1,1
80023a6c:	a24ff06f          	j	80022c90 <__gdtoa+0x384>
80023a70:	00050593          	mv	a1,a0
80023a74:	00078613          	mv	a2,a5
80023a78:	00040513          	mv	a0,s0
80023a7c:	56c010ef          	jal	ra,80024fe8 <__pow5mult>
80023a80:	00050313          	mv	t1,a0
80023a84:	ee050c63          	beqz	a0,8002317c <__gdtoa+0x870>
80023a88:	00100693          	li	a3,1
80023a8c:	02812703          	lw	a4,40(sp)
80023a90:	23a6d063          	bge	a3,s10,80023cb0 <__gdtoa+0x13a4>
80023a94:	01032783          	lw	a5,16(t1)
80023a98:	02e12423          	sw	a4,40(sp)
80023a9c:	00612823          	sw	t1,16(sp)
80023aa0:	00378793          	addi	a5,a5,3
80023aa4:	00279793          	slli	a5,a5,0x2
80023aa8:	00f307b3          	add	a5,t1,a5
80023aac:	0047a503          	lw	a0,4(a5)
80023ab0:	03912023          	sw	s9,32(sp)
80023ab4:	0f8010ef          	jal	ra,80024bac <__hi0bits>
80023ab8:	02812703          	lw	a4,40(sp)
80023abc:	01012303          	lw	t1,16(sp)
80023ac0:	00050913          	mv	s2,a0
80023ac4:	b2cff06f          	j	80022df0 <__gdtoa+0x4e4>
80023ac8:	00100693          	li	a3,1
80023acc:	efa6c6e3          	blt	a3,s10,800239b8 <__gdtoa+0x10ac>
80023ad0:	02c12783          	lw	a5,44(sp)
80023ad4:	03812c03          	lw	s8,56(sp)
80023ad8:	00cb8bb3          	add	s7,s7,a2
80023adc:	00078a93          	mv	s5,a5
80023ae0:	00f607b3          	add	a5,a2,a5
80023ae4:	02f12623          	sw	a5,44(sp)
80023ae8:	a5cff06f          	j	80022d44 <__gdtoa+0x438>
80023aec:	00200793          	li	a5,2
80023af0:	11a7c6e3          	blt	a5,s10,800243fc <__gdtoa+0x1af0>
80023af4:	05812783          	lw	a5,88(sp)
80023af8:	02f12223          	sw	a5,36(sp)
80023afc:	e01ff06f          	j	800238fc <__gdtoa+0xff0>
80023b00:	00100793          	li	a5,1
80023b04:	04f12023          	sw	a5,64(sp)
80023b08:	a95ff06f          	j	8002359c <__gdtoa+0xc90>
80023b0c:	01c12c83          	lw	s9,28(sp)
80023b10:	000a0713          	mv	a4,s4
80023b14:	c2dff06f          	j	80023740 <__gdtoa+0xe34>
80023b18:	02412783          	lw	a5,36(sp)
80023b1c:	acf044e3          	bgtz	a5,800235e4 <__gdtoa+0xcd8>
80023b20:	02079e63          	bnez	a5,80023b5c <__gdtoa+0x1250>
80023b24:	800297b7          	lui	a5,0x80029
80023b28:	0887a603          	lw	a2,136(a5) # 80029088 <__rt_init_end+0x90>
80023b2c:	08c7a683          	lw	a3,140(a5)
80023b30:	000d0513          	mv	a0,s10
80023b34:	000d8593          	mv	a1,s11
80023b38:	00e12823          	sw	a4,16(sp)
80023b3c:	9f0de0ef          	jal	ra,80001d2c <__muldf3>
80023b40:	05412883          	lw	a7,84(sp)
80023b44:	04812783          	lw	a5,72(sp)
80023b48:	00088613          	mv	a2,a7
80023b4c:	00078693          	mv	a3,a5
80023b50:	ffddd0ef          	jal	ra,80001b4c <__gedf2>
80023b54:	01012703          	lw	a4,16(sp)
80023b58:	6e054a63          	bltz	a0,8002424c <__gdtoa+0x1940>
80023b5c:	00000593          	li	a1,0
80023b60:	00000a13          	li	s4,0
80023b64:	01c12783          	lw	a5,28(sp)
80023b68:	00070a93          	mv	s5,a4
80023b6c:	01000c93          	li	s9,16
80023b70:	40f004b3          	neg	s1,a5
80023b74:	ed9ff06f          	j	80023a4c <__gdtoa+0x1140>
80023b78:	03812783          	lw	a5,56(sp)
80023b7c:	02c12583          	lw	a1,44(sp)
80023b80:	00000c13          	li	s8,0
80023b84:	40f68633          	sub	a2,a3,a5
80023b88:	02012783          	lw	a5,32(sp)
80023b8c:	00058a93          	mv	s5,a1
80023b90:	02d12c23          	sw	a3,56(sp)
80023b94:	00c787b3          	add	a5,a5,a2
80023b98:	02f12023          	sw	a5,32(sp)
80023b9c:	02412783          	lw	a5,36(sp)
80023ba0:	08f12623          	sw	a5,140(sp)
80023ba4:	00fb8bb3          	add	s7,s7,a5
80023ba8:	00f587b3          	add	a5,a1,a5
80023bac:	02f12623          	sw	a5,44(sp)
80023bb0:	994ff06f          	j	80022d44 <__gdtoa+0x438>
80023bb4:	000a0593          	mv	a1,s4
80023bb8:	000c0613          	mv	a2,s8
80023bbc:	00040513          	mv	a0,s0
80023bc0:	02e12423          	sw	a4,40(sp)
80023bc4:	424010ef          	jal	ra,80024fe8 <__pow5mult>
80023bc8:	00050a13          	mv	s4,a0
80023bcc:	da050863          	beqz	a0,8002317c <__gdtoa+0x870>
80023bd0:	01812603          	lw	a2,24(sp)
80023bd4:	00050593          	mv	a1,a0
80023bd8:	00040513          	mv	a0,s0
80023bdc:	1d8010ef          	jal	ra,80024db4 <__multiply>
80023be0:	00050493          	mv	s1,a0
80023be4:	d8050c63          	beqz	a0,8002317c <__gdtoa+0x870>
80023be8:	03812783          	lw	a5,56(sp)
80023bec:	01812583          	lw	a1,24(sp)
80023bf0:	00040513          	mv	a0,s0
80023bf4:	41878c33          	sub	s8,a5,s8
80023bf8:	03812c23          	sw	s8,56(sp)
80023bfc:	641000ef          	jal	ra,80024a3c <_Bfree>
80023c00:	00912c23          	sw	s1,24(sp)
80023c04:	02812703          	lw	a4,40(sp)
80023c08:	9a0c0c63          	beqz	s8,80022dc0 <__gdtoa+0x4b4>
80023c0c:	994ff06f          	j	80022da0 <__gdtoa+0x494>
80023c10:	000a0993          	mv	s3,s4
80023c14:	000b8793          	mv	a5,s7
80023c18:	001b8913          	addi	s2,s7,1
80023c1c:	000d8a13          	mv	s4,s11
80023c20:	03900693          	li	a3,57
80023c24:	00090b93          	mv	s7,s2
80023c28:	00d78023          	sb	a3,0(a5)
80023c2c:	03900693          	li	a3,57
80023c30:	0080006f          	j	80023c38 <__gdtoa+0x132c>
80023c34:	25770463          	beq	a4,s7,80023e7c <__gdtoa+0x1570>
80023c38:	fffbc783          	lbu	a5,-1(s7)
80023c3c:	000b8a93          	mv	s5,s7
80023c40:	fffb8b93          	addi	s7,s7,-1
80023c44:	fed788e3          	beq	a5,a3,80023c34 <__gdtoa+0x1328>
80023c48:	00178793          	addi	a5,a5,1
80023c4c:	00fb8023          	sb	a5,0(s7)
80023c50:	02000c93          	li	s9,32
80023c54:	bc5ff06f          	j	80023818 <__gdtoa+0xf0c>
80023c58:	000a0593          	mv	a1,s4
80023c5c:	00040513          	mv	a0,s0
80023c60:	00e12e23          	sw	a4,28(sp)
80023c64:	00612823          	sw	t1,16(sp)
80023c68:	4d0010ef          	jal	ra,80025138 <__lshift>
80023c6c:	01012303          	lw	t1,16(sp)
80023c70:	01c12703          	lw	a4,28(sp)
80023c74:	00050a13          	mv	s4,a0
80023c78:	9c051063          	bnez	a0,80022e38 <__gdtoa+0x52c>
80023c7c:	00000713          	li	a4,0
80023c80:	c80ff06f          	j	80023100 <__gdtoa+0x7f4>
80023c84:	00100793          	li	a5,1
80023c88:	00000a13          	li	s4,0
80023c8c:	04f12023          	sw	a5,64(sp)
80023c90:	90dff06f          	j	8002359c <__gdtoa+0xc90>
80023c94:	00100793          	li	a5,1
80023c98:	00000a13          	li	s4,0
80023c9c:	04f12023          	sw	a5,64(sp)
80023ca0:	fd5fe06f          	j	80022c74 <__gdtoa+0x368>
80023ca4:	00100793          	li	a5,1
80023ca8:	04f12023          	sw	a5,64(sp)
80023cac:	fc9fe06f          	j	80022c74 <__gdtoa+0x368>
80023cb0:	dedd92e3          	bne	s11,a3,80023a94 <__gdtoa+0x1188>
80023cb4:	00492783          	lw	a5,4(s2)
80023cb8:	01012683          	lw	a3,16(sp)
80023cbc:	00178793          	addi	a5,a5,1
80023cc0:	dcd7dae3          	bge	a5,a3,80023a94 <__gdtoa+0x1188>
80023cc4:	02c12783          	lw	a5,44(sp)
80023cc8:	001b8b93          	addi	s7,s7,1
80023ccc:	00100c93          	li	s9,1
80023cd0:	00178793          	addi	a5,a5,1
80023cd4:	02f12623          	sw	a5,44(sp)
80023cd8:	dbdff06f          	j	80023a94 <__gdtoa+0x1188>
80023cdc:	004a2583          	lw	a1,4(s4)
80023ce0:	00040513          	mv	a0,s0
80023ce4:	00e12e23          	sw	a4,28(sp)
80023ce8:	00612823          	sw	t1,16(sp)
80023cec:	4a9000ef          	jal	ra,80024994 <_Balloc>
80023cf0:	00050913          	mv	s2,a0
80023cf4:	c8050463          	beqz	a0,8002317c <__gdtoa+0x870>
80023cf8:	010a2603          	lw	a2,16(s4)
80023cfc:	00ca0593          	addi	a1,s4,12
80023d00:	00c50513          	addi	a0,a0,12
80023d04:	00260613          	addi	a2,a2,2
80023d08:	00261613          	slli	a2,a2,0x2
80023d0c:	d40fe0ef          	jal	ra,8002224c <memcpy>
80023d10:	00100613          	li	a2,1
80023d14:	00090593          	mv	a1,s2
80023d18:	00040513          	mv	a0,s0
80023d1c:	41c010ef          	jal	ra,80025138 <__lshift>
80023d20:	01012303          	lw	t1,16(sp)
80023d24:	01c12703          	lw	a4,28(sp)
80023d28:	00050d93          	mv	s11,a0
80023d2c:	00050463          	beqz	a0,80023d34 <__gdtoa+0x1428>
80023d30:	914ff06f          	j	80022e44 <__gdtoa+0x538>
80023d34:	00000713          	li	a4,0
80023d38:	bc8ff06f          	j	80023100 <__gdtoa+0x7f4>
80023d3c:	000a0693          	mv	a3,s4
80023d40:	00048613          	mv	a2,s1
80023d44:	000a0593          	mv	a1,s4
80023d48:	00048513          	mv	a0,s1
80023d4c:	02e12823          	sw	a4,48(sp)
80023d50:	f11dc0ef          	jal	ra,80000c60 <__adddf3>
80023d54:	800296b7          	lui	a3,0x80029
80023d58:	0806a603          	lw	a2,128(a3) # 80029080 <__rt_init_end+0x88>
80023d5c:	0846a683          	lw	a3,132(a3)
80023d60:	f01dc0ef          	jal	ra,80000c60 <__adddf3>
80023d64:	03012703          	lw	a4,48(sp)
80023d68:	fcc008b7          	lui	a7,0xfcc00
80023d6c:	00050a13          	mv	s4,a0
80023d70:	00b888b3          	add	a7,a7,a1
80023d74:	800296b7          	lui	a3,0x80029
80023d78:	0886a603          	lw	a2,136(a3) # 80029088 <__rt_init_end+0x90>
80023d7c:	04412503          	lw	a0,68(sp)
80023d80:	08c6a683          	lw	a3,140(a3)
80023d84:	05c12583          	lw	a1,92(sp)
80023d88:	02e12823          	sw	a4,48(sp)
80023d8c:	05112423          	sw	a7,72(sp)
80023d90:	d8cde0ef          	jal	ra,8000231c <__subdf3>
80023d94:	04812883          	lw	a7,72(sp)
80023d98:	000a0613          	mv	a2,s4
80023d9c:	00050493          	mv	s1,a0
80023da0:	00088693          	mv	a3,a7
80023da4:	00058a93          	mv	s5,a1
80023da8:	da5dd0ef          	jal	ra,80001b4c <__gedf2>
80023dac:	03012703          	lw	a4,48(sp)
80023db0:	44a04c63          	bgtz	a0,80024208 <__gdtoa+0x18fc>
80023db4:	04812883          	lw	a7,72(sp)
80023db8:	800006b7          	lui	a3,0x80000
80023dbc:	00048513          	mv	a0,s1
80023dc0:	0116c8b3          	xor	a7,a3,a7
80023dc4:	000a0613          	mv	a2,s4
80023dc8:	00088693          	mv	a3,a7
80023dcc:	000a8593          	mv	a1,s5
80023dd0:	e6ddd0ef          	jal	ra,80001c3c <__ledf2>
80023dd4:	03012703          	lw	a4,48(sp)
80023dd8:	d80542e3          	bltz	a0,80023b5c <__gdtoa+0x1250>
80023ddc:	04412783          	lw	a5,68(sp)
80023de0:	80029337          	lui	t1,0x80029
80023de4:	04f12a23          	sw	a5,84(sp)
80023de8:	05c12783          	lw	a5,92(sp)
80023dec:	04f12423          	sw	a5,72(sp)
80023df0:	02812783          	lw	a5,40(sp)
80023df4:	4e07ce63          	bltz	a5,800242f0 <__gdtoa+0x19e4>
80023df8:	01c12783          	lw	a5,28(sp)
80023dfc:	02012823          	sw	zero,48(sp)
80023e00:	d4832d03          	lw	s10,-696(t1) # 80028d48 <__mprec_tens>
80023e04:	d4c32d83          	lw	s11,-692(t1)
80023e08:	fc07de63          	bgez	a5,800235e4 <__gdtoa+0xcd8>
80023e0c:	02412783          	lw	a5,36(sp)
80023e10:	fc079a63          	bnez	a5,800235e4 <__gdtoa+0xcd8>
80023e14:	d11ff06f          	j	80023b24 <__gdtoa+0x1218>
80023e18:	01812583          	lw	a1,24(sp)
80023e1c:	00100613          	li	a2,1
80023e20:	00040513          	mv	a0,s0
80023e24:	00e12e23          	sw	a4,28(sp)
80023e28:	00612823          	sw	t1,16(sp)
80023e2c:	30c010ef          	jal	ra,80025138 <__lshift>
80023e30:	00a12c23          	sw	a0,24(sp)
80023e34:	b4050463          	beqz	a0,8002317c <__gdtoa+0x870>
80023e38:	01012303          	lw	t1,16(sp)
80023e3c:	00030593          	mv	a1,t1
80023e40:	488010ef          	jal	ra,800252c8 <__mcmp>
80023e44:	01012303          	lw	t1,16(sp)
80023e48:	01c12703          	lw	a4,28(sp)
80023e4c:	dea040e3          	bgtz	a0,80023c2c <__gdtoa+0x1320>
80023e50:	00051663          	bnez	a0,80023e5c <__gdtoa+0x1550>
80023e54:	001c7c13          	andi	s8,s8,1
80023e58:	dc0c1ae3          	bnez	s8,80023c2c <__gdtoa+0x1320>
80023e5c:	01812783          	lw	a5,24(sp)
80023e60:	01000c93          	li	s9,16
80023e64:	0107a683          	lw	a3,16(a5)
80023e68:	00100793          	li	a5,1
80023e6c:	b2d7cae3          	blt	a5,a3,800239a0 <__gdtoa+0x1094>
80023e70:	01812783          	lw	a5,24(sp)
80023e74:	0147a783          	lw	a5,20(a5)
80023e78:	b21ff06f          	j	80023998 <__gdtoa+0x108c>
80023e7c:	03c12783          	lw	a5,60(sp)
80023e80:	02000c93          	li	s9,32
80023e84:	00178793          	addi	a5,a5,1
80023e88:	02f12e23          	sw	a5,60(sp)
80023e8c:	03100793          	li	a5,49
80023e90:	00f70023          	sb	a5,0(a4)
80023e94:	985ff06f          	j	80023818 <__gdtoa+0xf0c>
80023e98:	03012783          	lw	a5,48(sp)
80023e9c:	01612c23          	sw	s6,24(sp)
80023ea0:	01c12703          	lw	a4,28(sp)
80023ea4:	02012b03          	lw	s6,32(sp)
80023ea8:	000c8313          	mv	t1,s9
80023eac:	02078263          	beqz	a5,80023ed0 <__gdtoa+0x15c4>
80023eb0:	01812603          	lw	a2,24(sp)
80023eb4:	00100793          	li	a5,1
80023eb8:	01062683          	lw	a3,16(a2)
80023ebc:	00d7d463          	bge	a5,a3,80023ec4 <__gdtoa+0x15b8>
80023ec0:	914ff06f          	j	80022fd4 <__gdtoa+0x6c8>
80023ec4:	01462783          	lw	a5,20(a2)
80023ec8:	00078463          	beqz	a5,80023ed0 <__gdtoa+0x15c4>
80023ecc:	908ff06f          	j	80022fd4 <__gdtoa+0x6c8>
80023ed0:	01812583          	lw	a1,24(sp)
80023ed4:	00100613          	li	a2,1
80023ed8:	00040513          	mv	a0,s0
80023edc:	00e12e23          	sw	a4,28(sp)
80023ee0:	00612823          	sw	t1,16(sp)
80023ee4:	254010ef          	jal	ra,80025138 <__lshift>
80023ee8:	00a12c23          	sw	a0,24(sp)
80023eec:	a8050863          	beqz	a0,8002317c <__gdtoa+0x870>
80023ef0:	01012303          	lw	t1,16(sp)
80023ef4:	00030593          	mv	a1,t1
80023ef8:	3d0010ef          	jal	ra,800252c8 <__mcmp>
80023efc:	01012303          	lw	t1,16(sp)
80023f00:	01c12703          	lw	a4,28(sp)
80023f04:	4ca05663          	blez	a0,800243d0 <__gdtoa+0x1ac4>
80023f08:	03900793          	li	a5,57
80023f0c:	d0fc02e3          	beq	s8,a5,80023c10 <__gdtoa+0x1304>
80023f10:	02000793          	li	a5,32
80023f14:	031a8c13          	addi	s8,s5,49
80023f18:	02f12823          	sw	a5,48(sp)
80023f1c:	8d5ff06f          	j	800237f0 <__gdtoa+0xee4>
80023f20:	000c0613          	mv	a2,s8
80023f24:	000c8693          	mv	a3,s9
80023f28:	00e12823          	sw	a4,16(sp)
80023f2c:	d35dc0ef          	jal	ra,80000c60 <__adddf3>
80023f30:	000d0613          	mv	a2,s10
80023f34:	000d8693          	mv	a3,s11
80023f38:	00050493          	mv	s1,a0
80023f3c:	00058993          	mv	s3,a1
80023f40:	c0ddd0ef          	jal	ra,80001b4c <__gedf2>
80023f44:	01012703          	lw	a4,16(sp)
80023f48:	fffacc03          	lbu	s8,-1(s5)
80023f4c:	daa04a63          	bgtz	a0,80023500 <__gdtoa+0xbf4>
80023f50:	00048513          	mv	a0,s1
80023f54:	00098593          	mv	a1,s3
80023f58:	000d0613          	mv	a2,s10
80023f5c:	000d8693          	mv	a3,s11
80023f60:	b61dd0ef          	jal	ra,80001ac0 <__eqdf2>
80023f64:	01012703          	lw	a4,16(sp)
80023f68:	00051663          	bnez	a0,80023f74 <__gdtoa+0x1668>
80023f6c:	00197913          	andi	s2,s2,1
80023f70:	d8091863          	bnez	s2,80023500 <__gdtoa+0xbf4>
80023f74:	000a8793          	mv	a5,s5
80023f78:	01000c93          	li	s9,16
80023f7c:	03000613          	li	a2,48
80023f80:	fff7c683          	lbu	a3,-1(a5)
80023f84:	00078a93          	mv	s5,a5
80023f88:	fff78793          	addi	a5,a5,-1
80023f8c:	fec68ae3          	beq	a3,a2,80023f80 <__gdtoa+0x1674>
80023f90:	000a0493          	mv	s1,s4
80023f94:	facff06f          	j	80023740 <__gdtoa+0xe34>
80023f98:	03100693          	li	a3,49
80023f9c:	001a0a13          	addi	s4,s4,1
80023fa0:	d84ff06f          	j	80023524 <__gdtoa+0xc18>
80023fa4:	000a0513          	mv	a0,s4
80023fa8:	00088593          	mv	a1,a7
80023fac:	06612e23          	sw	t1,124(sp)
80023fb0:	06e12823          	sw	a4,112(sp)
80023fb4:	d79dd0ef          	jal	ra,80001d2c <__muldf3>
80023fb8:	800296b7          	lui	a3,0x80029
80023fbc:	05412603          	lw	a2,84(sp)
80023fc0:	0706a783          	lw	a5,112(a3) # 80029070 <__rt_init_end+0x78>
80023fc4:	0746a803          	lw	a6,116(a3)
80023fc8:	07012703          	lw	a4,112(sp)
80023fcc:	04812683          	lw	a3,72(sp)
80023fd0:	07c12303          	lw	t1,124(sp)
80023fd4:	06b12623          	sw	a1,108(sp)
80023fd8:	00100593          	li	a1,1
80023fdc:	06812a23          	sw	s0,116(sp)
80023fe0:	07312c23          	sw	s3,120(sp)
80023fe4:	06012403          	lw	s0,96(sp)
80023fe8:	02f12823          	sw	a5,48(sp)
80023fec:	07212023          	sw	s2,96(sp)
80023ff0:	03012a23          	sw	a6,52(sp)
80023ff4:	06a12423          	sw	a0,104(sp)
80023ff8:	08b12623          	sw	a1,140(sp)
80023ffc:	04c12423          	sw	a2,72(sp)
80024000:	04d12a23          	sw	a3,84(sp)
80024004:	00070a93          	mv	s5,a4
80024008:	00000493          	li	s1,0
8002400c:	00030c13          	mv	s8,t1
80024010:	00060913          	mv	s2,a2
80024014:	00068993          	mv	s3,a3
80024018:	0180006f          	j	80024030 <__gdtoa+0x1724>
8002401c:	08612623          	sw	t1,140(sp)
80024020:	d0ddd0ef          	jal	ra,80001d2c <__muldf3>
80024024:	00050913          	mv	s2,a0
80024028:	00058993          	mv	s3,a1
8002402c:	00100493          	li	s1,1
80024030:	00090513          	mv	a0,s2
80024034:	00098593          	mv	a1,s3
80024038:	a7dde0ef          	jal	ra,80002ab4 <__fixdfsi>
8002403c:	001a8a93          	addi	s5,s5,1
80024040:	00050a13          	mv	s4,a0
80024044:	02050463          	beqz	a0,8002406c <__gdtoa+0x1760>
80024048:	aedde0ef          	jal	ra,80002b34 <__floatsidf>
8002404c:	00050613          	mv	a2,a0
80024050:	00058693          	mv	a3,a1
80024054:	00090513          	mv	a0,s2
80024058:	00098593          	mv	a1,s3
8002405c:	ac0de0ef          	jal	ra,8000231c <__subdf3>
80024060:	00050913          	mv	s2,a0
80024064:	00058993          	mv	s3,a1
80024068:	00100493          	li	s1,1
8002406c:	030a0713          	addi	a4,s4,48
80024070:	0ff77713          	zext.b	a4,a4
80024074:	feea8fa3          	sb	a4,-1(s5)
80024078:	08c12883          	lw	a7,140(sp)
8002407c:	03012603          	lw	a2,48(sp)
80024080:	03412683          	lw	a3,52(sp)
80024084:	00090513          	mv	a0,s2
80024088:	00098593          	mv	a1,s3
8002408c:	00188313          	addi	t1,a7,1 # fcc00001 <__bss_end+0x7cb79845>
80024090:	f88896e3          	bne	a7,s0,8002401c <__gdtoa+0x1710>
80024094:	000c0313          	mv	t1,s8
80024098:	07412403          	lw	s0,116(sp)
8002409c:	00070c13          	mv	s8,a4
800240a0:	06012903          	lw	s2,96(sp)
800240a4:	07012703          	lw	a4,112(sp)
800240a8:	07812983          	lw	s3,120(sp)
800240ac:	00048663          	beqz	s1,800240b8 <__gdtoa+0x17ac>
800240b0:	04a12423          	sw	a0,72(sp)
800240b4:	04b12a23          	sw	a1,84(sp)
800240b8:	80029a37          	lui	s4,0x80029
800240bc:	090a2603          	lw	a2,144(s4) # 80029090 <__rt_init_end+0x98>
800240c0:	094a2683          	lw	a3,148(s4)
800240c4:	06812503          	lw	a0,104(sp)
800240c8:	06c12583          	lw	a1,108(sp)
800240cc:	02e12823          	sw	a4,48(sp)
800240d0:	06612023          	sw	t1,96(sp)
800240d4:	b8ddc0ef          	jal	ra,80000c60 <__adddf3>
800240d8:	05412483          	lw	s1,84(sp)
800240dc:	04812603          	lw	a2,72(sp)
800240e0:	00048693          	mv	a3,s1
800240e4:	b59dd0ef          	jal	ra,80001c3c <__ledf2>
800240e8:	03012703          	lw	a4,48(sp)
800240ec:	1e054c63          	bltz	a0,800242e4 <__gdtoa+0x19d8>
800240f0:	06812603          	lw	a2,104(sp)
800240f4:	06c12683          	lw	a3,108(sp)
800240f8:	090a2503          	lw	a0,144(s4)
800240fc:	094a2583          	lw	a1,148(s4)
80024100:	a1cde0ef          	jal	ra,8000231c <__subdf3>
80024104:	04812603          	lw	a2,72(sp)
80024108:	00048693          	mv	a3,s1
8002410c:	a41dd0ef          	jal	ra,80001b4c <__gedf2>
80024110:	03012703          	lw	a4,48(sp)
80024114:	06012303          	lw	t1,96(sp)
80024118:	24a04463          	bgtz	a0,80024360 <__gdtoa+0x1a54>
8002411c:	04412783          	lw	a5,68(sp)
80024120:	04f12a23          	sw	a5,84(sp)
80024124:	05c12783          	lw	a5,92(sp)
80024128:	04f12423          	sw	a5,72(sp)
8002412c:	02812783          	lw	a5,40(sp)
80024130:	cc07d4e3          	bgez	a5,80023df8 <__gdtoa+0x14ec>
80024134:	03812c03          	lw	s8,56(sp)
80024138:	02c12a83          	lw	s5,44(sp)
8002413c:	02012823          	sw	zero,48(sp)
80024140:	00000a13          	li	s4,0
80024144:	c1dfe06f          	j	80022d60 <__gdtoa+0x454>
80024148:	01612c23          	sw	s6,24(sp)
8002414c:	000a0993          	mv	s3,s4
80024150:	01c12703          	lw	a4,28(sp)
80024154:	02012b03          	lw	s6,32(sp)
80024158:	000c8313          	mv	t1,s9
8002415c:	000d8a13          	mv	s4,s11
80024160:	811ff06f          	j	80023970 <__gdtoa+0x1064>
80024164:	bc0a8ce3          	beqz	s5,80023d3c <__gdtoa+0x1430>
80024168:	05812a83          	lw	s5,88(sp)
8002416c:	c75058e3          	blez	s5,80023ddc <__gdtoa+0x14d0>
80024170:	800296b7          	lui	a3,0x80029
80024174:	0706a603          	lw	a2,112(a3) # 80029070 <__rt_init_end+0x78>
80024178:	0746a683          	lw	a3,116(a3)
8002417c:	00048513          	mv	a0,s1
80024180:	000a0593          	mv	a1,s4
80024184:	06e12623          	sw	a4,108(sp)
80024188:	ba5dd0ef          	jal	ra,80001d2c <__muldf3>
8002418c:	800296b7          	lui	a3,0x80029
80024190:	0786a603          	lw	a2,120(a3) # 80029078 <__rt_init_end+0x80>
80024194:	07c6a683          	lw	a3,124(a3)
80024198:	00058a13          	mv	s4,a1
8002419c:	00050493          	mv	s1,a0
800241a0:	02a12823          	sw	a0,48(sp)
800241a4:	06b12423          	sw	a1,104(sp)
800241a8:	b85dd0ef          	jal	ra,80001d2c <__muldf3>
800241ac:	800296b7          	lui	a3,0x80029
800241b0:	0806a603          	lw	a2,128(a3) # 80029080 <__rt_init_end+0x88>
800241b4:	0846a683          	lw	a3,132(a3)
800241b8:	05412423          	sw	s4,72(sp)
800241bc:	04912a23          	sw	s1,84(sp)
800241c0:	aa1dc0ef          	jal	ra,80000c60 <__adddf3>
800241c4:	fcc008b7          	lui	a7,0xfcc00
800241c8:	fff00793          	li	a5,-1
800241cc:	06c12703          	lw	a4,108(sp)
800241d0:	00050a13          	mv	s4,a0
800241d4:	00b888b3          	add	a7,a7,a1
800241d8:	07512023          	sw	s5,96(sp)
800241dc:	06f12223          	sw	a5,100(sp)
800241e0:	930ff06f          	j	80023310 <__gdtoa+0xa04>
800241e4:	fffacc03          	lbu	s8,-1(s5)
800241e8:	b18ff06f          	j	80023500 <__gdtoa+0xbf4>
800241ec:	02c12683          	lw	a3,44(sp)
800241f0:	08f12623          	sw	a5,140(sp)
800241f4:	00fb8bb3          	add	s7,s7,a5
800241f8:	00f687b3          	add	a5,a3,a5
800241fc:	00068a93          	mv	s5,a3
80024200:	02f12623          	sw	a5,44(sp)
80024204:	b41fe06f          	j	80022d44 <__gdtoa+0x438>
80024208:	00200493          	li	s1,2
8002420c:	00000593          	li	a1,0
80024210:	00000a13          	li	s4,0
80024214:	829ff06f          	j	80023a3c <__gdtoa+0x1130>
80024218:	01612c23          	sw	s6,24(sp)
8002421c:	03900793          	li	a5,57
80024220:	01c12703          	lw	a4,28(sp)
80024224:	02012b03          	lw	s6,32(sp)
80024228:	000c8313          	mv	t1,s9
8002422c:	9efc02e3          	beq	s8,a5,80023c10 <__gdtoa+0x1304>
80024230:	001c0c13          	addi	s8,s8,1
80024234:	000a0993          	mv	s3,s4
80024238:	001b8a93          	addi	s5,s7,1
8002423c:	018b8023          	sb	s8,0(s7)
80024240:	000d8a13          	mv	s4,s11
80024244:	02000c93          	li	s9,32
80024248:	dd0ff06f          	j	80023818 <__gdtoa+0xf0c>
8002424c:	03c12783          	lw	a5,60(sp)
80024250:	00000593          	li	a1,0
80024254:	00000a13          	li	s4,0
80024258:	00278493          	addi	s1,a5,2
8002425c:	fe0ff06f          	j	80023a3c <__gdtoa+0x1130>
80024260:	000a0593          	mv	a1,s4
80024264:	00000693          	li	a3,0
80024268:	00a00613          	li	a2,10
8002426c:	00040513          	mv	a0,s0
80024270:	7f0000ef          	jal	ra,80024a60 <__multadd>
80024274:	00050a13          	mv	s4,a0
80024278:	00051463          	bnez	a0,80024280 <__gdtoa+0x1974>
8002427c:	f01fe06f          	j	8002317c <__gdtoa+0x870>
80024280:	05812783          	lw	a5,88(sp)
80024284:	01012303          	lw	t1,16(sp)
80024288:	02412703          	lw	a4,36(sp)
8002428c:	00f05663          	blez	a5,80024298 <__gdtoa+0x198c>
80024290:	02f12223          	sw	a5,36(sp)
80024294:	b9dfe06f          	j	80022e30 <__gdtoa+0x524>
80024298:	00200793          	li	a5,2
8002429c:	17a7c063          	blt	a5,s10,800243fc <__gdtoa+0x1af0>
800242a0:	05812783          	lw	a5,88(sp)
800242a4:	02f12223          	sw	a5,36(sp)
800242a8:	b89fe06f          	j	80022e30 <__gdtoa+0x524>
800242ac:	05412703          	lw	a4,84(sp)
800242b0:	06012403          	lw	s0,96(sp)
800242b4:	00048513          	mv	a0,s1
800242b8:	000a0593          	mv	a1,s4
800242bc:	00000613          	li	a2,0
800242c0:	00000693          	li	a3,0
800242c4:	00e12823          	sw	a4,16(sp)
800242c8:	ff8dd0ef          	jal	ra,80001ac0 <__eqdf2>
800242cc:	00a037b3          	snez	a5,a0
800242d0:	00479c93          	slli	s9,a5,0x4
800242d4:	06412783          	lw	a5,100(sp)
800242d8:	01012703          	lw	a4,16(sp)
800242dc:	00178493          	addi	s1,a5,1
800242e0:	c60ff06f          	j	80023740 <__gdtoa+0xe34>
800242e4:	06412783          	lw	a5,100(sp)
800242e8:	00178a13          	addi	s4,a5,1
800242ec:	a14ff06f          	j	80023500 <__gdtoa+0xbf4>
800242f0:	02012823          	sw	zero,48(sp)
800242f4:	9e1fe06f          	j	80022cd4 <__gdtoa+0x3c8>
800242f8:	02412783          	lw	a5,36(sp)
800242fc:	03812603          	lw	a2,56(sp)
80024300:	fff78693          	addi	a3,a5,-1
80024304:	86d64ae3          	blt	a2,a3,80023b78 <__gdtoa+0x126c>
80024308:	02c12583          	lw	a1,44(sp)
8002430c:	00fb8bb3          	add	s7,s7,a5
80024310:	08f12623          	sw	a5,140(sp)
80024314:	00f587b3          	add	a5,a1,a5
80024318:	00058a93          	mv	s5,a1
8002431c:	40d60c33          	sub	s8,a2,a3
80024320:	02f12623          	sw	a5,44(sp)
80024324:	a21fe06f          	j	80022d44 <__gdtoa+0x438>
80024328:	04412783          	lw	a5,68(sp)
8002432c:	05412703          	lw	a4,84(sp)
80024330:	07012b83          	lw	s7,112(sp)
80024334:	04f12a23          	sw	a5,84(sp)
80024338:	05c12783          	lw	a5,92(sp)
8002433c:	07412c03          	lw	s8,116(sp)
80024340:	07812d83          	lw	s11,120(sp)
80024344:	04f12423          	sw	a5,72(sp)
80024348:	02812783          	lw	a5,40(sp)
8002434c:	06012403          	lw	s0,96(sp)
80024350:	07c12303          	lw	t1,124(sp)
80024354:	aa07d2e3          	bgez	a5,80023df8 <__gdtoa+0x14ec>
80024358:	02012823          	sw	zero,48(sp)
8002435c:	981fe06f          	j	80022cdc <__gdtoa+0x3d0>
80024360:	04812503          	lw	a0,72(sp)
80024364:	00048593          	mv	a1,s1
80024368:	00000613          	li	a2,0
8002436c:	00000693          	li	a3,0
80024370:	00e12823          	sw	a4,16(sp)
80024374:	f4cdd0ef          	jal	ra,80001ac0 <__eqdf2>
80024378:	06412703          	lw	a4,100(sp)
8002437c:	00a037b3          	snez	a5,a0
80024380:	00479c93          	slli	s9,a5,0x4
80024384:	00170a13          	addi	s4,a4,1
80024388:	000a8793          	mv	a5,s5
8002438c:	01012703          	lw	a4,16(sp)
80024390:	bedff06f          	j	80023f7c <__gdtoa+0x1670>
80024394:	01612c23          	sw	s6,24(sp)
80024398:	03900793          	li	a5,57
8002439c:	000b0613          	mv	a2,s6
800243a0:	01c12703          	lw	a4,28(sp)
800243a4:	02012b03          	lw	s6,32(sp)
800243a8:	000c8313          	mv	t1,s9
800243ac:	86fc02e3          	beq	s8,a5,80023c10 <__gdtoa+0x1304>
800243b0:	0b205c63          	blez	s2,80024468 <__gdtoa+0x1b5c>
800243b4:	031a8c13          	addi	s8,s5,49
800243b8:	02000c93          	li	s9,32
800243bc:	000a0993          	mv	s3,s4
800243c0:	001b8a93          	addi	s5,s7,1
800243c4:	018b8023          	sb	s8,0(s7)
800243c8:	000d8a13          	mv	s4,s11
800243cc:	c4cff06f          	j	80023818 <__gdtoa+0xf0c>
800243d0:	00051663          	bnez	a0,800243dc <__gdtoa+0x1ad0>
800243d4:	001c7793          	andi	a5,s8,1
800243d8:	b20798e3          	bnez	a5,80023f08 <__gdtoa+0x15fc>
800243dc:	02000793          	li	a5,32
800243e0:	02f12823          	sw	a5,48(sp)
800243e4:	c0cff06f          	j	800237f0 <__gdtoa+0xee4>
800243e8:	01812783          	lw	a5,24(sp)
800243ec:	0147a783          	lw	a5,20(a5)
800243f0:	c0079c63          	bnez	a5,80023808 <__gdtoa+0xefc>
800243f4:	03012c83          	lw	s9,48(sp)
800243f8:	c10ff06f          	j	80023808 <__gdtoa+0xefc>
800243fc:	05812783          	lw	a5,88(sp)
80024400:	02f12223          	sw	a5,36(sp)
80024404:	de8ff06f          	j	800239ec <__gdtoa+0x10e0>
80024408:	01312c23          	sw	s3,24(sp)
8002440c:	03900793          	li	a5,57
80024410:	000a8313          	mv	t1,s5
80024414:	000c8713          	mv	a4,s9
80024418:	00fc0e63          	beq	s8,a5,80024434 <__gdtoa+0x1b28>
8002441c:	001c0c13          	addi	s8,s8,1
80024420:	02000c93          	li	s9,32
80024424:	be4ff06f          	j	80023808 <__gdtoa+0xefc>
80024428:	01000c93          	li	s9,16
8002442c:	001b8913          	addi	s2,s7,1
80024430:	bd8ff06f          	j	80023808 <__gdtoa+0xefc>
80024434:	000a0993          	mv	s3,s4
80024438:	000b8793          	mv	a5,s7
8002443c:	000d8a13          	mv	s4,s11
80024440:	fe0ff06f          	j	80023c20 <__gdtoa+0x1314>
80024444:	01812603          	lw	a2,24(sp)
80024448:	00100793          	li	a5,1
8002444c:	01062683          	lw	a3,16(a2)
80024450:	00d7d463          	bge	a5,a3,80024458 <__gdtoa+0x1b4c>
80024454:	b81fe06f          	j	80022fd4 <__gdtoa+0x6c8>
80024458:	01462783          	lw	a5,20(a2)
8002445c:	001b8913          	addi	s2,s7,1
80024460:	ba078463          	beqz	a5,80023808 <__gdtoa+0xefc>
80024464:	b71fe06f          	j	80022fd4 <__gdtoa+0x6c8>
80024468:	01062683          	lw	a3,16(a2)
8002446c:	00100793          	li	a5,1
80024470:	01000c93          	li	s9,16
80024474:	f4d7c4e3          	blt	a5,a3,800243bc <__gdtoa+0x1ab0>
80024478:	01462783          	lw	a5,20(a2)
8002447c:	00f037b3          	snez	a5,a5
80024480:	00479c93          	slli	s9,a5,0x4
80024484:	f39ff06f          	j	800243bc <__gdtoa+0x1ab0>
80024488:	02094263          	bltz	s2,800244ac <__gdtoa+0x1ba0>
8002448c:	012d6933          	or	s2,s10,s2
80024490:	00091863          	bnez	s2,800244a0 <__gdtoa+0x1b94>
80024494:	0009a683          	lw	a3,0(s3)
80024498:	0016f693          	andi	a3,a3,1
8002449c:	00068863          	beqz	a3,800244ac <__gdtoa+0x1ba0>
800244a0:	00f04463          	bgtz	a5,800244a8 <__gdtoa+0x1b9c>
800244a4:	9f5fe06f          	j	80022e98 <__gdtoa+0x58c>
800244a8:	9e5fe06f          	j	80022e8c <__gdtoa+0x580>
800244ac:	03012683          	lw	a3,48(sp)
800244b0:	01612c23          	sw	s6,24(sp)
800244b4:	000b0593          	mv	a1,s6
800244b8:	01c12703          	lw	a4,28(sp)
800244bc:	02012b03          	lw	s6,32(sp)
800244c0:	000c8313          	mv	t1,s9
800244c4:	02068863          	beqz	a3,800244f4 <__gdtoa+0x1be8>
800244c8:	0105a603          	lw	a2,16(a1)
800244cc:	00100693          	li	a3,1
800244d0:	00c6d463          	bge	a3,a2,800244d8 <__gdtoa+0x1bcc>
800244d4:	b01fe06f          	j	80022fd4 <__gdtoa+0x6c8>
800244d8:	0145a683          	lw	a3,20(a1)
800244dc:	00068463          	beqz	a3,800244e4 <__gdtoa+0x1bd8>
800244e0:	af5fe06f          	j	80022fd4 <__gdtoa+0x6c8>
800244e4:	9ef046e3          	bgtz	a5,80023ed0 <__gdtoa+0x15c4>
800244e8:	00000c93          	li	s9,0
800244ec:	001b8913          	addi	s2,s7,1
800244f0:	b18ff06f          	j	80023808 <__gdtoa+0xefc>
800244f4:	aef05e63          	blez	a5,800237f0 <__gdtoa+0xee4>
800244f8:	9d9ff06f          	j	80023ed0 <__gdtoa+0x15c4>

800244fc <__rv_alloc_D2A>:
800244fc:	ff010113          	addi	sp,sp,-16
80024500:	00812423          	sw	s0,8(sp)
80024504:	00112623          	sw	ra,12(sp)
80024508:	01300793          	li	a5,19
8002450c:	00000413          	li	s0,0
80024510:	00b7fc63          	bgeu	a5,a1,80024528 <__rv_alloc_D2A+0x2c>
80024514:	00400793          	li	a5,4
80024518:	00179793          	slli	a5,a5,0x1
8002451c:	01078713          	addi	a4,a5,16
80024520:	00140413          	addi	s0,s0,1
80024524:	fee5fae3          	bgeu	a1,a4,80024518 <__rv_alloc_D2A+0x1c>
80024528:	00040593          	mv	a1,s0
8002452c:	468000ef          	jal	ra,80024994 <_Balloc>
80024530:	00050663          	beqz	a0,8002453c <__rv_alloc_D2A+0x40>
80024534:	00852023          	sw	s0,0(a0)
80024538:	00450513          	addi	a0,a0,4
8002453c:	00c12083          	lw	ra,12(sp)
80024540:	00812403          	lw	s0,8(sp)
80024544:	01010113          	addi	sp,sp,16
80024548:	00008067          	ret

8002454c <__nrv_alloc_D2A>:
8002454c:	ff010113          	addi	sp,sp,-16
80024550:	00812423          	sw	s0,8(sp)
80024554:	01212023          	sw	s2,0(sp)
80024558:	00112623          	sw	ra,12(sp)
8002455c:	00912223          	sw	s1,4(sp)
80024560:	01300793          	li	a5,19
80024564:	00058413          	mv	s0,a1
80024568:	00060913          	mv	s2,a2
8002456c:	06d7fe63          	bgeu	a5,a3,800245e8 <__nrv_alloc_D2A+0x9c>
80024570:	00400793          	li	a5,4
80024574:	00000493          	li	s1,0
80024578:	00179793          	slli	a5,a5,0x1
8002457c:	01078713          	addi	a4,a5,16
80024580:	00148493          	addi	s1,s1,1
80024584:	fee6fae3          	bgeu	a3,a4,80024578 <__nrv_alloc_D2A+0x2c>
80024588:	00048593          	mv	a1,s1
8002458c:	408000ef          	jal	ra,80024994 <_Balloc>
80024590:	00050793          	mv	a5,a0
80024594:	04050e63          	beqz	a0,800245f0 <__nrv_alloc_D2A+0xa4>
80024598:	00952023          	sw	s1,0(a0)
8002459c:	00044703          	lbu	a4,0(s0)
800245a0:	00450513          	addi	a0,a0,4
800245a4:	00140593          	addi	a1,s0,1
800245a8:	00e78223          	sb	a4,4(a5)
800245ac:	00050793          	mv	a5,a0
800245b0:	00070c63          	beqz	a4,800245c8 <__nrv_alloc_D2A+0x7c>
800245b4:	0005c703          	lbu	a4,0(a1)
800245b8:	00178793          	addi	a5,a5,1
800245bc:	00158593          	addi	a1,a1,1
800245c0:	00e78023          	sb	a4,0(a5)
800245c4:	fe0718e3          	bnez	a4,800245b4 <__nrv_alloc_D2A+0x68>
800245c8:	00090463          	beqz	s2,800245d0 <__nrv_alloc_D2A+0x84>
800245cc:	00f92023          	sw	a5,0(s2)
800245d0:	00c12083          	lw	ra,12(sp)
800245d4:	00812403          	lw	s0,8(sp)
800245d8:	00412483          	lw	s1,4(sp)
800245dc:	00012903          	lw	s2,0(sp)
800245e0:	01010113          	addi	sp,sp,16
800245e4:	00008067          	ret
800245e8:	00000493          	li	s1,0
800245ec:	f9dff06f          	j	80024588 <__nrv_alloc_D2A+0x3c>
800245f0:	00000513          	li	a0,0
800245f4:	fddff06f          	j	800245d0 <__nrv_alloc_D2A+0x84>

800245f8 <__quorem_D2A>:
800245f8:	fe010113          	addi	sp,sp,-32
800245fc:	00912a23          	sw	s1,20(sp)
80024600:	01052783          	lw	a5,16(a0)
80024604:	0105a483          	lw	s1,16(a1)
80024608:	00112e23          	sw	ra,28(sp)
8002460c:	00812c23          	sw	s0,24(sp)
80024610:	01212823          	sw	s2,16(sp)
80024614:	01312623          	sw	s3,12(sp)
80024618:	01412423          	sw	s4,8(sp)
8002461c:	01512223          	sw	s5,4(sp)
80024620:	1a97ce63          	blt	a5,s1,800247dc <__quorem_D2A+0x1e4>
80024624:	fff48493          	addi	s1,s1,-1
80024628:	00249313          	slli	t1,s1,0x2
8002462c:	01458413          	addi	s0,a1,20
80024630:	006409b3          	add	s3,s0,t1
80024634:	01450a13          	addi	s4,a0,20
80024638:	0009a783          	lw	a5,0(s3)
8002463c:	006a0333          	add	t1,s4,t1
80024640:	00032703          	lw	a4,0(t1)
80024644:	00178793          	addi	a5,a5,1
80024648:	00050a93          	mv	s5,a0
8002464c:	02f75933          	divu	s2,a4,a5
80024650:	0af76e63          	bltu	a4,a5,8002470c <__quorem_D2A+0x114>
80024654:	00010537          	lui	a0,0x10
80024658:	00040893          	mv	a7,s0
8002465c:	000a0813          	mv	a6,s4
80024660:	00000f13          	li	t5,0
80024664:	00000e93          	li	t4,0
80024668:	fff50513          	addi	a0,a0,-1 # ffff <__STACKSIZE__+0xbfff>
8002466c:	0008a783          	lw	a5,0(a7) # fcc00000 <__bss_end+0x7cb79844>
80024670:	00082603          	lw	a2,0(a6)
80024674:	00480813          	addi	a6,a6,4
80024678:	00a7f6b3          	and	a3,a5,a0
8002467c:	0107d793          	srli	a5,a5,0x10
80024680:	00a67733          	and	a4,a2,a0
80024684:	01065e13          	srli	t3,a2,0x10
80024688:	00488893          	addi	a7,a7,4
8002468c:	032686b3          	mul	a3,a3,s2
80024690:	032787b3          	mul	a5,a5,s2
80024694:	01e686b3          	add	a3,a3,t5
80024698:	00a6f633          	and	a2,a3,a0
8002469c:	40c70733          	sub	a4,a4,a2
800246a0:	41d70733          	sub	a4,a4,t4
800246a4:	0106d693          	srli	a3,a3,0x10
800246a8:	01075613          	srli	a2,a4,0x10
800246ac:	00167613          	andi	a2,a2,1
800246b0:	00a77733          	and	a4,a4,a0
800246b4:	00d787b3          	add	a5,a5,a3
800246b8:	00a7f6b3          	and	a3,a5,a0
800246bc:	00d60633          	add	a2,a2,a3
800246c0:	40ce06b3          	sub	a3,t3,a2
800246c4:	01069613          	slli	a2,a3,0x10
800246c8:	00e66733          	or	a4,a2,a4
800246cc:	0106d693          	srli	a3,a3,0x10
800246d0:	fee82e23          	sw	a4,-4(a6)
800246d4:	0107df13          	srli	t5,a5,0x10
800246d8:	0016fe93          	andi	t4,a3,1
800246dc:	f919f8e3          	bgeu	s3,a7,8002466c <__quorem_D2A+0x74>
800246e0:	00032783          	lw	a5,0(t1)
800246e4:	02079463          	bnez	a5,8002470c <__quorem_D2A+0x114>
800246e8:	ffc30313          	addi	t1,t1,-4
800246ec:	006a6863          	bltu	s4,t1,800246fc <__quorem_D2A+0x104>
800246f0:	0180006f          	j	80024708 <__quorem_D2A+0x110>
800246f4:	fff48493          	addi	s1,s1,-1
800246f8:	006a7863          	bgeu	s4,t1,80024708 <__quorem_D2A+0x110>
800246fc:	00032783          	lw	a5,0(t1)
80024700:	ffc30313          	addi	t1,t1,-4
80024704:	fe0788e3          	beqz	a5,800246f4 <__quorem_D2A+0xfc>
80024708:	009aa823          	sw	s1,16(s5)
8002470c:	000a8513          	mv	a0,s5
80024710:	3b9000ef          	jal	ra,800252c8 <__mcmp>
80024714:	0a054063          	bltz	a0,800247b4 <__quorem_D2A+0x1bc>
80024718:	00010537          	lui	a0,0x10
8002471c:	000a0593          	mv	a1,s4
80024720:	00000693          	li	a3,0
80024724:	fff50513          	addi	a0,a0,-1 # ffff <__STACKSIZE__+0xbfff>
80024728:	0005a783          	lw	a5,0(a1)
8002472c:	00042603          	lw	a2,0(s0)
80024730:	00458593          	addi	a1,a1,4
80024734:	00a7f733          	and	a4,a5,a0
80024738:	00a67833          	and	a6,a2,a0
8002473c:	41070733          	sub	a4,a4,a6
80024740:	40d70733          	sub	a4,a4,a3
80024744:	01075693          	srli	a3,a4,0x10
80024748:	0016f693          	andi	a3,a3,1
8002474c:	01065613          	srli	a2,a2,0x10
80024750:	00c686b3          	add	a3,a3,a2
80024754:	0107d793          	srli	a5,a5,0x10
80024758:	40d787b3          	sub	a5,a5,a3
8002475c:	01079693          	slli	a3,a5,0x10
80024760:	00a77733          	and	a4,a4,a0
80024764:	00e6e733          	or	a4,a3,a4
80024768:	0107d793          	srli	a5,a5,0x10
8002476c:	00440413          	addi	s0,s0,4
80024770:	fee5ae23          	sw	a4,-4(a1)
80024774:	0017f693          	andi	a3,a5,1
80024778:	fa89f8e3          	bgeu	s3,s0,80024728 <__quorem_D2A+0x130>
8002477c:	00249793          	slli	a5,s1,0x2
80024780:	00fa07b3          	add	a5,s4,a5
80024784:	0007a703          	lw	a4,0(a5)
80024788:	02071463          	bnez	a4,800247b0 <__quorem_D2A+0x1b8>
8002478c:	ffc78793          	addi	a5,a5,-4
80024790:	00fa6863          	bltu	s4,a5,800247a0 <__quorem_D2A+0x1a8>
80024794:	0180006f          	j	800247ac <__quorem_D2A+0x1b4>
80024798:	fff48493          	addi	s1,s1,-1
8002479c:	00fa7863          	bgeu	s4,a5,800247ac <__quorem_D2A+0x1b4>
800247a0:	0007a703          	lw	a4,0(a5)
800247a4:	ffc78793          	addi	a5,a5,-4
800247a8:	fe0708e3          	beqz	a4,80024798 <__quorem_D2A+0x1a0>
800247ac:	009aa823          	sw	s1,16(s5)
800247b0:	00190913          	addi	s2,s2,1
800247b4:	00090513          	mv	a0,s2
800247b8:	01c12083          	lw	ra,28(sp)
800247bc:	01812403          	lw	s0,24(sp)
800247c0:	01412483          	lw	s1,20(sp)
800247c4:	01012903          	lw	s2,16(sp)
800247c8:	00c12983          	lw	s3,12(sp)
800247cc:	00812a03          	lw	s4,8(sp)
800247d0:	00412a83          	lw	s5,4(sp)
800247d4:	02010113          	addi	sp,sp,32
800247d8:	00008067          	ret
800247dc:	00000513          	li	a0,0
800247e0:	fd9ff06f          	j	800247b8 <__quorem_D2A+0x1c0>

800247e4 <__rshift_D2A>:
800247e4:	01052803          	lw	a6,16(a0)
800247e8:	4055de13          	srai	t3,a1,0x5
800247ec:	010e4863          	blt	t3,a6,800247fc <__rshift_D2A+0x18>
800247f0:	00052823          	sw	zero,16(a0)
800247f4:	00052a23          	sw	zero,20(a0)
800247f8:	00008067          	ret
800247fc:	01450313          	addi	t1,a0,20
80024800:	00281613          	slli	a2,a6,0x2
80024804:	002e1793          	slli	a5,t3,0x2
80024808:	01f5f593          	andi	a1,a1,31
8002480c:	00c30633          	add	a2,t1,a2
80024810:	00f307b3          	add	a5,t1,a5
80024814:	06058263          	beqz	a1,80024878 <__rshift_D2A+0x94>
80024818:	0007a683          	lw	a3,0(a5)
8002481c:	02000e93          	li	t4,32
80024820:	00478793          	addi	a5,a5,4
80024824:	40be8eb3          	sub	t4,t4,a1
80024828:	00b6d6b3          	srl	a3,a3,a1
8002482c:	08c7f463          	bgeu	a5,a2,800248b4 <__rshift_D2A+0xd0>
80024830:	00030893          	mv	a7,t1
80024834:	0007a703          	lw	a4,0(a5)
80024838:	00488893          	addi	a7,a7,4
8002483c:	00478793          	addi	a5,a5,4
80024840:	01d71733          	sll	a4,a4,t4
80024844:	00d76733          	or	a4,a4,a3
80024848:	fee8ae23          	sw	a4,-4(a7)
8002484c:	ffc7a683          	lw	a3,-4(a5)
80024850:	00b6d6b3          	srl	a3,a3,a1
80024854:	fec7e0e3          	bltu	a5,a2,80024834 <__rshift_D2A+0x50>
80024858:	41c80833          	sub	a6,a6,t3
8002485c:	00281813          	slli	a6,a6,0x2
80024860:	ffc80813          	addi	a6,a6,-4
80024864:	01030833          	add	a6,t1,a6
80024868:	00d82023          	sw	a3,0(a6)
8002486c:	02068a63          	beqz	a3,800248a0 <__rshift_D2A+0xbc>
80024870:	00480813          	addi	a6,a6,4
80024874:	02c0006f          	j	800248a0 <__rshift_D2A+0xbc>
80024878:	00030713          	mv	a4,t1
8002487c:	f6c7fae3          	bgeu	a5,a2,800247f0 <__rshift_D2A+0xc>
80024880:	0007a683          	lw	a3,0(a5)
80024884:	00478793          	addi	a5,a5,4
80024888:	00470713          	addi	a4,a4,4
8002488c:	fed72e23          	sw	a3,-4(a4)
80024890:	fec7e8e3          	bltu	a5,a2,80024880 <__rshift_D2A+0x9c>
80024894:	41c80833          	sub	a6,a6,t3
80024898:	00281813          	slli	a6,a6,0x2
8002489c:	01030833          	add	a6,t1,a6
800248a0:	406807b3          	sub	a5,a6,t1
800248a4:	4027d793          	srai	a5,a5,0x2
800248a8:	00f52823          	sw	a5,16(a0)
800248ac:	f46804e3          	beq	a6,t1,800247f4 <__rshift_D2A+0x10>
800248b0:	00008067          	ret
800248b4:	00d52a23          	sw	a3,20(a0)
800248b8:	f2068ce3          	beqz	a3,800247f0 <__rshift_D2A+0xc>
800248bc:	00030813          	mv	a6,t1
800248c0:	00480813          	addi	a6,a6,4
800248c4:	fddff06f          	j	800248a0 <__rshift_D2A+0xbc>

800248c8 <__trailz_D2A>:
800248c8:	01052703          	lw	a4,16(a0)
800248cc:	fe010113          	addi	sp,sp,-32
800248d0:	01450513          	addi	a0,a0,20
800248d4:	00271713          	slli	a4,a4,0x2
800248d8:	00812c23          	sw	s0,24(sp)
800248dc:	00112e23          	sw	ra,28(sp)
800248e0:	00e50733          	add	a4,a0,a4
800248e4:	00000413          	li	s0,0
800248e8:	00e56a63          	bltu	a0,a4,800248fc <__trailz_D2A+0x34>
800248ec:	02c0006f          	j	80024918 <__trailz_D2A+0x50>
800248f0:	00450513          	addi	a0,a0,4
800248f4:	02040413          	addi	s0,s0,32
800248f8:	02e57063          	bgeu	a0,a4,80024918 <__trailz_D2A+0x50>
800248fc:	00052783          	lw	a5,0(a0)
80024900:	fe0788e3          	beqz	a5,800248f0 <__trailz_D2A+0x28>
80024904:	00e57a63          	bgeu	a0,a4,80024918 <__trailz_D2A+0x50>
80024908:	00c10513          	addi	a0,sp,12
8002490c:	00f12623          	sw	a5,12(sp)
80024910:	314000ef          	jal	ra,80024c24 <__lo0bits>
80024914:	00a40433          	add	s0,s0,a0
80024918:	01c12083          	lw	ra,28(sp)
8002491c:	00040513          	mv	a0,s0
80024920:	01812403          	lw	s0,24(sp)
80024924:	02010113          	addi	sp,sp,32
80024928:	00008067          	ret

8002492c <__ascii_mbtowc>:
8002492c:	02058063          	beqz	a1,8002494c <__ascii_mbtowc+0x20>
80024930:	04060263          	beqz	a2,80024974 <__ascii_mbtowc+0x48>
80024934:	04068863          	beqz	a3,80024984 <__ascii_mbtowc+0x58>
80024938:	00064783          	lbu	a5,0(a2)
8002493c:	00f5a023          	sw	a5,0(a1)
80024940:	00064503          	lbu	a0,0(a2)
80024944:	00a03533          	snez	a0,a0
80024948:	00008067          	ret
8002494c:	ff010113          	addi	sp,sp,-16
80024950:	00c10593          	addi	a1,sp,12
80024954:	02060463          	beqz	a2,8002497c <__ascii_mbtowc+0x50>
80024958:	02068a63          	beqz	a3,8002498c <__ascii_mbtowc+0x60>
8002495c:	00064783          	lbu	a5,0(a2)
80024960:	00f5a023          	sw	a5,0(a1)
80024964:	00064503          	lbu	a0,0(a2)
80024968:	00a03533          	snez	a0,a0
8002496c:	01010113          	addi	sp,sp,16
80024970:	00008067          	ret
80024974:	00000513          	li	a0,0
80024978:	00008067          	ret
8002497c:	00000513          	li	a0,0
80024980:	fedff06f          	j	8002496c <__ascii_mbtowc+0x40>
80024984:	ffe00513          	li	a0,-2
80024988:	00008067          	ret
8002498c:	ffe00513          	li	a0,-2
80024990:	fddff06f          	j	8002496c <__ascii_mbtowc+0x40>

80024994 <_Balloc>:
80024994:	04452783          	lw	a5,68(a0)
80024998:	ff010113          	addi	sp,sp,-16
8002499c:	00812423          	sw	s0,8(sp)
800249a0:	00912223          	sw	s1,4(sp)
800249a4:	00112623          	sw	ra,12(sp)
800249a8:	01212023          	sw	s2,0(sp)
800249ac:	00050413          	mv	s0,a0
800249b0:	00058493          	mv	s1,a1
800249b4:	02078e63          	beqz	a5,800249f0 <_Balloc+0x5c>
800249b8:	00249713          	slli	a4,s1,0x2
800249bc:	00e787b3          	add	a5,a5,a4
800249c0:	0007a503          	lw	a0,0(a5)
800249c4:	04050663          	beqz	a0,80024a10 <_Balloc+0x7c>
800249c8:	00052703          	lw	a4,0(a0)
800249cc:	00e7a023          	sw	a4,0(a5)
800249d0:	00052823          	sw	zero,16(a0)
800249d4:	00052623          	sw	zero,12(a0)
800249d8:	00c12083          	lw	ra,12(sp)
800249dc:	00812403          	lw	s0,8(sp)
800249e0:	00412483          	lw	s1,4(sp)
800249e4:	00012903          	lw	s2,0(sp)
800249e8:	01010113          	addi	sp,sp,16
800249ec:	00008067          	ret
800249f0:	02100613          	li	a2,33
800249f4:	00400593          	li	a1,4
800249f8:	ae1ec0ef          	jal	ra,800114d8 <_calloc_r>
800249fc:	04a42223          	sw	a0,68(s0)
80024a00:	00050793          	mv	a5,a0
80024a04:	fa051ae3          	bnez	a0,800249b8 <_Balloc+0x24>
80024a08:	00000513          	li	a0,0
80024a0c:	fcdff06f          	j	800249d8 <_Balloc+0x44>
80024a10:	00100913          	li	s2,1
80024a14:	00991933          	sll	s2,s2,s1
80024a18:	00590613          	addi	a2,s2,5
80024a1c:	00261613          	slli	a2,a2,0x2
80024a20:	00100593          	li	a1,1
80024a24:	00040513          	mv	a0,s0
80024a28:	ab1ec0ef          	jal	ra,800114d8 <_calloc_r>
80024a2c:	fc050ee3          	beqz	a0,80024a08 <_Balloc+0x74>
80024a30:	00952223          	sw	s1,4(a0)
80024a34:	01252423          	sw	s2,8(a0)
80024a38:	f99ff06f          	j	800249d0 <_Balloc+0x3c>

80024a3c <_Bfree>:
80024a3c:	02058063          	beqz	a1,80024a5c <_Bfree+0x20>
80024a40:	0045a703          	lw	a4,4(a1)
80024a44:	04452783          	lw	a5,68(a0)
80024a48:	00271713          	slli	a4,a4,0x2
80024a4c:	00e787b3          	add	a5,a5,a4
80024a50:	0007a703          	lw	a4,0(a5)
80024a54:	00e5a023          	sw	a4,0(a1)
80024a58:	00b7a023          	sw	a1,0(a5)
80024a5c:	00008067          	ret

80024a60 <__multadd>:
80024a60:	fe010113          	addi	sp,sp,-32
80024a64:	00912a23          	sw	s1,20(sp)
80024a68:	0105a483          	lw	s1,16(a1)
80024a6c:	00010337          	lui	t1,0x10
80024a70:	00812c23          	sw	s0,24(sp)
80024a74:	01212823          	sw	s2,16(sp)
80024a78:	01312623          	sw	s3,12(sp)
80024a7c:	00112e23          	sw	ra,28(sp)
80024a80:	01412423          	sw	s4,8(sp)
80024a84:	00058913          	mv	s2,a1
80024a88:	00050993          	mv	s3,a0
80024a8c:	00068413          	mv	s0,a3
80024a90:	01458813          	addi	a6,a1,20
80024a94:	00000893          	li	a7,0
80024a98:	fff30313          	addi	t1,t1,-1 # ffff <__STACKSIZE__+0xbfff>
80024a9c:	00082783          	lw	a5,0(a6)
80024aa0:	00480813          	addi	a6,a6,4
80024aa4:	00188893          	addi	a7,a7,1
80024aa8:	0067f733          	and	a4,a5,t1
80024aac:	02c70733          	mul	a4,a4,a2
80024ab0:	0107d693          	srli	a3,a5,0x10
80024ab4:	02c686b3          	mul	a3,a3,a2
80024ab8:	008707b3          	add	a5,a4,s0
80024abc:	0107d713          	srli	a4,a5,0x10
80024ac0:	0067f7b3          	and	a5,a5,t1
80024ac4:	00e686b3          	add	a3,a3,a4
80024ac8:	01069713          	slli	a4,a3,0x10
80024acc:	00f707b3          	add	a5,a4,a5
80024ad0:	fef82e23          	sw	a5,-4(a6)
80024ad4:	0106d413          	srli	s0,a3,0x10
80024ad8:	fc98c2e3          	blt	a7,s1,80024a9c <__multadd+0x3c>
80024adc:	02040263          	beqz	s0,80024b00 <__multadd+0xa0>
80024ae0:	00892783          	lw	a5,8(s2)
80024ae4:	04f4d063          	bge	s1,a5,80024b24 <__multadd+0xc4>
80024ae8:	00448793          	addi	a5,s1,4
80024aec:	00279793          	slli	a5,a5,0x2
80024af0:	00f907b3          	add	a5,s2,a5
80024af4:	0087a223          	sw	s0,4(a5)
80024af8:	00148493          	addi	s1,s1,1
80024afc:	00992823          	sw	s1,16(s2)
80024b00:	01c12083          	lw	ra,28(sp)
80024b04:	01812403          	lw	s0,24(sp)
80024b08:	01412483          	lw	s1,20(sp)
80024b0c:	00c12983          	lw	s3,12(sp)
80024b10:	00812a03          	lw	s4,8(sp)
80024b14:	00090513          	mv	a0,s2
80024b18:	01012903          	lw	s2,16(sp)
80024b1c:	02010113          	addi	sp,sp,32
80024b20:	00008067          	ret
80024b24:	00492583          	lw	a1,4(s2)
80024b28:	00098513          	mv	a0,s3
80024b2c:	00158593          	addi	a1,a1,1
80024b30:	e65ff0ef          	jal	ra,80024994 <_Balloc>
80024b34:	00050a13          	mv	s4,a0
80024b38:	04050c63          	beqz	a0,80024b90 <__multadd+0x130>
80024b3c:	01092603          	lw	a2,16(s2)
80024b40:	00c90593          	addi	a1,s2,12
80024b44:	00c50513          	addi	a0,a0,12
80024b48:	00260613          	addi	a2,a2,2
80024b4c:	00261613          	slli	a2,a2,0x2
80024b50:	efcfd0ef          	jal	ra,8002224c <memcpy>
80024b54:	00492703          	lw	a4,4(s2)
80024b58:	0449a783          	lw	a5,68(s3)
80024b5c:	00271713          	slli	a4,a4,0x2
80024b60:	00e787b3          	add	a5,a5,a4
80024b64:	0007a703          	lw	a4,0(a5)
80024b68:	00e92023          	sw	a4,0(s2)
80024b6c:	0127a023          	sw	s2,0(a5)
80024b70:	00448793          	addi	a5,s1,4
80024b74:	000a0913          	mv	s2,s4
80024b78:	00279793          	slli	a5,a5,0x2
80024b7c:	00f907b3          	add	a5,s2,a5
80024b80:	0087a223          	sw	s0,4(a5)
80024b84:	00148493          	addi	s1,s1,1
80024b88:	00992823          	sw	s1,16(s2)
80024b8c:	f75ff06f          	j	80024b00 <__multadd+0xa0>
80024b90:	800296b7          	lui	a3,0x80029
80024b94:	80029537          	lui	a0,0x80029
80024b98:	ce068693          	addi	a3,a3,-800 # 80028ce0 <blanks.1+0x4c>
80024b9c:	00000613          	li	a2,0
80024ba0:	0ba00593          	li	a1,186
80024ba4:	cf450513          	addi	a0,a0,-780 # 80028cf4 <blanks.1+0x60>
80024ba8:	795000ef          	jal	ra,80025b3c <__assert_func>

80024bac <__hi0bits>:
80024bac:	00050793          	mv	a5,a0
80024bb0:	00010737          	lui	a4,0x10
80024bb4:	00000513          	li	a0,0
80024bb8:	00e7f663          	bgeu	a5,a4,80024bc4 <__hi0bits+0x18>
80024bbc:	01079793          	slli	a5,a5,0x10
80024bc0:	01000513          	li	a0,16
80024bc4:	01000737          	lui	a4,0x1000
80024bc8:	00e7f663          	bgeu	a5,a4,80024bd4 <__hi0bits+0x28>
80024bcc:	00850513          	addi	a0,a0,8
80024bd0:	00879793          	slli	a5,a5,0x8
80024bd4:	10000737          	lui	a4,0x10000
80024bd8:	00e7f663          	bgeu	a5,a4,80024be4 <__hi0bits+0x38>
80024bdc:	00450513          	addi	a0,a0,4
80024be0:	00479793          	slli	a5,a5,0x4
80024be4:	40000737          	lui	a4,0x40000
80024be8:	00e7ea63          	bltu	a5,a4,80024bfc <__hi0bits+0x50>
80024bec:	fff7c793          	not	a5,a5
80024bf0:	01f7d793          	srli	a5,a5,0x1f
80024bf4:	00f50533          	add	a0,a0,a5
80024bf8:	00008067          	ret
80024bfc:	00279793          	slli	a5,a5,0x2
80024c00:	0007ca63          	bltz	a5,80024c14 <__hi0bits+0x68>
80024c04:	00179713          	slli	a4,a5,0x1
80024c08:	00074a63          	bltz	a4,80024c1c <__hi0bits+0x70>
80024c0c:	02000513          	li	a0,32
80024c10:	00008067          	ret
80024c14:	00250513          	addi	a0,a0,2
80024c18:	00008067          	ret
80024c1c:	00350513          	addi	a0,a0,3
80024c20:	00008067          	ret

80024c24 <__lo0bits>:
80024c24:	00052783          	lw	a5,0(a0)
80024c28:	00050713          	mv	a4,a0
80024c2c:	0077f693          	andi	a3,a5,7
80024c30:	02068463          	beqz	a3,80024c58 <__lo0bits+0x34>
80024c34:	0017f693          	andi	a3,a5,1
80024c38:	00000513          	li	a0,0
80024c3c:	04069e63          	bnez	a3,80024c98 <__lo0bits+0x74>
80024c40:	0027f693          	andi	a3,a5,2
80024c44:	0a068863          	beqz	a3,80024cf4 <__lo0bits+0xd0>
80024c48:	0017d793          	srli	a5,a5,0x1
80024c4c:	00f72023          	sw	a5,0(a4) # 40000000 <__STACKSIZE__+0x3fffc000>
80024c50:	00100513          	li	a0,1
80024c54:	00008067          	ret
80024c58:	01079693          	slli	a3,a5,0x10
80024c5c:	0106d693          	srli	a3,a3,0x10
80024c60:	00000513          	li	a0,0
80024c64:	06068e63          	beqz	a3,80024ce0 <__lo0bits+0xbc>
80024c68:	0ff7f693          	zext.b	a3,a5
80024c6c:	06068063          	beqz	a3,80024ccc <__lo0bits+0xa8>
80024c70:	00f7f693          	andi	a3,a5,15
80024c74:	04068263          	beqz	a3,80024cb8 <__lo0bits+0x94>
80024c78:	0037f693          	andi	a3,a5,3
80024c7c:	02068463          	beqz	a3,80024ca4 <__lo0bits+0x80>
80024c80:	0017f693          	andi	a3,a5,1
80024c84:	00069c63          	bnez	a3,80024c9c <__lo0bits+0x78>
80024c88:	0017d793          	srli	a5,a5,0x1
80024c8c:	00150513          	addi	a0,a0,1
80024c90:	00079663          	bnez	a5,80024c9c <__lo0bits+0x78>
80024c94:	02000513          	li	a0,32
80024c98:	00008067          	ret
80024c9c:	00f72023          	sw	a5,0(a4)
80024ca0:	00008067          	ret
80024ca4:	0027d793          	srli	a5,a5,0x2
80024ca8:	0017f693          	andi	a3,a5,1
80024cac:	00250513          	addi	a0,a0,2
80024cb0:	fe0696e3          	bnez	a3,80024c9c <__lo0bits+0x78>
80024cb4:	fd5ff06f          	j	80024c88 <__lo0bits+0x64>
80024cb8:	0047d793          	srli	a5,a5,0x4
80024cbc:	0037f693          	andi	a3,a5,3
80024cc0:	00450513          	addi	a0,a0,4
80024cc4:	fa069ee3          	bnez	a3,80024c80 <__lo0bits+0x5c>
80024cc8:	fddff06f          	j	80024ca4 <__lo0bits+0x80>
80024ccc:	0087d793          	srli	a5,a5,0x8
80024cd0:	00f7f693          	andi	a3,a5,15
80024cd4:	00850513          	addi	a0,a0,8
80024cd8:	fa0690e3          	bnez	a3,80024c78 <__lo0bits+0x54>
80024cdc:	fddff06f          	j	80024cb8 <__lo0bits+0x94>
80024ce0:	0107d793          	srli	a5,a5,0x10
80024ce4:	0ff7f693          	zext.b	a3,a5
80024ce8:	01000513          	li	a0,16
80024cec:	f80692e3          	bnez	a3,80024c70 <__lo0bits+0x4c>
80024cf0:	fddff06f          	j	80024ccc <__lo0bits+0xa8>
80024cf4:	0027d793          	srli	a5,a5,0x2
80024cf8:	00f72023          	sw	a5,0(a4)
80024cfc:	00200513          	li	a0,2
80024d00:	00008067          	ret

80024d04 <__i2b>:
80024d04:	04452783          	lw	a5,68(a0)
80024d08:	ff010113          	addi	sp,sp,-16
80024d0c:	00812423          	sw	s0,8(sp)
80024d10:	00912223          	sw	s1,4(sp)
80024d14:	00112623          	sw	ra,12(sp)
80024d18:	00050413          	mv	s0,a0
80024d1c:	00058493          	mv	s1,a1
80024d20:	02078c63          	beqz	a5,80024d58 <__i2b+0x54>
80024d24:	0047a503          	lw	a0,4(a5)
80024d28:	06050263          	beqz	a0,80024d8c <__i2b+0x88>
80024d2c:	00052703          	lw	a4,0(a0)
80024d30:	00e7a223          	sw	a4,4(a5)
80024d34:	00c12083          	lw	ra,12(sp)
80024d38:	00812403          	lw	s0,8(sp)
80024d3c:	00100793          	li	a5,1
80024d40:	00952a23          	sw	s1,20(a0)
80024d44:	00052623          	sw	zero,12(a0)
80024d48:	00f52823          	sw	a5,16(a0)
80024d4c:	00412483          	lw	s1,4(sp)
80024d50:	01010113          	addi	sp,sp,16
80024d54:	00008067          	ret
80024d58:	02100613          	li	a2,33
80024d5c:	00400593          	li	a1,4
80024d60:	f78ec0ef          	jal	ra,800114d8 <_calloc_r>
80024d64:	04a42223          	sw	a0,68(s0)
80024d68:	00050793          	mv	a5,a0
80024d6c:	fa051ce3          	bnez	a0,80024d24 <__i2b+0x20>
80024d70:	800296b7          	lui	a3,0x80029
80024d74:	80029537          	lui	a0,0x80029
80024d78:	ce068693          	addi	a3,a3,-800 # 80028ce0 <blanks.1+0x4c>
80024d7c:	00000613          	li	a2,0
80024d80:	14500593          	li	a1,325
80024d84:	cf450513          	addi	a0,a0,-780 # 80028cf4 <blanks.1+0x60>
80024d88:	5b5000ef          	jal	ra,80025b3c <__assert_func>
80024d8c:	01c00613          	li	a2,28
80024d90:	00100593          	li	a1,1
80024d94:	00040513          	mv	a0,s0
80024d98:	f40ec0ef          	jal	ra,800114d8 <_calloc_r>
80024d9c:	fc050ae3          	beqz	a0,80024d70 <__i2b+0x6c>
80024da0:	00100793          	li	a5,1
80024da4:	00f52223          	sw	a5,4(a0)
80024da8:	00200793          	li	a5,2
80024dac:	00f52423          	sw	a5,8(a0)
80024db0:	f85ff06f          	j	80024d34 <__i2b+0x30>

80024db4 <__multiply>:
80024db4:	fe010113          	addi	sp,sp,-32
80024db8:	01212823          	sw	s2,16(sp)
80024dbc:	01312623          	sw	s3,12(sp)
80024dc0:	0105a903          	lw	s2,16(a1)
80024dc4:	01062983          	lw	s3,16(a2)
80024dc8:	00912a23          	sw	s1,20(sp)
80024dcc:	01412423          	sw	s4,8(sp)
80024dd0:	00112e23          	sw	ra,28(sp)
80024dd4:	00812c23          	sw	s0,24(sp)
80024dd8:	00058a13          	mv	s4,a1
80024ddc:	00060493          	mv	s1,a2
80024de0:	01394c63          	blt	s2,s3,80024df8 <__multiply+0x44>
80024de4:	00098713          	mv	a4,s3
80024de8:	00058493          	mv	s1,a1
80024dec:	00090993          	mv	s3,s2
80024df0:	00060a13          	mv	s4,a2
80024df4:	00070913          	mv	s2,a4
80024df8:	0084a783          	lw	a5,8(s1)
80024dfc:	0044a583          	lw	a1,4(s1)
80024e00:	01298433          	add	s0,s3,s2
80024e04:	0087a7b3          	slt	a5,a5,s0
80024e08:	00f585b3          	add	a1,a1,a5
80024e0c:	b89ff0ef          	jal	ra,80024994 <_Balloc>
80024e10:	1a050e63          	beqz	a0,80024fcc <__multiply+0x218>
80024e14:	01450313          	addi	t1,a0,20
80024e18:	00241893          	slli	a7,s0,0x2
80024e1c:	011308b3          	add	a7,t1,a7
80024e20:	00030793          	mv	a5,t1
80024e24:	01137863          	bgeu	t1,a7,80024e34 <__multiply+0x80>
80024e28:	0007a023          	sw	zero,0(a5)
80024e2c:	00478793          	addi	a5,a5,4
80024e30:	ff17ece3          	bltu	a5,a7,80024e28 <__multiply+0x74>
80024e34:	014a0813          	addi	a6,s4,20
80024e38:	00291e13          	slli	t3,s2,0x2
80024e3c:	01448e93          	addi	t4,s1,20
80024e40:	00299593          	slli	a1,s3,0x2
80024e44:	01c80e33          	add	t3,a6,t3
80024e48:	00be85b3          	add	a1,t4,a1
80024e4c:	13c87663          	bgeu	a6,t3,80024f78 <__multiply+0x1c4>
80024e50:	01548793          	addi	a5,s1,21
80024e54:	00400f13          	li	t5,4
80024e58:	16f5f063          	bgeu	a1,a5,80024fb8 <__multiply+0x204>
80024e5c:	000106b7          	lui	a3,0x10
80024e60:	fff68693          	addi	a3,a3,-1 # ffff <__STACKSIZE__+0xbfff>
80024e64:	0180006f          	j	80024e7c <__multiply+0xc8>
80024e68:	010fdf93          	srli	t6,t6,0x10
80024e6c:	080f9863          	bnez	t6,80024efc <__multiply+0x148>
80024e70:	00480813          	addi	a6,a6,4
80024e74:	00430313          	addi	t1,t1,4
80024e78:	11c87063          	bgeu	a6,t3,80024f78 <__multiply+0x1c4>
80024e7c:	00082f83          	lw	t6,0(a6)
80024e80:	00dff3b3          	and	t2,t6,a3
80024e84:	fe0382e3          	beqz	t2,80024e68 <__multiply+0xb4>
80024e88:	00030293          	mv	t0,t1
80024e8c:	000e8f93          	mv	t6,t4
80024e90:	00000493          	li	s1,0
80024e94:	000fa783          	lw	a5,0(t6)
80024e98:	0002a603          	lw	a2,0(t0)
80024e9c:	00428293          	addi	t0,t0,4
80024ea0:	00d7f733          	and	a4,a5,a3
80024ea4:	02770733          	mul	a4,a4,t2
80024ea8:	0107d793          	srli	a5,a5,0x10
80024eac:	00d67933          	and	s2,a2,a3
80024eb0:	01065613          	srli	a2,a2,0x10
80024eb4:	004f8f93          	addi	t6,t6,4
80024eb8:	027787b3          	mul	a5,a5,t2
80024ebc:	01270733          	add	a4,a4,s2
80024ec0:	00970733          	add	a4,a4,s1
80024ec4:	01075493          	srli	s1,a4,0x10
80024ec8:	00d77733          	and	a4,a4,a3
80024ecc:	00c787b3          	add	a5,a5,a2
80024ed0:	009787b3          	add	a5,a5,s1
80024ed4:	01079613          	slli	a2,a5,0x10
80024ed8:	00e66733          	or	a4,a2,a4
80024edc:	fee2ae23          	sw	a4,-4(t0)
80024ee0:	0107d493          	srli	s1,a5,0x10
80024ee4:	fabfe8e3          	bltu	t6,a1,80024e94 <__multiply+0xe0>
80024ee8:	01e307b3          	add	a5,t1,t5
80024eec:	0097a023          	sw	s1,0(a5)
80024ef0:	00082f83          	lw	t6,0(a6)
80024ef4:	010fdf93          	srli	t6,t6,0x10
80024ef8:	f60f8ce3          	beqz	t6,80024e70 <__multiply+0xbc>
80024efc:	00032703          	lw	a4,0(t1)
80024f00:	00030293          	mv	t0,t1
80024f04:	000e8613          	mv	a2,t4
80024f08:	00070493          	mv	s1,a4
80024f0c:	00000393          	li	t2,0
80024f10:	00062783          	lw	a5,0(a2)
80024f14:	0104d993          	srli	s3,s1,0x10
80024f18:	00d77733          	and	a4,a4,a3
80024f1c:	00d7f7b3          	and	a5,a5,a3
80024f20:	03f787b3          	mul	a5,a5,t6
80024f24:	0042a483          	lw	s1,4(t0)
80024f28:	00428293          	addi	t0,t0,4
80024f2c:	00460613          	addi	a2,a2,4
80024f30:	00d4f933          	and	s2,s1,a3
80024f34:	007787b3          	add	a5,a5,t2
80024f38:	013787b3          	add	a5,a5,s3
80024f3c:	01079393          	slli	t2,a5,0x10
80024f40:	00e3e733          	or	a4,t2,a4
80024f44:	fee2ae23          	sw	a4,-4(t0)
80024f48:	ffe65703          	lhu	a4,-2(a2)
80024f4c:	0107d793          	srli	a5,a5,0x10
80024f50:	03f70733          	mul	a4,a4,t6
80024f54:	01270733          	add	a4,a4,s2
80024f58:	00f70733          	add	a4,a4,a5
80024f5c:	01075393          	srli	t2,a4,0x10
80024f60:	fab668e3          	bltu	a2,a1,80024f10 <__multiply+0x15c>
80024f64:	01e307b3          	add	a5,t1,t5
80024f68:	00e7a023          	sw	a4,0(a5)
80024f6c:	00480813          	addi	a6,a6,4
80024f70:	00430313          	addi	t1,t1,4
80024f74:	f1c864e3          	bltu	a6,t3,80024e7c <__multiply+0xc8>
80024f78:	00804863          	bgtz	s0,80024f88 <__multiply+0x1d4>
80024f7c:	0180006f          	j	80024f94 <__multiply+0x1e0>
80024f80:	fff40413          	addi	s0,s0,-1
80024f84:	00040863          	beqz	s0,80024f94 <__multiply+0x1e0>
80024f88:	ffc8a783          	lw	a5,-4(a7)
80024f8c:	ffc88893          	addi	a7,a7,-4
80024f90:	fe0788e3          	beqz	a5,80024f80 <__multiply+0x1cc>
80024f94:	01c12083          	lw	ra,28(sp)
80024f98:	00852823          	sw	s0,16(a0)
80024f9c:	01812403          	lw	s0,24(sp)
80024fa0:	01412483          	lw	s1,20(sp)
80024fa4:	01012903          	lw	s2,16(sp)
80024fa8:	00c12983          	lw	s3,12(sp)
80024fac:	00812a03          	lw	s4,8(sp)
80024fb0:	02010113          	addi	sp,sp,32
80024fb4:	00008067          	ret
80024fb8:	409587b3          	sub	a5,a1,s1
80024fbc:	feb78793          	addi	a5,a5,-21
80024fc0:	ffc7f793          	andi	a5,a5,-4
80024fc4:	00478f13          	addi	t5,a5,4
80024fc8:	e95ff06f          	j	80024e5c <__multiply+0xa8>
80024fcc:	800296b7          	lui	a3,0x80029
80024fd0:	80029537          	lui	a0,0x80029
80024fd4:	ce068693          	addi	a3,a3,-800 # 80028ce0 <blanks.1+0x4c>
80024fd8:	00000613          	li	a2,0
80024fdc:	16200593          	li	a1,354
80024fe0:	cf450513          	addi	a0,a0,-780 # 80028cf4 <blanks.1+0x60>
80024fe4:	359000ef          	jal	ra,80025b3c <__assert_func>

80024fe8 <__pow5mult>:
80024fe8:	fe010113          	addi	sp,sp,-32
80024fec:	00812c23          	sw	s0,24(sp)
80024ff0:	01212823          	sw	s2,16(sp)
80024ff4:	01312623          	sw	s3,12(sp)
80024ff8:	00112e23          	sw	ra,28(sp)
80024ffc:	00912a23          	sw	s1,20(sp)
80025000:	00367793          	andi	a5,a2,3
80025004:	00060413          	mv	s0,a2
80025008:	00050993          	mv	s3,a0
8002500c:	00058913          	mv	s2,a1
80025010:	0a079a63          	bnez	a5,800250c4 <__pow5mult+0xdc>
80025014:	40245413          	srai	s0,s0,0x2
80025018:	06040663          	beqz	s0,80025084 <__pow5mult+0x9c>
8002501c:	0409a483          	lw	s1,64(s3)
80025020:	0c048663          	beqz	s1,800250ec <__pow5mult+0x104>
80025024:	00147793          	andi	a5,s0,1
80025028:	02079063          	bnez	a5,80025048 <__pow5mult+0x60>
8002502c:	40145413          	srai	s0,s0,0x1
80025030:	04040a63          	beqz	s0,80025084 <__pow5mult+0x9c>
80025034:	0004a503          	lw	a0,0(s1)
80025038:	06050663          	beqz	a0,800250a4 <__pow5mult+0xbc>
8002503c:	00050493          	mv	s1,a0
80025040:	00147793          	andi	a5,s0,1
80025044:	fe0784e3          	beqz	a5,8002502c <__pow5mult+0x44>
80025048:	00048613          	mv	a2,s1
8002504c:	00090593          	mv	a1,s2
80025050:	00098513          	mv	a0,s3
80025054:	d61ff0ef          	jal	ra,80024db4 <__multiply>
80025058:	02090063          	beqz	s2,80025078 <__pow5mult+0x90>
8002505c:	00492703          	lw	a4,4(s2)
80025060:	0449a783          	lw	a5,68(s3)
80025064:	00271713          	slli	a4,a4,0x2
80025068:	00e787b3          	add	a5,a5,a4
8002506c:	0007a703          	lw	a4,0(a5)
80025070:	00e92023          	sw	a4,0(s2)
80025074:	0127a023          	sw	s2,0(a5)
80025078:	40145413          	srai	s0,s0,0x1
8002507c:	00050913          	mv	s2,a0
80025080:	fa041ae3          	bnez	s0,80025034 <__pow5mult+0x4c>
80025084:	01c12083          	lw	ra,28(sp)
80025088:	01812403          	lw	s0,24(sp)
8002508c:	01412483          	lw	s1,20(sp)
80025090:	00c12983          	lw	s3,12(sp)
80025094:	00090513          	mv	a0,s2
80025098:	01012903          	lw	s2,16(sp)
8002509c:	02010113          	addi	sp,sp,32
800250a0:	00008067          	ret
800250a4:	00048613          	mv	a2,s1
800250a8:	00048593          	mv	a1,s1
800250ac:	00098513          	mv	a0,s3
800250b0:	d05ff0ef          	jal	ra,80024db4 <__multiply>
800250b4:	00a4a023          	sw	a0,0(s1)
800250b8:	00052023          	sw	zero,0(a0)
800250bc:	00050493          	mv	s1,a0
800250c0:	f81ff06f          	j	80025040 <__pow5mult+0x58>
800250c4:	fff78793          	addi	a5,a5,-1
800250c8:	80029737          	lui	a4,0x80029
800250cc:	d3c70713          	addi	a4,a4,-708 # 80028d3c <p05.0>
800250d0:	00279793          	slli	a5,a5,0x2
800250d4:	00f707b3          	add	a5,a4,a5
800250d8:	0007a603          	lw	a2,0(a5)
800250dc:	00000693          	li	a3,0
800250e0:	981ff0ef          	jal	ra,80024a60 <__multadd>
800250e4:	00050913          	mv	s2,a0
800250e8:	f2dff06f          	j	80025014 <__pow5mult+0x2c>
800250ec:	00100593          	li	a1,1
800250f0:	00098513          	mv	a0,s3
800250f4:	8a1ff0ef          	jal	ra,80024994 <_Balloc>
800250f8:	00050493          	mv	s1,a0
800250fc:	02050063          	beqz	a0,8002511c <__pow5mult+0x134>
80025100:	27100793          	li	a5,625
80025104:	00f52a23          	sw	a5,20(a0)
80025108:	00100793          	li	a5,1
8002510c:	00f52823          	sw	a5,16(a0)
80025110:	04a9a023          	sw	a0,64(s3)
80025114:	00052023          	sw	zero,0(a0)
80025118:	f0dff06f          	j	80025024 <__pow5mult+0x3c>
8002511c:	800296b7          	lui	a3,0x80029
80025120:	80029537          	lui	a0,0x80029
80025124:	ce068693          	addi	a3,a3,-800 # 80028ce0 <blanks.1+0x4c>
80025128:	00000613          	li	a2,0
8002512c:	14500593          	li	a1,325
80025130:	cf450513          	addi	a0,a0,-780 # 80028cf4 <blanks.1+0x60>
80025134:	209000ef          	jal	ra,80025b3c <__assert_func>

80025138 <__lshift>:
80025138:	fe010113          	addi	sp,sp,-32
8002513c:	01512223          	sw	s5,4(sp)
80025140:	0105aa83          	lw	s5,16(a1)
80025144:	0085a783          	lw	a5,8(a1)
80025148:	01312623          	sw	s3,12(sp)
8002514c:	40565993          	srai	s3,a2,0x5
80025150:	01598ab3          	add	s5,s3,s5
80025154:	00812c23          	sw	s0,24(sp)
80025158:	00912a23          	sw	s1,20(sp)
8002515c:	01212823          	sw	s2,16(sp)
80025160:	01412423          	sw	s4,8(sp)
80025164:	00112e23          	sw	ra,28(sp)
80025168:	001a8913          	addi	s2,s5,1
8002516c:	00058493          	mv	s1,a1
80025170:	00060413          	mv	s0,a2
80025174:	0045a583          	lw	a1,4(a1)
80025178:	00050a13          	mv	s4,a0
8002517c:	0127d863          	bge	a5,s2,8002518c <__lshift+0x54>
80025180:	00179793          	slli	a5,a5,0x1
80025184:	00158593          	addi	a1,a1,1
80025188:	ff27cce3          	blt	a5,s2,80025180 <__lshift+0x48>
8002518c:	000a0513          	mv	a0,s4
80025190:	805ff0ef          	jal	ra,80024994 <_Balloc>
80025194:	10050c63          	beqz	a0,800252ac <__lshift+0x174>
80025198:	01450813          	addi	a6,a0,20
8002519c:	03305463          	blez	s3,800251c4 <__lshift+0x8c>
800251a0:	00598993          	addi	s3,s3,5
800251a4:	00299993          	slli	s3,s3,0x2
800251a8:	01350733          	add	a4,a0,s3
800251ac:	00080793          	mv	a5,a6
800251b0:	00478793          	addi	a5,a5,4
800251b4:	fe07ae23          	sw	zero,-4(a5)
800251b8:	fee79ce3          	bne	a5,a4,800251b0 <__lshift+0x78>
800251bc:	fec98993          	addi	s3,s3,-20
800251c0:	01380833          	add	a6,a6,s3
800251c4:	0104a883          	lw	a7,16(s1)
800251c8:	01448793          	addi	a5,s1,20
800251cc:	01f47613          	andi	a2,s0,31
800251d0:	00289893          	slli	a7,a7,0x2
800251d4:	011788b3          	add	a7,a5,a7
800251d8:	0a060463          	beqz	a2,80025280 <__lshift+0x148>
800251dc:	02000593          	li	a1,32
800251e0:	40c585b3          	sub	a1,a1,a2
800251e4:	00080313          	mv	t1,a6
800251e8:	00000693          	li	a3,0
800251ec:	0007a703          	lw	a4,0(a5)
800251f0:	00430313          	addi	t1,t1,4
800251f4:	00478793          	addi	a5,a5,4
800251f8:	00c71733          	sll	a4,a4,a2
800251fc:	00d76733          	or	a4,a4,a3
80025200:	fee32e23          	sw	a4,-4(t1)
80025204:	ffc7a683          	lw	a3,-4(a5)
80025208:	00b6d6b3          	srl	a3,a3,a1
8002520c:	ff17e0e3          	bltu	a5,a7,800251ec <__lshift+0xb4>
80025210:	01548793          	addi	a5,s1,21
80025214:	00400713          	li	a4,4
80025218:	00f8ea63          	bltu	a7,a5,8002522c <__lshift+0xf4>
8002521c:	409887b3          	sub	a5,a7,s1
80025220:	feb78793          	addi	a5,a5,-21
80025224:	ffc7f793          	andi	a5,a5,-4
80025228:	00478713          	addi	a4,a5,4
8002522c:	00e80833          	add	a6,a6,a4
80025230:	00d82023          	sw	a3,0(a6)
80025234:	00069463          	bnez	a3,8002523c <__lshift+0x104>
80025238:	000a8913          	mv	s2,s5
8002523c:	0044a703          	lw	a4,4(s1)
80025240:	044a2783          	lw	a5,68(s4)
80025244:	01c12083          	lw	ra,28(sp)
80025248:	00271713          	slli	a4,a4,0x2
8002524c:	00e787b3          	add	a5,a5,a4
80025250:	0007a703          	lw	a4,0(a5)
80025254:	01252823          	sw	s2,16(a0)
80025258:	01812403          	lw	s0,24(sp)
8002525c:	00e4a023          	sw	a4,0(s1)
80025260:	0097a023          	sw	s1,0(a5)
80025264:	01012903          	lw	s2,16(sp)
80025268:	01412483          	lw	s1,20(sp)
8002526c:	00c12983          	lw	s3,12(sp)
80025270:	00812a03          	lw	s4,8(sp)
80025274:	00412a83          	lw	s5,4(sp)
80025278:	02010113          	addi	sp,sp,32
8002527c:	00008067          	ret
80025280:	0007a703          	lw	a4,0(a5)
80025284:	00478793          	addi	a5,a5,4
80025288:	00480813          	addi	a6,a6,4
8002528c:	fee82e23          	sw	a4,-4(a6)
80025290:	fb17f4e3          	bgeu	a5,a7,80025238 <__lshift+0x100>
80025294:	0007a703          	lw	a4,0(a5)
80025298:	00478793          	addi	a5,a5,4
8002529c:	00480813          	addi	a6,a6,4
800252a0:	fee82e23          	sw	a4,-4(a6)
800252a4:	fd17eee3          	bltu	a5,a7,80025280 <__lshift+0x148>
800252a8:	f91ff06f          	j	80025238 <__lshift+0x100>
800252ac:	800296b7          	lui	a3,0x80029
800252b0:	80029537          	lui	a0,0x80029
800252b4:	ce068693          	addi	a3,a3,-800 # 80028ce0 <blanks.1+0x4c>
800252b8:	00000613          	li	a2,0
800252bc:	1de00593          	li	a1,478
800252c0:	cf450513          	addi	a0,a0,-780 # 80028cf4 <blanks.1+0x60>
800252c4:	079000ef          	jal	ra,80025b3c <__assert_func>

800252c8 <__mcmp>:
800252c8:	01052703          	lw	a4,16(a0)
800252cc:	0105a783          	lw	a5,16(a1)
800252d0:	00050813          	mv	a6,a0
800252d4:	40f70533          	sub	a0,a4,a5
800252d8:	04f71263          	bne	a4,a5,8002531c <__mcmp+0x54>
800252dc:	00279793          	slli	a5,a5,0x2
800252e0:	01480813          	addi	a6,a6,20
800252e4:	01458593          	addi	a1,a1,20
800252e8:	00f80733          	add	a4,a6,a5
800252ec:	00f587b3          	add	a5,a1,a5
800252f0:	0080006f          	j	800252f8 <__mcmp+0x30>
800252f4:	02e87463          	bgeu	a6,a4,8002531c <__mcmp+0x54>
800252f8:	ffc72603          	lw	a2,-4(a4)
800252fc:	ffc7a683          	lw	a3,-4(a5)
80025300:	ffc70713          	addi	a4,a4,-4
80025304:	ffc78793          	addi	a5,a5,-4
80025308:	fed606e3          	beq	a2,a3,800252f4 <__mcmp+0x2c>
8002530c:	00100513          	li	a0,1
80025310:	00d67663          	bgeu	a2,a3,8002531c <__mcmp+0x54>
80025314:	fff00513          	li	a0,-1
80025318:	00008067          	ret
8002531c:	00008067          	ret

80025320 <__mdiff>:
80025320:	0105a703          	lw	a4,16(a1)
80025324:	01062783          	lw	a5,16(a2)
80025328:	ff010113          	addi	sp,sp,-16
8002532c:	00812423          	sw	s0,8(sp)
80025330:	00912223          	sw	s1,4(sp)
80025334:	01212023          	sw	s2,0(sp)
80025338:	00112623          	sw	ra,12(sp)
8002533c:	00058493          	mv	s1,a1
80025340:	00060413          	mv	s0,a2
80025344:	40f70933          	sub	s2,a4,a5
80025348:	04f71663          	bne	a4,a5,80025394 <__mdiff+0x74>
8002534c:	00279693          	slli	a3,a5,0x2
80025350:	01458593          	addi	a1,a1,20
80025354:	01460713          	addi	a4,a2,20
80025358:	00d587b3          	add	a5,a1,a3
8002535c:	00d70733          	add	a4,a4,a3
80025360:	0080006f          	j	80025368 <__mdiff+0x48>
80025364:	18f5f863          	bgeu	a1,a5,800254f4 <__mdiff+0x1d4>
80025368:	ffc7a603          	lw	a2,-4(a5)
8002536c:	ffc72683          	lw	a3,-4(a4)
80025370:	ffc78793          	addi	a5,a5,-4
80025374:	ffc70713          	addi	a4,a4,-4
80025378:	fed606e3          	beq	a2,a3,80025364 <__mdiff+0x44>
8002537c:	02d67063          	bgeu	a2,a3,8002539c <__mdiff+0x7c>
80025380:	00048793          	mv	a5,s1
80025384:	00100913          	li	s2,1
80025388:	00040493          	mv	s1,s0
8002538c:	00078413          	mv	s0,a5
80025390:	00c0006f          	j	8002539c <__mdiff+0x7c>
80025394:	fe0946e3          	bltz	s2,80025380 <__mdiff+0x60>
80025398:	00000913          	li	s2,0
8002539c:	0044a583          	lw	a1,4(s1)
800253a0:	df4ff0ef          	jal	ra,80024994 <_Balloc>
800253a4:	1a050c63          	beqz	a0,8002555c <__mdiff+0x23c>
800253a8:	0104a883          	lw	a7,16(s1)
800253ac:	01042f83          	lw	t6,16(s0)
800253b0:	01448293          	addi	t0,s1,20
800253b4:	00289313          	slli	t1,a7,0x2
800253b8:	01440813          	addi	a6,s0,20
800253bc:	002f9f93          	slli	t6,t6,0x2
800253c0:	01450613          	addi	a2,a0,20
800253c4:	00010e37          	lui	t3,0x10
800253c8:	01252623          	sw	s2,12(a0)
800253cc:	00628333          	add	t1,t0,t1
800253d0:	01f80fb3          	add	t6,a6,t6
800253d4:	00060f13          	mv	t5,a2
800253d8:	00028e93          	mv	t4,t0
800253dc:	00000693          	li	a3,0
800253e0:	fffe0e13          	addi	t3,t3,-1 # ffff <__STACKSIZE__+0xbfff>
800253e4:	000ea703          	lw	a4,0(t4)
800253e8:	00082583          	lw	a1,0(a6)
800253ec:	004f0f13          	addi	t5,t5,4
800253f0:	01c777b3          	and	a5,a4,t3
800253f4:	01c5f3b3          	and	t2,a1,t3
800253f8:	407787b3          	sub	a5,a5,t2
800253fc:	00d787b3          	add	a5,a5,a3
80025400:	01075713          	srli	a4,a4,0x10
80025404:	0105d593          	srli	a1,a1,0x10
80025408:	4107d693          	srai	a3,a5,0x10
8002540c:	40b70733          	sub	a4,a4,a1
80025410:	00d70733          	add	a4,a4,a3
80025414:	01071693          	slli	a3,a4,0x10
80025418:	01c7f7b3          	and	a5,a5,t3
8002541c:	00d7e7b3          	or	a5,a5,a3
80025420:	00480813          	addi	a6,a6,4
80025424:	feff2e23          	sw	a5,-4(t5)
80025428:	004e8e93          	addi	t4,t4,4
8002542c:	41075693          	srai	a3,a4,0x10
80025430:	fbf86ae3          	bltu	a6,t6,800253e4 <__mdiff+0xc4>
80025434:	01540713          	addi	a4,s0,21
80025438:	408f8433          	sub	s0,t6,s0
8002543c:	feb40413          	addi	s0,s0,-21
80025440:	00efbfb3          	sltu	t6,t6,a4
80025444:	001fcf13          	xori	t5,t6,1
80025448:	00245413          	srli	s0,s0,0x2
8002544c:	00400713          	li	a4,4
80025450:	000f9663          	bnez	t6,8002545c <__mdiff+0x13c>
80025454:	00140713          	addi	a4,s0,1
80025458:	00271713          	slli	a4,a4,0x2
8002545c:	00e282b3          	add	t0,t0,a4
80025460:	00e60833          	add	a6,a2,a4
80025464:	00010eb7          	lui	t4,0x10
80025468:	00080e13          	mv	t3,a6
8002546c:	00028593          	mv	a1,t0
80025470:	fffe8e93          	addi	t4,t4,-1 # ffff <__STACKSIZE__+0xbfff>
80025474:	0a62f863          	bgeu	t0,t1,80025524 <__mdiff+0x204>
80025478:	0005a783          	lw	a5,0(a1)
8002547c:	004e0e13          	addi	t3,t3,4
80025480:	00458593          	addi	a1,a1,4
80025484:	01d7f733          	and	a4,a5,t4
80025488:	00d70733          	add	a4,a4,a3
8002548c:	0107d613          	srli	a2,a5,0x10
80025490:	41075713          	srai	a4,a4,0x10
80025494:	00c70733          	add	a4,a4,a2
80025498:	00d787b3          	add	a5,a5,a3
8002549c:	01d7f7b3          	and	a5,a5,t4
800254a0:	01071693          	slli	a3,a4,0x10
800254a4:	00d7e7b3          	or	a5,a5,a3
800254a8:	fefe2e23          	sw	a5,-4(t3)
800254ac:	41075693          	srai	a3,a4,0x10
800254b0:	fc65e4e3          	bltu	a1,t1,80025478 <__mdiff+0x158>
800254b4:	fff30313          	addi	t1,t1,-1
800254b8:	40530333          	sub	t1,t1,t0
800254bc:	ffc37313          	andi	t1,t1,-4
800254c0:	00680733          	add	a4,a6,t1
800254c4:	00079a63          	bnez	a5,800254d8 <__mdiff+0x1b8>
800254c8:	ffc72783          	lw	a5,-4(a4)
800254cc:	fff88893          	addi	a7,a7,-1
800254d0:	ffc70713          	addi	a4,a4,-4
800254d4:	fe078ae3          	beqz	a5,800254c8 <__mdiff+0x1a8>
800254d8:	00c12083          	lw	ra,12(sp)
800254dc:	00812403          	lw	s0,8(sp)
800254e0:	01152823          	sw	a7,16(a0)
800254e4:	00412483          	lw	s1,4(sp)
800254e8:	00012903          	lw	s2,0(sp)
800254ec:	01010113          	addi	sp,sp,16
800254f0:	00008067          	ret
800254f4:	00000593          	li	a1,0
800254f8:	c9cff0ef          	jal	ra,80024994 <_Balloc>
800254fc:	04050263          	beqz	a0,80025540 <__mdiff+0x220>
80025500:	00c12083          	lw	ra,12(sp)
80025504:	00812403          	lw	s0,8(sp)
80025508:	00100793          	li	a5,1
8002550c:	00f52823          	sw	a5,16(a0)
80025510:	00052a23          	sw	zero,20(a0)
80025514:	00412483          	lw	s1,4(sp)
80025518:	00012903          	lw	s2,0(sp)
8002551c:	01010113          	addi	sp,sp,16
80025520:	00008067          	ret
80025524:	00000713          	li	a4,0
80025528:	000f1663          	bnez	t5,80025534 <__mdiff+0x214>
8002552c:	00e60733          	add	a4,a2,a4
80025530:	f95ff06f          	j	800254c4 <__mdiff+0x1a4>
80025534:	00241713          	slli	a4,s0,0x2
80025538:	00e60733          	add	a4,a2,a4
8002553c:	f89ff06f          	j	800254c4 <__mdiff+0x1a4>
80025540:	800296b7          	lui	a3,0x80029
80025544:	80029537          	lui	a0,0x80029
80025548:	ce068693          	addi	a3,a3,-800 # 80028ce0 <blanks.1+0x4c>
8002554c:	00000613          	li	a2,0
80025550:	23700593          	li	a1,567
80025554:	cf450513          	addi	a0,a0,-780 # 80028cf4 <blanks.1+0x60>
80025558:	5e4000ef          	jal	ra,80025b3c <__assert_func>
8002555c:	800296b7          	lui	a3,0x80029
80025560:	80029537          	lui	a0,0x80029
80025564:	ce068693          	addi	a3,a3,-800 # 80028ce0 <blanks.1+0x4c>
80025568:	00000613          	li	a2,0
8002556c:	24500593          	li	a1,581
80025570:	cf450513          	addi	a0,a0,-780 # 80028cf4 <blanks.1+0x60>
80025574:	5c8000ef          	jal	ra,80025b3c <__assert_func>

80025578 <__b2d>:
80025578:	fe010113          	addi	sp,sp,-32
8002557c:	00912a23          	sw	s1,20(sp)
80025580:	01052483          	lw	s1,16(a0)
80025584:	00812c23          	sw	s0,24(sp)
80025588:	01450413          	addi	s0,a0,20
8002558c:	00249493          	slli	s1,s1,0x2
80025590:	009404b3          	add	s1,s0,s1
80025594:	01212823          	sw	s2,16(sp)
80025598:	ffc4a903          	lw	s2,-4(s1)
8002559c:	01312623          	sw	s3,12(sp)
800255a0:	01412423          	sw	s4,8(sp)
800255a4:	00090513          	mv	a0,s2
800255a8:	00058993          	mv	s3,a1
800255ac:	00112e23          	sw	ra,28(sp)
800255b0:	dfcff0ef          	jal	ra,80024bac <__hi0bits>
800255b4:	02000713          	li	a4,32
800255b8:	40a707b3          	sub	a5,a4,a0
800255bc:	00f9a023          	sw	a5,0(s3)
800255c0:	00a00793          	li	a5,10
800255c4:	ffc48a13          	addi	s4,s1,-4
800255c8:	08a7dc63          	bge	a5,a0,80025660 <__b2d+0xe8>
800255cc:	ff550613          	addi	a2,a0,-11
800255d0:	05447063          	bgeu	s0,s4,80025610 <__b2d+0x98>
800255d4:	ff84a783          	lw	a5,-8(s1)
800255d8:	04060c63          	beqz	a2,80025630 <__b2d+0xb8>
800255dc:	40c706b3          	sub	a3,a4,a2
800255e0:	00d7d733          	srl	a4,a5,a3
800255e4:	00c91933          	sll	s2,s2,a2
800255e8:	00e96933          	or	s2,s2,a4
800255ec:	ff848593          	addi	a1,s1,-8
800255f0:	3ff00737          	lui	a4,0x3ff00
800255f4:	00e96733          	or	a4,s2,a4
800255f8:	00c797b3          	sll	a5,a5,a2
800255fc:	02b47e63          	bgeu	s0,a1,80025638 <__b2d+0xc0>
80025600:	ff44a603          	lw	a2,-12(s1)
80025604:	00d656b3          	srl	a3,a2,a3
80025608:	00d7e7b3          	or	a5,a5,a3
8002560c:	02c0006f          	j	80025638 <__b2d+0xc0>
80025610:	00b00793          	li	a5,11
80025614:	00f50c63          	beq	a0,a5,8002562c <__b2d+0xb4>
80025618:	00c91933          	sll	s2,s2,a2
8002561c:	3ff00737          	lui	a4,0x3ff00
80025620:	00e96733          	or	a4,s2,a4
80025624:	00000793          	li	a5,0
80025628:	0100006f          	j	80025638 <__b2d+0xc0>
8002562c:	00000793          	li	a5,0
80025630:	3ff00737          	lui	a4,0x3ff00
80025634:	00e96733          	or	a4,s2,a4
80025638:	01c12083          	lw	ra,28(sp)
8002563c:	01812403          	lw	s0,24(sp)
80025640:	01412483          	lw	s1,20(sp)
80025644:	01012903          	lw	s2,16(sp)
80025648:	00c12983          	lw	s3,12(sp)
8002564c:	00812a03          	lw	s4,8(sp)
80025650:	00078513          	mv	a0,a5
80025654:	00070593          	mv	a1,a4
80025658:	02010113          	addi	sp,sp,32
8002565c:	00008067          	ret
80025660:	00b00693          	li	a3,11
80025664:	40a686b3          	sub	a3,a3,a0
80025668:	3ff007b7          	lui	a5,0x3ff00
8002566c:	00d95733          	srl	a4,s2,a3
80025670:	00f76733          	or	a4,a4,a5
80025674:	00000793          	li	a5,0
80025678:	01447663          	bgeu	s0,s4,80025684 <__b2d+0x10c>
8002567c:	ff84a783          	lw	a5,-8(s1)
80025680:	00d7d7b3          	srl	a5,a5,a3
80025684:	01550513          	addi	a0,a0,21
80025688:	00a91933          	sll	s2,s2,a0
8002568c:	00f967b3          	or	a5,s2,a5
80025690:	fa9ff06f          	j	80025638 <__b2d+0xc0>

80025694 <__ascii_wctomb>:
80025694:	02058463          	beqz	a1,800256bc <__ascii_wctomb+0x28>
80025698:	0ff00793          	li	a5,255
8002569c:	00c7e863          	bltu	a5,a2,800256ac <__ascii_wctomb+0x18>
800256a0:	00c58023          	sb	a2,0(a1)
800256a4:	00100513          	li	a0,1
800256a8:	00008067          	ret
800256ac:	08a00793          	li	a5,138
800256b0:	00f52023          	sw	a5,0(a0)
800256b4:	fff00513          	li	a0,-1
800256b8:	00008067          	ret
800256bc:	00000513          	li	a0,0
800256c0:	00008067          	ret

800256c4 <_wcrtomb_r>:
800256c4:	fe010113          	addi	sp,sp,-32
800256c8:	00812c23          	sw	s0,24(sp)
800256cc:	00912a23          	sw	s1,20(sp)
800256d0:	800297b7          	lui	a5,0x80029
800256d4:	00112e23          	sw	ra,28(sp)
800256d8:	4dc7a783          	lw	a5,1244(a5) # 800294dc <__global_locale+0xe0>
800256dc:	00050413          	mv	s0,a0
800256e0:	00068493          	mv	s1,a3
800256e4:	02058263          	beqz	a1,80025708 <_wcrtomb_r+0x44>
800256e8:	000780e7          	jalr	a5
800256ec:	fff00793          	li	a5,-1
800256f0:	02f50663          	beq	a0,a5,8002571c <_wcrtomb_r+0x58>
800256f4:	01c12083          	lw	ra,28(sp)
800256f8:	01812403          	lw	s0,24(sp)
800256fc:	01412483          	lw	s1,20(sp)
80025700:	02010113          	addi	sp,sp,32
80025704:	00008067          	ret
80025708:	00000613          	li	a2,0
8002570c:	00410593          	addi	a1,sp,4
80025710:	000780e7          	jalr	a5
80025714:	fff00793          	li	a5,-1
80025718:	fcf51ee3          	bne	a0,a5,800256f4 <_wcrtomb_r+0x30>
8002571c:	0004a023          	sw	zero,0(s1)
80025720:	08a00793          	li	a5,138
80025724:	01c12083          	lw	ra,28(sp)
80025728:	00f42023          	sw	a5,0(s0)
8002572c:	01812403          	lw	s0,24(sp)
80025730:	01412483          	lw	s1,20(sp)
80025734:	02010113          	addi	sp,sp,32
80025738:	00008067          	ret

8002573c <_fclose_r>:
8002573c:	ff010113          	addi	sp,sp,-16
80025740:	00112623          	sw	ra,12(sp)
80025744:	00812423          	sw	s0,8(sp)
80025748:	00912223          	sw	s1,4(sp)
8002574c:	01212023          	sw	s2,0(sp)
80025750:	02058063          	beqz	a1,80025770 <_fclose_r+0x34>
80025754:	00058413          	mv	s0,a1
80025758:	00050493          	mv	s1,a0
8002575c:	00050663          	beqz	a0,80025768 <_fclose_r+0x2c>
80025760:	03452783          	lw	a5,52(a0)
80025764:	0c078c63          	beqz	a5,8002583c <_fclose_r+0x100>
80025768:	00c41783          	lh	a5,12(s0)
8002576c:	02079263          	bnez	a5,80025790 <_fclose_r+0x54>
80025770:	00c12083          	lw	ra,12(sp)
80025774:	00812403          	lw	s0,8(sp)
80025778:	00000913          	li	s2,0
8002577c:	00412483          	lw	s1,4(sp)
80025780:	00090513          	mv	a0,s2
80025784:	00012903          	lw	s2,0(sp)
80025788:	01010113          	addi	sp,sp,16
8002578c:	00008067          	ret
80025790:	00040593          	mv	a1,s0
80025794:	00048513          	mv	a0,s1
80025798:	af1fb0ef          	jal	ra,80021288 <__sflush_r>
8002579c:	02c42783          	lw	a5,44(s0)
800257a0:	00050913          	mv	s2,a0
800257a4:	00078a63          	beqz	a5,800257b8 <_fclose_r+0x7c>
800257a8:	01c42583          	lw	a1,28(s0)
800257ac:	00048513          	mv	a0,s1
800257b0:	000780e7          	jalr	a5
800257b4:	06054463          	bltz	a0,8002581c <_fclose_r+0xe0>
800257b8:	00c45783          	lhu	a5,12(s0)
800257bc:	0807f793          	andi	a5,a5,128
800257c0:	06079663          	bnez	a5,8002582c <_fclose_r+0xf0>
800257c4:	03042583          	lw	a1,48(s0)
800257c8:	00058c63          	beqz	a1,800257e0 <_fclose_r+0xa4>
800257cc:	04040793          	addi	a5,s0,64
800257d0:	00f58663          	beq	a1,a5,800257dc <_fclose_r+0xa0>
800257d4:	00048513          	mv	a0,s1
800257d8:	d59eb0ef          	jal	ra,80011530 <_free_r>
800257dc:	02042823          	sw	zero,48(s0)
800257e0:	04442583          	lw	a1,68(s0)
800257e4:	00058863          	beqz	a1,800257f4 <_fclose_r+0xb8>
800257e8:	00048513          	mv	a0,s1
800257ec:	d45eb0ef          	jal	ra,80011530 <_free_r>
800257f0:	04042223          	sw	zero,68(s0)
800257f4:	f4dfb0ef          	jal	ra,80021740 <__sfp_lock_acquire>
800257f8:	00041623          	sh	zero,12(s0)
800257fc:	f49fb0ef          	jal	ra,80021744 <__sfp_lock_release>
80025800:	00c12083          	lw	ra,12(sp)
80025804:	00812403          	lw	s0,8(sp)
80025808:	00412483          	lw	s1,4(sp)
8002580c:	00090513          	mv	a0,s2
80025810:	00012903          	lw	s2,0(sp)
80025814:	01010113          	addi	sp,sp,16
80025818:	00008067          	ret
8002581c:	00c45783          	lhu	a5,12(s0)
80025820:	fff00913          	li	s2,-1
80025824:	0807f793          	andi	a5,a5,128
80025828:	f8078ee3          	beqz	a5,800257c4 <_fclose_r+0x88>
8002582c:	01042583          	lw	a1,16(s0)
80025830:	00048513          	mv	a0,s1
80025834:	cfdeb0ef          	jal	ra,80011530 <_free_r>
80025838:	f8dff06f          	j	800257c4 <_fclose_r+0x88>
8002583c:	eddfb0ef          	jal	ra,80021718 <__sinit>
80025840:	f29ff06f          	j	80025768 <_fclose_r+0x2c>

80025844 <__smakebuf_r>:
80025844:	00c59783          	lh	a5,12(a1)
80025848:	f8010113          	addi	sp,sp,-128
8002584c:	06812c23          	sw	s0,120(sp)
80025850:	06112e23          	sw	ra,124(sp)
80025854:	06912a23          	sw	s1,116(sp)
80025858:	07212823          	sw	s2,112(sp)
8002585c:	07312623          	sw	s3,108(sp)
80025860:	07412423          	sw	s4,104(sp)
80025864:	0027f713          	andi	a4,a5,2
80025868:	00058413          	mv	s0,a1
8002586c:	02070c63          	beqz	a4,800258a4 <__smakebuf_r+0x60>
80025870:	04358793          	addi	a5,a1,67
80025874:	00f5a023          	sw	a5,0(a1)
80025878:	00f5a823          	sw	a5,16(a1)
8002587c:	00100793          	li	a5,1
80025880:	00f5aa23          	sw	a5,20(a1)
80025884:	07c12083          	lw	ra,124(sp)
80025888:	07812403          	lw	s0,120(sp)
8002588c:	07412483          	lw	s1,116(sp)
80025890:	07012903          	lw	s2,112(sp)
80025894:	06c12983          	lw	s3,108(sp)
80025898:	06812a03          	lw	s4,104(sp)
8002589c:	08010113          	addi	sp,sp,128
800258a0:	00008067          	ret
800258a4:	00e59583          	lh	a1,14(a1)
800258a8:	00050493          	mv	s1,a0
800258ac:	0805c663          	bltz	a1,80025938 <__smakebuf_r+0xf4>
800258b0:	00810613          	addi	a2,sp,8
800258b4:	d39eb0ef          	jal	ra,800115ec <_fstat_r>
800258b8:	06054e63          	bltz	a0,80025934 <__smakebuf_r+0xf0>
800258bc:	00c12783          	lw	a5,12(sp)
800258c0:	0000f937          	lui	s2,0xf
800258c4:	00001a37          	lui	s4,0x1
800258c8:	00f97933          	and	s2,s2,a5
800258cc:	ffffe7b7          	lui	a5,0xffffe
800258d0:	00f90933          	add	s2,s2,a5
800258d4:	00193913          	seqz	s2,s2
800258d8:	40000993          	li	s3,1024
800258dc:	800a0a13          	addi	s4,s4,-2048 # 800 <__STACKSIZE__-0x3800>
800258e0:	00098593          	mv	a1,s3
800258e4:	00048513          	mv	a0,s1
800258e8:	b49eb0ef          	jal	ra,80011430 <_malloc_r>
800258ec:	00c41783          	lh	a5,12(s0)
800258f0:	06050863          	beqz	a0,80025960 <__smakebuf_r+0x11c>
800258f4:	0807e793          	ori	a5,a5,128
800258f8:	00a42023          	sw	a0,0(s0)
800258fc:	00a42823          	sw	a0,16(s0)
80025900:	00f41623          	sh	a5,12(s0)
80025904:	01342a23          	sw	s3,20(s0)
80025908:	08091863          	bnez	s2,80025998 <__smakebuf_r+0x154>
8002590c:	0147e7b3          	or	a5,a5,s4
80025910:	07c12083          	lw	ra,124(sp)
80025914:	00f41623          	sh	a5,12(s0)
80025918:	07812403          	lw	s0,120(sp)
8002591c:	07412483          	lw	s1,116(sp)
80025920:	07012903          	lw	s2,112(sp)
80025924:	06c12983          	lw	s3,108(sp)
80025928:	06812a03          	lw	s4,104(sp)
8002592c:	08010113          	addi	sp,sp,128
80025930:	00008067          	ret
80025934:	00c41783          	lh	a5,12(s0)
80025938:	0807f793          	andi	a5,a5,128
8002593c:	00000913          	li	s2,0
80025940:	04078663          	beqz	a5,8002598c <__smakebuf_r+0x148>
80025944:	04000993          	li	s3,64
80025948:	00098593          	mv	a1,s3
8002594c:	00048513          	mv	a0,s1
80025950:	ae1eb0ef          	jal	ra,80011430 <_malloc_r>
80025954:	00c41783          	lh	a5,12(s0)
80025958:	00000a13          	li	s4,0
8002595c:	f8051ce3          	bnez	a0,800258f4 <__smakebuf_r+0xb0>
80025960:	2007f713          	andi	a4,a5,512
80025964:	f20710e3          	bnez	a4,80025884 <__smakebuf_r+0x40>
80025968:	ffc7f793          	andi	a5,a5,-4
8002596c:	0027e793          	ori	a5,a5,2
80025970:	04340713          	addi	a4,s0,67
80025974:	00f41623          	sh	a5,12(s0)
80025978:	00100793          	li	a5,1
8002597c:	00e42023          	sw	a4,0(s0)
80025980:	00e42823          	sw	a4,16(s0)
80025984:	00f42a23          	sw	a5,20(s0)
80025988:	efdff06f          	j	80025884 <__smakebuf_r+0x40>
8002598c:	40000993          	li	s3,1024
80025990:	00000a13          	li	s4,0
80025994:	f4dff06f          	j	800258e0 <__smakebuf_r+0x9c>
80025998:	00e41583          	lh	a1,14(s0)
8002599c:	00048513          	mv	a0,s1
800259a0:	c85eb0ef          	jal	ra,80011624 <_isatty_r>
800259a4:	00051663          	bnez	a0,800259b0 <__smakebuf_r+0x16c>
800259a8:	00c41783          	lh	a5,12(s0)
800259ac:	f61ff06f          	j	8002590c <__smakebuf_r+0xc8>
800259b0:	00c45783          	lhu	a5,12(s0)
800259b4:	ffc7f793          	andi	a5,a5,-4
800259b8:	0017e793          	ori	a5,a5,1
800259bc:	01079793          	slli	a5,a5,0x10
800259c0:	4107d793          	srai	a5,a5,0x10
800259c4:	f49ff06f          	j	8002590c <__smakebuf_r+0xc8>

800259c8 <__swbuf_r>:
800259c8:	fe010113          	addi	sp,sp,-32
800259cc:	00812c23          	sw	s0,24(sp)
800259d0:	00912a23          	sw	s1,20(sp)
800259d4:	01212823          	sw	s2,16(sp)
800259d8:	00112e23          	sw	ra,28(sp)
800259dc:	01312623          	sw	s3,12(sp)
800259e0:	00050913          	mv	s2,a0
800259e4:	00058493          	mv	s1,a1
800259e8:	00060413          	mv	s0,a2
800259ec:	00050663          	beqz	a0,800259f8 <__swbuf_r+0x30>
800259f0:	03452783          	lw	a5,52(a0)
800259f4:	14078063          	beqz	a5,80025b34 <__swbuf_r+0x16c>
800259f8:	01842783          	lw	a5,24(s0)
800259fc:	00c41703          	lh	a4,12(s0)
80025a00:	00f42423          	sw	a5,8(s0)
80025a04:	00877793          	andi	a5,a4,8
80025a08:	08078263          	beqz	a5,80025a8c <__swbuf_r+0xc4>
80025a0c:	01042783          	lw	a5,16(s0)
80025a10:	06078e63          	beqz	a5,80025a8c <__swbuf_r+0xc4>
80025a14:	01271693          	slli	a3,a4,0x12
80025a18:	0ff4f993          	zext.b	s3,s1
80025a1c:	0ff4f493          	zext.b	s1,s1
80025a20:	0806da63          	bgez	a3,80025ab4 <__swbuf_r+0xec>
80025a24:	00042703          	lw	a4,0(s0)
80025a28:	01442683          	lw	a3,20(s0)
80025a2c:	40f707b3          	sub	a5,a4,a5
80025a30:	0ad7da63          	bge	a5,a3,80025ae4 <__swbuf_r+0x11c>
80025a34:	00842683          	lw	a3,8(s0)
80025a38:	00170613          	addi	a2,a4,1 # 3ff00001 <__STACKSIZE__+0x3fefc001>
80025a3c:	00c42023          	sw	a2,0(s0)
80025a40:	fff68693          	addi	a3,a3,-1
80025a44:	00d42423          	sw	a3,8(s0)
80025a48:	01370023          	sb	s3,0(a4)
80025a4c:	01442703          	lw	a4,20(s0)
80025a50:	00178793          	addi	a5,a5,1 # ffffe001 <__bss_end+0x7ff77845>
80025a54:	0cf70463          	beq	a4,a5,80025b1c <__swbuf_r+0x154>
80025a58:	00c45783          	lhu	a5,12(s0)
80025a5c:	0017f793          	andi	a5,a5,1
80025a60:	00078663          	beqz	a5,80025a6c <__swbuf_r+0xa4>
80025a64:	00a00793          	li	a5,10
80025a68:	0af48a63          	beq	s1,a5,80025b1c <__swbuf_r+0x154>
80025a6c:	01c12083          	lw	ra,28(sp)
80025a70:	01812403          	lw	s0,24(sp)
80025a74:	01012903          	lw	s2,16(sp)
80025a78:	00c12983          	lw	s3,12(sp)
80025a7c:	00048513          	mv	a0,s1
80025a80:	01412483          	lw	s1,20(sp)
80025a84:	02010113          	addi	sp,sp,32
80025a88:	00008067          	ret
80025a8c:	00040593          	mv	a1,s0
80025a90:	00090513          	mv	a0,s2
80025a94:	b68fc0ef          	jal	ra,80021dfc <__swsetup_r>
80025a98:	08051a63          	bnez	a0,80025b2c <__swbuf_r+0x164>
80025a9c:	00c41703          	lh	a4,12(s0)
80025aa0:	0ff4f993          	zext.b	s3,s1
80025aa4:	01042783          	lw	a5,16(s0)
80025aa8:	01271693          	slli	a3,a4,0x12
80025aac:	0ff4f493          	zext.b	s1,s1
80025ab0:	f606cae3          	bltz	a3,80025a24 <__swbuf_r+0x5c>
80025ab4:	06442683          	lw	a3,100(s0)
80025ab8:	00002637          	lui	a2,0x2
80025abc:	00c76733          	or	a4,a4,a2
80025ac0:	ffffe637          	lui	a2,0xffffe
80025ac4:	fff60613          	addi	a2,a2,-1 # ffffdfff <__bss_end+0x7ff77843>
80025ac8:	00c6f6b3          	and	a3,a3,a2
80025acc:	00e41623          	sh	a4,12(s0)
80025ad0:	00042703          	lw	a4,0(s0)
80025ad4:	06d42223          	sw	a3,100(s0)
80025ad8:	01442683          	lw	a3,20(s0)
80025adc:	40f707b3          	sub	a5,a4,a5
80025ae0:	f4d7cae3          	blt	a5,a3,80025a34 <__swbuf_r+0x6c>
80025ae4:	00040593          	mv	a1,s0
80025ae8:	00090513          	mv	a0,s2
80025aec:	9d5fb0ef          	jal	ra,800214c0 <_fflush_r>
80025af0:	02051e63          	bnez	a0,80025b2c <__swbuf_r+0x164>
80025af4:	00042703          	lw	a4,0(s0)
80025af8:	00842683          	lw	a3,8(s0)
80025afc:	00100793          	li	a5,1
80025b00:	00170613          	addi	a2,a4,1
80025b04:	fff68693          	addi	a3,a3,-1
80025b08:	00c42023          	sw	a2,0(s0)
80025b0c:	00d42423          	sw	a3,8(s0)
80025b10:	01370023          	sb	s3,0(a4)
80025b14:	01442703          	lw	a4,20(s0)
80025b18:	f4f710e3          	bne	a4,a5,80025a58 <__swbuf_r+0x90>
80025b1c:	00040593          	mv	a1,s0
80025b20:	00090513          	mv	a0,s2
80025b24:	99dfb0ef          	jal	ra,800214c0 <_fflush_r>
80025b28:	f40502e3          	beqz	a0,80025a6c <__swbuf_r+0xa4>
80025b2c:	fff00493          	li	s1,-1
80025b30:	f3dff06f          	j	80025a6c <__swbuf_r+0xa4>
80025b34:	be5fb0ef          	jal	ra,80021718 <__sinit>
80025b38:	ec1ff06f          	j	800259f8 <__swbuf_r+0x30>

80025b3c <__assert_func>:
80025b3c:	8101a703          	lw	a4,-2032(gp) # 80029578 <_impure_ptr>
80025b40:	ff010113          	addi	sp,sp,-16
80025b44:	00068793          	mv	a5,a3
80025b48:	00060813          	mv	a6,a2
80025b4c:	00112623          	sw	ra,12(sp)
80025b50:	00c72883          	lw	a7,12(a4)
80025b54:	00050693          	mv	a3,a0
80025b58:	00058713          	mv	a4,a1
80025b5c:	00078613          	mv	a2,a5
80025b60:	02080063          	beqz	a6,80025b80 <__assert_func+0x44>
80025b64:	800297b7          	lui	a5,0x80029
80025b68:	e1078793          	addi	a5,a5,-496 # 80028e10 <__mprec_tens+0xc8>
80025b6c:	800295b7          	lui	a1,0x80029
80025b70:	e2058593          	addi	a1,a1,-480 # 80028e20 <__mprec_tens+0xd8>
80025b74:	00088513          	mv	a0,a7
80025b78:	018000ef          	jal	ra,80025b90 <fiprintf>
80025b7c:	060000ef          	jal	ra,80025bdc <abort>
80025b80:	80029837          	lui	a6,0x80029
80025b84:	e1c80793          	addi	a5,a6,-484 # 80028e1c <__mprec_tens+0xd4>
80025b88:	e1c80813          	addi	a6,a6,-484
80025b8c:	fe1ff06f          	j	80025b6c <__assert_func+0x30>

80025b90 <fiprintf>:
80025b90:	00050e13          	mv	t3,a0
80025b94:	fc010113          	addi	sp,sp,-64
80025b98:	8101a503          	lw	a0,-2032(gp) # 80029578 <_impure_ptr>
80025b9c:	02810313          	addi	t1,sp,40
80025ba0:	02c12423          	sw	a2,40(sp)
80025ba4:	02d12623          	sw	a3,44(sp)
80025ba8:	00058613          	mv	a2,a1
80025bac:	00030693          	mv	a3,t1
80025bb0:	000e0593          	mv	a1,t3
80025bb4:	00112e23          	sw	ra,28(sp)
80025bb8:	02e12823          	sw	a4,48(sp)
80025bbc:	02f12a23          	sw	a5,52(sp)
80025bc0:	03012c23          	sw	a6,56(sp)
80025bc4:	03112e23          	sw	a7,60(sp)
80025bc8:	00612623          	sw	t1,12(sp)
80025bcc:	a8cfa0ef          	jal	ra,8001fe58 <_vfiprintf_r>
80025bd0:	01c12083          	lw	ra,28(sp)
80025bd4:	04010113          	addi	sp,sp,64
80025bd8:	00008067          	ret

80025bdc <abort>:
80025bdc:	ff010113          	addi	sp,sp,-16
80025be0:	00600513          	li	a0,6
80025be4:	00112623          	sw	ra,12(sp)
80025be8:	00c000ef          	jal	ra,80025bf4 <raise>
80025bec:	00100513          	li	a0,1
80025bf0:	c41eb0ef          	jal	ra,80011830 <_exit>

80025bf4 <raise>:
80025bf4:	ff010113          	addi	sp,sp,-16
80025bf8:	00912223          	sw	s1,4(sp)
80025bfc:	00112623          	sw	ra,12(sp)
80025c00:	00812423          	sw	s0,8(sp)
80025c04:	01f00793          	li	a5,31
80025c08:	8101a483          	lw	s1,-2032(gp) # 80029578 <_impure_ptr>
80025c0c:	08a7ec63          	bltu	a5,a0,80025ca4 <raise+0xb0>
80025c10:	1184a783          	lw	a5,280(s1)
80025c14:	00050413          	mv	s0,a0
80025c18:	04078263          	beqz	a5,80025c5c <raise+0x68>
80025c1c:	00251713          	slli	a4,a0,0x2
80025c20:	00e787b3          	add	a5,a5,a4
80025c24:	0007a703          	lw	a4,0(a5)
80025c28:	02070a63          	beqz	a4,80025c5c <raise+0x68>
80025c2c:	00100693          	li	a3,1
80025c30:	00d70a63          	beq	a4,a3,80025c44 <raise+0x50>
80025c34:	fff00693          	li	a3,-1
80025c38:	04d70663          	beq	a4,a3,80025c84 <raise+0x90>
80025c3c:	0007a023          	sw	zero,0(a5)
80025c40:	000700e7          	jalr	a4
80025c44:	00000513          	li	a0,0
80025c48:	00c12083          	lw	ra,12(sp)
80025c4c:	00812403          	lw	s0,8(sp)
80025c50:	00412483          	lw	s1,4(sp)
80025c54:	01010113          	addi	sp,sp,16
80025c58:	00008067          	ret
80025c5c:	00048513          	mv	a0,s1
80025c60:	931eb0ef          	jal	ra,80011590 <_getpid_r>
80025c64:	00040613          	mv	a2,s0
80025c68:	00812403          	lw	s0,8(sp)
80025c6c:	00c12083          	lw	ra,12(sp)
80025c70:	00050593          	mv	a1,a0
80025c74:	00048513          	mv	a0,s1
80025c78:	00412483          	lw	s1,4(sp)
80025c7c:	01010113          	addi	sp,sp,16
80025c80:	9e9eb06f          	j	80011668 <_kill_r>
80025c84:	00c12083          	lw	ra,12(sp)
80025c88:	00812403          	lw	s0,8(sp)
80025c8c:	01600793          	li	a5,22
80025c90:	00f4a023          	sw	a5,0(s1)
80025c94:	00100513          	li	a0,1
80025c98:	00412483          	lw	s1,4(sp)
80025c9c:	01010113          	addi	sp,sp,16
80025ca0:	00008067          	ret
80025ca4:	01600793          	li	a5,22
80025ca8:	00f4a023          	sw	a5,0(s1)
80025cac:	fff00513          	li	a0,-1
80025cb0:	f99ff06f          	j	80025c48 <raise+0x54>
80025cb4:	6e726177          	.4byte	0x6e726177
80025cb8:	6e69                	.2byte	0x6e69
80025cba:	54203a67          	.4byte	0x54203a67
80025cbe:	6568                	.2byte	0x6568
80025cc0:	6572                	.2byte	0x6572
80025cc2:	6120                	.2byte	0x6120
80025cc4:	6572                	.2byte	0x6572
80025cc6:	6e20                	.2byte	0x6e20
80025cc8:	7765                	.2byte	0x7765
80025cca:	796c                	.2byte	0x796c
80025ccc:	6120                	.2byte	0x6120
80025cce:	6464                	.2byte	0x6464
80025cd0:	6465                	.2byte	0x6465
80025cd2:	6420                	.2byte	0x6420
80025cd4:	7665                	.2byte	0x7665
80025cd6:	6369                	.2byte	0x6369
80025cd8:	7365                	.2byte	0x7365
80025cda:	7420                	.2byte	0x7420
80025cdc:	6168                	.2byte	0x6168
80025cde:	2074                	.2byte	0x2074
80025ce0:	7261                	.2byte	0x7261
80025ce2:	2065                	.2byte	0x2065
80025ce4:	6f6e                	.2byte	0x6f6e
80025ce6:	2074                	.2byte	0x2074
80025ce8:	6964                	.2byte	0x6964
80025cea:	616c7073          	csrci	0x616,24
80025cee:	6579                	.2byte	0x6579
80025cf0:	2164                	.2byte	0x2164
80025cf2:	0000                	.2byte	0x0
80025cf4:	6564                	.2byte	0x6564
80025cf6:	6676                	.2byte	0x6676
80025cf8:	00000073          	ecall
80025cfc:	6f72                	.2byte	0x6f72
80025cfe:	006d                	.2byte	0x6d
80025d00:	6664                	.2byte	0x6664
80025d02:	6c612073          	csrs	0x6c6,sp
80025d06:	6572                	.2byte	0x6572
80025d08:	6461                	.2byte	0x6461
80025d0a:	2079                	.2byte	0x2079
80025d0c:	6e69                	.2byte	0x6e69
80025d0e:	7469                	.2byte	0x7469
80025d10:	0a2e                	.2byte	0xa2e
80025d12:	0000                	.2byte	0x0
80025d14:	7366                	.2byte	0x7366
80025d16:	6f6c                	.2byte	0x6f6c
80025d18:	00006b63          	bltu	zero,zero,80025d2e <raise+0x13a>
80025d1c:	6564                	.2byte	0x6564
80025d1e:	6676                	.2byte	0x6676
80025d20:	00000073          	ecall
80025d24:	7665642f          	.4byte	0x7665642f
80025d28:	0000                	.2byte	0x0
80025d2a:	0000                	.2byte	0x0
80025d2c:	7325                	.2byte	0x7325
80025d2e:	0073252f          	amoadd.w	a0,t2,(t1)
80025d32:	0000                	.2byte	0x0
80025d34:	6466                	.2byte	0x6466
80025d36:	7420                	.2byte	0x7420
80025d38:	7079                	.2byte	0x7079
80025d3a:	2065                	.2byte	0x2065
80025d3c:	2020                	.2byte	0x2020
80025d3e:	7220                	.2byte	0x7220
80025d40:	6665                	.2byte	0x6665
80025d42:	6d20                	.2byte	0x6d20
80025d44:	6761                	.2byte	0x6761
80025d46:	6369                	.2byte	0x6369
80025d48:	2020                	.2byte	0x2020
80025d4a:	6170                	.2byte	0x6170
80025d4c:	6874                	.2byte	0x6874
80025d4e:	000a                	.2byte	0xa
80025d50:	2d2d                	.2byte	0x2d2d
80025d52:	2d20                	.2byte	0x2d20
80025d54:	2d2d                	.2byte	0x2d2d
80025d56:	2d2d                	.2byte	0x2d2d
80025d58:	202d                	.2byte	0x202d
80025d5a:	2d20                	.2byte	0x2d20
80025d5c:	2d2d                	.2byte	0x2d2d
80025d5e:	2d20                	.2byte	0x2d20
80025d60:	2d2d                	.2byte	0x2d2d
80025d62:	2d2d                	.2byte	0x2d2d
80025d64:	2d20                	.2byte	0x2d20
80025d66:	2d2d                	.2byte	0x2d2d
80025d68:	2d2d                	.2byte	0x2d2d
80025d6a:	0a2d                	.2byte	0xa2d
80025d6c:	0000                	.2byte	0x0
80025d6e:	0000                	.2byte	0x0
80025d70:	3225                	.2byte	0x3225
80025d72:	2064                	.2byte	0x2064
80025d74:	0000                	.2byte	0x0
80025d76:	0000                	.2byte	0x0
80025d78:	6964                	.2byte	0x6964
80025d7a:	0072                	.2byte	0x72
80025d7c:	2d25                	.2byte	0x2d25
80025d7e:	73372e37          	lui	t3,0x73372
80025d82:	0020                	.2byte	0x20
80025d84:	6966                	.2byte	0x6966
80025d86:	656c                	.2byte	0x656c
80025d88:	0000                	.2byte	0x0
80025d8a:	0000                	.2byte	0x0
80025d8c:	6b636f73          	csrrsi	t5,0x6b6,6
80025d90:	7465                	.2byte	0x7465
80025d92:	0000                	.2byte	0x0
80025d94:	7375                	.2byte	0x7375
80025d96:	7265                	.2byte	0x7265
80025d98:	0000                	.2byte	0x0
80025d9a:	0000                	.2byte	0x0
80025d9c:	6564                	.2byte	0x6564
80025d9e:	6976                	.2byte	0x6976
80025da0:	00006563          	bltu	zero,zero,80025daa <raise+0x1b6>
80025da4:	6e75                	.2byte	0x6e75
80025da6:	776f6e6b          	.4byte	0x776f6e6b
80025daa:	006e                	.2byte	0x6e
80025dac:	2d25                	.2byte	0x2d25
80025dae:	2e38                	.2byte	0x2e38
80025db0:	7338                	.2byte	0x7338
80025db2:	0020                	.2byte	0x20
80025db4:	3325                	.2byte	0x3325
80025db6:	2064                	.2byte	0x2064
80025db8:	0000                	.2byte	0x0
80025dba:	0000                	.2byte	0x0
80025dbc:	3025                	.2byte	0x3025
80025dbe:	7834                	.2byte	0x7834
80025dc0:	2020                	.2byte	0x2020
80025dc2:	0000                	.2byte	0x0
80025dc4:	7325                	.2byte	0x7325
80025dc6:	0000                	.2byte	0x0
80025dc8:	7325                	.2byte	0x7325
80025dca:	000a                	.2byte	0xa
80025dcc:	000a                	.2byte	0xa
80025dce:	0000                	.2byte	0x0
80025dd0:	0000002f          	.4byte	0x2f
80025dd4:	6944                	.2byte	0x6944
80025dd6:	6572                	.2byte	0x6572
80025dd8:	726f7463          	bgeu	t5,t1,80026500 <raise+0x90c>
80025ddc:	2079                	.2byte	0x2079
80025dde:	7325                	.2byte	0x7325
80025de0:	0a3a                	.2byte	0xa3a
80025de2:	0000                	.2byte	0x0
80025de4:	2d25                	.2byte	0x2d25
80025de6:	3032                	.2byte	0x3032
80025de8:	00000073          	ecall
80025dec:	443c                	.2byte	0x443c
80025dee:	5249                	.2byte	0x5249
80025df0:	003e                	.2byte	0x3e
80025df2:	0000                	.2byte	0x0
80025df4:	2d25                	.2byte	0x2d25
80025df6:	3532                	.2byte	0x3532
80025df8:	00000a73          	.4byte	0xa73
80025dfc:	2d25                	.2byte	0x2d25
80025dfe:	3532                	.2byte	0x3532
80025e00:	756c                	.2byte	0x756c
80025e02:	000a                	.2byte	0xa
80025e04:	4142                	.2byte	0x4142
80025e06:	2044                	.2byte	0x2044
80025e08:	6966                	.2byte	0x6966
80025e0a:	656c                	.2byte	0x656c
80025e0c:	203a                	.2byte	0x203a
80025e0e:	7325                	.2byte	0x7325
80025e10:	000a                	.2byte	0xa
80025e12:	0000                	.2byte	0x0
80025e14:	6f4e                	.2byte	0x6f4e
80025e16:	7320                	.2byte	0x7320
80025e18:	6375                	.2byte	0x6375
80025e1a:	2068                	.2byte	0x2068
80025e1c:	6964                	.2byte	0x6964
80025e1e:	6572                	.2byte	0x6572
80025e20:	726f7463          	bgeu	t5,t1,80026548 <raise+0x954>
80025e24:	0a79                	.2byte	0xa79
80025e26:	0000                	.2byte	0x0
80025e28:	6544                	.2byte	0x6544
80025e2a:	656c                	.2byte	0x656c
80025e2c:	6574                	.2byte	0x6574
80025e2e:	2520                	.2byte	0x2520
80025e30:	61662073          	csrs	0x616,a2
80025e34:	6c69                	.2byte	0x6c69
80025e36:	6465                	.2byte	0x6465
80025e38:	000a                	.2byte	0xa
80025e3a:	0000                	.2byte	0x0
80025e3c:	6e65704f          	.4byte	0x6e65704f
80025e40:	2520                	.2byte	0x2520
80025e42:	61662073          	csrs	0x616,a2
80025e46:	6c69                	.2byte	0x6c69
80025e48:	6465                	.2byte	0x6465
80025e4a:	000a                	.2byte	0xa
80025e4c:	7325                	.2byte	0x7325
80025e4e:	0000                	.2byte	0x0
80025e50:	000a                	.2byte	0xa
80025e52:	0000                	.2byte	0x0
80025e54:	2074756f          	jal	a0,8006d85a <__global_pointer$+0x43af2>
80025e58:	6d20666f          	jal	a2,8002c52a <__global_pointer$+0x27c2>
80025e5c:	6d65                	.2byte	0x6d65
80025e5e:	0a79726f          	jal	tp,800bd704 <__bss_end+0x36f48>
80025e62:	0000                	.2byte	0x0
80025e64:	6552                	.2byte	0x6552
80025e66:	6461                	.2byte	0x6461
80025e68:	2520                	.2byte	0x2520
80025e6a:	61662073          	csrs	0x616,a2
80025e6e:	6c69                	.2byte	0x6c69
80025e70:	6465                	.2byte	0x6465
80025e72:	000a                	.2byte	0xa
80025e74:	74697257          	.4byte	0x74697257
80025e78:	2065                	.2byte	0x2065
80025e7a:	7325                	.2byte	0x7325
80025e7c:	6620                	.2byte	0x6620
80025e7e:	6961                	.2byte	0x6961
80025e80:	656c                	.2byte	0x656c
80025e82:	0a64                	.2byte	0xa64
80025e84:	0000                	.2byte	0x0
80025e86:	0000                	.2byte	0x0
80025e88:	74697257          	.4byte	0x74697257
80025e8c:	2065                	.2byte	0x2065
80025e8e:	6966                	.2byte	0x6966
80025e90:	656c                	.2byte	0x656c
80025e92:	6420                	.2byte	0x6420
80025e94:	7461                	.2byte	0x7461
80025e96:	2061                	.2byte	0x2061
80025e98:	6166                	.2byte	0x6166
80025e9a:	6c69                	.2byte	0x6c69
80025e9c:	6465                	.2byte	0x6465
80025e9e:	202c                	.2byte	0x202c
80025ea0:	7265                	.2byte	0x7265
80025ea2:	6e72                	.2byte	0x6e72
80025ea4:	64253d6f          	jal	s10,800794e6 <__global_pointer$+0x4f77e>
80025ea8:	000a                	.2byte	0xa
80025eaa:	0000                	.2byte	0x0
80025eac:	6e65706f          	j	8007d592 <__global_pointer$+0x5382a>
80025eb0:	2520                	.2byte	0x2520
80025eb2:	61662073          	csrs	0x616,a2
80025eb6:	6c69                	.2byte	0x6c69
80025eb8:	6465                	.2byte	0x6465
80025eba:	000a                	.2byte	0xa
80025ebc:	2e2e                	.2byte	0x2e2e
80025ebe:	0000                	.2byte	0x0
80025ec0:	002e                	.2byte	0x2e
80025ec2:	0000                	.2byte	0x0
80025ec4:	2074756f          	jal	a0,8006d8ca <__global_pointer$+0x43b62>
80025ec8:	6d20666f          	jal	a2,8002c59a <__global_pointer$+0x2832>
80025ecc:	6d65                	.2byte	0x6d65
80025ece:	2179726f          	jal	tp,800bd8e4 <__bss_end+0x37128>
80025ed2:	000a                	.2byte	0xa
80025ed4:	6e65706f          	j	8007d5ba <__global_pointer$+0x53852>
80025ed8:	6620                	.2byte	0x6620
80025eda:	6c69                	.2byte	0x6c69
80025edc:	3a65                	.2byte	0x3a65
80025ede:	2520                	.2byte	0x2520
80025ee0:	61662073          	csrs	0x616,a2
80025ee4:	6c69                	.2byte	0x6c69
80025ee6:	6465                	.2byte	0x6465
80025ee8:	000a                	.2byte	0xa
80025eea:	0000                	.2byte	0x0
80025eec:	79706f63          	bltu	zero,s7,8002668a <raise+0xa96>
80025ef0:	6620                	.2byte	0x6620
80025ef2:	6961                	.2byte	0x6961
80025ef4:	656c                	.2byte	0x656c
80025ef6:	2c64                	.2byte	0x2c64
80025ef8:	6220                	.2byte	0x6220
80025efa:	6461                	.2byte	0x6461
80025efc:	2520                	.2byte	0x2520
80025efe:	00000a73          	.4byte	0xa73
80025f02:	0000                	.2byte	0x0
80025f04:	66207063          	bgeu	zero,sp,80026564 <raise+0x970>
80025f08:	6961                	.2byte	0x6961
80025f0a:	646c                	.2byte	0x646c
80025f0c:	202c                	.2byte	0x202c
80025f0e:	64207063          	bgeu	zero,sp,8002654e <raise+0x95a>
80025f12:	7269                	.2byte	0x7269
80025f14:	7420                	.2byte	0x7420
80025f16:	6966206f          	j	800885ac <__bss_end+0x1df0>
80025f1a:	656c                	.2byte	0x656c
80025f1c:	6920                	.2byte	0x6920
80025f1e:	6f6e2073          	csrs	0x6f6,t3
80025f22:	2074                	.2byte	0x2074
80025f24:	6570                	.2byte	0x6570
80025f26:	6d72                	.2byte	0x6d72
80025f28:	7469                	.2byte	0x7469
80025f2a:	6574                	.2byte	0x6574
80025f2c:	2164                	.2byte	0x2164
80025f2e:	000a                	.2byte	0xa
80025f30:	6f66                	.2byte	0x6f66
80025f32:	6e75                	.2byte	0x6e75
80025f34:	2064                	.2byte	0x2064
80025f36:	6170                	.2byte	0x6170
80025f38:	7472                	.2byte	0x7472
80025f3a:	5d64255b          	.4byte	0x5d64255b
80025f3e:	202c                	.2byte	0x202c
80025f40:	6562                	.2byte	0x6562
80025f42:	3a6e6967          	.4byte	0x3a6e6967
80025f46:	2520                	.2byte	0x2520
80025f48:	2c64                	.2byte	0x2c64
80025f4a:	7320                	.2byte	0x7320
80025f4c:	7a69                	.2byte	0x7a69
80025f4e:	3a65                	.2byte	0x3a65
80025f50:	0020                	.2byte	0x20
80025f52:	0000                	.2byte	0x0
80025f54:	000a424b          	.4byte	0xa424b
80025f58:	6425                	.2byte	0x6425
80025f5a:	7325                	.2byte	0x7325
80025f5c:	0000                	.2byte	0x0
80025f5e:	0000                	.2byte	0x0
80025f60:	424d                	.2byte	0x424d
80025f62:	000a                	.2byte	0xa
80025f64:	6425                	.2byte	0x6425
80025f66:	252e                	.2byte	0x252e
80025f68:	2564                	.2byte	0x2564
80025f6a:	42470073          	.4byte	0x42470073
80025f6e:	000a                	.2byte	0xa
80025f70:	0000002f          	.4byte	0x2f
80025f74:	7665642f          	.4byte	0x7665642f
80025f78:	0000                	.2byte	0x0
80025f7a:	0000                	.2byte	0x0
80025f7c:	0000424b          	.4byte	0x424b
80025f80:	424d                	.2byte	0x424d
80025f82:	0000                	.2byte	0x0
80025f84:	00004247          	.4byte	0x4247
80025f88:	6664                	.2byte	0x6664
80025f8a:	74735f73          	csrrwi	t5,0x747,6
80025f8e:	7461                	.2byte	0x7461
80025f90:	7366                	.2byte	0x7366
80025f92:	6620                	.2byte	0x6620
80025f94:	6961                	.2byte	0x6961
80025f96:	656c                	.2byte	0x656c
80025f98:	2e64                	.2byte	0x2e64
80025f9a:	000a                	.2byte	0xa
80025f9c:	6964                	.2byte	0x6964
80025f9e:	66206b73          	csrrsi	s6,0x662,0
80025fa2:	6572                	.2byte	0x6572
80025fa4:	3a65                	.2byte	0x3a65
80025fa6:	2520                	.2byte	0x2520
80025fa8:	2e64                	.2byte	0x2e64
80025faa:	6425                	.2byte	0x6425
80025fac:	2520                	.2byte	0x2520
80025fae:	205b2073          	csrs	vstvec,s6
80025fb2:	6425                	.2byte	0x6425
80025fb4:	6220                	.2byte	0x6220
80025fb6:	6f6c                	.2byte	0x6f6c
80025fb8:	202c6b63          	bltu	s8,sp,800261ce <raise+0x5da>
80025fbc:	6425                	.2byte	0x6425
80025fbe:	6220                	.2byte	0x6220
80025fc0:	7479                	.2byte	0x7479
80025fc2:	7365                	.2byte	0x7365
80025fc4:	7020                	.2byte	0x7020
80025fc6:	7265                	.2byte	0x7265
80025fc8:	6220                	.2byte	0x6220
80025fca:	6f6c                	.2byte	0x6f6c
80025fcc:	5d206b63          	bltu	zero,s2,800265a2 <raise+0x9ae>
80025fd0:	000a                	.2byte	0xa
80025fd2:	0000                	.2byte	0x0
80025fd4:	7325                	.2byte	0x7325
80025fd6:	000a                	.2byte	0xa
80025fd8:	4a325b1b          	.4byte	0x4a325b1b
80025fdc:	00485b1b          	.4byte	0x485b1b
80025fe0:	002d                	.2byte	0x2d
80025fe2:	0000                	.2byte	0x0
80025fe4:	6874                	.2byte	0x6874
80025fe6:	6572                	.2byte	0x6572
80025fe8:	6461                	.2byte	0x6461
80025fea:	0000                	.2byte	0x0
80025fec:	2d25                	.2byte	0x2d25
80025fee:	2e2a                	.2byte	0x2e2a
80025ff0:	72702073          	csrr	zero,mhpmevent7h
80025ff4:	2069                	.2byte	0x2069
80025ff6:	7320                	.2byte	0x7320
80025ff8:	6174                	.2byte	0x6174
80025ffa:	7574                	.2byte	0x7574
80025ffc:	20202073          	csrr	zero,0x202
80026000:	2020                	.2byte	0x2020
80026002:	7320                	.2byte	0x7320
80026004:	2070                	.2byte	0x2070
80026006:	2020                	.2byte	0x2020
80026008:	2020                	.2byte	0x2020
8002600a:	63617473          	csrrci	s0,0x636,2
8002600e:	6973206b          	.4byte	0x6973206b
80026012:	657a                	.2byte	0x657a
80026014:	6d20                	.2byte	0x6d20
80026016:	7861                	.2byte	0x7861
80026018:	7520                	.2byte	0x7520
8002601a:	20646573          	csrrsi	a0,0x206,8
8002601e:	656c                	.2byte	0x656c
80026020:	7466                	.2byte	0x7466
80026022:	7420                	.2byte	0x7420
80026024:	6369                	.2byte	0x6369
80026026:	6520206b          	.4byte	0x6520206b
8002602a:	7272                	.2byte	0x7272
8002602c:	000a726f          	jal	tp,800cd02c <__bss_end+0x46870>
80026030:	2d20                	.2byte	0x2d20
80026032:	2d2d                	.2byte	0x2d2d
80026034:	2020                	.2byte	0x2020
80026036:	2d2d                	.2byte	0x2d2d
80026038:	2d2d                	.2byte	0x2d2d
8002603a:	2d2d                	.2byte	0x2d2d
8002603c:	202d                	.2byte	0x202d
8002603e:	2d2d                	.2byte	0x2d2d
80026040:	2d2d                	.2byte	0x2d2d
80026042:	2d2d                	.2byte	0x2d2d
80026044:	2d2d                	.2byte	0x2d2d
80026046:	2d2d                	.2byte	0x2d2d
80026048:	2d20                	.2byte	0x2d20
8002604a:	2d2d                	.2byte	0x2d2d
8002604c:	2d2d                	.2byte	0x2d2d
8002604e:	2d2d                	.2byte	0x2d2d
80026050:	2d2d                	.2byte	0x2d2d
80026052:	202d                	.2byte	0x202d
80026054:	2d20                	.2byte	0x2d20
80026056:	2d2d                	.2byte	0x2d2d
80026058:	2d2d                	.2byte	0x2d2d
8002605a:	202d                	.2byte	0x202d
8002605c:	2d20                	.2byte	0x2d20
8002605e:	2d2d                	.2byte	0x2d2d
80026060:	2d2d                	.2byte	0x2d2d
80026062:	2d2d                	.2byte	0x2d2d
80026064:	2d2d                	.2byte	0x2d2d
80026066:	202d                	.2byte	0x202d
80026068:	2d2d                	.2byte	0x2d2d
8002606a:	0a2d                	.2byte	0xa2d
8002606c:	0000                	.2byte	0x0
8002606e:	0000                	.2byte	0x0
80026070:	2d25                	.2byte	0x2d25
80026072:	2e2a                	.2byte	0x2e2a
80026074:	732a                	.2byte	0x732a
80026076:	2520                	.2byte	0x2520
80026078:	00206433          	or	s0,zero,sp
8002607c:	7220                	.2byte	0x7220
8002607e:	6165                	.2byte	0x6165
80026080:	7964                	.2byte	0x7964
80026082:	2020                	.2byte	0x2020
80026084:	0000                	.2byte	0x0
80026086:	0000                	.2byte	0x0
80026088:	7320                	.2byte	0x7320
8002608a:	7375                	.2byte	0x7375
8002608c:	6570                	.2byte	0x6570
8002608e:	646e                	.2byte	0x646e
80026090:	0000                	.2byte	0x0
80026092:	0000                	.2byte	0x0
80026094:	6920                	.2byte	0x6920
80026096:	696e                	.2byte	0x696e
80026098:	2074                	.2byte	0x2074
8002609a:	2020                	.2byte	0x2020
8002609c:	0000                	.2byte	0x0
8002609e:	0000                	.2byte	0x0
800260a0:	6320                	.2byte	0x6320
800260a2:	6f6c                	.2byte	0x6f6c
800260a4:	20206573          	csrrsi	a0,0x202,0
800260a8:	0000                	.2byte	0x0
800260aa:	0000                	.2byte	0x0
800260ac:	7220                	.2byte	0x7220
800260ae:	6e75                	.2byte	0x6e75
800260b0:	696e                	.2byte	0x696e
800260b2:	676e                	.2byte	0x676e
800260b4:	0000                	.2byte	0x0
800260b6:	0000                	.2byte	0x0
800260b8:	3020                	.2byte	0x3020
800260ba:	2578                	.2byte	0x2578
800260bc:	3830                	.2byte	0x3830
800260be:	2078                	.2byte	0x2078
800260c0:	7830                	.2byte	0x7830
800260c2:	3025                	.2byte	0x3025
800260c4:	7838                	.2byte	0x7838
800260c6:	2020                	.2byte	0x2020
800260c8:	2020                	.2byte	0x2020
800260ca:	3025                	.2byte	0x3025
800260cc:	6432                	.2byte	0x6432
800260ce:	2525                	.2byte	0x2525
800260d0:	2020                	.2byte	0x2020
800260d2:	3020                	.2byte	0x3020
800260d4:	2578                	.2byte	0x2578
800260d6:	3830                	.2byte	0x3830
800260d8:	2078                	.2byte	0x2078
800260da:	7325                	.2byte	0x7325
800260dc:	000a                	.2byte	0xa
800260de:	0000                	.2byte	0x0
800260e0:	2e25                	.2byte	0x2e25
800260e2:	732a                	.2byte	0x732a
800260e4:	0000                	.2byte	0x0
800260e6:	0000                	.2byte	0x0
800260e8:	0000002f          	.4byte	0x2f
800260ec:	616d6573          	csrrsi	a0,0x616,26
800260f0:	6870                	.2byte	0x6870
800260f2:	0065726f          	jal	tp,8007d0f8 <__global_pointer$+0x53390>
800260f6:	0000                	.2byte	0x0
800260f8:	2d25                	.2byte	0x2d25
800260fa:	2e2a                	.2byte	0x2e2a
800260fc:	20762073          	csrs	0x207,a2
80026100:	2020                	.2byte	0x2020
80026102:	70737573          	csrrci	a0,0x707,6
80026106:	6e65                	.2byte	0x6e65
80026108:	2064                	.2byte	0x2064
8002610a:	6874                	.2byte	0x6874
8002610c:	6572                	.2byte	0x6572
8002610e:	6461                	.2byte	0x6461
80026110:	000a                	.2byte	0xa
80026112:	0000                	.2byte	0x0
80026114:	2d20                	.2byte	0x2d20
80026116:	2d2d                	.2byte	0x2d2d
80026118:	2d20                	.2byte	0x2d20
8002611a:	2d2d                	.2byte	0x2d2d
8002611c:	2d2d                	.2byte	0x2d2d
8002611e:	2d2d                	.2byte	0x2d2d
80026120:	2d2d                	.2byte	0x2d2d
80026122:	2d2d                	.2byte	0x2d2d
80026124:	2d2d                	.2byte	0x2d2d
80026126:	0a2d                	.2byte	0xa2d
80026128:	0000                	.2byte	0x0
8002612a:	0000                	.2byte	0x0
8002612c:	2d25                	.2byte	0x2d25
8002612e:	2e2a                	.2byte	0x2e2a
80026130:	732a                	.2byte	0x732a
80026132:	2520                	.2byte	0x2520
80026134:	3330                	.2byte	0x3330
80026136:	2064                	.2byte	0x2064
80026138:	6425                	.2byte	0x6425
8002613a:	003a                	.2byte	0x3a
8002613c:	000a                	.2byte	0xa
8002613e:	0000                	.2byte	0x0
80026140:	2d25                	.2byte	0x2d25
80026142:	2e2a                	.2byte	0x2e2a
80026144:	732a                	.2byte	0x732a
80026146:	2520                	.2byte	0x2520
80026148:	3330                	.2byte	0x3330
8002614a:	2064                	.2byte	0x2064
8002614c:	6425                	.2byte	0x6425
8002614e:	000a                	.2byte	0xa
80026150:	7665                	.2byte	0x7665
80026152:	6e65                	.2byte	0x6e65
80026154:	0074                	.2byte	0x74
80026156:	0000                	.2byte	0x0
80026158:	2d25                	.2byte	0x2d25
8002615a:	2e2a                	.2byte	0x2e2a
8002615c:	20202073          	csrr	zero,0x202
80026160:	2020                	.2byte	0x2020
80026162:	7320                	.2byte	0x7320
80026164:	7465                	.2byte	0x7465
80026166:	2020                	.2byte	0x2020
80026168:	2020                	.2byte	0x2020
8002616a:	70737573          	csrrci	a0,0x707,6
8002616e:	6e65                	.2byte	0x6e65
80026170:	2064                	.2byte	0x2064
80026172:	6874                	.2byte	0x6874
80026174:	6572                	.2byte	0x6572
80026176:	6461                	.2byte	0x6461
80026178:	000a                	.2byte	0xa
8002617a:	0000                	.2byte	0x0
8002617c:	2020                	.2byte	0x2020
8002617e:	2d2d                	.2byte	0x2d2d
80026180:	2d2d                	.2byte	0x2d2d
80026182:	2d2d                	.2byte	0x2d2d
80026184:	2d2d                	.2byte	0x2d2d
80026186:	2d2d                	.2byte	0x2d2d
80026188:	2d20                	.2byte	0x2d20
8002618a:	2d2d                	.2byte	0x2d2d
8002618c:	2d2d                	.2byte	0x2d2d
8002618e:	2d2d                	.2byte	0x2d2d
80026190:	2d2d                	.2byte	0x2d2d
80026192:	2d2d                	.2byte	0x2d2d
80026194:	2d2d                	.2byte	0x2d2d
80026196:	0a2d                	.2byte	0xa2d
80026198:	0000                	.2byte	0x0
8002619a:	0000                	.2byte	0x0
8002619c:	2d25                	.2byte	0x2d25
8002619e:	2e2a                	.2byte	0x2e2a
800261a0:	732a                	.2byte	0x732a
800261a2:	2020                	.2byte	0x2020
800261a4:	7830                	.2byte	0x7830
800261a6:	3025                	.2byte	0x3025
800261a8:	7838                	.2byte	0x7838
800261aa:	2520                	.2byte	0x2520
800261ac:	3330                	.2byte	0x3330
800261ae:	3a64                	.2byte	0x3a64
800261b0:	0000                	.2byte	0x0
800261b2:	0000                	.2byte	0x0
800261b4:	2d25                	.2byte	0x2d25
800261b6:	2e2a                	.2byte	0x2e2a
800261b8:	732a                	.2byte	0x732a
800261ba:	2020                	.2byte	0x2020
800261bc:	7830                	.2byte	0x7830
800261be:	3025                	.2byte	0x3025
800261c0:	7838                	.2byte	0x7838
800261c2:	3020                	.2byte	0x3020
800261c4:	000a                	.2byte	0xa
800261c6:	0000                	.2byte	0x0
800261c8:	756d                	.2byte	0x756d
800261ca:	6574                	.2byte	0x6574
800261cc:	0078                	.2byte	0x78
800261ce:	0000                	.2byte	0x0
800261d0:	2d25                	.2byte	0x2d25
800261d2:	2e2a                	.2byte	0x2e2a
800261d4:	20202073          	csrr	zero,0x202
800261d8:	656e776f          	jal	a4,8010d82e <__bss_end+0x87072>
800261dc:	2072                	.2byte	0x2072
800261de:	6820                	.2byte	0x6820
800261e0:	20646c6f          	jal	s8,8006c3e6 <__global_pointer$+0x4267e>
800261e4:	70737573          	csrrci	a0,0x707,6
800261e8:	6e65                	.2byte	0x6e65
800261ea:	2064                	.2byte	0x2064
800261ec:	6874                	.2byte	0x6874
800261ee:	6572                	.2byte	0x6572
800261f0:	6461                	.2byte	0x6461
800261f2:	000a                	.2byte	0xa
800261f4:	2d20                	.2byte	0x2d20
800261f6:	2d2d                	.2byte	0x2d2d
800261f8:	2d2d                	.2byte	0x2d2d
800261fa:	2d2d                	.2byte	0x2d2d
800261fc:	202d                	.2byte	0x202d
800261fe:	2d2d                	.2byte	0x2d2d
80026200:	2d2d                	.2byte	0x2d2d
80026202:	2d20                	.2byte	0x2d20
80026204:	2d2d                	.2byte	0x2d2d
80026206:	2d2d                	.2byte	0x2d2d
80026208:	2d2d                	.2byte	0x2d2d
8002620a:	2d2d                	.2byte	0x2d2d
8002620c:	2d2d                	.2byte	0x2d2d
8002620e:	2d2d                	.2byte	0x2d2d
80026210:	0a2d                	.2byte	0xa2d
80026212:	0000                	.2byte	0x0
80026214:	2d25                	.2byte	0x2d25
80026216:	2e2a                	.2byte	0x2e2a
80026218:	732a                	.2byte	0x732a
8002621a:	2520                	.2byte	0x2520
8002621c:	382d                	.2byte	0x382d
8002621e:	2a2e                	.2byte	0x2a2e
80026220:	30252073          	csrs	medeleg,a0
80026224:	6434                	.2byte	0x6434
80026226:	2520                	.2byte	0x2520
80026228:	0a64                	.2byte	0xa64
8002622a:	0000                	.2byte	0x0
8002622c:	616d                	.2byte	0x616d
8002622e:	6c69                	.2byte	0x6c69
80026230:	6f62                	.2byte	0x6f62
80026232:	0078                	.2byte	0x78
80026234:	2d25                	.2byte	0x2d25
80026236:	2e2a                	.2byte	0x2e2a
80026238:	6e652073          	csrs	0x6e6,a0
8002623c:	7274                	.2byte	0x7274
8002623e:	2079                	.2byte	0x2079
80026240:	657a6973          	csrrsi	s2,0x657,20
80026244:	7320                	.2byte	0x7320
80026246:	7375                	.2byte	0x7375
80026248:	6570                	.2byte	0x6570
8002624a:	646e                	.2byte	0x646e
8002624c:	7420                	.2byte	0x7420
8002624e:	7268                	.2byte	0x7268
80026250:	6165                	.2byte	0x6165
80026252:	0a64                	.2byte	0xa64
80026254:	0000                	.2byte	0x0
80026256:	0000                	.2byte	0x0
80026258:	2d20                	.2byte	0x2d20
8002625a:	2d2d                	.2byte	0x2d2d
8002625c:	202d                	.2byte	0x202d
8002625e:	2d20                	.2byte	0x2d20
80026260:	2d2d                	.2byte	0x2d2d
80026262:	202d                	.2byte	0x202d
80026264:	2d2d                	.2byte	0x2d2d
80026266:	2d2d                	.2byte	0x2d2d
80026268:	2d2d                	.2byte	0x2d2d
8002626a:	2d2d                	.2byte	0x2d2d
8002626c:	2d2d                	.2byte	0x2d2d
8002626e:	2d2d                	.2byte	0x2d2d
80026270:	2d2d                	.2byte	0x2d2d
80026272:	000a                	.2byte	0xa
80026274:	2d25                	.2byte	0x2d25
80026276:	2e2a                	.2byte	0x2e2a
80026278:	732a                	.2byte	0x732a
8002627a:	2520                	.2byte	0x2520
8002627c:	3430                	.2byte	0x3430
8002627e:	2064                	.2byte	0x2064
80026280:	2520                	.2byte	0x2520
80026282:	3430                	.2byte	0x3430
80026284:	2064                	.2byte	0x2064
80026286:	6425                	.2byte	0x6425
80026288:	003a                	.2byte	0x3a
8002628a:	0000                	.2byte	0x0
8002628c:	2d25                	.2byte	0x2d25
8002628e:	2e2a                	.2byte	0x2e2a
80026290:	732a                	.2byte	0x732a
80026292:	2520                	.2byte	0x2520
80026294:	3430                	.2byte	0x3430
80026296:	2064                	.2byte	0x2064
80026298:	2520                	.2byte	0x2520
8002629a:	3430                	.2byte	0x3430
8002629c:	2064                	.2byte	0x2064
8002629e:	6425                	.2byte	0x6425
800262a0:	000a                	.2byte	0xa
800262a2:	0000                	.2byte	0x0
800262a4:	736d                	.2byte	0x736d
800262a6:	65757167          	.4byte	0x65757167
800262aa:	6575                	.2byte	0x6575
800262ac:	0000                	.2byte	0x0
800262ae:	0000                	.2byte	0x0
800262b0:	2d25                	.2byte	0x2d25
800262b2:	2e2a                	.2byte	0x2e2a
800262b4:	6e652073          	csrs	0x6e6,a0
800262b8:	7274                	.2byte	0x7274
800262ba:	2079                	.2byte	0x2079
800262bc:	70737573          	csrrci	a0,0x707,6
800262c0:	6e65                	.2byte	0x6e65
800262c2:	2064                	.2byte	0x2064
800262c4:	6874                	.2byte	0x6874
800262c6:	6572                	.2byte	0x6572
800262c8:	6461                	.2byte	0x6461
800262ca:	000a                	.2byte	0xa
800262cc:	2d20                	.2byte	0x2d20
800262ce:	2d2d                	.2byte	0x2d2d
800262d0:	202d                	.2byte	0x202d
800262d2:	2d20                	.2byte	0x2d20
800262d4:	2d2d                	.2byte	0x2d2d
800262d6:	2d2d                	.2byte	0x2d2d
800262d8:	2d2d                	.2byte	0x2d2d
800262da:	2d2d                	.2byte	0x2d2d
800262dc:	2d2d                	.2byte	0x2d2d
800262de:	2d2d                	.2byte	0x2d2d
800262e0:	0a2d                	.2byte	0xa2d
800262e2:	0000                	.2byte	0x0
800262e4:	2d25                	.2byte	0x2d25
800262e6:	2e2a                	.2byte	0x2e2a
800262e8:	732a                	.2byte	0x732a
800262ea:	2520                	.2byte	0x2520
800262ec:	3430                	.2byte	0x3430
800262ee:	2064                	.2byte	0x2064
800262f0:	2520                	.2byte	0x2520
800262f2:	3a64                	.2byte	0x3a64
800262f4:	0000                	.2byte	0x0
800262f6:	0000                	.2byte	0x0
800262f8:	2d25                	.2byte	0x2d25
800262fa:	2e2a                	.2byte	0x2e2a
800262fc:	732a                	.2byte	0x732a
800262fe:	2520                	.2byte	0x2520
80026300:	3430                	.2byte	0x3430
80026302:	2064                	.2byte	0x2064
80026304:	2520                	.2byte	0x2520
80026306:	0a64                	.2byte	0xa64
80026308:	0000                	.2byte	0x0
8002630a:	0000                	.2byte	0x0
8002630c:	656d                	.2byte	0x656d
8002630e:	706d                	.2byte	0x706d
80026310:	006c6f6f          	jal	t5,800ec316 <__bss_end+0x65b5a>
80026314:	2d25                	.2byte	0x2d25
80026316:	2e2a                	.2byte	0x2e2a
80026318:	6c622073          	csrs	0x6c6,tp
8002631c:	206b636f          	jal	t1,800dc522 <__bss_end+0x55d66>
80026320:	6f74                	.2byte	0x6f74
80026322:	6174                	.2byte	0x6174
80026324:	206c                	.2byte	0x206c
80026326:	7266                	.2byte	0x7266
80026328:	6565                	.2byte	0x6565
8002632a:	7320                	.2byte	0x7320
8002632c:	7375                	.2byte	0x7375
8002632e:	6570                	.2byte	0x6570
80026330:	646e                	.2byte	0x646e
80026332:	7420                	.2byte	0x7420
80026334:	7268                	.2byte	0x7268
80026336:	6165                	.2byte	0x6165
80026338:	0a64                	.2byte	0xa64
8002633a:	0000                	.2byte	0x0
8002633c:	2d20                	.2byte	0x2d20
8002633e:	2d2d                	.2byte	0x2d2d
80026340:	202d                	.2byte	0x202d
80026342:	2d20                	.2byte	0x2d20
80026344:	2d2d                	.2byte	0x2d2d
80026346:	202d                	.2byte	0x202d
80026348:	2d20                	.2byte	0x2d20
8002634a:	2d2d                	.2byte	0x2d2d
8002634c:	202d                	.2byte	0x202d
8002634e:	2d2d                	.2byte	0x2d2d
80026350:	2d2d                	.2byte	0x2d2d
80026352:	2d2d                	.2byte	0x2d2d
80026354:	2d2d                	.2byte	0x2d2d
80026356:	2d2d                	.2byte	0x2d2d
80026358:	2d2d                	.2byte	0x2d2d
8002635a:	2d2d                	.2byte	0x2d2d
8002635c:	000a                	.2byte	0xa
8002635e:	0000                	.2byte	0x0
80026360:	2d25                	.2byte	0x2d25
80026362:	2e2a                	.2byte	0x2e2a
80026364:	732a                	.2byte	0x732a
80026366:	2520                	.2byte	0x2520
80026368:	3430                	.2byte	0x3430
8002636a:	2064                	.2byte	0x2064
8002636c:	2520                	.2byte	0x2520
8002636e:	3430                	.2byte	0x3430
80026370:	2064                	.2byte	0x2064
80026372:	2520                	.2byte	0x2520
80026374:	3430                	.2byte	0x3430
80026376:	2064                	.2byte	0x2064
80026378:	6425                	.2byte	0x6425
8002637a:	003a                	.2byte	0x3a
8002637c:	2d25                	.2byte	0x2d25
8002637e:	2e2a                	.2byte	0x2e2a
80026380:	732a                	.2byte	0x732a
80026382:	2520                	.2byte	0x2520
80026384:	3430                	.2byte	0x3430
80026386:	2064                	.2byte	0x2064
80026388:	2520                	.2byte	0x2520
8002638a:	3430                	.2byte	0x3430
8002638c:	2064                	.2byte	0x2064
8002638e:	2520                	.2byte	0x2520
80026390:	3430                	.2byte	0x3430
80026392:	2064                	.2byte	0x2064
80026394:	6425                	.2byte	0x6425
80026396:	000a                	.2byte	0xa
80026398:	6974                	.2byte	0x6974
8002639a:	656d                	.2byte	0x656d
8002639c:	0072                	.2byte	0x72
8002639e:	0000                	.2byte	0x0
800263a0:	2d25                	.2byte	0x2d25
800263a2:	2e2a                	.2byte	0x2e2a
800263a4:	70202073          	csrr	zero,0x702
800263a8:	7265                	.2byte	0x7265
800263aa:	6f69                	.2byte	0x6f69
800263ac:	6964                	.2byte	0x6964
800263ae:	20202063          	.4byte	0x20202063
800263b2:	6974                	.2byte	0x6974
800263b4:	656d                	.2byte	0x656d
800263b6:	2074756f          	jal	a0,8006ddbc <__global_pointer$+0x44054>
800263ba:	2020                	.2byte	0x2020
800263bc:	6120                	.2byte	0x6120
800263be:	76697463          	bgeu	s2,t1,80026b26 <raise+0xf32>
800263c2:	7461                	.2byte	0x7461
800263c4:	6465                	.2byte	0x6465
800263c6:	2020                	.2byte	0x2020
800263c8:	2020                	.2byte	0x2020
800263ca:	6d20                	.2byte	0x6d20
800263cc:	0a65646f          	jal	s0,8007c472 <__global_pointer$+0x5270a>
800263d0:	0000                	.2byte	0x0
800263d2:	0000                	.2byte	0x0
800263d4:	2d20                	.2byte	0x2d20
800263d6:	2d2d                	.2byte	0x2d2d
800263d8:	2d2d                	.2byte	0x2d2d
800263da:	2d2d                	.2byte	0x2d2d
800263dc:	2d2d                	.2byte	0x2d2d
800263de:	202d                	.2byte	0x202d
800263e0:	2d2d                	.2byte	0x2d2d
800263e2:	2d2d                	.2byte	0x2d2d
800263e4:	2d2d                	.2byte	0x2d2d
800263e6:	2d2d                	.2byte	0x2d2d
800263e8:	2d2d                	.2byte	0x2d2d
800263ea:	2d20                	.2byte	0x2d20
800263ec:	2d2d                	.2byte	0x2d2d
800263ee:	2d2d                	.2byte	0x2d2d
800263f0:	2d2d                	.2byte	0x2d2d
800263f2:	2d2d                	.2byte	0x2d2d
800263f4:	2d2d                	.2byte	0x2d2d
800263f6:	2d20                	.2byte	0x2d20
800263f8:	2d2d                	.2byte	0x2d2d
800263fa:	2d2d                	.2byte	0x2d2d
800263fc:	2d2d                	.2byte	0x2d2d
800263fe:	2d2d                	.2byte	0x2d2d
80026400:	000a                	.2byte	0xa
80026402:	0000                	.2byte	0x0
80026404:	2d25                	.2byte	0x2d25
80026406:	2e2a                	.2byte	0x2e2a
80026408:	732a                	.2byte	0x732a
8002640a:	3020                	.2byte	0x3020
8002640c:	2578                	.2byte	0x2578
8002640e:	3830                	.2byte	0x3830
80026410:	2078                	.2byte	0x2078
80026412:	7830                	.2byte	0x7830
80026414:	3025                	.2byte	0x3025
80026416:	7838                	.2byte	0x7838
80026418:	0020                	.2byte	0x20
8002641a:	0000                	.2byte	0x0
8002641c:	6361                	.2byte	0x6361
8002641e:	6974                	.2byte	0x6974
80026420:	6176                	.2byte	0x6176
80026422:	6574                	.2byte	0x6574
80026424:	2064                	.2byte	0x2064
80026426:	2020                	.2byte	0x2020
80026428:	0000                	.2byte	0x0
8002642a:	0000                	.2byte	0x0
8002642c:	6564                	.2byte	0x6564
8002642e:	6361                	.2byte	0x6361
80026430:	6974                	.2byte	0x6974
80026432:	6176                	.2byte	0x6176
80026434:	6574                	.2byte	0x6574
80026436:	2064                	.2byte	0x2064
80026438:	0000                	.2byte	0x0
8002643a:	0000                	.2byte	0x0
8002643c:	6570                	.2byte	0x6570
8002643e:	6972                	.2byte	0x6972
80026440:	6369646f          	jal	s0,800bca76 <__bss_end+0x362ba>
80026444:	000a                	.2byte	0xa
80026446:	0000                	.2byte	0x0
80026448:	20656e6f          	jal	t3,8007c64e <__global_pointer$+0x528e6>
8002644c:	746f6873          	csrrsi	a6,0x746,30
80026450:	000a                	.2byte	0xa
80026452:	0000                	.2byte	0x0
80026454:	72727563          	bgeu	tp,t2,80026b7e <raise+0xf8a>
80026458:	6e65                	.2byte	0x6e65
8002645a:	2074                	.2byte	0x2074
8002645c:	6974                	.2byte	0x6974
8002645e:	303a6b63          	bltu	s4,gp,80026774 <raise+0xb80>
80026462:	2578                	.2byte	0x2578
80026464:	3830                	.2byte	0x3830
80026466:	0a78                	.2byte	0xa78
80026468:	0000                	.2byte	0x0
8002646a:	0000                	.2byte	0x0
8002646c:	72616843          	.4byte	0x72616843
80026470:	6361                	.2byte	0x6361
80026472:	6574                	.2byte	0x6574
80026474:	2072                	.2byte	0x2072
80026476:	6544                	.2byte	0x6544
80026478:	6976                	.2byte	0x6976
8002647a:	00006563          	bltu	zero,zero,80026484 <raise+0x890>
8002647e:	0000                	.2byte	0x0
80026480:	6c42                	.2byte	0x6c42
80026482:	206b636f          	jal	t1,800dc688 <__bss_end+0x55ecc>
80026486:	6544                	.2byte	0x6544
80026488:	6976                	.2byte	0x6976
8002648a:	00006563          	bltu	zero,zero,80026494 <raise+0x8a0>
8002648e:	0000                	.2byte	0x0
80026490:	654e                	.2byte	0x654e
80026492:	7774                	.2byte	0x7774
80026494:	206b726f          	jal	tp,800dd69a <__bss_end+0x56ede>
80026498:	6e49                	.2byte	0x6e49
8002649a:	6574                	.2byte	0x6574
8002649c:	6672                	.2byte	0x6672
8002649e:	6361                	.2byte	0x6361
800264a0:	0065                	.2byte	0x65
800264a2:	0000                	.2byte	0x0
800264a4:	544d                	.2byte	0x544d
800264a6:	2044                	.2byte	0x2044
800264a8:	6544                	.2byte	0x6544
800264aa:	6976                	.2byte	0x6976
800264ac:	00006563          	bltu	zero,zero,800264b6 <raise+0x8c2>
800264b0:	204e4143          	.4byte	0x204e4143
800264b4:	6544                	.2byte	0x6544
800264b6:	6976                	.2byte	0x6976
800264b8:	00006563          	bltu	zero,zero,800264c2 <raise+0x8ce>
800264bc:	5452                	.2byte	0x5452
800264be:	6f530043          	.4byte	0x6f530043
800264c2:	6e75                	.2byte	0x6e75
800264c4:	2064                	.2byte	0x2064
800264c6:	6544                	.2byte	0x6544
800264c8:	6976                	.2byte	0x6976
800264ca:	00006563          	bltu	zero,zero,800264d4 <raise+0x8e0>
800264ce:	0000                	.2byte	0x0
800264d0:	70617247          	.4byte	0x70617247
800264d4:	6968                	.2byte	0x6968
800264d6:	65442063          	.4byte	0x65442063
800264da:	6976                	.2byte	0x6976
800264dc:	00006563          	bltu	zero,zero,800264e6 <raise+0x8f2>
800264e0:	3249                	.2byte	0x3249
800264e2:	75422043          	.4byte	0x75422043
800264e6:	53550073          	.4byte	0x53550073
800264ea:	2042                	.2byte	0x2042
800264ec:	76616c53          	.4byte	0x76616c53
800264f0:	2065                	.2byte	0x2065
800264f2:	6544                	.2byte	0x6544
800264f4:	6976                	.2byte	0x6976
800264f6:	00006563          	bltu	zero,zero,80026500 <raise+0x90c>
800264fa:	0000                	.2byte	0x0
800264fc:	5355                	.2byte	0x5355
800264fe:	2042                	.2byte	0x2042
80026500:	6f48                	.2byte	0x6f48
80026502:	42207473          	csrrci	s0,0x422,0
80026506:	7375                	.2byte	0x7375
80026508:	0000                	.2byte	0x0
8002650a:	0000                	.2byte	0x0
8002650c:	5355                	.2byte	0x5355
8002650e:	2042                	.2byte	0x2042
80026510:	2047544f          	.4byte	0x2047544f
80026514:	7542                	.2byte	0x7542
80026516:	50530073          	.4byte	0x50530073
8002651a:	2049                	.2byte	0x2049
8002651c:	7542                	.2byte	0x7542
8002651e:	50530073          	.4byte	0x50530073
80026522:	2049                	.2byte	0x2049
80026524:	6544                	.2byte	0x6544
80026526:	6976                	.2byte	0x6976
80026528:	00006563          	bltu	zero,zero,80026532 <raise+0x93e>
8002652c:	4f494453          	.4byte	0x4f494453
80026530:	4220                	.2byte	0x4220
80026532:	7375                	.2byte	0x7375
80026534:	0000                	.2byte	0x0
80026536:	0000                	.2byte	0x0
80026538:	4d50                	.2byte	0x4d50
8002653a:	5020                	.2byte	0x5020
8002653c:	64756573          	csrrsi	a0,0x647,10
80026540:	6544206f          	j	80068b94 <__global_pointer$+0x3ee2c>
80026544:	6976                	.2byte	0x6976
80026546:	00006563          	bltu	zero,zero,80026550 <raise+0x95c>
8002654a:	0000                	.2byte	0x0
8002654c:	6950                	.2byte	0x6950
8002654e:	6570                	.2byte	0x6570
80026550:	0000                	.2byte	0x0
80026552:	0000                	.2byte	0x0
80026554:	6f50                	.2byte	0x6f50
80026556:	7472                	.2byte	0x7472
80026558:	6c61                	.2byte	0x6c61
8002655a:	4420                	.2byte	0x4420
8002655c:	7665                	.2byte	0x7665
8002655e:	6369                	.2byte	0x6369
80026560:	0065                	.2byte	0x65
80026562:	0000                	.2byte	0x0
80026564:	6954                	.2byte	0x6954
80026566:	656d                	.2byte	0x656d
80026568:	2072                	.2byte	0x2072
8002656a:	6544                	.2byte	0x6544
8002656c:	6976                	.2byte	0x6976
8002656e:	00006563          	bltu	zero,zero,80026578 <raise+0x984>
80026572:	0000                	.2byte	0x0
80026574:	694d                	.2byte	0x694d
80026576:	6c656373          	csrrsi	t1,0x6c6,10
8002657a:	616c                	.2byte	0x616c
8002657c:	656e                	.2byte	0x656e
8002657e:	2073756f          	jal	a0,8005df84 <__global_pointer$+0x3421c>
80026582:	6544                	.2byte	0x6544
80026584:	6976                	.2byte	0x6976
80026586:	00006563          	bltu	zero,zero,80026590 <raise+0x99c>
8002658a:	0000                	.2byte	0x0
8002658c:	736e6553          	.4byte	0x736e6553
80026590:	4420726f          	jal	tp,8002d9d2 <__global_pointer$+0x3c6a>
80026594:	7665                	.2byte	0x7665
80026596:	6369                	.2byte	0x6369
80026598:	0065                	.2byte	0x65
8002659a:	0000                	.2byte	0x0
8002659c:	6f54                	.2byte	0x6f54
8002659e:	6375                	.2byte	0x6375
800265a0:	2068                	.2byte	0x2068
800265a2:	6544                	.2byte	0x6544
800265a4:	6976                	.2byte	0x6976
800265a6:	00006563          	bltu	zero,zero,800265b0 <raise+0x9bc>
800265aa:	0000                	.2byte	0x0
800265ac:	6850                	.2byte	0x6850
800265ae:	2079                	.2byte	0x2079
800265b0:	6544                	.2byte	0x6544
800265b2:	6976                	.2byte	0x6976
800265b4:	00006563          	bltu	zero,zero,800265be <raise+0x9ca>
800265b8:	75636553          	.4byte	0x75636553
800265bc:	6972                	.2byte	0x6972
800265be:	7974                	.2byte	0x7974
800265c0:	4420                	.2byte	0x4420
800265c2:	7665                	.2byte	0x7665
800265c4:	6369                	.2byte	0x6369
800265c6:	0065                	.2byte	0x65
800265c8:	4e414c57          	.4byte	0x4e414c57
800265cc:	4420                	.2byte	0x4420
800265ce:	7665                	.2byte	0x7665
800265d0:	6369                	.2byte	0x6369
800265d2:	0065                	.2byte	0x65
800265d4:	6950                	.2byte	0x6950
800265d6:	206e                	.2byte	0x206e
800265d8:	6544                	.2byte	0x6544
800265da:	6976                	.2byte	0x6976
800265dc:	00006563          	bltu	zero,zero,800265e6 <raise+0x9f2>
800265e0:	4441                	.2byte	0x4441
800265e2:	65442043          	.4byte	0x65442043
800265e6:	6976                	.2byte	0x6976
800265e8:	00006563          	bltu	zero,zero,800265f2 <raise+0x9fe>
800265ec:	4144                	.2byte	0x4144
800265ee:	65442043          	.4byte	0x65442043
800265f2:	6976                	.2byte	0x6976
800265f4:	00006563          	bltu	zero,zero,800265fe <raise+0xa0a>
800265f8:	20544457          	.4byte	0x20544457
800265fc:	6544                	.2byte	0x6544
800265fe:	6976                	.2byte	0x6976
80026600:	00006563          	bltu	zero,zero,8002660a <raise+0xa16>
80026604:	5750                	.2byte	0x5750
80026606:	204d                	.2byte	0x204d
80026608:	6544                	.2byte	0x6544
8002660a:	6976                	.2byte	0x6976
8002660c:	00006563          	bltu	zero,zero,80026616 <raise+0xa22>
80026610:	6564                	.2byte	0x6564
80026612:	6976                	.2byte	0x6976
80026614:	00006563          	bltu	zero,zero,8002661e <raise+0xa2a>
80026618:	2d25                	.2byte	0x2d25
8002661a:	2e2a                	.2byte	0x2e2a
8002661c:	20202073          	csrr	zero,0x202
80026620:	2020                	.2byte	0x2020
80026622:	2020                	.2byte	0x2020
80026624:	2020                	.2byte	0x2020
80026626:	7974                	.2byte	0x7974
80026628:	6570                	.2byte	0x6570
8002662a:	2020                	.2byte	0x2020
8002662c:	2020                	.2byte	0x2020
8002662e:	2020                	.2byte	0x2020
80026630:	2020                	.2byte	0x2020
80026632:	7220                	.2byte	0x7220
80026634:	6665                	.2byte	0x6665
80026636:	6320                	.2byte	0x6320
80026638:	746e756f          	jal	a0,8010dd7e <__bss_end+0x875c2>
8002663c:	000a                	.2byte	0xa
8002663e:	0000                	.2byte	0x0
80026640:	2d20                	.2byte	0x2d20
80026642:	2d2d                	.2byte	0x2d2d
80026644:	2d2d                	.2byte	0x2d2d
80026646:	2d2d                	.2byte	0x2d2d
80026648:	2d2d                	.2byte	0x2d2d
8002664a:	2d2d                	.2byte	0x2d2d
8002664c:	2d2d                	.2byte	0x2d2d
8002664e:	2d2d                	.2byte	0x2d2d
80026650:	2d2d                	.2byte	0x2d2d
80026652:	2d2d                	.2byte	0x2d2d
80026654:	202d                	.2byte	0x202d
80026656:	2d2d                	.2byte	0x2d2d
80026658:	2d2d                	.2byte	0x2d2d
8002665a:	2d2d                	.2byte	0x2d2d
8002665c:	2d2d                	.2byte	0x2d2d
8002665e:	2d2d                	.2byte	0x2d2d
80026660:	000a                	.2byte	0xa
80026662:	0000                	.2byte	0x0
80026664:	6e55                	.2byte	0x6e55
80026666:	776f6e6b          	.4byte	0x776f6e6b
8002666a:	006e                	.2byte	0x6e
8002666c:	2d25                	.2byte	0x2d25
8002666e:	2e2a                	.2byte	0x2e2a
80026670:	732a                	.2byte	0x732a
80026672:	2520                	.2byte	0x2520
80026674:	322d                	.2byte	0x322d
80026676:	7330                	.2byte	0x7330
80026678:	2520                	.2byte	0x2520
8002667a:	382d                	.2byte	0x382d
8002667c:	0a64                	.2byte	0xa64
8002667e:	0000                	.2byte	0x0
80026680:	006d6573          	csrrsi	a0,0x6,26
80026684:	6466                	.2byte	0x6466
80026686:	0000                	.2byte	0x0
80026688:	7355                	.2byte	0x7355
8002668a:	6761                	.2byte	0x6761
8002668c:	3a65                	.2byte	0x3a65
8002668e:	6c20                	.2byte	0x6c20
80026690:	7369                	.2byte	0x7369
80026692:	2074                	.2byte	0x2074
80026694:	74706f5b          	.4byte	0x74706f5b
80026698:	6f69                	.2byte	0x6f69
8002669a:	736e                	.2byte	0x736e
8002669c:	0a5d                	.2byte	0xa5d
8002669e:	0000                	.2byte	0x0
800266a0:	74706f5b          	.4byte	0x74706f5b
800266a4:	6f69                	.2byte	0x6f69
800266a6:	736e                	.2byte	0x736e
800266a8:	3a5d                	.2byte	0x3a5d
800266aa:	000a                	.2byte	0xa
800266ac:	2020                	.2byte	0x2020
800266ae:	2020                	.2byte	0x2020
800266b0:	6874                	.2byte	0x6874
800266b2:	6572                	.2byte	0x6572
800266b4:	6461                	.2byte	0x6461
800266b6:	2d20                	.2byte	0x2d20
800266b8:	6c20                	.2byte	0x6c20
800266ba:	7369                	.2byte	0x7369
800266bc:	2074                	.2byte	0x2074
800266be:	6874                	.2byte	0x6874
800266c0:	6572                	.2byte	0x6572
800266c2:	6461                	.2byte	0x6461
800266c4:	00000a73          	.4byte	0xa73
800266c8:	2020                	.2byte	0x2020
800266ca:	2020                	.2byte	0x2020
800266cc:	6974                	.2byte	0x6974
800266ce:	656d                	.2byte	0x656d
800266d0:	2072                	.2byte	0x2072
800266d2:	202d                	.2byte	0x202d
800266d4:	696c                	.2byte	0x696c
800266d6:	74207473          	csrrci	s0,0x742,0
800266da:	6d69                	.2byte	0x6d69
800266dc:	7265                	.2byte	0x7265
800266de:	00000a73          	.4byte	0xa73
800266e2:	0000                	.2byte	0x0
800266e4:	2020                	.2byte	0x2020
800266e6:	2020                	.2byte	0x2020
800266e8:	206d6573          	csrrsi	a0,0x206,26
800266ec:	202d                	.2byte	0x202d
800266ee:	696c                	.2byte	0x696c
800266f0:	73207473          	csrrci	s0,mhpmevent18h,0
800266f4:	6d65                	.2byte	0x6d65
800266f6:	7061                	.2byte	0x7061
800266f8:	6f68                	.2byte	0x6f68
800266fa:	6572                	.2byte	0x6572
800266fc:	00000a73          	.4byte	0xa73
80026700:	2020                	.2byte	0x2020
80026702:	2020                	.2byte	0x2020
80026704:	756d                	.2byte	0x756d
80026706:	6574                	.2byte	0x6574
80026708:	2078                	.2byte	0x2078
8002670a:	202d                	.2byte	0x202d
8002670c:	696c                	.2byte	0x696c
8002670e:	6d207473          	csrrci	s0,0x6d2,0
80026712:	7475                	.2byte	0x7475
80026714:	7865                	.2byte	0x7865
80026716:	00000a73          	.4byte	0xa73
8002671a:	0000                	.2byte	0x0
8002671c:	2020                	.2byte	0x2020
8002671e:	2020                	.2byte	0x2020
80026720:	7665                	.2byte	0x7665
80026722:	6e65                	.2byte	0x6e65
80026724:	2074                	.2byte	0x2074
80026726:	202d                	.2byte	0x202d
80026728:	696c                	.2byte	0x696c
8002672a:	65207473          	csrrci	s0,0x652,0
8002672e:	6576                	.2byte	0x6576
80026730:	746e                	.2byte	0x746e
80026732:	00000a73          	.4byte	0xa73
80026736:	0000                	.2byte	0x0
80026738:	2020                	.2byte	0x2020
8002673a:	2020                	.2byte	0x2020
8002673c:	616d                	.2byte	0x616d
8002673e:	6c69                	.2byte	0x6c69
80026740:	6f62                	.2byte	0x6f62
80026742:	2078                	.2byte	0x2078
80026744:	202d                	.2byte	0x202d
80026746:	696c                	.2byte	0x696c
80026748:	6d207473          	csrrci	s0,0x6d2,0
8002674c:	6961                	.2byte	0x6961
8002674e:	626c                	.2byte	0x626c
80026750:	0a73786f          	jal	a6,8005dff6 <__global_pointer$+0x3428e>
80026754:	0000                	.2byte	0x0
80026756:	0000                	.2byte	0x0
80026758:	2020                	.2byte	0x2020
8002675a:	2020                	.2byte	0x2020
8002675c:	736d                	.2byte	0x736d
8002675e:	65757167          	.4byte	0x65757167
80026762:	6575                	.2byte	0x6575
80026764:	2d20                	.2byte	0x2d20
80026766:	6c20                	.2byte	0x6c20
80026768:	7369                	.2byte	0x7369
8002676a:	2074                	.2byte	0x2074
8002676c:	656d                	.2byte	0x656d
8002676e:	67617373          	csrrci	t1,0x676,2
80026772:	2065                	.2byte	0x2065
80026774:	7571                	.2byte	0x7571
80026776:	7565                	.2byte	0x7565
80026778:	7365                	.2byte	0x7365
8002677a:	000a                	.2byte	0xa
8002677c:	2020                	.2byte	0x2020
8002677e:	2020                	.2byte	0x2020
80026780:	656d                	.2byte	0x656d
80026782:	706d                	.2byte	0x706d
80026784:	206c6f6f          	jal	t5,800ec98a <__bss_end+0x661ce>
80026788:	202d                	.2byte	0x202d
8002678a:	696c                	.2byte	0x696c
8002678c:	6d207473          	csrrci	s0,0x6d2,0
80026790:	6d65                	.2byte	0x6d65
80026792:	2079726f          	jal	tp,800be198 <__bss_end+0x379dc>
80026796:	6f70                	.2byte	0x6f70
80026798:	0a736c6f          	jal	s8,8005d03e <__global_pointer$+0x332d6>
8002679c:	0000                	.2byte	0x0
8002679e:	0000                	.2byte	0x0
800267a0:	2020                	.2byte	0x2020
800267a2:	2020                	.2byte	0x2020
800267a4:	6564                	.2byte	0x6564
800267a6:	6976                	.2byte	0x6976
800267a8:	2d206563          	bltu	zero,s2,80026a72 <raise+0xe7e>
800267ac:	6c20                	.2byte	0x6c20
800267ae:	7369                	.2byte	0x7369
800267b0:	2074                	.2byte	0x2074
800267b2:	6564                	.2byte	0x6564
800267b4:	6976                	.2byte	0x6976
800267b6:	0a736563          	bltu	t1,t2,80026860 <raise+0xc6c>
800267ba:	0000                	.2byte	0x0
800267bc:	2020                	.2byte	0x2020
800267be:	2020                	.2byte	0x2020
800267c0:	6466                	.2byte	0x6466
800267c2:	2d20                	.2byte	0x2d20
800267c4:	6c20                	.2byte	0x6c20
800267c6:	7369                	.2byte	0x7369
800267c8:	2074                	.2byte	0x2074
800267ca:	6966                	.2byte	0x6966
800267cc:	656c                	.2byte	0x656c
800267ce:	6420                	.2byte	0x6420
800267d0:	7365                	.2byte	0x7365
800267d2:	70697263          	bgeu	s2,t1,80026ed6 <raise+0x12e2>
800267d6:	6f74                	.2byte	0x6f74
800267d8:	7372                	.2byte	0x7372
800267da:	000a                	.2byte	0xa
800267dc:	5452                	.2byte	0x5452
800267de:	542d                	.2byte	0x542d
800267e0:	7268                	.2byte	0x7268
800267e2:	6165                	.2byte	0x6165
800267e4:	2064                	.2byte	0x2064
800267e6:	6c656873          	csrrsi	a6,0x6c6,10
800267ea:	206c                	.2byte	0x206c
800267ec:	6d6d6f63          	bltu	s10,s6,80026eca <raise+0x12d6>
800267f0:	6e61                	.2byte	0x6e61
800267f2:	7364                	.2byte	0x7364
800267f4:	0a3a                	.2byte	0xa3a
800267f6:	0000                	.2byte	0x0
800267f8:	2d25                	.2byte	0x2d25
800267fa:	3631                	.2byte	0x3631
800267fc:	202d2073          	csrs	0x202,s10
80026800:	7325                	.2byte	0x7325
80026802:	000a                	.2byte	0xa
80026804:	000a                	.2byte	0xa
80026806:	0000                	.2byte	0x0
80026808:	6f74                	.2byte	0x6f74
8002680a:	6174                	.2byte	0x6174
8002680c:	206c                	.2byte	0x206c
8002680e:	2020                	.2byte	0x2020
80026810:	3a20                	.2byte	0x3a20
80026812:	2520                	.2byte	0x2520
80026814:	0a64                	.2byte	0xa64
80026816:	0000                	.2byte	0x0
80026818:	7375                	.2byte	0x7375
8002681a:	6465                	.2byte	0x6465
8002681c:	2020                	.2byte	0x2020
8002681e:	2020                	.2byte	0x2020
80026820:	3a20                	.2byte	0x3a20
80026822:	2520                	.2byte	0x2520
80026824:	0a64                	.2byte	0xa64
80026826:	0000                	.2byte	0x0
80026828:	616d                	.2byte	0x616d
8002682a:	6978                	.2byte	0x6978
8002682c:	756d                	.2byte	0x756d
8002682e:	206d                	.2byte	0x206d
80026830:	3a20                	.2byte	0x3a20
80026832:	2520                	.2byte	0x2520
80026834:	0a64                	.2byte	0xa64
80026836:	0000                	.2byte	0x0
80026838:	7661                	.2byte	0x7661
8002683a:	6961                	.2byte	0x6961
8002683c:	616c                	.2byte	0x616c
8002683e:	6c62                	.2byte	0x6c62
80026840:	3a65                	.2byte	0x3a65
80026842:	2520                	.2byte	0x2520
80026844:	0a64                	.2byte	0xa64
80026846:	0000                	.2byte	0x0
80026848:	6f54                	.2byte	0x6f54
8002684a:	616d206f          	j	800f8e60 <__bss_end+0x726a4>
8002684e:	796e                	.2byte	0x796e
80026850:	6120                	.2byte	0x6120
80026852:	6772                	.2byte	0x6772
80026854:	20212073          	csrs	0x202,sp
80026858:	6f206557          	.4byte	0x6f206557
8002685c:	6c6e                	.2byte	0x6c6e
8002685e:	2079                	.2byte	0x2079
80026860:	7355                	.2byte	0x7355
80026862:	3a65                	.2byte	0x3a65
80026864:	000a                	.2byte	0xa
80026866:	0000                	.2byte	0x0
80026868:	7325                	.2byte	0x7325
8002686a:	0020                	.2byte	0x20
8002686c:	7325                	.2byte	0x7325
8002686e:	203a                	.2byte	0x203a
80026870:	6d6d6f63          	bltu	s10,s6,80026f4e <raise+0x135a>
80026874:	6e61                	.2byte	0x6e61
80026876:	2064                	.2byte	0x2064
80026878:	6f6e                	.2byte	0x6f6e
8002687a:	2074                	.2byte	0x2074
8002687c:	6f66                	.2byte	0x6f66
8002687e:	6e75                	.2byte	0x6e75
80026880:	2e64                	.2byte	0x2e64
80026882:	000a                	.2byte	0xa
80026884:	0000002f          	.4byte	0x2f
80026888:	7325                	.2byte	0x7325
8002688a:	000a                	.2byte	0xa
8002688c:	732e                	.2byte	0x732e
8002688e:	0068                	.2byte	0x68
80026890:	532e                	.2byte	0x532e
80026892:	0048                	.2byte	0x48
80026894:	6e69622f          	.4byte	0x6e69622f
80026898:	2a2e252f          	.4byte	0x2a2e252f
8002689c:	00000073          	ecall
800268a0:	7355                	.2byte	0x7355
800268a2:	6761                	.2byte	0x6761
800268a4:	3a65                	.2byte	0x3a65
800268a6:	6320                	.2byte	0x6320
800268a8:	2070                	.2byte	0x2070
800268aa:	52554f53          	.4byte	0x52554f53
800268ae:	44204543          	.4byte	0x44204543
800268b2:	5345                	.2byte	0x5345
800268b4:	0a54                	.2byte	0xa54
800268b6:	0000                	.2byte	0x0
800268b8:	79706f43          	.4byte	0x79706f43
800268bc:	5320                	.2byte	0x5320
800268be:	4352554f          	.4byte	0x4352554f
800268c2:	2045                	.2byte	0x2045
800268c4:	6f74                	.2byte	0x6f74
800268c6:	4420                	.2byte	0x4420
800268c8:	5345                	.2byte	0x5345
800268ca:	2e54                	.2byte	0x2e54
800268cc:	000a                	.2byte	0xa
800268ce:	0000                	.2byte	0x0
800268d0:	7355                	.2byte	0x7355
800268d2:	6761                	.2byte	0x6761
800268d4:	3a65                	.2byte	0x3a65
800268d6:	6d20                	.2byte	0x6d20
800268d8:	2076                	.2byte	0x2076
800268da:	52554f53          	.4byte	0x52554f53
800268de:	44204543          	.4byte	0x44204543
800268e2:	5345                	.2byte	0x5345
800268e4:	0a54                	.2byte	0xa54
800268e6:	0000                	.2byte	0x0
800268e8:	6552                	.2byte	0x6552
800268ea:	616e                	.2byte	0x616e
800268ec:	656d                	.2byte	0x656d
800268ee:	5320                	.2byte	0x5320
800268f0:	4352554f          	.4byte	0x4352554f
800268f4:	2045                	.2byte	0x2045
800268f6:	6f74                	.2byte	0x6f74
800268f8:	4420                	.2byte	0x4420
800268fa:	5345                	.2byte	0x5345
800268fc:	2c54                	.2byte	0x2c54
800268fe:	6f20                	.2byte	0x6f20
80026900:	2072                	.2byte	0x2072
80026902:	6f6d                	.2byte	0x6f6d
80026904:	6576                	.2byte	0x6576
80026906:	5320                	.2byte	0x5320
80026908:	4352554f          	.4byte	0x4352554f
8002690c:	2845                	.2byte	0x2845
8002690e:	74202973          	csrr	s2,0x742
80026912:	4944206f          	j	80068da6 <__global_pointer$+0x3f03e>
80026916:	4552                	.2byte	0x4552
80026918:	524f5443          	.4byte	0x524f5443
8002691c:	2e59                	.2byte	0x2e59
8002691e:	000a                	.2byte	0xa
80026920:	7325                	.2byte	0x7325
80026922:	3d20                	.2byte	0x3d20
80026924:	203e                	.2byte	0x203e
80026926:	7325                	.2byte	0x7325
80026928:	000a                	.2byte	0xa
8002692a:	0000                	.2byte	0x0
8002692c:	2074756f          	jal	a0,8006e332 <__global_pointer$+0x445ca>
80026930:	6d20666f          	jal	a2,8002d002 <__global_pointer$+0x329a>
80026934:	6d65                	.2byte	0x6d65
80026936:	0a79726f          	jal	tp,800be1dc <__bss_end+0x37a20>
8002693a:	0000                	.2byte	0x0
8002693c:	7325                	.2byte	0x7325
8002693e:	0073252f          	amoadd.w	a0,t2,(t1)
80026942:	0000                	.2byte	0x0
80026944:	7355                	.2byte	0x7355
80026946:	6761                	.2byte	0x6761
80026948:	3a65                	.2byte	0x3a65
8002694a:	6320                	.2byte	0x6320
8002694c:	7461                	.2byte	0x7461
8002694e:	5b20                	.2byte	0x5b20
80026950:	4946                	.2byte	0x4946
80026952:	454c                	.2byte	0x454c
80026954:	2e5d                	.2byte	0x2e5d
80026956:	2e2e                	.2byte	0x2e2e
80026958:	000a                	.2byte	0xa
8002695a:	0000                	.2byte	0x0
8002695c:	636e6f43          	.4byte	0x636e6f43
80026960:	7461                	.2byte	0x7461
80026962:	6e65                	.2byte	0x6e65
80026964:	7461                	.2byte	0x7461
80026966:	2065                	.2byte	0x2065
80026968:	4946                	.2byte	0x4946
8002696a:	454c                	.2byte	0x454c
8002696c:	7328                	.2byte	0x7328
8002696e:	0a29                	.2byte	0xa29
80026970:	0000                	.2byte	0x0
80026972:	0000                	.2byte	0x0
80026974:	6e6e6163          	bltu	t3,t1,80027056 <raise+0x1462>
80026978:	7220746f          	jal	s0,8002e09a <__global_pointer$+0x4332>
8002697c:	6d65                	.2byte	0x6d65
8002697e:	2065766f          	jal	a2,8007db84 <__global_pointer$+0x53e1c>
80026982:	27732527          	.4byte	0x27732527
80026986:	000a                	.2byte	0xa
80026988:	002e                	.2byte	0x2e
8002698a:	0000                	.2byte	0x0
8002698c:	2e2e                	.2byte	0x2e2e
8002698e:	0000                	.2byte	0x0
80026990:	6572                	.2byte	0x6572
80026992:	6f6d                	.2byte	0x6f6d
80026994:	6576                	.2byte	0x6576
80026996:	2064                	.2byte	0x2064
80026998:	27732527          	.4byte	0x27732527
8002699c:	000a                	.2byte	0xa
8002699e:	0000                	.2byte	0x0
800269a0:	6572                	.2byte	0x6572
800269a2:	6f6d                	.2byte	0x6f6d
800269a4:	6576                	.2byte	0x6576
800269a6:	2064                	.2byte	0x2064
800269a8:	6964                	.2byte	0x6964
800269aa:	6572                	.2byte	0x6572
800269ac:	726f7463          	bgeu	t5,t1,800270d4 <raise+0x14e0>
800269b0:	2079                	.2byte	0x2079
800269b2:	27732527          	.4byte	0x27732527
800269b6:	000a                	.2byte	0xa
800269b8:	7355                	.2byte	0x7355
800269ba:	6761                	.2byte	0x6761
800269bc:	3a65                	.2byte	0x3a65
800269be:	7220                	.2byte	0x7220
800269c0:	206d                	.2byte	0x206d
800269c2:	6974706f          	j	8006e858 <__global_pointer$+0x44af0>
800269c6:	73286e6f          	jal	t3,800ad0f8 <__bss_end+0x2693c>
800269ca:	2029                	.2byte	0x2029
800269cc:	4946                	.2byte	0x4946
800269ce:	454c                	.2byte	0x454c
800269d0:	2e2e                	.2byte	0x2e2e
800269d2:	0a2e                	.2byte	0xa2e
800269d4:	0000                	.2byte	0x0
800269d6:	0000                	.2byte	0x0
800269d8:	6552                	.2byte	0x6552
800269da:	6f6d                	.2byte	0x6f6d
800269dc:	6576                	.2byte	0x6576
800269de:	2820                	.2byte	0x2820
800269e0:	6e75                	.2byte	0x6e75
800269e2:	696c                	.2byte	0x696c
800269e4:	6b6e                	.2byte	0x6b6e
800269e6:	2029                	.2byte	0x2029
800269e8:	6874                	.2byte	0x6874
800269ea:	2065                	.2byte	0x2065
800269ec:	4946                	.2byte	0x4946
800269ee:	454c                	.2byte	0x454c
800269f0:	7328                	.2byte	0x7328
800269f2:	2e29                	.2byte	0x2e29
800269f4:	000a                	.2byte	0xa
800269f6:	0000                	.2byte	0x0
800269f8:	7245                	.2byte	0x7245
800269fa:	6f72                	.2byte	0x6f72
800269fc:	3a72                	.2byte	0x3a72
800269fe:	4220                	.2byte	0x4220
80026a00:	6461                	.2byte	0x6461
80026a02:	6f20                	.2byte	0x6f20
80026a04:	7470                	.2byte	0x7470
80026a06:	6f69                	.2byte	0x6f69
80026a08:	3a6e                	.2byte	0x3a6e
80026a0a:	2520                	.2byte	0x2520
80026a0c:	00000a63          	beqz	zero,80026a20 <raise+0xe2c>
80026a10:	6e6e6163          	bltu	t3,t1,800270f2 <raise+0x14fe>
80026a14:	7220746f          	jal	s0,8002e136 <__global_pointer$+0x43ce>
80026a18:	6d65                	.2byte	0x6d65
80026a1a:	2065766f          	jal	a2,8007dc20 <__global_pointer$+0x53eb8>
80026a1e:	27732527          	.4byte	0x27732527
80026a22:	203a                	.2byte	0x203a
80026a24:	7349                	.2byte	0x7349
80026a26:	6120                	.2byte	0x6120
80026a28:	6420                	.2byte	0x6420
80026a2a:	7269                	.2byte	0x7269
80026a2c:	6365                	.2byte	0x6365
80026a2e:	6f74                	.2byte	0x6f74
80026a30:	7972                	.2byte	0x7972
80026a32:	000a                	.2byte	0xa
80026a34:	6e6e6163          	bltu	t3,t1,80027116 <raise+0x1522>
80026a38:	7220746f          	jal	s0,8002e15a <__global_pointer$+0x43f2>
80026a3c:	6d65                	.2byte	0x6d65
80026a3e:	2065766f          	jal	a2,8007dc44 <__global_pointer$+0x53edc>
80026a42:	27732527          	.4byte	0x27732527
80026a46:	203a                	.2byte	0x203a
80026a48:	6f4e                	.2byte	0x6f4e
80026a4a:	7320                	.2byte	0x7320
80026a4c:	6375                	.2byte	0x6375
80026a4e:	2068                	.2byte	0x2068
80026a50:	6966                	.2byte	0x6966
80026a52:	656c                	.2byte	0x656c
80026a54:	6f20                	.2byte	0x6f20
80026a56:	2072                	.2byte	0x2072
80026a58:	6964                	.2byte	0x6964
80026a5a:	6572                	.2byte	0x6572
80026a5c:	726f7463          	bgeu	t5,t1,80027184 <raise+0x1590>
80026a60:	0a79                	.2byte	0xa79
80026a62:	0000                	.2byte	0x0
80026a64:	7325                	.2byte	0x7325
80026a66:	000a                	.2byte	0xa
80026a68:	6f4e                	.2byte	0x6f4e
80026a6a:	7320                	.2byte	0x7320
80026a6c:	6375                	.2byte	0x6375
80026a6e:	2068                	.2byte	0x2068
80026a70:	6964                	.2byte	0x6964
80026a72:	6572                	.2byte	0x6572
80026a74:	726f7463          	bgeu	t5,t1,8002719c <raise+0x15a8>
80026a78:	3a79                	.2byte	0x3a79
80026a7a:	2520                	.2byte	0x2520
80026a7c:	00000a73          	.4byte	0xa73
80026a80:	7355                	.2byte	0x7355
80026a82:	6761                	.2byte	0x6761
80026a84:	3a65                	.2byte	0x3a65
80026a86:	6d20                	.2byte	0x6d20
80026a88:	7269646b          	.4byte	0x7269646b
80026a8c:	5b20                	.2byte	0x5b20
80026a8e:	4954504f          	.4byte	0x4954504f
80026a92:	205d4e4f          	.4byte	0x205d4e4f
80026a96:	4944                	.2byte	0x4944
80026a98:	4552                	.2byte	0x4552
80026a9a:	524f5443          	.4byte	0x524f5443
80026a9e:	0a59                	.2byte	0xa59
80026aa0:	0000                	.2byte	0x0
80026aa2:	0000                	.2byte	0x0
80026aa4:	61657243          	.4byte	0x61657243
80026aa8:	6574                	.2byte	0x6574
80026aaa:	7420                	.2byte	0x7420
80026aac:	6568                	.2byte	0x6568
80026aae:	4420                	.2byte	0x4420
80026ab0:	5249                	.2byte	0x5249
80026ab2:	4345                	.2byte	0x4345
80026ab4:	4f54                	.2byte	0x4f54
80026ab6:	5952                	.2byte	0x5952
80026ab8:	202c                	.2byte	0x202c
80026aba:	6669                	.2byte	0x6669
80026abc:	7420                	.2byte	0x7420
80026abe:	6568                	.2byte	0x6568
80026ac0:	2079                	.2byte	0x2079
80026ac2:	6f64                	.2byte	0x6f64
80026ac4:	6e20                	.2byte	0x6e20
80026ac6:	6120746f          	jal	s0,8002e0d8 <__global_pointer$+0x4370>
80026aca:	726c                	.2byte	0x726c
80026acc:	6165                	.2byte	0x6165
80026ace:	7964                	.2byte	0x7964
80026ad0:	6520                	.2byte	0x6520
80026ad2:	6978                	.2byte	0x6978
80026ad4:	0a2e7473          	csrrci	s0,0xa2,28
80026ad8:	0000                	.2byte	0x0
80026ada:	0000                	.2byte	0x0
80026adc:	6c65                	.2byte	0x6c65
80026ade:	006d                	.2byte	0x6d
80026ae0:	742d                	.2byte	0x742d
80026ae2:	0000                	.2byte	0x0
80026ae4:	7355                	.2byte	0x7355
80026ae6:	6761                	.2byte	0x6761
80026ae8:	3a65                	.2byte	0x3a65
80026aea:	6d20                	.2byte	0x6d20
80026aec:	2073666b          	.4byte	0x2073666b
80026af0:	20742d5b          	.4byte	0x20742d5b
80026af4:	7974                	.2byte	0x7974
80026af6:	6570                	.2byte	0x6570
80026af8:	205d                	.2byte	0x205d
80026afa:	6564                	.2byte	0x6564
80026afc:	6976                	.2byte	0x6976
80026afe:	000a6563          	bltu	s4,zero,80026b08 <raise+0xf14>
80026b02:	0000                	.2byte	0x0
80026b04:	6b6d                	.2byte	0x6b6d
80026b06:	7366                	.2byte	0x7366
80026b08:	6620                	.2byte	0x6620
80026b0a:	6961                	.2byte	0x6961
80026b0c:	656c                	.2byte	0x656c
80026b0e:	2c64                	.2byte	0x2c64
80026b10:	7220                	.2byte	0x7220
80026b12:	7365                	.2byte	0x7365
80026b14:	6c75                	.2byte	0x6c75
80026b16:	3d74                	.2byte	0x3d74
80026b18:	6425                	.2byte	0x6425
80026b1a:	000a                	.2byte	0xa
80026b1c:	6966                	.2byte	0x6966
80026b1e:	656c                	.2byte	0x656c
80026b20:	74737973          	csrrci	s2,0x747,6
80026b24:	6d65                	.2byte	0x6d65
80026b26:	2020                	.2byte	0x2020
80026b28:	6564                	.2byte	0x6564
80026b2a:	6976                	.2byte	0x6976
80026b2c:	20206563          	bltu	zero,sp,80026d36 <raise+0x1142>
80026b30:	6f6d                	.2byte	0x6f6d
80026b32:	6e75                	.2byte	0x6e75
80026b34:	7074                	.2byte	0x7074
80026b36:	746e696f          	jal	s2,8010d27c <__bss_end+0x86ac0>
80026b3a:	000a                	.2byte	0xa
80026b3c:	2d2d                	.2byte	0x2d2d
80026b3e:	2d2d                	.2byte	0x2d2d
80026b40:	2d2d                	.2byte	0x2d2d
80026b42:	2d2d                	.2byte	0x2d2d
80026b44:	2d2d                	.2byte	0x2d2d
80026b46:	2020                	.2byte	0x2020
80026b48:	2d2d                	.2byte	0x2d2d
80026b4a:	2d2d                	.2byte	0x2d2d
80026b4c:	2d2d                	.2byte	0x2d2d
80026b4e:	2020                	.2byte	0x2020
80026b50:	2d2d                	.2byte	0x2d2d
80026b52:	2d2d                	.2byte	0x2d2d
80026b54:	2d2d                	.2byte	0x2d2d
80026b56:	2d2d                	.2byte	0x2d2d
80026b58:	2d2d                	.2byte	0x2d2d
80026b5a:	000a                	.2byte	0xa
80026b5c:	2d25                	.2byte	0x2d25
80026b5e:	3031                	.2byte	0x3031
80026b60:	25202073          	csrr	zero,0x252
80026b64:	362d                	.2byte	0x362d
80026b66:	25202073          	csrr	zero,0x252
80026b6a:	732d                	.2byte	0x732d
80026b6c:	000a                	.2byte	0xa
80026b6e:	0000                	.2byte	0x0
80026b70:	6f6d                	.2byte	0x6f6d
80026b72:	6e75                	.2byte	0x6e75
80026b74:	2074                	.2byte	0x2074
80026b76:	6564                	.2byte	0x6564
80026b78:	6976                	.2byte	0x6976
80026b7a:	25206563          	bltu	zero,s2,80026dc4 <raise+0x11d0>
80026b7e:	73252873          	csrrs	a6,mhpmevent18h,a0
80026b82:	2029                	.2byte	0x2029
80026b84:	6f746e6f          	jal	t3,8006da7a <__global_pointer$+0x43d12>
80026b88:	2520                	.2byte	0x2520
80026b8a:	2e2e2073          	csrs	0x2e2,t3
80026b8e:	202e                	.2byte	0x202e
80026b90:	0000                	.2byte	0x0
80026b92:	0000                	.2byte	0x0
80026b94:	63637573          	csrrci	a0,0x636,6
80026b98:	6565                	.2byte	0x6565
80026b9a:	2164                	.2byte	0x2164
80026b9c:	000a                	.2byte	0xa
80026b9e:	0000                	.2byte	0x0
80026ba0:	6166                	.2byte	0x6166
80026ba2:	6c69                	.2byte	0x6c69
80026ba4:	6465                	.2byte	0x6465
80026ba6:	0a21                	.2byte	0xa21
80026ba8:	0000                	.2byte	0x0
80026baa:	0000                	.2byte	0x0
80026bac:	7355                	.2byte	0x7355
80026bae:	6761                	.2byte	0x6761
80026bb0:	3a65                	.2byte	0x3a65
80026bb2:	6d20                	.2byte	0x6d20
80026bb4:	746e756f          	jal	a0,8010e2fa <__bss_end+0x87b3e>
80026bb8:	3c20                	.2byte	0x3c20
80026bba:	6564                	.2byte	0x6564
80026bbc:	6976                	.2byte	0x6976
80026bbe:	203e6563          	bltu	t3,gp,80026dc8 <raise+0x11d4>
80026bc2:	6d3c                	.2byte	0x6d3c
80026bc4:	746e756f          	jal	a0,8010e30a <__bss_end+0x87b4e>
80026bc8:	6f70                	.2byte	0x6f70
80026bca:	6e69                	.2byte	0x6e69
80026bcc:	3e74                	.2byte	0x3e74
80026bce:	3c20                	.2byte	0x3c20
80026bd0:	7366                	.2byte	0x7366
80026bd2:	7974                	.2byte	0x7974
80026bd4:	6570                	.2byte	0x6570
80026bd6:	2e3e                	.2byte	0x2e3e
80026bd8:	000a                	.2byte	0xa
80026bda:	0000                	.2byte	0x0
80026bdc:	7355                	.2byte	0x7355
80026bde:	6761                	.2byte	0x6761
80026be0:	3a65                	.2byte	0x3a65
80026be2:	7520                	.2byte	0x7520
80026be4:	6d6e                	.2byte	0x6d6e
80026be6:	746e756f          	jal	a0,8010e32c <__bss_end+0x87b70>
80026bea:	3c20                	.2byte	0x3c20
80026bec:	6f6d                	.2byte	0x6f6d
80026bee:	6e75                	.2byte	0x6e75
80026bf0:	7074                	.2byte	0x7074
80026bf2:	746e696f          	jal	s2,8010d338 <__bss_end+0x86b7c>
80026bf6:	2e3e                	.2byte	0x2e3e
80026bf8:	000a                	.2byte	0xa
80026bfa:	0000                	.2byte	0x0
80026bfc:	6e75                	.2byte	0x6e75
80026bfe:	6f6d                	.2byte	0x6f6d
80026c00:	6e75                	.2byte	0x6e75
80026c02:	2074                	.2byte	0x2074
80026c04:	7325                	.2byte	0x7325
80026c06:	2e20                	.2byte	0x2e20
80026c08:	2e2e                	.2byte	0x2e2e
80026c0a:	0020                	.2byte	0x20
80026c0c:	0000002f          	.4byte	0x2f
80026c10:	2d2d                	.2byte	0x2d2d
80026c12:	6568                	.2byte	0x6568
80026c14:	706c                	.2byte	0x706c
80026c16:	0000                	.2byte	0x0
80026c18:	682d                	.2byte	0x682d
80026c1a:	0000                	.2byte	0x0
80026c1c:	6664                	.2byte	0x6664
80026c1e:	5b20                	.2byte	0x5b20
80026c20:	6170                	.2byte	0x6170
80026c22:	6874                	.2byte	0x6874
80026c24:	0a5d                	.2byte	0xa5d
80026c26:	0000                	.2byte	0x0
80026c28:	6e65706f          	j	8007e30e <__global_pointer$+0x545a6>
80026c2c:	6620                	.2byte	0x6620
80026c2e:	6c69                	.2byte	0x6c69
80026c30:	3a65                	.2byte	0x3a65
80026c32:	7325                	.2byte	0x7325
80026c34:	6620                	.2byte	0x6620
80026c36:	6961                	.2byte	0x6961
80026c38:	656c                	.2byte	0x656c
80026c3a:	2164                	.2byte	0x2164
80026c3c:	000a                	.2byte	0xa
80026c3e:	0000                	.2byte	0x0
80026c40:	7355                	.2byte	0x7355
80026c42:	6761                	.2byte	0x6761
80026c44:	3a65                	.2byte	0x3a65
80026c46:	6520                	.2byte	0x6520
80026c48:	206f6863          	bltu	t5,t1,80026e58 <raise+0x1264>
80026c4c:	7322                	.2byte	0x7322
80026c4e:	7274                	.2byte	0x7274
80026c50:	6e69                	.2byte	0x6e69
80026c52:	5b202267          	.4byte	0x5b202267
80026c56:	6966                	.2byte	0x6966
80026c58:	656c                	.2byte	0x656c
80026c5a:	616e                	.2byte	0x616e
80026c5c:	656d                	.2byte	0x656d
80026c5e:	0a5d                	.2byte	0xa5d
80026c60:	0000                	.2byte	0x0
80026c62:	0000                	.2byte	0x0
80026c64:	7355                	.2byte	0x7355
80026c66:	6761                	.2byte	0x6761
80026c68:	3a65                	.2byte	0x3a65
80026c6a:	7420                	.2byte	0x7420
80026c6c:	6961                	.2byte	0x6961
80026c6e:	206c                	.2byte	0x206c
80026c70:	206e2d5b          	.4byte	0x206e2d5b
80026c74:	756e                	.2byte	0x756e
80026c76:	626d                	.2byte	0x626d
80026c78:	7265                	.2byte	0x7265
80026c7a:	3c205d73          	csrrwi	s10,0x3c2,0
80026c7e:	6966                	.2byte	0x6966
80026c80:	656c                	.2byte	0x656c
80026c82:	616e                	.2byte	0x616e
80026c84:	656d                	.2byte	0x656d
80026c86:	0a3e                	.2byte	0xa3e
80026c88:	0000                	.2byte	0x0
80026c8a:	0000                	.2byte	0x0
80026c8c:	6e2d                	.2byte	0x6e2d
80026c8e:	0000                	.2byte	0x0
80026c90:	6946                	.2byte	0x6946
80026c92:	656c                	.2byte	0x656c
80026c94:	6420                	.2byte	0x6420
80026c96:	6e73656f          	jal	a0,8005db7c <__global_pointer$+0x33e14>
80026c9a:	65207427          	.4byte	0x65207427
80026c9e:	6978                	.2byte	0x6978
80026ca0:	000a7473          	csrrci	s0,ustatus,20
80026ca4:	540a                	.2byte	0x540a
80026ca6:	6c61746f          	jal	s0,8003e36c <__global_pointer$+0x14604>
80026caa:	4e20                	.2byte	0x4e20
80026cac:	6d75                	.2byte	0x6d75
80026cae:	6562                	.2byte	0x6562
80026cb0:	2072                	.2byte	0x2072
80026cb2:	6c20666f          	jal	a2,8002d374 <__global_pointer$+0x360c>
80026cb6:	6e69                	.2byte	0x6e69
80026cb8:	7365                	.2byte	0x7365
80026cba:	253a                	.2byte	0x253a
80026cbc:	0a64                	.2byte	0xa64
80026cbe:	0000                	.2byte	0x0
80026cc0:	450a                	.2byte	0x450a
80026cc2:	7272                	.2byte	0x7272
80026cc4:	523a726f          	jal	tp,800ce9e6 <__bss_end+0x4822a>
80026cc8:	7165                	.2byte	0x7165
80026cca:	6975                	.2byte	0x6975
80026ccc:	6572                	.2byte	0x6572
80026cce:	2064                	.2byte	0x2064
80026cd0:	696c                	.2byte	0x696c
80026cd2:	656e                	.2byte	0x656e
80026cd4:	72612073          	csrs	mhpmevent6h,sp
80026cd8:	2065                	.2byte	0x2065
80026cda:	6f6d                	.2byte	0x6f6d
80026cdc:	6572                	.2byte	0x6572
80026cde:	7420                	.2byte	0x7420
80026ce0:	6168                	.2byte	0x6168
80026ce2:	206e                	.2byte	0x206e
80026ce4:	6f74                	.2byte	0x6f74
80026ce6:	6174                	.2byte	0x6174
80026ce8:	206c                	.2byte	0x206c
80026cea:	756e                	.2byte	0x756e
80026cec:	626d                	.2byte	0x626d
80026cee:	7265                	.2byte	0x7265
80026cf0:	6f20                	.2byte	0x6f20
80026cf2:	2066                	.2byte	0x2066
80026cf4:	696c                	.2byte	0x696c
80026cf6:	656e                	.2byte	0x656e
80026cf8:	00000a73          	.4byte	0xa73
80026cfc:	6552                	.2byte	0x6552
80026cfe:	7571                	.2byte	0x7571
80026d00:	7269                	.2byte	0x7269
80026d02:	6465                	.2byte	0x6465
80026d04:	4e20                	.2byte	0x4e20
80026d06:	6d75                	.2byte	0x6d75
80026d08:	6562                	.2byte	0x6562
80026d0a:	2072                	.2byte	0x2072
80026d0c:	6c20666f          	jal	a2,8002d3ce <__global_pointer$+0x3666>
80026d10:	6e69                	.2byte	0x6e69
80026d12:	7365                	.2byte	0x7365
80026d14:	253a                	.2byte	0x253a
80026d16:	0a64                	.2byte	0xa64
80026d18:	0000                	.2byte	0x0
80026d1a:	0000                	.2byte	0x0
80026d1c:	6325                	.2byte	0x6325
80026d1e:	0000                	.2byte	0x0
80026d20:	000a                	.2byte	0xa
80026d22:	0000                	.2byte	0x0
80026d24:	736d                	.2byte	0x736d
80026d26:	2068                	.2byte	0x2068
80026d28:	0000                	.2byte	0x0
80026d2a:	0000                	.2byte	0x0
80026d2c:	003e                	.2byte	0x3e
80026d2e:	0000                	.2byte	0x0
80026d30:	6966                	.2byte	0x6966
80026d32:	736e                	.2byte	0x736e
80026d34:	3a68                	.2byte	0x3a68
80026d36:	6320                	.2byte	0x6320
80026d38:	6e61                	.2byte	0x6e61
80026d3a:	6e20                	.2byte	0x6e20
80026d3c:	6620746f          	jal	s0,8002e39e <__global_pointer$+0x4636>
80026d40:	6e69                	.2byte	0x6e69
80026d42:	2064                	.2byte	0x2064
80026d44:	6564                	.2byte	0x6564
80026d46:	6976                	.2byte	0x6976
80026d48:	203a6563          	bltu	s4,gp,80026f52 <raise+0x135e>
80026d4c:	7325                	.2byte	0x7325
80026d4e:	000a                	.2byte	0xa
80026d50:	000a                	.2byte	0xa
80026d52:	0000                	.2byte	0x0
80026d54:	7325                	.2byte	0x7325
80026d56:	7325                	.2byte	0x7325
80026d58:	0000                	.2byte	0x0
80026d5a:	0000                	.2byte	0x0
80026d5c:	4b325b1b          	.4byte	0x4b325b1b
80026d60:	000d                	.2byte	0xd
80026d62:	0000                	.2byte	0x0
80026d64:	0008                	.2byte	0x8
80026d66:	0000                	.2byte	0x0
80026d68:	6325                	.2byte	0x6325
80026d6a:	0000                	.2byte	0x0
80026d6c:	2508                	.2byte	0x2508
80026d6e:	08202073          	csrr	zero,0x82
80026d72:	0000                	.2byte	0x0
80026d74:	2008                	.2byte	0x2008
80026d76:	0008                	.2byte	0x8
80026d78:	7325                	.2byte	0x7325
80026d7a:	0000                	.2byte	0x0
80026d7c:	6f6e                	.2byte	0x6f6e
80026d7e:	6d20                	.2byte	0x6d20
80026d80:	6d65                	.2byte	0x6d65
80026d82:	2079726f          	jal	tp,800be788 <__bss_end+0x37fcc>
80026d86:	6f66                	.2byte	0x6f66
80026d88:	2072                	.2byte	0x2072
80026d8a:	6c656873          	csrrsi	a6,0x6c6,10
80026d8e:	0a6c                	.2byte	0xa6c
80026d90:	0000                	.2byte	0x0
80026d92:	0000                	.2byte	0x0
80026d94:	7374                	.2byte	0x7374
80026d96:	6568                	.2byte	0x6568
80026d98:	6c6c                	.2byte	0x6c6c
80026d9a:	0000                	.2byte	0x0
80026d9c:	78726873          	csrrsi	a6,0x787,4
80026da0:	0000                	.2byte	0x0
80026da2:	0000                	.2byte	0x0
80026da4:	4e55                	.2byte	0x4e55
80026da6:	682d                	.2byte	0x682d
80026da8:	6e61                	.2byte	0x6e61
80026daa:	6c64                	.2byte	0x6c64
80026dac:	6465                	.2byte	0x6465
80026dae:	6920                	.2byte	0x6920
80026db0:	746e                	.2byte	0x746e
80026db2:	7265                	.2byte	0x7265
80026db4:	7572                	.2byte	0x7572
80026db6:	7470                	.2byte	0x7470
80026db8:	2520                	.2byte	0x2520
80026dba:	2064                	.2byte	0x2064
80026dbc:	7563636f          	jal	t1,8005d512 <__global_pointer$+0x337aa>
80026dc0:	7272                	.2byte	0x7272
80026dc2:	6465                	.2byte	0x6465
80026dc4:	2121                	.2byte	0x2121
80026dc6:	0a21                	.2byte	0xa21
80026dc8:	0000                	.2byte	0x0
80026dca:	0000                	.2byte	0x0
80026dcc:	6564                	.2byte	0x6564
80026dce:	6166                	.2byte	0x6166
80026dd0:	6c75                	.2byte	0x6c75
80026dd2:	0074                	.2byte	0x74
80026dd4:	7325                	.2byte	0x7325
80026dd6:	0000                	.2byte	0x0
80026dd8:	2d2d                	.2byte	0x2d2d
80026dda:	2d2d                	.2byte	0x2d2d
80026ddc:	2d2d                	.2byte	0x2d2d
80026dde:	2d2d                	.2byte	0x2d2d
80026de0:	2d2d                	.2byte	0x2d2d
80026de2:	2d2d                	.2byte	0x2d2d
80026de4:	2d2d                	.2byte	0x2d2d
80026de6:	7544                	.2byte	0x7544
80026de8:	706d                	.2byte	0x706d
80026dea:	5220                	.2byte	0x5220
80026dec:	6765                	.2byte	0x6765
80026dee:	7369                	.2byte	0x7369
80026df0:	6574                	.2byte	0x6574
80026df2:	7372                	.2byte	0x7372
80026df4:	2d2d                	.2byte	0x2d2d
80026df6:	2d2d                	.2byte	0x2d2d
80026df8:	2d2d                	.2byte	0x2d2d
80026dfa:	2d2d                	.2byte	0x2d2d
80026dfc:	2d2d                	.2byte	0x2d2d
80026dfe:	2d2d                	.2byte	0x2d2d
80026e00:	2d2d                	.2byte	0x2d2d
80026e02:	2d2d                	.2byte	0x2d2d
80026e04:	0a2d                	.2byte	0xa2d
80026e06:	0000                	.2byte	0x0
80026e08:	7546                	.2byte	0x7546
80026e0a:	636e                	.2byte	0x636e
80026e0c:	6974                	.2byte	0x6974
80026e0e:	52206e6f          	jal	t3,8002d330 <__global_pointer$+0x35c8>
80026e12:	6765                	.2byte	0x6765
80026e14:	7369                	.2byte	0x7369
80026e16:	6574                	.2byte	0x6574
80026e18:	7372                	.2byte	0x7372
80026e1a:	0a3a                	.2byte	0xa3a
80026e1c:	0000                	.2byte	0x0
80026e1e:	0000                	.2byte	0x0
80026e20:	7209                	.2byte	0x7209
80026e22:	2861                	.2byte	0x2861
80026e24:	3178                	.2byte	0x3178
80026e26:	2029                	.2byte	0x2029
80026e28:	203d                	.2byte	0x203d
80026e2a:	7830                	.2byte	0x7830
80026e2c:	7025                	.2byte	0x7025
80026e2e:	7509                	.2byte	0x7509
80026e30:	5f726573          	csrrsi	a0,0x5f7,4
80026e34:	3d207073          	csrci	0x3d2,0
80026e38:	3020                	.2byte	0x3020
80026e3a:	2578                	.2byte	0x2578
80026e3c:	0a70                	.2byte	0xa70
80026e3e:	0000                	.2byte	0x0
80026e40:	6709                	.2byte	0x6709
80026e42:	2870                	.2byte	0x2870
80026e44:	3378                	.2byte	0x3378
80026e46:	2029                	.2byte	0x2029
80026e48:	203d                	.2byte	0x203d
80026e4a:	7830                	.2byte	0x7830
80026e4c:	7025                	.2byte	0x7025
80026e4e:	7409                	.2byte	0x7409
80026e50:	2870                	.2byte	0x2870
80026e52:	3478                	.2byte	0x3478
80026e54:	2029                	.2byte	0x2029
80026e56:	203d                	.2byte	0x203d
80026e58:	7830                	.2byte	0x7830
80026e5a:	7025                	.2byte	0x7025
80026e5c:	000a                	.2byte	0xa
80026e5e:	0000                	.2byte	0x0
80026e60:	6554                	.2byte	0x6554
80026e62:	706d                	.2byte	0x706d
80026e64:	7261726f          	jal	tp,8003e58a <__global_pointer$+0x14822>
80026e68:	2079                	.2byte	0x2079
80026e6a:	6552                	.2byte	0x6552
80026e6c:	74736967          	.4byte	0x74736967
80026e70:	7265                	.2byte	0x7265
80026e72:	000a3a73          	csrrc	s4,ustatus,s4
80026e76:	0000                	.2byte	0x0
80026e78:	7409                	.2byte	0x7409
80026e7a:	2830                	.2byte	0x2830
80026e7c:	3578                	.2byte	0x3578
80026e7e:	2029                	.2byte	0x2029
80026e80:	203d                	.2byte	0x203d
80026e82:	7830                	.2byte	0x7830
80026e84:	7025                	.2byte	0x7025
80026e86:	7409                	.2byte	0x7409
80026e88:	2831                	.2byte	0x2831
80026e8a:	3678                	.2byte	0x3678
80026e8c:	2029                	.2byte	0x2029
80026e8e:	203d                	.2byte	0x203d
80026e90:	7830                	.2byte	0x7830
80026e92:	7025                	.2byte	0x7025
80026e94:	000a                	.2byte	0xa
80026e96:	0000                	.2byte	0x0
80026e98:	7409                	.2byte	0x7409
80026e9a:	2832                	.2byte	0x2832
80026e9c:	3778                	.2byte	0x3778
80026e9e:	2029                	.2byte	0x2029
80026ea0:	203d                	.2byte	0x203d
80026ea2:	7830                	.2byte	0x7830
80026ea4:	7025                	.2byte	0x7025
80026ea6:	000a                	.2byte	0xa
80026ea8:	7409                	.2byte	0x7409
80026eaa:	32782833          	.4byte	0x32782833
80026eae:	2938                	.2byte	0x2938
80026eb0:	3d20                	.2byte	0x3d20
80026eb2:	3020                	.2byte	0x3020
80026eb4:	2578                	.2byte	0x2578
80026eb6:	0970                	.2byte	0x970
80026eb8:	3474                	.2byte	0x3474
80026eba:	7828                	.2byte	0x7828
80026ebc:	3932                	.2byte	0x3932
80026ebe:	2029                	.2byte	0x2029
80026ec0:	203d                	.2byte	0x203d
80026ec2:	7830                	.2byte	0x7830
80026ec4:	7025                	.2byte	0x7025
80026ec6:	000a                	.2byte	0xa
80026ec8:	7409                	.2byte	0x7409
80026eca:	2835                	.2byte	0x2835
80026ecc:	3378                	.2byte	0x3378
80026ece:	2930                	.2byte	0x2930
80026ed0:	3d20                	.2byte	0x3d20
80026ed2:	3020                	.2byte	0x3020
80026ed4:	2578                	.2byte	0x2578
80026ed6:	0970                	.2byte	0x970
80026ed8:	3674                	.2byte	0x3674
80026eda:	7828                	.2byte	0x7828
80026edc:	20293133          	.4byte	0x20293133
80026ee0:	203d                	.2byte	0x203d
80026ee2:	7830                	.2byte	0x7830
80026ee4:	7025                	.2byte	0x7025
80026ee6:	000a                	.2byte	0xa
80026ee8:	65766153          	.4byte	0x65766153
80026eec:	2064                	.2byte	0x2064
80026eee:	6552                	.2byte	0x6552
80026ef0:	74736967          	.4byte	0x74736967
80026ef4:	7265                	.2byte	0x7265
80026ef6:	000a3a73          	csrrc	s4,ustatus,s4
80026efa:	0000                	.2byte	0x0
80026efc:	7309                	.2byte	0x7309
80026efe:	2f30                	.2byte	0x2f30
80026f00:	7066                	.2byte	0x7066
80026f02:	7828                	.2byte	0x7828
80026f04:	2938                	.2byte	0x2938
80026f06:	3d20                	.2byte	0x3d20
80026f08:	3020                	.2byte	0x3020
80026f0a:	2578                	.2byte	0x2578
80026f0c:	0970                	.2byte	0x970
80026f0e:	78283173          	csrrc	sp,0x782,a6
80026f12:	2939                	.2byte	0x2939
80026f14:	3d20                	.2byte	0x3d20
80026f16:	3020                	.2byte	0x3020
80026f18:	2578                	.2byte	0x2578
80026f1a:	0a70                	.2byte	0xa70
80026f1c:	0000                	.2byte	0x0
80026f1e:	0000                	.2byte	0x0
80026f20:	7309                	.2byte	0x7309
80026f22:	2832                	.2byte	0x2832
80026f24:	3178                	.2byte	0x3178
80026f26:	2938                	.2byte	0x2938
80026f28:	3d20                	.2byte	0x3d20
80026f2a:	3020                	.2byte	0x3020
80026f2c:	2578                	.2byte	0x2578
80026f2e:	0970                	.2byte	0x970
80026f30:	78283373          	csrrc	t1,0x782,a6
80026f34:	3931                	.2byte	0x3931
80026f36:	2029                	.2byte	0x2029
80026f38:	203d                	.2byte	0x203d
80026f3a:	7830                	.2byte	0x7830
80026f3c:	7025                	.2byte	0x7025
80026f3e:	000a                	.2byte	0xa
80026f40:	7309                	.2byte	0x7309
80026f42:	2834                	.2byte	0x2834
80026f44:	3278                	.2byte	0x3278
80026f46:	2930                	.2byte	0x2930
80026f48:	3d20                	.2byte	0x3d20
80026f4a:	3020                	.2byte	0x3020
80026f4c:	2578                	.2byte	0x2578
80026f4e:	0970                	.2byte	0x970
80026f50:	78283573          	csrrc	a0,0x782,a6
80026f54:	3132                	.2byte	0x3132
80026f56:	2029                	.2byte	0x2029
80026f58:	203d                	.2byte	0x203d
80026f5a:	7830                	.2byte	0x7830
80026f5c:	7025                	.2byte	0x7025
80026f5e:	000a                	.2byte	0xa
80026f60:	7309                	.2byte	0x7309
80026f62:	2836                	.2byte	0x2836
80026f64:	3278                	.2byte	0x3278
80026f66:	2932                	.2byte	0x2932
80026f68:	3d20                	.2byte	0x3d20
80026f6a:	3020                	.2byte	0x3020
80026f6c:	2578                	.2byte	0x2578
80026f6e:	0970                	.2byte	0x970
80026f70:	78283773          	csrrc	a4,0x782,a6
80026f74:	3332                	.2byte	0x3332
80026f76:	2029                	.2byte	0x2029
80026f78:	203d                	.2byte	0x203d
80026f7a:	7830                	.2byte	0x7830
80026f7c:	7025                	.2byte	0x7025
80026f7e:	000a                	.2byte	0xa
80026f80:	7309                	.2byte	0x7309
80026f82:	2838                	.2byte	0x2838
80026f84:	3278                	.2byte	0x3278
80026f86:	2934                	.2byte	0x2934
80026f88:	3d20                	.2byte	0x3d20
80026f8a:	3020                	.2byte	0x3020
80026f8c:	2578                	.2byte	0x2578
80026f8e:	0970                	.2byte	0x970
80026f90:	78283973          	csrrc	s2,0x782,a6
80026f94:	3532                	.2byte	0x3532
80026f96:	2029                	.2byte	0x2029
80026f98:	203d                	.2byte	0x203d
80026f9a:	7830                	.2byte	0x7830
80026f9c:	7025                	.2byte	0x7025
80026f9e:	000a                	.2byte	0xa
80026fa0:	7309                	.2byte	0x7309
80026fa2:	3031                	.2byte	0x3031
80026fa4:	7828                	.2byte	0x7828
80026fa6:	3632                	.2byte	0x3632
80026fa8:	2029                	.2byte	0x2029
80026faa:	203d                	.2byte	0x203d
80026fac:	7830                	.2byte	0x7830
80026fae:	7025                	.2byte	0x7025
80026fb0:	7309                	.2byte	0x7309
80026fb2:	3131                	.2byte	0x3131
80026fb4:	7828                	.2byte	0x7828
80026fb6:	3732                	.2byte	0x3732
80026fb8:	2029                	.2byte	0x2029
80026fba:	203d                	.2byte	0x203d
80026fbc:	7830                	.2byte	0x7830
80026fbe:	7025                	.2byte	0x7025
80026fc0:	000a                	.2byte	0xa
80026fc2:	0000                	.2byte	0x0
80026fc4:	7546                	.2byte	0x7546
80026fc6:	636e                	.2byte	0x636e
80026fc8:	6974                	.2byte	0x6974
80026fca:	41206e6f          	jal	t3,8002d3dc <__global_pointer$+0x3674>
80026fce:	6772                	.2byte	0x6772
80026fd0:	6d75                	.2byte	0x6d75
80026fd2:	6e65                	.2byte	0x6e65
80026fd4:	7374                	.2byte	0x7374
80026fd6:	5220                	.2byte	0x5220
80026fd8:	6765                	.2byte	0x6765
80026fda:	7369                	.2byte	0x7369
80026fdc:	6574                	.2byte	0x6574
80026fde:	7372                	.2byte	0x7372
80026fe0:	0a3a                	.2byte	0xa3a
80026fe2:	0000                	.2byte	0x0
80026fe4:	6109                	.2byte	0x6109
80026fe6:	2830                	.2byte	0x2830
80026fe8:	3178                	.2byte	0x3178
80026fea:	2930                	.2byte	0x2930
80026fec:	3d20                	.2byte	0x3d20
80026fee:	3020                	.2byte	0x3020
80026ff0:	2578                	.2byte	0x2578
80026ff2:	0970                	.2byte	0x970
80026ff4:	3161                	.2byte	0x3161
80026ff6:	7828                	.2byte	0x7828
80026ff8:	3131                	.2byte	0x3131
80026ffa:	2029                	.2byte	0x2029
80026ffc:	203d                	.2byte	0x203d
80026ffe:	7830                	.2byte	0x7830
80027000:	7025                	.2byte	0x7025
80027002:	000a                	.2byte	0xa
80027004:	6109                	.2byte	0x6109
80027006:	2832                	.2byte	0x2832
80027008:	3178                	.2byte	0x3178
8002700a:	2932                	.2byte	0x2932
8002700c:	3d20                	.2byte	0x3d20
8002700e:	3020                	.2byte	0x3020
80027010:	2578                	.2byte	0x2578
80027012:	0970                	.2byte	0x970
80027014:	3361                	.2byte	0x3361
80027016:	7828                	.2byte	0x7828
80027018:	3331                	.2byte	0x3331
8002701a:	2029                	.2byte	0x2029
8002701c:	203d                	.2byte	0x203d
8002701e:	7830                	.2byte	0x7830
80027020:	7025                	.2byte	0x7025
80027022:	000a                	.2byte	0xa
80027024:	6109                	.2byte	0x6109
80027026:	2834                	.2byte	0x2834
80027028:	3178                	.2byte	0x3178
8002702a:	2934                	.2byte	0x2934
8002702c:	3d20                	.2byte	0x3d20
8002702e:	3020                	.2byte	0x3020
80027030:	2578                	.2byte	0x2578
80027032:	0970                	.2byte	0x970
80027034:	3561                	.2byte	0x3561
80027036:	7828                	.2byte	0x7828
80027038:	3531                	.2byte	0x3531
8002703a:	2029                	.2byte	0x2029
8002703c:	203d                	.2byte	0x203d
8002703e:	7830                	.2byte	0x7830
80027040:	7025                	.2byte	0x7025
80027042:	000a                	.2byte	0xa
80027044:	6109                	.2byte	0x6109
80027046:	2836                	.2byte	0x2836
80027048:	3178                	.2byte	0x3178
8002704a:	2936                	.2byte	0x2936
8002704c:	3d20                	.2byte	0x3d20
8002704e:	3020                	.2byte	0x3020
80027050:	2578                	.2byte	0x2578
80027052:	0970                	.2byte	0x970
80027054:	3761                	.2byte	0x3761
80027056:	7828                	.2byte	0x7828
80027058:	3731                	.2byte	0x3731
8002705a:	2029                	.2byte	0x2029
8002705c:	203d                	.2byte	0x203d
8002705e:	7830                	.2byte	0x7830
80027060:	7025                	.2byte	0x7025
80027062:	000a                	.2byte	0xa
80027064:	7378                	.2byte	0x7378
80027066:	6174                	.2byte	0x6174
80027068:	7574                	.2byte	0x7574
8002706a:	203d2073          	csrs	0x203,s10
8002706e:	7830                	.2byte	0x7830
80027070:	7025                	.2byte	0x7025
80027072:	000a                	.2byte	0xa
80027074:	65707553          	.4byte	0x65707553
80027078:	7672                	.2byte	0x7672
8002707a:	7369                	.2byte	0x7369
8002707c:	4920726f          	jal	tp,8002e50e <__global_pointer$+0x47a6>
80027080:	746e                	.2byte	0x746e
80027082:	7265                	.2byte	0x7265
80027084:	7572                	.2byte	0x7572
80027086:	7470                	.2byte	0x7470
80027088:	4520                	.2byte	0x4520
8002708a:	616e                	.2byte	0x616e
8002708c:	6c62                	.2byte	0x6c62
8002708e:	6465                	.2byte	0x6465
80027090:	0000                	.2byte	0x0
80027092:	0000                	.2byte	0x0
80027094:	65707553          	.4byte	0x65707553
80027098:	7672                	.2byte	0x7672
8002709a:	7369                	.2byte	0x7369
8002709c:	4920726f          	jal	tp,8002e52e <__global_pointer$+0x47c6>
800270a0:	746e                	.2byte	0x746e
800270a2:	7265                	.2byte	0x7265
800270a4:	7572                	.2byte	0x7572
800270a6:	7470                	.2byte	0x7470
800270a8:	4420                	.2byte	0x4420
800270aa:	7369                	.2byte	0x7369
800270ac:	6261                	.2byte	0x6261
800270ae:	656c                	.2byte	0x656c
800270b0:	0064                	.2byte	0x64
800270b2:	0000                	.2byte	0x0
800270b4:	2509                	.2byte	0x2509
800270b6:	00000a73          	.4byte	0xa73
800270ba:	0000                	.2byte	0x0
800270bc:	614c                	.2byte	0x614c
800270be:	54207473          	csrrci	s0,0x542,0
800270c2:	6d69                	.2byte	0x6d69
800270c4:	2065                	.2byte	0x2065
800270c6:	65707553          	.4byte	0x65707553
800270ca:	7672                	.2byte	0x7672
800270cc:	7369                	.2byte	0x7369
800270ce:	4920726f          	jal	tp,8002e560 <__global_pointer$+0x47f8>
800270d2:	746e                	.2byte	0x746e
800270d4:	7265                	.2byte	0x7265
800270d6:	7572                	.2byte	0x7572
800270d8:	7470                	.2byte	0x7470
800270da:	4520                	.2byte	0x4520
800270dc:	616e                	.2byte	0x616e
800270de:	6c62                	.2byte	0x6c62
800270e0:	6465                	.2byte	0x6465
800270e2:	0000                	.2byte	0x0
800270e4:	614c                	.2byte	0x614c
800270e6:	54207473          	csrrci	s0,0x542,0
800270ea:	6d69                	.2byte	0x6d69
800270ec:	2065                	.2byte	0x2065
800270ee:	65707553          	.4byte	0x65707553
800270f2:	7672                	.2byte	0x7672
800270f4:	7369                	.2byte	0x7369
800270f6:	4920726f          	jal	tp,8002e588 <__global_pointer$+0x4820>
800270fa:	746e                	.2byte	0x746e
800270fc:	7265                	.2byte	0x7265
800270fe:	7572                	.2byte	0x7572
80027100:	7470                	.2byte	0x7470
80027102:	4420                	.2byte	0x4420
80027104:	7369                	.2byte	0x7369
80027106:	6261                	.2byte	0x6261
80027108:	656c                	.2byte	0x656c
8002710a:	0064                	.2byte	0x64
8002710c:	614c                	.2byte	0x614c
8002710e:	50207473          	csrrci	s0,0x502,0
80027112:	6972                	.2byte	0x6972
80027114:	6976                	.2byte	0x6976
80027116:	656c                	.2byte	0x656c
80027118:	69206567          	.4byte	0x69206567
8002711c:	75532073          	csrs	0x755,t1
80027120:	6570                	.2byte	0x6570
80027122:	7672                	.2byte	0x7672
80027124:	7369                	.2byte	0x7369
80027126:	4d20726f          	jal	tp,8002e5f8 <__global_pointer$+0x4890>
8002712a:	0065646f          	jal	s0,8007d130 <__global_pointer$+0x533c8>
8002712e:	0000                	.2byte	0x0
80027130:	614c                	.2byte	0x614c
80027132:	50207473          	csrrci	s0,0x502,0
80027136:	6972                	.2byte	0x6972
80027138:	6976                	.2byte	0x6976
8002713a:	656c                	.2byte	0x656c
8002713c:	69206567          	.4byte	0x69206567
80027140:	73552073          	csrs	mhpmevent21h,a0
80027144:	7265                	.2byte	0x7265
80027146:	4d20                	.2byte	0x4d20
80027148:	0065646f          	jal	s0,8007d14e <__global_pointer$+0x533e6>
8002714c:	6550                	.2byte	0x6550
8002714e:	6d72                	.2byte	0x6d72
80027150:	7469                	.2byte	0x7469
80027152:	7420                	.2byte	0x7420
80027154:	6341206f          	j	80039788 <__global_pointer$+0xfa20>
80027158:	73736563          	bltu	t1,s7,80027882 <raise+0x1c8e>
8002715c:	5520                	.2byte	0x5520
8002715e:	20726573          	csrrsi	a0,0x207,4
80027162:	6150                	.2byte	0x6150
80027164:	00006567          	.4byte	0x6567
80027168:	6f4e                	.2byte	0x6f4e
8002716a:	2074                	.2byte	0x2074
8002716c:	6550                	.2byte	0x6550
8002716e:	6d72                	.2byte	0x6d72
80027170:	7469                	.2byte	0x7469
80027172:	7420                	.2byte	0x7420
80027174:	6341206f          	j	800397a8 <__global_pointer$+0xfa40>
80027178:	73736563          	bltu	t1,s7,800278a2 <raise+0x1cae>
8002717c:	5520                	.2byte	0x5520
8002717e:	20726573          	csrrsi	a0,0x207,4
80027182:	6150                	.2byte	0x6150
80027184:	00006567          	.4byte	0x6567
80027188:	6550                	.2byte	0x6550
8002718a:	6d72                	.2byte	0x6d72
8002718c:	7469                	.2byte	0x7469
8002718e:	7420                	.2byte	0x7420
80027190:	6552206f          	j	80049fe4 <__global_pointer$+0x2027c>
80027194:	6461                	.2byte	0x6461
80027196:	4520                	.2byte	0x4520
80027198:	6578                	.2byte	0x6578
8002719a:	61747563          	bgeu	s0,s7,800277a4 <raise+0x1bb0>
8002719e:	6c62                	.2byte	0x6c62
800271a0:	2d65                	.2byte	0x2d65
800271a2:	796c6e6f          	jal	t3,800ed938 <__bss_end+0x6717c>
800271a6:	5020                	.2byte	0x5020
800271a8:	6761                	.2byte	0x6761
800271aa:	0065                	.2byte	0x65
800271ac:	6f4e                	.2byte	0x6f4e
800271ae:	2074                	.2byte	0x2074
800271b0:	6550                	.2byte	0x6550
800271b2:	6d72                	.2byte	0x6d72
800271b4:	7469                	.2byte	0x7469
800271b6:	7420                	.2byte	0x7420
800271b8:	6552206f          	j	8004a00c <__global_pointer$+0x202a4>
800271bc:	6461                	.2byte	0x6461
800271be:	4520                	.2byte	0x4520
800271c0:	6578                	.2byte	0x6578
800271c2:	61747563          	bgeu	s0,s7,800277cc <raise+0x1bd8>
800271c6:	6c62                	.2byte	0x6c62
800271c8:	2d65                	.2byte	0x2d65
800271ca:	796c6e6f          	jal	t3,800ed960 <__bss_end+0x671a4>
800271ce:	5020                	.2byte	0x5020
800271d0:	6761                	.2byte	0x6761
800271d2:	0065                	.2byte	0x65
800271d4:	70746173          	csrrsi	sp,0x707,8
800271d8:	3d20                	.2byte	0x3d20
800271da:	3020                	.2byte	0x3020
800271dc:	2578                	.2byte	0x2578
800271de:	0a70                	.2byte	0xa70
800271e0:	0000                	.2byte	0x0
800271e2:	0000                	.2byte	0x0
800271e4:	6e55                	.2byte	0x6e55
800271e6:	776f6e6b          	.4byte	0x776f6e6b
800271ea:	206e                	.2byte	0x206e
800271ec:	6441                	.2byte	0x6441
800271ee:	7264                	.2byte	0x7264
800271f0:	7365                	.2byte	0x7365
800271f2:	72542073          	csrs	mhpmevent5h,s0
800271f6:	6e61                	.2byte	0x6e61
800271f8:	74616c73          	csrrsi	s8,0x746,2
800271fc:	6f69                	.2byte	0x6f69
800271fe:	2f6e                	.2byte	0x2f6e
80027200:	7250                	.2byte	0x7250
80027202:	6365746f          	jal	s0,8007e838 <__global_pointer$+0x54ad0>
80027206:	6974                	.2byte	0x6974
80027208:	4d206e6f          	jal	t3,8002d6da <__global_pointer$+0x3972>
8002720c:	0065646f          	jal	s0,8007d212 <__global_pointer$+0x534aa>
80027210:	6f4e                	.2byte	0x6f4e
80027212:	4120                	.2byte	0x4120
80027214:	6464                	.2byte	0x6464
80027216:	6572                	.2byte	0x6572
80027218:	54207373          	csrrci	t1,0x542,0
8002721c:	6172                	.2byte	0x6172
8002721e:	736e                	.2byte	0x736e
80027220:	616c                	.2byte	0x616c
80027222:	6974                	.2byte	0x6974
80027224:	502f6e6f          	jal	t3,8011d726 <__bss_end+0x96f6a>
80027228:	6f72                	.2byte	0x6f72
8002722a:	6574                	.2byte	0x6574
8002722c:	6f697463          	bgeu	s2,s6,80027914 <raise+0x1d20>
80027230:	206e                	.2byte	0x206e
80027232:	6f4d                	.2byte	0x6f4d
80027234:	6564                	.2byte	0x6564
80027236:	0000                	.2byte	0x0
80027238:	6150                	.2byte	0x6150
8002723a:	622d6567          	.4byte	0x622d6567
8002723e:	7361                	.2byte	0x7361
80027240:	6465                	.2byte	0x6465
80027242:	3320                	.2byte	0x3320
80027244:	2d39                	.2byte	0x2d39
80027246:	6962                	.2byte	0x6962
80027248:	2074                	.2byte	0x2074
8002724a:	6956                	.2byte	0x6956
8002724c:	7472                	.2byte	0x7472
8002724e:	6175                	.2byte	0x6175
80027250:	206c                	.2byte	0x206c
80027252:	6441                	.2byte	0x6441
80027254:	7264                	.2byte	0x7264
80027256:	7365                	.2byte	0x7365
80027258:	676e6973          	csrrsi	s2,0x676,28
8002725c:	4d20                	.2byte	0x4d20
8002725e:	0065646f          	jal	s0,8007d264 <__global_pointer$+0x534fc>
80027262:	0000                	.2byte	0x0
80027264:	6150                	.2byte	0x6150
80027266:	622d6567          	.4byte	0x622d6567
8002726a:	7361                	.2byte	0x7361
8002726c:	6465                	.2byte	0x6465
8002726e:	3420                	.2byte	0x3420
80027270:	2d38                	.2byte	0x2d38
80027272:	6962                	.2byte	0x6962
80027274:	2074                	.2byte	0x2074
80027276:	6956                	.2byte	0x6956
80027278:	7472                	.2byte	0x7472
8002727a:	6175                	.2byte	0x6175
8002727c:	206c                	.2byte	0x206c
8002727e:	6441                	.2byte	0x6441
80027280:	7264                	.2byte	0x7264
80027282:	7365                	.2byte	0x7365
80027284:	676e6973          	csrrsi	s2,0x676,28
80027288:	4d20                	.2byte	0x4d20
8002728a:	0065646f          	jal	s0,8007d290 <__global_pointer$+0x53528>
8002728e:	0000                	.2byte	0x0
80027290:	4d09                	.2byte	0x4d09
80027292:	2065646f          	jal	s0,8007d498 <__global_pointer$+0x53730>
80027296:	203d                	.2byte	0x203d
80027298:	7325                	.2byte	0x7325
8002729a:	000a                	.2byte	0xa
8002729c:	2d2d                	.2byte	0x2d2d
8002729e:	2d2d                	.2byte	0x2d2d
800272a0:	2d2d                	.2byte	0x2d2d
800272a2:	2d2d                	.2byte	0x2d2d
800272a4:	2d2d                	.2byte	0x2d2d
800272a6:	2d2d                	.2byte	0x2d2d
800272a8:	2d2d                	.2byte	0x2d2d
800272aa:	2d2d                	.2byte	0x2d2d
800272ac:	442d                	.2byte	0x442d
800272ae:	6d75                	.2byte	0x6d75
800272b0:	2070                	.2byte	0x2070
800272b2:	2d2d4b4f          	.4byte	0x2d2d4b4f
800272b6:	2d2d                	.2byte	0x2d2d
800272b8:	2d2d                	.2byte	0x2d2d
800272ba:	2d2d                	.2byte	0x2d2d
800272bc:	2d2d                	.2byte	0x2d2d
800272be:	2d2d                	.2byte	0x2d2d
800272c0:	2d2d                	.2byte	0x2d2d
800272c2:	2d2d                	.2byte	0x2d2d
800272c4:	2d2d                	.2byte	0x2d2d
800272c6:	2d2d                	.2byte	0x2d2d
800272c8:	0a2d                	.2byte	0xa2d
800272ca:	0000                	.2byte	0x0
800272cc:	6378                	.2byte	0x6378
800272ce:	7561                	.2byte	0x7561
800272d0:	3d206573          	csrrsi	a0,0x3d2,0
800272d4:	2520                	.2byte	0x2520
800272d6:	3830                	.2byte	0x3830
800272d8:	2c78                	.2byte	0x2c78
800272da:	7478                	.2byte	0x7478
800272dc:	6176                	.2byte	0x6176
800272de:	206c                	.2byte	0x206c
800272e0:	203d                	.2byte	0x203d
800272e2:	3025                	.2byte	0x3025
800272e4:	7838                	.2byte	0x7838
800272e6:	782c                	.2byte	0x782c
800272e8:	7065                	.2byte	0x7065
800272ea:	203d2063          	.4byte	0x203d2063
800272ee:	3025                	.2byte	0x3025
800272f0:	7838                	.2byte	0x7838
800272f2:	000a                	.2byte	0xa
800272f4:	450a                	.2byte	0x450a
800272f6:	6378                	.2byte	0x6378
800272f8:	7065                	.2byte	0x7065
800272fa:	6974                	.2byte	0x6974
800272fc:	0a3a6e6f          	jal	t3,800cdb9e <__bss_end+0x473e2>
80027300:	0000                	.2byte	0x0
80027302:	0000                	.2byte	0x0
80027304:	6e49                	.2byte	0x6e49
80027306:	75727473          	csrrci	s0,0x757,4
8002730a:	6f697463          	bgeu	s2,s6,800279f2 <raise+0x1dfe>
8002730e:	206e                	.2byte	0x206e
80027310:	6461                	.2byte	0x6461
80027312:	7264                	.2byte	0x7264
80027314:	7365                	.2byte	0x7365
80027316:	696d2073          	csrs	0x696,s10
8002731a:	696c6173          	csrrsi	sp,0x696,24
8002731e:	64656e67          	.4byte	0x64656e67
80027322:	0000                	.2byte	0x0
80027324:	6e49                	.2byte	0x6e49
80027326:	75727473          	csrrci	s0,0x757,4
8002732a:	6f697463          	bgeu	s2,s6,80027a12 <raise+0x1e1e>
8002732e:	206e                	.2byte	0x206e
80027330:	6361                	.2byte	0x6361
80027332:	73736563          	bltu	t1,s7,80027a5c <raise+0x1e68>
80027336:	6620                	.2byte	0x6620
80027338:	7561                	.2byte	0x7561
8002733a:	746c                	.2byte	0x746c
8002733c:	0000                	.2byte	0x0
8002733e:	0000                	.2byte	0x0
80027340:	6c49                	.2byte	0x6c49
80027342:	656c                	.2byte	0x656c
80027344:	206c6167          	.4byte	0x206c6167
80027348:	6e69                	.2byte	0x6e69
8002734a:	75727473          	csrrci	s0,0x757,4
8002734e:	6f697463          	bgeu	s2,s6,80027a36 <raise+0x1e42>
80027352:	006e                	.2byte	0x6e
80027354:	7242                	.2byte	0x7242
80027356:	6165                	.2byte	0x6165
80027358:	696f706b          	.4byte	0x696f706b
8002735c:	746e                	.2byte	0x746e
8002735e:	0000                	.2byte	0x0
80027360:	6f4c                	.2byte	0x6f4c
80027362:	6461                	.2byte	0x6461
80027364:	6120                	.2byte	0x6120
80027366:	6464                	.2byte	0x6464
80027368:	6572                	.2byte	0x6572
8002736a:	6d207373          	csrrci	t1,0x6d2,0
8002736e:	7369                	.2byte	0x7369
80027370:	6c61                	.2byte	0x6c61
80027372:	6769                	.2byte	0x6769
80027374:	656e                	.2byte	0x656e
80027376:	0064                	.2byte	0x64
80027378:	6f4c                	.2byte	0x6f4c
8002737a:	6461                	.2byte	0x6461
8002737c:	6120                	.2byte	0x6120
8002737e:	73656363          	bltu	a0,s6,80027aa4 <raise+0x1eb0>
80027382:	61662073          	csrs	0x616,a2
80027386:	6c75                	.2byte	0x6c75
80027388:	0074                	.2byte	0x74
8002738a:	0000                	.2byte	0x0
8002738c:	726f7453          	.4byte	0x726f7453
80027390:	2065                	.2byte	0x2065
80027392:	6461                	.2byte	0x6461
80027394:	7264                	.2byte	0x7264
80027396:	7365                	.2byte	0x7365
80027398:	696d2073          	csrs	0x696,s10
8002739c:	696c6173          	csrrsi	sp,0x696,24
800273a0:	64656e67          	.4byte	0x64656e67
800273a4:	0000                	.2byte	0x0
800273a6:	0000                	.2byte	0x0
800273a8:	726f7453          	.4byte	0x726f7453
800273ac:	2065                	.2byte	0x2065
800273ae:	6361                	.2byte	0x6361
800273b0:	73736563          	bltu	t1,s7,80027ada <raise+0x1ee6>
800273b4:	6620                	.2byte	0x6620
800273b6:	7561                	.2byte	0x7561
800273b8:	746c                	.2byte	0x746c
800273ba:	0000                	.2byte	0x0
800273bc:	6e45                	.2byte	0x6e45
800273be:	6976                	.2byte	0x6976
800273c0:	6f72                	.2byte	0x6f72
800273c2:	6d6e                	.2byte	0x6d6e
800273c4:	6e65                	.2byte	0x6e65
800273c6:	2074                	.2byte	0x2074
800273c8:	6c6c6163          	bltu	s8,t1,80027a8a <raise+0x1e96>
800273cc:	6620                	.2byte	0x6620
800273ce:	6f72                	.2byte	0x6f72
800273d0:	206d                	.2byte	0x206d
800273d2:	2d55                	.2byte	0x2d55
800273d4:	6f6d                	.2byte	0x6f6d
800273d6:	6564                	.2byte	0x6564
800273d8:	0000                	.2byte	0x0
800273da:	0000                	.2byte	0x0
800273dc:	6e45                	.2byte	0x6e45
800273de:	6976                	.2byte	0x6976
800273e0:	6f72                	.2byte	0x6f72
800273e2:	6d6e                	.2byte	0x6d6e
800273e4:	6e65                	.2byte	0x6e65
800273e6:	2074                	.2byte	0x2074
800273e8:	6c6c6163          	bltu	s8,t1,80027aaa <raise+0x1eb6>
800273ec:	6620                	.2byte	0x6620
800273ee:	6f72                	.2byte	0x6f72
800273f0:	206d                	.2byte	0x206d
800273f2:	6f6d2d53          	.4byte	0x6f6d2d53
800273f6:	6564                	.2byte	0x6564
800273f8:	0000                	.2byte	0x0
800273fa:	0000                	.2byte	0x0
800273fc:	6e45                	.2byte	0x6e45
800273fe:	6976                	.2byte	0x6976
80027400:	6f72                	.2byte	0x6f72
80027402:	6d6e                	.2byte	0x6d6e
80027404:	6e65                	.2byte	0x6e65
80027406:	2074                	.2byte	0x2074
80027408:	6c6c6163          	bltu	s8,t1,80027aca <raise+0x1ed6>
8002740c:	6620                	.2byte	0x6620
8002740e:	6f72                	.2byte	0x6f72
80027410:	206d                	.2byte	0x206d
80027412:	2d48                	.2byte	0x2d48
80027414:	6f6d                	.2byte	0x6f6d
80027416:	6564                	.2byte	0x6564
80027418:	0000                	.2byte	0x0
8002741a:	0000                	.2byte	0x0
8002741c:	6e45                	.2byte	0x6e45
8002741e:	6976                	.2byte	0x6976
80027420:	6f72                	.2byte	0x6f72
80027422:	6d6e                	.2byte	0x6d6e
80027424:	6e65                	.2byte	0x6e65
80027426:	2074                	.2byte	0x2074
80027428:	6c6c6163          	bltu	s8,t1,80027aea <raise+0x1ef6>
8002742c:	6620                	.2byte	0x6620
8002742e:	6f72                	.2byte	0x6f72
80027430:	206d                	.2byte	0x206d
80027432:	2d4d                	.2byte	0x2d4d
80027434:	6f6d                	.2byte	0x6f6d
80027436:	6564                	.2byte	0x6564
80027438:	0000                	.2byte	0x0
8002743a:	0000                	.2byte	0x0
8002743c:	6b55                	.2byte	0x6b55
8002743e:	6f6e                	.2byte	0x6f6e
80027440:	65206e77          	.4byte	0x65206e77
80027444:	6378                	.2byte	0x6378
80027446:	7065                	.2byte	0x7065
80027448:	6974                	.2byte	0x6974
8002744a:	3a206e6f          	jal	t3,8002d7ec <__global_pointer$+0x3a84>
8002744e:	2520                	.2byte	0x2520
80027450:	3830                	.2byte	0x3830
80027452:	586c                	.2byte	0x586c
80027454:	0000                	.2byte	0x0
80027456:	0000                	.2byte	0x0
80027458:	000a                	.2byte	0xa
8002745a:	0000                	.2byte	0x0
8002745c:	7865                	.2byte	0x7865
8002745e:	74706563          	bltu	zero,t2,80027ba8 <raise+0x1fb4>
80027462:	6f69                	.2byte	0x6f69
80027464:	206e                	.2byte	0x206e
80027466:	6370                	.2byte	0x6370
80027468:	3d20                	.2byte	0x3d20
8002746a:	203e                	.2byte	0x203e
8002746c:	7830                	.2byte	0x7830
8002746e:	3025                	.2byte	0x3025
80027470:	7838                	.2byte	0x7838
80027472:	000a                	.2byte	0xa
80027474:	72727563          	bgeu	tp,t2,80027b9e <raise+0x1faa>
80027478:	6e65                	.2byte	0x6e65
8002747a:	2074                	.2byte	0x2074
8002747c:	6874                	.2byte	0x6874
8002747e:	6572                	.2byte	0x6572
80027480:	6461                	.2byte	0x6461
80027482:	203a                	.2byte	0x203a
80027484:	2e25                	.2byte	0x2e25
80027486:	732a                	.2byte	0x732a
80027488:	000a                	.2byte	0xa
8002748a:	0000                	.2byte	0x0
8002748c:	616d                	.2byte	0x616d
8002748e:	6e69                	.2byte	0x6e69
80027490:	0000                	.2byte	0x0
80027492:	0000                	.2byte	0x0
80027494:	6974                	.2byte	0x6974
80027496:	6c64                	.2byte	0x6c64
80027498:	2565                	.2byte	0x2565
8002749a:	0064                	.2byte	0x64
8002749c:	00004b4f          	.4byte	0x4b4f
800274a0:	5245                	.2byte	0x5245
800274a2:	4f52                	.2byte	0x4f52
800274a4:	0052                	.2byte	0x52
800274a6:	0000                	.2byte	0x0
800274a8:	5445                	.2byte	0x5445
800274aa:	4d49                	.2byte	0x4d49
800274ac:	0054554f          	.4byte	0x54554f
800274b0:	5245                	.2byte	0x5245
800274b2:	4c554653          	.4byte	0x4c554653
800274b6:	004c                	.2byte	0x4c
800274b8:	5245                	.2byte	0x5245
800274ba:	54504553          	.4byte	0x54504553
800274be:	0059                	.2byte	0x59
800274c0:	4e45                	.2byte	0x4e45
800274c2:	4d454d4f          	.4byte	0x4d454d4f
800274c6:	0000                	.2byte	0x0
800274c8:	4e45                	.2byte	0x4e45
800274ca:	5359534f          	.4byte	0x5359534f
800274ce:	0000                	.2byte	0x0
800274d0:	4245                	.2byte	0x4245
800274d2:	5355                	.2byte	0x5355
800274d4:	0059                	.2byte	0x59
800274d6:	0000                	.2byte	0x0
800274d8:	4945                	.2byte	0x4945
800274da:	4945004f          	.4byte	0x4945004f
800274de:	544e                	.2byte	0x544e
800274e0:	5052                	.2byte	0x5052
800274e2:	0054                	.2byte	0x54
800274e4:	4945                	.2byte	0x4945
800274e6:	564e                	.2byte	0x564e
800274e8:	4c41                	.2byte	0x4c41
800274ea:	0000                	.2byte	0x0
800274ec:	5545                	.2byte	0x5545
800274ee:	4b4e                	.2byte	0x4b4e
800274f0:	4f4e                	.2byte	0x4f4e
800274f2:	200a0057          	.4byte	0x200a0057
800274f6:	205c                	.2byte	0x205c
800274f8:	207c                	.2byte	0x207c
800274fa:	00000a2f          	.4byte	0xa2f
800274fe:	0000                	.2byte	0x0
80027500:	202d                	.2byte	0x202d
80027502:	5452                	.2byte	0x5452
80027504:	2d20                	.2byte	0x2d20
80027506:	2020                	.2byte	0x2020
80027508:	2020                	.2byte	0x2020
8002750a:	5420                	.2byte	0x5420
8002750c:	7268                	.2byte	0x7268
8002750e:	6165                	.2byte	0x6165
80027510:	2064                	.2byte	0x2064
80027512:	7265704f          	.4byte	0x7265704f
80027516:	7461                	.2byte	0x7461
80027518:	6e69                	.2byte	0x6e69
8002751a:	79532067          	.4byte	0x79532067
8002751e:	6d657473          	csrrci	s0,0x6d6,10
80027522:	000a                	.2byte	0xa
80027524:	3931                	.2byte	0x3931
80027526:	323a                	.2byte	0x323a
80027528:	3a32                	.2byte	0x3a32
8002752a:	3132                	.2byte	0x3132
8002752c:	0000                	.2byte	0x0
8002752e:	0000                	.2byte	0x0
80027530:	6f4e                	.2byte	0x6f4e
80027532:	2076                	.2byte	0x2076
80027534:	3520                	.2byte	0x3520
80027536:	3220                	.2byte	0x3220
80027538:	3230                	.2byte	0x3230
8002753a:	0032                	.2byte	0x32
8002753c:	2f20                	.2byte	0x2f20
8002753e:	7c20                	.2byte	0x7c20
80027540:	5c20                	.2byte	0x5c20
80027542:	2020                	.2byte	0x2020
80027544:	2020                	.2byte	0x2020
80027546:	2520                	.2byte	0x2520
80027548:	2e64                	.2byte	0x2e64
8002754a:	6425                	.2byte	0x6425
8002754c:	252e                	.2byte	0x252e
8002754e:	2064                	.2byte	0x2064
80027550:	7562                	.2byte	0x7562
80027552:	6c69                	.2byte	0x6c69
80027554:	2064                	.2byte	0x2064
80027556:	7325                	.2byte	0x7325
80027558:	2520                	.2byte	0x2520
8002755a:	00000a73          	.4byte	0xa73
8002755e:	0000                	.2byte	0x0
80027560:	3220                	.2byte	0x3220
80027562:	3030                	.2byte	0x3030
80027564:	2036                	.2byte	0x2036
80027566:	202d                	.2byte	0x202d
80027568:	3032                	.2byte	0x3032
8002756a:	3232                	.2byte	0x3232
8002756c:	4320                	.2byte	0x4320
8002756e:	7279706f          	j	800bf494 <__bss_end+0x38cd8>
80027572:	6769                	.2byte	0x6769
80027574:	7468                	.2byte	0x7468
80027576:	6220                	.2byte	0x6220
80027578:	2079                	.2byte	0x2079
8002757a:	5452                	.2byte	0x5452
8002757c:	542d                	.2byte	0x542d
8002757e:	7268                	.2byte	0x7268
80027580:	6165                	.2byte	0x6165
80027582:	2064                	.2byte	0x2064
80027584:	6574                	.2byte	0x6574
80027586:	6d61                	.2byte	0x6d61
80027588:	000a                	.2byte	0xa
8002758a:	0000                	.2byte	0x0
8002758c:	4e28                	.2byte	0x4e28
8002758e:	4c55                	.2byte	0x4c55
80027590:	294c                	.2byte	0x294c
80027592:	0000                	.2byte	0x0
80027594:	6568                	.2byte	0x6568
80027596:	7061                	.2byte	0x7061
80027598:	0000                	.2byte	0x0
8002759a:	0000                	.2byte	0x0
8002759c:	6c616d73          	csrrsi	s10,0x6c6,2
800275a0:	006c                	.2byte	0x6c
800275a2:	0000                	.2byte	0x0
800275a4:	4e49                	.2byte	0x4e49
800275a6:	5449                	.2byte	0x5449
800275a8:	0000                	.2byte	0x0
800275aa:	0000                	.2byte	0x0
800275ac:	656d                	.2byte	0x656d
800275ae:	206d                	.2byte	0x206d
800275b0:	6e69                	.2byte	0x6e69
800275b2:	7469                	.2byte	0x7469
800275b4:	202c                	.2byte	0x202c
800275b6:	7265                	.2byte	0x7265
800275b8:	6f72                	.2byte	0x6f72
800275ba:	2072                	.2byte	0x2072
800275bc:	6562                	.2byte	0x6562
800275be:	206e6967          	.4byte	0x206e6967
800275c2:	6461                	.2byte	0x6461
800275c4:	7264                	.2byte	0x7264
800275c6:	7365                	.2byte	0x7365
800275c8:	78302073          	csrr	zero,0x783
800275cc:	7825                	.2byte	0x7825
800275ce:	202c                	.2byte	0x202c
800275d0:	6e61                	.2byte	0x6e61
800275d2:	2064                	.2byte	0x2064
800275d4:	6e65                	.2byte	0x6e65
800275d6:	2064                	.2byte	0x2064
800275d8:	6461                	.2byte	0x6461
800275da:	7264                	.2byte	0x7264
800275dc:	7365                	.2byte	0x7365
800275de:	78302073          	csrr	zero,0x783
800275e2:	7825                	.2byte	0x7825
800275e4:	000a                	.2byte	0xa
800275e6:	0000                	.2byte	0x0
800275e8:	2020                	.2byte	0x2020
800275ea:	2020                	.2byte	0x2020
800275ec:	0000                	.2byte	0x0
800275ee:	0000                	.2byte	0x0
800275f0:	4f4e                	.2byte	0x4f4e
800275f2:	454e                	.2byte	0x454e
800275f4:	0000                	.2byte	0x0
800275f6:	0000                	.2byte	0x0
800275f8:	654d                	.2byte	0x654d
800275fa:	6f6d                	.2byte	0x6f6d
800275fc:	7972                	.2byte	0x7972
800275fe:	6220                	.2byte	0x6220
80027600:	6f6c                	.2byte	0x6f6c
80027602:	77206b63          	bltu	zero,s2,80027d78 <raise+0x2184>
80027606:	6f72                	.2byte	0x6f72
80027608:	676e                	.2byte	0x676e
8002760a:	0a3a                	.2byte	0xa3a
8002760c:	0000                	.2byte	0x0
8002760e:	0000                	.2byte	0x0
80027610:	2020                	.2byte	0x2020
80027612:	6e20                	.2byte	0x6e20
80027614:	6d61                	.2byte	0x6d61
80027616:	3a65                	.2byte	0x3a65
80027618:	2520                	.2byte	0x2520
8002761a:	00000a73          	.4byte	0xa73
8002761e:	0000                	.2byte	0x0
80027620:	6461                	.2byte	0x6461
80027622:	7264                	.2byte	0x7264
80027624:	7365                	.2byte	0x7365
80027626:	30203a73          	csrrc	s4,medeleg,zero
8002762a:	2578                	.2byte	0x2578
8002762c:	3830                	.2byte	0x3830
8002762e:	0a78                	.2byte	0xa78
80027630:	0000                	.2byte	0x0
80027632:	0000                	.2byte	0x0
80027634:	2020                	.2byte	0x2020
80027636:	7020                	.2byte	0x7020
80027638:	3a6c6f6f          	jal	t5,800ed9de <__bss_end+0x67222>
8002763c:	3020                	.2byte	0x3020
8002763e:	2578                	.2byte	0x2578
80027640:	3430                	.2byte	0x3430
80027642:	0a78                	.2byte	0xa78
80027644:	0000                	.2byte	0x0
80027646:	0000                	.2byte	0x0
80027648:	2020                	.2byte	0x2020
8002764a:	7320                	.2byte	0x7320
8002764c:	7a69                	.2byte	0x7a69
8002764e:	3a65                	.2byte	0x3a65
80027650:	2520                	.2byte	0x2520
80027652:	0a64                	.2byte	0xa64
80027654:	0000                	.2byte	0x0
80027656:	0000                	.2byte	0x0
80027658:	6d0a                	.2byte	0x6d0a
8002765a:	6d65                	.2byte	0x6d65
8002765c:	2079726f          	jal	tp,800bf062 <__bss_end+0x388a6>
80027660:	6568                	.2byte	0x6568
80027662:	7061                	.2byte	0x7061
80027664:	6120                	.2byte	0x6120
80027666:	6464                	.2byte	0x6464
80027668:	6572                	.2byte	0x6572
8002766a:	0a3a7373          	csrrci	t1,0xa3,20
8002766e:	0000                	.2byte	0x0
80027670:	616e                	.2byte	0x616e
80027672:	656d                	.2byte	0x656d
80027674:	2020                	.2byte	0x2020
80027676:	2020                	.2byte	0x2020
80027678:	203a                	.2byte	0x203a
8002767a:	7325                	.2byte	0x7325
8002767c:	000a                	.2byte	0xa
8002767e:	0000                	.2byte	0x0
80027680:	6f74                	.2byte	0x6f74
80027682:	6174                	.2byte	0x6174
80027684:	206c                	.2byte	0x206c
80027686:	2020                	.2byte	0x2020
80027688:	203a                	.2byte	0x203a
8002768a:	7830                	.2byte	0x7830
8002768c:	6425                	.2byte	0x6425
8002768e:	000a                	.2byte	0xa
80027690:	7375                	.2byte	0x7375
80027692:	6465                	.2byte	0x6465
80027694:	2020                	.2byte	0x2020
80027696:	2020                	.2byte	0x2020
80027698:	203a                	.2byte	0x203a
8002769a:	7830                	.2byte	0x7830
8002769c:	6425                	.2byte	0x6425
8002769e:	000a                	.2byte	0xa
800276a0:	616d                	.2byte	0x616d
800276a2:	5f78                	.2byte	0x5f78
800276a4:	7375                	.2byte	0x7375
800276a6:	6465                	.2byte	0x6465
800276a8:	203a                	.2byte	0x203a
800276aa:	7830                	.2byte	0x7830
800276ac:	6425                	.2byte	0x6425
800276ae:	000a                	.2byte	0xa
800276b0:	6568                	.2byte	0x6568
800276b2:	7061                	.2byte	0x7061
800276b4:	705f 7274 203a      	.byte	0x5f, 0x70, 0x74, 0x72, 0x3a, 0x20
800276ba:	7830                	.2byte	0x7830
800276bc:	3025                	.2byte	0x3025
800276be:	7838                	.2byte	0x7838
800276c0:	000a                	.2byte	0xa
800276c2:	0000                	.2byte	0x0
800276c4:	666c                	.2byte	0x666c
800276c6:	6572                	.2byte	0x6572
800276c8:	2065                	.2byte	0x2065
800276ca:	2020                	.2byte	0x2020
800276cc:	203a                	.2byte	0x203a
800276ce:	7830                	.2byte	0x7830
800276d0:	3025                	.2byte	0x3025
800276d2:	7838                	.2byte	0x7838
800276d4:	000a                	.2byte	0xa
800276d6:	0000                	.2byte	0x0
800276d8:	6568                	.2byte	0x6568
800276da:	7061                	.2byte	0x7061
800276dc:	655f 646e 203a      	.byte	0x5f, 0x65, 0x6e, 0x64, 0x3a, 0x20
800276e2:	7830                	.2byte	0x7830
800276e4:	3025                	.2byte	0x3025
800276e6:	7838                	.2byte	0x7838
800276e8:	000a                	.2byte	0xa
800276ea:	0000                	.2byte	0x0
800276ec:	2d0a                	.2byte	0x2d0a
800276ee:	6d2d                	.2byte	0x6d2d
800276f0:	6d65                	.2byte	0x6d65
800276f2:	2079726f          	jal	tp,800bf0f8 <__bss_end+0x3893c>
800276f6:	7469                	.2byte	0x7469
800276f8:	6d65                	.2byte	0x6d65
800276fa:	6920                	.2byte	0x6920
800276fc:	666e                	.2byte	0x666e
800276fe:	616d726f          	jal	tp,800fed14 <__bss_end+0x78558>
80027702:	6974                	.2byte	0x6974
80027704:	2d206e6f          	jal	t3,8002d9d6 <__global_pointer$+0x3c6e>
80027708:	0a2d                	.2byte	0xa2d
8002770a:	0000                	.2byte	0x0
8002770c:	2578305b          	.4byte	0x2578305b
80027710:	3830                	.2byte	0x3830
80027712:	2078                	.2byte	0x2078
80027714:	202d                	.2byte	0x202d
80027716:	0000                	.2byte	0x0
80027718:	3525                	.2byte	0x3525
8002771a:	0064                	.2byte	0x64
8002771c:	3425                	.2byte	0x3425
8002771e:	4b64                	.2byte	0x4b64
80027720:	0000                	.2byte	0x0
80027722:	0000                	.2byte	0x0
80027724:	3425                	.2byte	0x3425
80027726:	4d64                	.2byte	0x4d64
80027728:	0000                	.2byte	0x0
8002772a:	0000                	.2byte	0x0
8002772c:	205d                	.2byte	0x205d
8002772e:	6325                	.2byte	0x6325
80027730:	6325                	.2byte	0x6325
80027732:	6325                	.2byte	0x6325
80027734:	6325                	.2byte	0x6325
80027736:	0000                	.2byte	0x0
80027738:	203a                	.2byte	0x203a
8002773a:	2a2a                	.2byte	0x2a2a
8002773c:	0a2a                	.2byte	0xa2a
8002773e:	0000                	.2byte	0x0
80027740:	000a                	.2byte	0xa
80027742:	0000                	.2byte	0x0
80027744:	74617453          	.4byte	0x74617453
80027748:	6369                	.2byte	0x6369
8002774a:	0000                	.2byte	0x0
8002774c:	6548                	.2byte	0x6548
8002774e:	7061                	.2byte	0x7061
80027750:	0000                	.2byte	0x0
80027752:	0000                	.2byte	0x0
80027754:	63617453          	.4byte	0x63617453
80027758:	0000006b          	.4byte	0x6b
8002775c:	6b36                	.2byte	0x6b36
8002775e:	7020                	.2byte	0x7020
80027760:	7265                	.2byte	0x7265
80027762:	6f66                	.2byte	0x6f66
80027764:	6d72                	.2byte	0x6d72
80027766:	6e61                	.2byte	0x6e61
80027768:	72206563          	bltu	zero,sp,80027e92 <__clz_tab+0xee>
8002776c:	6e75                	.2byte	0x6e75
8002776e:	7020                	.2byte	0x7020
80027770:	7261                	.2byte	0x7261
80027772:	6d61                	.2byte	0x6d61
80027774:	7465                	.2byte	0x7465
80027776:	7265                	.2byte	0x7265
80027778:	6f662073          	csrs	0x6f6,a2
8002777c:	2072                	.2byte	0x2072
8002777e:	65726f63          	bltu	tp,s7,80027ddc <__clz_tab+0x38>
80027782:	616d                	.2byte	0x616d
80027784:	6b72                	.2byte	0x6b72
80027786:	0a2e                	.2byte	0xa2e
80027788:	0000                	.2byte	0x0
8002778a:	0000                	.2byte	0x0
8002778c:	6b36                	.2byte	0x6b36
8002778e:	7620                	.2byte	0x7620
80027790:	6c61                	.2byte	0x6c61
80027792:	6469                	.2byte	0x6469
80027794:	7461                	.2byte	0x7461
80027796:	6f69                	.2byte	0x6f69
80027798:	206e                	.2byte	0x206e
8002779a:	7572                	.2byte	0x7572
8002779c:	206e                	.2byte	0x206e
8002779e:	6170                	.2byte	0x6170
800277a0:	6172                	.2byte	0x6172
800277a2:	656d                	.2byte	0x656d
800277a4:	6574                	.2byte	0x6574
800277a6:	7372                	.2byte	0x7372
800277a8:	6620                	.2byte	0x6620
800277aa:	6320726f          	jal	tp,8002eddc <__global_pointer$+0x5074>
800277ae:	6d65726f          	jal	tp,8007ee84 <__global_pointer$+0x5511c>
800277b2:	7261                	.2byte	0x7261
800277b4:	000a2e6b          	.4byte	0xa2e6b
800277b8:	7250                	.2byte	0x7250
800277ba:	6c69666f          	jal	a2,800bde80 <__bss_end+0x376c4>
800277be:	2065                	.2byte	0x2065
800277c0:	656e6567          	.4byte	0x656e6567
800277c4:	6172                	.2byte	0x6172
800277c6:	6974                	.2byte	0x6974
800277c8:	72206e6f          	jal	t3,8002deea <__global_pointer$+0x4182>
800277cc:	6e75                	.2byte	0x6e75
800277ce:	7020                	.2byte	0x7020
800277d0:	7261                	.2byte	0x7261
800277d2:	6d61                	.2byte	0x6d61
800277d4:	7465                	.2byte	0x7465
800277d6:	7265                	.2byte	0x7265
800277d8:	6f662073          	csrs	0x6f6,a2
800277dc:	2072                	.2byte	0x2072
800277de:	65726f63          	bltu	tp,s7,80027e3c <__clz_tab+0x98>
800277e2:	616d                	.2byte	0x616d
800277e4:	6b72                	.2byte	0x6b72
800277e6:	0a2e                	.2byte	0xa2e
800277e8:	0000                	.2byte	0x0
800277ea:	0000                	.2byte	0x0
800277ec:	4b32                	.2byte	0x4b32
800277ee:	7020                	.2byte	0x7020
800277f0:	7265                	.2byte	0x7265
800277f2:	6f66                	.2byte	0x6f66
800277f4:	6d72                	.2byte	0x6d72
800277f6:	6e61                	.2byte	0x6e61
800277f8:	72206563          	bltu	zero,sp,80027f22 <_romfs+0xe>
800277fc:	6e75                	.2byte	0x6e75
800277fe:	7020                	.2byte	0x7020
80027800:	7261                	.2byte	0x7261
80027802:	6d61                	.2byte	0x6d61
80027804:	7465                	.2byte	0x7465
80027806:	7265                	.2byte	0x7265
80027808:	6f662073          	csrs	0x6f6,a2
8002780c:	2072                	.2byte	0x2072
8002780e:	65726f63          	bltu	tp,s7,80027e6c <__clz_tab+0xc8>
80027812:	616d                	.2byte	0x616d
80027814:	6b72                	.2byte	0x6b72
80027816:	0a2e                	.2byte	0xa2e
80027818:	0000                	.2byte	0x0
8002781a:	0000                	.2byte	0x0
8002781c:	4b32                	.2byte	0x4b32
8002781e:	7620                	.2byte	0x7620
80027820:	6c61                	.2byte	0x6c61
80027822:	6469                	.2byte	0x6469
80027824:	7461                	.2byte	0x7461
80027826:	6f69                	.2byte	0x6f69
80027828:	206e                	.2byte	0x206e
8002782a:	7572                	.2byte	0x7572
8002782c:	206e                	.2byte	0x206e
8002782e:	6170                	.2byte	0x6170
80027830:	6172                	.2byte	0x6172
80027832:	656d                	.2byte	0x656d
80027834:	6574                	.2byte	0x6574
80027836:	7372                	.2byte	0x7372
80027838:	6620                	.2byte	0x6620
8002783a:	6320726f          	jal	tp,8002ee6c <__global_pointer$+0x5104>
8002783e:	6d65726f          	jal	tp,8007ef14 <__global_pointer$+0x551ac>
80027842:	7261                	.2byte	0x7261
80027844:	000a2e6b          	.4byte	0xa2e6b
80027848:	5d75255b          	.4byte	0x5d75255b
8002784c:	5245                	.2byte	0x5245
8002784e:	4f52                	.2byte	0x4f52
80027850:	2152                	.2byte	0x2152
80027852:	6c20                	.2byte	0x6c20
80027854:	7369                	.2byte	0x7369
80027856:	2074                	.2byte	0x2074
80027858:	20637263          	bgeu	t1,t1,80027a5c <raise+0x1e68>
8002785c:	7830                	.2byte	0x7830
8002785e:	3025                	.2byte	0x3025
80027860:	7834                	.2byte	0x7834
80027862:	2d20                	.2byte	0x2d20
80027864:	7320                	.2byte	0x7320
80027866:	6f68                	.2byte	0x6f68
80027868:	6c75                	.2byte	0x6c75
8002786a:	2064                	.2byte	0x2064
8002786c:	6562                	.2byte	0x6562
8002786e:	3020                	.2byte	0x3020
80027870:	2578                	.2byte	0x2578
80027872:	3430                	.2byte	0x3430
80027874:	0a78                	.2byte	0xa78
80027876:	0000                	.2byte	0x0
80027878:	5d75255b          	.4byte	0x5d75255b
8002787c:	5245                	.2byte	0x5245
8002787e:	4f52                	.2byte	0x4f52
80027880:	2152                	.2byte	0x2152
80027882:	6d20                	.2byte	0x6d20
80027884:	7461                	.2byte	0x7461
80027886:	6972                	.2byte	0x6972
80027888:	2078                	.2byte	0x2078
8002788a:	20637263          	bgeu	t1,t1,80027a8e <raise+0x1e9a>
8002788e:	7830                	.2byte	0x7830
80027890:	3025                	.2byte	0x3025
80027892:	7834                	.2byte	0x7834
80027894:	2d20                	.2byte	0x2d20
80027896:	7320                	.2byte	0x7320
80027898:	6f68                	.2byte	0x6f68
8002789a:	6c75                	.2byte	0x6c75
8002789c:	2064                	.2byte	0x2064
8002789e:	6562                	.2byte	0x6562
800278a0:	3020                	.2byte	0x3020
800278a2:	2578                	.2byte	0x2578
800278a4:	3430                	.2byte	0x3430
800278a6:	0a78                	.2byte	0xa78
800278a8:	0000                	.2byte	0x0
800278aa:	0000                	.2byte	0x0
800278ac:	5d75255b          	.4byte	0x5d75255b
800278b0:	5245                	.2byte	0x5245
800278b2:	4f52                	.2byte	0x4f52
800278b4:	2152                	.2byte	0x2152
800278b6:	7320                	.2byte	0x7320
800278b8:	6174                	.2byte	0x6174
800278ba:	6574                	.2byte	0x6574
800278bc:	6320                	.2byte	0x6320
800278be:	6372                	.2byte	0x6372
800278c0:	3020                	.2byte	0x3020
800278c2:	2578                	.2byte	0x2578
800278c4:	3430                	.2byte	0x3430
800278c6:	2078                	.2byte	0x2078
800278c8:	202d                	.2byte	0x202d
800278ca:	756f6873          	csrrsi	a6,0x756,30
800278ce:	646c                	.2byte	0x646c
800278d0:	6220                	.2byte	0x6220
800278d2:	2065                	.2byte	0x2065
800278d4:	7830                	.2byte	0x7830
800278d6:	3025                	.2byte	0x3025
800278d8:	7834                	.2byte	0x7834
800278da:	000a                	.2byte	0xa
800278dc:	65726f43          	.4byte	0x65726f43
800278e0:	614d                	.2byte	0x614d
800278e2:	6b72                	.2byte	0x6b72
800278e4:	5320                	.2byte	0x5320
800278e6:	7a69                	.2byte	0x7a69
800278e8:	2065                	.2byte	0x2065
800278ea:	2020                	.2byte	0x2020
800278ec:	3a20                	.2byte	0x3a20
800278ee:	2520                	.2byte	0x2520
800278f0:	756c                	.2byte	0x756c
800278f2:	000a                	.2byte	0xa
800278f4:	6f54                	.2byte	0x6f54
800278f6:	6174                	.2byte	0x6174
800278f8:	206c                	.2byte	0x206c
800278fa:	6974                	.2byte	0x6974
800278fc:	20736b63          	bltu	t1,t2,80027b12 <raise+0x1f1e>
80027900:	2020                	.2byte	0x2020
80027902:	2020                	.2byte	0x2020
80027904:	3a20                	.2byte	0x3a20
80027906:	2520                	.2byte	0x2520
80027908:	756c                	.2byte	0x756c
8002790a:	000a                	.2byte	0xa
8002790c:	6f54                	.2byte	0x6f54
8002790e:	6174                	.2byte	0x6174
80027910:	206c                	.2byte	0x206c
80027912:	6974                	.2byte	0x6974
80027914:	656d                	.2byte	0x656d
80027916:	2820                	.2byte	0x2820
80027918:	73636573          	csrrsi	a0,mhpmevent22h,6
8002791c:	3a29                	.2byte	0x3a29
8002791e:	2520                	.2byte	0x2520
80027920:	0a64                	.2byte	0xa64
80027922:	0000                	.2byte	0x0
80027924:	7449                	.2byte	0x7449
80027926:	7265                	.2byte	0x7265
80027928:	7461                	.2byte	0x7461
8002792a:	6f69                	.2byte	0x6f69
8002792c:	736e                	.2byte	0x736e
8002792e:	6365532f          	.4byte	0x6365532f
80027932:	2020                	.2byte	0x2020
80027934:	3a20                	.2byte	0x3a20
80027936:	2520                	.2byte	0x2520
80027938:	0a64                	.2byte	0xa64
8002793a:	0000                	.2byte	0x0
8002793c:	5245                	.2byte	0x5245
8002793e:	4f52                	.2byte	0x4f52
80027940:	2152                	.2byte	0x2152
80027942:	4d20                	.2byte	0x4d20
80027944:	7375                	.2byte	0x7375
80027946:	2074                	.2byte	0x2074
80027948:	7865                	.2byte	0x7865
8002794a:	6365                	.2byte	0x6365
8002794c:	7475                	.2byte	0x7475
8002794e:	2065                	.2byte	0x2065
80027950:	6f66                	.2byte	0x6f66
80027952:	2072                	.2byte	0x2072
80027954:	7461                	.2byte	0x7461
80027956:	6c20                	.2byte	0x6c20
80027958:	6165                	.2byte	0x6165
8002795a:	31207473          	csrrci	s0,0x312,0
8002795e:	2030                	.2byte	0x2030
80027960:	73636573          	csrrsi	a0,mhpmevent22h,6
80027964:	6620                	.2byte	0x6620
80027966:	6120726f          	jal	tp,8002ef78 <__global_pointer$+0x5210>
8002796a:	7620                	.2byte	0x7620
8002796c:	6c61                	.2byte	0x6c61
8002796e:	6469                	.2byte	0x6469
80027970:	7220                	.2byte	0x7220
80027972:	7365                	.2byte	0x7365
80027974:	6c75                	.2byte	0x6c75
80027976:	2174                	.2byte	0x2174
80027978:	000a                	.2byte	0xa
8002797a:	0000                	.2byte	0x0
8002797c:	7449                	.2byte	0x7449
8002797e:	7265                	.2byte	0x7265
80027980:	7461                	.2byte	0x7461
80027982:	6f69                	.2byte	0x6f69
80027984:	736e                	.2byte	0x736e
80027986:	2020                	.2byte	0x2020
80027988:	2020                	.2byte	0x2020
8002798a:	2020                	.2byte	0x2020
8002798c:	3a20                	.2byte	0x3a20
8002798e:	2520                	.2byte	0x2520
80027990:	756c                	.2byte	0x756c
80027992:	000a                	.2byte	0xa
80027994:	31434347          	.4byte	0x31434347
80027998:	2e302e33          	.4byte	0x2e302e33
8002799c:	2030                	.2byte	0x2030
8002799e:	3032                	.2byte	0x3032
800279a0:	3232                	.2byte	0x3232
800279a2:	3930                	.2byte	0x3930
800279a4:	3530                	.2byte	0x3530
800279a6:	2820                	.2byte	0x2820
800279a8:	7865                	.2byte	0x7865
800279aa:	6570                	.2byte	0x6570
800279ac:	6972                	.2byte	0x6972
800279ae:	656d                	.2byte	0x656d
800279b0:	746e                	.2byte	0x746e
800279b2:	6c61                	.2byte	0x6c61
800279b4:	0029                	.2byte	0x29
800279b6:	0000                	.2byte	0x0
800279b8:	706d6f43          	.4byte	0x706d6f43
800279bc:	6c69                	.2byte	0x6c69
800279be:	7265                	.2byte	0x7265
800279c0:	7620                	.2byte	0x7620
800279c2:	7265                	.2byte	0x7265
800279c4:	6e6f6973          	csrrsi	s2,0x6e6,30
800279c8:	3a20                	.2byte	0x3a20
800279ca:	2520                	.2byte	0x2520
800279cc:	00000a73          	.4byte	0xa73
800279d0:	6c50                	.2byte	0x6c50
800279d2:	6165                	.2byte	0x6165
800279d4:	70206573          	csrrsi	a0,0x702,0
800279d8:	7475                	.2byte	0x7475
800279da:	6320                	.2byte	0x6320
800279dc:	69706d6f          	jal	s10,8002e872 <__global_pointer$+0x4b0a>
800279e0:	656c                	.2byte	0x656c
800279e2:	2072                	.2byte	0x2072
800279e4:	6c66                	.2byte	0x6c66
800279e6:	6761                	.2byte	0x6761
800279e8:	65682073          	csrs	0x656,a6
800279ec:	6572                	.2byte	0x6572
800279ee:	2820                	.2byte	0x2820
800279f0:	2e65                	.2byte	0x2e65
800279f2:	2d202e67          	.4byte	0x2d202e67
800279f6:	0029336f          	jal	t1,800ba9f8 <__bss_end+0x3423c>
800279fa:	0000                	.2byte	0x0
800279fc:	706d6f43          	.4byte	0x706d6f43
80027a00:	6c69                	.2byte	0x6c69
80027a02:	7265                	.2byte	0x7265
80027a04:	6620                	.2byte	0x6620
80027a06:	616c                	.2byte	0x616c
80027a08:	20207367          	.4byte	0x20207367
80027a0c:	3a20                	.2byte	0x3a20
80027a0e:	2520                	.2byte	0x2520
80027a10:	00000a73          	.4byte	0xa73
80027a14:	43415453          	.4byte	0x43415453
80027a18:	0000004b          	.4byte	0x4b
80027a1c:	654d                	.2byte	0x654d
80027a1e:	6f6d                	.2byte	0x6f6d
80027a20:	7972                	.2byte	0x7972
80027a22:	6c20                	.2byte	0x6c20
80027a24:	7461636f          	jal	t1,8003e16a <__global_pointer$+0x14402>
80027a28:	6f69                	.2byte	0x6f69
80027a2a:	206e                	.2byte	0x206e
80027a2c:	3a20                	.2byte	0x3a20
80027a2e:	2520                	.2byte	0x2520
80027a30:	00000a73          	.4byte	0xa73
80027a34:	64656573          	csrrsi	a0,0x646,10
80027a38:	20637263          	bgeu	t1,t1,80027c3c <raise+0x2048>
80027a3c:	2020                	.2byte	0x2020
80027a3e:	2020                	.2byte	0x2020
80027a40:	2020                	.2byte	0x2020
80027a42:	2020                	.2byte	0x2020
80027a44:	3a20                	.2byte	0x3a20
80027a46:	3020                	.2byte	0x3020
80027a48:	2578                	.2byte	0x2578
80027a4a:	3430                	.2byte	0x3430
80027a4c:	0a78                	.2byte	0xa78
80027a4e:	0000                	.2byte	0x0
80027a50:	5d64255b          	.4byte	0x5d64255b
80027a54:	6c637263          	bgeu	t1,t1,80028118 <device_type_str>
80027a58:	7369                	.2byte	0x7369
80027a5a:	2074                	.2byte	0x2074
80027a5c:	2020                	.2byte	0x2020
80027a5e:	2020                	.2byte	0x2020
80027a60:	2020                	.2byte	0x2020
80027a62:	203a                	.2byte	0x203a
80027a64:	7830                	.2byte	0x7830
80027a66:	3025                	.2byte	0x3025
80027a68:	7834                	.2byte	0x7834
80027a6a:	000a                	.2byte	0xa
80027a6c:	5d64255b          	.4byte	0x5d64255b
80027a70:	6d637263          	bgeu	t1,s6,80028134 <device_type_str+0x1c>
80027a74:	7461                	.2byte	0x7461
80027a76:	6972                	.2byte	0x6972
80027a78:	2078                	.2byte	0x2078
80027a7a:	2020                	.2byte	0x2020
80027a7c:	2020                	.2byte	0x2020
80027a7e:	203a                	.2byte	0x203a
80027a80:	7830                	.2byte	0x7830
80027a82:	3025                	.2byte	0x3025
80027a84:	7834                	.2byte	0x7834
80027a86:	000a                	.2byte	0xa
80027a88:	5d64255b          	.4byte	0x5d64255b
80027a8c:	73637263          	bgeu	t1,s6,800281b0 <__fsym_ps_name>
80027a90:	6174                	.2byte	0x6174
80027a92:	6574                	.2byte	0x6574
80027a94:	2020                	.2byte	0x2020
80027a96:	2020                	.2byte	0x2020
80027a98:	2020                	.2byte	0x2020
80027a9a:	203a                	.2byte	0x203a
80027a9c:	7830                	.2byte	0x7830
80027a9e:	3025                	.2byte	0x3025
80027aa0:	7834                	.2byte	0x7834
80027aa2:	000a                	.2byte	0xa
80027aa4:	5d64255b          	.4byte	0x5d64255b
80027aa8:	66637263          	bgeu	t1,t1,8002810c <__fsym_list_desc+0x4>
80027aac:	6e69                	.2byte	0x6e69
80027aae:	6c61                	.2byte	0x6c61
80027ab0:	2020                	.2byte	0x2020
80027ab2:	2020                	.2byte	0x2020
80027ab4:	2020                	.2byte	0x2020
80027ab6:	203a                	.2byte	0x203a
80027ab8:	7830                	.2byte	0x7830
80027aba:	3025                	.2byte	0x3025
80027abc:	7834                	.2byte	0x7834
80027abe:	000a                	.2byte	0xa
80027ac0:	72726f43          	.4byte	0x72726f43
80027ac4:	6365                	.2byte	0x6365
80027ac6:	2074                	.2byte	0x2074
80027ac8:	7265706f          	j	8007f1ee <__global_pointer$+0x55486>
80027acc:	7461                	.2byte	0x7461
80027ace:	6f69                	.2byte	0x6f69
80027ad0:	206e                	.2byte	0x206e
80027ad2:	6176                	.2byte	0x6176
80027ad4:	696c                	.2byte	0x696c
80027ad6:	6164                	.2byte	0x6164
80027ad8:	6574                	.2byte	0x6574
80027ada:	2e64                	.2byte	0x2e64
80027adc:	5320                	.2byte	0x5320
80027ade:	6565                	.2byte	0x6565
80027ae0:	5220                	.2byte	0x5220
80027ae2:	4145                	.2byte	0x4145
80027ae4:	4d44                	.2byte	0x4d44
80027ae6:	2e45                	.2byte	0x2e45
80027ae8:	646d                	.2byte	0x646d
80027aea:	6620                	.2byte	0x6620
80027aec:	7220726f          	jal	tp,8002f20e <__global_pointer$+0x54a6>
80027af0:	6e75                	.2byte	0x6e75
80027af2:	6120                	.2byte	0x6120
80027af4:	646e                	.2byte	0x646e
80027af6:	7220                	.2byte	0x7220
80027af8:	7065                	.2byte	0x7065
80027afa:	6974726f          	jal	tp,8006f990 <__global_pointer$+0x45c28>
80027afe:	676e                	.2byte	0x676e
80027b00:	7220                	.2byte	0x7220
80027b02:	6c75                	.2byte	0x6c75
80027b04:	7365                	.2byte	0x7365
80027b06:	0a2e                	.2byte	0xa2e
80027b08:	0000                	.2byte	0x0
80027b0a:	0000                	.2byte	0x0
80027b0c:	7245                	.2byte	0x7245
80027b0e:	6f72                	.2byte	0x6f72
80027b10:	7372                	.2byte	0x7372
80027b12:	6420                	.2byte	0x6420
80027b14:	7465                	.2byte	0x7465
80027b16:	6365                	.2byte	0x6365
80027b18:	6574                	.2byte	0x6574
80027b1a:	0a64                	.2byte	0xa64
80027b1c:	0000                	.2byte	0x0
80027b1e:	0000                	.2byte	0x0
80027b20:	6e6e6143          	.4byte	0x6e6e6143
80027b24:	7620746f          	jal	s0,8002f286 <__global_pointer$+0x551e>
80027b28:	6c61                	.2byte	0x6c61
80027b2a:	6469                	.2byte	0x6469
80027b2c:	7461                	.2byte	0x7461
80027b2e:	2065                	.2byte	0x2065
80027b30:	7265706f          	j	8007f256 <__global_pointer$+0x554ee>
80027b34:	7461                	.2byte	0x7461
80027b36:	6f69                	.2byte	0x6f69
80027b38:	206e                	.2byte	0x206e
80027b3a:	6f66                	.2byte	0x6f66
80027b3c:	2072                	.2byte	0x2072
80027b3e:	6874                	.2byte	0x6874
80027b40:	7365                	.2byte	0x7365
80027b42:	2065                	.2byte	0x2065
80027b44:	64656573          	csrrsi	a0,0x646,10
80027b48:	7620                	.2byte	0x7620
80027b4a:	6c61                	.2byte	0x6c61
80027b4c:	6575                	.2byte	0x6575
80027b4e:	70202c73          	csrr	s8,0x702
80027b52:	656c                	.2byte	0x656c
80027b54:	7361                	.2byte	0x7361
80027b56:	2065                	.2byte	0x2065
80027b58:	706d6f63          	bltu	s10,t1,80028276 <__fsym_cat_desc+0x12>
80027b5c:	7261                	.2byte	0x7261
80027b5e:	2065                	.2byte	0x2065
80027b60:	68746977          	.4byte	0x68746977
80027b64:	7220                	.2byte	0x7220
80027b66:	7365                	.2byte	0x7365
80027b68:	6c75                	.2byte	0x6c75
80027b6a:	7374                	.2byte	0x7374
80027b6c:	6f20                	.2byte	0x6f20
80027b6e:	206e                	.2byte	0x206e
80027b70:	2061                	.2byte	0x2061
80027b72:	776f6e6b          	.4byte	0x776f6e6b
80027b76:	206e                	.2byte	0x206e
80027b78:	6c70                	.2byte	0x6c70
80027b7a:	7461                	.2byte	0x7461
80027b7c:	6f66                	.2byte	0x6f66
80027b7e:	6d72                	.2byte	0x6d72
80027b80:	0a2e                	.2byte	0xa2e
80027b82:	0000                	.2byte	0x0
80027b84:	3035                	.2byte	0x3035
80027b86:	3231                	.2byte	0x3231
80027b88:	0000                	.2byte	0x0
80027b8a:	0000                	.2byte	0x0
80027b8c:	3231                	.2byte	0x3231
80027b8e:	00003433          	snez	s0,zero
80027b92:	0000                	.2byte	0x0
80027b94:	382d                	.2byte	0x382d
80027b96:	00003437          	lui	s0,0x3
80027b9a:	0000                	.2byte	0x0
80027b9c:	3232312b          	.4byte	0x3232312b
80027ba0:	0000                	.2byte	0x0
80027ba2:	0000                	.2byte	0x0
80027ba4:	352e3533          	.4byte	0x352e3533
80027ba8:	3434                	.2byte	0x3434
80027baa:	3030                	.2byte	0x3030
80027bac:	0000                	.2byte	0x0
80027bae:	0000                	.2byte	0x0
80027bb0:	312e                	.2byte	0x312e
80027bb2:	3332                	.2byte	0x3332
80027bb4:	3534                	.2byte	0x3534
80027bb6:	3030                	.2byte	0x3030
80027bb8:	0000                	.2byte	0x0
80027bba:	0000                	.2byte	0x0
80027bbc:	312d                	.2byte	0x312d
80027bbe:	3031                	.2byte	0x3031
80027bc0:	372e                	.2byte	0x372e
80027bc2:	3030                	.2byte	0x3030
80027bc4:	0000                	.2byte	0x0
80027bc6:	0000                	.2byte	0x0
80027bc8:	362e302b          	.4byte	0x362e302b
80027bcc:	3434                	.2byte	0x3434
80027bce:	3030                	.2byte	0x3030
80027bd0:	0000                	.2byte	0x0
80027bd2:	0000                	.2byte	0x0
80027bd4:	2e35                	.2byte	0x2e35
80027bd6:	3035                	.2byte	0x3035
80027bd8:	6530                	.2byte	0x6530
80027bda:	0000332b          	.4byte	0x332b
80027bde:	0000                	.2byte	0x0
80027be0:	2e2d                	.2byte	0x2e2d
80027be2:	3231                	.2byte	0x3231
80027be4:	322d6533          	.4byte	0x322d6533
80027be8:	0000                	.2byte	0x0
80027bea:	0000                	.2byte	0x0
80027bec:	382d                	.2byte	0x382d
80027bee:	382b6537          	lui	a0,0x382b6
80027bf2:	00003233          	snez	tp,zero
80027bf6:	0000                	.2byte	0x0
80027bf8:	362e302b          	.4byte	0x362e302b
80027bfc:	2d65                	.2byte	0x2d65
80027bfe:	3231                	.2byte	0x3231
80027c00:	0000                	.2byte	0x0
80027c02:	0000                	.2byte	0x0
80027c04:	3054                	.2byte	0x3054
80027c06:	332e                	.2byte	0x332e
80027c08:	2d65                	.2byte	0x2d65
80027c0a:	4631                	.2byte	0x4631
80027c0c:	0000                	.2byte	0x0
80027c0e:	0000                	.2byte	0x0
80027c10:	542d                	.2byte	0x542d
80027c12:	542e                	.2byte	0x542e
80027c14:	71542b2b          	.4byte	0x71542b2b
80027c18:	0000                	.2byte	0x0
80027c1a:	0000                	.2byte	0x0
80027c1c:	5431                	.2byte	0x5431
80027c1e:	65342e33          	.4byte	0x65342e33
80027c22:	7a34                	.2byte	0x7a34
80027c24:	0000                	.2byte	0x0
80027c26:	0000                	.2byte	0x0
80027c28:	302e3433          	.4byte	0x302e3433
80027c2c:	2d65                	.2byte	0x2d65
80027c2e:	5e54                	.2byte	0x5e54
80027c30:	0000                	.2byte	0x0
80027c32:	0000                	.2byte	0x0
80027c34:	5245                	.2byte	0x5245
80027c36:	4f52                	.2byte	0x4f52
80027c38:	3a52                	.2byte	0x3a52
80027c3a:	5020                	.2byte	0x5020
80027c3c:	656c                	.2byte	0x656c
80027c3e:	7361                	.2byte	0x7361
80027c40:	2065                	.2byte	0x2065
80027c42:	6f6d                	.2byte	0x6f6d
80027c44:	6964                	.2byte	0x6964
80027c46:	7966                	.2byte	0x7966
80027c48:	7420                	.2byte	0x7420
80027c4a:	6568                	.2byte	0x6568
80027c4c:	6420                	.2byte	0x6420
80027c4e:	7461                	.2byte	0x7461
80027c50:	7461                	.2byte	0x7461
80027c52:	7079                	.2byte	0x7079
80027c54:	7365                	.2byte	0x7365
80027c56:	6920                	.2byte	0x6920
80027c58:	206e                	.2byte	0x206e
80027c5a:	65726f63          	bltu	tp,s7,800282b8 <__fsym_cd_desc+0x1c>
80027c5e:	705f 726f 6d74      	.byte	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x6d
80027c64:	2e65                	.2byte	0x2e65
80027c66:	2168                	.2byte	0x2168
80027c68:	000a                	.2byte	0xa
80027c6a:	0000                	.2byte	0x0
80027c6c:	5452                	.2byte	0x5452
80027c6e:	542d                	.2byte	0x542d
80027c70:	7268                	.2byte	0x7268
80027c72:	6165                	.2byte	0x6165
80027c74:	2064                	.2byte	0x2064
80027c76:	50206e6f          	jal	t3,8002e178 <__global_pointer$+0x4410>
80027c7a:	32324c47          	.4byte	0x32324c47
80027c7e:	56522047          	.4byte	0x56522047
80027c82:	49203233          	.4byte	0x49203233
80027c86:	2050                	.2byte	0x2050
80027c88:	65726f43          	.4byte	0x65726f43
80027c8c:	0a21                	.2byte	0xa21
80027c8e:	0000                	.2byte	0x0
80027c90:	6f4c                	.2byte	0x6f4c
80027c92:	676e                	.2byte	0x676e
80027c94:	4c20                	.2byte	0x4c20
80027c96:	7669                	.2byte	0x7669
80027c98:	2065                	.2byte	0x2065
80027c9a:	52494843          	.4byte	0x52494843
80027c9e:	4920214f          	.4byte	0x4920214f
80027ca2:	206e                	.2byte	0x206e
80027ca4:	52494843          	.4byte	0x52494843
80027ca8:	6557204f          	.4byte	0x6557204f
80027cac:	5420                	.2byte	0x5420
80027cae:	7572                	.2byte	0x7572
80027cb0:	0a217473          	csrrci	s0,0xa2,2
80027cb4:	0000                	.2byte	0x0
80027cb6:	0000                	.2byte	0x0
80027cb8:	6649                	.2byte	0x6649
80027cba:	7920                	.2byte	0x7920
80027cbc:	7320756f          	jal	a0,8002f3ee <__global_pointer$+0x5686>
80027cc0:	6565                	.2byte	0x6565
80027cc2:	7420                	.2byte	0x7420
80027cc4:	6968                	.2byte	0x6968
80027cc6:	696c2073          	csrs	0x696,s8
80027cca:	656e                	.2byte	0x656e
80027ccc:	202c                	.2byte	0x202c
80027cce:	6874                	.2byte	0x6874
80027cd0:	6e65                	.2byte	0x6e65
80027cd2:	7520                	.2byte	0x7520
80027cd4:	7261                	.2byte	0x7261
80027cd6:	2074                	.2byte	0x2074
80027cd8:	6b726f77          	.4byte	0x6b726f77
80027cdc:	000a2173          	csrrs	sp,ustatus,s4
80027ce0:	6175                	.2byte	0x6175
80027ce2:	7472                	.2byte	0x7472
80027ce4:	0000                	.2byte	0x0
80027ce6:	0000                	.2byte	0x0
80027ce8:	654d                	.2byte	0x654d
80027cea:	6f6d                	.2byte	0x6f6d
80027cec:	7972                	.2byte	0x7972
80027cee:	6920                	.2byte	0x6920
80027cf0:	666e                	.2byte	0x666e
80027cf2:	000a3a6f          	jal	s4,800cacf2 <__bss_end+0x44536>
80027cf6:	0000                	.2byte	0x0
80027cf8:	7320                	.2byte	0x7320
80027cfa:	6174                	.2byte	0x6174
80027cfc:	203a6b63          	bltu	s4,gp,80027f12 <_rom_fops+0x22>
80027d00:	2578305b          	.4byte	0x2578305b
80027d04:	3830                	.2byte	0x3830
80027d06:	2c78                	.2byte	0x2c78
80027d08:	3020                	.2byte	0x3020
80027d0a:	2578                	.2byte	0x2578
80027d0c:	3830                	.2byte	0x3830
80027d0e:	2978                	.2byte	0x2978
80027d10:	000a                	.2byte	0xa
80027d12:	0000                	.2byte	0x0
80027d14:	2020                	.2byte	0x2020
80027d16:	6220                	.2byte	0x6220
80027d18:	203a7373          	csrrci	t1,0x203,20
80027d1c:	2578305b          	.4byte	0x2578305b
80027d20:	3830                	.2byte	0x3830
80027d22:	2c78                	.2byte	0x2c78
80027d24:	3020                	.2byte	0x3020
80027d26:	2578                	.2byte	0x2578
80027d28:	3830                	.2byte	0x3830
80027d2a:	2978                	.2byte	0x2978
80027d2c:	000a                	.2byte	0xa
80027d2e:	0000                	.2byte	0x0
80027d30:	2020                	.2byte	0x2020
80027d32:	6568                	.2byte	0x6568
80027d34:	7061                	.2byte	0x7061
80027d36:	203a                	.2byte	0x203a
80027d38:	2578305b          	.4byte	0x2578305b
80027d3c:	3830                	.2byte	0x3830
80027d3e:	2c78                	.2byte	0x2c78
80027d40:	3020                	.2byte	0x3020
80027d42:	2578                	.2byte	0x2578
80027d44:	3830                	.2byte	0x3830
80027d46:	2978                	.2byte	0x2978
80027d48:	000a                	.2byte	0xa
80027d4a:	0000                	.2byte	0x0
80027d4c:	6175                	.2byte	0x6175
80027d4e:	7472                	.2byte	0x7472
80027d50:	0000                	.2byte	0x0
80027d52:	0000                	.2byte	0x0
80027d54:	0071                	.2byte	0x71
80027d56:	0000                	.2byte	0x0
80027d58:	bf92                	.2byte	0xbf92
80027d5a:	ffff                	.2byte	0xffff
80027d5c:	00003f8f          	.4byte	0x3f8f
80027d60:	0001                	.2byte	0x1
80027d62:	0000                	.2byte	0x0
80027d64:	0000                	.2byte	0x0
80027d66:	0000                	.2byte	0x0
80027d68:	19a8                	.2byte	0x19a8
80027d6a:	8000                	.2byte	0x8000
80027d6c:	1a98                	.2byte	0x1a98
80027d6e:	8000                	.2byte	0x8000
80027d70:	19b8                	.2byte	0x19b8
80027d72:	8000                	.2byte	0x8000
80027d74:	1a98                	.2byte	0x1a98
80027d76:	8000                	.2byte	0x8000
80027d78:	19c0                	.2byte	0x19c0
80027d7a:	8000                	.2byte	0x8000
80027d7c:	1a98                	.2byte	0x1a98
80027d7e:	8000                	.2byte	0x8000
80027d80:	19b8                	.2byte	0x19b8
80027d82:	8000                	.2byte	0x8000
80027d84:	19a8                	.2byte	0x19a8
80027d86:	8000                	.2byte	0x8000
80027d88:	19a8                	.2byte	0x19a8
80027d8a:	8000                	.2byte	0x8000
80027d8c:	19c0                	.2byte	0x19c0
80027d8e:	8000                	.2byte	0x8000
80027d90:	19b8                	.2byte	0x19b8
80027d92:	8000                	.2byte	0x8000
80027d94:	1980                	.2byte	0x1980
80027d96:	8000                	.2byte	0x8000
80027d98:	1980                	.2byte	0x1980
80027d9a:	8000                	.2byte	0x8000
80027d9c:	1980                	.2byte	0x1980
80027d9e:	8000                	.2byte	0x8000
80027da0:	19c0                	.2byte	0x19c0
80027da2:	8000                	.2byte	0x8000

80027da4 <__clz_tab>:
80027da4:	0100 0202 0303 0303 0404 0404 0404 0404     ................
80027db4:	0505 0505 0505 0505 0505 0505 0505 0505     ................
80027dc4:	0606 0606 0606 0606 0606 0606 0606 0606     ................
80027dd4:	0606 0606 0606 0606 0606 0606 0606 0606     ................
80027de4:	0707 0707 0707 0707 0707 0707 0707 0707     ................
80027df4:	0707 0707 0707 0707 0707 0707 0707 0707     ................
80027e04:	0707 0707 0707 0707 0707 0707 0707 0707     ................
80027e14:	0707 0707 0707 0707 0707 0707 0707 0707     ................
80027e24:	0808 0808 0808 0808 0808 0808 0808 0808     ................
80027e34:	0808 0808 0808 0808 0808 0808 0808 0808     ................
80027e44:	0808 0808 0808 0808 0808 0808 0808 0808     ................
80027e54:	0808 0808 0808 0808 0808 0808 0808 0808     ................
80027e64:	0808 0808 0808 0808 0808 0808 0808 0808     ................
80027e74:	0808 0808 0808 0808 0808 0808 0808 0808     ................
80027e84:	0808 0808 0808 0808 0808 0808 0808 0808     ................
80027e94:	0808 0808 0808 0808 0808 0808 0808 0808     ................

80027ea4 <_device_fops>:
80027ea4:	5b10 8000 5a88 8000 592c 8000 5990 8000     .[...Z..,Y...Y..
80027eb4:	5a0c 8000 0000 0000 0000 0000 5ee0 8000     .Z...........^..
80027ec4:	6048 8000                                   H`..

80027ec8 <_device_fs>:
80027ec8:	5cf4 8002 0000 0000 7ea4 8002 5900 8000     .\.......~...Y..
	...
80027ee8:	5d2c 8000 0000 0000                         ,]......

80027ef0 <_rom_fops>:
80027ef0:	65e4 8000 65b8 8000 611c 8000 647c 8000     .e...e...a..|d..
	...
80027f08:	6560 8000 67e0 8000 0000 0000               `e...g......

80027f14 <_romfs>:
80027f14:	5cfc 8002 0000 0000 7ef0 8002 60a8 8000     .\.......~...`..
80027f24:	60f8 8000 0000 0000 0000 0000 0000 0000     .`..............
80027f34:	66f0 8000 0000 0000                         .f......

80027f3c <__fsym_list_fd_name>:
80027f3c:	696c 7473 665f 0064                         list_fd.

80027f44 <__fsym_list_fd_desc>:
80027f44:	696c 7473 6620 6c69 2065 6564 6373 6972     list file descri
80027f54:	7470 726f 0000 0000                         ptor....

80027f5c <__fsym_clear_name>:
80027f5c:	6c63 6165 0072 0000                         clear...

80027f64 <__fsym_clear_desc>:
80027f64:	6c63 6165 2072 6874 2065 6574 6d72 6e69     clear the termin
80027f74:	6c61 7320 7263 6565 006e 0000               al screen...

80027f80 <__fsym_version_name>:
80027f80:	6576 7372 6f69 006e                         version.

80027f88 <__fsym_version_desc>:
80027f88:	6873 776f 5220 2d54 6854 6572 6461 7620     show RT-Thread v
80027f98:	7265 6973 6e6f 6920 666e 726f 616d 6974     ersion informati
80027fa8:	6e6f 0000                                   on..

80027fac <__fsym_list_thread_name>:
80027fac:	696c 7473 745f 7268 6165 0064               list_thread.

80027fb8 <__fsym_list_thread_desc>:
80027fb8:	696c 7473 7420 7268 6165 0064               list thread.

80027fc4 <__fsym_list_sem_name>:
80027fc4:	696c 7473 735f 6d65 0000 0000               list_sem....

80027fd0 <__fsym_list_sem_desc>:
80027fd0:	696c 7473 7320 6d65 7061 6f68 6572 6920     list semaphore i
80027fe0:	206e 7973 7473 6d65 0000 0000               n system....

80027fec <__fsym_list_event_name>:
80027fec:	696c 7473 655f 6576 746e 0000               list_event..

80027ff8 <__fsym_list_event_desc>:
80027ff8:	696c 7473 6520 6576 746e 6920 206e 7973     list event in sy
80028008:	7473 6d65 0000 0000                         stem....

80028010 <__fsym_list_mutex_name>:
80028010:	696c 7473 6d5f 7475 7865 0000               list_mutex..

8002801c <__fsym_list_mutex_desc>:
8002801c:	696c 7473 6d20 7475 7865 6920 206e 7973     list mutex in sy
8002802c:	7473 6d65 0000 0000                         stem....

80028034 <__fsym_list_mailbox_name>:
80028034:	696c 7473 6d5f 6961 626c 786f 0000 0000     list_mailbox....

80028044 <__fsym_list_mailbox_desc>:
80028044:	696c 7473 6d20 6961 206c 6f62 2078 6e69     list mail box in
80028054:	7320 7379 6574 006d                          system.

8002805c <__fsym_list_msgqueue_name>:
8002805c:	696c 7473 6d5f 6773 7571 7565 0065 0000     list_msgqueue...

8002806c <__fsym_list_msgqueue_desc>:
8002806c:	696c 7473 6d20 7365 6173 6567 7120 6575     list message que
8002807c:	6575 6920 206e 7973 7473 6d65 0000 0000     ue in system....

8002808c <__fsym_list_mempool_name>:
8002808c:	696c 7473 6d5f 6d65 6f70 6c6f 0000 0000     list_mempool....

8002809c <__fsym_list_mempool_desc>:
8002809c:	696c 7473 6d20 6d65 726f 2079 6f70 6c6f     list memory pool
800280ac:	6920 206e 7973 7473 6d65 0000                in system..

800280b8 <__fsym_list_timer_name>:
800280b8:	696c 7473 745f 6d69 7265 0000               list_timer..

800280c4 <__fsym_list_timer_desc>:
800280c4:	696c 7473 7420 6d69 7265 6920 206e 7973     list timer in sy
800280d4:	7473 6d65 0000 0000                         stem....

800280dc <__fsym_list_device_name>:
800280dc:	696c 7473 645f 7665 6369 0065               list_device.

800280e8 <__fsym_list_device_desc>:
800280e8:	696c 7473 6420 7665 6369 2065 6e69 7320     list device in s
800280f8:	7379 6574 006d 0000                         ystem...

80028100 <__fsym_list_name>:
80028100:	696c 7473 0000 0000                         list....

80028108 <__fsym_list_desc>:
80028108:	696c 7473 6f20 6a62 6365 7374 0000 0000     list objects....

80028118 <device_type_str>:
80028118:	646c 8002 6480 8002 6490 8002 64a4 8002     ld...d...d...d..
80028128:	64b0 8002 64bc 8002 64c0 8002 64d0 8002     .d...d...d...d..
80028138:	64e0 8002 64e8 8002 64fc 8002 650c 8002     .d...d...d...e..
80028148:	6518 8002 6520 8002 652c 8002 6538 8002     .e.. e..,e..8e..
80028158:	654c 8002 6554 8002 6564 8002 6574 8002     Le..Te..de..te..
80028168:	658c 8002 659c 8002 65ac 8002 65b8 8002     .e...e...e...e..
80028178:	65c8 8002 65d4 8002 65e0 8002 65ec 8002     .e...e...e...e..
80028188:	65f8 8002 6604 8002                         .e...f..

80028190 <__fsym_help_name>:
80028190:	6568 706c 0000 0000                         help....

80028198 <__fsym_help_desc>:
80028198:	5452 542d 7268 6165 2064 6873 6c65 206c     RT-Thread shell 
800281a8:	6568 706c 002e 0000                         help....

800281b0 <__fsym_ps_name>:
800281b0:	7370 0000                                   ps..

800281b4 <__fsym_ps_desc>:
800281b4:	694c 7473 7420 7268 6165 7364 6920 206e     List threads in 
800281c4:	6874 2065 7973 7473 6d65 002e               the system..

800281d0 <__fsym_free_name>:
800281d0:	7266 6565 0000 0000                         free....

800281d8 <__fsym_free_desc>:
800281d8:	6853 776f 7420 6568 6d20 6d65 726f 2079     Show the memory 
800281e8:	7375 6761 2065 6e69 7420 6568 7320 7379     usage in the sys
800281f8:	6574 2e6d 0000 0000                         tem.....

80028200 <__fsym_ls_name>:
80028200:	736c 0000                                   ls..

80028204 <__fsym_ls_desc>:
80028204:	694c 7473 6920 666e 726f 616d 6974 6e6f     List information
80028214:	6120 6f62 7475 7420 6568 4620 4c49 7345      about the FILEs
80028224:	002e 0000                                   ....

80028228 <__fsym_cp_name>:
80028228:	7063 0000                                   cp..

8002822c <__fsym_cp_desc>:
8002822c:	6f43 7970 5320 554f 4352 2045 6f74 4420     Copy SOURCE to D
8002823c:	5345 2e54 0000 0000                         EST.....

80028244 <__fsym_mv_name>:
80028244:	766d 0000                                   mv..

80028248 <__fsym_mv_desc>:
80028248:	6552 616e 656d 5320 554f 4352 2045 6f74     Rename SOURCE to
80028258:	4420 5345 2e54 0000                          DEST...

80028260 <__fsym_cat_name>:
80028260:	6163 0074                                   cat.

80028264 <__fsym_cat_desc>:
80028264:	6f43 636e 7461 6e65 7461 2065 4946 454c     Concatenate FILE
80028274:	7328 0029                                   (s).

80028278 <__fsym_rm_name>:
80028278:	6d72 0000                                   rm..

8002827c <__fsym_rm_desc>:
8002827c:	6552 6f6d 6576 7528 6c6e 6e69 296b 7420     Remove(unlink) t
8002828c:	6568 4620 4c49 2845 2973 002e               he FILE(s)..

80028298 <__fsym_cd_name>:
80028298:	6463 0000                                   cd..

8002829c <__fsym_cd_desc>:
8002829c:	6843 6e61 6567 7420 6568 7320 6568 6c6c     Change the shell
800282ac:	7720 726f 696b 676e 6420 7269 6365 6f74      working directo
800282bc:	7972 002e                                   ry..

800282c0 <__fsym_pwd_name>:
800282c0:	7770 0064                                   pwd.

800282c4 <__fsym_pwd_desc>:
800282c4:	7250 6e69 2074 6874 2065 616e 656d 6f20     Print the name o
800282d4:	2066 6874 2065 7563 7272 6e65 2074 6f77     f the current wo
800282e4:	6b72 6e69 2067 6964 6572 7463 726f 2e79     rking directory.
800282f4:	0000 0000                                   ....

800282f8 <__fsym_mkdir_name>:
800282f8:	6b6d 6964 0072 0000                         mkdir...

80028300 <__fsym_mkdir_desc>:
80028300:	7243 6165 6574 7420 6568 4420 5249 4345     Create the DIREC
80028310:	4f54 5952 002e 0000                         TORY....

80028318 <__fsym_mkfs_name>:
80028318:	6b6d 7366 0000 0000                         mkfs....

80028320 <__fsym_mkfs_desc>:
80028320:	6f66 6d72 7461 6420 7369 206b 6977 6874     format disk with
80028330:	6620 6c69 2065 7973 7473 6d65 0000 0000      file system....

80028340 <__fsym_mount_name>:
80028340:	6f6d 6e75 0074 0000                         mount...

80028348 <__fsym_mount_desc>:
80028348:	6f6d 6e75 2074 643c 7665 6369 3e65 3c20     mount <device> <
80028358:	6f6d 6e75 7074 696f 746e 203e 663c 7473     mountpoint> <fst
80028368:	7079 3e65 0000 0000                         ype>....

80028370 <__fsym_umount_name>:
80028370:	6d75 756f 746e 0000                         umount..

80028378 <__fsym_umount_desc>:
80028378:	6e55 6f6d 6e75 2074 6564 6976 6563 6620     Unmount device f
80028388:	6f72 206d 6966 656c 7320 7379 6574 006d     rom file system.

80028398 <__fsym_df_name>:
80028398:	6664 0000                                   df..

8002839c <__fsym_df_desc>:
8002839c:	6964 6b73 6620 6572 0065 0000               disk free...

800283a8 <__fsym_echo_name>:
800283a8:	6365 6f68 0000 0000                         echo....

800283b0 <__fsym_echo_desc>:
800283b0:	6365 6f68 7320 7274 6e69 2067 6f74 6620     echo string to f
800283c0:	6c69 0065                                   ile.

800283c4 <__fsym_tail_name>:
800283c4:	6174 6c69 0000 0000                         tail....

800283cc <__fsym_tail_desc>:
800283cc:	7270 6e69 2074 6874 2065 616c 7473 4e20     print the last N
800283dc:	2d20 6c20 6e69 7365 6420 7461 2061 666f      - lines data of
800283ec:	7420 6568 6720 7669 6e65 6620 6c69 0065      the given file.
800283fc:	9d88 fffe 9d88 fffe 9ce0 fffe 9d88 fffe     ................
8002840c:	9cd8 fffe 9d88 fffe 9ce8 fffe 9d88 fffe     ................
8002841c:	9d38 fffe 9dd4 fffe 9de4 fffe 9df4 fffe     8...............
8002842c:	9e04 fffe 9e14 fffe 9e24 fffe 9e34 fffe     ........$...4...
8002843c:	9e44 fffe 9e54 fffe 9e64 fffe 9e74 fffe     D...T...d...t...
8002844c:	9e84 fffe c950 fffe c9b8 fffe c9b8 fffe     ....P...........
8002845c:	c9b8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
8002846c:	c9b8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
8002847c:	c9b8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
8002848c:	c9b8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
8002849c:	c9b8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
800284ac:	c9b8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
800284bc:	c9b8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
800284cc:	c9b8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
800284dc:	c9b8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
800284ec:	c9b8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
800284fc:	c9b8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
8002850c:	c9b8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
8002851c:	c990 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
8002852c:	c9b8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
8002853c:	c9b8 fffe c9b8 fffe c978 fffe c6d0 fffe     ........x.......
8002854c:	c9a8 fffe c9b8 fffe c9b8 fffe c9b8 fffe     ................
8002855c:	c9b8 fffe c9a8 fffe c9b8 fffe c9b8 fffe     ................
8002856c:	c9b8 fffe c9b8 fffe c9b8 fffe c984 fffe     ................
8002857c:	c8e4 fffe c9b8 fffe c9b8 fffe c790 fffe     ................
8002858c:	c9b8 fffe ca24 fffe c9b8 fffe c9b8 fffe     ....$...........
8002859c:	c99c fffe                                   ....

800285a0 <__lowest_bit_bitmap>:
800285a0:	0000 0001 0002 0001 0003 0001 0002 0001     ................
800285b0:	0004 0001 0002 0001 0003 0001 0002 0001     ................
800285c0:	0005 0001 0002 0001 0003 0001 0002 0001     ................
800285d0:	0004 0001 0002 0001 0003 0001 0002 0001     ................
800285e0:	0006 0001 0002 0001 0003 0001 0002 0001     ................
800285f0:	0004 0001 0002 0001 0003 0001 0002 0001     ................
80028600:	0005 0001 0002 0001 0003 0001 0002 0001     ................
80028610:	0004 0001 0002 0001 0003 0001 0002 0001     ................
80028620:	0007 0001 0002 0001 0003 0001 0002 0001     ................
80028630:	0004 0001 0002 0001 0003 0001 0002 0001     ................
80028640:	0005 0001 0002 0001 0003 0001 0002 0001     ................
80028650:	0004 0001 0002 0001 0003 0001 0002 0001     ................
80028660:	0006 0001 0002 0001 0003 0001 0002 0001     ................
80028670:	0004 0001 0002 0001 0003 0001 0002 0001     ................
80028680:	0005 0001 0002 0001 0003 0001 0002 0001     ................
80028690:	0004 0001 0002 0001 0003 0001 0002 0001     ................

800286a0 <large_digits.2>:
800286a0:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
800286b0:	0000 0000                                   ....

800286b4 <small_digits.1>:
800286b4:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
800286c4:	0000 0000                                   ....

800286c8 <__fsym_memcheck_name>:
800286c8:	656d 636d 6568 6b63 0000 0000               memcheck....

800286d4 <__fsym_memcheck_desc>:
800286d4:	6863 6365 206b 656d 6f6d 7972 6420 7461     check memory dat
800286e4:	0061 0000                                   a...

800286e8 <__fsym_memtrace_name>:
800286e8:	656d 746d 6172 6563 0000 0000               memtrace....

800286f4 <__fsym_memtrace_desc>:
800286f4:	7564 706d 6d20 6d65 726f 2079 7274 6361     dump memory trac
80028704:	2065 6e69 6f66 6d72 7461 6f69 006e 0000     e information...
80028714:	fcf8 fffe fce4 fffe fd0c fffe fd28 fffe     ............(...
80028724:	fd44 fffe fd70 fffe                         D...p...

8002872c <__fsym_coremark_main_name>:
8002872c:	6f63 6572 616d 6b72 6d5f 6961 006e 0000     coremark_main...

8002873c <__fsym_coremark_main_desc>:
8002873c:	7552 206e 6f43 6572 616d 6b72 7720 7469     Run Coremark wit
8002874c:	2068 6564 6166 6c75 2074 7261 7567 656d     h default argume
8002875c:	746e 0073 2fe4 ffff 32a0 ffff 3074 ffff     nts../...2..t0..
8002876c:	31c0 ffff 30f4 ffff 3154 ffff 3218 ffff     .1...0..T1...2..
8002877c:	326c ffff 338c ffff 3328 ffff 333c ffff     l2...3..(3..<3..
8002878c:	3350 ffff 3364 ffff 3378 ffff               P3..d3..x3..

80028798 <_uart_ops>:
80028798:	bfdc 8001 c01c 8001 c060 8001 c0b4 8001     ........`.......
800287a8:	0000 0000                                   ....

800287ac <_ctype_>:
800287ac:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
800287bc:	2020 2020 2020 2020 2020 2020 2020 2020                     
800287cc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
800287dc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
800287ec:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
800287fc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
8002880c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
8002881c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
8002882c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
800288b0:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
800288c0:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
800288d0:	0000 0000 3130 3332 3534 3736 3938 4241     ....0123456789AB
800288e0:	4443 4645 0000 0000 6e28 6c75 296c 0000     CDEF....(null)..
800288f0:	0030 0000 ddcc 8001 d534 8001 d534 8001     0.......4...4...
80028900:	ddc0 8001 d534 8001 d534 8001 d534 8001     ....4...4...4...
80028910:	d72c 8001 d534 8001 d534 8001 dcb8 8001     ,...4...4.......
80028920:	dd0c 8001 d534 8001 dcd0 8001 ddf0 8001     ....4...........
80028930:	d534 8001 dde4 8001 d500 8001 d500 8001     4...............
80028940:	d500 8001 d500 8001 d500 8001 d500 8001     ................
80028950:	d500 8001 d500 8001 d500 8001 d534 8001     ............4...
80028960:	d534 8001 d534 8001 d534 8001 d534 8001     4...4...4...4...
80028970:	d534 8001 d534 8001 d89c 8001 d534 8001     4...4.......4...
80028980:	dbf0 8001 d77c 8001 d89c 8001 d89c 8001     ....|...........
80028990:	d89c 8001 d534 8001 d534 8001 d534 8001     ....4...4...4...
800289a0:	d534 8001 ddb4 8001 d534 8001 d534 8001     4.......4...4...
800289b0:	d800 8001 d534 8001 d534 8001 d534 8001     ....4...4...4...
800289c0:	dc18 8001 d534 8001 dcdc 8001 d534 8001     ....4.......4...
800289d0:	d534 8001 e768 8001 d534 8001 d534 8001     4...h...4...4...
800289e0:	d534 8001 d534 8001 d534 8001 d534 8001     4...4...4...4...
800289f0:	d534 8001 d534 8001 d89c 8001 d534 8001     4...4.......4...
80028a00:	dbf0 8001 d780 8001 d89c 8001 d89c 8001     ................
80028a10:	d89c 8001 dda0 8001 d780 8001 d770 8001     ............p...
80028a20:	d534 8001 dd8c 8001 d534 8001 dd58 8001     4.......4...X...
80028a30:	d804 8001 dd1c 8001 d770 8001 d534 8001     ........p...4...
80028a40:	dc18 8001 d768 8001 e760 8001 d534 8001     ....h...`...4...
80028a50:	d534 8001 e804 8001 d534 8001 d768 8001     4.......4...h...
80028a60:	f478 8001 f070 8001 f070 8001 f070 8001     x...p...p...p...
80028a70:	f400 8001 f314 8001 f070 8001 f070 8001     ........p...p...
80028a80:	f070 8001 f070 8001 f070 8001 f070 8001     p...p...p...p...
80028a90:	f070 8001 f070 8001 f070 8001 f070 8001     p...p...p...p...
80028aa0:	f070 8001 f070 8001 f070 8001 f070 8001     p...p...p...p...
80028ab0:	f070 8001 f070 8001 f070 8001 f070 8001     p...p...p...p...
80028ac0:	f070 8001 f070 8001 f070 8001 f070 8001     p...p...p...p...
80028ad0:	f070 8001 f070 8001 f070 8001 f070 8001     p...p...p...p...
80028ae0:	f478 8001 f070 8001 f070 8001 f070 8001     x...p...p...p...
80028af0:	f400 8001 f314 8001                         ........

80028af8 <zeroes.0>:
80028af8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

80028b08 <blanks.1>:
80028b08:	2020 2020 2020 2020 2020 2020 2020 2020                     
80028b18:	0618 8002 0118 8002 0118 8002 060c 8002     ................
80028b28:	0118 8002 0118 8002 0118 8002 05b0 8002     ................
80028b38:	0118 8002 0118 8002 02b4 8002 0548 8002     ............H...
80028b48:	0118 8002 053c 8002 0564 8002 0118 8002     ....<...d.......
80028b58:	0558 8002 00e4 8002 00e4 8002 00e4 8002     X...............
80028b68:	00e4 8002 00e4 8002 00e4 8002 00e4 8002     ................
80028b78:	00e4 8002 00e4 8002 0118 8002 0118 8002     ................
80028b88:	0118 8002 0118 8002 0118 8002 0118 8002     ................
80028b98:	0118 8002 0118 8002 0118 8002 0504 8002     ................
80028ba8:	02d4 8002 0118 8002 0118 8002 0118 8002     ................
80028bb8:	0118 8002 0118 8002 0118 8002 0118 8002     ................
80028bc8:	0118 8002 0118 8002 0118 8002 0630 8002     ............0...
80028bd8:	0118 8002 0118 8002 0118 8002 04b8 8002     ................
80028be8:	0118 8002 06c4 8002 0118 8002 0118 8002     ................
80028bf8:	0ebc 8002 0118 8002 0118 8002 0118 8002     ................
80028c08:	0118 8002 0118 8002 0118 8002 0118 8002     ................
80028c18:	0118 8002 0118 8002 0118 8002 0504 8002     ................
80028c28:	02d8 8002 0118 8002 0118 8002 0118 8002     ................
80028c38:	06b0 8002 02d8 8002 02c8 8002 0118 8002     ................
80028c48:	069c 8002 0118 8002 07d0 8002 0eb4 8002     ................
80028c58:	0780 8002 02c8 8002 0118 8002 04b8 8002     ................
80028c68:	02c0 8002 0eac 8002 0118 8002 0118 8002     ................
80028c78:	0f0c 8002 0118 8002 02c0 8002               ............

80028c84 <zeroes.0>:
80028c84:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

80028c94 <blanks.1>:
80028c94:	2020 2020 2020 2020 2020 2020 2020 2020                     
80028ca4:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......
	...
80028cc0:	ffff ffff ffff ffff ffff ffff ffff 7ffe     ................
80028cd0:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
80028ce0:	6142 6c6c 636f 7320 6375 6563 6465 6465     Balloc succeeded
80028cf0:	0000 0000 682f 6d6f 2f65 6863 7269 2f6f     ..../home/chiro/
80028d00:	6967 7374 722f 7369 7663 672d 756e 742d     gits/riscv-gnu-t
80028d10:	6f6f 636c 6168 6e69 6e2f 7765 696c 2f62     oolchain/newlib/
80028d20:	656e 6c77 6269 6c2f 6269 2f63 7473 6c64     newlib/libc/stdl
80028d30:	6269 6d2f 7270 6365 632e 0000               ib/mprec.c..

80028d3c <p05.0>:
80028d3c:	0005 0000 0019 0000 007d 0000               ........}...

80028d48 <__mprec_tens>:
80028d48:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
80028d58:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
80028d68:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
80028d78:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
80028d88:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
80028d98:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
80028da8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
80028db8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
80028dc8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
80028dd8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
80028de8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
80028df8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
80028e08:	9db4 79d9 7843 44ea 202c 7566 636e 6974     ...yCx.D, functi
80028e18:	6e6f 203a 0000 0000 7361 6573 7472 6f69     on: ....assertio
80028e28:	206e 2522 2273 6620 6961 656c 3a64 6620     n "%s" failed: f
80028e38:	6c69 2065 2522 2273 202c 696c 656e 2520     ile "%s", line %
80028e48:	2564 2573 0a73 0000                         d%s%s...

80028e50 <__fsym_list_fd>:
80028e50:	7f3c 8002 7f44 8002 7510 8000               <...D....u..

80028e5c <__fsym_clear>:
80028e5c:	7f5c 8002 7f64 8002 c910 8000               \...d.......

80028e68 <__fsym_version>:
80028e68:	7f80 8002 7f88 8002 c944 8000               ........D...

80028e74 <__fsym_list_thread>:
80028e74:	7fac 8002 7fb8 8002 cb94 8000               ............

80028e80 <__fsym_list_sem>:
80028e80:	7fc4 8002 7fd0 8002 ceec 8000               ............

80028e8c <__fsym_list_event>:
80028e8c:	7fec 8002 7ff8 8002 d0c8 8000               ............

80028e98 <__fsym_list_mutex>:
80028e98:	8010 8002 801c 8002 d284 8000               ............

80028ea4 <__fsym_list_mailbox>:
80028ea4:	8034 8002 8044 8002 d408 8000               4...D.......

80028eb0 <__fsym_list_msgqueue>:
80028eb0:	805c 8002 806c 8002 d614 8000               \...l.......

80028ebc <__fsym_list_mempool>:
80028ebc:	808c 8002 809c 8002 d7f0 8000               ............

80028ec8 <__fsym_list_timer>:
80028ec8:	80b8 8002 80c4 8002 d9e0 8000               ............

80028ed4 <__fsym_list_device>:
80028ed4:	80dc 8002 80e8 8002 db8c 8000               ............

80028ee0 <__fsym_list>:
80028ee0:	8100 8002 8108 8002 dd20 8000               ........ ...

80028eec <__fsym_help>:
80028eec:	8190 8002 8198 8002 dfb4 8000               ............

80028ef8 <__fsym_ps>:
80028ef8:	81b0 8002 81b4 8002 e054 8000               ........T...

80028f04 <__fsym_free>:
80028f04:	81d0 8002 81d8 8002 e088 8000               ............

80028f10 <__fsym_ls>:
80028f10:	8200 8002 8204 8002 ef8c 8000               ............

80028f1c <__fsym_cp>:
80028f1c:	8228 8002 822c 8002 efec 8000               (...,.......

80028f28 <__fsym_mv>:
80028f28:	8244 8002 8248 8002 f068 8000               D...H...h...

80028f34 <__fsym_cat>:
80028f34:	8260 8002 8264 8002 f270 8000               `...d...p...

80028f40 <__fsym_rm>:
80028f40:	8278 8002 827c 8002 f500 8000               x...|.......

80028f4c <__fsym_cd>:
80028f4c:	8298 8002 829c 8002 f7e8 8000               ............

80028f58 <__fsym_pwd>:
80028f58:	82c0 8002 82c4 8002 f880 8000               ............

80028f64 <__fsym_mkdir>:
80028f64:	82f8 8002 8300 8002 f8c4 8000               ............

80028f70 <__fsym_mkfs>:
80028f70:	8318 8002 8320 8002 f934 8000               .... ...4...

80028f7c <__fsym_mount>:
80028f7c:	8340 8002 8348 8002 fa28 8000               @...H...(...

80028f88 <__fsym_umount>:
80028f88:	8370 8002 8378 8002 fb94 8000               p...x.......

80028f94 <__fsym_df>:
80028f94:	8398 8002 839c 8002 fc30 8000               ........0...

80028fa0 <__fsym_echo>:
80028fa0:	83a8 8002 83b0 8002 fce8 8000               ............

80028fac <__fsym_tail>:
80028fac:	83c4 8002 83cc 8002 fdec 8000               ............

80028fb8 <__fsym_memcheck>:
80028fb8:	86c8 8002 86d4 8002 61e4 8001               .........a..

80028fc4 <__fsym_memtrace>:
80028fc4:	86e8 8002 86f4 8002 63cc 8001               .........c..

80028fd0 <__fsym_coremark_main>:
80028fd0:	872c 8002 873c 8002 9634 8001               ,...<...4...

80028fdc <__rt_init_rti_start>:
80028fdc:	2648 8001                                   H&..

80028fe0 <__rt_init_rti_board_start>:
80028fe0:	2668 8001                                   h&..

80028fe4 <__rt_init_rti_board_end>:
80028fe4:	2688 8001                                   .&..

80028fe8 <__rt_init_dfs_init>:
80028fe8:	69ac 8000                                   .i..

80028fec <__rt_init_dfs_romfs_init>:
80028fec:	6978 8000                                   xi..

80028ff0 <__rt_init_finsh_system_init>:
80028ff0:	1268 8001                                   h...

80028ff4 <__rt_init_rti_end>:
80028ff4:	26a8 8001                                   .&..
