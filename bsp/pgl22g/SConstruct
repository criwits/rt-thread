import os
import sys
import rtconfig

from rtconfig import RTT_ROOT

sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools')]
from building import *

TARGET = 'rtthread.' + rtconfig.TARGET_EXT

DefaultEnvironment(tools=[])
env = Environment(tools = ['mingw'],
    AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
    CC = rtconfig.CC, CFLAGS = rtconfig.CFLAGS,
    CXX = rtconfig.CXX, CXXFLAGS = rtconfig.CXXFLAGS,
    AR = rtconfig.AR, ARFLAGS = '-rc',
    LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)
env['ASCOM'] = env['ASPPCOM']

Export('RTT_ROOT')
Export('rtconfig')
rtconfig.CPU='pgl22g'
rtconfig.ARCH='risc-v'

# prepare building environment
objs = PrepareBuilding(env, RTT_ROOT, has_libcpu = False)


stack_lds = open('link_stacksize.lds', 'w')

stack_size = 4096
if GetDepend('__STACKSIZE__'): stack_size = GetDepend('__STACKSIZE__')
stack_lds.write('__STACKSIZE__ = %d;\r\n' % stack_size)

start_addr = int(0x80000000)
if GetDepend('__START_ADDR__'): start_addr = int(GetDepend('__START_ADDR__'), 16)
stack_lds.write('__START_ADDR__ = 0x%x;\r\n' % start_addr)

stack_addr = int(0x88000000)
if GetDepend('__STACK_ADDR__'): stack_addr = int(GetDepend('__STACK_ADDR__'), 16)
stack_lds.write('__STACK_ADDR__ = 0x%x;\r\n' % stack_addr)

stack_lds.close()

# make a building
DoBuilding(TARGET, objs)
